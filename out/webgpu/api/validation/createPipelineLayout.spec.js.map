{"version":3,"file":"createPipelineLayout.spec.js","names":["description","makeTestGroup","bufferBindingTypeInfo","kBufferBindingTypes","ValidationTest","clone","descriptor","JSON","parse","stringify","g","test","desc","paramsSubcasesOnly","u","combine","fn","t","type","visibility","params","maxDynamic","perPipelineLimitClass","maxDynamicBufferBindings","binding","push","buffer","hasDynamicOffset","maxDynamicBufferBindGroupLayout","device","createBindGroupLayout","entries","goodDescriptor","goodPipelineLayoutDescriptor","bindGroupLayouts","createPipelineLayout","badDescriptor","badPipelineLayoutDescriptor","expectValidationError","bindGroupLayoutDescriptor","maxBindGroupLayouts","map","layout0Mismatched","layout1Mismatched","beforeAllSubcases","selectMismatchedDeviceOrSkipTestCase","undefined","mismatched","bglDescriptor","layout0","mismatchedDevice","layout1"],"sources":["../../../../src/webgpu/api/validation/createPipelineLayout.spec.ts"],"sourcesContent":["export const description = `\ncreatePipelineLayout validation tests.\n\nTODO: review existing tests, write descriptions, and make sure tests are complete.\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { bufferBindingTypeInfo, kBufferBindingTypes } from '../../capability_info.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nfunction clone<T extends GPUBindGroupLayoutDescriptor>(descriptor: T): T {\n  return JSON.parse(JSON.stringify(descriptor));\n}\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('number_of_dynamic_buffers_exceeds_the_maximum_value')\n  .desc(\n    `\n    Test that creating a pipeline layout fails with a validation error if the number of dynamic\n    buffers exceeds the maximum value in the pipeline layout.\n    - Test that creation of a pipeline using the maximum number of dynamic buffers added a dynamic\n      buffer fails.\n\n    TODO(#230): Update to enforce per-stage and per-pipeline-layout limits on BGLs as well.\n  `\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('visibility', [0, 2, 4, 6])\n      .combine('type', kBufferBindingTypes)\n  )\n  .fn(t => {\n    const { type, visibility } = t.params;\n    const { maxDynamic } = bufferBindingTypeInfo({ type }).perPipelineLimitClass;\n\n    const maxDynamicBufferBindings: GPUBindGroupLayoutEntry[] = [];\n    for (let binding = 0; binding < maxDynamic; binding++) {\n      maxDynamicBufferBindings.push({\n        binding,\n        visibility,\n        buffer: { type, hasDynamicOffset: true },\n      });\n    }\n\n    const maxDynamicBufferBindGroupLayout = t.device.createBindGroupLayout({\n      entries: maxDynamicBufferBindings,\n    });\n\n    const goodDescriptor = {\n      entries: [{ binding: 0, visibility, buffer: { type, hasDynamicOffset: false } }],\n    };\n\n    const goodPipelineLayoutDescriptor = {\n      bindGroupLayouts: [\n        maxDynamicBufferBindGroupLayout,\n        t.device.createBindGroupLayout(goodDescriptor),\n      ],\n    };\n\n    // Control case\n    t.device.createPipelineLayout(goodPipelineLayoutDescriptor);\n\n    // Check dynamic buffers exceed maximum in pipeline layout.\n    const badDescriptor = clone(goodDescriptor);\n    badDescriptor.entries[0].buffer.hasDynamicOffset = true;\n\n    const badPipelineLayoutDescriptor = {\n      bindGroupLayouts: [\n        maxDynamicBufferBindGroupLayout,\n        t.device.createBindGroupLayout(badDescriptor),\n      ],\n    };\n\n    t.expectValidationError(() => {\n      t.device.createPipelineLayout(badPipelineLayoutDescriptor);\n    });\n  });\n\ng.test('number_of_bind_group_layouts_exceeds_the_maximum_value')\n  .desc(\n    `\n    Test that creating a pipeline layout fails with a validation error if the number of bind group\n    layouts exceeds the maximum value in the pipeline layout.\n    - Test that creation of a pipeline using the maximum number of bind groups added a bind group\n      fails.\n  `\n  )\n  .fn(t => {\n    const bindGroupLayoutDescriptor: GPUBindGroupLayoutDescriptor = {\n      entries: [],\n    };\n\n    // 4 is the maximum number of bind group layouts.\n    const maxBindGroupLayouts = [1, 2, 3, 4].map(() =>\n      t.device.createBindGroupLayout(bindGroupLayoutDescriptor)\n    );\n\n    const goodPipelineLayoutDescriptor = {\n      bindGroupLayouts: maxBindGroupLayouts,\n    };\n\n    // Control case\n    t.device.createPipelineLayout(goodPipelineLayoutDescriptor);\n\n    // Check bind group layouts exceed maximum in pipeline layout.\n    const badPipelineLayoutDescriptor = {\n      bindGroupLayouts: [\n        ...maxBindGroupLayouts,\n        t.device.createBindGroupLayout(bindGroupLayoutDescriptor),\n      ],\n    };\n\n    t.expectValidationError(() => {\n      t.device.createPipelineLayout(badPipelineLayoutDescriptor);\n    });\n  });\n\ng.test('bind_group_layouts,device_mismatch')\n  .desc(\n    `\n    Tests createPipelineLayout cannot be called with bind group layouts created from another device\n    Test with two layouts to make sure all layouts can be validated:\n    - layout0 and layout1 from same device\n    - layout0 and layout1 from different device\n    `\n  )\n  .paramsSubcasesOnly([\n    { layout0Mismatched: false, layout1Mismatched: false }, // control case\n    { layout0Mismatched: true, layout1Mismatched: false },\n    { layout0Mismatched: false, layout1Mismatched: true },\n  ])\n  .beforeAllSubcases(t => {\n    t.selectMismatchedDeviceOrSkipTestCase(undefined);\n  })\n  .fn(t => {\n    const { layout0Mismatched, layout1Mismatched } = t.params;\n\n    const mismatched = layout0Mismatched || layout1Mismatched;\n\n    const bglDescriptor: GPUBindGroupLayoutDescriptor = {\n      entries: [],\n    };\n\n    const layout0 = layout0Mismatched\n      ? t.mismatchedDevice.createBindGroupLayout(bglDescriptor)\n      : t.device.createBindGroupLayout(bglDescriptor);\n    const layout1 = layout1Mismatched\n      ? t.mismatchedDevice.createBindGroupLayout(bglDescriptor)\n      : t.device.createBindGroupLayout(bglDescriptor);\n\n    t.expectValidationError(() => {\n      t.device.createPipelineLayout({ bindGroupLayouts: [layout0, layout1] });\n    }, mismatched);\n  });\n"],"mappings":"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"}