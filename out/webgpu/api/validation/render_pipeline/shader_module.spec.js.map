{"version":3,"file":"shader_module.spec.js","names":["description","makeTestGroup","getFragmentShaderCodeWithOutput","kDefaultVertexShaderCode","kDefaultFragmentShaderCode","CreateRenderPipelineValidationTest","g","values","test","desc","paramsSubcasesOnly","u","combine","combineWithParams","vertex_mismatched","fragment_mismatched","_success","beforeAllSubcases","t","selectMismatchedDeviceOrSkipTestCase","undefined","fn","isAsync","params","code","descriptor","vertex","module","mismatchedDevice","createShaderModule","device","entryPoint","fragment","plainType","componentCount","targets","format","layout","getPipelineLayout","doCreateRenderPipelineTest","isVertexShaderValid","createInvalidShaderModule","isFragmentShaderValid"],"sources":["../../../../../src/webgpu/api/validation/render_pipeline/shader_module.spec.ts"],"sourcesContent":["export const description = `\nThis test dedicatedly tests createRenderPipeline validation issues related to the shader modules.\n\nNote: entry point matching tests are in ../shader_module/entry_point.spec.ts\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport {\n  getFragmentShaderCodeWithOutput,\n  kDefaultVertexShaderCode,\n  kDefaultFragmentShaderCode,\n} from '../../../util/shader.js';\n\nimport { CreateRenderPipelineValidationTest } from './common.js';\n\nexport const g = makeTestGroup(CreateRenderPipelineValidationTest);\n\nconst values = [0, 1, 0, 1];\n\ng.test('device_mismatch')\n  .desc(\n    'Tests createRenderPipeline(Async) cannot be called with a shader module created from another device'\n  )\n  .paramsSubcasesOnly(u =>\n    u.combine('isAsync', [true, false]).combineWithParams([\n      { vertex_mismatched: false, fragment_mismatched: false, _success: true },\n      { vertex_mismatched: true, fragment_mismatched: false, _success: false },\n      { vertex_mismatched: false, fragment_mismatched: true, _success: false },\n    ])\n  )\n  .beforeAllSubcases(t => {\n    t.selectMismatchedDeviceOrSkipTestCase(undefined);\n  })\n  .fn(t => {\n    const { isAsync, vertex_mismatched, fragment_mismatched, _success } = t.params;\n\n    const code = `\n      @vertex fn main() -> @builtin(position) vec4<f32> {\n        return vec4<f32>(0.0, 0.0, 0.0, 1.0);\n      }\n    `;\n\n    const descriptor = {\n      vertex: {\n        module: vertex_mismatched\n          ? t.mismatchedDevice.createShaderModule({ code })\n          : t.device.createShaderModule({ code }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: fragment_mismatched\n          ? t.mismatchedDevice.createShaderModule({\n              code: getFragmentShaderCodeWithOutput([\n                { values, plainType: 'f32', componentCount: 4 },\n              ]),\n            })\n          : t.device.createShaderModule({\n              code: getFragmentShaderCodeWithOutput([\n                { values, plainType: 'f32', componentCount: 4 },\n              ]),\n            }),\n        entryPoint: 'main',\n        targets: [{ format: 'rgba8unorm' }] as const,\n      },\n      layout: t.getPipelineLayout(),\n    };\n\n    t.doCreateRenderPipelineTest(isAsync, _success, descriptor);\n  });\n\ng.test('invalid,vertex')\n  .desc(`Tests shader module must be valid.`)\n  .params(u => u.combine('isAsync', [true, false]).combine('isVertexShaderValid', [true, false]))\n  .fn(t => {\n    const { isAsync, isVertexShaderValid } = t.params;\n    t.doCreateRenderPipelineTest(isAsync, isVertexShaderValid, {\n      layout: 'auto',\n      vertex: {\n        module: isVertexShaderValid\n          ? t.device.createShaderModule({\n              code: kDefaultVertexShaderCode,\n            })\n          : t.createInvalidShaderModule(),\n        entryPoint: 'main',\n      },\n    });\n  });\n\ng.test('invalid,fragment')\n  .desc(`Tests shader module must be valid.`)\n  .params(u => u.combine('isAsync', [true, false]).combine('isFragmentShaderValid', [true, false]))\n  .fn(t => {\n    const { isAsync, isFragmentShaderValid } = t.params;\n    t.doCreateRenderPipelineTest(isAsync, isFragmentShaderValid, {\n      layout: 'auto',\n      vertex: {\n        module: t.device.createShaderModule({\n          code: kDefaultVertexShaderCode,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: isFragmentShaderValid\n          ? t.device.createShaderModule({\n              code: kDefaultFragmentShaderCode,\n            })\n          : t.createInvalidShaderModule(),\n        entryPoint: 'main',\n        targets: [{ format: 'rgba8unorm' }],\n      },\n    });\n  });\n"],"mappings":"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"}