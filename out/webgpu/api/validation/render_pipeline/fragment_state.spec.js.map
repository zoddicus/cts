{"version":3,"file":"fragment_state.spec.js","names":["description","makeTestGroup","range","kBlendFactors","kBlendOperations","kMaxColorAttachmentsToTest","kTextureFormats","kRenderableColorTextureFormats","kTextureFormatInfo","computeBytesPerSampleFromFormats","getFragmentShaderCodeWithOutput","getPlainTypeInfo","kDefaultFragmentShaderCode","kTexelRepresentationInfo","CreateRenderPipelineValidationTest","g","values","test","desc","params","u","combine","fn","t","isAsync","goodDescriptor","getDescriptor","targets","format","doCreateRenderPipelineTest","badDescriptor","beforeAllSubcases","info","skipIfTextureFormatNotSupported","selectDeviceOrSkipTestCase","feature","descriptor","colorRender","mult","add","targetsLengthVariant","targetsLength","makeLimitVariant","_i","writeMask","fragmentShaderCode","depthStencil","depthWriteEnabled","depthCompare","device","limits","maxColorAttachments","beginSubcases","i","attachmentCount","skipIf","shouldError","undefined","byteCost","maxColorAttachmentBytesPerSample","combineWithParams","formats","length","success","map","f","hasBlend","blend","color","alpha","type","component","srcFactor","dstFactor","operation","defaultBlendComponent","blendComponentToTest","_success","expand","p","shaderOutput","selectDeviceForTextureFormatOrSkipTestCase","plainType","scalar","componentCount","count","componentOrder","sampleType","colorSrcFactor","colorDstFactor","alphaSrcFactor","alphaDstFactor","colorBlendReadsSrcAlpha","includes","meetsExtraBlendingRequirement"],"sources":["../../../../../src/webgpu/api/validation/render_pipeline/fragment_state.spec.ts"],"sourcesContent":["export const description = `\nThis test dedicatedly tests validation of GPUFragmentState of createRenderPipeline.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { range } from '../../../../common/util/util.js';\nimport {\n  kBlendFactors,\n  kBlendOperations,\n  kMaxColorAttachmentsToTest,\n} from '../../../capability_info.js';\nimport {\n  kTextureFormats,\n  kRenderableColorTextureFormats,\n  kTextureFormatInfo,\n  computeBytesPerSampleFromFormats,\n} from '../../../format_info.js';\nimport {\n  getFragmentShaderCodeWithOutput,\n  getPlainTypeInfo,\n  kDefaultFragmentShaderCode,\n} from '../../../util/shader.js';\nimport { kTexelRepresentationInfo } from '../../../util/texture/texel_data.js';\n\nimport { CreateRenderPipelineValidationTest } from './common.js';\n\nexport const g = makeTestGroup(CreateRenderPipelineValidationTest);\n\nconst values = [0, 1, 0, 1];\n\ng.test('color_target_exists')\n  .desc(`Tests creating a complete render pipeline requires at least one color target state.`)\n  .params(u => u.combine('isAsync', [false, true]))\n  .fn(t => {\n    const { isAsync } = t.params;\n\n    const goodDescriptor = t.getDescriptor({\n      targets: [{ format: 'rgba8unorm' }],\n    });\n\n    // Control case\n    t.doCreateRenderPipelineTest(isAsync, true, goodDescriptor);\n\n    // Fail because lack of color states\n    const badDescriptor = t.getDescriptor({\n      targets: [],\n    });\n\n    t.doCreateRenderPipelineTest(isAsync, false, badDescriptor);\n  });\n\ng.test('targets_format_renderable')\n  .desc(`Tests that color target state format must have RENDER_ATTACHMENT capability.`)\n  .params(u => u.combine('isAsync', [false, true]).combine('format', kTextureFormats))\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.skipIfTextureFormatNotSupported(t.params.format);\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(t => {\n    const { isAsync, format } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    const descriptor = t.getDescriptor({ targets: [{ format }] });\n\n    t.doCreateRenderPipelineTest(isAsync, !!info.colorRender, descriptor);\n  });\n\ng.test('limits,maxColorAttachments')\n  .desc(\n    `Tests that color state targets length must not be larger than device.limits.maxColorAttachments.`\n  )\n  .params(u =>\n    u.combine('isAsync', [false, true]).combine('targetsLengthVariant', [\n      { mult: 1, add: 0 },\n      { mult: 1, add: 1 },\n    ])\n  )\n  .fn(t => {\n    const { isAsync, targetsLengthVariant } = t.params;\n    const targetsLength = t.makeLimitVariant('maxColorAttachments', targetsLengthVariant);\n\n    const descriptor = t.getDescriptor({\n      targets: range(targetsLength, _i => {\n        return { format: 'rg8unorm', writeMask: 0 };\n      }),\n      fragmentShaderCode: kDefaultFragmentShaderCode,\n      // add a depth stencil so that we can set writeMask to 0 for all color attachments\n      depthStencil: {\n        format: 'depth24plus',\n        depthWriteEnabled: true,\n        depthCompare: 'always',\n      },\n    });\n\n    t.doCreateRenderPipelineTest(\n      isAsync,\n      targetsLength <= t.device.limits.maxColorAttachments,\n      descriptor\n    );\n  });\n\ng.test('limits,maxColorAttachmentBytesPerSample,aligned')\n  .desc(\n    `\n  Tests that the total color attachment bytes per sample must not be larger than\n  maxColorAttachmentBytesPerSample when using the same format for multiple attachments.\n  `\n  )\n  .params(u =>\n    u\n      .combine('format', kRenderableColorTextureFormats)\n      .beginSubcases()\n      .combine(\n        'attachmentCount',\n        range(kMaxColorAttachmentsToTest, i => i + 1)\n      )\n      .combine('isAsync', [false, true])\n  )\n  .beforeAllSubcases(t => {\n    t.skipIfTextureFormatNotSupported(t.params.format);\n  })\n  .fn(t => {\n    const { format, attachmentCount, isAsync } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    t.skipIf(\n      attachmentCount > t.device.limits.maxColorAttachments,\n      `attachmentCount: ${attachmentCount} > maxColorAttachments: ${t.device.limits.maxColorAttachments}`\n    );\n\n    const descriptor = t.getDescriptor({\n      targets: range(attachmentCount, () => {\n        return { format, writeMask: 0 };\n      }),\n    });\n    const shouldError =\n      info.colorRender === undefined ||\n      info.colorRender.byteCost * attachmentCount >\n        t.device.limits.maxColorAttachmentBytesPerSample;\n\n    t.doCreateRenderPipelineTest(isAsync, !shouldError, descriptor);\n  });\n\ng.test('limits,maxColorAttachmentBytesPerSample,unaligned')\n  .desc(\n    `\n  Tests that the total color attachment bytes per sample must not be larger than\n  maxColorAttachmentBytesPerSample when using various sets of (potentially) unaligned formats.\n  `\n  )\n  .params(u =>\n    u\n      .combineWithParams([\n        // Alignment causes the first 1 byte R8Unorm to become 4 bytes. So even though\n        // 1+4+8+16+1 < 32, the 4 byte alignment requirement of R32Float makes the first R8Unorm\n        // become 4 and 4+4+8+16+1 > 32. Re-ordering this so the R8Unorm's are at the end, however\n        // is allowed: 4+8+16+1+1 < 32.\n        {\n          formats: [\n            'r8unorm',\n            'r32float',\n            'rgba8unorm',\n            'rgba32float',\n            'r8unorm',\n          ] as GPUTextureFormat[],\n        },\n        {\n          formats: [\n            'r32float',\n            'rgba8unorm',\n            'rgba32float',\n            'r8unorm',\n            'r8unorm',\n          ] as GPUTextureFormat[],\n        },\n      ])\n      .beginSubcases()\n      .combine('isAsync', [false, true])\n  )\n  .fn(t => {\n    const { formats, isAsync } = t.params;\n\n    t.skipIf(\n      formats.length > t.device.limits.maxColorAttachments,\n      `numColorAttachments: ${formats.length} > maxColorAttachments: ${t.device.limits.maxColorAttachments}`\n    );\n\n    const success =\n      computeBytesPerSampleFromFormats(formats) <= t.device.limits.maxColorAttachmentBytesPerSample;\n\n    const descriptor = t.getDescriptor({\n      targets: formats.map(f => {\n        return { format: f, writeMask: 0 };\n      }),\n    });\n\n    t.doCreateRenderPipelineTest(isAsync, success, descriptor);\n  });\n\ng.test('targets_format_filterable')\n  .desc(\n    `\n  Tests that color target state format must be filterable if blend is not undefined.\n\n  TODO: info.colorRender.blend now directly says whether the format is blendable. Use that.`\n  )\n  .params(u =>\n    u\n      .combine('isAsync', [false, true])\n      .combine('format', kRenderableColorTextureFormats)\n      .beginSubcases()\n      .combine('hasBlend', [false, true])\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.skipIfTextureFormatNotSupported(format);\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(t => {\n    const { isAsync, format, hasBlend } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    const descriptor = t.getDescriptor({\n      targets: [\n        {\n          format,\n          blend: hasBlend ? { color: {}, alpha: {} } : undefined,\n        },\n      ],\n    });\n\n    t.doCreateRenderPipelineTest(isAsync, !hasBlend || info.color.type === 'float', descriptor);\n  });\n\ng.test('targets_blend')\n  .desc(\n    `\n  For the blend components on either GPUBlendState.color or GPUBlendState.alpha:\n  - Tests if the combination of 'srcFactor', 'dstFactor' and 'operation' is valid (if the blend\n    operation is \"min\" or \"max\", srcFactor and dstFactor must be \"one\").\n  `\n  )\n  .params(u =>\n    u\n      .combine('isAsync', [false, true])\n      .combine('component', ['color', 'alpha'] as const)\n      .beginSubcases()\n      .combine('srcFactor', kBlendFactors)\n      .combine('dstFactor', kBlendFactors)\n      .combine('operation', kBlendOperations)\n  )\n  .fn(t => {\n    const { isAsync, component, srcFactor, dstFactor, operation } = t.params;\n\n    const defaultBlendComponent: GPUBlendComponent = {\n      srcFactor: 'src-alpha',\n      dstFactor: 'dst-alpha',\n      operation: 'add',\n    };\n    const blendComponentToTest: GPUBlendComponent = {\n      srcFactor,\n      dstFactor,\n      operation,\n    };\n    const format = 'rgba8unorm';\n\n    const descriptor = t.getDescriptor({\n      targets: [\n        {\n          format,\n          blend: {\n            color: component === 'color' ? blendComponentToTest : defaultBlendComponent,\n            alpha: component === 'alpha' ? blendComponentToTest : defaultBlendComponent,\n          },\n        },\n      ],\n    });\n\n    if (operation === 'min' || operation === 'max') {\n      const _success = srcFactor === 'one' && dstFactor === 'one';\n      t.doCreateRenderPipelineTest(isAsync, _success, descriptor);\n    } else {\n      t.doCreateRenderPipelineTest(isAsync, true, descriptor);\n    }\n  });\n\ng.test('targets_write_mask')\n  .desc(`Tests that color target state write mask must be < 16.`)\n  .params(u => u.combine('isAsync', [false, true]).combine('writeMask', [0, 0xf, 0x10, 0x80000001]))\n  .fn(t => {\n    const { isAsync, writeMask } = t.params;\n\n    const descriptor = t.getDescriptor({\n      targets: [\n        {\n          format: 'rgba8unorm',\n          writeMask,\n        },\n      ],\n    });\n\n    t.doCreateRenderPipelineTest(isAsync, writeMask < 16, descriptor);\n  });\n\ng.test('pipeline_output_targets')\n  .desc(\n    `Pipeline fragment output types must be compatible with target color state format\n  - The scalar type (f32, i32, or u32) must match the sample type of the format.\n  - The componentCount of the fragment output (e.g. f32, vec2, vec3, vec4) must not have fewer\n    channels than that of the color attachment texture formats. Extra components are allowed and are discarded.\n\n  Otherwise, color state write mask must be 0.`\n  )\n  .params(u =>\n    u\n      .combine('isAsync', [false, true])\n      .combine('format', [undefined, ...kRenderableColorTextureFormats] as const)\n      .beginSubcases()\n      .combine('shaderOutput', [\n        undefined,\n        ...u.combine('scalar', ['f32', 'u32', 'i32'] as const).combine('count', [1, 2, 3, 4]),\n      ])\n      // We only care about testing writeMask if there is an attachment but no shader output.\n      .expand('writeMask', p =>\n        p.format !== undefined && p.shaderOutput !== undefined ? [0, 0x1, 0x2, 0x4, 0x8] : [0xf]\n      )\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceForTextureFormatOrSkipTestCase(t.params.format);\n  })\n  .fn(t => {\n    const { isAsync, format, writeMask, shaderOutput } = t.params;\n\n    const descriptor = t.getDescriptor({\n      targets: format ? [{ format, writeMask }] : [],\n      // To have a dummy depthStencil attachment to avoid having no attachment at all which is invalid\n      depthStencil: { format: 'depth24plus', depthWriteEnabled: false, depthCompare: 'always' },\n      fragmentShaderCode: getFragmentShaderCodeWithOutput(\n        shaderOutput\n          ? [{ values, plainType: shaderOutput.scalar, componentCount: shaderOutput.count }]\n          : []\n      ),\n    });\n\n    let success = true;\n    if (format) {\n      // There is a color target\n      if (shaderOutput) {\n        // The shader outputs to the color target\n        const info = kTextureFormatInfo[format];\n        success =\n          shaderOutput.scalar === getPlainTypeInfo(info.color.type) &&\n          shaderOutput.count >= kTexelRepresentationInfo[format].componentOrder.length;\n      } else {\n        // The shader does not output to the color target\n        success = writeMask === 0;\n      }\n    }\n\n    t.doCreateRenderPipelineTest(isAsync, success, descriptor);\n  });\n\ng.test('pipeline_output_targets,blend')\n  .desc(\n    `On top of requirements from pipeline_output_targets, when blending is enabled and alpha channel is read indicated by any blend factor, an extra requirement is added:\n  - fragment output must be vec4.\n  `\n  )\n  .params(u =>\n    u\n      .combine('isAsync', [false, true])\n      .combine('format', ['r8unorm', 'rg8unorm', 'rgba8unorm', 'bgra8unorm'] as const)\n      .combine('componentCount', [1, 2, 3, 4])\n      .beginSubcases()\n      // The default srcFactor and dstFactor are 'one' and 'zero'. Override just one at a time.\n      .combineWithParams([\n        ...u.combine('colorSrcFactor', kBlendFactors),\n        ...u.combine('colorDstFactor', kBlendFactors),\n        ...u.combine('alphaSrcFactor', kBlendFactors),\n        ...u.combine('alphaDstFactor', kBlendFactors),\n      ] as const)\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(t => {\n    const sampleType = 'float';\n    const {\n      isAsync,\n      format,\n      componentCount,\n      colorSrcFactor,\n      colorDstFactor,\n      alphaSrcFactor,\n      alphaDstFactor,\n    } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    const descriptor = t.getDescriptor({\n      targets: [\n        {\n          format,\n          blend: {\n            color: { srcFactor: colorSrcFactor, dstFactor: colorDstFactor },\n            alpha: { srcFactor: alphaSrcFactor, dstFactor: alphaDstFactor },\n          },\n        },\n      ],\n      fragmentShaderCode: getFragmentShaderCodeWithOutput([\n        { values, plainType: getPlainTypeInfo(sampleType), componentCount },\n      ]),\n    });\n\n    const colorBlendReadsSrcAlpha =\n      colorSrcFactor?.includes('src-alpha') || colorDstFactor?.includes('src-alpha');\n    const meetsExtraBlendingRequirement = !colorBlendReadsSrcAlpha || componentCount === 4;\n    const _success =\n      info.color.type === sampleType &&\n      componentCount >= kTexelRepresentationInfo[format].componentOrder.length &&\n      meetsExtraBlendingRequirement;\n    t.doCreateRenderPipelineTest(isAsync, _success, descriptor);\n  });\n"],"mappings":"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"}