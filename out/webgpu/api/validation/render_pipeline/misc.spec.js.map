{"version":3,"file":"misc.spec.js","names":["description","makeTestGroup","kDefaultVertexShaderCode","kDefaultFragmentShaderCode","CreateRenderPipelineValidationTest","g","test","desc","params","u","combine","fn","t","isAsync","descriptor","getDescriptor","doCreateRenderPipelineTest","beginSubcases","depthStencilFormat","hasColor","depthStencilState","undefined","format","depthWriteEnabled","depthCompare","noFragment","depthStencil","targets","paramsSubcasesOnly","beforeAllSubcases","selectMismatchedDeviceOrSkipTestCase","mismatched","sourceDevice","mismatchedDevice","device","layout","createPipelineLayout","bindGroupLayouts","vertex","module","createShaderModule","code","entryPoint","fragment","shader"],"sources":["../../../../../src/webgpu/api/validation/render_pipeline/misc.spec.ts"],"sourcesContent":["export const description = `\nmisc createRenderPipeline and createRenderPipelineAsync validation tests.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { kDefaultVertexShaderCode, kDefaultFragmentShaderCode } from '../../../util/shader.js';\n\nimport { CreateRenderPipelineValidationTest } from './common.js';\n\nexport const g = makeTestGroup(CreateRenderPipelineValidationTest);\n\ng.test('basic')\n  .desc(`Test basic usage of createRenderPipeline.`)\n  .params(u => u.combine('isAsync', [false, true]))\n  .fn(t => {\n    const { isAsync } = t.params;\n    const descriptor = t.getDescriptor();\n\n    t.doCreateRenderPipelineTest(isAsync, true, descriptor);\n  });\n\ng.test('vertex_state_only')\n  .desc(\n    `Tests creating vertex-state-only render pipeline. A vertex-only render pipeline has no fragment\nstate (and thus has no color state), and can be created with or without depth stencil state.`\n  )\n  .params(u =>\n    u\n      .combine('isAsync', [false, true])\n      .beginSubcases()\n      .combine('depthStencilFormat', [\n        'depth24plus',\n        'depth24plus-stencil8',\n        'depth32float',\n        '',\n      ] as const)\n      .combine('hasColor', [false, true])\n  )\n  .fn(t => {\n    const { isAsync, depthStencilFormat, hasColor } = t.params;\n\n    let depthStencilState: GPUDepthStencilState | undefined;\n    if (depthStencilFormat === '') {\n      depthStencilState = undefined;\n    } else {\n      depthStencilState = {\n        format: depthStencilFormat,\n        depthWriteEnabled: false,\n        depthCompare: 'always',\n      };\n    }\n\n    // Having targets or not should have no effect in result, since it will not appear in the\n    // descriptor in vertex-only render pipeline\n    const descriptor = t.getDescriptor({\n      noFragment: true,\n      depthStencil: depthStencilState,\n      targets: hasColor ? [{ format: 'rgba8unorm' }] : [],\n    });\n\n    t.doCreateRenderPipelineTest(isAsync, true, descriptor);\n  });\n\ng.test('pipeline_layout,device_mismatch')\n  .desc(\n    'Tests createRenderPipeline(Async) cannot be called with a pipeline layout created from another device'\n  )\n  .paramsSubcasesOnly(u => u.combine('isAsync', [true, false]).combine('mismatched', [true, false]))\n  .beforeAllSubcases(t => {\n    t.selectMismatchedDeviceOrSkipTestCase(undefined);\n  })\n  .fn(t => {\n    const { isAsync, mismatched } = t.params;\n\n    const sourceDevice = mismatched ? t.mismatchedDevice : t.device;\n\n    const layout = sourceDevice.createPipelineLayout({ bindGroupLayouts: [] });\n\n    const format = 'rgba8unorm';\n    const descriptor = {\n      layout,\n      vertex: {\n        module: t.device.createShaderModule({\n          code: kDefaultVertexShaderCode,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: kDefaultFragmentShaderCode,\n        }),\n        entryPoint: 'main',\n        targets: [{ format }] as const,\n      },\n    };\n\n    t.doCreateRenderPipelineTest(isAsync, !mismatched, descriptor);\n  });\n\ng.test('external_texture')\n  .desc('Tests createRenderPipeline() with an external_texture')\n  .fn(t => {\n    const shader = t.device.createShaderModule({\n      code: `\n        @vertex\n        fn vertexMain() -> @builtin(position) vec4f {\n          return vec4f(1);\n        }\n\n        @group(0) @binding(0) var myTexture: texture_external;\n\n        @fragment\n        fn fragmentMain() -> @location(0) vec4f {\n          let result = textureLoad(myTexture, vec2u(1, 1));\n          return vec4f(1);\n        }\n      `,\n    });\n\n    const descriptor: GPURenderPipelineDescriptor = {\n      layout: 'auto',\n      vertex: {\n        module: shader,\n      },\n      fragment: {\n        module: shader,\n        targets: [{ format: 'rgba8unorm' }],\n      },\n    };\n\n    t.doCreateRenderPipelineTest(false, true, descriptor);\n  });\n"],"mappings":"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"}