{"version":3,"file":"common.js","names":["kTextureFormatInfo","getFragmentShaderCodeWithOutput","getPlainTypeInfo","kDefaultVertexShaderCode","ValidationTest","values","CreateRenderPipelineValidationTest","getDescriptor","options","primitive","targets","format","multisample","depthStencil","fragmentShaderCode","plainType","color","type","componentCount","noFragment","fragmentConstants","vertex","module","device","createShaderModule","code","entryPoint","fragment","undefined","constants","layout","getPipelineLayout","createPipelineLayout","bindGroupLayouts"],"sources":["../../../../../src/webgpu/api/validation/render_pipeline/common.ts"],"sourcesContent":["import { ColorTextureFormat, kTextureFormatInfo } from '../../../format_info.js';\nimport {\n  getFragmentShaderCodeWithOutput,\n  getPlainTypeInfo,\n  kDefaultVertexShaderCode,\n} from '../../../util/shader.js';\nimport { ValidationTest } from '../validation_test.js';\n\ntype ColorTargetState = GPUColorTargetState & { format: ColorTextureFormat };\n\nconst values = [0, 1, 0, 1];\nexport class CreateRenderPipelineValidationTest extends ValidationTest {\n  getDescriptor(\n    options: {\n      primitive?: GPUPrimitiveState;\n      targets?: ColorTargetState[];\n      multisample?: GPUMultisampleState;\n      depthStencil?: GPUDepthStencilState;\n      fragmentShaderCode?: string;\n      noFragment?: boolean;\n      fragmentConstants?: Record<string, GPUPipelineConstantValue>;\n    } = {}\n  ): GPURenderPipelineDescriptor {\n    const {\n      primitive = {},\n      targets = [{ format: 'rgba8unorm' }] as const,\n      multisample = {},\n      depthStencil,\n      fragmentShaderCode = getFragmentShaderCodeWithOutput([\n        {\n          values,\n          plainType: getPlainTypeInfo(\n            kTextureFormatInfo[targets[0] ? targets[0].format : 'rgba8unorm'].color.type\n          ),\n          componentCount: 4,\n        },\n      ]),\n      noFragment = false,\n      fragmentConstants = {},\n    } = options;\n\n    return {\n      vertex: {\n        module: this.device.createShaderModule({\n          code: kDefaultVertexShaderCode,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: noFragment\n        ? undefined\n        : {\n            module: this.device.createShaderModule({\n              code: fragmentShaderCode,\n            }),\n            entryPoint: 'main',\n            targets,\n            constants: fragmentConstants,\n          },\n      layout: this.getPipelineLayout(),\n      primitive,\n      multisample,\n      depthStencil,\n    };\n  }\n\n  getPipelineLayout(): GPUPipelineLayout {\n    return this.device.createPipelineLayout({ bindGroupLayouts: [] });\n  }\n}\n"],"mappings":";;GAAA,SAA6BA,kBAAkB,QAAQ,yBAAyB,CAChF,SACEC,+BAA+B;AAC/BC,gBAAgB;AAChBC,wBAAwB;AACnB,yBAAyB;AAChC,SAASC,cAAc,QAAQ,uBAAuB;;;;AAItD,MAAMC,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAC3B,OAAO,MAAMC,kCAAkC,SAASF,cAAc,CAAC;EACrEG,aAAaA;EACXC,OAQC;;;;;;;;EAAG,CAAC,CAAC;EACuB;IAC7B,MAAM;MACJC,SAAS,GAAG,CAAC,CAAC;MACdC,OAAO,GAAG,CAAC,EAAEC,MAAM,EAAE,YAAY,CAAC,CAAC,CAAU;MAC7CC,WAAW,GAAG,CAAC,CAAC;MAChBC,YAAY;MACZC,kBAAkB,GAAGb,+BAA+B,CAAC;MACnD;QACEI,MAAM;QACNU,SAAS,EAAEb,gBAAgB;UACzBF,kBAAkB,CAACU,OAAO,CAAC,CAAC,CAAC,GAAGA,OAAO,CAAC,CAAC,CAAC,CAACC,MAAM,GAAG,YAAY,CAAC,CAACK,KAAK,CAACC;QAC1E,CAAC;QACDC,cAAc,EAAE;MAClB,CAAC;MACF,CAAC;MACFC,UAAU,GAAG,KAAK;MAClBC,iBAAiB,GAAG,CAAC;IACvB,CAAC,GAAGZ,OAAO;;IAEX,OAAO;MACLa,MAAM,EAAE;QACNC,MAAM,EAAE,IAAI,CAACC,MAAM,CAACC,kBAAkB,CAAC;UACrCC,IAAI,EAAEtB;QACR,CAAC,CAAC;QACFuB,UAAU,EAAE;MACd,CAAC;MACDC,QAAQ,EAAER,UAAU;MAChBS,SAAS;MACT;QACEN,MAAM,EAAE,IAAI,CAACC,MAAM,CAACC,kBAAkB,CAAC;UACrCC,IAAI,EAAEX;QACR,CAAC,CAAC;QACFY,UAAU,EAAE,MAAM;QAClBhB,OAAO;QACPmB,SAAS,EAAET;MACb,CAAC;MACLU,MAAM,EAAE,IAAI,CAACC,iBAAiB,CAAC,CAAC;MAChCtB,SAAS;MACTG,WAAW;MACXC;IACF,CAAC;EACH;;EAEAkB,iBAAiBA,CAAA,EAAsB;IACrC,OAAO,IAAI,CAACR,MAAM,CAACS,oBAAoB,CAAC,EAAEC,gBAAgB,EAAE,EAAE,CAAC,CAAC,CAAC;EACnE;AACF"}