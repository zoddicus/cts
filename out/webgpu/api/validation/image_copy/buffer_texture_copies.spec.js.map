{"version":3,"file":"buffer_texture_copies.spec.js","names":["description","makeTestGroup","assert","unreachable","kBufferUsages","kTextureUsages","GPUConst","kDepthStencilFormats","depthStencilBufferTextureCopySupported","depthStencilFormatAspectSize","align","kBufferCopyAlignment","kBytesPerRowAlignment","ValidationTest","ImageCopyTest","testCopyBufferToTexture","source","destination","copySize","isSuccess","encoder","validateFinishAndSubmit","createEncoder","copyBufferToTexture","testCopyTextureToBuffer","copyTextureToBuffer","testWriteTexture","uploadData","dataLayout","expectGPUError","queue","writeTexture","g","test","desc","params","u","combine","beginSubcases","beforeAllSubcases","t","format","selectDeviceForTextureFormatOrSkipTestCase","fn","aspect","textureSize","width","height","depthOrArrayLayers","texture","createTextureTracked","size","usage","GPUTextureUsage","COPY_SRC","COPY_DST","uploadBufferSize","buffer","createBufferTracked","GPUBufferUsage","success","Uint8Array","filter","param","copyType","texelAspectSize","bytesPerRowAlignment","bytesPerRow","rowsPerImage","minimumBufferSize","bigEnoughBuffer","smallerBuffer","enoughUploadData","smallerUploadData","offset","sampleCount","RENDER_ATTACHMENT","kRequiredTextureUsage","CopyT2B","TextureUsage","CopyB2T","kRequiredBufferUsage","BufferUsage","expand","p","textureUsage","bufferUsage","_textureUsageValid","_bufferUsageValid","combineWithParams","bufMismatched","texMismatched","selectMismatchedDeviceOrSkipTestCase","undefined","trackForCleanup","mismatchedDevice","device","createBuffer","createTexture","isValid"],"sources":["../../../../../src/webgpu/api/validation/image_copy/buffer_texture_copies.spec.ts"],"sourcesContent":["export const description = `\ncopyTextureToBuffer and copyBufferToTexture validation tests not covered by\nthe general image_copy tests, or by destroyed,*.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { assert, unreachable } from '../../../../common/util/util.js';\nimport { kBufferUsages, kTextureUsages } from '../../../capability_info.js';\nimport { GPUConst } from '../../../constants.js';\nimport {\n  kDepthStencilFormats,\n  depthStencilBufferTextureCopySupported,\n  depthStencilFormatAspectSize,\n} from '../../../format_info.js';\nimport { align } from '../../../util/math.js';\nimport { kBufferCopyAlignment, kBytesPerRowAlignment } from '../../../util/texture/layout.js';\nimport { ValidationTest } from '../validation_test.js';\n\nclass ImageCopyTest extends ValidationTest {\n  testCopyBufferToTexture(\n    source: GPUImageCopyBuffer,\n    destination: GPUImageCopyTexture,\n    copySize: GPUExtent3DStrict,\n    isSuccess: boolean\n  ): void {\n    const { encoder, validateFinishAndSubmit } = this.createEncoder('non-pass');\n    encoder.copyBufferToTexture(source, destination, copySize);\n    validateFinishAndSubmit(isSuccess, true);\n  }\n\n  testCopyTextureToBuffer(\n    source: GPUImageCopyTexture,\n    destination: GPUImageCopyBuffer,\n    copySize: GPUExtent3DStrict,\n    isSuccess: boolean\n  ): void {\n    const { encoder, validateFinishAndSubmit } = this.createEncoder('non-pass');\n    encoder.copyTextureToBuffer(source, destination, copySize);\n    validateFinishAndSubmit(isSuccess, true);\n  }\n\n  testWriteTexture(\n    destination: GPUImageCopyTexture,\n    uploadData: Uint8Array,\n    dataLayout: GPUImageDataLayout,\n    copySize: GPUExtent3DStrict,\n    isSuccess: boolean\n  ): void {\n    this.expectGPUError(\n      'validation',\n      () => this.queue.writeTexture(destination, uploadData, dataLayout, copySize),\n      !isSuccess\n    );\n  }\n}\n\nexport const g = makeTestGroup(ImageCopyTest);\n\ng.test('depth_stencil_format,copy_usage_and_aspect')\n  .desc(\n    `\n  Validate the combination of usage and aspect of each depth stencil format in copyBufferToTexture,\n  copyTextureToBuffer and writeTexture. See https://gpuweb.github.io/gpuweb/#depth-formats for more\n  details.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('format', kDepthStencilFormats)\n      .beginSubcases()\n      .combine('aspect', ['all', 'depth-only', 'stencil-only'] as const)\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    t.selectDeviceForTextureFormatOrSkipTestCase(format);\n  })\n  .fn(t => {\n    const { format, aspect } = t.params;\n\n    const textureSize = { width: 1, height: 1, depthOrArrayLayers: 1 };\n    const texture = t.createTextureTracked({\n      size: textureSize,\n      format,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    const uploadBufferSize = 32;\n    const buffer = t.createBufferTracked({\n      size: uploadBufferSize,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    });\n\n    {\n      const success = depthStencilBufferTextureCopySupported('CopyB2T', format, aspect);\n      t.testCopyBufferToTexture({ buffer }, { texture, aspect }, textureSize, success);\n    }\n\n    {\n      const success = depthStencilBufferTextureCopySupported('CopyT2B', format, aspect);\n      t.testCopyTextureToBuffer({ texture, aspect }, { buffer }, textureSize, success);\n    }\n\n    {\n      const success = depthStencilBufferTextureCopySupported('WriteTexture', format, aspect);\n      const uploadData = new Uint8Array(uploadBufferSize);\n      t.testWriteTexture({ texture, aspect }, uploadData, {}, textureSize, success);\n    }\n  });\n\ng.test('depth_stencil_format,copy_buffer_size')\n  .desc(\n    `\n  Validate the minimum buffer size for each depth stencil format in copyBufferToTexture,\n  copyTextureToBuffer and writeTexture.\n\n  Given a depth stencil format, a copy aspect ('depth-only' or 'stencil-only'), the copy method\n  (buffer-to-texture or texture-to-buffer) and the copy size, validate\n  - if the copy can be successfully executed with the minimum required buffer size.\n  - if the copy fails with a validation error when the buffer size is less than the minimum\n  required buffer size.\n  `\n  )\n  .params(u =>\n    u\n      .combine('format', kDepthStencilFormats)\n      .combine('aspect', ['depth-only', 'stencil-only'] as const)\n      .combine('copyType', ['CopyB2T', 'CopyT2B', 'WriteTexture'] as const)\n      .filter(param =>\n        depthStencilBufferTextureCopySupported(param.copyType, param.format, param.aspect)\n      )\n      .beginSubcases()\n      .combine('copySize', [\n        { width: 8, height: 1, depthOrArrayLayers: 1 },\n        { width: 4, height: 4, depthOrArrayLayers: 1 },\n        { width: 4, height: 4, depthOrArrayLayers: 3 },\n      ])\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    t.selectDeviceForTextureFormatOrSkipTestCase(format);\n  })\n  .fn(t => {\n    const { format, aspect, copyType, copySize } = t.params;\n\n    const texture = t.createTextureTracked({\n      size: copySize,\n      format,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    const texelAspectSize = depthStencilFormatAspectSize(format, aspect);\n    assert(texelAspectSize > 0);\n\n    const bytesPerRowAlignment = copyType === 'WriteTexture' ? 1 : kBytesPerRowAlignment;\n    const bytesPerRow = align(texelAspectSize * copySize.width, bytesPerRowAlignment);\n    const rowsPerImage = copySize.height;\n    const minimumBufferSize =\n      bytesPerRow * (rowsPerImage * copySize.depthOrArrayLayers - 1) +\n      align(texelAspectSize * copySize.width, kBufferCopyAlignment);\n    assert(minimumBufferSize > kBufferCopyAlignment);\n\n    const bigEnoughBuffer = t.createBufferTracked({\n      size: minimumBufferSize,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    });\n    const smallerBuffer = t.createBufferTracked({\n      size: minimumBufferSize - kBufferCopyAlignment,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    });\n\n    if (copyType === 'CopyB2T') {\n      t.testCopyBufferToTexture(\n        { buffer: bigEnoughBuffer, bytesPerRow, rowsPerImage },\n        { texture, aspect },\n        copySize,\n        true\n      );\n      t.testCopyBufferToTexture(\n        { buffer: smallerBuffer, bytesPerRow, rowsPerImage },\n        { texture, aspect },\n        copySize,\n        false\n      );\n    } else if (copyType === 'CopyT2B') {\n      t.testCopyTextureToBuffer(\n        { texture, aspect },\n        { buffer: bigEnoughBuffer, bytesPerRow, rowsPerImage },\n        copySize,\n        true\n      );\n      t.testCopyTextureToBuffer(\n        { texture, aspect },\n        { buffer: smallerBuffer, bytesPerRow, rowsPerImage },\n        copySize,\n        false\n      );\n    } else if (copyType === 'WriteTexture') {\n      const enoughUploadData = new Uint8Array(minimumBufferSize);\n      const smallerUploadData = new Uint8Array(minimumBufferSize - kBufferCopyAlignment);\n      t.testWriteTexture(\n        { texture, aspect },\n        enoughUploadData,\n        {\n          bytesPerRow,\n          rowsPerImage,\n        },\n        copySize,\n        true\n      );\n\n      t.testWriteTexture(\n        { texture, aspect },\n        smallerUploadData,\n        {\n          bytesPerRow,\n          rowsPerImage,\n        },\n        copySize,\n        false\n      );\n    } else {\n      unreachable();\n    }\n  });\n\ng.test('depth_stencil_format,copy_buffer_offset')\n  .desc(\n    `\n    Validate for every depth stencil formats the buffer offset must be a multiple of 4 in\n    copyBufferToTexture() and copyTextureToBuffer(), but the offset in writeTexture() doesn't always\n    need to be a multiple of 4.\n    `\n  )\n  .params(u =>\n    u\n      .combine('format', kDepthStencilFormats)\n      .combine('aspect', ['depth-only', 'stencil-only'] as const)\n      .combine('copyType', ['CopyB2T', 'CopyT2B', 'WriteTexture'] as const)\n      .filter(param =>\n        depthStencilBufferTextureCopySupported(param.copyType, param.format, param.aspect)\n      )\n      .beginSubcases()\n      .combine('offset', [1, 2, 4, 6, 8])\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    t.selectDeviceForTextureFormatOrSkipTestCase(format);\n  })\n  .fn(t => {\n    const { format, aspect, copyType, offset } = t.params;\n\n    const textureSize = { width: 4, height: 4, depthOrArrayLayers: 1 };\n\n    const texture = t.createTextureTracked({\n      size: textureSize,\n      format,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    const texelAspectSize = depthStencilFormatAspectSize(format, aspect);\n    assert(texelAspectSize > 0);\n\n    const bytesPerRowAlignment = copyType === 'WriteTexture' ? 1 : kBytesPerRowAlignment;\n    const bytesPerRow = align(texelAspectSize * textureSize.width, bytesPerRowAlignment);\n    const rowsPerImage = textureSize.height;\n    const minimumBufferSize =\n      bytesPerRow * (rowsPerImage * textureSize.depthOrArrayLayers - 1) +\n      align(texelAspectSize * textureSize.width, kBufferCopyAlignment);\n    assert(minimumBufferSize > kBufferCopyAlignment);\n\n    const buffer = t.createBufferTracked({\n      size: align(minimumBufferSize + offset, kBufferCopyAlignment),\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    });\n\n    const isSuccess = copyType === 'WriteTexture' ? true : offset % 4 === 0;\n\n    if (copyType === 'CopyB2T') {\n      t.testCopyBufferToTexture(\n        { buffer, offset, bytesPerRow, rowsPerImage },\n        { texture, aspect },\n        textureSize,\n        isSuccess\n      );\n    } else if (copyType === 'CopyT2B') {\n      t.testCopyTextureToBuffer(\n        { texture, aspect },\n        { buffer, offset, bytesPerRow, rowsPerImage },\n        textureSize,\n        isSuccess\n      );\n    } else if (copyType === 'WriteTexture') {\n      const uploadData = new Uint8Array(minimumBufferSize + offset);\n      t.testWriteTexture(\n        { texture, aspect },\n        uploadData,\n        {\n          offset,\n          bytesPerRow,\n          rowsPerImage,\n        },\n        textureSize,\n        isSuccess\n      );\n    } else {\n      unreachable();\n    }\n  });\n\ng.test('sample_count')\n  .desc(\n    `\n  Test that the texture sample count. Check that a validation error is generated if sample count is\n  not 1.\n  `\n  )\n  .params(u =>\n    u //\n      // writeTexture is handled by writeTexture.spec.ts.\n      .combine('copyType', ['CopyB2T', 'CopyT2B'] as const)\n      .beginSubcases()\n      .combine('sampleCount', [1, 4])\n  )\n  .fn(t => {\n    const { sampleCount, copyType } = t.params;\n\n    let usage = GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST;\n    // WebGPU SPEC requires multisampled textures must have RENDER_ATTACHMENT usage.\n    if (sampleCount > 1) {\n      usage |= GPUTextureUsage.RENDER_ATTACHMENT;\n    }\n    const texture = t.createTextureTracked({\n      size: { width: 16, height: 16 },\n      sampleCount,\n      format: 'bgra8unorm',\n      usage,\n    });\n\n    const uploadBufferSize = 32;\n    const buffer = t.createBufferTracked({\n      size: uploadBufferSize,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    });\n\n    const textureSize = { width: 1, height: 1, depthOrArrayLayers: 1 };\n\n    const isSuccess = sampleCount === 1;\n\n    if (copyType === 'CopyB2T') {\n      t.testCopyBufferToTexture({ buffer }, { texture }, textureSize, isSuccess);\n    } else if (copyType === 'CopyT2B') {\n      t.testCopyTextureToBuffer({ texture }, { buffer }, textureSize, isSuccess);\n    }\n  });\n\nconst kRequiredTextureUsage = {\n  CopyT2B: GPUConst.TextureUsage.COPY_SRC,\n  CopyB2T: GPUConst.TextureUsage.COPY_DST,\n};\nconst kRequiredBufferUsage = {\n  CopyB2T: GPUConst.BufferUsage.COPY_SRC,\n  CopyT2B: GPUConst.BufferUsage.COPY_DST,\n};\n\ng.test('texture_buffer_usages')\n  .desc(\n    `\n  Tests calling copyTextureToBuffer or copyBufferToTexture with the texture and the buffer missed\n  COPY_SRC, COPY_DST usage respectively.\n    - texture and buffer {with, without} COPY_SRC and COPY_DST usage.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('copyType', ['CopyB2T', 'CopyT2B'] as const)\n      .beginSubcases()\n      .combine('textureUsage', kTextureUsages)\n      .expand('_textureUsageValid', p => [p.textureUsage === kRequiredTextureUsage[p.copyType]])\n      .combine('bufferUsage', kBufferUsages)\n      .expand('_bufferUsageValid', p => [p.bufferUsage === kRequiredBufferUsage[p.copyType]])\n      .filter(p => p._textureUsageValid || p._bufferUsageValid)\n  )\n  .fn(t => {\n    const { copyType, textureUsage, _textureUsageValid, bufferUsage, _bufferUsageValid } = t.params;\n\n    const texture = t.createTextureTracked({\n      size: { width: 16, height: 16 },\n      format: 'rgba8unorm',\n      usage: textureUsage,\n    });\n\n    const uploadBufferSize = 32;\n    const buffer = t.createBufferTracked({\n      size: uploadBufferSize,\n      usage: bufferUsage,\n    });\n\n    const textureSize = { width: 1, height: 1, depthOrArrayLayers: 1 };\n\n    const isSuccess = _textureUsageValid && _bufferUsageValid;\n    if (copyType === 'CopyB2T') {\n      t.testCopyBufferToTexture({ buffer }, { texture }, textureSize, isSuccess);\n    } else if (copyType === 'CopyT2B') {\n      t.testCopyTextureToBuffer({ texture }, { buffer }, textureSize, isSuccess);\n    }\n  });\n\ng.test('device_mismatch')\n  .desc(\n    `\n    Tests copyBufferToTexture and copyTextureToBuffer cannot be called with a buffer or a texture\n    created from another device.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('copyType', ['CopyB2T', 'CopyT2B'] as const)\n      .beginSubcases()\n      .combineWithParams([\n        { bufMismatched: false, texMismatched: false }, // control case\n        { bufMismatched: true, texMismatched: false },\n        { bufMismatched: false, texMismatched: true },\n      ] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.selectMismatchedDeviceOrSkipTestCase(undefined);\n  })\n  .fn(t => {\n    const { copyType, bufMismatched, texMismatched } = t.params;\n\n    const uploadBufferSize = 32;\n    const buffer = t.trackForCleanup(\n      (bufMismatched ? t.mismatchedDevice : t.device).createBuffer({\n        size: uploadBufferSize,\n        usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n      })\n    );\n\n    const textureSize = { width: 1, height: 1, depthOrArrayLayers: 1 };\n    const texture = t.trackForCleanup(\n      (texMismatched ? t.mismatchedDevice : t.device).createTexture({\n        size: textureSize,\n        format: 'rgba8unorm',\n        usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n      })\n    );\n\n    const isValid = !bufMismatched && !texMismatched;\n\n    if (copyType === 'CopyB2T') {\n      t.testCopyBufferToTexture({ buffer }, { texture }, textureSize, isValid);\n    } else if (copyType === 'CopyT2B') {\n      t.testCopyTextureToBuffer({ texture }, { buffer }, textureSize, isValid);\n    }\n  });\n"],"mappings":"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"}