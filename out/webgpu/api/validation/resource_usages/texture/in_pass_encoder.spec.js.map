{"version":3,"file":"in_pass_encoder.spec.js","names":["description","makeTestGroup","pp","assert","GPUConst","kDepthStencilFormats","kDepthStencilFormatResolvedAspect","kTextureFormatInfo","ValidationTest","kTextureBindingTypes","SIZE","TextureUsageTracking","createTexture","options","width","height","arrayLayerCount","mipLevelCount","sampleCount","format","usage","GPUTextureUsage","RENDER_ATTACHMENT","TEXTURE_BINDING","device","size","depthOrArrayLayers","dimension","createBindGroupLayout","binding","bindingType","viewDimension","sampleType","entry","texture","multisampled","undefined","storageTexture","access","entries","visibility","GPUShaderStage","COMPUTE","FRAGMENT","createBindGroup","resource","layout","createAndExecuteBundle","bindGroup","pass","depthStencilFormat","bundleEncoder","createRenderBundleEncoder","colorFormats","setBindGroup","bundle","finish","executeBundles","beginSimpleRenderPass","encoder","view","beginRenderPass","colorAttachments","clearValue","r","g","b","a","loadOp","storeOp","makeTwoBindGroupsWithOneTextureView","usage1","usage2","STORAGE_BINDING","createView","bindGroupLayouts","bindGroups","testValidationScope","compute","createCommandEncoder","beginComputePass","pipelineLayout","createPipelineLayout","pipeline","createNoOpComputePipeline","createNoOpRenderPipeline","bindGroup0","bindGroup1","setPipeline","GPUComputePassEncoder","issueDrawOrDispatch","dispatchWorkgroups","draw","setComputePipelineAndCallDispatch","BASE_LEVEL","TOTAL_LEVELS","BASE_LAYER","TOTAL_LAYERS","SLICE_COUNT","test","desc","params","u","combine","expandWithParams","p","_usageOK","type0","type1","beginSubcases","unless","binding0InBundle","binding1InBundle","combineWithParams","levelCount0","layerCount0","baseLevel1","levelCount1","baseLayer1","layerCount1","_resourceSuccess","fn","t","skipIf","isCompatibility","dimension0","view0","baseMipLevel","baseArrayLayer","dimension1","view1","viewsAreSame","skip","end","bgls","storageTextureFormat0","sampleType0","bgl0","push","GPURenderPassEncoder","storageTextureFormat1","sampleType1","bgl1","success","expectValidationError","baseLevel","baseLayer","aspect0","stencil","aspect1","depth","_usageSuccess","beforeAllSubcases","selectDeviceOrSkipTestCase","feature","aspect","view1ResolvedFormat","view1HasDepth","view1HasStencil","depthStencilAttachment","depthLoadOp","depthStoreOp","stencilLoadOp","stencilStoreOp","aspectSampleType","disjointAspects","ShaderStage","VERTEX","readEntry","storageWriteAccess","readVisibility","writeVisibility","secondUseConflicts","view2","bgl","callDrawOrDispatch","sampledView","sampledStorageView","bglEntries0","bgEntries0","usageForType","type","_usage0","_usage1","_sampleCount","binding0TexFormat","binding1TexFormat","bindingsInBundle","i","bundleInPass","isReadOnly","readOnlyUsage","writableUsage","useBindGroup0","useBindGroup1","setBindGroupsOrder","skipIfLanguageFeatureNotSupported","writeAccess","wgslVertex","wgslFragment","_if","_endif","wgslCompute","createComputePipeline","module","createShaderModule","code","entryPoint","createRenderPipeline","vertex","fragment","targets","writeMask","primitive","topology","index0","index1","expand","dispatch","setBindGroup0","setBindGroup1","indirectBuffer","createBuffer","GPUBufferUsage","INDIRECT","dispatchWorkgroupsIndirect","paramsSubcasesOnly","splitPass","pipelineUsingBG0","pipelineUsingBG1","attachment"],"sources":["../../../../../../src/webgpu/api/validation/resource_usages/texture/in_pass_encoder.spec.ts"],"sourcesContent":["export const description = `\nTexture Usages Validation Tests in Render Pass and Compute Pass.\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { pp } from '../../../../../common/util/preprocessor.js';\nimport { assert } from '../../../../../common/util/util.js';\nimport { GPUConst } from '../../../../constants.js';\nimport {\n  kDepthStencilFormats,\n  kDepthStencilFormatResolvedAspect,\n  kTextureFormatInfo,\n} from '../../../../format_info.js';\nimport { ValidationTest } from '../../validation_test.js';\n\ntype TextureBindingType =\n  | 'sampled-texture'\n  | 'multisampled-texture'\n  | 'writeonly-storage-texture'\n  | 'readonly-storage-texture'\n  | 'readwrite-storage-texture';\nconst kTextureBindingTypes = [\n  'sampled-texture',\n  'multisampled-texture',\n  'writeonly-storage-texture',\n  'readonly-storage-texture',\n  'readwrite-storage-texture',\n] as const;\n\nconst SIZE = 32;\nclass TextureUsageTracking extends ValidationTest {\n  createTexture(\n    options: {\n      width?: number;\n      height?: number;\n      arrayLayerCount?: number;\n      mipLevelCount?: number;\n      sampleCount?: number;\n      format?: GPUTextureFormat;\n      usage?: GPUTextureUsageFlags;\n    } = {}\n  ): GPUTexture {\n    const {\n      width = SIZE,\n      height = SIZE,\n      arrayLayerCount = 1,\n      mipLevelCount = 1,\n      sampleCount = 1,\n      format = 'r32float',\n      usage = GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING,\n    } = options;\n\n    return this.device.createTexture({\n      size: { width, height, depthOrArrayLayers: arrayLayerCount },\n      mipLevelCount,\n      sampleCount,\n      dimension: '2d',\n      format,\n      usage,\n    });\n  }\n\n  createBindGroupLayout(\n    binding: number,\n    bindingType: TextureBindingType,\n    viewDimension: GPUTextureViewDimension,\n    options: {\n      format?: GPUTextureFormat;\n      sampleType?: GPUTextureSampleType;\n    } = {}\n  ): GPUBindGroupLayout {\n    const { sampleType, format } = options;\n    let entry: Omit<GPUBindGroupLayoutEntry, 'binding' | 'visibility'>;\n    switch (bindingType) {\n      case 'sampled-texture':\n        entry = { texture: { viewDimension, sampleType } };\n        break;\n      case 'multisampled-texture':\n        entry = { texture: { viewDimension, multisampled: true, sampleType } };\n        break;\n      case 'writeonly-storage-texture':\n        assert(format !== undefined);\n        entry = { storageTexture: { access: 'write-only', format, viewDimension } };\n        break;\n      case 'readonly-storage-texture':\n        assert(format !== undefined);\n        entry = { storageTexture: { access: 'read-only', format, viewDimension } };\n        break;\n      case 'readwrite-storage-texture':\n        assert(format !== undefined);\n        entry = { storageTexture: { access: 'read-write', format, viewDimension } };\n        break;\n    }\n\n    return this.device.createBindGroupLayout({\n      entries: [\n        { binding, visibility: GPUShaderStage.COMPUTE | GPUShaderStage.FRAGMENT, ...entry },\n      ],\n    });\n  }\n\n  createBindGroup(\n    binding: number,\n    resource: GPUTextureView,\n    bindingType: TextureBindingType,\n    viewDimension: GPUTextureViewDimension,\n    options: {\n      format?: GPUTextureFormat;\n      sampleType?: GPUTextureSampleType;\n    } = {}\n  ): GPUBindGroup {\n    return this.device.createBindGroup({\n      entries: [{ binding, resource }],\n      layout: this.createBindGroupLayout(binding, bindingType, viewDimension, options),\n    });\n  }\n\n  createAndExecuteBundle(\n    binding: number,\n    bindGroup: GPUBindGroup,\n    pass: GPURenderPassEncoder,\n    depthStencilFormat?: GPUTextureFormat\n  ) {\n    const bundleEncoder = this.device.createRenderBundleEncoder({\n      colorFormats: ['r32float'],\n      depthStencilFormat,\n    });\n    bundleEncoder.setBindGroup(binding, bindGroup);\n    const bundle = bundleEncoder.finish();\n    pass.executeBundles([bundle]);\n  }\n\n  beginSimpleRenderPass(encoder: GPUCommandEncoder, view: GPUTextureView): GPURenderPassEncoder {\n    return encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view,\n          clearValue: { r: 0.0, g: 1.0, b: 0.0, a: 1.0 },\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    });\n  }\n\n  /**\n   * Create two bind groups with one texture view.\n   */\n  makeTwoBindGroupsWithOneTextureView(usage1: TextureBindingType, usage2: TextureBindingType) {\n    const view = this.createTexture({\n      usage: GPUTextureUsage.STORAGE_BINDING | GPUTextureUsage.TEXTURE_BINDING,\n    }).createView();\n    const bindGroupLayouts = [\n      this.createBindGroupLayout(0, usage1, '2d', {\n        sampleType: 'unfilterable-float',\n        format: 'r32float',\n      }),\n      this.createBindGroupLayout(0, usage2, '2d', {\n        sampleType: 'unfilterable-float',\n        format: 'r32float',\n      }),\n    ];\n    return {\n      bindGroupLayouts,\n      bindGroups: [\n        this.device.createBindGroup({\n          layout: bindGroupLayouts[0],\n          entries: [{ binding: 0, resource: view }],\n        }),\n        this.device.createBindGroup({\n          layout: bindGroupLayouts[1],\n          entries: [{ binding: 0, resource: view }],\n        }),\n      ],\n    };\n  }\n\n  testValidationScope(\n    compute: boolean,\n    usage1: TextureBindingType,\n    usage2: TextureBindingType\n  ): {\n    bindGroup0: GPUBindGroup;\n    bindGroup1: GPUBindGroup;\n    encoder: GPUCommandEncoder;\n    pass: GPURenderPassEncoder | GPUComputePassEncoder;\n    pipeline: GPURenderPipeline | GPUComputePipeline;\n  } {\n    const { bindGroupLayouts, bindGroups } = this.makeTwoBindGroupsWithOneTextureView(\n      usage1,\n      usage2\n    );\n\n    const encoder = this.device.createCommandEncoder();\n    const pass = compute\n      ? encoder.beginComputePass()\n      : this.beginSimpleRenderPass(encoder, this.createTexture().createView());\n\n    // Create pipeline. Note that bindings unused in pipeline should be validated too.\n    const pipelineLayout = this.device.createPipelineLayout({\n      bindGroupLayouts,\n    });\n    const pipeline = compute\n      ? this.createNoOpComputePipeline(pipelineLayout)\n      : this.createNoOpRenderPipeline(pipelineLayout, 'r32float');\n    return {\n      bindGroup0: bindGroups[0],\n      bindGroup1: bindGroups[1],\n      encoder,\n      pass,\n      pipeline,\n    };\n  }\n\n  setPipeline(\n    pass: GPURenderPassEncoder | GPUComputePassEncoder,\n    pipeline: GPURenderPipeline | GPUComputePipeline\n  ) {\n    if (pass instanceof GPUComputePassEncoder) {\n      pass.setPipeline(pipeline as GPUComputePipeline);\n    } else {\n      pass.setPipeline(pipeline as GPURenderPipeline);\n    }\n  }\n\n  issueDrawOrDispatch(pass: GPURenderPassEncoder | GPUComputePassEncoder) {\n    if (pass instanceof GPUComputePassEncoder) {\n      pass.dispatchWorkgroups(1);\n    } else {\n      pass.draw(3, 1, 0, 0);\n    }\n  }\n\n  setComputePipelineAndCallDispatch(pass: GPUComputePassEncoder, layout?: GPUPipelineLayout) {\n    const pipeline = this.createNoOpComputePipeline(layout);\n    pass.setPipeline(pipeline);\n    pass.dispatchWorkgroups(1);\n  }\n}\n\nexport const g = makeTestGroup(TextureUsageTracking);\n\nconst BASE_LEVEL = 1;\nconst TOTAL_LEVELS = 6;\nconst BASE_LAYER = 1;\nconst TOTAL_LAYERS = 6;\nconst SLICE_COUNT = 2;\n\ng.test('subresources_and_binding_types_combination_for_color')\n  .desc(\n    `\n    Test the resource usage rules by using two views of the same GPUTexture in a usage scope. Tests\n    various combinations of {sampled, storage, render target} usages, mip-level ranges, and\n    array-layer ranges, in {compute pass, render pass, render pass via bundle}.\n      - Error if a subresource (level/layer) is used as read+write or write+write in the scope,\n        except when both usages are writeonly-storage-texture which is allowed.\n  `\n  )\n  .params(u =>\n    u\n      .combine('compute', [false, true])\n      .expandWithParams(\n        p =>\n          [\n            { _usageOK: true, type0: 'sampled-texture', type1: 'sampled-texture' },\n            { _usageOK: false, type0: 'sampled-texture', type1: 'writeonly-storage-texture' },\n            { _usageOK: true, type0: 'sampled-texture', type1: 'readonly-storage-texture' },\n            { _usageOK: false, type0: 'sampled-texture', type1: 'readwrite-storage-texture' },\n            { _usageOK: false, type0: 'sampled-texture', type1: 'render-target' },\n            // Race condition upon multiple writable storage texture is valid.\n            // For p.compute === true, fails at pass.dispatch because aliasing exists.\n            {\n              _usageOK: !p.compute,\n              type0: 'writeonly-storage-texture',\n              type1: 'writeonly-storage-texture',\n            },\n            {\n              _usageOK: true,\n              type0: 'readonly-storage-texture',\n              type1: 'readonly-storage-texture',\n            },\n            {\n              _usageOK: !p.compute,\n              type0: 'readwrite-storage-texture',\n              type1: 'readwrite-storage-texture',\n            },\n            {\n              _usageOK: false,\n              type0: 'readonly-storage-texture',\n              type1: 'writeonly-storage-texture',\n            },\n            {\n              _usageOK: false,\n              type0: 'readonly-storage-texture',\n              type1: 'readwrite-storage-texture',\n            },\n            {\n              _usageOK: false,\n              type0: 'writeonly-storage-texture',\n              type1: 'readwrite-storage-texture',\n            },\n            { _usageOK: false, type0: 'readonly-storage-texture', type1: 'render-target' },\n            { _usageOK: false, type0: 'writeonly-storage-texture', type1: 'render-target' },\n            { _usageOK: false, type0: 'readwrite-storage-texture', type1: 'render-target' },\n            { _usageOK: false, type0: 'render-target', type1: 'render-target' },\n          ] as const\n      )\n      .beginSubcases()\n      .combine('binding0InBundle', [false, true])\n      .combine('binding1InBundle', [false, true])\n      .unless(\n        p =>\n          // We can't set 'render-target' in bundle, so we need to exclude it from bundle.\n          (p.binding0InBundle && p.type0 === 'render-target') ||\n          (p.binding1InBundle && p.type1 === 'render-target') ||\n          // We can't set 'render-target' or bundle in compute.\n          (p.compute &&\n            (p.binding0InBundle ||\n              p.binding1InBundle ||\n              p.type0 === 'render-target' ||\n              p.type1 === 'render-target'))\n      )\n      .combineWithParams([\n        // Two texture usages are binding to the same texture subresource.\n        {\n          levelCount0: 1,\n          layerCount0: 1,\n          baseLevel1: BASE_LEVEL,\n          levelCount1: 1,\n          baseLayer1: BASE_LAYER,\n          layerCount1: 1,\n          _resourceSuccess: false,\n        },\n\n        // Two texture usages are binding to different mip levels of the same texture.\n        {\n          levelCount0: 1,\n          layerCount0: 1,\n          baseLevel1: BASE_LEVEL + 1,\n          levelCount1: 1,\n          baseLayer1: BASE_LAYER,\n          layerCount1: 1,\n          _resourceSuccess: true,\n        },\n\n        // Two texture usages are binding to different array layers of the same texture.\n        {\n          levelCount0: 1,\n          layerCount0: 1,\n          baseLevel1: BASE_LEVEL,\n          levelCount1: 1,\n          baseLayer1: BASE_LAYER + 1,\n          layerCount1: 1,\n          _resourceSuccess: true,\n        },\n\n        // The second texture usage contains the whole mip chain where the first texture usage is\n        // using.\n        {\n          levelCount0: 1,\n          layerCount0: 1,\n          baseLevel1: 0,\n          levelCount1: TOTAL_LEVELS,\n          baseLayer1: BASE_LAYER,\n          layerCount1: 1,\n          _resourceSuccess: false,\n        },\n\n        // The second texture usage contains all layers where the first texture usage is using.\n        {\n          levelCount0: 1,\n          layerCount0: 1,\n          baseLevel1: BASE_LEVEL,\n          levelCount1: 1,\n          baseLayer1: 0,\n          layerCount1: TOTAL_LAYERS,\n          _resourceSuccess: false,\n        },\n\n        // The second texture usage contains all subresources where the first texture usage is\n        // using.\n        {\n          levelCount0: 1,\n          layerCount0: 1,\n          baseLevel1: 0,\n          levelCount1: TOTAL_LEVELS,\n          baseLayer1: 0,\n          layerCount1: TOTAL_LAYERS,\n          _resourceSuccess: false,\n        },\n\n        // Both of the two usages access a few mip levels on the same layer but they don't overlap.\n        {\n          levelCount0: SLICE_COUNT,\n          layerCount0: 1,\n          baseLevel1: BASE_LEVEL + SLICE_COUNT,\n          levelCount1: 3,\n          baseLayer1: BASE_LAYER,\n          layerCount1: 1,\n          _resourceSuccess: true,\n        },\n\n        // Both of the two usages access a few mip levels on the same layer and they overlap.\n        {\n          levelCount0: SLICE_COUNT,\n          layerCount0: 1,\n          baseLevel1: BASE_LEVEL + SLICE_COUNT - 1,\n          levelCount1: 3,\n          baseLayer1: BASE_LAYER,\n          layerCount1: 1,\n          _resourceSuccess: false,\n        },\n\n        // Both of the two usages access a few array layers on the same level but they don't\n        // overlap.\n        {\n          levelCount0: 1,\n          layerCount0: SLICE_COUNT,\n          baseLevel1: BASE_LEVEL,\n          levelCount1: 1,\n          baseLayer1: BASE_LAYER + SLICE_COUNT,\n          layerCount1: 3,\n          _resourceSuccess: true,\n        },\n\n        // Both of the two usages access a few array layers on the same level and they overlap.\n        {\n          levelCount0: 1,\n          layerCount0: SLICE_COUNT,\n          baseLevel1: BASE_LEVEL,\n          levelCount1: 1,\n          baseLayer1: BASE_LAYER + SLICE_COUNT - 1,\n          layerCount1: 3,\n          _resourceSuccess: false,\n        },\n\n        // Both of the two usages access a few array layers and mip levels but they don't overlap.\n        {\n          levelCount0: SLICE_COUNT,\n          layerCount0: SLICE_COUNT,\n          baseLevel1: BASE_LEVEL + SLICE_COUNT,\n          levelCount1: 3,\n          baseLayer1: BASE_LAYER + SLICE_COUNT,\n          layerCount1: 3,\n          _resourceSuccess: true,\n        },\n\n        // Both of the two usages access a few array layers and mip levels and they overlap.\n        {\n          levelCount0: SLICE_COUNT,\n          layerCount0: SLICE_COUNT,\n          baseLevel1: BASE_LEVEL + SLICE_COUNT - 1,\n          levelCount1: 3,\n          baseLayer1: BASE_LAYER + SLICE_COUNT - 1,\n          layerCount1: 3,\n          _resourceSuccess: false,\n        },\n      ])\n      .unless(\n        p =>\n          // Every color attachment or storage texture can use only one single subresource.\n          (p.type0 !== 'sampled-texture' && (p.levelCount0 !== 1 || p.layerCount0 !== 1)) ||\n          (p.type1 !== 'sampled-texture' && (p.levelCount1 !== 1 || p.layerCount1 !== 1)) ||\n          // All color attachments' size should be the same.\n          (p.type0 === 'render-target' &&\n            p.type1 === 'render-target' &&\n            p.baseLevel1 !== BASE_LEVEL)\n      )\n  )\n  .fn(t => {\n    const {\n      compute,\n      binding0InBundle,\n      binding1InBundle,\n      levelCount0,\n      layerCount0,\n      baseLevel1,\n      baseLayer1,\n      levelCount1,\n      layerCount1,\n      type0,\n      type1,\n      _usageOK,\n      _resourceSuccess,\n    } = t.params;\n\n    t.skipIf(\n      t.isCompatibility,\n      'multiple views of the same texture in a single draw/dispatch are not supported in compat, nor are sub ranges of layers'\n    );\n\n    const texture = t.createTexture({\n      arrayLayerCount: TOTAL_LAYERS,\n      mipLevelCount: TOTAL_LEVELS,\n      usage:\n        GPUTextureUsage.TEXTURE_BINDING |\n        GPUTextureUsage.STORAGE_BINDING |\n        GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const dimension0 = layerCount0 !== 1 ? '2d-array' : '2d';\n    const view0 = texture.createView({\n      dimension: dimension0,\n      baseMipLevel: BASE_LEVEL,\n      mipLevelCount: levelCount0,\n      baseArrayLayer: BASE_LAYER,\n      arrayLayerCount: layerCount0,\n    });\n\n    const dimension1 = layerCount1 !== 1 ? '2d-array' : '2d';\n    const view1 = texture.createView({\n      dimension: dimension1,\n      baseMipLevel: baseLevel1,\n      mipLevelCount: levelCount1,\n      baseArrayLayer: baseLayer1,\n      arrayLayerCount: layerCount1,\n    });\n\n    const viewsAreSame =\n      dimension0 === dimension1 &&\n      layerCount0 === layerCount1 &&\n      BASE_LEVEL === baseLevel1 &&\n      levelCount0 === levelCount1 &&\n      BASE_LAYER === baseLayer1 &&\n      layerCount0 === layerCount1;\n    if (!viewsAreSame && t.isCompatibility) {\n      t.skip('different views of same texture are not supported in compatibility mode');\n    }\n\n    const encoder = t.device.createCommandEncoder();\n    if (type0 === 'render-target') {\n      // Note that type1 is 'render-target' too. So we don't need to create bindings.\n      assert(type1 === 'render-target');\n      const pass = encoder.beginRenderPass({\n        colorAttachments: [\n          {\n            view: view0,\n            clearValue: { r: 0.0, g: 1.0, b: 0.0, a: 1.0 },\n            loadOp: 'clear',\n            storeOp: 'store',\n          },\n          {\n            view: view1,\n            clearValue: { r: 0.0, g: 1.0, b: 0.0, a: 1.0 },\n            loadOp: 'clear',\n            storeOp: 'store',\n          },\n        ],\n      });\n      pass.end();\n    } else {\n      const pass = compute\n        ? encoder.beginComputePass()\n        : t.beginSimpleRenderPass(\n            encoder,\n            type1 === 'render-target' ? view1 : t.createTexture().createView()\n          );\n\n      const bgls: GPUBindGroupLayout[] = [];\n      // Create bind groups. Set bind groups in pass directly or set bind groups in bundle.\n      const storageTextureFormat0 = type0 === 'sampled-texture' ? undefined : 'r32float';\n      const sampleType0 = type0 === 'sampled-texture' ? 'unfilterable-float' : undefined;\n\n      const bgl0 = t.createBindGroupLayout(0, type0, dimension0, {\n        format: storageTextureFormat0,\n        sampleType: sampleType0,\n      });\n      const bindGroup0 = t.device.createBindGroup({\n        layout: bgl0,\n        entries: [{ binding: 0, resource: view0 }],\n      });\n      bgls.push(bgl0);\n\n      if (binding0InBundle) {\n        assert(pass instanceof GPURenderPassEncoder);\n        t.createAndExecuteBundle(0, bindGroup0, pass);\n      } else {\n        pass.setBindGroup(0, bindGroup0);\n      }\n      if (type1 !== 'render-target') {\n        const storageTextureFormat1 = type1 === 'sampled-texture' ? undefined : 'r32float';\n        const sampleType1 = type1 === 'sampled-texture' ? 'unfilterable-float' : undefined;\n        const bgl1 = t.createBindGroupLayout(1, type1, dimension1, {\n          format: storageTextureFormat1,\n          sampleType: sampleType1,\n        });\n        const bindGroup1 = t.device.createBindGroup({\n          layout: bgl1,\n          entries: [{ binding: 1, resource: view1 }],\n        });\n        bgls.push(bgl1);\n\n        if (binding1InBundle) {\n          assert(pass instanceof GPURenderPassEncoder);\n          t.createAndExecuteBundle(1, bindGroup1, pass);\n        } else {\n          pass.setBindGroup(1, bindGroup1);\n        }\n      }\n      if (compute) {\n        t.setComputePipelineAndCallDispatch(\n          pass as GPUComputePassEncoder,\n          t.device.createPipelineLayout({ bindGroupLayouts: bgls })\n        );\n      }\n      pass.end();\n    }\n\n    const success = _resourceSuccess || _usageOK;\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n\ng.test('subresources_and_binding_types_combination_for_aspect')\n  .desc(\n    `\n    Test the resource usage rules by using two views of the same GPUTexture in a usage scope. Tests\n    various combinations of {sampled, render target} usages, {all, depth-only, stencil-only} aspects\n    that overlap a given subresources in {compute pass, render pass, render pass via bundle}.\n      - Error if a subresource (level/layer/aspect) is used as read+write or write+write in the\n        scope.\n  `\n  )\n  .params(u =>\n    u\n      .combine('compute', [false, true])\n      .combine('binding0InBundle', [false, true])\n      .combine('binding1InBundle', [false, true])\n      .combine('format', kDepthStencilFormats)\n      .beginSubcases()\n      .combineWithParams([\n        {\n          baseLevel: BASE_LEVEL,\n          baseLayer: BASE_LAYER,\n          _resourceSuccess: false,\n        },\n        {\n          baseLevel: BASE_LEVEL + 1,\n          baseLayer: BASE_LAYER,\n          _resourceSuccess: true,\n        },\n        {\n          baseLevel: BASE_LEVEL,\n          baseLayer: BASE_LAYER + 1,\n          _resourceSuccess: true,\n        },\n      ])\n      .combine('aspect0', ['all', 'depth-only', 'stencil-only'] as const)\n      .combine('aspect1', ['all', 'depth-only', 'stencil-only'] as const)\n      .unless(\n        p =>\n          (p.aspect0 === 'stencil-only' && !kTextureFormatInfo[p.format].stencil) ||\n          (p.aspect1 === 'stencil-only' && !kTextureFormatInfo[p.format].stencil)\n      )\n      .unless(\n        p =>\n          (p.aspect0 === 'depth-only' && !kTextureFormatInfo[p.format].depth) ||\n          (p.aspect1 === 'depth-only' && !kTextureFormatInfo[p.format].depth)\n      )\n      .combineWithParams([\n        {\n          type0: 'sampled-texture',\n          type1: 'sampled-texture',\n          _usageSuccess: true,\n        },\n        {\n          type0: 'sampled-texture',\n          type1: 'render-target',\n          _usageSuccess: false,\n        },\n      ] as const)\n      .unless(\n        // Can't sample a multiplanar texture without selecting an aspect.\n        p =>\n          !!kTextureFormatInfo[p.format].depth &&\n          !!kTextureFormatInfo[p.format].stencil &&\n          ((p.aspect0 === 'all' && p.type0 === 'sampled-texture') ||\n            (p.aspect1 === 'all' && p.type1 === 'sampled-texture'))\n      )\n      .unless(\n        p =>\n          // We can't set 'render-target' in bundle, so we need to exclude it from bundle.\n          p.binding1InBundle && p.type1 === 'render-target'\n      )\n      .unless(\n        p =>\n          // We can't set 'render-target' or bundle in compute. Note that type0 is definitely not\n          // 'render-target'\n          p.compute && (p.binding0InBundle || p.binding1InBundle || p.type1 === 'render-target')\n      )\n      .unless(\n        p =>\n          // Depth-stencil attachment views must encompass all aspects of the texture. Invalid\n          // cases are for depth-stencil textures when the aspect is not 'all'.\n          p.type1 === 'render-target' &&\n          !!kTextureFormatInfo[p.format].depth &&\n          !!kTextureFormatInfo[p.format].stencil &&\n          p.aspect1 !== 'all'\n      )\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    t.selectDeviceOrSkipTestCase(kTextureFormatInfo[format].feature);\n  })\n  .fn(t => {\n    const {\n      compute,\n      binding0InBundle,\n      binding1InBundle,\n      format,\n      baseLevel,\n      baseLayer,\n      aspect0,\n      aspect1,\n      type0,\n      type1,\n      _resourceSuccess,\n      _usageSuccess,\n    } = t.params;\n\n    t.skipIf(t.isCompatibility, 'sub ranges of layers are not supported in compat mode');\n\n    const texture = t.createTexture({\n      arrayLayerCount: TOTAL_LAYERS,\n      mipLevelCount: TOTAL_LEVELS,\n      format,\n    });\n\n    const view0 = texture.createView({\n      dimension: '2d',\n      baseMipLevel: BASE_LEVEL,\n      mipLevelCount: 1,\n      baseArrayLayer: BASE_LAYER,\n      arrayLayerCount: 1,\n      aspect: aspect0,\n    });\n\n    const view1 = texture.createView({\n      dimension: '2d',\n      baseMipLevel: baseLevel,\n      mipLevelCount: 1,\n      baseArrayLayer: baseLayer,\n      arrayLayerCount: 1,\n      aspect: aspect1,\n    });\n    const view1ResolvedFormat = kDepthStencilFormatResolvedAspect[format][aspect1]!;\n    const view1HasDepth = kTextureFormatInfo[view1ResolvedFormat].depth;\n    const view1HasStencil = kTextureFormatInfo[view1ResolvedFormat].stencil;\n\n    const encoder = t.device.createCommandEncoder();\n    // Color attachment's size should match depth/stencil attachment's size. Note that if\n    // type1 !== 'render-target' then there's no depthStencilAttachment to match anyway.\n    const depthStencilFormat = type1 === 'render-target' ? view1ResolvedFormat : undefined;\n\n    const size = SIZE >> baseLevel;\n    const pass = compute\n      ? encoder.beginComputePass()\n      : encoder.beginRenderPass({\n          colorAttachments: [\n            {\n              view: t.createTexture({ width: size, height: size }).createView(),\n              clearValue: { r: 0.0, g: 1.0, b: 0.0, a: 1.0 },\n              loadOp: 'clear',\n              storeOp: 'store',\n            },\n          ],\n          depthStencilAttachment: depthStencilFormat\n            ? {\n                view: view1,\n                depthLoadOp: view1HasDepth ? 'load' : undefined,\n                depthStoreOp: view1HasDepth ? 'discard' : undefined,\n                stencilLoadOp: view1HasStencil ? 'load' : undefined,\n                stencilStoreOp: view1HasStencil ? 'discard' : undefined,\n              }\n            : undefined,\n        });\n\n    const aspectSampleType = (format: GPUTextureFormat, aspect: typeof aspect0) => {\n      switch (aspect) {\n        case 'depth-only':\n          return 'depth';\n        case 'stencil-only':\n          return 'uint';\n        case 'all':\n          assert(kTextureFormatInfo[format].depth !== kTextureFormatInfo[format].stencil);\n          if (kTextureFormatInfo[format].stencil) {\n            return 'uint';\n          }\n          return 'depth';\n      }\n    };\n\n    // Create bind groups. Set bind groups in pass directly or set bind groups in bundle.\n    const bindGroup0 = t.createBindGroup(0, view0, type0, '2d', {\n      sampleType: type0 === 'sampled-texture' ? aspectSampleType(format, aspect0) : undefined,\n    });\n    if (binding0InBundle) {\n      assert(pass instanceof GPURenderPassEncoder);\n      t.createAndExecuteBundle(0, bindGroup0, pass, depthStencilFormat);\n    } else {\n      pass.setBindGroup(0, bindGroup0);\n    }\n    if (type1 !== 'render-target') {\n      const bindGroup1 = t.createBindGroup(1, view1, type1, '2d', {\n        sampleType: type1 === 'sampled-texture' ? aspectSampleType(format, aspect1) : undefined,\n      });\n      if (binding1InBundle) {\n        assert(pass instanceof GPURenderPassEncoder);\n        t.createAndExecuteBundle(1, bindGroup1, pass, depthStencilFormat);\n      } else {\n        pass.setBindGroup(1, bindGroup1);\n      }\n    }\n    if (compute) t.setComputePipelineAndCallDispatch(pass as GPUComputePassEncoder);\n    pass.end();\n\n    const disjointAspects =\n      (aspect0 === 'depth-only' && aspect1 === 'stencil-only') ||\n      (aspect0 === 'stencil-only' && aspect1 === 'depth-only');\n\n    // If subresources' mip/array slices has no overlap, or their binding types don't conflict,\n    // it will definitely success no matter what aspects they are binding to.\n    const success = disjointAspects || _resourceSuccess || _usageSuccess;\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n\ng.test('shader_stages_and_visibility,storage_write')\n  .desc(\n    `\n    Test that stage visibility doesn't affect resource usage validation.\n    - Use a texture as sampled, with 'readVisibility' {0,VERTEX,FRAGMENT,COMPUTE}\n    - Use a {same,different} texture as storage, with 'writeVisibility' {0,FRAGMENT,COMPUTE}\n\n    There should be a validation error IFF the same texture was used.\n  `\n  )\n  .params(u =>\n    u\n      .combine('compute', [false, true])\n      .beginSubcases()\n      .combine('secondUseConflicts', [false, true])\n      .combine('readVisibility', [\n        0,\n        GPUConst.ShaderStage.VERTEX,\n        GPUConst.ShaderStage.FRAGMENT,\n        GPUConst.ShaderStage.COMPUTE,\n      ])\n      .combine('writeVisibility', [0, GPUConst.ShaderStage.FRAGMENT, GPUConst.ShaderStage.COMPUTE])\n      .combine('readEntry', [\n        { texture: { sampleType: 'unfilterable-float' } },\n        { storageTexture: { access: 'read-only', format: 'r32float' } },\n      ] as const)\n      .combine('storageWriteAccess', ['write-only', 'read-write'] as const)\n  )\n  .fn(t => {\n    const {\n      compute,\n      readEntry,\n      storageWriteAccess,\n      readVisibility,\n      writeVisibility,\n      secondUseConflicts,\n    } = t.params;\n\n    const usage = GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.STORAGE_BINDING;\n    const view = t.createTexture({ usage }).createView();\n    const view2 = secondUseConflicts ? view : t.createTexture({ usage }).createView();\n\n    const bgl = t.device.createBindGroupLayout({\n      entries: [\n        { binding: 0, visibility: readVisibility, ...readEntry },\n        {\n          binding: 1,\n          visibility: writeVisibility,\n          storageTexture: { access: storageWriteAccess, format: 'r32float' },\n        },\n      ],\n    });\n    const bindGroup = t.device.createBindGroup({\n      layout: bgl,\n      entries: [\n        { binding: 0, resource: view },\n        { binding: 1, resource: view2 },\n      ],\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    if (compute) {\n      const pass = encoder.beginComputePass();\n      pass.setBindGroup(0, bindGroup);\n\n      t.setComputePipelineAndCallDispatch(\n        pass,\n        t.device.createPipelineLayout({\n          bindGroupLayouts: [bgl],\n        })\n      );\n      pass.end();\n    } else {\n      const pass = t.beginSimpleRenderPass(encoder, t.createTexture().createView());\n      pass.setBindGroup(0, bindGroup);\n      pass.end();\n    }\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, secondUseConflicts);\n  });\n\ng.test('shader_stages_and_visibility,attachment_write')\n  .desc(\n    `\n    Test that stage visibility doesn't affect resource usage validation.\n    - Use a texture as sampled, with 'readVisibility' {0,VERTEX,FRAGMENT,COMPUTE}\n    - Use a {same,different} texture as a render pass attachment\n\n    There should be a validation error IFF the same texture was used.\n  `\n  )\n  .params(u =>\n    u\n      .beginSubcases()\n      .combine('secondUseConflicts', [false, true])\n      .combine('readVisibility', [\n        0,\n        GPUConst.ShaderStage.VERTEX,\n        GPUConst.ShaderStage.FRAGMENT,\n        GPUConst.ShaderStage.COMPUTE,\n      ])\n      .combine('readEntry', [\n        { texture: { sampleType: 'unfilterable-float' } },\n        { storageTexture: { access: 'read-only', format: 'r32float' } },\n      ] as const)\n  )\n  .fn(t => {\n    const { readVisibility, readEntry, secondUseConflicts } = t.params;\n\n    const usage =\n      GPUTextureUsage.TEXTURE_BINDING |\n      GPUTextureUsage.RENDER_ATTACHMENT |\n      GPUTextureUsage.STORAGE_BINDING;\n\n    const view = t.createTexture({ usage }).createView();\n    const view2 = secondUseConflicts ? view : t.createTexture({ usage }).createView();\n    const bgl = t.device.createBindGroupLayout({\n      entries: [{ binding: 0, visibility: readVisibility, ...readEntry }],\n    });\n    const bindGroup = t.device.createBindGroup({\n      layout: bgl,\n      entries: [{ binding: 0, resource: view }],\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = t.beginSimpleRenderPass(encoder, view2);\n    pass.setBindGroup(0, bindGroup);\n    pass.end();\n\n    // Texture usages in bindings with invisible shader stages should be validated. Invisible shader\n    // stages include shader stage with visibility none, compute shader stage in render pass, and\n    // vertex/fragment shader stage in compute pass.\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, secondUseConflicts);\n  });\n\ng.test('replaced_binding')\n  .desc(\n    `\n    Test whether a binding that's been replaced by another setBindGroup call can still\n    cause validation to fail (with a write/write conflict).\n      - In render pass, all setBindGroup calls contribute to the validation even if they're\n        shadowed.\n      - In compute pass, only the bindings visible at dispatchWorkgroups() contribute to validation.\n  `\n  )\n  .params(u =>\n    u\n      .combine('compute', [false, true])\n      .combine('callDrawOrDispatch', [false, true])\n      .combine('entry', [\n        { texture: { sampleType: 'unfilterable-float' } },\n        { storageTexture: { access: 'read-only', format: 'r32float' } },\n        { storageTexture: { access: 'write-only', format: 'r32float' } },\n        { storageTexture: { access: 'read-write', format: 'r32float' } },\n      ] as const)\n  )\n  .fn(t => {\n    const { compute, callDrawOrDispatch, entry } = t.params;\n\n    const sampledView = t.createTexture().createView();\n    const sampledStorageView = t\n      .createTexture({ usage: GPUTextureUsage.STORAGE_BINDING | GPUTextureUsage.TEXTURE_BINDING })\n      .createView();\n\n    // Create bindGroup0. It has two bindings. These two bindings use different views/subresources.\n    const bglEntries0: GPUBindGroupLayoutEntry[] = [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.FRAGMENT,\n        texture: { sampleType: 'unfilterable-float' },\n      },\n      {\n        binding: 1,\n        visibility: GPUShaderStage.FRAGMENT,\n        ...entry,\n      },\n    ];\n    const bgEntries0: GPUBindGroupEntry[] = [\n      { binding: 0, resource: sampledView },\n      { binding: 1, resource: sampledStorageView },\n    ];\n    const bindGroup0 = t.device.createBindGroup({\n      entries: bgEntries0,\n      layout: t.device.createBindGroupLayout({ entries: bglEntries0 }),\n    });\n\n    // Create bindGroup1. It has one binding, which use the same view/subresource of a binding in\n    // bindGroup0. So it may or may not conflicts with that binding in bindGroup0.\n    const bindGroup1 = t.createBindGroup(0, sampledStorageView, 'sampled-texture', '2d', {\n      sampleType: 'unfilterable-float',\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = compute\n      ? encoder.beginComputePass()\n      : t.beginSimpleRenderPass(encoder, t.createTexture().createView());\n\n    // Set bindGroup0 and bindGroup1. bindGroup0 is replaced by bindGroup1 in the current pass.\n    // But bindings in bindGroup0 should be validated too.\n    pass.setBindGroup(0, bindGroup0);\n    if (callDrawOrDispatch) {\n      const pipeline = compute\n        ? t.createNoOpComputePipeline()\n        : t.createNoOpRenderPipeline('auto', 'r32float');\n      t.setPipeline(pass, pipeline);\n      t.issueDrawOrDispatch(pass);\n    }\n    pass.setBindGroup(0, bindGroup1);\n    pass.end();\n\n    // MAINTENANCE_TODO: If the Compatible Usage List\n    // (https://gpuweb.github.io/gpuweb/#compatible-usage-list) gets programmatically defined in\n    // capability_info, use it here, instead of this logic, for clarity.\n    let success =\n      entry.storageTexture?.access !== 'write-only' &&\n      entry.storageTexture?.access !== 'read-write';\n    // Replaced bindings should not be validated in compute pass, because validation only occurs\n    // inside dispatchWorkgroups() which only looks at the current resource usages.\n    success ||= compute;\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n\ng.test('bindings_in_bundle')\n  .desc(\n    `\n    Test the texture usages in bundles by using two bindings of the same texture with various\n    combination of {sampled, storage, render target} usages.\n  `\n  )\n  .params(u =>\n    u\n      .combine('type0', ['render-target', ...kTextureBindingTypes] as const)\n      .combine('type1', ['render-target', ...kTextureBindingTypes] as const)\n      .beginSubcases()\n      .combine('binding0InBundle', [false, true])\n      .combine('binding1InBundle', [false, true])\n      .expandWithParams(function* ({ type0, type1 }) {\n        const usageForType = (type: typeof type0 | typeof type1) => {\n          switch (type) {\n            case 'multisampled-texture':\n            case 'sampled-texture':\n              return 'TEXTURE_BINDING' as const;\n            case 'readonly-storage-texture':\n            case 'writeonly-storage-texture':\n            case 'readwrite-storage-texture':\n              return 'STORAGE_BINDING' as const;\n            case 'render-target':\n              return 'RENDER_ATTACHMENT' as const;\n          }\n        };\n\n        yield {\n          _usage0: usageForType(type0),\n          _usage1: usageForType(type1),\n          _sampleCount:\n            type0 === 'multisampled-texture' || type1 === 'multisampled-texture'\n              ? (4 as const)\n              : undefined,\n        };\n      })\n      .unless(\n        p =>\n          // We can't set 'render-target' in bundle, so we need to exclude it from bundle.\n          // In addition, if both bindings are non-bundle, there is no need to test it because\n          // we have far more comprehensive test cases for that situation in this file.\n          (p.binding0InBundle && p.type0 === 'render-target') ||\n          (p.binding1InBundle && p.type1 === 'render-target') ||\n          (!p.binding0InBundle && !p.binding1InBundle) ||\n          // Storage textures can't be multisampled.\n          (p._sampleCount !== undefined &&\n            p._sampleCount > 1 &&\n            (p._usage0 === 'STORAGE_BINDING' || p._usage1 === 'STORAGE_BINDING')) ||\n          // If both are sampled, we create two views of the same texture, so both must be\n          // multisampled.\n          (p.type0 === 'multisampled-texture' && p.type1 === 'sampled-texture') ||\n          (p.type0 === 'sampled-texture' && p.type1 === 'multisampled-texture')\n      )\n  )\n  .fn(t => {\n    const { binding0InBundle, binding1InBundle, type0, type1, _usage0, _usage1, _sampleCount } =\n      t.params;\n\n    // Two bindings are attached to the same texture view.\n    const usage =\n      _sampleCount === 4\n        ? GPUTextureUsage[_usage0] | GPUTextureUsage[_usage1] | GPUTextureUsage.RENDER_ATTACHMENT\n        : GPUTextureUsage[_usage0] | GPUTextureUsage[_usage1];\n    const view = t\n      .createTexture({\n        usage,\n        sampleCount: _sampleCount,\n      })\n      .createView();\n\n    const bindGroups: GPUBindGroup[] = [];\n    if (type0 !== 'render-target') {\n      const binding0TexFormat = type0 === 'sampled-texture' ? undefined : 'r32float';\n      bindGroups[0] = t.createBindGroup(0, view, type0, '2d', {\n        format: binding0TexFormat,\n        sampleType: 'unfilterable-float',\n      });\n    }\n    if (type1 !== 'render-target') {\n      const binding1TexFormat = type1 === 'sampled-texture' ? undefined : 'r32float';\n      bindGroups[1] = t.createBindGroup(1, view, type1, '2d', {\n        format: binding1TexFormat,\n        sampleType: 'unfilterable-float',\n      });\n    }\n\n    const encoder = t.device.createCommandEncoder();\n    // At least one binding is in bundle, which means that its type is not 'render-target'.\n    // As a result, only one binding's type is 'render-target' at most.\n    const pass = t.beginSimpleRenderPass(\n      encoder,\n      type0 === 'render-target' || type1 === 'render-target' ? view : t.createTexture().createView()\n    );\n\n    const bindingsInBundle: boolean[] = [binding0InBundle, binding1InBundle];\n    for (let i = 0; i < 2; i++) {\n      // Create a bundle for each bind group if its bindings is required to be in bundle on purpose.\n      // Otherwise, call setBindGroup directly in pass if needed (when its binding is not\n      // 'render-target').\n      if (bindingsInBundle[i]) {\n        const bundleEncoder = t.device.createRenderBundleEncoder({\n          colorFormats: ['r32float'],\n        });\n        bundleEncoder.setBindGroup(i, bindGroups[i]);\n        const bundleInPass = bundleEncoder.finish();\n        pass.executeBundles([bundleInPass]);\n      } else if (bindGroups[i] !== undefined) {\n        pass.setBindGroup(i, bindGroups[i]);\n      }\n    }\n\n    pass.end();\n\n    const isReadOnly = (t: typeof type0 | typeof type1) => {\n      switch (t) {\n        case 'sampled-texture':\n        case 'multisampled-texture':\n        case 'readonly-storage-texture':\n          return true;\n        default:\n          return false;\n      }\n    };\n\n    let success = false;\n    if (isReadOnly(type0) && isReadOnly(type1)) {\n      success = true;\n    }\n\n    // Writable storage textures (write-only and read-write storage textures) cannot be aliased.\n    if (type0 === type1) {\n      success = true;\n    }\n\n    // Resource usages in bundle should be validated.\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n\ng.test('unused_bindings_in_pipeline')\n  .desc(\n    `\n    Test that for compute pipelines with 'auto' layout, only bindings used by the pipeline count\n    toward the usage scope. For render passes, test the pipeline doesn't matter because only the\n    calls to setBindGroup count toward the usage scope.\n  `\n  )\n  .params(u =>\n    u\n      .combine('compute', [false, true])\n      .combine('readOnlyUsage', ['sampled-texture', 'readonly-storage-texture'] as const)\n      .combine('writableUsage', ['writeonly-storage-texture', 'readwrite-storage-texture'] as const)\n      .combine('useBindGroup0', [false, true])\n      .combine('useBindGroup1', [false, true])\n      .combine('setBindGroupsOrder', ['common', 'reversed'] as const)\n      .combine('setPipeline', ['before', 'middle', 'after', 'none'] as const)\n      .combine('callDrawOrDispatch', [false, true])\n  )\n  .fn(t => {\n    const {\n      compute,\n      readOnlyUsage,\n      writableUsage,\n      useBindGroup0,\n      useBindGroup1,\n      setBindGroupsOrder,\n      setPipeline,\n      callDrawOrDispatch,\n    } = t.params;\n    if (writableUsage === 'readwrite-storage-texture') {\n      t.skipIfLanguageFeatureNotSupported('readonly_and_readwrite_storage_textures');\n    }\n\n    const view = t\n      .createTexture({ usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.STORAGE_BINDING })\n      .createView();\n    const bindGroup0 = t.createBindGroup(0, view, readOnlyUsage, '2d', {\n      sampleType: 'unfilterable-float',\n      format: 'r32float',\n    });\n    const bindGroup1 = t.createBindGroup(0, view, writableUsage, '2d', {\n      format: 'r32float',\n    });\n\n    const writeAccess = writableUsage === 'writeonly-storage-texture' ? 'write' : 'read_write';\n    const wgslVertex = `@vertex fn main() -> @builtin(position) vec4<f32> {\n  return vec4<f32>();\n}`;\n    const wgslFragment = pp`\n      ${pp._if(useBindGroup0)}\n      @group(0) @binding(0) var image0 : texture_storage_2d<r32float, ${writeAccess}>;\n      ${pp._endif}\n      ${pp._if(useBindGroup1)}\n      @group(1) @binding(0) var image1 : texture_storage_2d<r32float, ${writeAccess}>;\n      ${pp._endif}\n      @fragment fn main() {}\n    `;\n\n    const wgslCompute = pp`\n      ${pp._if(useBindGroup0)}\n      @group(0) @binding(0) var image0 : texture_storage_2d<r32float, ${writeAccess}>;\n      ${pp._endif}\n      ${pp._if(useBindGroup1)}\n      @group(1) @binding(0) var image1 : texture_storage_2d<r32float, ${writeAccess}>;\n      ${pp._endif}\n      @compute @workgroup_size(1) fn main() {}\n    `;\n\n    const pipeline = compute\n      ? t.device.createComputePipeline({\n          layout: 'auto',\n          compute: {\n            module: t.device.createShaderModule({\n              code: wgslCompute,\n            }),\n            entryPoint: 'main',\n          },\n        })\n      : t.device.createRenderPipeline({\n          layout: 'auto',\n          vertex: {\n            module: t.device.createShaderModule({\n              code: wgslVertex,\n            }),\n            entryPoint: 'main',\n          },\n          fragment: {\n            module: t.device.createShaderModule({\n              code: wgslFragment,\n            }),\n            entryPoint: 'main',\n            targets: [{ format: 'r32float', writeMask: 0 }],\n          },\n          primitive: { topology: 'triangle-list' },\n        });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = compute\n      ? encoder.beginComputePass()\n      : encoder.beginRenderPass({\n          colorAttachments: [\n            {\n              view: t.createTexture().createView(),\n              clearValue: { r: 0.0, g: 1.0, b: 0.0, a: 1.0 },\n              loadOp: 'clear',\n              storeOp: 'store',\n            },\n          ],\n        });\n    const index0 = setBindGroupsOrder === 'common' ? 0 : 1;\n    const index1 = setBindGroupsOrder === 'common' ? 1 : 0;\n    if (setPipeline === 'before') t.setPipeline(pass, pipeline);\n    pass.setBindGroup(index0, bindGroup0);\n    if (setPipeline === 'middle') t.setPipeline(pass, pipeline);\n    pass.setBindGroup(index1, bindGroup1);\n    if (setPipeline === 'after') t.setPipeline(pass, pipeline);\n    if (callDrawOrDispatch) t.issueDrawOrDispatch(pass);\n    pass.end();\n\n    // Resource usage validation scope is defined by the whole render pass or by dispatch calls.\n    // Regardless of whether or not dispatch is called, in a compute pass, we always succeed\n    // because in this test, none of the bindings are used by the pipeline.\n    // In a render pass, we always fail because usage is based on any bindings used in the\n    // render pass, regardless of whether the pipeline uses them.\n    let success = compute;\n\n    // Also fails if we try to draw/dispatch without a pipeline.\n    if (callDrawOrDispatch && setPipeline === 'none') {\n      success = false;\n    }\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n\ng.test('scope,dispatch')\n  .desc(\n    `\n    Tests that in a compute pass, no usage validation occurs without a dispatch call.\n    {Sets,skips} each of two conflicting bind groups in a pass {with,without} a dispatch call.\n    If both are set, AND there is a dispatch call, validation should fail.\n  `\n  )\n  .params(u =>\n    u\n      .combine('dispatch', ['none', 'direct', 'indirect'])\n      .expandWithParams(\n        p =>\n          [\n            { usage1: 'sampled-texture', usage2: 'writeonly-storage-texture' },\n            { usage1: 'sampled-texture', usage2: 'readwrite-storage-texture' },\n            { usage1: 'readonly-storage-texture', usage2: 'writeonly-storage-texture' },\n            { usage1: 'readonly-storage-texture', usage2: 'readwrite-storage-texture' },\n            { usage1: 'writeonly-storage-texture', usage2: 'readwrite-storage-texture' },\n          ] as const\n      )\n      .beginSubcases()\n      .expand('setBindGroup0', p => (p.dispatch ? [true] : [false, true]))\n      .expand('setBindGroup1', p => (p.dispatch ? [true] : [false, true]))\n  )\n  .fn(t => {\n    const { dispatch, usage1, usage2, setBindGroup0, setBindGroup1 } = t.params;\n\n    const { bindGroup0, bindGroup1, encoder, pass, pipeline } = t.testValidationScope(\n      true,\n      usage1,\n      usage2\n    );\n    assert(pass instanceof GPUComputePassEncoder);\n    t.setPipeline(pass, pipeline);\n\n    if (setBindGroup0) pass.setBindGroup(0, bindGroup0);\n    if (setBindGroup1) pass.setBindGroup(1, bindGroup1);\n\n    switch (dispatch) {\n      case 'direct':\n        pass.dispatchWorkgroups(1);\n        break;\n      case 'indirect':\n        {\n          const indirectBuffer = t.device.createBuffer({ size: 4, usage: GPUBufferUsage.INDIRECT });\n          pass.dispatchWorkgroupsIndirect(indirectBuffer, 0);\n        }\n        break;\n    }\n\n    pass.end();\n\n    t.expectValidationError(\n      () => {\n        encoder.finish();\n      },\n      dispatch !== 'none' && setBindGroup0 && setBindGroup1\n    );\n  });\n\ng.test('scope,basic,render')\n  .desc(\n    `\n    Tests that in a render pass, validation occurs even without a pipeline or draw call.\n    {Set,skip} each of two conflicting bind groups. If both are set, validation should fail.\n  `\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('setBindGroup0', [false, true])\n      .combine('setBindGroup1', [false, true])\n      .expandWithParams(\n        p =>\n          [\n            { usage1: 'sampled-texture', usage2: 'writeonly-storage-texture' },\n            { usage1: 'sampled-texture', usage2: 'readwrite-storage-texture' },\n            { usage1: 'readonly-storage-texture', usage2: 'writeonly-storage-texture' },\n            { usage1: 'readonly-storage-texture', usage2: 'readwrite-storage-texture' },\n            { usage1: 'writeonly-storage-texture', usage2: 'readwrite-storage-texture' },\n          ] as const\n      )\n  )\n  .fn(t => {\n    const { setBindGroup0, setBindGroup1, usage1, usage2 } = t.params;\n\n    const { bindGroup0, bindGroup1, encoder, pass } = t.testValidationScope(false, usage1, usage2);\n    assert(pass instanceof GPURenderPassEncoder);\n\n    if (setBindGroup0) pass.setBindGroup(0, bindGroup0);\n    if (setBindGroup1) pass.setBindGroup(1, bindGroup1);\n\n    pass.end();\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, setBindGroup0 && setBindGroup1);\n  });\n\ng.test('scope,pass_boundary,compute')\n  .desc(\n    `\n    Test using two conflicting bind groups in separate dispatch calls, {with,without} a pass\n    boundary in between. This should always be valid.\n    `\n  )\n  .paramsSubcasesOnly(u =>\n    u.combine('splitPass', [false, true]).expandWithParams(\n      p =>\n        [\n          { usage1: 'sampled-texture', usage2: 'writeonly-storage-texture' },\n          { usage1: 'sampled-texture', usage2: 'readwrite-storage-texture' },\n          { usage1: 'readonly-storage-texture', usage2: 'writeonly-storage-texture' },\n          { usage1: 'readonly-storage-texture', usage2: 'readwrite-storage-texture' },\n          { usage1: 'writeonly-storage-texture', usage2: 'readwrite-storage-texture' },\n        ] as const\n    )\n  )\n  .fn(t => {\n    const { splitPass, usage1, usage2 } = t.params;\n\n    const { bindGroupLayouts, bindGroups } = t.makeTwoBindGroupsWithOneTextureView(usage1, usage2);\n\n    const encoder = t.device.createCommandEncoder();\n\n    const pipelineUsingBG0 = t.createNoOpComputePipeline(\n      t.device.createPipelineLayout({\n        bindGroupLayouts: [bindGroupLayouts[0]],\n      })\n    );\n    const pipelineUsingBG1 = t.createNoOpComputePipeline(\n      t.device.createPipelineLayout({\n        bindGroupLayouts: [bindGroupLayouts[1]],\n      })\n    );\n\n    let pass = encoder.beginComputePass();\n    pass.setPipeline(pipelineUsingBG0);\n    pass.setBindGroup(0, bindGroups[0]);\n    pass.dispatchWorkgroups(1);\n    if (splitPass) {\n      pass.end();\n      pass = encoder.beginComputePass();\n    }\n    pass.setPipeline(pipelineUsingBG1);\n    pass.setBindGroup(0, bindGroups[1]);\n    pass.dispatchWorkgroups(1);\n    pass.end();\n\n    // Always valid\n    encoder.finish();\n  });\n\ng.test('scope,pass_boundary,render')\n  .desc(\n    `\n    Test using two conflicting bind groups in separate draw calls, {with,without} a pass\n    boundary in between. This should be valid only if there is a pass boundary.\n    `\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('splitPass', [false, true])\n      .combine('draw', [false, true])\n      .expandWithParams(\n        p =>\n          [\n            { usage1: 'sampled-texture', usage2: 'writeonly-storage-texture' },\n            { usage1: 'sampled-texture', usage2: 'readwrite-storage-texture' },\n            { usage1: 'readonly-storage-texture', usage2: 'writeonly-storage-texture' },\n            { usage1: 'readonly-storage-texture', usage2: 'readwrite-storage-texture' },\n            { usage1: 'writeonly-storage-texture', usage2: 'readwrite-storage-texture' },\n          ] as const\n      )\n  )\n  .fn(t => {\n    const { splitPass, draw, usage1, usage2 } = t.params;\n\n    const { bindGroupLayouts, bindGroups } = t.makeTwoBindGroupsWithOneTextureView(usage1, usage2);\n\n    const encoder = t.device.createCommandEncoder();\n\n    const pipelineUsingBG0 = t.createNoOpRenderPipeline(\n      t.device.createPipelineLayout({\n        bindGroupLayouts: [bindGroupLayouts[0]],\n      }),\n      'r32float'\n    );\n    const pipelineUsingBG1 = t.createNoOpRenderPipeline(\n      t.device.createPipelineLayout({\n        bindGroupLayouts: [bindGroupLayouts[1]],\n      }),\n      'r32float'\n    );\n\n    const attachment = t.createTexture().createView();\n\n    let pass = t.beginSimpleRenderPass(encoder, attachment);\n    pass.setPipeline(pipelineUsingBG0);\n    pass.setBindGroup(0, bindGroups[0]);\n    if (draw) pass.draw(3);\n    if (splitPass) {\n      pass.end();\n      pass = t.beginSimpleRenderPass(encoder, attachment);\n    }\n    pass.setPipeline(pipelineUsingBG1);\n    pass.setBindGroup(0, bindGroups[1]);\n    if (draw) pass.draw(3);\n    pass.end();\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !splitPass);\n  });\n"],"mappings":"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"}