{"version":3,"file":"in_render_misc.spec.js","names":["description","makeTestGroup","unreachable","ValidationTest","kTextureBindingTypes","IsReadOnlyTextureBindingType","F","createBindGroupLayoutForTest","textureUsage","sampleType","visibility","GPUShaderStage","bindGroupLayoutEntry","binding","texture","viewDimension","storageTexture","access","format","device","createBindGroupLayout","entries","createBindGroupForTest","textureView","createBindGroup","layout","resource","g","kTextureSize","kTextureLayers","test","desc","params","u","combine","fn","t","useDifferentTextureAsTexture2","baseLayer2","view1Binding","view2Binding","texture0","createTexture","usage","GPUTextureUsage","TEXTURE_BINDING","STORAGE_BINDING","size","textureView0","createView","dimension","baseArrayLayer","arrayLayerCount","bindGroup0","bindGroup1","texture2","textureView2","validBindGroup2","unusedColorTexture","RENDER_ATTACHMENT","encoder","createCommandEncoder","renderPassEncoder","beginRenderPass","colorAttachments","view","loadOp","storeOp","setBindGroup","end","noConflict","expectValidationError","finish","bindAspect","depthStencilReadOnly","depthStencilTexture","isCompatibility","textureBindingViewDimension","conflictedToNonReadOnlyAttachmentBindGroup","aspect","colorTexture","validBindGroup","depthStencilAttachment","depthReadOnly","stencilReadOnly","inRenderPass","textureUsage0","textureUsage1","skipIfLanguageFeatureNotSupported","FRAGMENT","COMPUTE","fragmentShader","renderPipeline","createRenderPipeline","createPipelineLayout","bindGroupLayouts","vertex","module","createShaderModule","code","getNoOpShaderCode","fragment","targets","setPipeline","draw","computeShader","pipelineLayout","computePipeline","createComputePipeline","compute","writableStorageTexture","writableStorageTextureView","writableStorageTextureBindGroup","computePassEncoder","beginComputePass","dispatchWorkgroups","success","filter","usage0","usage1","COPY_SRC","COPY_DST","UseTextureOnCommandEncoder","buffer","createBufferWithState","GPUBufferUsage","copyTextureToBuffer","copyBufferToTexture","bindGroup"],"sources":["../../../../../../src/webgpu/api/validation/resource_usages/texture/in_render_misc.spec.ts"],"sourcesContent":["export const description = `\nTexture Usages Validation Tests on All Kinds of WebGPU Subresource Usage Scopes.\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { unreachable } from '../../../../../common/util/util.js';\nimport { ValidationTest } from '../../validation_test.js';\nimport {\n  TextureBindingType,\n  kTextureBindingTypes,\n  IsReadOnlyTextureBindingType,\n} from '../texture/in_render_common.spec.js';\n\nclass F extends ValidationTest {\n  createBindGroupLayoutForTest(\n    textureUsage: TextureBindingType,\n    sampleType: 'unfilterable-float' | 'depth' | 'uint',\n    visibility: GPUShaderStage['FRAGMENT'] | GPUShaderStage['COMPUTE'] = GPUShaderStage['FRAGMENT']\n  ): GPUBindGroupLayout {\n    const bindGroupLayoutEntry: GPUBindGroupLayoutEntry = {\n      binding: 0,\n      visibility,\n    };\n\n    switch (textureUsage) {\n      case 'sampled-texture':\n        bindGroupLayoutEntry.texture = { viewDimension: '2d-array', sampleType };\n        break;\n      case 'readonly-storage-texture':\n        bindGroupLayoutEntry.storageTexture = {\n          access: 'read-only',\n          format: 'r32float',\n          viewDimension: '2d-array',\n        };\n        break;\n      case 'writeonly-storage-texture':\n        bindGroupLayoutEntry.storageTexture = {\n          access: 'write-only',\n          format: 'r32float',\n          viewDimension: '2d-array',\n        };\n        break;\n      case 'readwrite-storage-texture':\n        bindGroupLayoutEntry.storageTexture = {\n          access: 'read-write',\n          format: 'r32float',\n          viewDimension: '2d-array',\n        };\n        break;\n      default:\n        unreachable();\n        break;\n    }\n    return this.device.createBindGroupLayout({\n      entries: [bindGroupLayoutEntry],\n    });\n  }\n\n  createBindGroupForTest(\n    textureView: GPUTextureView,\n    textureUsage: TextureBindingType,\n    sampleType: 'unfilterable-float' | 'depth' | 'uint',\n    visibility: GPUShaderStage['FRAGMENT'] | GPUShaderStage['COMPUTE'] = GPUShaderStage['FRAGMENT']\n  ) {\n    return this.device.createBindGroup({\n      layout: this.createBindGroupLayoutForTest(textureUsage, sampleType, visibility),\n      entries: [{ binding: 0, resource: textureView }],\n    });\n  }\n}\n\nexport const g = makeTestGroup(F);\n\nconst kTextureSize = 16;\nconst kTextureLayers = 3;\n\ng.test('subresources,set_bind_group_on_same_index_color_texture')\n  .desc(\n    `\n  Test that when one color texture subresource is bound to different bind groups, whether the bind\n  groups are reset by another compatible ones or not, its list of internal usages within one usage\n  scope can only be a compatible usage list.`\n  )\n  .params(u =>\n    u\n      .combine('useDifferentTextureAsTexture2', [true, false])\n      .combine('baseLayer2', [0, 1] as const)\n      .combine('view1Binding', kTextureBindingTypes)\n      .combine('view2Binding', kTextureBindingTypes)\n  )\n  .fn(t => {\n    const { useDifferentTextureAsTexture2, baseLayer2, view1Binding, view2Binding } = t.params;\n\n    const texture0 = t.device.createTexture({\n      format: 'r32float',\n      usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.STORAGE_BINDING,\n      size: [kTextureSize, kTextureSize, kTextureLayers],\n    });\n    // We always bind the first layer of the texture to bindGroup0.\n    const textureView0 = texture0.createView({\n      dimension: '2d-array',\n      baseArrayLayer: 0,\n      arrayLayerCount: 1,\n    });\n    const bindGroup0 = t.createBindGroupForTest(textureView0, view1Binding, 'unfilterable-float');\n    const bindGroup1 = t.createBindGroupForTest(textureView0, view2Binding, 'unfilterable-float');\n\n    const texture2 = useDifferentTextureAsTexture2\n      ? t.device.createTexture({\n          format: 'r32float',\n          usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.STORAGE_BINDING,\n          size: [kTextureSize, kTextureSize, kTextureLayers],\n        })\n      : texture0;\n    const textureView2 = texture2.createView({\n      dimension: '2d-array',\n      baseArrayLayer: baseLayer2,\n      arrayLayerCount: kTextureLayers - baseLayer2,\n    });\n    // There should be no conflict between bindGroup0 and validBindGroup2.\n    const validBindGroup2 = t.createBindGroupForTest(\n      textureView2,\n      view2Binding,\n      'unfilterable-float'\n    );\n\n    const unusedColorTexture = t.device.createTexture({\n      format: 'r32float',\n      usage: GPUTextureUsage.RENDER_ATTACHMENT,\n      size: [kTextureSize, kTextureSize, 1],\n    });\n    const encoder = t.device.createCommandEncoder();\n    const renderPassEncoder = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: unusedColorTexture.createView(),\n          loadOp: 'load',\n          storeOp: 'store',\n        },\n      ],\n    });\n    renderPassEncoder.setBindGroup(0, bindGroup0);\n    renderPassEncoder.setBindGroup(1, bindGroup1);\n    renderPassEncoder.setBindGroup(1, validBindGroup2);\n    renderPassEncoder.end();\n\n    const noConflict =\n      (IsReadOnlyTextureBindingType(view1Binding) && IsReadOnlyTextureBindingType(view2Binding)) ||\n      view1Binding === view2Binding;\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !noConflict);\n  });\n\ng.test('subresources,set_bind_group_on_same_index_depth_stencil_texture')\n  .desc(\n    `\n  Test that when one depth stencil texture subresource is bound to different bind groups, whether\n  the bind groups are reset by another compatible ones or not, its list of internal usages within\n  one usage scope can only be a compatible usage list.`\n  )\n  .params(u =>\n    u\n      .combine('bindAspect', ['depth-only', 'stencil-only'] as const)\n      .combine('depthStencilReadOnly', [true, false])\n  )\n  .fn(t => {\n    const { bindAspect, depthStencilReadOnly } = t.params;\n    const depthStencilTexture = t.device.createTexture({\n      format: 'depth24plus-stencil8',\n      usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.RENDER_ATTACHMENT,\n      size: [kTextureSize, kTextureSize, 1],\n      ...(t.isCompatibility && {\n        textureBindingViewDimension: '2d-array',\n      }),\n    });\n\n    const conflictedToNonReadOnlyAttachmentBindGroup = t.createBindGroupForTest(\n      depthStencilTexture.createView({\n        dimension: '2d-array',\n        aspect: bindAspect,\n      }),\n      'sampled-texture',\n      bindAspect === 'depth-only' ? 'depth' : 'uint'\n    );\n\n    const colorTexture = t.device.createTexture({\n      format: 'r32float',\n      usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.STORAGE_BINDING,\n      size: [kTextureSize, kTextureSize, 1],\n      ...(t.isCompatibility && {\n        textureBindingViewDimension: '2d-array',\n      }),\n    });\n    const validBindGroup = t.createBindGroupForTest(\n      colorTexture.createView({\n        dimension: '2d-array',\n      }),\n      'sampled-texture',\n      'unfilterable-float'\n    );\n\n    const encoder = t.device.createCommandEncoder();\n    const renderPassEncoder = encoder.beginRenderPass({\n      colorAttachments: [],\n      depthStencilAttachment: {\n        view: depthStencilTexture.createView(),\n        depthReadOnly: depthStencilReadOnly,\n        stencilReadOnly: depthStencilReadOnly,\n      },\n    });\n    renderPassEncoder.setBindGroup(0, conflictedToNonReadOnlyAttachmentBindGroup);\n    renderPassEncoder.setBindGroup(0, validBindGroup);\n    renderPassEncoder.end();\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !depthStencilReadOnly);\n  });\n\ng.test('subresources,set_unused_bind_group')\n  .desc(\n    `\n  Test that when one texture subresource is bound to different bind groups and the bind groups are\n  used in the same render or compute pass encoder, its list of internal usages within one usage\n  scope can only be a compatible usage list.`\n  )\n  .params(u =>\n    u\n      .combine('inRenderPass', [true, false])\n      .combine('textureUsage0', kTextureBindingTypes)\n      .combine('textureUsage1', kTextureBindingTypes)\n  )\n  .fn(t => {\n    const { inRenderPass, textureUsage0, textureUsage1 } = t.params;\n\n    if (\n      textureUsage0 === 'readwrite-storage-texture' ||\n      textureUsage1 === 'readwrite-storage-texture'\n    ) {\n      t.skipIfLanguageFeatureNotSupported('readonly_and_readwrite_storage_textures');\n    }\n\n    const texture0 = t.device.createTexture({\n      format: 'r32float',\n      usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.STORAGE_BINDING,\n      size: [kTextureSize, kTextureSize, kTextureLayers],\n    });\n    // We always bind the first layer of the texture to bindGroup0.\n    const textureView0 = texture0.createView({\n      dimension: '2d-array',\n      baseArrayLayer: 0,\n      arrayLayerCount: 1,\n    });\n    const visibility = inRenderPass ? GPUShaderStage.FRAGMENT : GPUShaderStage.COMPUTE;\n    // bindGroup0 is used by the pipelines, and bindGroup1 is not used by the pipelines.\n    const bindGroup0 = t.createBindGroupForTest(\n      textureView0,\n      textureUsage0,\n      'unfilterable-float',\n      visibility\n    );\n    const bindGroup1 = t.createBindGroupForTest(\n      textureView0,\n      textureUsage1,\n      'unfilterable-float',\n      visibility\n    );\n\n    const encoder = t.device.createCommandEncoder();\n    const colorTexture = t.device.createTexture({\n      format: 'r32float',\n      usage: GPUTextureUsage.RENDER_ATTACHMENT,\n      size: [kTextureSize, kTextureSize, 1],\n    });\n    if (inRenderPass) {\n      let fragmentShader = '';\n      switch (textureUsage0) {\n        case 'sampled-texture':\n          fragmentShader = `\n          @group(0) @binding(0) var texture0 : texture_2d_array<f32>;\n          @fragment fn main()\n            -> @location(0) vec4<f32> {\n              return textureLoad(texture0, vec2<i32>(), 0, 0);\n          }\n          `;\n          break;\n        case `readonly-storage-texture`:\n          fragmentShader = `\n          @group(0) @binding(0) var texture0 : texture_storage_2d_array<r32float, read>;\n          @fragment fn main()\n            -> @location(0) vec4<f32> {\n              return textureLoad(texture0, vec2<i32>(), 0);\n          }\n          `;\n          break;\n        case `writeonly-storage-texture`:\n          fragmentShader = `\n            @group(0) @binding(0) var texture0 : texture_storage_2d_array<r32float, write>;\n            @fragment fn main()\n              -> @location(0) vec4<f32> {\n                textureStore(texture0, vec2i(), 0, vec4f(1, 0, 0, 1));\n                return vec4f(0, 0, 0, 1);\n            }\n            `;\n          break;\n        case `readwrite-storage-texture`:\n          fragmentShader = `\n            @group(0) @binding(0) var texture0 : texture_storage_2d_array<r32float, read_write>;\n            @fragment fn main()\n              -> @location(0) vec4<f32> {\n                let color = textureLoad(texture0, vec2i(), 0);\n                textureStore(texture0, vec2i(), 0, vec4f(1, 0, 0, 1));\n                return color;\n            }\n            `;\n          break;\n      }\n\n      const renderPipeline = t.device.createRenderPipeline({\n        layout: t.device.createPipelineLayout({\n          bindGroupLayouts: [\n            t.createBindGroupLayoutForTest(textureUsage0, 'unfilterable-float', visibility),\n          ],\n        }),\n        vertex: {\n          module: t.device.createShaderModule({\n            code: t.getNoOpShaderCode('VERTEX'),\n          }),\n        },\n        fragment: {\n          module: t.device.createShaderModule({\n            code: fragmentShader,\n          }),\n          targets: [{ format: 'r32float' }],\n        },\n      });\n\n      const renderPassEncoder = encoder.beginRenderPass({\n        colorAttachments: [\n          {\n            view: colorTexture.createView(),\n            loadOp: 'load',\n            storeOp: 'store',\n          },\n        ],\n      });\n      renderPassEncoder.setBindGroup(0, bindGroup0);\n      renderPassEncoder.setBindGroup(1, bindGroup1);\n      renderPassEncoder.setPipeline(renderPipeline);\n      renderPassEncoder.draw(1);\n      renderPassEncoder.end();\n    } else {\n      let computeShader = '';\n      switch (textureUsage0) {\n        case 'sampled-texture':\n          computeShader = `\n          @group(0) @binding(0) var texture0 : texture_2d_array<f32>;\n          @group(1) @binding(0) var writableStorage : texture_storage_2d_array<r32float, write>;\n          @compute @workgroup_size(1) fn main() {\n              let value = textureLoad(texture0, vec2i(), 0, 0);\n              textureStore(writableStorage, vec2i(), 0, value);\n          }\n          `;\n          break;\n        case `readonly-storage-texture`:\n          computeShader = `\n          @group(0) @binding(0) var texture0 : texture_storage_2d_array<r32float, read>;\n          @group(1) @binding(0) var writableStorage : texture_storage_2d_array<r32float, write>;\n          @compute @workgroup_size(1) fn main() {\n              let value = textureLoad(texture0, vec2<i32>(), 0);\n              textureStore(writableStorage, vec2i(), 0, value);\n          }\n          `;\n          break;\n        case `writeonly-storage-texture`:\n          computeShader = `\n            @group(0) @binding(0) var texture0 : texture_storage_2d_array<r32float, write>;\n            @group(1) @binding(0) var writableStorage : texture_storage_2d_array<r32float, write>;\n            @compute @workgroup_size(1) fn main() {\n                textureStore(texture0, vec2i(), 0, vec4f(1, 0, 0, 1));\n                textureStore(writableStorage, vec2i(), 0, vec4f(1, 0, 0, 1));\n            }\n            `;\n          break;\n        case `readwrite-storage-texture`:\n          computeShader = `\n            @group(0) @binding(0) var texture0 : texture_storage_2d_array<r32float, read_write>;\n            @group(1) @binding(0) var writableStorage : texture_storage_2d_array<r32float, write>;\n            @compute @workgroup_size(1) fn main() {\n                let color = textureLoad(texture0, vec2i(), 0);\n                textureStore(texture0, vec2i(), 0, vec4f(1, 0, 0, 1));\n                textureStore(writableStorage, vec2i(), 0, color);\n            }\n            `;\n          break;\n      }\n\n      const pipelineLayout = t.device.createPipelineLayout({\n        bindGroupLayouts: [\n          t.createBindGroupLayoutForTest(textureUsage0, 'unfilterable-float', visibility),\n          t.createBindGroupLayoutForTest(\n            'writeonly-storage-texture',\n            'unfilterable-float',\n            visibility\n          ),\n        ],\n      });\n      const computePipeline = t.device.createComputePipeline({\n        layout: pipelineLayout,\n        compute: {\n          module: t.device.createShaderModule({\n            code: computeShader,\n          }),\n        },\n      });\n\n      const writableStorageTexture = t.device.createTexture({\n        format: 'r32float',\n        usage: GPUTextureUsage.STORAGE_BINDING,\n        size: [kTextureSize, kTextureSize, 1],\n      });\n      const writableStorageTextureView = writableStorageTexture.createView({\n        dimension: '2d-array',\n        baseArrayLayer: 0,\n        arrayLayerCount: 1,\n      });\n      const writableStorageTextureBindGroup = t.createBindGroupForTest(\n        writableStorageTextureView,\n        'writeonly-storage-texture',\n        'unfilterable-float',\n        visibility\n      );\n\n      const computePassEncoder = encoder.beginComputePass();\n      computePassEncoder.setBindGroup(0, bindGroup0);\n      computePassEncoder.setBindGroup(1, writableStorageTextureBindGroup);\n      computePassEncoder.setBindGroup(2, bindGroup1);\n      computePassEncoder.setPipeline(computePipeline);\n      computePassEncoder.dispatchWorkgroups(1);\n      computePassEncoder.end();\n    }\n\n    // In WebGPU SPEC (https://gpuweb.github.io/gpuweb/#programming-model-synchronization):\n    // This specification defines the following usage scopes:\n    // - In a compute pass, each dispatch command (dispatchWorkgroups() or\n    //   dispatchWorkgroupsIndirect()) is one usage scope. A subresource is \"used\" in the usage\n    //   scope if it is potentially accessible by the command. State-setting compute pass commands,\n    //   like setBindGroup(index, bindGroup, dynamicOffsets), do not contribute directly to a usage\n    //   scope.\n    // - One render pass is one usage scope. A subresource is \"used\" in the usage scope if it’s\n    //   referenced by any (state-setting or non-state-setting) command. For example, in\n    //   setBindGroup(index, bindGroup, dynamicOffsets), every subresource in bindGroup is \"used\" in\n    //   the render pass’s usage scope.\n    const success =\n      !inRenderPass ||\n      (IsReadOnlyTextureBindingType(textureUsage0) &&\n        IsReadOnlyTextureBindingType(textureUsage1)) ||\n      textureUsage0 === textureUsage1;\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n\ng.test('subresources,texture_usages_in_copy_and_render_pass')\n  .desc(\n    `\n  Test that using one texture subresource in a render pass encoder and a copy command is always\n  allowed as WebGPU SPEC (chapter 3.4.5) defines that out of any pass encoder, each command always\n  belongs to one usage scope.`\n  )\n  .params(u =>\n    u\n      .combine('usage0', [\n        'copy-src',\n        'copy-dst',\n        'color-attachment',\n        ...kTextureBindingTypes,\n      ] as const)\n      .combine('usage1', [\n        'copy-src',\n        'copy-dst',\n        'color-attachment',\n        ...kTextureBindingTypes,\n      ] as const)\n      .filter(\n        ({ usage0, usage1 }) =>\n          usage0 === 'copy-src' ||\n          usage0 === 'copy-dst' ||\n          usage1 === 'copy-src' ||\n          usage1 === 'copy-dst'\n      )\n  )\n  .fn(t => {\n    const { usage0, usage1 } = t.params;\n\n    const texture = t.device.createTexture({\n      format: 'r32float',\n      usage:\n        GPUTextureUsage.COPY_SRC |\n        GPUTextureUsage.COPY_DST |\n        GPUTextureUsage.TEXTURE_BINDING |\n        GPUTextureUsage.STORAGE_BINDING |\n        GPUTextureUsage.RENDER_ATTACHMENT,\n      size: [kTextureSize, kTextureSize, 1],\n      ...(t.isCompatibility && {\n        textureBindingViewDimension: '2d-array',\n      }),\n    });\n\n    const UseTextureOnCommandEncoder = (\n      texture: GPUTexture,\n      usage: 'copy-src' | 'copy-dst' | 'color-attachment' | TextureBindingType,\n      encoder: GPUCommandEncoder\n    ) => {\n      switch (usage) {\n        case 'copy-src': {\n          const buffer = t.createBufferWithState('valid', {\n            size: 4,\n            usage: GPUBufferUsage.COPY_DST,\n          });\n          encoder.copyTextureToBuffer({ texture }, { buffer }, [1, 1, 1]);\n          break;\n        }\n        case 'copy-dst': {\n          const buffer = t.createBufferWithState('valid', {\n            size: 4,\n            usage: GPUBufferUsage.COPY_SRC,\n          });\n          encoder.copyBufferToTexture({ buffer }, { texture }, [1, 1, 1]);\n          break;\n        }\n        case 'color-attachment': {\n          const renderPassEncoder = encoder.beginRenderPass({\n            colorAttachments: [{ view: texture.createView(), loadOp: 'load', storeOp: 'store' }],\n          });\n          renderPassEncoder.end();\n          break;\n        }\n        case 'sampled-texture':\n        case 'readonly-storage-texture':\n        case 'writeonly-storage-texture':\n        case 'readwrite-storage-texture': {\n          const colorTexture = t.device.createTexture({\n            format: 'r32float',\n            usage: GPUTextureUsage.RENDER_ATTACHMENT,\n            size: [kTextureSize, kTextureSize, 1],\n          });\n          const renderPassEncoder = encoder.beginRenderPass({\n            colorAttachments: [\n              { view: colorTexture.createView(), loadOp: 'load', storeOp: 'store' },\n            ],\n          });\n          const bindGroup = t.createBindGroupForTest(\n            texture.createView({\n              dimension: '2d-array',\n            }),\n            usage,\n            'unfilterable-float'\n          );\n          renderPassEncoder.setBindGroup(0, bindGroup);\n          renderPassEncoder.end();\n          break;\n        }\n      }\n    };\n    const encoder = t.device.createCommandEncoder();\n    UseTextureOnCommandEncoder(texture, usage0, encoder);\n    UseTextureOnCommandEncoder(texture, usage1, encoder);\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, false);\n  });\n"],"mappings":"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"}