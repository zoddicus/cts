{"version":3,"file":"createView.spec.js","names":["description","kUnitCaseParamsBuilder","makeTestGroup","unreachable","kTextureAspects","kTextureDimensions","kTextureViewDimensions","kTextureFormatInfo","kTextureFormats","kFeaturesForFormats","filterFormatsByFeature","viewCompatible","kResourceStates","getTextureDimensionFromView","reifyTextureViewDescriptor","viewDimensionsForTextureDimension","reifyExtent3D","ValidationTest","g","kLevels","test","desc","params","u","combine","beginSubcases","expand","textureFormatFeature","viewFormatFeature","undefined","beforeAllSubcases","t","selectDeviceOrSkipTestCase","fn","textureFormat","viewFormat","useViewFormatList","blockWidth","blockHeight","skipIfTextureFormatNotSupported","skipIf","isCompatibility","compatible","texture","device","createTexture","format","size","usage","GPUTextureUsage","TEXTURE_BINDING","viewFormats","success","expectValidationError","createView","skipIfTextureViewDimensionNotSupported","viewDimension","textureDimension","textureDescriptor","dimension","view","reified","selectDeviceForTextureFormatOrSkipTestCase","aspect","info","depth","stencil","kTextureAndViewDimensions","p","validateCreateViewLayersLevels","tex","textureLevels","mipLevelCount","textureLayers","depthOrArrayLayers","baseMipLevel","arrayLayerCount","baseArrayLayer","d","unless","l","Set","lastArrayLayer","kWidth","viewDescriptor","lastMipLevel","debug","paramsSubcasesOnly","state","createTextureWithState"],"sources":["../../../../src/webgpu/api/validation/createView.spec.ts"],"sourcesContent":["export const description = `createView validation tests.`;\n\nimport { kUnitCaseParamsBuilder } from '../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { unreachable } from '../../../common/util/util.js';\nimport {\n  kTextureAspects,\n  kTextureDimensions,\n  kTextureViewDimensions,\n} from '../../capability_info.js';\nimport {\n  kTextureFormatInfo,\n  kTextureFormats,\n  kFeaturesForFormats,\n  filterFormatsByFeature,\n  viewCompatible,\n} from '../../format_info.js';\nimport { kResourceStates } from '../../gpu_test.js';\nimport {\n  getTextureDimensionFromView,\n  reifyTextureViewDescriptor,\n  viewDimensionsForTextureDimension,\n} from '../../util/texture/base.js';\nimport { reifyExtent3D } from '../../util/unions.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\nconst kLevels = 6;\n\ng.test('format')\n  .desc(\n    `Views must have the view format compatible with the base texture, for all {texture format}x{view format}.`\n  )\n  .params(u =>\n    u\n      .combine('textureFormatFeature', kFeaturesForFormats)\n      .combine('viewFormatFeature', kFeaturesForFormats)\n      .beginSubcases()\n      .expand('textureFormat', ({ textureFormatFeature }) =>\n        filterFormatsByFeature(textureFormatFeature, kTextureFormats)\n      )\n      .expand('viewFormat', ({ viewFormatFeature }) =>\n        filterFormatsByFeature(viewFormatFeature, [undefined, ...kTextureFormats])\n      )\n      .combine('useViewFormatList', [false, true])\n  )\n  .beforeAllSubcases(t => {\n    const { textureFormatFeature, viewFormatFeature } = t.params;\n    t.selectDeviceOrSkipTestCase([textureFormatFeature, viewFormatFeature]);\n  })\n  .fn(t => {\n    const { textureFormat, viewFormat, useViewFormatList } = t.params;\n    const { blockWidth, blockHeight } = kTextureFormatInfo[textureFormat];\n\n    t.skipIfTextureFormatNotSupported(textureFormat, viewFormat);\n    // Compatibility mode does not support format reinterpretation.\n    t.skipIf(t.isCompatibility && viewFormat !== undefined && viewFormat !== textureFormat);\n\n    const compatible = viewFormat === undefined || viewCompatible(textureFormat, viewFormat);\n\n    const texture = t.device.createTexture({\n      format: textureFormat,\n      size: [blockWidth, blockHeight],\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n\n      // This is a test of createView, not createTexture. Don't pass viewFormats here that\n      // are not compatible, as that is tested in createTexture.spec.ts.\n      viewFormats:\n        useViewFormatList && compatible && viewFormat !== undefined ? [viewFormat] : undefined,\n    });\n\n    // Successful if there is no view format, no reinterpretation was required, or the formats are compatible\n    // and is was specified in the viewFormats list.\n    const success =\n      viewFormat === undefined || viewFormat === textureFormat || (compatible && useViewFormatList);\n    t.expectValidationError(() => {\n      texture.createView({ format: viewFormat });\n    }, !success);\n  });\n\ng.test('dimension')\n  .desc(\n    `For all {texture dimension}, {view dimension}, test that they must be compatible:\n  - 1d -> 1d\n  - 2d -> 2d, 2d-array, cube, or cube-array\n  - 3d -> 3d`\n  )\n  .params(u =>\n    u\n      .combine('textureDimension', kTextureDimensions)\n      .combine('viewDimension', [...kTextureViewDimensions, undefined])\n  )\n  .beforeAllSubcases(t => {\n    t.skipIfTextureViewDimensionNotSupported(t.params.viewDimension);\n  })\n  .fn(t => {\n    const { textureDimension, viewDimension } = t.params;\n\n    const size = textureDimension === '1d' ? [4] : [4, 4, 6];\n    const textureDescriptor = {\n      format: 'rgba8unorm' as const,\n      dimension: textureDimension,\n      size,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n    const texture = t.device.createTexture(textureDescriptor);\n\n    const view = { dimension: viewDimension };\n    const reified = reifyTextureViewDescriptor(textureDescriptor, view);\n\n    const success = getTextureDimensionFromView(reified.dimension) === textureDimension;\n    t.expectValidationError(() => {\n      texture.createView(view);\n    }, !success);\n  });\n\ng.test('aspect')\n  .desc(\n    `For every {format}x{aspect}, test that the view aspect must exist in the format:\n  - \"all\" is allowed for any format\n  - \"depth-only\" is allowed only for depth and depth-stencil formats\n  - \"stencil-only\" is allowed only for stencil and depth-stencil formats`\n  )\n  .params(u =>\n    u //\n      .combine('format', kTextureFormats)\n      .combine('aspect', kTextureAspects)\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    t.selectDeviceForTextureFormatOrSkipTestCase(format);\n  })\n  .fn(t => {\n    const { format, aspect } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    const texture = t.device.createTexture({\n      format,\n      size: [info.blockWidth, info.blockHeight, 1],\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    });\n\n    const success =\n      aspect === 'all' ||\n      (aspect === 'depth-only' && info.depth) ||\n      (aspect === 'stencil-only' && info.stencil);\n    t.expectValidationError(() => {\n      texture.createView({ aspect });\n    }, !success);\n  });\n\nconst kTextureAndViewDimensions = kUnitCaseParamsBuilder\n  .combine('textureDimension', kTextureDimensions)\n  .expand('viewDimension', p => [\n    undefined,\n    ...viewDimensionsForTextureDimension(p.textureDimension),\n  ]);\n\nfunction validateCreateViewLayersLevels(tex: GPUTextureDescriptor, view: GPUTextureViewDescriptor) {\n  const textureLevels = tex.mipLevelCount ?? 1;\n  const textureLayers = tex.dimension === '2d' ? reifyExtent3D(tex.size).depthOrArrayLayers : 1;\n  const reified = reifyTextureViewDescriptor(tex, view);\n\n  let success =\n    reified.mipLevelCount > 0 &&\n    reified.baseMipLevel < textureLevels &&\n    reified.baseMipLevel + reified.mipLevelCount <= textureLevels &&\n    reified.arrayLayerCount > 0 &&\n    reified.baseArrayLayer < textureLayers &&\n    reified.baseArrayLayer + reified.arrayLayerCount <= textureLayers;\n  if (reified.dimension === '1d' || reified.dimension === '2d' || reified.dimension === '3d') {\n    success &&= reified.arrayLayerCount === 1;\n  } else if (reified.dimension === 'cube') {\n    success &&= reified.arrayLayerCount === 6;\n  } else if (reified.dimension === 'cube-array') {\n    success &&= reified.arrayLayerCount % 6 === 0;\n  }\n  return success;\n}\n\ng.test('array_layers')\n  .desc(\n    `For each texture dimension {1d,2d,3d}, for each possible view dimension for that texture\n    dimension (or undefined, which defaults to the texture dimension), test validation of layer\n    counts:\n  - 1d, 2d, and 3d must have exactly 1 layer\n  - 2d-array must have 1 or more layers\n  - cube must have 6 layers\n  - cube-array must have a positive multiple of 6 layers\n  - Defaulting of baseArrayLayer and arrayLayerCount\n  - baseArrayLayer+arrayLayerCount must be within the texture`\n  )\n  .params(\n    kTextureAndViewDimensions\n      .beginSubcases()\n      .expand('textureLayers', ({ textureDimension: d }) => (d === '2d' ? [1, 6, 18] : [1]))\n      .combine('textureLevels', [1, kLevels])\n      .unless(p => p.textureDimension === '1d' && p.textureLevels !== 1)\n      .expand(\n        'baseArrayLayer',\n        ({ textureLayers: l }) => new Set([undefined, 0, 1, 5, 6, 7, l - 1, l, l + 1])\n      )\n      .expand('arrayLayerCount', function* ({ textureLayers: l, baseArrayLayer = 0 }) {\n        yield undefined;\n        for (const lastArrayLayer of new Set([0, 1, 5, 6, 7, l - 1, l, l + 1])) {\n          if (baseArrayLayer <= lastArrayLayer) yield lastArrayLayer - baseArrayLayer;\n        }\n      })\n  )\n  .fn(t => {\n    const {\n      textureDimension,\n      viewDimension,\n      textureLayers,\n      textureLevels,\n      baseArrayLayer,\n      arrayLayerCount,\n    } = t.params;\n\n    t.skipIfTextureViewDimensionNotSupported(viewDimension);\n\n    const kWidth = 1 << (kLevels - 1); // 32\n    const textureDescriptor: GPUTextureDescriptor = {\n      format: 'rgba8unorm',\n      dimension: textureDimension,\n      size:\n        textureDimension === '1d'\n          ? [kWidth]\n          : textureDimension === '2d'\n          ? [kWidth, kWidth, textureLayers]\n          : textureDimension === '3d'\n          ? [kWidth, kWidth, kWidth]\n          : unreachable(),\n      mipLevelCount: textureLevels,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    const viewDescriptor = { dimension: viewDimension, baseArrayLayer, arrayLayerCount };\n    const success = validateCreateViewLayersLevels(textureDescriptor, viewDescriptor);\n\n    const texture = t.device.createTexture(textureDescriptor);\n    t.expectValidationError(() => {\n      texture.createView(viewDescriptor);\n    }, !success);\n  });\n\ng.test('mip_levels')\n  .desc(\n    `Views must have at least one level, and must be within the level of the base texture.\n\n  - mipLevelCount=0 at various baseMipLevel values\n  - Cases where baseMipLevel+mipLevelCount goes past the end of the texture\n  - Cases with baseMipLevel or mipLevelCount undefined (compares against reference defaulting impl)\n  `\n  )\n  .params(\n    kTextureAndViewDimensions\n      .beginSubcases()\n      .combine('textureLevels', [1, kLevels - 2, kLevels])\n      .unless(p => p.textureDimension === '1d' && p.textureLevels !== 1)\n      .expand(\n        'baseMipLevel',\n        ({ textureLevels: l }) => new Set([undefined, 0, 1, 5, 6, 7, l - 1, l, l + 1])\n      )\n      .expand('mipLevelCount', function* ({ textureLevels: l, baseMipLevel = 0 }) {\n        yield undefined;\n        for (const lastMipLevel of new Set([0, 1, 5, 6, 7, l - 1, l, l + 1])) {\n          if (baseMipLevel <= lastMipLevel) yield lastMipLevel - baseMipLevel;\n        }\n      })\n  )\n  .fn(t => {\n    const { textureDimension, viewDimension, textureLevels, baseMipLevel, mipLevelCount } =\n      t.params;\n\n    t.skipIfTextureViewDimensionNotSupported(viewDimension);\n\n    const textureDescriptor: GPUTextureDescriptor = {\n      format: 'rgba8unorm',\n      dimension: textureDimension,\n      size:\n        textureDimension === '1d' ? [32] : textureDimension === '3d' ? [32, 32, 32] : [32, 32, 18],\n      mipLevelCount: textureLevels,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    const viewDescriptor = { dimension: viewDimension, baseMipLevel, mipLevelCount };\n    const success = validateCreateViewLayersLevels(textureDescriptor, viewDescriptor);\n\n    const texture = t.device.createTexture(textureDescriptor);\n    t.debug(`${mipLevelCount} ${success}`);\n    t.expectValidationError(() => {\n      texture.createView(viewDescriptor);\n    }, !success);\n  });\n\ng.test('cube_faces_square')\n  .desc(\n    `Test that the X/Y dimensions of cube and cube array textures must be square.\n  - {2d (control case), cube, cube-array}`\n  )\n  .params(u =>\n    u //\n      .combine('dimension', ['2d', 'cube', 'cube-array'] as const)\n      .combine('size', [\n        [4, 4, 6],\n        [5, 5, 6],\n        [4, 5, 6],\n        [4, 8, 6],\n        [8, 4, 6],\n      ])\n  )\n  .fn(t => {\n    const { dimension, size } = t.params;\n\n    t.skipIfTextureViewDimensionNotSupported(dimension);\n\n    const texture = t.device.createTexture({\n      format: 'rgba8unorm',\n      size,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    });\n\n    const success = dimension === '2d' || size[0] === size[1];\n    t.expectValidationError(() => {\n      texture.createView({ dimension });\n    }, !success);\n  });\n\ng.test('texture_state')\n  .desc(`createView should fail if the texture is invalid (but succeed if it is destroyed)`)\n  .paramsSubcasesOnly(u => u.combine('state', kResourceStates))\n  .fn(t => {\n    const { state } = t.params;\n    const texture = t.createTextureWithState(state);\n\n    t.expectValidationError(() => {\n      texture.createView();\n    }, state === 'invalid');\n  });\n"],"mappings":"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"}