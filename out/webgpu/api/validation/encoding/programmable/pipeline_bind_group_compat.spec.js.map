{"version":3,"file":"pipeline_bind_group_compat.spec.js","names":["description","kUnitCaseParamsBuilder","makeTestGroup","memcpy","unreachable","kSamplerBindingTypes","kShaderStageCombinations","kBufferBindingTypes","GPUConst","kProgrammableEncoderTypes","ValidationTest","kComputeCmds","kRenderCmds","kResourceTypes","getTestCmds","encoderType","kCompatTestParams","combine","expand","p","F","getIndexBuffer","device","createBuffer","size","Uint32Array","BYTES_PER_ELEMENT","usage","GPUBufferUsage","INDEX","getIndirectBuffer","indirectParams","buffer","mappedAtCreation","length","INDIRECT","COPY_DST","src","dst","getMappedRange","unmap","getBindingResourceType","entry","undefined","sampler","texture","storageTexture","createRenderPipelineWithLayout","bindGroups","shader","module","createShaderModule","code","pipeline","createRenderPipeline","layout","createPipelineLayout","bindGroupLayouts","map","entries","createBindGroupLayout","vertex","entryPoint","fragment","targets","format","primitive","topology","createComputePipelineWithLayout","createComputePipeline","compute","createBindGroupWithLayout","bglEntries","bgEntries","resource","getBindingResource","push","binding","createBindGroup","doCompute","pass","call","callWithZero","x","dispatchWorkgroups","dispatchWorkgroupsIndirect","doRender","vertexCount","draw","setIndexBuffer","drawIndexed","drawIndirect","drawIndexedIndirect","createBindGroupLayoutEntry","resourceType","useU32Array","visibility","GPUShaderStage","COMPUTE","FRAGMENT","hasDynamicOffset","access","runTest","dynamicOffsets","success","encoder","validateFinish","createEncoder","GPUComputePassEncoder","setPipeline","i","bindGroup","setBindGroup","g","test","desc","params","beginSubcases","combineWithParams","setBindGroup0","setBindGroup1","setUnusedBindGroup2","_success","fn","t","VERTEX","bindGroup0","bindGroup1","unusedBindGroup2","u","type","uniformBuffer","getUniformBuffer","bglType","bgType","createSampler","compare","bgBindings","plBindings","plEntries","Array","fill","ShaderStage","bgVisibility","plVisibility","bgResourceType","plResourceType","bindGroupLayoutEntryCount","computeCommand","emptyBGLCount","emptyBGL","emptyBGLs","pipelineLayout","emptyBindGroup","createCommandEncoder","computePass","beginComputePass","end","expectValidationError","finish","renderCommand","colorFormat","writeMask","attachmentTexture","createTexture","width","height","depthOrArrayLayers","GPUTextureUsage","RENDER_ATTACHMENT","renderPass","beginRenderPass","colorAttachments","view","createView","clearValue","r","b","a","loadOp","storeOp"],"sources":["../../../../../../src/webgpu/api/validation/encoding/programmable/pipeline_bind_group_compat.spec.ts"],"sourcesContent":["export const description = `\nTODO:\n- test compatibility between bind groups and pipelines\n    - the binding resource in bindGroups[i].layout is \"group-equivalent\" (value-equal) to pipelineLayout.bgls[i].\n    - in the test fn, test once without the dispatch/draw (should always be valid) and once with\n      the dispatch/draw, to make sure the validation happens in dispatch/draw.\n    - x= {dispatch, all draws} (dispatch/draw should be size 0 to make sure validation still happens if no-op)\n    - x= all relevant stages\n\nTODO: subsume existing test, rewrite fixture as needed.\nTODO: Add externalTexture to kResourceTypes [1]\n`;\n\nimport { kUnitCaseParamsBuilder } from '../../../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { memcpy, unreachable } from '../../../../../common/util/util.js';\nimport {\n  kSamplerBindingTypes,\n  kShaderStageCombinations,\n  kBufferBindingTypes,\n  ValidBindableResource,\n} from '../../../../capability_info.js';\nimport { GPUConst } from '../../../../constants.js';\nimport {\n  ProgrammableEncoderType,\n  kProgrammableEncoderTypes,\n} from '../../../../util/command_buffer_maker.js';\nimport { ValidationTest } from '../../validation_test.js';\n\nconst kComputeCmds = ['dispatch', 'dispatchIndirect'] as const;\ntype ComputeCmd = typeof kComputeCmds[number];\nconst kRenderCmds = ['draw', 'drawIndexed', 'drawIndirect', 'drawIndexedIndirect'] as const;\ntype RenderCmd = typeof kRenderCmds[number];\n\n// Test resource type compatibility in pipeline and bind group\n// [1]: Need to add externalTexture\nconst kResourceTypes: ValidBindableResource[] = [\n  'uniformBuf',\n  'filtSamp',\n  'sampledTex',\n  'storageTex',\n];\n\nfunction getTestCmds(\n  encoderType: ProgrammableEncoderType\n): readonly ComputeCmd[] | readonly RenderCmd[] {\n  return encoderType === 'compute pass' ? kComputeCmds : kRenderCmds;\n}\n\nconst kCompatTestParams = kUnitCaseParamsBuilder\n  .combine('encoderType', kProgrammableEncoderTypes)\n  .expand('call', p => getTestCmds(p.encoderType))\n  .combine('callWithZero', [true, false]);\n\nclass F extends ValidationTest {\n  getIndexBuffer(): GPUBuffer {\n    return this.device.createBuffer({\n      size: 8 * Uint32Array.BYTES_PER_ELEMENT,\n      usage: GPUBufferUsage.INDEX,\n    });\n  }\n\n  getIndirectBuffer(indirectParams: Array<number>): GPUBuffer {\n    const buffer = this.device.createBuffer({\n      mappedAtCreation: true,\n      size: indirectParams.length * Uint32Array.BYTES_PER_ELEMENT,\n      usage: GPUBufferUsage.INDIRECT | GPUBufferUsage.COPY_DST,\n    });\n    memcpy({ src: new Uint32Array(indirectParams) }, { dst: buffer.getMappedRange() });\n    buffer.unmap();\n    return buffer;\n  }\n\n  getBindingResourceType(entry: GPUBindGroupLayoutEntry): ValidBindableResource {\n    if (entry.buffer !== undefined) return 'uniformBuf';\n    if (entry.sampler !== undefined) return 'filtSamp';\n    if (entry.texture !== undefined) return 'sampledTex';\n    if (entry.storageTexture !== undefined) return 'storageTex';\n    unreachable();\n  }\n\n  createRenderPipelineWithLayout(\n    bindGroups: Array<Array<GPUBindGroupLayoutEntry>>\n  ): GPURenderPipeline {\n    const shader = `\n      @vertex fn vs_main() -> @builtin(position) vec4<f32> {\n        return vec4<f32>(1.0, 1.0, 0.0, 1.0);\n      }\n\n      @fragment fn fs_main() -> @location(0) vec4<f32> {\n        return vec4<f32>(0.0, 1.0, 0.0, 1.0);\n      }\n    `;\n    const module = this.device.createShaderModule({ code: shader });\n    const pipeline = this.device.createRenderPipeline({\n      layout: this.device.createPipelineLayout({\n        bindGroupLayouts: bindGroups.map(entries => this.device.createBindGroupLayout({ entries })),\n      }),\n      vertex: {\n        module,\n        entryPoint: 'vs_main',\n      },\n      fragment: {\n        module,\n        entryPoint: 'fs_main',\n        targets: [{ format: 'rgba8unorm' }],\n      },\n      primitive: { topology: 'triangle-list' },\n    });\n    return pipeline;\n  }\n\n  createComputePipelineWithLayout(\n    bindGroups: Array<Array<GPUBindGroupLayoutEntry>>\n  ): GPUComputePipeline {\n    const shader = `\n      @compute @workgroup_size(1)\n        fn main(@builtin(global_invocation_id) GlobalInvocationID : vec3<u32>) {\n      }\n    `;\n\n    const module = this.device.createShaderModule({ code: shader });\n    const pipeline = this.device.createComputePipeline({\n      layout: this.device.createPipelineLayout({\n        bindGroupLayouts: bindGroups.map(entries => this.device.createBindGroupLayout({ entries })),\n      }),\n      compute: {\n        module,\n        entryPoint: 'main',\n      },\n    });\n    return pipeline;\n  }\n\n  createBindGroupWithLayout(bglEntries: Array<GPUBindGroupLayoutEntry>): GPUBindGroup {\n    const bgEntries: Array<GPUBindGroupEntry> = [];\n    for (const entry of bglEntries) {\n      const resource = this.getBindingResource(this.getBindingResourceType(entry));\n      bgEntries.push({\n        binding: entry.binding,\n        resource,\n      });\n    }\n\n    return this.device.createBindGroup({\n      entries: bgEntries,\n      layout: this.device.createBindGroupLayout({ entries: bglEntries }),\n    });\n  }\n\n  doCompute(pass: GPUComputePassEncoder, call: ComputeCmd | undefined, callWithZero: boolean) {\n    const x = callWithZero ? 0 : 1;\n    switch (call) {\n      case 'dispatch':\n        pass.dispatchWorkgroups(x, 1, 1);\n        break;\n      case 'dispatchIndirect':\n        pass.dispatchWorkgroupsIndirect(this.getIndirectBuffer([x, 1, 1]), 0);\n        break;\n      default:\n        break;\n    }\n  }\n\n  doRender(\n    pass: GPURenderPassEncoder | GPURenderBundleEncoder,\n    call: RenderCmd | undefined,\n    callWithZero: boolean\n  ) {\n    const vertexCount = callWithZero ? 0 : 3;\n    switch (call) {\n      case 'draw':\n        pass.draw(vertexCount, 1, 0, 0);\n        break;\n      case 'drawIndexed':\n        pass.setIndexBuffer(this.getIndexBuffer(), 'uint32');\n        pass.drawIndexed(vertexCount, 1, 0, 0, 0);\n        break;\n      case 'drawIndirect':\n        pass.drawIndirect(this.getIndirectBuffer([vertexCount, 1, 0, 0, 0]), 0);\n        break;\n      case 'drawIndexedIndirect':\n        pass.setIndexBuffer(this.getIndexBuffer(), 'uint32');\n        pass.drawIndexedIndirect(this.getIndirectBuffer([vertexCount, 1, 0, 0, 0]), 0);\n        break;\n      default:\n        break;\n    }\n  }\n\n  createBindGroupLayoutEntry(\n    encoderType: ProgrammableEncoderType,\n    resourceType: ValidBindableResource,\n    useU32Array: boolean\n  ): GPUBindGroupLayoutEntry {\n    const entry: GPUBindGroupLayoutEntry = {\n      binding: 0,\n      visibility: encoderType === 'compute pass' ? GPUShaderStage.COMPUTE : GPUShaderStage.FRAGMENT,\n    };\n\n    switch (resourceType) {\n      case 'uniformBuf':\n        entry.buffer = { hasDynamicOffset: useU32Array }; // default type: uniform\n        break;\n      case 'filtSamp':\n        entry.sampler = {}; // default type: filtering\n        break;\n      case 'sampledTex':\n        entry.texture = {}; // default sampleType: float\n        break;\n      case 'storageTex':\n        entry.storageTexture = { access: 'write-only', format: 'rgba8unorm' };\n        break;\n    }\n\n    return entry;\n  }\n\n  runTest(\n    encoderType: ProgrammableEncoderType,\n    pipeline: GPUComputePipeline | GPURenderPipeline,\n    bindGroups: Array<GPUBindGroup | undefined>,\n    dynamicOffsets: Array<number> | undefined,\n    call: ComputeCmd | RenderCmd | undefined,\n    callWithZero: boolean,\n    success: boolean\n  ) {\n    const { encoder, validateFinish } = this.createEncoder(encoderType);\n\n    if (encoder instanceof GPUComputePassEncoder) {\n      encoder.setPipeline(pipeline as GPUComputePipeline);\n    } else {\n      encoder.setPipeline(pipeline as GPURenderPipeline);\n    }\n\n    for (let i = 0; i < bindGroups.length; i++) {\n      const bindGroup = bindGroups[i];\n      if (!bindGroup) {\n        break;\n      }\n      if (dynamicOffsets) {\n        encoder.setBindGroup(\n          i,\n          bindGroup,\n          new Uint32Array(dynamicOffsets),\n          0,\n          dynamicOffsets.length\n        );\n      } else {\n        encoder.setBindGroup(i, bindGroup);\n      }\n    }\n\n    if (encoder instanceof GPUComputePassEncoder) {\n      this.doCompute(encoder, call as ComputeCmd, callWithZero);\n    } else {\n      this.doRender(encoder, call as RenderCmd, callWithZero);\n    }\n\n    validateFinish(success);\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('bind_groups_and_pipeline_layout_mismatch')\n  .desc(\n    `\n    Tests the bind groups must match the requirements of the pipeline layout.\n    - bind groups required by the pipeline layout are required.\n    - bind groups unused by the pipeline layout can be set or not.\n    `\n  )\n  .params(\n    kCompatTestParams\n      .beginSubcases()\n      .combineWithParams([\n        { setBindGroup0: true, setBindGroup1: true, setUnusedBindGroup2: true, _success: true },\n        { setBindGroup0: true, setBindGroup1: true, setUnusedBindGroup2: false, _success: true },\n        { setBindGroup0: true, setBindGroup1: false, setUnusedBindGroup2: true, _success: false },\n        { setBindGroup0: false, setBindGroup1: true, setUnusedBindGroup2: true, _success: false },\n        { setBindGroup0: false, setBindGroup1: false, setUnusedBindGroup2: false, _success: false },\n      ])\n      .combine('useU32Array', [false, true])\n  )\n  .fn(t => {\n    const {\n      encoderType,\n      call,\n      callWithZero,\n      setBindGroup0,\n      setBindGroup1,\n      setUnusedBindGroup2,\n      _success,\n      useU32Array,\n    } = t.params;\n    const visibility =\n      encoderType === 'compute pass' ? GPUShaderStage.COMPUTE : GPUShaderStage.VERTEX;\n\n    const bindGroupLayouts: Array<Array<GPUBindGroupLayoutEntry>> = [\n      // bind group layout 0\n      [\n        {\n          binding: 0,\n          visibility,\n          buffer: { hasDynamicOffset: useU32Array }, // default type: uniform\n        },\n      ],\n      // bind group layout 1\n      [\n        {\n          binding: 0,\n          visibility,\n          buffer: { hasDynamicOffset: useU32Array }, // default type: uniform\n        },\n      ],\n    ];\n\n    // Create required bind groups\n    const bindGroup0 = setBindGroup0 ? t.createBindGroupWithLayout(bindGroupLayouts[0]) : undefined;\n    const bindGroup1 = setBindGroup1 ? t.createBindGroupWithLayout(bindGroupLayouts[1]) : undefined;\n    const unusedBindGroup2 = setUnusedBindGroup2\n      ? t.createBindGroupWithLayout(bindGroupLayouts[1])\n      : undefined;\n\n    // Create fixed pipeline\n    const pipeline =\n      encoderType === 'compute pass'\n        ? t.createComputePipelineWithLayout(bindGroupLayouts)\n        : t.createRenderPipelineWithLayout(bindGroupLayouts);\n\n    const dynamicOffsets = useU32Array ? [0] : undefined;\n\n    // Test without the dispatch/draw (should always be valid)\n    t.runTest(\n      encoderType,\n      pipeline,\n      [bindGroup0, bindGroup1, unusedBindGroup2],\n      dynamicOffsets,\n      undefined,\n      false,\n      true\n    );\n\n    // Test with the dispatch/draw, to make sure the validation happens in dispatch/draw.\n    t.runTest(\n      encoderType,\n      pipeline,\n      [bindGroup0, bindGroup1, unusedBindGroup2],\n      dynamicOffsets,\n      call,\n      callWithZero,\n      _success\n    );\n  });\n\ng.test('buffer_binding,render_pipeline')\n  .desc(\n    `\n  The GPUBufferBindingLayout bindings configure should be exactly\n  same in PipelineLayout and bindgroup.\n  - TODO: test more draw functions, e.g. indirect\n  - TODO: test more visibilities, e.g. vertex\n  - TODO: bind group should be created with different layout\n  `\n  )\n  .params(u => u.combine('type', kBufferBindingTypes))\n  .fn(t => {\n    const { type } = t.params;\n\n    // Create fixed bindGroup\n    const uniformBuffer = t.getUniformBuffer();\n\n    const bindGroup = t.device.createBindGroup({\n      entries: [\n        {\n          binding: 0,\n          resource: {\n            buffer: uniformBuffer,\n          },\n        },\n      ],\n      layout: t.device.createBindGroupLayout({\n        entries: [\n          {\n            binding: 0,\n            visibility: GPUShaderStage.FRAGMENT,\n            buffer: {}, // default type: uniform\n          },\n        ],\n      }),\n    });\n\n    // Create pipeline with different layouts\n    const pipeline = t.createRenderPipelineWithLayout([\n      [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.FRAGMENT,\n          buffer: {\n            type,\n          },\n        },\n      ],\n    ]);\n\n    const { encoder, validateFinish } = t.createEncoder('render pass');\n    encoder.setPipeline(pipeline);\n    encoder.setBindGroup(0, bindGroup);\n    encoder.draw(3);\n\n    validateFinish(type === undefined || type === 'uniform');\n  });\n\ng.test('sampler_binding,render_pipeline')\n  .desc(\n    `\n  The GPUSamplerBindingLayout bindings configure should be exactly\n  same in PipelineLayout and bindgroup.\n  - TODO: test more draw functions, e.g. indirect\n  - TODO: test more visibilities, e.g. vertex\n  `\n  )\n  .params(u =>\n    u //\n      .combine('bglType', kSamplerBindingTypes)\n      .combine('bgType', kSamplerBindingTypes)\n  )\n  .fn(t => {\n    const { bglType, bgType } = t.params;\n    const bindGroup = t.device.createBindGroup({\n      entries: [\n        {\n          binding: 0,\n          resource:\n            bgType === 'comparison'\n              ? t.device.createSampler({ compare: 'always' })\n              : t.device.createSampler(),\n        },\n      ],\n      layout: t.device.createBindGroupLayout({\n        entries: [\n          {\n            binding: 0,\n            visibility: GPUShaderStage.FRAGMENT,\n            sampler: { type: bgType },\n          },\n        ],\n      }),\n    });\n\n    // Create pipeline with different layouts\n    const pipeline = t.createRenderPipelineWithLayout([\n      [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.FRAGMENT,\n          sampler: {\n            type: bglType,\n          },\n        },\n      ],\n    ]);\n\n    const { encoder, validateFinish } = t.createEncoder('render pass');\n    encoder.setPipeline(pipeline);\n    encoder.setBindGroup(0, bindGroup);\n    encoder.draw(3);\n\n    validateFinish(bglType === bgType);\n  });\n\ng.test('bgl_binding_mismatch')\n  .desc(\n    'Tests the binding number must exist or not exist in both bindGroups[i].layout and pipelineLayout.bgls[i]'\n  )\n  .params(\n    kCompatTestParams\n      .beginSubcases()\n      .combineWithParams([\n        { bgBindings: [0, 1, 2], plBindings: [0, 1, 2], _success: true },\n        { bgBindings: [0, 1, 2], plBindings: [0, 1, 3], _success: false },\n        { bgBindings: [0, 2], plBindings: [0, 2], _success: true },\n        { bgBindings: [0, 2], plBindings: [2, 0], _success: true },\n        { bgBindings: [0, 1, 2], plBindings: [0, 1], _success: false },\n        { bgBindings: [0, 1], plBindings: [0, 1, 2], _success: false },\n      ])\n      .combine('useU32Array', [false, true])\n  )\n  .fn(t => {\n    const {\n      encoderType,\n      call,\n      callWithZero,\n      bgBindings,\n      plBindings,\n      _success,\n      useU32Array,\n    } = t.params;\n    const visibility =\n      encoderType === 'compute pass' ? GPUShaderStage.COMPUTE : GPUShaderStage.VERTEX;\n\n    const bglEntries: Array<GPUBindGroupLayoutEntry> = [];\n    for (const binding of bgBindings) {\n      bglEntries.push({\n        binding,\n        visibility,\n        buffer: { hasDynamicOffset: useU32Array }, // default type: uniform\n      });\n    }\n    const bindGroup = t.createBindGroupWithLayout(bglEntries);\n\n    const plEntries: Array<Array<GPUBindGroupLayoutEntry>> = [[]];\n    for (const binding of plBindings) {\n      plEntries[0].push({\n        binding,\n        visibility,\n        buffer: { hasDynamicOffset: useU32Array }, // default type: uniform\n      });\n    }\n    const pipeline =\n      encoderType === 'compute pass'\n        ? t.createComputePipelineWithLayout(plEntries)\n        : t.createRenderPipelineWithLayout(plEntries);\n\n    const dynamicOffsets = useU32Array ? new Array(bgBindings.length).fill(0) : undefined;\n\n    // Test without the dispatch/draw (should always be valid)\n    t.runTest(encoderType, pipeline, [bindGroup], dynamicOffsets, undefined, false, true);\n\n    // Test with the dispatch/draw, to make sure the validation happens in dispatch/draw.\n    t.runTest(encoderType, pipeline, [bindGroup], dynamicOffsets, call, callWithZero, _success);\n  });\n\ng.test('bgl_visibility_mismatch')\n  .desc('Tests the visibility in bindGroups[i].layout and pipelineLayout.bgls[i] must be matched')\n  .params(\n    kCompatTestParams\n      .beginSubcases()\n      .combine('bgVisibility', kShaderStageCombinations)\n      .expand('plVisibility', p =>\n        p.encoderType === 'compute pass'\n          ? ([GPUConst.ShaderStage.COMPUTE] as const)\n          : ([\n              GPUConst.ShaderStage.VERTEX,\n              GPUConst.ShaderStage.FRAGMENT,\n              GPUConst.ShaderStage.VERTEX | GPUConst.ShaderStage.FRAGMENT,\n            ] as const)\n      )\n      .combine('useU32Array', [false, true])\n  )\n  .fn(t => {\n    const { encoderType, call, callWithZero, bgVisibility, plVisibility, useU32Array } = t.params;\n\n    const bglEntries: Array<GPUBindGroupLayoutEntry> = [\n      {\n        binding: 0,\n        visibility: bgVisibility,\n        buffer: { hasDynamicOffset: useU32Array }, // default type: uniform\n      },\n    ];\n    const bindGroup = t.createBindGroupWithLayout(bglEntries);\n\n    const plEntries: Array<Array<GPUBindGroupLayoutEntry>> = [\n      [\n        {\n          binding: 0,\n          visibility: plVisibility,\n          buffer: { hasDynamicOffset: useU32Array }, // default type: uniform\n        },\n      ],\n    ];\n    const pipeline =\n      encoderType === 'compute pass'\n        ? t.createComputePipelineWithLayout(plEntries)\n        : t.createRenderPipelineWithLayout(plEntries);\n\n    const dynamicOffsets = useU32Array ? [0] : undefined;\n\n    // Test without the dispatch/draw (should always be valid)\n    t.runTest(encoderType, pipeline, [bindGroup], dynamicOffsets, undefined, false, true);\n\n    // Test with the dispatch/draw, to make sure the validation happens in dispatch/draw.\n    t.runTest(\n      encoderType,\n      pipeline,\n      [bindGroup],\n      dynamicOffsets,\n      call,\n      callWithZero,\n      bgVisibility === plVisibility\n    );\n  });\n\ng.test('bgl_resource_type_mismatch')\n  .desc(\n    `\n  Tests the binding resource type in bindGroups[i].layout and pipelineLayout.bgls[i] must be matched\n  - TODO: Test externalTexture\n  `\n  )\n  .params(\n    kCompatTestParams\n      .beginSubcases()\n      .combine('bgResourceType', kResourceTypes)\n      .combine('plResourceType', kResourceTypes)\n      .expand('useU32Array', p => (p.bgResourceType === 'uniformBuf' ? [true, false] : [false]))\n  )\n  .fn(t => {\n    const {\n      encoderType,\n      call,\n      callWithZero,\n      bgResourceType,\n      plResourceType,\n      useU32Array,\n    } = t.params;\n\n    const bglEntries: Array<GPUBindGroupLayoutEntry> = [\n      t.createBindGroupLayoutEntry(encoderType, bgResourceType, useU32Array),\n    ];\n    const bindGroup = t.createBindGroupWithLayout(bglEntries);\n\n    const plEntries: Array<Array<GPUBindGroupLayoutEntry>> = [\n      [t.createBindGroupLayoutEntry(encoderType, plResourceType, useU32Array)],\n    ];\n    const pipeline =\n      encoderType === 'compute pass'\n        ? t.createComputePipelineWithLayout(plEntries)\n        : t.createRenderPipelineWithLayout(plEntries);\n\n    const dynamicOffsets = useU32Array ? [0] : undefined;\n\n    // Test without the dispatch/draw (should always be valid)\n    t.runTest(encoderType, pipeline, [bindGroup], dynamicOffsets, undefined, false, true);\n\n    // Test with the dispatch/draw, to make sure the validation happens in dispatch/draw.\n    t.runTest(\n      encoderType,\n      pipeline,\n      [bindGroup],\n      dynamicOffsets,\n      call,\n      callWithZero,\n      bgResourceType === plResourceType\n    );\n  });\n\ng.test('empty_bind_group_layouts_requires_empty_bind_groups,compute_pass')\n  .desc(\n    `\n  Test that a compute pipeline with empty bind groups layouts requires empty bind groups to be set.\n  `\n  )\n  .params(u =>\n    u\n      .combine('bindGroupLayoutEntryCount', [3, 4])\n      .combine('computeCommand', ['dispatchIndirect', 'dispatch'] as const)\n  )\n  .fn(t => {\n    const { bindGroupLayoutEntryCount, computeCommand } = t.params;\n\n    const emptyBGLCount = 4;\n    const emptyBGL = t.device.createBindGroupLayout({ entries: [] });\n    const emptyBGLs = [];\n    for (let i = 0; i < emptyBGLCount; i++) {\n      emptyBGLs.push(emptyBGL);\n    }\n\n    const pipelineLayout = t.device.createPipelineLayout({\n      bindGroupLayouts: emptyBGLs,\n    });\n\n    const pipeline = t.device.createComputePipeline({\n      layout: pipelineLayout,\n      compute: {\n        module: t.device.createShaderModule({\n          code: '@compute @workgroup_size(1) fn main() {}',\n        }),\n        entryPoint: 'main',\n      },\n    });\n\n    const emptyBindGroup = t.device.createBindGroup({\n      layout: emptyBGL,\n      entries: [],\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const computePass = encoder.beginComputePass();\n    computePass.setPipeline(pipeline);\n    for (let i = 0; i < bindGroupLayoutEntryCount; i++) {\n      computePass.setBindGroup(i, emptyBindGroup);\n    }\n\n    t.doCompute(computePass, computeCommand, true);\n    computePass.end();\n\n    const success = bindGroupLayoutEntryCount === emptyBGLCount;\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n\ng.test('empty_bind_group_layouts_requires_empty_bind_groups,render_pass')\n  .desc(\n    `\n  Test that a render pipeline with empty bind groups layouts requires empty bind groups to be set.\n  `\n  )\n  .params(u =>\n    u\n      .combine('bindGroupLayoutEntryCount', [3, 4])\n      .combine('renderCommand', [\n        'draw',\n        'drawIndexed',\n        'drawIndirect',\n        'drawIndexedIndirect',\n      ] as const)\n  )\n  .fn(t => {\n    const { bindGroupLayoutEntryCount, renderCommand } = t.params;\n\n    const emptyBGLCount = 4;\n    const emptyBGL = t.device.createBindGroupLayout({ entries: [] });\n    const emptyBGLs = [];\n    for (let i = 0; i < emptyBGLCount; i++) {\n      emptyBGLs.push(emptyBGL);\n    }\n\n    const pipelineLayout = t.device.createPipelineLayout({\n      bindGroupLayouts: emptyBGLs,\n    });\n\n    const colorFormat = 'rgba8unorm';\n    const pipeline = t.device.createRenderPipeline({\n      layout: pipelineLayout,\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `@vertex fn main() -> @builtin(position) vec4<f32> { return vec4<f32>(); }`,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: `@fragment fn main() {}`,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: colorFormat, writeMask: 0 }],\n      },\n    });\n\n    const emptyBindGroup = t.device.createBindGroup({\n      layout: emptyBGL,\n      entries: [],\n    });\n\n    const encoder = t.device.createCommandEncoder();\n\n    const attachmentTexture = t.device.createTexture({\n      format: 'rgba8unorm',\n      size: { width: 16, height: 16, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const renderPass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: attachmentTexture.createView(),\n          clearValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    });\n\n    renderPass.setPipeline(pipeline);\n    for (let i = 0; i < bindGroupLayoutEntryCount; i++) {\n      renderPass.setBindGroup(i, emptyBindGroup);\n    }\n    t.doRender(renderPass, renderCommand, true);\n    renderPass.end();\n\n    const success = bindGroupLayoutEntryCount === emptyBGLCount;\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n"],"mappings":"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"}