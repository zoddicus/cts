{"version":3,"file":"encoder_open_state.spec.js","names":["description","makeTestGroup","keysOf","unreachable","ValidationTest","beginRenderPassWithQuerySet","F","createRenderPipelineForTest","device","createRenderPipeline","layout","vertex","module","createShaderModule","code","entryPoint","fragment","targets","format","writeMask","createBindGroupForTest","createBindGroup","entries","binding","resource","createSampler","createBindGroupLayout","visibility","GPUShaderStage","FRAGMENT","sampler","type","g","kEncoderCommandInfo","beginComputePass","beginRenderPass","clearBuffer","copyBufferToBuffer","copyBufferToTexture","copyTextureToBuffer","copyTextureToTexture","insertDebugMarker","popDebugGroup","pushDebugGroup","writeTimestamp","resolveQuerySet","kEncoderCommands","kRenderPassEncoderCommandInfo","draw","drawIndexed","drawIndexedIndirect","drawIndirect","setIndexBuffer","setBindGroup","setVertexBuffer","setPipeline","setViewport","setScissorRect","setBlendConstant","setStencilReference","beginOcclusionQuery","endOcclusionQuery","executeBundles","kRenderPassEncoderCommands","kRenderBundleEncoderCommandInfo","kRenderBundleEncoderCommands","kComputePassEncoderCommandInfo","dispatchWorkgroups","dispatchWorkgroupsIndirect","kComputePassEncoderCommands","test","desc","params","u","combine","beginSubcases","beforeAllSubcases","t","command","selectDeviceOrSkipTestCase","fn","finishBeforeCommand","srcBuffer","createBuffer","size","usage","GPUBufferUsage","COPY_SRC","GPUTextureUsage","COPY_DST","dstBuffer","QUERY_RESOLVE","textureSize","width","height","textureFormat","srcTexture","createTexture","dstTexture","querySet","createQuerySet","count","encoder","createCommandEncoder","finish","expectValidationError","colorAttachments","buffer","texture","renderPass","INDIRECT","VERTEX","pipeline","bindGroup","end","kNumTestPoints","kViewportMinDepth","kViewportMaxDepth","r","b","a","bundleEncoder","createRenderBundleEncoder","colorFormats","computePass","indirectBuffer","computePipeline","createNoOpComputePipeline"],"sources":["../../../../../src/webgpu/api/validation/encoding/encoder_open_state.spec.ts"],"sourcesContent":["export const description = `\nValidation tests to all commands of GPUCommandEncoder, GPUComputePassEncoder, and\nGPURenderPassEncoder when the encoder is not finished.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { keysOf } from '../../../../common/util/data_tables.js';\nimport { unreachable } from '../../../../common/util/util.js';\nimport { ValidationTest } from '../validation_test.js';\n\nimport { beginRenderPassWithQuerySet } from './queries/common.js';\n\nclass F extends ValidationTest {\n  createRenderPipelineForTest(): GPURenderPipeline {\n    return this.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: {\n        module: this.device.createShaderModule({\n          code: `\n            @vertex fn main() -> @builtin(position) vec4<f32> {\n              return vec4<f32>();\n            }\n          `,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: this.device.createShaderModule({\n          code: `@fragment fn main() {}`,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: 'rgba8unorm', writeMask: 0 }],\n      },\n    });\n  }\n\n  createBindGroupForTest(): GPUBindGroup {\n    return this.device.createBindGroup({\n      entries: [\n        {\n          binding: 0,\n          resource: this.device.createSampler(),\n        },\n      ],\n      layout: this.device.createBindGroupLayout({\n        entries: [\n          {\n            binding: 0,\n            visibility: GPUShaderStage.FRAGMENT,\n            sampler: { type: 'filtering' },\n          },\n        ],\n      }),\n    });\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ntype EncoderCommands = keyof Omit<GPUCommandEncoder, '__brand' | 'label' | 'finish'>;\nconst kEncoderCommandInfo: {\n  readonly [k in EncoderCommands]: {};\n} = {\n  beginComputePass: {},\n  beginRenderPass: {},\n  clearBuffer: {},\n  copyBufferToBuffer: {},\n  copyBufferToTexture: {},\n  copyTextureToBuffer: {},\n  copyTextureToTexture: {},\n  insertDebugMarker: {},\n  popDebugGroup: {},\n  pushDebugGroup: {},\n  writeTimestamp: {},\n  resolveQuerySet: {},\n};\nconst kEncoderCommands = keysOf(kEncoderCommandInfo);\n\ntype RenderPassEncoderCommands = keyof Omit<GPURenderPassEncoder, '__brand' | 'label' | 'end'>;\nconst kRenderPassEncoderCommandInfo: {\n  readonly [k in RenderPassEncoderCommands]: {};\n} = {\n  draw: {},\n  drawIndexed: {},\n  drawIndexedIndirect: {},\n  drawIndirect: {},\n  setIndexBuffer: {},\n  setBindGroup: {},\n  setVertexBuffer: {},\n  setPipeline: {},\n  setViewport: {},\n  setScissorRect: {},\n  setBlendConstant: {},\n  setStencilReference: {},\n  beginOcclusionQuery: {},\n  endOcclusionQuery: {},\n  executeBundles: {},\n  pushDebugGroup: {},\n  popDebugGroup: {},\n  insertDebugMarker: {},\n};\nconst kRenderPassEncoderCommands = keysOf(kRenderPassEncoderCommandInfo);\n\ntype RenderBundleEncoderCommands = keyof Omit<\n  GPURenderBundleEncoder,\n  '__brand' | 'label' | 'finish'\n>;\nconst kRenderBundleEncoderCommandInfo: {\n  readonly [k in RenderBundleEncoderCommands]: {};\n} = {\n  draw: {},\n  drawIndexed: {},\n  drawIndexedIndirect: {},\n  drawIndirect: {},\n  setPipeline: {},\n  setBindGroup: {},\n  setIndexBuffer: {},\n  setVertexBuffer: {},\n  pushDebugGroup: {},\n  popDebugGroup: {},\n  insertDebugMarker: {},\n};\nconst kRenderBundleEncoderCommands = keysOf(kRenderBundleEncoderCommandInfo);\n\n// MAINTENANCE_TODO: remove the deprecated 'dispatch' and 'dispatchIndirect' here once they're\n// removed from `@webgpu/types`.\ntype ComputePassEncoderCommands = keyof Omit<\n  GPUComputePassEncoder,\n  '__brand' | 'label' | 'end' | 'dispatch' | 'dispatchIndirect'\n>;\nconst kComputePassEncoderCommandInfo: {\n  readonly [k in ComputePassEncoderCommands]: {};\n} = {\n  setBindGroup: {},\n  setPipeline: {},\n  dispatchWorkgroups: {},\n  dispatchWorkgroupsIndirect: {},\n  pushDebugGroup: {},\n  popDebugGroup: {},\n  insertDebugMarker: {},\n};\nconst kComputePassEncoderCommands = keysOf(kComputePassEncoderCommandInfo);\n\ng.test('non_pass_commands')\n  .desc(\n    `\n  Test that functions of GPUCommandEncoder generate a validation error if the encoder is already\n  finished.\n  `\n  )\n  .params(u =>\n    u\n      .combine('command', kEncoderCommands)\n      .beginSubcases()\n      .combine('finishBeforeCommand', [false, true])\n  )\n  .beforeAllSubcases(t => {\n    switch (t.params.command) {\n      case 'writeTimestamp':\n        t.selectDeviceOrSkipTestCase('timestamp-query');\n        break;\n    }\n  })\n  .fn(t => {\n    const { command, finishBeforeCommand } = t.params;\n\n    const srcBuffer = t.device.createBuffer({\n      size: 16,\n      usage: GPUBufferUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n    const dstBuffer = t.device.createBuffer({\n      size: 16,\n      usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.QUERY_RESOLVE,\n    });\n\n    const textureSize = { width: 1, height: 1 };\n    const textureFormat = 'rgba8unorm';\n    const srcTexture = t.device.createTexture({\n      size: textureSize,\n      format: textureFormat,\n      usage: GPUTextureUsage.COPY_SRC,\n    });\n    const dstTexture = t.device.createTexture({\n      size: textureSize,\n      format: textureFormat,\n      usage: GPUTextureUsage.COPY_DST,\n    });\n\n    const querySet = t.device.createQuerySet({\n      type: command === 'writeTimestamp' ? 'timestamp' : 'occlusion',\n      count: 1,\n    });\n\n    const encoder = t.device.createCommandEncoder();\n\n    if (finishBeforeCommand) encoder.finish();\n\n    t.expectValidationError(() => {\n      switch (command) {\n        case 'beginComputePass':\n          {\n            encoder.beginComputePass();\n          }\n          break;\n        case 'beginRenderPass':\n          {\n            encoder.beginRenderPass({ colorAttachments: [] });\n          }\n          break;\n        case 'clearBuffer':\n          {\n            encoder.clearBuffer(dstBuffer, 0, 16);\n          }\n          break;\n        case 'copyBufferToBuffer':\n          {\n            encoder.copyBufferToBuffer(srcBuffer, 0, dstBuffer, 0, 0);\n          }\n          break;\n        case 'copyBufferToTexture':\n          {\n            encoder.copyBufferToTexture(\n              { buffer: srcBuffer },\n              { texture: dstTexture },\n              textureSize\n            );\n          }\n          break;\n        case 'copyTextureToBuffer':\n          {\n            encoder.copyTextureToBuffer(\n              { texture: srcTexture },\n              { buffer: dstBuffer },\n              textureSize\n            );\n          }\n          break;\n        case 'copyTextureToTexture':\n          {\n            encoder.copyTextureToTexture(\n              { texture: srcTexture },\n              { texture: dstTexture },\n              textureSize\n            );\n          }\n          break;\n        case 'insertDebugMarker':\n          {\n            encoder.insertDebugMarker('marker');\n          }\n          break;\n        case 'pushDebugGroup':\n          {\n            encoder.pushDebugGroup('group');\n          }\n          break;\n        case 'popDebugGroup':\n          {\n            encoder.popDebugGroup();\n          }\n          break;\n        case 'writeTimestamp':\n          {\n            encoder.writeTimestamp(querySet, 0);\n          }\n          break;\n        case 'resolveQuerySet':\n          {\n            encoder.resolveQuerySet(querySet, 0, 1, dstBuffer, 0);\n          }\n          break;\n        default:\n          unreachable();\n      }\n    }, finishBeforeCommand);\n  });\n\ng.test('render_pass_commands')\n  .desc(\n    `\n    Test that functions of GPURenderPassEncoder generate a validation error if the encoder or the\n    pass is already finished.\n\n    - TODO: Consider testing: nothing before command, end before command, end+finish before command.\n  `\n  )\n  .params(u =>\n    u\n      .combine('command', kRenderPassEncoderCommands)\n      .beginSubcases()\n      .combine('finishBeforeCommand', [false, true])\n  )\n  .fn(t => {\n    const { command, finishBeforeCommand } = t.params;\n\n    const querySet = t.device.createQuerySet({ type: 'occlusion', count: 1 });\n    const encoder = t.device.createCommandEncoder();\n    const renderPass = beginRenderPassWithQuerySet(t, encoder, querySet);\n\n    const buffer = t.device.createBuffer({\n      size: 12,\n      usage: GPUBufferUsage.INDIRECT | GPUBufferUsage.VERTEX,\n    });\n\n    const pipeline = t.createRenderPipelineForTest();\n\n    const bindGroup = t.createBindGroupForTest();\n\n    if (finishBeforeCommand) {\n      renderPass.end();\n      encoder.finish();\n    }\n\n    t.expectValidationError(() => {\n      switch (command) {\n        case 'draw':\n          {\n            renderPass.draw(1);\n          }\n          break;\n        case 'drawIndexed':\n          {\n            renderPass.drawIndexed(1);\n          }\n          break;\n        case 'drawIndirect':\n          {\n            renderPass.drawIndirect(buffer, 1);\n          }\n          break;\n        case 'setIndexBuffer':\n          {\n            renderPass.setIndexBuffer(buffer, 'uint32');\n          }\n          break;\n        case 'drawIndexedIndirect':\n          {\n            renderPass.drawIndexedIndirect(buffer, 0);\n          }\n          break;\n        case 'setBindGroup':\n          {\n            renderPass.setBindGroup(0, bindGroup);\n          }\n          break;\n        case 'setVertexBuffer':\n          {\n            renderPass.setVertexBuffer(1, buffer);\n          }\n          break;\n        case 'setPipeline':\n          {\n            renderPass.setPipeline(pipeline);\n          }\n          break;\n        case 'setViewport':\n          {\n            const kNumTestPoints = 8;\n            const kViewportMinDepth = 0;\n            const kViewportMaxDepth = 1;\n            renderPass.setViewport(0, 0, kNumTestPoints, 0, kViewportMinDepth, kViewportMaxDepth);\n          }\n          break;\n        case 'setScissorRect':\n          {\n            renderPass.setScissorRect(0, 0, 0, 0);\n          }\n          break;\n        case 'setBlendConstant':\n          {\n            renderPass.setBlendConstant({ r: 1.0, g: 1.0, b: 1.0, a: 1.0 });\n          }\n          break;\n        case 'setStencilReference':\n          {\n            renderPass.setStencilReference(0);\n          }\n          break;\n        case 'beginOcclusionQuery':\n          {\n            renderPass.beginOcclusionQuery(0);\n          }\n          break;\n        case 'endOcclusionQuery':\n          {\n            renderPass.endOcclusionQuery();\n          }\n          break;\n        case 'executeBundles':\n          {\n            renderPass.executeBundles([]);\n          }\n          break;\n        case 'pushDebugGroup':\n          {\n            encoder.pushDebugGroup('group');\n          }\n          break;\n        case 'popDebugGroup':\n          {\n            encoder.popDebugGroup();\n          }\n          break;\n        case 'insertDebugMarker':\n          {\n            encoder.insertDebugMarker('marker');\n          }\n          break;\n        default:\n          unreachable();\n      }\n    }, finishBeforeCommand);\n  });\n\ng.test('render_bundle_commands')\n  .desc(\n    `\n    Test that functions of GPURenderBundleEncoder generate a validation error if the encoder or the\n    pass is already finished.\n  `\n  )\n  .params(u =>\n    u\n      .combine('command', kRenderBundleEncoderCommands)\n      .beginSubcases()\n      .combine('finishBeforeCommand', [false, true])\n  )\n  .fn(t => {\n    const { command, finishBeforeCommand } = t.params;\n\n    const buffer = t.device.createBuffer({\n      size: 12,\n      usage: GPUBufferUsage.INDIRECT | GPUBufferUsage.VERTEX,\n    });\n\n    const pipeline = t.createRenderPipelineForTest();\n\n    const bindGroup = t.createBindGroupForTest();\n\n    const bundleEncoder = t.device.createRenderBundleEncoder({\n      colorFormats: ['rgba8unorm'],\n    });\n\n    if (finishBeforeCommand) {\n      bundleEncoder.finish();\n    }\n\n    t.expectValidationError(() => {\n      switch (command) {\n        case 'draw':\n          {\n            bundleEncoder.draw(1);\n          }\n          break;\n        case 'drawIndexed':\n          {\n            bundleEncoder.drawIndexed(1);\n          }\n          break;\n        case 'drawIndexedIndirect':\n          {\n            bundleEncoder.drawIndexedIndirect(buffer, 0);\n          }\n          break;\n        case 'drawIndirect':\n          {\n            bundleEncoder.drawIndirect(buffer, 1);\n          }\n          break;\n        case 'setPipeline':\n          {\n            bundleEncoder.setPipeline(pipeline);\n          }\n          break;\n        case 'setBindGroup':\n          {\n            bundleEncoder.setBindGroup(0, bindGroup);\n          }\n          break;\n        case 'setIndexBuffer':\n          {\n            bundleEncoder.setIndexBuffer(buffer, 'uint32');\n          }\n          break;\n        case 'setVertexBuffer':\n          {\n            bundleEncoder.setVertexBuffer(1, buffer);\n          }\n          break;\n        case 'pushDebugGroup':\n          {\n            bundleEncoder.pushDebugGroup('group');\n          }\n          break;\n        case 'popDebugGroup':\n          {\n            bundleEncoder.popDebugGroup();\n          }\n          break;\n        case 'insertDebugMarker':\n          {\n            bundleEncoder.insertDebugMarker('marker');\n          }\n          break;\n        default:\n          unreachable();\n      }\n    }, finishBeforeCommand);\n  });\n\ng.test('compute_pass_commands')\n  .desc(\n    `\n    Test that functions of GPUComputePassEncoder generate a validation error if the encoder or the\n    pass is already finished.\n\n    - TODO: Consider testing: nothing before command, end before command, end+finish before command.\n  `\n  )\n  .params(u =>\n    u\n      .combine('command', kComputePassEncoderCommands)\n      .beginSubcases()\n      .combine('finishBeforeCommand', [false, true])\n  )\n  .fn(t => {\n    const { command, finishBeforeCommand } = t.params;\n\n    const encoder = t.device.createCommandEncoder();\n    const computePass = encoder.beginComputePass();\n\n    const indirectBuffer = t.device.createBuffer({\n      size: 12,\n      usage: GPUBufferUsage.INDIRECT,\n    });\n\n    const computePipeline = t.createNoOpComputePipeline();\n\n    const bindGroup = t.createBindGroupForTest();\n\n    if (finishBeforeCommand) {\n      computePass.end();\n      encoder.finish();\n    }\n\n    t.expectValidationError(() => {\n      switch (command) {\n        case 'setBindGroup':\n          {\n            computePass.setBindGroup(0, bindGroup);\n          }\n          break;\n        case 'setPipeline':\n          {\n            computePass.setPipeline(computePipeline);\n          }\n          break;\n        case 'dispatchWorkgroups':\n          {\n            computePass.dispatchWorkgroups(0);\n          }\n          break;\n        case 'dispatchWorkgroupsIndirect':\n          {\n            computePass.dispatchWorkgroupsIndirect(indirectBuffer, 0);\n          }\n          break;\n        case 'pushDebugGroup':\n          {\n            computePass.pushDebugGroup('group');\n          }\n          break;\n        case 'popDebugGroup':\n          {\n            computePass.popDebugGroup();\n          }\n          break;\n        case 'insertDebugMarker':\n          {\n            computePass.insertDebugMarker('marker');\n          }\n          break;\n        default:\n          unreachable();\n      }\n    }, finishBeforeCommand);\n  });\n"],"mappings":"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"}