{"version":3,"file":"indirect_draw.spec.js","names":["description","makeTestGroup","GPUConst","kResourceStates","ValidationTest","kRenderEncodeTypeParams","kIndirectDrawTestParams","combine","F","makeIndexBuffer","device","createBuffer","size","usage","GPUBufferUsage","INDEX","g","test","desc","paramsSubcasesOnly","fn","t","encoderType","indexed","state","params","pipeline","createNoOpRenderPipeline","indirectBuffer","createBufferWithState","INDIRECT","encoder","validateFinishAndSubmitGivenState","createEncoder","setPipeline","indexBuffer","setIndexBuffer","drawIndexedIndirect","drawIndirect","beforeAllSubcases","selectMismatchedDeviceOrSkipTestCase","undefined","mismatched","sourceDevice","mismatchedDevice","trackForCleanup","validateFinish","BufferUsage","COPY_DST","indirectOffset","expandWithParams","p","indirectParamsSize","bufferSize","_valid"],"sources":["../../../../../../../src/webgpu/api/validation/encoding/cmds/render/indirect_draw.spec.ts"],"sourcesContent":["export const description = `\nValidation tests for drawIndirect/drawIndexedIndirect on render pass and render bundle.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUConst } from '../../../../../constants.js';\nimport { kResourceStates } from '../../../../../gpu_test.js';\nimport { ValidationTest } from '../../../validation_test.js';\n\nimport { kRenderEncodeTypeParams } from './render.js';\n\nconst kIndirectDrawTestParams = kRenderEncodeTypeParams.combine('indexed', [true, false] as const);\n\nclass F extends ValidationTest {\n  makeIndexBuffer(): GPUBuffer {\n    return this.device.createBuffer({\n      size: 16,\n      usage: GPUBufferUsage.INDEX,\n    });\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('indirect_buffer_state')\n  .desc(\n    `\nTests indirect buffer must be valid.\n  `\n  )\n  .paramsSubcasesOnly(kIndirectDrawTestParams.combine('state', kResourceStates))\n  .fn(t => {\n    const { encoderType, indexed, state } = t.params;\n    const pipeline = t.createNoOpRenderPipeline();\n    const indirectBuffer = t.createBufferWithState(state, {\n      size: 256,\n      usage: GPUBufferUsage.INDIRECT,\n    });\n\n    const { encoder, validateFinishAndSubmitGivenState } = t.createEncoder(encoderType);\n    encoder.setPipeline(pipeline);\n    if (indexed) {\n      const indexBuffer = t.makeIndexBuffer();\n      encoder.setIndexBuffer(indexBuffer, 'uint32');\n      encoder.drawIndexedIndirect(indirectBuffer, 0);\n    } else {\n      encoder.drawIndirect(indirectBuffer, 0);\n    }\n\n    validateFinishAndSubmitGivenState(state);\n  });\n\ng.test('indirect_buffer,device_mismatch')\n  .desc(\n    'Tests draw(Indexed)Indirect cannot be called with an indirect buffer created from another device'\n  )\n  .paramsSubcasesOnly(kIndirectDrawTestParams.combine('mismatched', [true, false]))\n  .beforeAllSubcases(t => {\n    t.selectMismatchedDeviceOrSkipTestCase(undefined);\n  })\n  .fn(t => {\n    const { encoderType, indexed, mismatched } = t.params;\n\n    const sourceDevice = mismatched ? t.mismatchedDevice : t.device;\n\n    const indirectBuffer = sourceDevice.createBuffer({\n      size: 256,\n      usage: GPUBufferUsage.INDIRECT,\n    });\n    t.trackForCleanup(indirectBuffer);\n\n    const { encoder, validateFinish } = t.createEncoder(encoderType);\n    encoder.setPipeline(t.createNoOpRenderPipeline());\n\n    if (indexed) {\n      encoder.setIndexBuffer(t.makeIndexBuffer(), 'uint32');\n      encoder.drawIndexedIndirect(indirectBuffer, 0);\n    } else {\n      encoder.drawIndirect(indirectBuffer, 0);\n    }\n    validateFinish(!mismatched);\n  });\n\ng.test('indirect_buffer_usage')\n  .desc(\n    `\nTests indirect buffer must have 'Indirect' usage.\n  `\n  )\n  .paramsSubcasesOnly(\n    kIndirectDrawTestParams.combine('usage', [\n      GPUConst.BufferUsage.INDIRECT, // control case\n      GPUConst.BufferUsage.COPY_DST,\n      GPUConst.BufferUsage.COPY_DST | GPUConst.BufferUsage.INDIRECT,\n    ] as const)\n  )\n  .fn(t => {\n    const { encoderType, indexed, usage } = t.params;\n    const indirectBuffer = t.device.createBuffer({\n      size: 256,\n      usage,\n    });\n\n    const { encoder, validateFinish } = t.createEncoder(encoderType);\n    encoder.setPipeline(t.createNoOpRenderPipeline());\n    if (indexed) {\n      const indexBuffer = t.makeIndexBuffer();\n      encoder.setIndexBuffer(indexBuffer, 'uint32');\n      encoder.drawIndexedIndirect(indirectBuffer, 0);\n    } else {\n      encoder.drawIndirect(indirectBuffer, 0);\n    }\n    validateFinish((usage & GPUBufferUsage.INDIRECT) !== 0);\n  });\n\ng.test('indirect_offset_alignment')\n  .desc(\n    `\nTests indirect offset must be a multiple of 4.\n  `\n  )\n  .paramsSubcasesOnly(kIndirectDrawTestParams.combine('indirectOffset', [0, 2, 4] as const))\n  .fn(t => {\n    const { encoderType, indexed, indirectOffset } = t.params;\n    const pipeline = t.createNoOpRenderPipeline();\n    const indirectBuffer = t.device.createBuffer({\n      size: 256,\n      usage: GPUBufferUsage.INDIRECT,\n    });\n\n    const { encoder, validateFinish } = t.createEncoder(encoderType);\n    encoder.setPipeline(pipeline);\n    if (indexed) {\n      const indexBuffer = t.makeIndexBuffer();\n      encoder.setIndexBuffer(indexBuffer, 'uint32');\n      encoder.drawIndexedIndirect(indirectBuffer, indirectOffset);\n    } else {\n      encoder.drawIndirect(indirectBuffer, indirectOffset);\n    }\n\n    validateFinish(indirectOffset % 4 === 0);\n  });\n\ng.test('indirect_offset_oob')\n  .desc(\n    `\nTests indirect draw calls with various indirect offsets and buffer sizes.\n- (offset, b.size) is\n  - (0, 0)\n  - (0, min size) (control case)\n  - (0, min size + 1) (control case)\n  - (0, min size - 1)\n  - (0, min size - min alignment)\n  - (min alignment, min size + min alignment)\n  - (min alignment, min size + min alignment - 1)\n  - (min alignment / 2, min size + min alignment)\n  - (min alignment +/- 1, min size + min alignment)\n  - (min size, min size)\n  - (min size + min alignment, min size)\n  - min size = indirect draw parameters size\n  - x =(drawIndirect, drawIndexedIndirect)\n  `\n  )\n  .paramsSubcasesOnly(\n    kIndirectDrawTestParams.expandWithParams(p => {\n      const indirectParamsSize = p.indexed ? 20 : 16;\n      return [\n        { indirectOffset: 0, bufferSize: 0, _valid: false },\n        { indirectOffset: 0, bufferSize: indirectParamsSize, _valid: true },\n        { indirectOffset: 0, bufferSize: indirectParamsSize + 1, _valid: true },\n        { indirectOffset: 0, bufferSize: indirectParamsSize - 1, _valid: false },\n        { indirectOffset: 0, bufferSize: indirectParamsSize - 4, _valid: false },\n        { indirectOffset: 4, bufferSize: indirectParamsSize + 4, _valid: true },\n        { indirectOffset: 4, bufferSize: indirectParamsSize + 3, _valid: false },\n        { indirectOffset: 2, bufferSize: indirectParamsSize + 4, _valid: false },\n        { indirectOffset: 3, bufferSize: indirectParamsSize + 4, _valid: false },\n        { indirectOffset: 5, bufferSize: indirectParamsSize + 4, _valid: false },\n        { indirectOffset: indirectParamsSize, bufferSize: indirectParamsSize, _valid: false },\n        { indirectOffset: indirectParamsSize + 4, bufferSize: indirectParamsSize, _valid: false },\n      ] as const;\n    })\n  )\n  .fn(t => {\n    const { encoderType, indexed, indirectOffset, bufferSize, _valid } = t.params;\n    const pipeline = t.createNoOpRenderPipeline();\n    const indirectBuffer = t.device.createBuffer({\n      size: bufferSize,\n      usage: GPUBufferUsage.INDIRECT,\n    });\n\n    const { encoder, validateFinish } = t.createEncoder(encoderType);\n    encoder.setPipeline(pipeline);\n    if (indexed) {\n      const indexBuffer = t.makeIndexBuffer();\n      encoder.setIndexBuffer(indexBuffer, 'uint32');\n      encoder.drawIndexedIndirect(indirectBuffer, indirectOffset);\n    } else {\n      encoder.drawIndirect(indirectBuffer, indirectOffset);\n    }\n\n    validateFinish(_valid);\n  });\n"],"mappings":";AAAA;AAAA,GAAA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAAC,CAED,SAASC,aAAa,QAAQ,kDAAkD;AAChF,SAASC,QAAQ,QAAQ,6BAA6B;AACtD,SAASC,eAAe,QAAQ,4BAA4B;AAC5D,SAASC,cAAc,QAAQ,6BAA6B;;AAE5D,SAASC,uBAAuB,QAAQ,aAAa;;AAErD,MAAMC,uBAAuB,GAAGD,uBAAuB,CAACE,OAAO,CAAC,SAAS,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAU;;AAElG,MAAMC,CAAC,SAASJ,cAAc,CAAC;EAC7BK,eAAe,GAAc;IAC3B,OAAO,IAAI,CAACC,MAAM,CAACC,YAAY,CAAC;MAC9BC,IAAI,EAAE,EAAE;MACRC,KAAK,EAAEC,cAAc,CAACC;IACxB,CAAC,CAAC;EACJ;AACF;;AAEA,OAAO,MAAMC,CAAC,GAAGf,aAAa,CAACO,CAAC,CAAC;;AAEjCQ,CAAC,CAACC,IAAI,CAAC,uBAAuB,CAAC;AAC5BC,IAAI;AACF;AACL;AACA,GAAG,CACA;;AACAC,kBAAkB,CAACb,uBAAuB,CAACC,OAAO,CAAC,OAAO,EAAEJ,eAAe,CAAC,CAAC;AAC7EiB,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAM,EAAEC,WAAW,EAAEC,OAAO,EAAEC,KAAK,CAAC,CAAC,GAAGH,CAAC,CAACI,MAAM;EAChD,MAAMC,QAAQ,GAAGL,CAAC,CAACM,wBAAwB,EAAE;EAC7C,MAAMC,cAAc,GAAGP,CAAC,CAACQ,qBAAqB,CAACL,KAAK,EAAE;IACpDZ,IAAI,EAAE,GAAG;IACTC,KAAK,EAAEC,cAAc,CAACgB;EACxB,CAAC,CAAC;;EAEF,MAAM,EAAEC,OAAO,EAAEC,iCAAiC,CAAC,CAAC,GAAGX,CAAC,CAACY,aAAa,CAACX,WAAW,CAAC;EACnFS,OAAO,CAACG,WAAW,CAACR,QAAQ,CAAC;EAC7B,IAAIH,OAAO,EAAE;IACX,MAAMY,WAAW,GAAGd,CAAC,CAACZ,eAAe,EAAE;IACvCsB,OAAO,CAACK,cAAc,CAACD,WAAW,EAAE,QAAQ,CAAC;IAC7CJ,OAAO,CAACM,mBAAmB,CAACT,cAAc,EAAE,CAAC,CAAC;EAChD,CAAC,MAAM;IACLG,OAAO,CAACO,YAAY,CAACV,cAAc,EAAE,CAAC,CAAC;EACzC;;EAEAI,iCAAiC,CAACR,KAAK,CAAC;AAC1C,CAAC,CAAC;;AAEJR,CAAC,CAACC,IAAI,CAAC,iCAAiC,CAAC;AACtCC,IAAI;AACH,kGAAkG,CACnG;;AACAC,kBAAkB,CAACb,uBAAuB,CAACC,OAAO,CAAC,YAAY,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;AAChFgC,iBAAiB,CAAC,CAAAlB,CAAC,KAAI;EACtBA,CAAC,CAACmB,oCAAoC,CAACC,SAAS,CAAC;AACnD,CAAC,CAAC;AACDrB,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAM,EAAEC,WAAW,EAAEC,OAAO,EAAEmB,UAAU,CAAC,CAAC,GAAGrB,CAAC,CAACI,MAAM;;EAErD,MAAMkB,YAAY,GAAGD,UAAU,GAAGrB,CAAC,CAACuB,gBAAgB,GAAGvB,CAAC,CAACX,MAAM;;EAE/D,MAAMkB,cAAc,GAAGe,YAAY,CAAChC,YAAY,CAAC;IAC/CC,IAAI,EAAE,GAAG;IACTC,KAAK,EAAEC,cAAc,CAACgB;EACxB,CAAC,CAAC;EACFT,CAAC,CAACwB,eAAe,CAACjB,cAAc,CAAC;;EAEjC,MAAM,EAAEG,OAAO,EAAEe,cAAc,CAAC,CAAC,GAAGzB,CAAC,CAACY,aAAa,CAACX,WAAW,CAAC;EAChES,OAAO,CAACG,WAAW,CAACb,CAAC,CAACM,wBAAwB,EAAE,CAAC;;EAEjD,IAAIJ,OAAO,EAAE;IACXQ,OAAO,CAACK,cAAc,CAACf,CAAC,CAACZ,eAAe,EAAE,EAAE,QAAQ,CAAC;IACrDsB,OAAO,CAACM,mBAAmB,CAACT,cAAc,EAAE,CAAC,CAAC;EAChD,CAAC,MAAM;IACLG,OAAO,CAACO,YAAY,CAACV,cAAc,EAAE,CAAC,CAAC;EACzC;EACAkB,cAAc,CAAC,CAACJ,UAAU,CAAC;AAC7B,CAAC,CAAC;;AAEJ1B,CAAC,CAACC,IAAI,CAAC,uBAAuB,CAAC;AAC5BC,IAAI;AACF;AACL;AACA,GAAG,CACA;;AACAC,kBAAkB;AACjBb,uBAAuB,CAACC,OAAO,CAAC,OAAO,EAAE;AACvCL,QAAQ,CAAC6C,WAAW,CAACjB,QAAQ,EAAE;AAC/B5B,QAAQ,CAAC6C,WAAW,CAACC,QAAQ;AAC7B9C,QAAQ,CAAC6C,WAAW,CAACC,QAAQ,GAAG9C,QAAQ,CAAC6C,WAAW,CAACjB,QAAQ,CAC9D,CAAU,CACZ;;;AACAV,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAM,EAAEC,WAAW,EAAEC,OAAO,EAAEV,KAAK,CAAC,CAAC,GAAGQ,CAAC,CAACI,MAAM;EAChD,MAAMG,cAAc,GAAGP,CAAC,CAACX,MAAM,CAACC,YAAY,CAAC;IAC3CC,IAAI,EAAE,GAAG;IACTC;EACF,CAAC,CAAC;;EAEF,MAAM,EAAEkB,OAAO,EAAEe,cAAc,CAAC,CAAC,GAAGzB,CAAC,CAACY,aAAa,CAACX,WAAW,CAAC;EAChES,OAAO,CAACG,WAAW,CAACb,CAAC,CAACM,wBAAwB,EAAE,CAAC;EACjD,IAAIJ,OAAO,EAAE;IACX,MAAMY,WAAW,GAAGd,CAAC,CAACZ,eAAe,EAAE;IACvCsB,OAAO,CAACK,cAAc,CAACD,WAAW,EAAE,QAAQ,CAAC;IAC7CJ,OAAO,CAACM,mBAAmB,CAACT,cAAc,EAAE,CAAC,CAAC;EAChD,CAAC,MAAM;IACLG,OAAO,CAACO,YAAY,CAACV,cAAc,EAAE,CAAC,CAAC;EACzC;EACAkB,cAAc,CAAC,CAACjC,KAAK,GAAGC,cAAc,CAACgB,QAAQ,MAAM,CAAC,CAAC;AACzD,CAAC,CAAC;;AAEJd,CAAC,CAACC,IAAI,CAAC,2BAA2B,CAAC;AAChCC,IAAI;AACF;AACL;AACA,GAAG,CACA;;AACAC,kBAAkB,CAACb,uBAAuB,CAACC,OAAO,CAAC,gBAAgB,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAU,CAAC;AACzFa,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAM,EAAEC,WAAW,EAAEC,OAAO,EAAE0B,cAAc,CAAC,CAAC,GAAG5B,CAAC,CAACI,MAAM;EACzD,MAAMC,QAAQ,GAAGL,CAAC,CAACM,wBAAwB,EAAE;EAC7C,MAAMC,cAAc,GAAGP,CAAC,CAACX,MAAM,CAACC,YAAY,CAAC;IAC3CC,IAAI,EAAE,GAAG;IACTC,KAAK,EAAEC,cAAc,CAACgB;EACxB,CAAC,CAAC;;EAEF,MAAM,EAAEC,OAAO,EAAEe,cAAc,CAAC,CAAC,GAAGzB,CAAC,CAACY,aAAa,CAACX,WAAW,CAAC;EAChES,OAAO,CAACG,WAAW,CAACR,QAAQ,CAAC;EAC7B,IAAIH,OAAO,EAAE;IACX,MAAMY,WAAW,GAAGd,CAAC,CAACZ,eAAe,EAAE;IACvCsB,OAAO,CAACK,cAAc,CAACD,WAAW,EAAE,QAAQ,CAAC;IAC7CJ,OAAO,CAACM,mBAAmB,CAACT,cAAc,EAAEqB,cAAc,CAAC;EAC7D,CAAC,MAAM;IACLlB,OAAO,CAACO,YAAY,CAACV,cAAc,EAAEqB,cAAc,CAAC;EACtD;;EAEAH,cAAc,CAACG,cAAc,GAAG,CAAC,KAAK,CAAC,CAAC;AAC1C,CAAC,CAAC;;AAEJjC,CAAC,CAACC,IAAI,CAAC,qBAAqB,CAAC;AAC1BC,IAAI;AACF;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,CACA;;AACAC,kBAAkB;AACjBb,uBAAuB,CAAC4C,gBAAgB,CAAC,CAAAC,CAAC,KAAI;EAC5C,MAAMC,kBAAkB,GAAGD,CAAC,CAAC5B,OAAO,GAAG,EAAE,GAAG,EAAE;EAC9C,OAAO;EACL,EAAE0B,cAAc,EAAE,CAAC,EAAEI,UAAU,EAAE,CAAC,EAAEC,MAAM,EAAE,KAAK,CAAC,CAAC;EACnD,EAAEL,cAAc,EAAE,CAAC,EAAEI,UAAU,EAAED,kBAAkB,EAAEE,MAAM,EAAE,IAAI,CAAC,CAAC;EACnE,EAAEL,cAAc,EAAE,CAAC,EAAEI,UAAU,EAAED,kBAAkB,GAAG,CAAC,EAAEE,MAAM,EAAE,IAAI,CAAC,CAAC;EACvE,EAAEL,cAAc,EAAE,CAAC,EAAEI,UAAU,EAAED,kBAAkB,GAAG,CAAC,EAAEE,MAAM,EAAE,KAAK,CAAC,CAAC;EACxE,EAAEL,cAAc,EAAE,CAAC,EAAEI,UAAU,EAAED,kBAAkB,GAAG,CAAC,EAAEE,MAAM,EAAE,KAAK,CAAC,CAAC;EACxE,EAAEL,cAAc,EAAE,CAAC,EAAEI,UAAU,EAAED,kBAAkB,GAAG,CAAC,EAAEE,MAAM,EAAE,IAAI,CAAC,CAAC;EACvE,EAAEL,cAAc,EAAE,CAAC,EAAEI,UAAU,EAAED,kBAAkB,GAAG,CAAC,EAAEE,MAAM,EAAE,KAAK,CAAC,CAAC;EACxE,EAAEL,cAAc,EAAE,CAAC,EAAEI,UAAU,EAAED,kBAAkB,GAAG,CAAC,EAAEE,MAAM,EAAE,KAAK,CAAC,CAAC;EACxE,EAAEL,cAAc,EAAE,CAAC,EAAEI,UAAU,EAAED,kBAAkB,GAAG,CAAC,EAAEE,MAAM,EAAE,KAAK,CAAC,CAAC;EACxE,EAAEL,cAAc,EAAE,CAAC,EAAEI,UAAU,EAAED,kBAAkB,GAAG,CAAC,EAAEE,MAAM,EAAE,KAAK,CAAC,CAAC;EACxE,EAAEL,cAAc,EAAEG,kBAAkB,EAAEC,UAAU,EAAED,kBAAkB,EAAEE,MAAM,EAAE,KAAK,CAAC,CAAC;EACrF,EAAEL,cAAc,EAAEG,kBAAkB,GAAG,CAAC,EAAEC,UAAU,EAAED,kBAAkB,EAAEE,MAAM,EAAE,KAAK,CAAC,CAAC,CAC1F;;AACH,CAAC,CAAC,CACH;;AACAlC,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAM,EAAEC,WAAW,EAAEC,OAAO,EAAE0B,cAAc,EAAEI,UAAU,EAAEC,MAAM,CAAC,CAAC,GAAGjC,CAAC,CAACI,MAAM;EAC7E,MAAMC,QAAQ,GAAGL,CAAC,CAACM,wBAAwB,EAAE;EAC7C,MAAMC,cAAc,GAAGP,CAAC,CAACX,MAAM,CAACC,YAAY,CAAC;IAC3CC,IAAI,EAAEyC,UAAU;IAChBxC,KAAK,EAAEC,cAAc,CAACgB;EACxB,CAAC,CAAC;;EAEF,MAAM,EAAEC,OAAO,EAAEe,cAAc,CAAC,CAAC,GAAGzB,CAAC,CAACY,aAAa,CAACX,WAAW,CAAC;EAChES,OAAO,CAACG,WAAW,CAACR,QAAQ,CAAC;EAC7B,IAAIH,OAAO,EAAE;IACX,MAAMY,WAAW,GAAGd,CAAC,CAACZ,eAAe,EAAE;IACvCsB,OAAO,CAACK,cAAc,CAACD,WAAW,EAAE,QAAQ,CAAC;IAC7CJ,OAAO,CAACM,mBAAmB,CAACT,cAAc,EAAEqB,cAAc,CAAC;EAC7D,CAAC,MAAM;IACLlB,OAAO,CAACO,YAAY,CAACV,cAAc,EAAEqB,cAAc,CAAC;EACtD;;EAEAH,cAAc,CAACQ,MAAM,CAAC;AACxB,CAAC,CAAC"}