{"version":3,"file":"bgra8unorm_storage.spec.js","names":["description","makeTestGroup","assert","kTextureUsages","GPUConst","kAllCanvasTypes","createCanvas","ValidationTest","BGRA8UnormStorageValidationTests","testCreateShaderModuleWithBGRA8UnormStorage","shaderType","success","shaderDeclaration","expectValidationError","device","createShaderModule","code","g","test","desc","beforeAllSubcases","t","selectDeviceOrSkipTestCase","fn","descriptor","size","format","usage","TextureUsage","STORAGE","createTexture","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","COMPUTE","storageTexture","params","u","combine","beginSubcases","expand","p","usageSet","Set","usage0","usage1","add","canvasType","canvas","ctx","getContext","GPUCanvasContext","requiredStorageBinding","GPUTextureUsage","STORAGE_BINDING","configure","currentTexture","getCurrentTexture","bindGroupLayout","FRAGMENT","access","createBindGroup","layout","resource","createView"],"sources":["../../../../../src/webgpu/api/validation/texture/bgra8unorm_storage.spec.ts"],"sourcesContent":["export const description = `\nTests for capabilities added by bgra8unorm-storage flag.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { assert } from '../../../../common/util/util.js';\nimport { kTextureUsages } from '../../../capability_info.js';\nimport { GPUConst } from '../../../constants.js';\nimport { kAllCanvasTypes, createCanvas } from '../../../util/create_elements.js';\nimport { ValidationTest } from '../validation_test.js';\n\nclass BGRA8UnormStorageValidationTests extends ValidationTest {\n  testCreateShaderModuleWithBGRA8UnormStorage(\n    shaderType: 'fragment' | 'compute',\n    success: boolean\n  ): void {\n    let shaderDeclaration = '';\n    switch (shaderType) {\n      case 'fragment':\n        shaderDeclaration = '@fragment';\n        break;\n      case 'compute':\n        shaderDeclaration = '@compute @workgroup_size(1)';\n        break;\n    }\n    this.expectValidationError(() => {\n      this.device.createShaderModule({\n        code: `\n      @group(0) @binding(1) var outputTex: texture_storage_2d<bgra8unorm, write>;\n      ${shaderDeclaration} fn main() {\n        textureStore(outputTex, vec2<i32>(), vec4<f32>());\n      }\n      `,\n      });\n    }, !success);\n  }\n}\n\nexport const g = makeTestGroup(BGRA8UnormStorageValidationTests);\n\ng.test('create_texture')\n  .desc(\n    `\nTest that it is valid to create bgra8unorm texture with STORAGE usage iff the feature\nbgra8unorm-storage is enabled. Note, the createTexture test suite covers the validation cases where\nthis feature is not enabled, which are skipped here.\n`\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('bgra8unorm-storage');\n  })\n  .fn(t => {\n    const descriptor = {\n      size: [1, 1, 1],\n      format: 'bgra8unorm' as const,\n      usage: GPUConst.TextureUsage.STORAGE,\n    };\n    t.device.createTexture(descriptor);\n  });\n\ng.test('create_bind_group_layout')\n  .desc(\n    `\nTest that it is valid to create GPUBindGroupLayout that uses bgra8unorm as storage texture format\niff the feature bgra8unorm-storage is enabled. Note, the createBindGroupLayout test suite covers the\nvalidation cases where this feature is not enabled, which are skipped here.\n`\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('bgra8unorm-storage');\n  })\n  .fn(t => {\n    t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.COMPUTE,\n          storageTexture: { format: 'bgra8unorm' },\n        },\n      ],\n    });\n  });\n\ng.test('create_shader_module_with_bgra8unorm_storage')\n  .desc(\n    `\nTest that it is valid to declare the format of a storage texture as bgra8unorm in a shader module if\nthe feature bgra8unorm-storage is enabled.\n`\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('bgra8unorm-storage');\n  })\n  .params(u => u.combine('shaderType', ['fragment', 'compute'] as const))\n  .fn(t => {\n    const { shaderType } = t.params;\n\n    t.testCreateShaderModuleWithBGRA8UnormStorage(shaderType, true);\n  });\n\ng.test('create_shader_module_without_bgra8unorm_storage')\n  .desc(\n    `\nTest that it is invalid to declare the format of a storage texture as bgra8unorm in a shader module\nif the feature bgra8unorm-storage is not enabled.\n`\n  )\n  .params(u => u.combine('shaderType', ['fragment', 'compute'] as const))\n  .fn(t => {\n    const { shaderType } = t.params;\n\n    t.testCreateShaderModuleWithBGRA8UnormStorage(shaderType, false);\n  });\n\ng.test('configure_storage_usage_on_canvas_context_without_bgra8unorm_storage')\n  .desc(\n    `\nTest that it is invalid to configure a GPUCanvasContext to 'GPUStorageBinding' usage with\n'bgra8unorm' format on a GPUDevice with 'bgra8unorm-storage' disabled.\n`\n  )\n  .params(u =>\n    u\n      .combine('canvasType', kAllCanvasTypes)\n      .beginSubcases()\n      .expand('usage', p => {\n        const usageSet = new Set<number>();\n        for (const usage0 of kTextureUsages) {\n          for (const usage1 of kTextureUsages) {\n            usageSet.add(usage0 | usage1);\n          }\n        }\n        return usageSet;\n      })\n  )\n  .fn(t => {\n    const { canvasType, usage } = t.params;\n    const canvas = createCanvas(t, canvasType, 1, 1);\n    const ctx = canvas.getContext('webgpu');\n    assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n    const requiredStorageBinding = !!(usage & GPUTextureUsage.STORAGE_BINDING);\n    t.expectValidationError(() => {\n      ctx.configure({\n        device: t.device,\n        format: 'bgra8unorm',\n        usage,\n      });\n    }, requiredStorageBinding);\n  });\n\ng.test('configure_storage_usage_on_canvas_context_with_bgra8unorm_storage')\n  .desc(\n    `\nTest that it is valid to configure a GPUCanvasContext with GPUStorageBinding usage and a GPUDevice\nwith 'bgra8unorm-storage' enabled.\n`\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('bgra8unorm-storage');\n  })\n  .params(u =>\n    u\n      .combine('canvasType', kAllCanvasTypes)\n      .beginSubcases()\n      .expand('usage', p => {\n        const usageSet = new Set<number>();\n        for (const usage of kTextureUsages) {\n          usageSet.add(usage | GPUConst.TextureUsage.STORAGE_BINDING);\n        }\n        return usageSet;\n      })\n  )\n  .fn(t => {\n    const { canvasType, usage } = t.params;\n    const canvas = createCanvas(t, canvasType, 1, 1);\n    const ctx = canvas.getContext('webgpu');\n    assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n    ctx.configure({\n      device: t.device,\n      format: 'bgra8unorm',\n      usage,\n    });\n\n    const currentTexture = ctx.getCurrentTexture();\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.FRAGMENT,\n          storageTexture: { access: 'write-only', format: currentTexture.format },\n        },\n      ],\n    });\n    t.device.createBindGroup({\n      layout: bindGroupLayout,\n      entries: [\n        {\n          binding: 0,\n          resource: currentTexture.createView(),\n        },\n      ],\n    });\n  });\n"],"mappings":"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"}