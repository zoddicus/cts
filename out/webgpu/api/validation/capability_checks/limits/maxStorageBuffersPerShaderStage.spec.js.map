{"version":3,"file":"maxStorageBuffersPerShaderStage.spec.js","names":["range","reorder","kReorderOrderKeys","assert","kShaderStageCombinationsWithStage","GPUConst","kMaximumLimitBaseParams","makeLimitTestGroup","kBindGroupTests","kBindingCombinations","getPipelineTypeForBindingCombination","getPerStageWGSLForBindingCombination","kExtraLimits","maxBindingsPerBindGroup","maxBindGroups","limit","g","description","createBindGroupLayout","device","visibility","type","order","numBindings","entries","i","binding","buffer","test","desc","params","combine","filter","ShaderStage","VERTEX","fn","t","limitTest","testValueName","testDeviceWithRequestedMaximumLimits","testValue","shouldError","skipIf","adapter","limits","expectValidationError","actualLimit","Math","min","kNumGroups","ceil","bindGroupLayouts","numInGroup","createPipelineLayout","async","bindingCombination","bindGroupTest","pipelineType","code","j","module","createShaderModule","testCreatePipeline"],"sources":["../../../../../../src/webgpu/api/validation/capability_checks/limits/maxStorageBuffersPerShaderStage.spec.ts"],"sourcesContent":["import {\n  range,\n  reorder,\n  kReorderOrderKeys,\n  ReorderOrder,\n  assert,\n} from '../../../../../common/util/util.js';\nimport { kShaderStageCombinationsWithStage } from '../../../../capability_info.js';\nimport { GPUConst } from '../../../../constants.js';\n\nimport {\n  kMaximumLimitBaseParams,\n  makeLimitTestGroup,\n  kBindGroupTests,\n  kBindingCombinations,\n  getPipelineTypeForBindingCombination,\n  getPerStageWGSLForBindingCombination,\n  LimitsRequest,\n} from './limit_utils.js';\n\nconst kExtraLimits: LimitsRequest = {\n  maxBindingsPerBindGroup: 'adapterLimit',\n  maxBindGroups: 'adapterLimit',\n};\n\nconst limit = 'maxStorageBuffersPerShaderStage';\nexport const { g, description } = makeLimitTestGroup(limit);\n\nfunction createBindGroupLayout(\n  device: GPUDevice,\n  visibility: number,\n  type: GPUBufferBindingType,\n  order: ReorderOrder,\n  numBindings: number\n) {\n  return device.createBindGroupLayout({\n    entries: reorder(\n      order,\n      range(numBindings, i => ({\n        binding: i,\n        visibility,\n        buffer: { type },\n      }))\n    ),\n  });\n}\n\ng.test('createBindGroupLayout,at_over')\n  .desc(\n    `\n  Test using at and over ${limit} limit in createBindGroupLayout\n\n  Note: We also test order to make sure the implementation isn't just looking\n  at just the last entry.\n  `\n  )\n  .params(\n    kMaximumLimitBaseParams\n      .combine('visibility', kShaderStageCombinationsWithStage)\n      .combine('type', ['storage', 'read-only-storage'] as GPUBufferBindingType[])\n      .combine('order', kReorderOrderKeys)\n      .filter(\n        ({ visibility, type }) =>\n          (visibility & GPUConst.ShaderStage.VERTEX) === 0 || type !== 'storage'\n      )\n  )\n  .fn(async t => {\n    const { limitTest, testValueName, visibility, order, type } = t.params;\n\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, shouldError }) => {\n        t.skipIf(\n          t.adapter.limits.maxBindingsPerBindGroup < testValue,\n          `maxBindingsPerBindGroup = ${t.adapter.limits.maxBindingsPerBindGroup} which is less than ${testValue}`\n        );\n\n        await t.expectValidationError(() => {\n          createBindGroupLayout(device, visibility, type, order, testValue);\n        }, shouldError);\n      },\n      kExtraLimits\n    );\n  });\n\ng.test('createPipelineLayout,at_over')\n  .desc(\n    `\n  Test using at and over ${limit} limit in createPipelineLayout\n\n  Note: We also test order to make sure the implementation isn't just looking\n  at just the last entry.\n  `\n  )\n  .params(\n    kMaximumLimitBaseParams\n      .combine('visibility', kShaderStageCombinationsWithStage)\n      .combine('type', ['storage', 'read-only-storage'] as GPUBufferBindingType[])\n      .combine('order', kReorderOrderKeys)\n      .filter(\n        ({ visibility, type }) =>\n          (visibility & GPUConst.ShaderStage.VERTEX) === 0 || type !== 'storage'\n      )\n  )\n  .fn(async t => {\n    const { limitTest, testValueName, visibility, order, type } = t.params;\n\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, shouldError, actualLimit }) => {\n        const maxBindingsPerBindGroup = Math.min(\n          t.device.limits.maxBindingsPerBindGroup,\n          actualLimit\n        );\n        const kNumGroups = Math.ceil(testValue / maxBindingsPerBindGroup);\n\n        // Not sure what to do in this case but best we get notified if it happens.\n        assert(kNumGroups <= t.device.limits.maxBindGroups);\n\n        const bindGroupLayouts = range(kNumGroups, i => {\n          const numInGroup = Math.min(\n            testValue - i * maxBindingsPerBindGroup,\n            maxBindingsPerBindGroup\n          );\n          return createBindGroupLayout(device, visibility, type, order, numInGroup);\n        });\n\n        await t.expectValidationError(\n          () => device.createPipelineLayout({ bindGroupLayouts }),\n          shouldError\n        );\n      },\n      kExtraLimits\n    );\n  });\n\ng.test('createPipeline,at_over')\n  .desc(\n    `\n  Test using createRenderPipeline(Async) and createComputePipeline(Async) at and over ${limit} limit\n\n  Note: We also test order to make sure the implementation isn't just looking\n  at just the last entry.\n  `\n  )\n  .params(\n    kMaximumLimitBaseParams\n      .combine('async', [false, true] as const)\n      .combine('bindingCombination', kBindingCombinations)\n      .combine('order', kReorderOrderKeys)\n      .combine('bindGroupTest', kBindGroupTests)\n  )\n  .fn(async t => {\n    const { limitTest, testValueName, async, bindingCombination, order, bindGroupTest } = t.params;\n    const pipelineType = getPipelineTypeForBindingCombination(bindingCombination);\n\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, actualLimit, shouldError }) => {\n        t.skipIf(\n          bindGroupTest === 'sameGroup' && testValue > device.limits.maxBindingsPerBindGroup,\n          `can not test ${testValue} bindings in same group because maxBindingsPerBindGroup = ${device.limits.maxBindingsPerBindGroup}`\n        );\n\n        const code = getPerStageWGSLForBindingCombination(\n          bindingCombination,\n          order,\n          bindGroupTest,\n          (i, j) => `var<storage> u${j}_${i}: f32`,\n          (i, j) => `_ = u${j}_${i};`,\n          device.limits.maxBindGroups,\n          testValue\n        );\n        const module = device.createShaderModule({ code });\n\n        await t.testCreatePipeline(\n          pipelineType,\n          async,\n          module,\n          shouldError,\n          `actualLimit: ${actualLimit}, testValue: ${testValue}\\n:${code}`\n        );\n      },\n      kExtraLimits\n    );\n  });\n"],"mappings":"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"}