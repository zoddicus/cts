{"version":3,"file":"maxVertexBuffers.spec.js","names":["range","kRenderEncoderTypes","kMaximumLimitBaseParams","makeLimitTestGroup","kPipelineTypes","getPipelineDescriptor","device","pipelineType","testValue","code","i","join","module","createShaderModule","layout","vertex","entryPoint","buffers","arrayStride","attributes","shaderLocation","offset","format","limit","g","description","test","desc","params","combine","fn","t","limitTest","testValueName","async","testDeviceWithRequestedMaximumLimits","shouldError","pipelineDescriptor","testCreateRenderPipeline","encoderType","actualLimit","lastIndex","buffer","createBuffer","size","usage","GPUBufferUsage","VERTEX","testGPURenderCommandsMixin","mixin","setVertexBuffer","destroy"],"sources":["../../../../../../src/webgpu/api/validation/capability_checks/limits/maxVertexBuffers.spec.ts"],"sourcesContent":["import { range } from '../../../../../common/util/util.js';\n\nimport { kRenderEncoderTypes, kMaximumLimitBaseParams, makeLimitTestGroup } from './limit_utils.js';\n\nconst kPipelineTypes = ['withoutLocations', 'withLocations'] as const;\ntype PipelineType = typeof kPipelineTypes[number];\n\nfunction getPipelineDescriptor(\n  device: GPUDevice,\n  pipelineType: PipelineType,\n  testValue: number\n): GPURenderPipelineDescriptor {\n  const code =\n    pipelineType === 'withLocations'\n      ? `\n        struct VSInput {\n          ${range(testValue, i => `@location(${i}) p${i}: f32,`).join('\\n')}\n        }\n        @vertex fn vs(v: VSInput) -> @builtin(position) vec4f {\n          let x = ${range(testValue, i => `v.p${i}`).join(' + ')};\n          return vec4f(x, 0, 0, 1);\n        }\n        `\n      : `\n        @vertex fn vs() -> @builtin(position) vec4f {\n          return vec4f(0);\n        }\n        `;\n  const module = device.createShaderModule({ code });\n  return {\n    layout: 'auto',\n    vertex: {\n      module,\n      entryPoint: 'vs',\n      buffers: range(testValue, i => ({\n        arrayStride: 32,\n        attributes: [{ shaderLocation: i, offset: 0, format: 'float32' }],\n      })),\n    },\n  };\n}\n\nconst limit = 'maxVertexBuffers';\nexport const { g, description } = makeLimitTestGroup(limit);\n\ng.test('createRenderPipeline,at_over')\n  .desc(`Test using at and over ${limit} limit in createRenderPipeline(Async)`)\n  .params(\n    kMaximumLimitBaseParams.combine('async', [false, true]).combine('pipelineType', kPipelineTypes)\n  )\n  .fn(async t => {\n    const { limitTest, testValueName, async, pipelineType } = t.params;\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, shouldError }) => {\n        const pipelineDescriptor = getPipelineDescriptor(device, pipelineType, testValue);\n\n        await t.testCreateRenderPipeline(pipelineDescriptor, async, shouldError);\n      }\n    );\n  });\n\ng.test('setVertexBuffer,at_over')\n  .desc(`Test using at and over ${limit} limit in setVertexBuffer`)\n  .params(kMaximumLimitBaseParams.combine('encoderType', kRenderEncoderTypes))\n  .fn(async t => {\n    const { limitTest, testValueName, encoderType } = t.params;\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, shouldError, actualLimit }) => {\n        const lastIndex = testValue - 1;\n\n        const buffer = device.createBuffer({\n          size: 16,\n          usage: GPUBufferUsage.VERTEX,\n        });\n\n        await t.testGPURenderCommandsMixin(\n          encoderType,\n          ({ mixin }) => {\n            mixin.setVertexBuffer(lastIndex, buffer);\n          },\n          shouldError,\n          `lastIndex: ${lastIndex}, actualLimit: ${actualLimit}, shouldError: ${shouldError}`\n        );\n\n        buffer.destroy();\n      }\n    );\n  });\n"],"mappings":"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"}