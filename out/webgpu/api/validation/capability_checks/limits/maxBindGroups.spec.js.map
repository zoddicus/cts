{"version":3,"file":"maxBindGroups.spec.js","names":["range","kCreatePipelineTypes","kEncoderTypes","kMaximumLimitBaseParams","makeLimitTestGroup","limit","g","description","test","desc","params","fn","t","limitTest","testValueName","testDeviceWithRequestedMaximumLimits","device","testValue","shouldError","bindGroupLayouts","i","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","VERTEX","buffer","expectValidationError","createPipelineLayout","combine","createPipelineType","async","lastIndex","code","getGroupIndexWGSLForPipelineType","module","createShaderModule","testCreatePipeline","encoderType","actualLimit","testGPUBindingCommandsMixin","mixin","bindGroup","setBindGroup"],"sources":["../../../../../../src/webgpu/api/validation/capability_checks/limits/maxBindGroups.spec.ts"],"sourcesContent":["import { range } from '../../../../../common/util/util.js';\n\nimport {\n  kCreatePipelineTypes,\n  kEncoderTypes,\n  kMaximumLimitBaseParams,\n  makeLimitTestGroup,\n} from './limit_utils.js';\n\nconst limit = 'maxBindGroups';\nexport const { g, description } = makeLimitTestGroup(limit);\n\ng.test('createPipelineLayout,at_over')\n  .desc(`Test using createPipelineLayout at and over ${limit} limit`)\n  .params(kMaximumLimitBaseParams)\n  .fn(async t => {\n    const { limitTest, testValueName } = t.params;\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, shouldError }) => {\n        const bindGroupLayouts = range(testValue, (i: number) =>\n          device.createBindGroupLayout({\n            entries: [\n              {\n                binding: 0,\n                visibility: GPUShaderStage.VERTEX,\n                buffer: {},\n              },\n            ],\n          })\n        );\n\n        await t.expectValidationError(() => {\n          device.createPipelineLayout({ bindGroupLayouts });\n        }, shouldError);\n      }\n    );\n  });\n\ng.test('createPipeline,at_over')\n  .desc(\n    `Test using createRenderPipeline(Async) and createComputePipeline(Async) at and over ${limit} limit`\n  )\n  .params(\n    kMaximumLimitBaseParams\n      .combine('createPipelineType', kCreatePipelineTypes)\n      .combine('async', [false, true] as const)\n  )\n  .fn(async t => {\n    const { limitTest, testValueName, createPipelineType, async } = t.params;\n\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, shouldError }) => {\n        const lastIndex = testValue - 1;\n\n        const code = t.getGroupIndexWGSLForPipelineType(createPipelineType, lastIndex);\n        const module = device.createShaderModule({ code });\n\n        await t.testCreatePipeline(createPipelineType, async, module, shouldError);\n      }\n    );\n  });\n\ng.test('setBindGroup,at_over')\n  .desc(`Test using setBindGroup at and over ${limit} limit`)\n  .params(kMaximumLimitBaseParams.combine('encoderType', kEncoderTypes))\n  .fn(async t => {\n    const { limitTest, testValueName, encoderType } = t.params;\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ testValue, actualLimit, shouldError }) => {\n        const lastIndex = testValue - 1;\n        await t.testGPUBindingCommandsMixin(\n          encoderType,\n          ({ mixin, bindGroup }) => {\n            mixin.setBindGroup(lastIndex, bindGroup);\n          },\n          shouldError,\n          `shouldError: ${shouldError}, actualLimit: ${actualLimit}, testValue: ${lastIndex}`\n        );\n      }\n    );\n  });\n"],"mappings":";AAAA;AAAA,GAAA,SAASA,KAAK,QAAQ,oCAAoC,CAE1D;AACEC,oBAAoB;AACpBC,aAAa;AACbC,uBAAuB;AACvBC,kBAAkB;AACb,kBAAkB;;AAEzB,MAAMC,KAAK,GAAG,eAAe;AAC7B,OAAO,MAAM,EAAEC,CAAC,EAAEC,WAAW,CAAC,CAAC,GAAGH,kBAAkB,CAACC,KAAK,CAAC;;AAE3DC,CAAC,CAACE,IAAI,CAAC,8BAA8B,CAAC;AACnCC,IAAI,CAAE,+CAA8CJ,KAAM,QAAO,CAAC;AAClEK,MAAM,CAACP,uBAAuB,CAAC;AAC/BQ,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,MAAM,EAAEC,SAAS,EAAEC,aAAa,CAAC,CAAC,GAAGF,CAAC,CAACF,MAAM;EAC7C,MAAME,CAAC,CAACG,oCAAoC;EAC1CF,SAAS;EACTC,aAAa;EACb,OAAO,EAAEE,MAAM,EAAEC,SAAS,EAAEC,WAAW,CAAC,CAAC,KAAK;IAC5C,MAAMC,gBAAgB,GAAGnB,KAAK,CAACiB,SAAS,EAAE,CAACG,CAAS;IAClDJ,MAAM,CAACK,qBAAqB,CAAC;MAC3BC,OAAO,EAAE;MACP;QACEC,OAAO,EAAE,CAAC;QACVC,UAAU,EAAEC,cAAc,CAACC,MAAM;QACjCC,MAAM,EAAE,CAAC;MACX,CAAC;;IAEL,CAAC,CAAC,CACH;;;IAED,MAAMf,CAAC,CAACgB,qBAAqB,CAAC,MAAM;MAClCZ,MAAM,CAACa,oBAAoB,CAAC,EAAEV,gBAAgB,CAAC,CAAC,CAAC;IACnD,CAAC,EAAED,WAAW,CAAC;EACjB,CAAC,CACF;;AACH,CAAC,CAAC;;AAEJZ,CAAC,CAACE,IAAI,CAAC,wBAAwB,CAAC;AAC7BC,IAAI;AACF,uFAAsFJ,KAAM,QAAO,CACrG;;AACAK,MAAM;AACLP,uBAAuB;AACpB2B,OAAO,CAAC,oBAAoB,EAAE7B,oBAAoB,CAAC;AACnD6B,OAAO,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,CAAU,CAC5C;;AACAnB,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,MAAM,EAAEC,SAAS,EAAEC,aAAa,EAAEiB,kBAAkB,EAAEC,KAAK,CAAC,CAAC,GAAGpB,CAAC,CAACF,MAAM;;EAExE,MAAME,CAAC,CAACG,oCAAoC;EAC1CF,SAAS;EACTC,aAAa;EACb,OAAO,EAAEE,MAAM,EAAEC,SAAS,EAAEC,WAAW,CAAC,CAAC,KAAK;IAC5C,MAAMe,SAAS,GAAGhB,SAAS,GAAG,CAAC;;IAE/B,MAAMiB,IAAI,GAAGtB,CAAC,CAACuB,gCAAgC,CAACJ,kBAAkB,EAAEE,SAAS,CAAC;IAC9E,MAAMG,MAAM,GAAGpB,MAAM,CAACqB,kBAAkB,CAAC,EAAEH,IAAI,CAAC,CAAC,CAAC;;IAElD,MAAMtB,CAAC,CAAC0B,kBAAkB,CAACP,kBAAkB,EAAEC,KAAK,EAAEI,MAAM,EAAElB,WAAW,CAAC;EAC5E,CAAC,CACF;;AACH,CAAC,CAAC;;AAEJZ,CAAC,CAACE,IAAI,CAAC,sBAAsB,CAAC;AAC3BC,IAAI,CAAE,uCAAsCJ,KAAM,QAAO,CAAC;AAC1DK,MAAM,CAACP,uBAAuB,CAAC2B,OAAO,CAAC,aAAa,EAAE5B,aAAa,CAAC,CAAC;AACrES,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,MAAM,EAAEC,SAAS,EAAEC,aAAa,EAAEyB,WAAW,CAAC,CAAC,GAAG3B,CAAC,CAACF,MAAM;EAC1D,MAAME,CAAC,CAACG,oCAAoC;EAC1CF,SAAS;EACTC,aAAa;EACb,OAAO,EAAEG,SAAS,EAAEuB,WAAW,EAAEtB,WAAW,CAAC,CAAC,KAAK;IACjD,MAAMe,SAAS,GAAGhB,SAAS,GAAG,CAAC;IAC/B,MAAML,CAAC,CAAC6B,2BAA2B;IACjCF,WAAW;IACX,CAAC,EAAEG,KAAK,EAAEC,SAAS,CAAC,CAAC,KAAK;MACxBD,KAAK,CAACE,YAAY,CAACX,SAAS,EAAEU,SAAS,CAAC;IAC1C,CAAC;IACDzB,WAAW;IACV,gBAAeA,WAAY,kBAAiBsB,WAAY,gBAAeP,SAAU,EAAC,CACpF;;EACH,CAAC,CACF;;AACH,CAAC,CAAC"}