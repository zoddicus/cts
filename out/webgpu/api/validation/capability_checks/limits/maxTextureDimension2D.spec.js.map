{"version":3,"file":"maxTextureDimension2D.spec.js","names":["getGPU","kAllCanvasTypes","createCanvas","kMaximumLimitBaseParams","makeLimitTestGroup","limit","g","description","test","desc","params","fn","t","limitTest","testValueName","testDeviceWithRequestedMaximumLimits","device","shouldError","testValue","actualLimit","dimensionIndex","size","testForValidationErrorWithPossibleOutOfMemoryError","texture","createTexture","format","usage","GPUTextureUsage","TEXTURE_BINDING","destroy","combine","canvasType","canvas","context","getContext","expect","configure","rec","getPreferredCanvasFormat","width","height","getCurrentTexture"],"sources":["../../../../../../src/webgpu/api/validation/capability_checks/limits/maxTextureDimension2D.spec.ts"],"sourcesContent":["import { getGPU } from '../../../../../common/util/navigator_gpu.js';\nimport { kAllCanvasTypes, createCanvas } from '../../../../util/create_elements.js';\n\nimport { kMaximumLimitBaseParams, makeLimitTestGroup } from './limit_utils.js';\n\nconst limit = 'maxTextureDimension2D';\nexport const { g, description } = makeLimitTestGroup(limit);\n\ng.test('createTexture,at_over')\n  .desc(`Test using at and over ${limit} limit`)\n  .params(kMaximumLimitBaseParams)\n  .fn(async t => {\n    const { limitTest, testValueName } = t.params;\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, shouldError, testValue, actualLimit }) => {\n        for (let dimensionIndex = 0; dimensionIndex < 2; ++dimensionIndex) {\n          const size = [1, 1, 1];\n          size[dimensionIndex] = testValue;\n\n          await t.testForValidationErrorWithPossibleOutOfMemoryError(\n            () => {\n              const texture = device.createTexture({\n                size,\n                format: 'rgba8unorm',\n                usage: GPUTextureUsage.TEXTURE_BINDING,\n              });\n\n              // MAINTENANCE_TODO: Remove this 'if' once the bug in chrome is fixed\n              // This 'if' is only here because of a bug in Chrome\n              // that generates an error calling destroy on an invalid texture.\n              // This doesn't affect the test but the 'if' should be removed\n              // once the Chrome bug is fixed.\n              if (!shouldError) {\n                texture.destroy();\n              }\n            },\n            shouldError,\n            `size: ${size}, actualLimit: ${actualLimit}`\n          );\n        }\n      }\n    );\n  });\n\ng.test('configure,at_over')\n  .desc(`Test using at and over ${limit} limit`)\n  .params(kMaximumLimitBaseParams.combine('canvasType', kAllCanvasTypes))\n  .fn(async t => {\n    const { limitTest, testValueName, canvasType } = t.params;\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, shouldError, testValue, actualLimit }) => {\n        for (let dimensionIndex = 0; dimensionIndex < 2; ++dimensionIndex) {\n          const size = [1, 1];\n          size[dimensionIndex] = testValue;\n\n          // This should not fail, even if the size is too large but it might fail\n          // if we're in a worker and HTMLCanvasElement does not exist.\n          const canvas = createCanvas(t, canvasType, size[0], size[1])!;\n          if (canvas) {\n            const context = canvas.getContext('webgpu') as GPUCanvasContext;\n            t.expect(!!context, 'should not fail to create context even if size is too large');\n\n            await t.testForValidationErrorWithPossibleOutOfMemoryError(\n              () => {\n                context.configure({\n                  device,\n                  format: getGPU(t.rec).getPreferredCanvasFormat(),\n                });\n              },\n              shouldError,\n              `size: ${size}, actualLimit: ${actualLimit}`\n            );\n          }\n        }\n      }\n    );\n  });\n\ng.test('getCurrentTexture,at_over')\n  .desc(`Test using at and over ${limit} limit`)\n  .params(kMaximumLimitBaseParams.combine('canvasType', kAllCanvasTypes))\n  .fn(async t => {\n    const { limitTest, testValueName, canvasType } = t.params;\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, shouldError, testValue, actualLimit }) => {\n        for (let dimensionIndex = 0; dimensionIndex < 2; ++dimensionIndex) {\n          const size = [1, 1];\n          size[dimensionIndex] = testValue;\n\n          // Start with a small size so configure will succeed.\n          // This should not fail, even if the size is too large but it might fail\n          // if we're in a worker and HTMLCanvasElement does not exist.\n          const canvas = createCanvas(t, canvasType, 1, 1)!;\n          if (canvas) {\n            const context = canvas.getContext('webgpu') as GPUCanvasContext;\n            t.expect(!!context, 'should not fail to create context even if size is too large');\n\n            context.configure({\n              device,\n              format: getGPU(t.rec).getPreferredCanvasFormat(),\n            });\n\n            if (canvas) {\n              await t.testForValidationErrorWithPossibleOutOfMemoryError(\n                () => {\n                  canvas.width = size[0];\n                  canvas.height = size[1];\n                  const texture = context.getCurrentTexture();\n\n                  // MAINTENANCE_TODO: Remove this 'if' once the bug in chrome is fixed\n                  // This 'if' is only here because of a bug in Chrome\n                  // that generates an error calling destroy on an invalid texture.\n                  // This doesn't affect the test but the 'if' should be removed\n                  // once the Chrome bug is fixed.\n                  if (!shouldError) {\n                    texture.destroy();\n                  }\n                },\n                shouldError,\n                `size: ${size}, actualLimit: ${actualLimit}`\n              );\n            }\n          }\n        }\n      }\n    );\n  });\n"],"mappings":";AAAA;AAAA,GAAA,SAASA,MAAM,QAAQ,6CAA6C,CACpE,SAASC,eAAe,EAAEC,YAAY,QAAQ,qCAAqC;AAEnF,SAASC,uBAAuB,EAAEC,kBAAkB,QAAQ,kBAAkB;;AAE9E,MAAMC,KAAK,GAAG,uBAAuB;AACrC,OAAO,MAAM,EAAEC,CAAC,EAAEC,WAAW,CAAC,CAAC,GAAGH,kBAAkB,CAACC,KAAK,CAAC;;AAE3DC,CAAC,CAACE,IAAI,CAAC,uBAAuB,CAAC;AAC5BC,IAAI,CAAE,0BAAyBJ,KAAM,QAAO,CAAC;AAC7CK,MAAM,CAACP,uBAAuB,CAAC;AAC/BQ,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,MAAM,EAAEC,SAAS,EAAEC,aAAa,CAAC,CAAC,GAAGF,CAAC,CAACF,MAAM;EAC7C,MAAME,CAAC,CAACG,oCAAoC;EAC1CF,SAAS;EACTC,aAAa;EACb,OAAO,EAAEE,MAAM,EAAEC,WAAW,EAAEC,SAAS,EAAEC,WAAW,CAAC,CAAC,KAAK;IACzD,KAAK,IAAIC,cAAc,GAAG,CAAC,EAAEA,cAAc,GAAG,CAAC,EAAE,EAAEA,cAAc,EAAE;MACjE,MAAMC,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MACtBA,IAAI,CAACD,cAAc,CAAC,GAAGF,SAAS;;MAEhC,MAAMN,CAAC,CAACU,kDAAkD;MACxD,MAAM;QACJ,MAAMC,OAAO,GAAGP,MAAM,CAACQ,aAAa,CAAC;UACnCH,IAAI;UACJI,MAAM,EAAE,YAAY;UACpBC,KAAK,EAAEC,eAAe,CAACC;QACzB,CAAC,CAAC;;QAEF;QACA;QACA;QACA;QACA;QACA,IAAI,CAACX,WAAW,EAAE;UAChBM,OAAO,CAACM,OAAO,EAAE;QACnB;MACF,CAAC;MACDZ,WAAW;MACV,SAAQI,IAAK,kBAAiBF,WAAY,EAAC,CAC7C;;IACH;EACF,CAAC,CACF;;AACH,CAAC,CAAC;;AAEJb,CAAC,CAACE,IAAI,CAAC,mBAAmB,CAAC;AACxBC,IAAI,CAAE,0BAAyBJ,KAAM,QAAO,CAAC;AAC7CK,MAAM,CAACP,uBAAuB,CAAC2B,OAAO,CAAC,YAAY,EAAE7B,eAAe,CAAC,CAAC;AACtEU,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,MAAM,EAAEC,SAAS,EAAEC,aAAa,EAAEiB,UAAU,CAAC,CAAC,GAAGnB,CAAC,CAACF,MAAM;EACzD,MAAME,CAAC,CAACG,oCAAoC;EAC1CF,SAAS;EACTC,aAAa;EACb,OAAO,EAAEE,MAAM,EAAEC,WAAW,EAAEC,SAAS,EAAEC,WAAW,CAAC,CAAC,KAAK;IACzD,KAAK,IAAIC,cAAc,GAAG,CAAC,EAAEA,cAAc,GAAG,CAAC,EAAE,EAAEA,cAAc,EAAE;MACjE,MAAMC,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;MACnBA,IAAI,CAACD,cAAc,CAAC,GAAGF,SAAS;;MAEhC;MACA;MACA,MAAMc,MAAM,GAAG9B,YAAY,CAACU,CAAC,EAAEmB,UAAU,EAAEV,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAE;MAC7D,IAAIW,MAAM,EAAE;QACV,MAAMC,OAAO,GAAGD,MAAM,CAACE,UAAU,CAAC,QAAQ,CAAqB;QAC/DtB,CAAC,CAACuB,MAAM,CAAC,CAAC,CAACF,OAAO,EAAE,6DAA6D,CAAC;;QAElF,MAAMrB,CAAC,CAACU,kDAAkD;QACxD,MAAM;UACJW,OAAO,CAACG,SAAS,CAAC;YAChBpB,MAAM;YACNS,MAAM,EAAEzB,MAAM,CAACY,CAAC,CAACyB,GAAG,CAAC,CAACC,wBAAwB;UAChD,CAAC,CAAC;QACJ,CAAC;QACDrB,WAAW;QACV,SAAQI,IAAK,kBAAiBF,WAAY,EAAC,CAC7C;;MACH;IACF;EACF,CAAC,CACF;;AACH,CAAC,CAAC;;AAEJb,CAAC,CAACE,IAAI,CAAC,2BAA2B,CAAC;AAChCC,IAAI,CAAE,0BAAyBJ,KAAM,QAAO,CAAC;AAC7CK,MAAM,CAACP,uBAAuB,CAAC2B,OAAO,CAAC,YAAY,EAAE7B,eAAe,CAAC,CAAC;AACtEU,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,MAAM,EAAEC,SAAS,EAAEC,aAAa,EAAEiB,UAAU,CAAC,CAAC,GAAGnB,CAAC,CAACF,MAAM;EACzD,MAAME,CAAC,CAACG,oCAAoC;EAC1CF,SAAS;EACTC,aAAa;EACb,OAAO,EAAEE,MAAM,EAAEC,WAAW,EAAEC,SAAS,EAAEC,WAAW,CAAC,CAAC,KAAK;IACzD,KAAK,IAAIC,cAAc,GAAG,CAAC,EAAEA,cAAc,GAAG,CAAC,EAAE,EAAEA,cAAc,EAAE;MACjE,MAAMC,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;MACnBA,IAAI,CAACD,cAAc,CAAC,GAAGF,SAAS;;MAEhC;MACA;MACA;MACA,MAAMc,MAAM,GAAG9B,YAAY,CAACU,CAAC,EAAEmB,UAAU,EAAE,CAAC,EAAE,CAAC,CAAE;MACjD,IAAIC,MAAM,EAAE;QACV,MAAMC,OAAO,GAAGD,MAAM,CAACE,UAAU,CAAC,QAAQ,CAAqB;QAC/DtB,CAAC,CAACuB,MAAM,CAAC,CAAC,CAACF,OAAO,EAAE,6DAA6D,CAAC;;QAElFA,OAAO,CAACG,SAAS,CAAC;UAChBpB,MAAM;UACNS,MAAM,EAAEzB,MAAM,CAACY,CAAC,CAACyB,GAAG,CAAC,CAACC,wBAAwB;QAChD,CAAC,CAAC;;QAEF,IAAIN,MAAM,EAAE;UACV,MAAMpB,CAAC,CAACU,kDAAkD;UACxD,MAAM;YACJU,MAAM,CAACO,KAAK,GAAGlB,IAAI,CAAC,CAAC,CAAC;YACtBW,MAAM,CAACQ,MAAM,GAAGnB,IAAI,CAAC,CAAC,CAAC;YACvB,MAAME,OAAO,GAAGU,OAAO,CAACQ,iBAAiB,EAAE;;YAE3C;YACA;YACA;YACA;YACA;YACA,IAAI,CAACxB,WAAW,EAAE;cAChBM,OAAO,CAACM,OAAO,EAAE;YACnB;UACF,CAAC;UACDZ,WAAW;UACV,SAAQI,IAAK,kBAAiBF,WAAY,EAAC,CAC7C;;QACH;MACF;IACF;EACF,CAAC,CACF;;AACH,CAAC,CAAC"}