{"version":3,"file":"maxTextureDimension3D.spec.js","names":["kMaximumLimitBaseParams","makeLimitTestGroup","limit","g","description","test","desc","params","fn","t","limitTest","testValueName","testDeviceWithRequestedMaximumLimits","device","shouldError","testValue","dimensionIndex","size","testForValidationErrorWithPossibleOutOfMemoryError","texture","createTexture","format","dimension","usage","GPUTextureUsage","TEXTURE_BINDING","destroy"],"sources":["../../../../../../src/webgpu/api/validation/capability_checks/limits/maxTextureDimension3D.spec.ts"],"sourcesContent":["import { kMaximumLimitBaseParams, makeLimitTestGroup } from './limit_utils.js';\n\nconst limit = 'maxTextureDimension3D';\nexport const { g, description } = makeLimitTestGroup(limit);\n\ng.test('createTexture,at_over')\n  .desc(`Test using at and over ${limit} limit`)\n  .params(kMaximumLimitBaseParams)\n  .fn(async t => {\n    const { limitTest, testValueName } = t.params;\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, shouldError, testValue }) => {\n        for (let dimensionIndex = 0; dimensionIndex < 3; ++dimensionIndex) {\n          const size = [2, 2, 2];\n          size[dimensionIndex] = testValue;\n\n          await t.testForValidationErrorWithPossibleOutOfMemoryError(() => {\n            const texture = device.createTexture({\n              size,\n              format: 'rgba8unorm',\n              dimension: '3d',\n              usage: GPUTextureUsage.TEXTURE_BINDING,\n            });\n\n            // MAINTENANCE_TODO: Remove this 'if' once the bug in chrome is fixed\n            // This 'if' is only here because of a bug in Chrome\n            // that generates an error calling destroy on an invalid texture.\n            // This doesn't affect the test but the 'if' should be removed\n            // once the Chrome bug is fixed.\n            if (!shouldError) {\n              texture.destroy();\n            }\n          }, shouldError);\n        }\n      }\n    );\n  });\n"],"mappings":";;GAAA,SAASA,uBAAuB,EAAEC,kBAAkB,QAAQ,kBAAkB,CAE9E,MAAMC,KAAK,GAAG,uBAAuB;AACrC,OAAO,MAAM,EAAEC,CAAC,EAAEC,WAAW,CAAC,CAAC,GAAGH,kBAAkB,CAACC,KAAK,CAAC;;AAE3DC,CAAC,CAACE,IAAI,CAAC,uBAAuB,CAAC;AAC5BC,IAAI,CAAE,0BAAyBJ,KAAM,QAAO,CAAC;AAC7CK,MAAM,CAACP,uBAAuB,CAAC;AAC/BQ,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,MAAM,EAAEC,SAAS,EAAEC,aAAa,CAAC,CAAC,GAAGF,CAAC,CAACF,MAAM;EAC7C,MAAME,CAAC,CAACG,oCAAoC;IAC1CF,SAAS;IACTC,aAAa;IACb,OAAO,EAAEE,MAAM,EAAEC,WAAW,EAAEC,SAAS,CAAC,CAAC,KAAK;MAC5C,KAAK,IAAIC,cAAc,GAAG,CAAC,EAAEA,cAAc,GAAG,CAAC,EAAE,EAAEA,cAAc,EAAE;QACjE,MAAMC,IAAI,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACtBA,IAAI,CAACD,cAAc,CAAC,GAAGD,SAAS;;QAEhC,MAAMN,CAAC,CAACS,kDAAkD,CAAC,MAAM;UAC/D,MAAMC,OAAO,GAAGN,MAAM,CAACO,aAAa,CAAC;YACnCH,IAAI;YACJI,MAAM,EAAE,YAAY;YACpBC,SAAS,EAAE,IAAI;YACfC,KAAK,EAAEC,eAAe,CAACC;UACzB,CAAC,CAAC;;UAEF;UACA;UACA;UACA;UACA;UACA,IAAI,CAACX,WAAW,EAAE;YAChBK,OAAO,CAACO,OAAO,CAAC,CAAC;UACnB;QACF,CAAC,EAAEZ,WAAW,CAAC;MACjB;IACF;EACF,CAAC;AACH,CAAC,CAAC"}