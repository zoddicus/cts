{"version":3,"file":"maxComputeInvocationsPerWorkgroup.spec.js","names":["kMaximumLimitBaseParams","getDefaultLimit","makeLimitTestGroup","getClosestSizeOverLimit","size","limit","closest","Number","MAX_SAFE_INTEGER","closestSize","depthLimit","Math","min","depth","height","planeSize","width","ceil","num","dist","getClosestSizeUnderOrAtLimit","floor","getDeviceLimitToRequest","limitValueTest","defaultLimit","maximumLimit","getTestWorkgroupSize","testValueName","requestedLimit","maxDimensions","getDeviceLimitToRequestAndValueToTest","workgroupSize","g","description","test","desc","params","combine","fn","t","limitTest","async","adapterLimit","testValue","reduce","a","b","testDeviceWithSpecificLimits","actualLimit","shouldError","module","code","getModuleForWorkgroupSize","testCreatePipeline"],"sources":["../../../../../../src/webgpu/api/validation/capability_checks/limits/maxComputeInvocationsPerWorkgroup.spec.ts"],"sourcesContent":["import {\n  kMaximumLimitBaseParams,\n  getDefaultLimit,\n  MaximumLimitValueTest,\n  MaximumTestValue,\n  makeLimitTestGroup,\n} from './limit_utils.js';\n\n/**\n * Given a 3 dimensional size, and a limit, compute\n * the smallest volume with more then limit units.\n */\nfunction getClosestSizeOverLimit(size: number[], limit: number) {\n  let closest = Number.MAX_SAFE_INTEGER;\n  let closestSize: number[] = [];\n  const depthLimit = Math.min(limit, size[2]);\n  for (let depth = 1; depth <= depthLimit; ++depth) {\n    for (let height = 1; height <= size[1]; ++height) {\n      const planeSize = depth * height;\n      if (planeSize <= limit) {\n        const width = Math.min(size[0], Math.ceil(limit / planeSize));\n        const num = width * planeSize;\n        const dist = num - limit;\n        if (dist > 0 && dist < closest) {\n          closest = dist;\n          closestSize = [width, height, depth];\n        }\n      }\n    }\n  }\n  return closestSize;\n}\n\n/**\n * Given a 3 dimensional size, and a limit, compute\n * the largest volume with limit or less units.\n */\nfunction getClosestSizeUnderOrAtLimit(size: number[], limit: number) {\n  let closest = Number.MAX_SAFE_INTEGER;\n  let closestSize: number[] = [];\n  const depthLimit = Math.min(limit, size[2]);\n  for (let depth = 1; depth <= depthLimit; ++depth) {\n    for (let height = 1; height <= size[1]; ++height) {\n      const planeSize = depth * height;\n      if (planeSize <= limit) {\n        const width = Math.min(size[0], Math.floor(limit / planeSize));\n        const num = width * planeSize;\n        const dist = limit - num;\n        if (dist < closest) {\n          closest = dist;\n          closestSize = [width, height, depth];\n        }\n      }\n    }\n  }\n  return closestSize;\n}\n\nfunction getDeviceLimitToRequest(\n  limitValueTest: MaximumLimitValueTest,\n  defaultLimit: number,\n  maximumLimit: number\n) {\n  switch (limitValueTest) {\n    case 'atDefault':\n      return defaultLimit;\n    case 'underDefault':\n      return defaultLimit - 1;\n    case 'betweenDefaultAndMaximum':\n      return Math.floor((defaultLimit + maximumLimit) / 2);\n    case 'atMaximum':\n      return maximumLimit;\n    case 'overMaximum':\n      return maximumLimit + 1;\n  }\n}\n\nfunction getTestWorkgroupSize(testValueName: MaximumTestValue, requestedLimit: number) {\n  const maxDimensions = [\n    getDefaultLimit('maxComputeWorkgroupSizeX'),\n    getDefaultLimit('maxComputeWorkgroupSizeY'),\n    getDefaultLimit('maxComputeWorkgroupSizeZ'),\n  ];\n\n  switch (testValueName) {\n    case 'atLimit':\n      return getClosestSizeUnderOrAtLimit(maxDimensions, requestedLimit);\n    case 'overLimit':\n      return getClosestSizeOverLimit(maxDimensions, requestedLimit);\n  }\n}\n\nfunction getDeviceLimitToRequestAndValueToTest(\n  limitValueTest: MaximumLimitValueTest,\n  testValueName: MaximumTestValue,\n  defaultLimit: number,\n  maximumLimit: number\n) {\n  const requestedLimit = getDeviceLimitToRequest(limitValueTest, defaultLimit, maximumLimit);\n  const workgroupSize = getTestWorkgroupSize(testValueName, requestedLimit);\n  return {\n    requestedLimit,\n    workgroupSize,\n  };\n}\n\nconst limit = 'maxComputeInvocationsPerWorkgroup';\nexport const { g, description } = makeLimitTestGroup(limit);\n\ng.test('createComputePipeline,at_over')\n  .desc(`Test using createComputePipeline(Async) at and over ${limit} limit`)\n  .params(kMaximumLimitBaseParams.combine('async', [false, true] as const))\n  .fn(async t => {\n    const { limitTest, testValueName, async } = t.params;\n    const { defaultLimit, adapterLimit: maximumLimit } = t;\n\n    const { requestedLimit, workgroupSize } = getDeviceLimitToRequestAndValueToTest(\n      limitTest,\n      testValueName,\n      defaultLimit,\n      maximumLimit\n    );\n    const testValue = workgroupSize.reduce((a, b) => a * b, 1);\n\n    await t.testDeviceWithSpecificLimits(\n      requestedLimit,\n      testValue,\n      async ({ testValue, actualLimit, shouldError }) => {\n        const { module, code } = t.getModuleForWorkgroupSize(workgroupSize);\n\n        await t.testCreatePipeline(\n          'createComputePipeline',\n          async,\n          module,\n          shouldError,\n          `workgroupSize: [${workgroupSize}], size: ${testValue}, limit: ${actualLimit}\\n${code}`\n        );\n      }\n    );\n  });\n"],"mappings":"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"}