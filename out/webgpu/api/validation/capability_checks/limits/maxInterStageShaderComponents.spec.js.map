{"version":3,"file":"maxInterStageShaderComponents.spec.js","names":["range","kMaximumLimitBaseParams","makeLimitTestGroup","getTypeForNumComponents","numComponents","getPipelineDescriptor","device","testValue","pointList","frontFacing","sampleIndex","sampleMaskIn","sampleMaskOut","maxVertexShaderOutputComponents","maxFragmentShaderInputComponents","maxInterStageVariables","limits","maxInterStageShaderVariables","Math","min","num4ComponentVaryings","floor","lastVaryingNumComponents","varyings","i","join","code","maxInterStageShaderComponents","ceil","module","createShaderModule","pipelineDescriptor","layout","primitive","topology","vertex","entryPoint","fragment","targets","format","limit","g","description","test","desc","params","combine","beforeAllSubcases","t","isCompatibility","skip","fn","limitTest","testValueName","async","extraLimits","testDeviceWithRequestedMaximumLimits","shouldError","testCreateRenderPipeline"],"sources":["../../../../../../src/webgpu/api/validation/capability_checks/limits/maxInterStageShaderComponents.spec.ts"],"sourcesContent":["import { range } from '../../../../../common/util/util.js';\n\nimport { kMaximumLimitBaseParams, LimitsRequest, makeLimitTestGroup } from './limit_utils.js';\n\nfunction getTypeForNumComponents(numComponents: number) {\n  return numComponents > 1 ? `vec${numComponents}f` : 'f32';\n}\n\nfunction getPipelineDescriptor(\n  device: GPUDevice,\n  testValue: number,\n  pointList: boolean,\n  frontFacing: boolean,\n  sampleIndex: boolean,\n  sampleMaskIn: boolean,\n  sampleMaskOut: boolean\n): { pipelineDescriptor: GPURenderPipelineDescriptor; code: string } {\n  const maxVertexShaderOutputComponents = testValue - (pointList ? 1 : 0);\n  const maxFragmentShaderInputComponents =\n    testValue - (frontFacing ? 1 : 0) - (sampleIndex ? 1 : 0) - (sampleMaskIn ? 1 : 0);\n\n  const maxInterStageVariables = device.limits.maxInterStageShaderVariables;\n  const numComponents = Math.min(maxVertexShaderOutputComponents, maxFragmentShaderInputComponents);\n\n  const num4ComponentVaryings = Math.floor(numComponents / 4);\n  const lastVaryingNumComponents = numComponents % 4;\n\n  const varyings = `\n      ${range(num4ComponentVaryings, i => `@location(${i}) v4_${i}: vec4f,`).join('\\n')}\n      ${\n        lastVaryingNumComponents > 0\n          ? `@location(${num4ComponentVaryings}) vx: ${getTypeForNumComponents(\n              lastVaryingNumComponents\n            )},`\n          : ``\n      }\n  `;\n\n  const code = `\n    // test value                        : ${testValue}\n    // maxInterStageShaderComponents     : ${device.limits.maxInterStageShaderComponents}\n    // num components in vertex shader   : ${numComponents}${pointList ? ' + point-list' : ''}\n    // num components in fragment shader : ${numComponents}${frontFacing ? ' + front-facing' : ''}${\n      sampleIndex ? ' + sample_index' : ''\n    }${sampleMaskIn ? ' + sample_mask' : ''}\n    // maxVertexShaderOutputComponents   : ${maxVertexShaderOutputComponents}\n    // maxFragmentShaderInputComponents  : ${maxFragmentShaderInputComponents}\n    // maxInterStageVariables:           : ${maxInterStageVariables}\n    // num used inter stage variables    : ${Math.ceil(numComponents / 4)}\n\n    struct VSOut {\n      @builtin(position) p: vec4f,\n      ${varyings}\n    }\n    struct FSIn {\n      ${frontFacing ? '@builtin(front_facing) frontFacing: bool,' : ''}\n      ${sampleIndex ? '@builtin(sample_index) sampleIndex: u32,' : ''}\n      ${sampleMaskIn ? '@builtin(sample_mask) sampleMask: u32,' : ''}\n      ${varyings}\n    }\n    struct FSOut {\n      @location(0) color: vec4f,\n      ${sampleMaskOut ? '@builtin(sample_mask) sampleMask: u32,' : ''}\n    }\n    @vertex fn vs() -> VSOut {\n      var o: VSOut;\n      o.p = vec4f(0);\n      return o;\n    }\n    @fragment fn fs(i: FSIn) -> FSOut {\n      var o: FSOut;\n      o.color = vec4f(0);\n      return o;\n    }\n  `;\n  const module = device.createShaderModule({ code });\n  const pipelineDescriptor: GPURenderPipelineDescriptor = {\n    layout: 'auto',\n    primitive: {\n      topology: pointList ? 'point-list' : 'triangle-list',\n    },\n    vertex: {\n      module,\n      entryPoint: 'vs',\n    },\n    fragment: {\n      module,\n      entryPoint: 'fs',\n      targets: [\n        {\n          format: 'rgba8unorm',\n        },\n      ],\n    },\n  };\n  return { pipelineDescriptor, code };\n}\n\nconst limit = 'maxInterStageShaderComponents';\nexport const { g, description } = makeLimitTestGroup(limit);\n\ng.test('createRenderPipeline,at_over')\n  .desc(`Test using at and over ${limit} limit in createRenderPipeline(Async)`)\n  .params(\n    kMaximumLimitBaseParams\n      .combine('async', [false, true])\n      .combine('pointList', [false, true])\n      .combine('frontFacing', [false, true])\n      .combine('sampleIndex', [false, true])\n      .combine('sampleMaskIn', [false, true])\n      .combine('sampleMaskOut', [false, true])\n  )\n  .beforeAllSubcases(t => {\n    if (t.isCompatibility && (t.params.sampleMaskIn || t.params.sampleMaskOut)) {\n      t.skip('sample_mask not supported in compatibility mode');\n    }\n  })\n  .fn(async t => {\n    const {\n      limitTest,\n      testValueName,\n      async,\n      pointList,\n      frontFacing,\n      sampleIndex,\n      sampleMaskIn,\n      sampleMaskOut,\n    } = t.params;\n    // Request the largest value of maxInterStageShaderVariables to allow the test using as many\n    // inter-stage shader components as possible without being limited by\n    // maxInterStageShaderVariables.\n    const extraLimits: LimitsRequest = { maxInterStageShaderVariables: 'adapterLimit' };\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, shouldError }) => {\n        const { pipelineDescriptor, code } = getPipelineDescriptor(\n          device,\n          testValue,\n          pointList,\n          frontFacing,\n          sampleIndex,\n          sampleMaskIn,\n          sampleMaskOut\n        );\n\n        await t.testCreateRenderPipeline(pipelineDescriptor, async, shouldError, code);\n      },\n      extraLimits\n    );\n  });\n"],"mappings":";;GAAA,SAASA,KAAK,QAAQ,oCAAoC,CAE1D,SAASC,uBAAuB,EAAiBC,kBAAkB,QAAQ,kBAAkB;;AAE7F,SAASC,uBAAuBA,CAACC,aAAqB,EAAE;EACtD,OAAOA,aAAa,GAAG,CAAC,GAAI,MAAKA,aAAc,GAAE,GAAG,KAAK;AAC3D;;AAEA,SAASC,qBAAqBA;AAC5BC,MAAiB;AACjBC,SAAiB;AACjBC,SAAkB;AAClBC,WAAoB;AACpBC,WAAoB;AACpBC,YAAqB;AACrBC,aAAsB;AAC6C;EACnE,MAAMC,+BAA+B,GAAGN,SAAS,IAAIC,SAAS,GAAG,CAAC,GAAG,CAAC,CAAC;EACvE,MAAMM,gCAAgC;EACpCP,SAAS,IAAIE,WAAW,GAAG,CAAC,GAAG,CAAC,CAAC,IAAIC,WAAW,GAAG,CAAC,GAAG,CAAC,CAAC,IAAIC,YAAY,GAAG,CAAC,GAAG,CAAC,CAAC;;EAEpF,MAAMI,sBAAsB,GAAGT,MAAM,CAACU,MAAM,CAACC,4BAA4B;EACzE,MAAMb,aAAa,GAAGc,IAAI,CAACC,GAAG,CAACN,+BAA+B,EAAEC,gCAAgC,CAAC;;EAEjG,MAAMM,qBAAqB,GAAGF,IAAI,CAACG,KAAK,CAACjB,aAAa,GAAG,CAAC,CAAC;EAC3D,MAAMkB,wBAAwB,GAAGlB,aAAa,GAAG,CAAC;;EAElD,MAAMmB,QAAQ,GAAI;AACpB,QAAQvB,KAAK,CAACoB,qBAAqB,EAAE,CAAAI,CAAC,KAAK,aAAYA,CAAE,QAAOA,CAAE,UAAS,CAAC,CAACC,IAAI,CAAC,IAAI,CAAE;AACxF;EACQH,wBAAwB,GAAG,CAAC;EACvB,aAAYF,qBAAsB,SAAQjB,uBAAuB;IAChEmB;EACF,CAAE,GAAE;EACH;EACN;AACP,GAAG;;EAED,MAAMI,IAAI,GAAI;AAChB,6CAA6CnB,SAAU;AACvD,6CAA6CD,MAAM,CAACU,MAAM,CAACW,6BAA8B;AACzF,6CAA6CvB,aAAc,GAAEI,SAAS,GAAG,eAAe,GAAG,EAAG;AAC9F,6CAA6CJ,aAAc,GAAEK,WAAW,GAAG,iBAAiB,GAAG,EAAG;EAC5FC,WAAW,GAAG,iBAAiB,GAAG;EACnC,GAAEC,YAAY,GAAG,gBAAgB,GAAG,EAAG;AAC5C,6CAA6CE,+BAAgC;AAC7E,6CAA6CC,gCAAiC;AAC9E,6CAA6CC,sBAAuB;AACpE,6CAA6CG,IAAI,CAACU,IAAI,CAACxB,aAAa,GAAG,CAAC,CAAE;AAC1E;AACA;AACA;AACA,QAAQmB,QAAS;AACjB;AACA;AACA,QAAQd,WAAW,GAAG,2CAA2C,GAAG,EAAG;AACvE,QAAQC,WAAW,GAAG,0CAA0C,GAAG,EAAG;AACtE,QAAQC,YAAY,GAAG,wCAAwC,GAAG,EAAG;AACrE,QAAQY,QAAS;AACjB;AACA;AACA;AACA,QAAQX,aAAa,GAAG,wCAAwC,GAAG,EAAG;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;EACD,MAAMiB,MAAM,GAAGvB,MAAM,CAACwB,kBAAkB,CAAC,EAAEJ,IAAI,CAAC,CAAC,CAAC;EAClD,MAAMK,kBAA+C,GAAG;IACtDC,MAAM,EAAE,MAAM;IACdC,SAAS,EAAE;MACTC,QAAQ,EAAE1B,SAAS,GAAG,YAAY,GAAG;IACvC,CAAC;IACD2B,MAAM,EAAE;MACNN,MAAM;MACNO,UAAU,EAAE;IACd,CAAC;IACDC,QAAQ,EAAE;MACRR,MAAM;MACNO,UAAU,EAAE,IAAI;MAChBE,OAAO,EAAE;MACP;QACEC,MAAM,EAAE;MACV,CAAC;;IAEL;EACF,CAAC;EACD,OAAO,EAAER,kBAAkB,EAAEL,IAAI,CAAC,CAAC;AACrC;;AAEA,MAAMc,KAAK,GAAG,+BAA+B;AAC7C,OAAO,MAAM,EAAEC,CAAC,EAAEC,WAAW,CAAC,CAAC,GAAGxC,kBAAkB,CAACsC,KAAK,CAAC;;AAE3DC,CAAC,CAACE,IAAI,CAAC,8BAA8B,CAAC;AACnCC,IAAI,CAAE,0BAAyBJ,KAAM,uCAAsC,CAAC;AAC5EK,MAAM;EACL5C,uBAAuB;EACpB6C,OAAO,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;EAC/BA,OAAO,CAAC,WAAW,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;EACnCA,OAAO,CAAC,aAAa,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;EACrCA,OAAO,CAAC,aAAa,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;EACrCA,OAAO,CAAC,cAAc,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;EACtCA,OAAO,CAAC,eAAe,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;AAC3C,CAAC;AACAC,iBAAiB,CAAC,CAAAC,CAAC,KAAI;EACtB,IAAIA,CAAC,CAACC,eAAe,KAAKD,CAAC,CAACH,MAAM,CAAClC,YAAY,IAAIqC,CAAC,CAACH,MAAM,CAACjC,aAAa,CAAC,EAAE;IAC1EoC,CAAC,CAACE,IAAI,CAAC,iDAAiD,CAAC;EAC3D;AACF,CAAC,CAAC;AACDC,EAAE,CAAC,OAAMH,CAAC,KAAI;EACb,MAAM;IACJI,SAAS;IACTC,aAAa;IACbC,KAAK;IACL9C,SAAS;IACTC,WAAW;IACXC,WAAW;IACXC,YAAY;IACZC;EACF,CAAC,GAAGoC,CAAC,CAACH,MAAM;EACZ;EACA;EACA;EACA,MAAMU,WAA0B,GAAG,EAAEtC,4BAA4B,EAAE,cAAc,CAAC,CAAC;EACnF,MAAM+B,CAAC,CAACQ,oCAAoC;IAC1CJ,SAAS;IACTC,aAAa;IACb,OAAO,EAAE/C,MAAM,EAAEC,SAAS,EAAEkD,WAAW,CAAC,CAAC,KAAK;MAC5C,MAAM,EAAE1B,kBAAkB,EAAEL,IAAI,CAAC,CAAC,GAAGrB,qBAAqB;QACxDC,MAAM;QACNC,SAAS;QACTC,SAAS;QACTC,WAAW;QACXC,WAAW;QACXC,YAAY;QACZC;MACF,CAAC;;MAED,MAAMoC,CAAC,CAACU,wBAAwB,CAAC3B,kBAAkB,EAAEuB,KAAK,EAAEG,WAAW,EAAE/B,IAAI,CAAC;IAChF,CAAC;IACD6B;EACF,CAAC;AACH,CAAC,CAAC"}