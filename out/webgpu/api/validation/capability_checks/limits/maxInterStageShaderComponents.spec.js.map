{"version":3,"file":"maxInterStageShaderComponents.spec.js","names":["range","kMaximumLimitBaseParams","makeLimitTestGroup","getPipelineDescriptor","device","testValue","pointList","frontFacing","sampleIndex","sampleMaskIn","sampleMaskOut","success","limits","maxInterStageShaderComponents","maxVertexOutputComponents","maxFragmentInputComponents","maxOutputComponents","Math","min","maxInterStageVariables","floor","maxUserDefinedVertexComponents","maxUserDefinedFragmentComponents","numInterStageVariables","numUserDefinedComponents","varyings","i","join","code","module","createShaderModule","pipelineDescriptor","layout","primitive","topology","vertex","entryPoint","fragment","targets","format","limit","g","description","test","desc","params","combine","beforeAllSubcases","t","isCompatibility","skipIf","fn","limitTest","testValueName","async","extraLimits","maxInterStageShaderVariables","testDeviceWithRequestedMaximumLimits","shouldError","testCreateRenderPipeline"],"sources":["../../../../../../src/webgpu/api/validation/capability_checks/limits/maxInterStageShaderComponents.spec.ts"],"sourcesContent":["import { range } from '../../../../../common/util/util.js';\n\nimport { kMaximumLimitBaseParams, LimitsRequest, makeLimitTestGroup } from './limit_utils.js';\n\nfunction getPipelineDescriptor(\n  device: GPUDevice,\n  testValue: number,\n  pointList: boolean,\n  frontFacing: boolean,\n  sampleIndex: boolean,\n  sampleMaskIn: boolean,\n  sampleMaskOut: boolean\n): { pipelineDescriptor: GPURenderPipelineDescriptor; code: string } {\n  const success = testValue <= device.limits.maxInterStageShaderComponents;\n\n  const maxVertexOutputComponents =\n    device.limits.maxInterStageShaderComponents - (pointList ? 1 : 0);\n  const maxFragmentInputComponents =\n    device.limits.maxInterStageShaderComponents -\n    (frontFacing ? 1 : 0) -\n    (sampleIndex ? 1 : 0) -\n    (sampleMaskIn ? 1 : 0);\n  const maxOutputComponents = Math.min(maxVertexOutputComponents, maxFragmentInputComponents);\n  const maxInterStageVariables = Math.floor(maxOutputComponents / 4);\n  const maxUserDefinedVertexComponents = Math.floor(maxVertexOutputComponents / 4) * 4;\n  const maxUserDefinedFragmentComponents = Math.floor(maxFragmentInputComponents / 4) * 4;\n\n  const numInterStageVariables = success ? maxInterStageVariables : maxInterStageVariables + 1;\n  const numUserDefinedComponents = numInterStageVariables * 4;\n\n  const varyings = `\n      ${range(numInterStageVariables, i => `@location(${i}) v4_${i}: vec4f,`).join('\\n')}\n  `;\n\n  const code = `\n    // test value                        : ${testValue}\n    // maxInterStageShaderComponents     : ${device.limits.maxInterStageShaderComponents}\n    // num components in vertex shader   : ${numUserDefinedComponents}${\n      pointList ? ' + point-list' : ''\n    }\n    // num components in fragment shader : ${numUserDefinedComponents}${\n      frontFacing ? ' + front-facing' : ''\n    }${sampleIndex ? ' + sample_index' : ''}${sampleMaskIn ? ' + sample_mask' : ''}\n    // maxUserDefinedVertexShaderOutputComponents   : ${maxUserDefinedVertexComponents}\n    // maxUserDefinedFragmentShaderInputComponents  : ${maxUserDefinedFragmentComponents}\n    // maxInterStageVariables:           : ${maxInterStageVariables}\n    // num used inter stage variables    : ${numInterStageVariables}\n\n    struct VSOut {\n      @builtin(position) p: vec4f,\n      ${varyings}\n    }\n    struct FSIn {\n      ${frontFacing ? '@builtin(front_facing) frontFacing: bool,' : ''}\n      ${sampleIndex ? '@builtin(sample_index) sampleIndex: u32,' : ''}\n      ${sampleMaskIn ? '@builtin(sample_mask) sampleMask: u32,' : ''}\n      ${varyings}\n    }\n    struct FSOut {\n      @location(0) color: vec4f,\n      ${sampleMaskOut ? '@builtin(sample_mask) sampleMask: u32,' : ''}\n    }\n    @vertex fn vs() -> VSOut {\n      var o: VSOut;\n      o.p = vec4f(0);\n      return o;\n    }\n    @fragment fn fs(i: FSIn) -> FSOut {\n      var o: FSOut;\n      o.color = vec4f(0);\n      return o;\n    }\n  `;\n  const module = device.createShaderModule({ code });\n  const pipelineDescriptor: GPURenderPipelineDescriptor = {\n    layout: 'auto',\n    primitive: {\n      topology: pointList ? 'point-list' : 'triangle-list',\n    },\n    vertex: {\n      module,\n      entryPoint: 'vs',\n    },\n    fragment: {\n      module,\n      entryPoint: 'fs',\n      targets: [\n        {\n          format: 'rgba8unorm',\n        },\n      ],\n    },\n  };\n  return { pipelineDescriptor, code };\n}\n\nconst limit = 'maxInterStageShaderComponents';\nexport const { g, description } = makeLimitTestGroup(limit);\n\ng.test('createRenderPipeline,at_over')\n  .desc(`Test using at and over ${limit} limit in createRenderPipeline(Async)`)\n  .params(\n    kMaximumLimitBaseParams\n      .combine('async', [false, true])\n      .combine('pointList', [false, true])\n      .combine('frontFacing', [false, true])\n      .combine('sampleIndex', [false, true])\n      .combine('sampleMaskIn', [false, true])\n      .combine('sampleMaskOut', [false, true])\n  )\n  .beforeAllSubcases(t => {\n    if (t.isCompatibility) {\n      t.skipIf(\n        t.params.sampleMaskIn || t.params.sampleMaskOut,\n        'sample_mask not supported in compatibility mode'\n      );\n      t.skipIf(t.params.sampleIndex, 'sample_index not supported in compatibility mode');\n    }\n  })\n  .fn(async t => {\n    const {\n      limitTest,\n      testValueName,\n      async,\n      pointList,\n      frontFacing,\n      sampleIndex,\n      sampleMaskIn,\n      sampleMaskOut,\n    } = t.params;\n    // Request the largest value of maxInterStageShaderVariables to allow the test using as many\n    // inter-stage shader components as possible without being limited by\n    // maxInterStageShaderVariables.\n    const extraLimits: LimitsRequest = { maxInterStageShaderVariables: 'adapterLimit' };\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, shouldError }) => {\n        const { pipelineDescriptor, code } = getPipelineDescriptor(\n          device,\n          testValue,\n          pointList,\n          frontFacing,\n          sampleIndex,\n          sampleMaskIn,\n          sampleMaskOut\n        );\n\n        await t.testCreateRenderPipeline(pipelineDescriptor, async, shouldError, code);\n      },\n      extraLimits\n    );\n  });\n"],"mappings":"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"}