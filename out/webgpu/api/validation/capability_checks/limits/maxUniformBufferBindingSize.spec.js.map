{"version":3,"file":"maxUniformBufferBindingSize.spec.js","names":["kMaximumLimitBaseParams","makeLimitTestGroup","kBufferParts","getSizeAndOffsetForBufferPart","device","bufferPart","size","align","limits","minUniformBufferOffsetAlignment","offset","limit","g","description","kExtraLimits","maxBufferSize","test","desc","params","combine","fn","t","limitTest","testValueName","testDeviceWithRequestedMaximumLimits","testValue","shouldError","bindGroupLayout","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","VERTEX","buffer","pushErrorScope","uniformBuffer","trackForCleanup","createBuffer","usage","GPUBufferUsage","UNIFORM","outOfMemoryError","popErrorScope","expectValidationError","createBindGroup","layout","resource","adapter","defaultLimit","adapterLimit","expect","getDefaultLimit"],"sources":["../../../../../../src/webgpu/api/validation/capability_checks/limits/maxUniformBufferBindingSize.spec.ts"],"sourcesContent":["import { LimitMode, kMaximumLimitBaseParams, makeLimitTestGroup } from './limit_utils.js';\n\nconst kBufferParts = ['wholeBuffer', 'biggerBufferWithOffset'] as const;\ntype BufferPart = (typeof kBufferParts)[number];\n\nfunction getSizeAndOffsetForBufferPart(device: GPUDevice, bufferPart: BufferPart, size: number) {\n  const align = device.limits.minUniformBufferOffsetAlignment;\n  switch (bufferPart) {\n    case 'wholeBuffer':\n      return { offset: 0, size };\n    case 'biggerBufferWithOffset':\n      return { size: size + align, offset: align };\n  }\n}\n\nconst limit = 'maxUniformBufferBindingSize';\nexport const { g, description } = makeLimitTestGroup(limit);\n\n// We also need to update the maxBufferSize limit when testing.\nconst kExtraLimits = { maxBufferSize: 'maxLimit' as LimitMode };\n\ng.test('createBindGroup,at_over')\n  .desc(`Test using at and over ${limit} limit`)\n  .params(kMaximumLimitBaseParams.combine('bufferPart', kBufferParts))\n  .fn(async t => {\n    const { limitTest, testValueName, bufferPart } = t.params;\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, shouldError }) => {\n        const bindGroupLayout = device.createBindGroupLayout({\n          entries: [\n            {\n              binding: 0,\n              visibility: GPUShaderStage.VERTEX,\n              buffer: {},\n            },\n          ],\n        });\n\n        const { size, offset } = getSizeAndOffsetForBufferPart(device, bufferPart, testValue);\n\n        // If the size of the buffer exceeds the related but separate maxBufferSize limit, we can\n        // skip the validation since the allocation will fail with a validation error.\n        if (size > device.limits.maxBufferSize) {\n          return;\n        }\n\n        device.pushErrorScope('out-of-memory');\n        const uniformBuffer = t.trackForCleanup(\n          device.createBuffer({\n            usage: GPUBufferUsage.UNIFORM,\n            size,\n          })\n        );\n        const outOfMemoryError = await device.popErrorScope();\n\n        if (!outOfMemoryError) {\n          await t.expectValidationError(\n            () => {\n              device.createBindGroup({\n                layout: bindGroupLayout,\n                entries: [\n                  {\n                    binding: 0,\n                    resource: {\n                      buffer: uniformBuffer,\n                      offset,\n                      size: testValue,\n                    },\n                  },\n                ],\n              });\n            },\n            shouldError,\n            `size: ${size}, offset: ${offset}, testValue: ${testValue}`\n          );\n        }\n      },\n      kExtraLimits\n    );\n  });\n\ng.test('validate,maxBufferSize')\n  .desc(`Test that ${limit} <= maxBufferSize`)\n  .fn(t => {\n    const { adapter, defaultLimit, adapterLimit } = t;\n    t.expect(defaultLimit <= t.getDefaultLimit('maxBufferSize'));\n    t.expect(adapterLimit <= adapter.limits.maxBufferSize);\n  });\n"],"mappings":"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"}