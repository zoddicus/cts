{"version":3,"file":"maxComputeWorkgroupsPerDimension.spec.js","names":["kMaximumLimitBaseParams","makeLimitTestGroup","limit","g","description","kCreateComputePipelineTypes","createComputePipeline","device","descriptor","pipelineType","createComputePipelineAsync","test","desc","params","combine","fn","t","limitTest","testValueName","axis","testDeviceWithRequestedMaximumLimits","testValue","shouldError","counts","buffer","createBuffer","size","usage","GPUBufferUsage","STORAGE","module","createShaderModule","code","pipeline","layout","compute","entryPoint","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","dispatchWorkgroups","end","expectValidationError","finish","destroy","adapter","defaultLimit","adapterLimit","defaultMaxComputeWorkgroupSizeProduct","getDefaultLimit","maxComputeWorkgroupSizeProduct","limits","maxComputeWorkgroupSizeX","maxComputeWorkgroupSizeY","maxComputeWorkgroupSizeZ","expect"],"sources":["../../../../../../src/webgpu/api/validation/capability_checks/limits/maxComputeWorkgroupsPerDimension.spec.ts"],"sourcesContent":["import { kMaximumLimitBaseParams, makeLimitTestGroup } from './limit_utils.js';\n\nconst limit = 'maxComputeWorkgroupsPerDimension';\nexport const { g, description } = makeLimitTestGroup(limit);\n\nconst kCreateComputePipelineTypes = [\n  'createComputePipeline',\n  'createComputePipelineAsync',\n] as const;\ntype CreateComputePipelineType = (typeof kCreateComputePipelineTypes)[number];\n\nasync function createComputePipeline(\n  device: GPUDevice,\n  descriptor: GPUComputePipelineDescriptor,\n  pipelineType: CreateComputePipelineType\n) {\n  switch (pipelineType) {\n    case 'createComputePipeline':\n      return device.createComputePipeline(descriptor);\n    case 'createComputePipelineAsync':\n      return await device.createComputePipelineAsync(descriptor);\n  }\n}\n\n// Note: dispatchWorkgroupsIndirect is not tested because it's not a validation error if that exceeds the limits\ng.test('dispatchWorkgroups,at_over')\n  .desc(`Test using dispatchWorkgroups at and over ${limit} limit`)\n  .params(\n    kMaximumLimitBaseParams\n      .combine('pipelineType', kCreateComputePipelineTypes)\n      .combine('axis', [0, 1, 2])\n  )\n  .fn(async t => {\n    const { limitTest, testValueName, pipelineType, axis } = t.params;\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, shouldError }) => {\n        const counts = [1, 1, 1];\n        counts[axis] = testValue;\n\n        const buffer = device.createBuffer({\n          size: 16,\n          usage: GPUBufferUsage.STORAGE,\n        });\n\n        const module = device.createShaderModule({\n          code: `\n          @compute @workgroup_size(1) fn main() {\n          }\n          `,\n        });\n\n        const pipeline = await createComputePipeline(\n          device,\n          {\n            layout: 'auto',\n            compute: {\n              module,\n              entryPoint: 'main',\n            },\n          },\n          pipelineType\n        );\n\n        const encoder = device.createCommandEncoder();\n        const pass = encoder.beginComputePass();\n        pass.setPipeline(pipeline);\n        pass.dispatchWorkgroups(counts[0], counts[1], counts[2]);\n        pass.end();\n\n        await t.expectValidationError(() => {\n          encoder.finish();\n        }, shouldError);\n\n        buffer.destroy();\n      }\n    );\n  });\n\ng.test('validate')\n  .desc(\n    `Test that ${limit} <= maxComputeWorkgroupSizeX x maxComputeWorkgroupSizeY x maxComputeWorkgroupSizeZ`\n  )\n  .fn(t => {\n    const { adapter, defaultLimit, adapterLimit } = t;\n    const defaultMaxComputeWorkgroupSizeProduct =\n      t.getDefaultLimit('maxComputeWorkgroupSizeX') *\n      t.getDefaultLimit('maxComputeWorkgroupSizeY') *\n      t.getDefaultLimit('maxComputeWorkgroupSizeZ');\n    const maxComputeWorkgroupSizeProduct =\n      adapter.limits.maxComputeWorkgroupSizeX *\n      adapter.limits.maxComputeWorkgroupSizeY *\n      adapter.limits.maxComputeWorkgroupSizeZ;\n    t.expect(defaultLimit <= defaultMaxComputeWorkgroupSizeProduct);\n    t.expect(adapterLimit <= maxComputeWorkgroupSizeProduct);\n  });\n"],"mappings":"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"}