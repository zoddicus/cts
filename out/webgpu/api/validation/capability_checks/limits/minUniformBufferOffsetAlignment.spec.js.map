{"version":3,"file":"minUniformBufferOffsetAlignment.spec.js","names":["GPUConst","isPowerOfTwo","kMinimumLimitBaseParams","makeLimitTestGroup","getDeviceLimitToRequest","limitValueTest","defaultLimit","minimumLimit","Math","log2","min","getTestValue","testValueName","requestedLimit","getDeviceLimitToRequestAndValueToTest","maximumLimit","testValue","limit","g","description","test","desc","params","fn","t","limitTest","adapterLimit","testDeviceWithSpecificLimits","device","shouldError","buffer","trackForCleanup","createBuffer","size","usage","GPUBufferUsage","UNIFORM","layout","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","COMPUTE","expectValidationError","createBindGroup","resource","offset","ShaderStage","type","hasDynamicOffset","bindGroup","encoder","createCommandEncoder","pass","beginComputePass","setBindGroup","end","finish","destroy","expect"],"sources":["../../../../../../src/webgpu/api/validation/capability_checks/limits/minUniformBufferOffsetAlignment.spec.ts"],"sourcesContent":["import { GPUConst } from '../../../../constants.js';\nimport { isPowerOfTwo } from '../../../../util/math.js';\n\nimport {\n  kMinimumLimitBaseParams,\n  makeLimitTestGroup,\n  MinimumLimitValueTest,\n  MinimumTestValue,\n} from './limit_utils.js';\n\nfunction getDeviceLimitToRequest(\n  limitValueTest: MinimumLimitValueTest,\n  defaultLimit: number,\n  minimumLimit: number\n) {\n  switch (limitValueTest) {\n    case 'atDefault':\n      return defaultLimit;\n    case 'overDefault':\n      return 2 ** (Math.log2(defaultLimit) + 1);\n    case 'betweenDefaultAndMinimum':\n      return Math.min(\n        minimumLimit,\n        2 ** (((Math.log2(defaultLimit) + Math.log2(minimumLimit)) / 2) | 0)\n      );\n    case 'atMinimum':\n      return minimumLimit;\n    case 'underMinimum':\n      return 2 ** (Math.log2(minimumLimit) - 1);\n  }\n}\n\nfunction getTestValue(testValueName: MinimumTestValue, requestedLimit: number) {\n  switch (testValueName) {\n    case 'atLimit':\n      return requestedLimit;\n    case 'underLimit':\n      return 2 ** (Math.log2(requestedLimit) - 1);\n  }\n}\n\nfunction getDeviceLimitToRequestAndValueToTest(\n  limitValueTest: MinimumLimitValueTest,\n  testValueName: MinimumTestValue,\n  defaultLimit: number,\n  maximumLimit: number\n) {\n  const requestedLimit = getDeviceLimitToRequest(limitValueTest, defaultLimit, maximumLimit);\n  return {\n    requestedLimit,\n    testValue: getTestValue(testValueName, requestedLimit),\n  };\n}\n\nconst limit = 'minUniformBufferOffsetAlignment';\nexport const { g, description } = makeLimitTestGroup(limit);\n\ng.test('createBindGroup,at_over')\n  .desc(`Test using createBindGroup at and over ${limit} limit`)\n  .params(kMinimumLimitBaseParams)\n  .fn(async t => {\n    const { limitTest, testValueName } = t.params;\n    // note: LimitTest.maximum is the adapter.limits[limit] value\n    const { defaultLimit, adapterLimit: minimumLimit } = t;\n    const { requestedLimit, testValue } = getDeviceLimitToRequestAndValueToTest(\n      limitTest,\n      testValueName,\n      defaultLimit,\n      minimumLimit\n    );\n\n    await t.testDeviceWithSpecificLimits(\n      requestedLimit,\n      testValue,\n      async ({ device, testValue, shouldError }) => {\n        const buffer = t.trackForCleanup(\n          device.createBuffer({\n            size: testValue * 2,\n            usage: GPUBufferUsage.UNIFORM,\n          })\n        );\n\n        const layout = device.createBindGroupLayout({\n          entries: [\n            {\n              binding: 0,\n              visibility: GPUShaderStage.COMPUTE,\n              buffer: {},\n            },\n          ],\n        });\n\n        await t.expectValidationError(() => {\n          device.createBindGroup({\n            layout,\n            entries: [\n              {\n                binding: 0,\n                resource: {\n                  buffer,\n                  offset: testValue,\n                },\n              },\n            ],\n          });\n        }, shouldError);\n      }\n    );\n  });\n\ng.test('setBindGroup,at_over')\n  .desc(`Test using setBindGroup at and over ${limit} limit`)\n  .params(kMinimumLimitBaseParams)\n  .fn(async t => {\n    const { limitTest, testValueName } = t.params;\n    // note: LimitTest.maximum is the adapter.limits[limit] value\n    const { defaultLimit, adapterLimit: minimumLimit } = t;\n    const { requestedLimit, testValue } = getDeviceLimitToRequestAndValueToTest(\n      limitTest,\n      testValueName,\n      defaultLimit,\n      minimumLimit\n    );\n\n    await t.testDeviceWithSpecificLimits(\n      requestedLimit,\n      testValue,\n      async ({ device, testValue, shouldError }) => {\n        const buffer = device.createBuffer({\n          size: testValue * 2,\n          usage: GPUBufferUsage.UNIFORM,\n        });\n\n        const layout = device.createBindGroupLayout({\n          entries: [\n            {\n              binding: 0,\n              visibility: GPUConst.ShaderStage.COMPUTE,\n              buffer: {\n                type: 'uniform',\n                hasDynamicOffset: true,\n              },\n            },\n          ],\n        });\n\n        const bindGroup = device.createBindGroup({\n          layout,\n          entries: [\n            {\n              binding: 0,\n              resource: {\n                buffer,\n                size: testValue / 2,\n              },\n            },\n          ],\n        });\n\n        const encoder = device.createCommandEncoder();\n        const pass = encoder.beginComputePass();\n        pass.setBindGroup(0, bindGroup, [testValue]);\n        pass.end();\n\n        await t.expectValidationError(() => {\n          encoder.finish();\n        }, shouldError);\n\n        buffer.destroy();\n      }\n    );\n  });\n\ng.test('validate,powerOf2')\n  .desc('Verify that ${limit} is power of 2')\n  .fn(t => {\n    t.expect(isPowerOfTwo(t.defaultLimit));\n    t.expect(isPowerOfTwo(t.adapterLimit));\n  });\n\ng.test('validate,greaterThanOrEqualTo32')\n  .desc('Verify that ${limit} is >= 32')\n  .fn(t => {\n    t.expect(t.defaultLimit >= 32);\n    t.expect(t.adapterLimit >= 32);\n  });\n"],"mappings":"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"}