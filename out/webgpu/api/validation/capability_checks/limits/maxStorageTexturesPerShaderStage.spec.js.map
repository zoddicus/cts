{"version":3,"file":"maxStorageTexturesPerShaderStage.spec.js","names":["range","reorder","kReorderOrderKeys","GPUConst","kMaximumLimitBaseParams","makeLimitTestGroup","kBindGroupTests","getPerStageWGSLForBindingCombinationStorageTextures","getPipelineTypeForBindingCombination","limit","g","description","createBindGroupLayout","device","visibility","order","numBindings","entries","i","binding","storageTexture","format","test","desc","params","combine","ShaderStage","FRAGMENT","COMPUTE","fn","t","limitTest","testValueName","testDeviceWithRequestedMaximumLimits","testValue","shouldError","expectValidationError","kNumGroups","bindGroupLayouts","minInGroup","Math","floor","numInGroup","createPipelineLayout","async","bindingCombination","bindGroupTest","pipelineType","actualLimit","code","j","module","createShaderModule","testCreatePipeline"],"sources":["../../../../../../src/webgpu/api/validation/capability_checks/limits/maxStorageTexturesPerShaderStage.spec.ts"],"sourcesContent":["import {\n  range,\n  reorder,\n  ReorderOrder,\n  kReorderOrderKeys,\n} from '../../../../../common/util/util.js';\nimport { GPUConst } from '../../../../constants.js';\n\nimport {\n  kMaximumLimitBaseParams,\n  makeLimitTestGroup,\n  kBindGroupTests,\n  getPerStageWGSLForBindingCombinationStorageTextures,\n  getPipelineTypeForBindingCombination,\n  BindingCombination,\n} from './limit_utils.js';\n\nconst limit = 'maxStorageTexturesPerShaderStage';\nexport const { g, description } = makeLimitTestGroup(limit);\n\nfunction createBindGroupLayout(\n  device: GPUDevice,\n  visibility: number,\n  order: ReorderOrder,\n  numBindings: number\n) {\n  return device.createBindGroupLayout({\n    entries: reorder(\n      order,\n      range(numBindings, i => ({\n        binding: i,\n        visibility,\n        storageTexture: { format: 'rgba8unorm' },\n      }))\n    ),\n  });\n}\n\ng.test('createBindGroupLayout,at_over')\n  .desc(\n    `\n  Test using at and over ${limit} limit in createBindGroupLayout\n\n  Note: We also test order to make sure the implementation isn't just looking\n  at just the last entry.\n  `\n  )\n  .params(\n    kMaximumLimitBaseParams\n      .combine('visibility', [\n        GPUConst.ShaderStage.FRAGMENT,\n        GPUConst.ShaderStage.COMPUTE,\n        GPUConst.ShaderStage.FRAGMENT | GPUConst.ShaderStage.COMPUTE,\n      ])\n      .combine('order', kReorderOrderKeys)\n  )\n  .fn(async t => {\n    const { limitTest, testValueName, visibility, order } = t.params;\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, shouldError }) => {\n        await t.expectValidationError(\n          () => createBindGroupLayout(device, visibility, order, testValue),\n          shouldError\n        );\n      }\n    );\n  });\n\ng.test('createPipelineLayout,at_over')\n  .desc(\n    `\n  Test using at and over ${limit} limit in createPipelineLayout\n\n  Note: We also test order to make sure the implementation isn't just looking\n  at just the last entry.\n  `\n  )\n  .params(\n    kMaximumLimitBaseParams\n      .combine('visibility', [\n        GPUConst.ShaderStage.FRAGMENT,\n        GPUConst.ShaderStage.COMPUTE,\n        GPUConst.ShaderStage.FRAGMENT | GPUConst.ShaderStage.COMPUTE,\n      ])\n      .combine('order', kReorderOrderKeys)\n  )\n  .fn(async t => {\n    const { limitTest, testValueName, visibility, order } = t.params;\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, shouldError }) => {\n        const kNumGroups = 3;\n        const bindGroupLayouts = range(kNumGroups, i => {\n          const minInGroup = Math.floor(testValue / kNumGroups);\n          const numInGroup = i ? minInGroup : testValue - minInGroup * (kNumGroups - 1);\n          return createBindGroupLayout(device, visibility, order, numInGroup);\n        });\n        await t.expectValidationError(\n          () => device.createPipelineLayout({ bindGroupLayouts }),\n          shouldError\n        );\n      }\n    );\n  });\n\ng.test('createPipeline,at_over')\n  .desc(\n    `\n  Test using createRenderPipeline(Async) and createComputePipeline(Async) at and over ${limit} limit\n\n  Note: We also test order to make sure the implementation isn't just looking\n  at just the last entry.\n  `\n  )\n  .params(\n    kMaximumLimitBaseParams\n      .combine('async', [false, true] as const)\n      .combine('bindingCombination', ['fragment', 'compute'] as BindingCombination[])\n      .combine('order', kReorderOrderKeys)\n      .combine('bindGroupTest', kBindGroupTests)\n  )\n  .fn(async t => {\n    const { limitTest, testValueName, async, bindingCombination, order, bindGroupTest } = t.params;\n    const pipelineType = getPipelineTypeForBindingCombination(bindingCombination);\n\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, actualLimit, shouldError }) => {\n        if (bindingCombination === 'fragment') {\n          return;\n        }\n\n        const code = getPerStageWGSLForBindingCombinationStorageTextures(\n          bindingCombination,\n          order,\n          bindGroupTest,\n          (i, j) => `var u${j}_${i}: texture_storage_2d<rgba8unorm, write>`,\n          (i, j) => `textureStore(u${j}_${i}, vec2u(0), vec4f(1));`,\n          testValue\n        );\n        const module = device.createShaderModule({ code });\n\n        await t.testCreatePipeline(\n          pipelineType,\n          async,\n          module,\n          shouldError,\n          `actualLimit: ${actualLimit}, testValue: ${testValue}\\n:${code}`\n        );\n      }\n    );\n  });\n"],"mappings":"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"}