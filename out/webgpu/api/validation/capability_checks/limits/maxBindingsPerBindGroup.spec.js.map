{"version":3,"file":"maxBindingsPerBindGroup.spec.js","names":["kCreatePipelineTypes","kMaximumLimitBaseParams","makeLimitTestGroup","limit","g","description","test","desc","params","fn","t","limitTest","testValueName","testDeviceWithRequestedMaximumLimits","device","testValue","shouldError","expectValidationError","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","VERTEX","buffer","combine","createPipelineType","async","lastIndex","code","getBindingIndexWGSLForPipelineType","module","createShaderModule","testCreatePipeline","adapter","adapterLimit","maxBindingsPerShaderStage","limits","maxSampledTexturesPerShaderStage","maxSamplersPerShaderStage","maxStorageBuffersPerShaderStage","maxStorageTexturesPerShaderStage","maxUniformBuffersPerShaderStage","maxShaderStagesPerPipeline","minMaxBindingsPerBindGroup","expect"],"sources":["../../../../../../src/webgpu/api/validation/capability_checks/limits/maxBindingsPerBindGroup.spec.ts"],"sourcesContent":["import {\n  kCreatePipelineTypes,\n  kMaximumLimitBaseParams,\n  makeLimitTestGroup,\n} from './limit_utils.js';\n\nconst limit = 'maxBindingsPerBindGroup';\nexport const { g, description } = makeLimitTestGroup(limit);\n\ng.test('createBindGroupLayout,at_over')\n  .desc(`Test using createBindGroupLayout at and over ${limit} limit`)\n  .params(kMaximumLimitBaseParams)\n  .fn(async t => {\n    const { limitTest, testValueName } = t.params;\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, shouldError }) => {\n        await t.expectValidationError(() => {\n          device.createBindGroupLayout({\n            entries: [\n              {\n                binding: testValue - 1,\n                visibility: GPUShaderStage.VERTEX,\n                buffer: {},\n              },\n            ],\n          });\n        }, shouldError);\n      }\n    );\n  });\n\ng.test('createPipeline,at_over')\n  .desc(\n    `Test using createRenderPipeline(Async) and createComputePipeline(Async) at and over ${limit} limit`\n  )\n  .params(\n    kMaximumLimitBaseParams\n      .combine('createPipelineType', kCreatePipelineTypes)\n      .combine('async', [false, true] as const)\n  )\n  .fn(async t => {\n    const { limitTest, testValueName, createPipelineType, async } = t.params;\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, shouldError }) => {\n        const lastIndex = testValue - 1;\n\n        const code = t.getBindingIndexWGSLForPipelineType(createPipelineType, lastIndex);\n        const module = device.createShaderModule({ code });\n\n        await t.testCreatePipeline(createPipelineType, async, module, shouldError, code);\n      }\n    );\n  });\n\ng.test('validate')\n  .desc(`Test ${limit} matches the spec limits`)\n  .fn(t => {\n    const { adapter, adapterLimit } = t;\n    const maxBindingsPerShaderStage =\n      adapter.limits.maxSampledTexturesPerShaderStage +\n      adapter.limits.maxSamplersPerShaderStage +\n      adapter.limits.maxStorageBuffersPerShaderStage +\n      adapter.limits.maxStorageTexturesPerShaderStage +\n      adapter.limits.maxUniformBuffersPerShaderStage;\n    const maxShaderStagesPerPipeline = 2;\n    const minMaxBindingsPerBindGroup = maxBindingsPerShaderStage * maxShaderStagesPerPipeline;\n    t.expect(\n      adapterLimit >= minMaxBindingsPerBindGroup,\n      `maxBindingsPerBindGroup(${adapterLimit}) >= maxBindingsPerShaderStage(${maxBindingsPerShaderStage}) * maxShaderStagesPerPipeline(${maxShaderStagesPerPipeline} = (${minMaxBindingsPerBindGroup}))`\n    );\n  });\n"],"mappings":"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"}