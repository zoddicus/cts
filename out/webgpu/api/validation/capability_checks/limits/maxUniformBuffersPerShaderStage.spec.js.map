{"version":3,"file":"maxUniformBuffersPerShaderStage.spec.js","names":["range","reorder","kReorderOrderKeys","assert","kShaderStageCombinationsWithStage","kMaximumLimitBaseParams","makeLimitTestGroup","kBindGroupTests","kBindingCombinations","getPipelineTypeForBindingCombination","getPerStageWGSLForBindingCombination","kExtraLimits","maxBindingsPerBindGroup","maxBindGroups","limit","g","description","createBindGroupLayout","device","visibility","order","numBindings","entries","i","binding","buffer","test","desc","params","combine","fn","t","limitTest","testValueName","testDeviceWithRequestedMaximumLimits","testValue","shouldError","skipIf","adapter","limits","expectValidationError","actualLimit","Math","min","kNumGroups","ceil","bindGroupLayouts","numInGroup","createPipelineLayout","async","bindingCombination","bindGroupTest","pipelineType","code","j","module","createShaderModule","testCreatePipeline"],"sources":["../../../../../../src/webgpu/api/validation/capability_checks/limits/maxUniformBuffersPerShaderStage.spec.ts"],"sourcesContent":["import {\n  range,\n  reorder,\n  kReorderOrderKeys,\n  ReorderOrder,\n  assert,\n} from '../../../../../common/util/util.js';\nimport { kShaderStageCombinationsWithStage } from '../../../../capability_info.js';\n\nimport {\n  kMaximumLimitBaseParams,\n  makeLimitTestGroup,\n  kBindGroupTests,\n  kBindingCombinations,\n  getPipelineTypeForBindingCombination,\n  getPerStageWGSLForBindingCombination,\n  LimitsRequest,\n} from './limit_utils.js';\n\nconst kExtraLimits: LimitsRequest = {\n  maxBindingsPerBindGroup: 'adapterLimit',\n  maxBindGroups: 'adapterLimit',\n};\n\nconst limit = 'maxUniformBuffersPerShaderStage';\nexport const { g, description } = makeLimitTestGroup(limit);\n\nfunction createBindGroupLayout(\n  device: GPUDevice,\n  visibility: number,\n  order: ReorderOrder,\n  numBindings: number\n) {\n  return device.createBindGroupLayout({\n    entries: reorder(\n      order,\n      range(numBindings, i => ({\n        binding: i,\n        visibility,\n        buffer: {},\n      }))\n    ),\n  });\n}\n\ng.test('createBindGroupLayout,at_over')\n  .desc(\n    `\n  Test using at and over ${limit} limit in createBindGroupLayout\n\n  Note: We also test order to make sure the implementation isn't just looking\n  at just the last entry.\n  `\n  )\n  .params(\n    kMaximumLimitBaseParams\n      .combine('visibility', kShaderStageCombinationsWithStage)\n      .combine('order', kReorderOrderKeys)\n  )\n  .fn(async t => {\n    const { limitTest, testValueName, visibility, order } = t.params;\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, shouldError }) => {\n        t.skipIf(\n          t.adapter.limits.maxBindingsPerBindGroup < testValue,\n          `maxBindingsPerBindGroup = ${t.adapter.limits.maxBindingsPerBindGroup} which is less than ${testValue}`\n        );\n\n        await t.expectValidationError(\n          () => createBindGroupLayout(device, visibility, order, testValue),\n          shouldError\n        );\n      },\n      kExtraLimits\n    );\n  });\n\ng.test('createPipelineLayout,at_over')\n  .desc(\n    `\n  Test using at and over ${limit} limit in createPipelineLayout\n\n  Note: We also test order to make sure the implementation isn't just looking\n  at just the last entry.\n  `\n  )\n  .params(\n    kMaximumLimitBaseParams\n      .combine('visibility', kShaderStageCombinationsWithStage)\n      .combine('order', kReorderOrderKeys)\n  )\n  .fn(async t => {\n    const { limitTest, testValueName, visibility, order } = t.params;\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, shouldError, actualLimit }) => {\n        const maxBindingsPerBindGroup = Math.min(\n          t.device.limits.maxBindingsPerBindGroup,\n          actualLimit\n        );\n        const kNumGroups = Math.ceil(testValue / maxBindingsPerBindGroup);\n\n        // Not sure what to do in this case but best we get notified if it happens.\n        assert(kNumGroups <= t.device.limits.maxBindGroups);\n\n        const bindGroupLayouts = range(kNumGroups, i => {\n          const numInGroup = Math.min(\n            testValue - i * maxBindingsPerBindGroup,\n            maxBindingsPerBindGroup\n          );\n          return createBindGroupLayout(device, visibility, order, numInGroup);\n        });\n\n        await t.expectValidationError(\n          () => device.createPipelineLayout({ bindGroupLayouts }),\n          shouldError\n        );\n      },\n      kExtraLimits\n    );\n  });\n\ng.test('createPipeline,at_over')\n  .desc(\n    `\n  Test using createRenderPipeline(Async) and createComputePipeline(Async) at and over ${limit} limit\n\n  Note: We also test order to make sure the implementation isn't just looking\n  at just the last entry.\n  `\n  )\n  .params(\n    kMaximumLimitBaseParams\n      .combine('async', [false, true] as const)\n      .combine('bindingCombination', kBindingCombinations)\n      .combine('order', kReorderOrderKeys)\n      .combine('bindGroupTest', kBindGroupTests)\n  )\n  .fn(async t => {\n    const { limitTest, testValueName, async, bindingCombination, order, bindGroupTest } = t.params;\n    const pipelineType = getPipelineTypeForBindingCombination(bindingCombination);\n\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, actualLimit, shouldError }) => {\n        t.skipIf(\n          bindGroupTest === 'sameGroup' && testValue > device.limits.maxBindingsPerBindGroup,\n          `can not test ${testValue} bindings in same group because maxBindingsPerBindGroup = ${device.limits.maxBindingsPerBindGroup}`\n        );\n\n        const code = getPerStageWGSLForBindingCombination(\n          bindingCombination,\n          order,\n          bindGroupTest,\n          (i, j) => `var<uniform> u${j}_${i}: f32`,\n          (i, j) => `_ = u${j}_${i};`,\n          device.limits.maxBindGroups,\n          testValue\n        );\n        const module = device.createShaderModule({ code });\n\n        await t.testCreatePipeline(\n          pipelineType,\n          async,\n          module,\n          shouldError,\n          `actualLimit: ${actualLimit}, testValue: ${testValue}\\n:${code}`\n        );\n      },\n      kExtraLimits\n    );\n  });\n"],"mappings":"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"}