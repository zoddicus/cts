{"version":3,"file":"clip_distances.spec.js","names":["range","align","kMaximumLimitBaseParams","makeLimitTestGroup","getPipelineDescriptorWithClipDistances","device","interStageShaderVariables","pointList","clipDistances","startLocation","vertexOutputVariables","maxVertexOutputVariables","limits","maxInterStageShaderVariables","varyings","i","join","code","module","createShaderModule","pipelineDescriptor","layout","primitive","topology","vertex","fragment","targets","format","limit","g","description","test","desc","params","combine","beforeAllSubcases","t","selectDeviceOrSkipTestCase","fn","limitTest","testValueName","async","testDeviceWithRequestedMaximumLimits","testValue","shouldError","testCreateRenderPipeline","undefined","u","adapter","deviceInTest","requestDeviceTracked","requiredFeatures","requiredLimits","maxLocationInTest","maxAllowedLocation","pushErrorScope","createRenderPipeline","error","popErrorScope","expect","message","destroy"],"sources":["../../../../../../src/webgpu/api/validation/capability_checks/features/clip_distances.spec.ts"],"sourcesContent":["import { range } from '../../../../../common/util/util.js';\nimport { align } from '../../../../util/math.js';\nimport { kMaximumLimitBaseParams, makeLimitTestGroup } from '../limits/limit_utils.js';\n\nfunction getPipelineDescriptorWithClipDistances(\n  device: GPUDevice,\n  interStageShaderVariables: number,\n  pointList: boolean,\n  clipDistances: number,\n  startLocation: number = 0\n): GPURenderPipelineDescriptor {\n  const vertexOutputVariables =\n    interStageShaderVariables - (pointList ? 1 : 0) - align(clipDistances, 4) / 4;\n  const maxVertexOutputVariables =\n    device.limits.maxInterStageShaderVariables - (pointList ? 1 : 0) - align(clipDistances, 4) / 4;\n\n  const varyings = `\n      ${range(\n        vertexOutputVariables,\n        i => `@location(${i + startLocation}) v4_${i + startLocation}: vec4f,`\n      ).join('\\n')}\n  `;\n\n  const code = `\n    // test value                        : ${interStageShaderVariables}\n    // maxInterStageShaderVariables     : ${device.limits.maxInterStageShaderVariables}\n    // num variables in vertex shader : ${vertexOutputVariables}${\n      pointList ? ' + point-list' : ''\n    }${\n      clipDistances > 0\n        ? ` + ${align(clipDistances, 4) / 4} (clip_distances[${clipDistances}])`\n        : ''\n    }\n    // maxInterStageVariables:           : ${maxVertexOutputVariables}\n    // num used inter stage variables    : ${vertexOutputVariables}\n    // vertex output start location      : ${startLocation}\n\n    enable clip_distances;\n\n    struct VSOut {\n      @builtin(position) p: vec4f,\n      ${varyings}\n      ${\n        clipDistances > 0\n          ? `@builtin(clip_distances) clipDistances: array<f32, ${clipDistances}>,`\n          : ''\n      }\n    }\n    struct FSIn {\n      ${varyings}\n    }\n    struct FSOut {\n      @location(0) color: vec4f,\n    }\n    @vertex fn vs() -> VSOut {\n      var o: VSOut;\n      o.p = vec4f(0);\n      return o;\n    }\n    @fragment fn fs(i: FSIn) -> FSOut {\n      var o: FSOut;\n      o.color = vec4f(0);\n      return o;\n    }\n  `;\n  const module = device.createShaderModule({ code });\n  const pipelineDescriptor: GPURenderPipelineDescriptor = {\n    layout: 'auto',\n    primitive: {\n      topology: pointList ? 'point-list' : 'triangle-list',\n    },\n    vertex: {\n      module,\n    },\n    fragment: {\n      module,\n      targets: [\n        {\n          format: 'rgba8unorm',\n        },\n      ],\n    },\n  };\n  return pipelineDescriptor;\n}\n\nconst limit = 'maxInterStageShaderVariables';\nexport const { g, description } = makeLimitTestGroup(limit);\n\ng.test('createRenderPipeline,at_over')\n  .desc(`Test using at and over ${limit} limit with clip_distances in createRenderPipeline(Async)`)\n  .params(\n    kMaximumLimitBaseParams\n      .combine('async', [false, true])\n      .combine('pointList', [false, true])\n      .combine('clipDistances', [1, 2, 3, 4, 5, 6, 7, 8])\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('clip-distances');\n  })\n  .fn(async t => {\n    const { limitTest, testValueName, async, pointList, clipDistances } = t.params;\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, shouldError }) => {\n        const pipelineDescriptor = getPipelineDescriptorWithClipDistances(\n          device,\n          testValue,\n          pointList,\n          clipDistances\n        );\n\n        await t.testCreateRenderPipeline(pipelineDescriptor, async, shouldError);\n      },\n      undefined,\n      ['clip-distances']\n    );\n  });\n\ng.test('createRenderPipeline,max_vertex_output_location')\n  .desc(`Test using clip_distances will limit the maximum value of vertex output location`)\n  .params(u =>\n    u\n      .combine('pointList', [false, true])\n      .combine('clipDistances', [1, 2, 3, 4, 5, 6, 7, 8])\n      .combine('startLocation', [0, 1, 2])\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('clip-distances');\n  })\n  .fn(async t => {\n    const { pointList, clipDistances, startLocation } = t.params;\n\n    const maxInterStageShaderVariables = t.adapter.limits.maxInterStageShaderVariables;\n    const deviceInTest = await t.requestDeviceTracked(t.adapter, {\n      requiredFeatures: ['clip-distances'],\n      requiredLimits: {\n        maxInterStageShaderVariables: t.adapter.limits.maxInterStageShaderVariables,\n      },\n    });\n    const pipelineDescriptor = getPipelineDescriptorWithClipDistances(\n      deviceInTest,\n      maxInterStageShaderVariables,\n      pointList,\n      clipDistances,\n      startLocation\n    );\n    const vertexOutputVariables =\n      maxInterStageShaderVariables - (pointList ? 1 : 0) - align(clipDistances, 4) / 4;\n    const maxLocationInTest = startLocation + vertexOutputVariables - 1;\n    const maxAllowedLocation = maxInterStageShaderVariables - 1 - align(clipDistances, 4) / 4;\n    const shouldError = maxLocationInTest > maxAllowedLocation;\n\n    deviceInTest.pushErrorScope('validation');\n    deviceInTest.createRenderPipeline(pipelineDescriptor);\n    const error = await deviceInTest.popErrorScope();\n    t.expect(!!error === shouldError, `${error?.message || 'no error when one was expected'}`);\n\n    deviceInTest.destroy();\n  });\n"],"mappings":"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"}