{"version":3,"file":"texture_formats.spec.js","names":["description","makeTestGroup","getGPU","assert","kCanvasTextureFormats","kAllTextureFormats","kTextureFormatInfo","kAllCanvasTypes","createCanvas","ValidationTest","g","kOptionalTextureFormats","filter","t","feature","undefined","test","desc","params","u","combine","beforeAllSubcases","format","enable_required_feature","formatInfo","selectDeviceOrSkipTestCase","fn","shouldThrow","createTextureTracked","size","blockWidth","blockHeight","usage","GPUTextureUsage","TEXTURE_BINDING","viewFormats","textureFormat","testTexture","testViewDesc","dimension","aspect","arrayLayerCount","baseMipLevel","mipLevelCount","baseArrayLayer","createView","canvasType","canvas","ctx","getContext","GPUCanvasContext","canvasConf","device","COPY_SRC","COPY_DST","expectedError","includes","configure","map","selectDeviceForTextureFormatOrSkipTestCase","expectValidationError","color","storage","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","COMPUTE","storageTexture","colorRender","isAsync","doCreateRenderPipelineTest","layout","vertex","module","createShaderModule","code","entryPoint","fragment","targets","depth","stencil","depthStencil","depthCompare","depthWriteEnabled","createRenderBundleEncoder","colorFormats","depthStencilFormat","adapter","rec","requestAdapter","features","expect","has"],"sources":["../../../../../../src/webgpu/api/validation/capability_checks/features/texture_formats.spec.ts"],"sourcesContent":["export const description = `\nTests for capability checking for features enabling optional texture formats.\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { getGPU } from '../../../../../common/util/navigator_gpu.js';\nimport { assert } from '../../../../../common/util/util.js';\nimport { kCanvasTextureFormats } from '../../../../capability_info.js';\nimport { kAllTextureFormats, kTextureFormatInfo } from '../../../../format_info.js';\nimport { kAllCanvasTypes, createCanvas } from '../../../../util/create_elements.js';\nimport { ValidationTest } from '../../validation_test.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\nconst kOptionalTextureFormats = kAllTextureFormats.filter(\n  t => kTextureFormatInfo[t].feature !== undefined\n);\n\ng.test('texture_descriptor')\n  .desc(\n    `\n  Test creating a texture with an optional texture format will fail if the required optional feature\n  is not enabled.\n  `\n  )\n  .params(u =>\n    u.combine('format', kOptionalTextureFormats).combine('enable_required_feature', [true, false])\n  )\n  .beforeAllSubcases(t => {\n    const { format, enable_required_feature } = t.params;\n\n    const formatInfo = kTextureFormatInfo[format];\n    if (enable_required_feature) {\n      t.selectDeviceOrSkipTestCase(formatInfo.feature);\n    }\n  })\n  .fn(t => {\n    const { format, enable_required_feature } = t.params;\n\n    const formatInfo = kTextureFormatInfo[format];\n    t.shouldThrow(enable_required_feature ? false : 'TypeError', () => {\n      t.createTextureTracked({\n        format,\n        size: [formatInfo.blockWidth, formatInfo.blockHeight, 1] as const,\n        usage: GPUTextureUsage.TEXTURE_BINDING,\n      });\n    });\n  });\n\ng.test('texture_descriptor_view_formats')\n  .desc(\n    `\n  Test creating a texture with view formats that have an optional texture format will fail if the\n  required optional feature is not enabled.\n  `\n  )\n  .params(u =>\n    u.combine('format', kOptionalTextureFormats).combine('enable_required_feature', [true, false])\n  )\n  .beforeAllSubcases(t => {\n    const { format, enable_required_feature } = t.params;\n\n    const formatInfo = kTextureFormatInfo[format];\n    if (enable_required_feature) {\n      t.selectDeviceOrSkipTestCase(formatInfo.feature);\n    }\n  })\n  .fn(t => {\n    const { format, enable_required_feature } = t.params;\n\n    const formatInfo = kTextureFormatInfo[format];\n    t.shouldThrow(enable_required_feature ? false : 'TypeError', () => {\n      t.createTextureTracked({\n        format,\n        size: [formatInfo.blockWidth, formatInfo.blockHeight, 1] as const,\n        usage: GPUTextureUsage.TEXTURE_BINDING,\n        viewFormats: [format],\n      });\n    });\n  });\n\ng.test('texture_view_descriptor')\n  .desc(\n    `\n  Test creating a texture view with all texture formats will fail if the required optional feature\n  is not enabled.\n  `\n  )\n  .params(u =>\n    u.combine('format', kOptionalTextureFormats).combine('enable_required_feature', [true, false])\n  )\n  .beforeAllSubcases(t => {\n    const { format, enable_required_feature } = t.params;\n\n    const formatInfo = kTextureFormatInfo[format];\n    if (enable_required_feature) {\n      t.selectDeviceOrSkipTestCase(formatInfo.feature);\n    }\n  })\n  .fn(t => {\n    const { format, enable_required_feature } = t.params;\n\n    // If the required feature isn't enabled then the texture will fail to create and we won't be\n    // able to test createView, so pick and alternate guaranteed format instead. This will almost\n    // certainly not be view-compatible with the format being tested, but that doesn't matter since\n    // createView should throw an exception due to the format feature not being enabled before it\n    // has a chance to validate that the view and texture formats aren't compatible.\n    const textureFormat = enable_required_feature ? format : 'rgba8unorm';\n\n    const formatInfo = kTextureFormatInfo[format];\n    const testTexture = t.createTextureTracked({\n      format: textureFormat,\n      size: [formatInfo.blockWidth, formatInfo.blockHeight, 1] as const,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    });\n    const testViewDesc: GPUTextureViewDescriptor = {\n      format,\n      dimension: '2d',\n      aspect: 'all',\n      arrayLayerCount: 1,\n      baseMipLevel: 0,\n      mipLevelCount: 1,\n      baseArrayLayer: 0,\n    };\n    t.shouldThrow(enable_required_feature ? false : 'TypeError', () => {\n      testTexture.createView(testViewDesc);\n    });\n  });\n\ng.test('canvas_configuration')\n  .desc(\n    `\n  Test configuring a canvas with optional texture formats will throw an exception if the required\n  optional feature is not enabled. Otherwise, a validation error should be generated instead of\n  throwing an exception.\n  `\n  )\n  .params(u =>\n    u\n      .combine('format', kOptionalTextureFormats)\n      .combine('canvasType', kAllCanvasTypes)\n      .combine('enable_required_feature', [true, false])\n  )\n  .beforeAllSubcases(t => {\n    const { format, enable_required_feature } = t.params;\n\n    const formatInfo = kTextureFormatInfo[format];\n    if (enable_required_feature) {\n      t.selectDeviceOrSkipTestCase(formatInfo.feature);\n    }\n  })\n  .fn(t => {\n    const { format, canvasType, enable_required_feature } = t.params;\n\n    const canvas = createCanvas(t, canvasType, 2, 2);\n    const ctx = canvas.getContext('webgpu');\n    assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n    const canvasConf = {\n      device: t.device,\n      format,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    };\n\n    const expectedError =\n      enable_required_feature &&\n      (kCanvasTextureFormats as unknown as Array<GPUTextureFormat>).includes(format)\n        ? false\n        : 'TypeError';\n\n    t.shouldThrow(expectedError, () => {\n      ctx.configure(canvasConf);\n    });\n  });\n\ng.test('canvas_configuration_view_formats')\n  .desc(\n    `\n  Test that configuring a canvas with view formats throws an exception if the required optional\n  feature is not enabled. Otherwise, a validation error should be generated instead of throwing an\n  exception.\n  `\n  )\n  .params(u =>\n    u\n      .combine('viewFormats', [\n        ...kOptionalTextureFormats.map(format => [format]),\n        ['bgra8unorm', 'bc1-rgba-unorm'],\n        ['bc1-rgba-unorm', 'bgra8unorm'],\n      ])\n      .combine('canvasType', kAllCanvasTypes)\n      .combine('enable_required_feature', [true, false])\n  )\n  .beforeAllSubcases(t => {\n    const { viewFormats, enable_required_feature } = t.params;\n\n    if (enable_required_feature) {\n      t.selectDeviceForTextureFormatOrSkipTestCase(viewFormats as GPUTextureFormat[]);\n    }\n  })\n  .fn(t => {\n    const { viewFormats, canvasType, enable_required_feature } = t.params;\n\n    const canvas = createCanvas(t, canvasType, 2, 2);\n    const ctx = canvas.getContext('webgpu');\n    assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n    const canvasConf = {\n      device: t.device,\n      format: 'bgra8unorm' as const,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n      viewFormats: viewFormats as GPUTextureFormat[],\n    };\n\n    if (enable_required_feature) {\n      t.expectValidationError(() => {\n        ctx.configure(canvasConf);\n      });\n    } else {\n      t.shouldThrow('TypeError', () => {\n        ctx.configure(canvasConf);\n      });\n    }\n  });\n\ng.test('storage_texture_binding_layout')\n  .desc(\n    `\n  Test creating a GPUStorageTextureBindingLayout with an optional texture format will fail if the\n  required optional feature are not enabled.\n\n  Note: This test has no cases if there are no optional texture formats supporting storage.\n  `\n  )\n  .params(u =>\n    u\n      .combine('format', kOptionalTextureFormats)\n      .filter(t => !!kTextureFormatInfo[t.format].color?.storage)\n      .combine('enable_required_feature', [true, false])\n  )\n  .beforeAllSubcases(t => {\n    const { format, enable_required_feature } = t.params;\n\n    const formatInfo = kTextureFormatInfo[format];\n    if (enable_required_feature) {\n      t.selectDeviceOrSkipTestCase(formatInfo.feature);\n    }\n  })\n  .fn(t => {\n    const { format, enable_required_feature } = t.params;\n\n    t.shouldThrow(enable_required_feature ? false : 'TypeError', () => {\n      t.device.createBindGroupLayout({\n        entries: [\n          {\n            binding: 0,\n            visibility: GPUShaderStage.COMPUTE,\n            storageTexture: {\n              format,\n            },\n          },\n        ],\n      });\n    });\n  });\n\ng.test('color_target_state')\n  .desc(\n    `\n  Test creating a render pipeline with an optional texture format set in GPUColorTargetState will\n  fail if the required optional feature is not enabled.\n\n  Note: This test has no cases if there are no optional texture formats supporting color rendering.\n  `\n  )\n  .params(u =>\n    u\n      .combine('isAsync', [false, true])\n      .combine('format', kOptionalTextureFormats)\n      .filter(t => !!kTextureFormatInfo[t.format].colorRender)\n      .combine('enable_required_feature', [true, false])\n  )\n  .beforeAllSubcases(t => {\n    const { format, enable_required_feature } = t.params;\n\n    const formatInfo = kTextureFormatInfo[format];\n    if (enable_required_feature) {\n      t.selectDeviceOrSkipTestCase(formatInfo.feature);\n    }\n  })\n  .fn(t => {\n    const { isAsync, format, enable_required_feature } = t.params;\n\n    t.doCreateRenderPipelineTest(\n      isAsync,\n      enable_required_feature,\n      {\n        layout: 'auto',\n        vertex: {\n          module: t.device.createShaderModule({\n            code: `\n              @vertex\n              fn main()-> @builtin(position) vec4<f32> {\n                return vec4<f32>(0.0, 0.0, 0.0, 1.0);\n              }`,\n          }),\n          entryPoint: 'main',\n        },\n        fragment: {\n          module: t.device.createShaderModule({\n            code: `\n              @fragment\n              fn main() -> @location(0) vec4<f32> {\n                return vec4<f32>(0.0, 1.0, 0.0, 1.0);\n              }`,\n          }),\n          entryPoint: 'main',\n          targets: [{ format }],\n        },\n      },\n      'TypeError'\n    );\n  });\n\ng.test('depth_stencil_state')\n  .desc(\n    `\n  Test creating a render pipeline with an optional texture format set in GPUColorTargetState will\n  fail if the required optional feature is not enabled.\n  `\n  )\n  .params(u =>\n    u\n      .combine('isAsync', [false, true])\n      .combine('format', kOptionalTextureFormats)\n      .filter(t => !!(kTextureFormatInfo[t.format].depth || kTextureFormatInfo[t.format].stencil))\n      .combine('enable_required_feature', [true, false])\n  )\n  .beforeAllSubcases(t => {\n    const { format, enable_required_feature } = t.params;\n\n    const formatInfo = kTextureFormatInfo[format];\n    if (enable_required_feature) {\n      t.selectDeviceOrSkipTestCase(formatInfo.feature);\n    }\n  })\n  .fn(t => {\n    const { isAsync, format, enable_required_feature } = t.params;\n\n    t.doCreateRenderPipelineTest(\n      isAsync,\n      enable_required_feature,\n      {\n        layout: 'auto',\n        vertex: {\n          module: t.device.createShaderModule({\n            code: `\n              @vertex\n              fn main()-> @builtin(position) vec4<f32> {\n                return vec4<f32>(0.0, 0.0, 0.0, 1.0);\n              }`,\n          }),\n          entryPoint: 'main',\n        },\n        depthStencil: {\n          format,\n          depthCompare: 'always',\n          depthWriteEnabled: false,\n        },\n        fragment: {\n          module: t.device.createShaderModule({\n            code: `\n              @fragment\n              fn main() -> @location(0) vec4<f32> {\n                return vec4<f32>(0.0, 1.0, 0.0, 1.0);\n              }`,\n          }),\n          entryPoint: 'main',\n          targets: [{ format: 'rgba8unorm' }],\n        },\n      },\n      'TypeError'\n    );\n  });\n\ng.test('render_bundle_encoder_descriptor_color_format')\n  .desc(\n    `\n  Test creating a render bundle encoder with an optional texture format set as one of the color\n  format will fail if the required optional feature is not enabled.\n\n  Note: This test has no cases if there are no optional texture formats supporting color rendering.\n  `\n  )\n  .params(u =>\n    u\n      .combine('format', kOptionalTextureFormats)\n      .filter(t => !!kTextureFormatInfo[t.format].colorRender)\n      .combine('enable_required_feature', [true, false])\n  )\n  .beforeAllSubcases(t => {\n    const { format, enable_required_feature } = t.params;\n\n    const formatInfo = kTextureFormatInfo[format];\n    if (enable_required_feature) {\n      t.selectDeviceOrSkipTestCase(formatInfo.feature);\n    }\n  })\n  .fn(t => {\n    const { format, enable_required_feature } = t.params;\n\n    t.shouldThrow(enable_required_feature ? false : 'TypeError', () => {\n      t.device.createRenderBundleEncoder({\n        colorFormats: [format],\n      });\n    });\n  });\n\ng.test('render_bundle_encoder_descriptor_depth_stencil_format')\n  .desc(\n    `\n  Test creating a render bundle encoder with an optional texture format set as the depth stencil\n  format will fail if the required optional feature is not enabled.\n  `\n  )\n  .params(u =>\n    u\n      .combine('format', kOptionalTextureFormats)\n      .filter(t => !!(kTextureFormatInfo[t.format].depth || kTextureFormatInfo[t.format].stencil))\n      .combine('enable_required_feature', [true, false])\n  )\n  .beforeAllSubcases(t => {\n    const { format, enable_required_feature } = t.params;\n\n    const formatInfo = kTextureFormatInfo[format];\n    if (enable_required_feature) {\n      t.selectDeviceOrSkipTestCase(formatInfo.feature);\n    }\n  })\n  .fn(t => {\n    const { format, enable_required_feature } = t.params;\n\n    t.shouldThrow(enable_required_feature ? false : 'TypeError', () => {\n      t.device.createRenderBundleEncoder({\n        colorFormats: ['rgba8unorm'],\n        depthStencilFormat: format,\n      });\n    });\n  });\n\ng.test('check_capability_guarantees')\n  .desc(\n    `check \"texture-compression-bc\" is supported or both \"texture-compression-etc2\" and \"texture-compression-astc\" are supported.`\n  )\n  .fn(async t => {\n    const adapter = await getGPU(t.rec).requestAdapter();\n    assert(adapter !== null);\n\n    const features = adapter.features;\n    t.expect(\n      features.has('texture-compression-bc') ||\n        (features.has('texture-compression-etc2') && features.has('texture-compression-astc'))\n    );\n  });\n"],"mappings":"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"}