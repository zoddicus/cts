{"version":3,"file":"validation_test.js","names":["kMaxQueryCount","GPUTest","ValidationTest","createTextureWithState","state","descriptor","size","width","height","depthOrArrayLayers","format","usage","GPUTextureUsage","COPY_SRC","COPY_DST","TEXTURE_BINDING","STORAGE_BINDING","RENDER_ATTACHMENT","trackForCleanup","device","createTexture","getErrorTexture","texture","destroy","createBufferWithState","GPUBufferUsage","VERTEX","createBuffer","pushErrorScope","buffer","MAP_READ","popErrorScope","createQuerySetWithState","desc","type","count","createQuerySet","expectGPUError","queryset","getStorageBuffer","STORAGE","getUniformBuffer","UNIFORM","getErrorBuffer","getErrorSampler","sampler","createSampler","lodMinClamp","getSampledTexture","sampleCount","getStorageTexture","getRenderTexture","getErrorTextureView","view","createView","getBindingResource","bindingType","minFilter","compare","getDeviceMismatchedStorageBuffer","mismatchedDevice","getDeviceMismatchedUniformBuffer","getDeviceMismatchedTexture","getDeviceMismatchedSampledTexture","getDeviceMismatchedStorageTexture","getDeviceMismatchedRenderTexture","getDeviceMismatchedBindingResource","getNoOpShaderCode","stage","createRenderPipelineWithState","createNoOpRenderPipeline","createErrorRenderPipeline","layout","colorFormat","createRenderPipeline","vertex","module","createShaderModule","code","entryPoint","fragment","targets","writeMask","primitive","topology","pipeline","createNoOpComputePipeline","createComputePipeline","compute","createErrorComputePipeline","createInvalidShaderModule","shaderModule","doCreateRenderPipelineTest","isAsync","_success","errorTypeName","shouldResolve","createRenderPipelineAsync","shouldReject","expectValidationError","shouldThrow","doCreateComputePipelineTest","createComputePipelineAsync"],"sources":["../../../../src/webgpu/api/validation/validation_test.ts"],"sourcesContent":["import {\n  ValidBindableResource,\n  BindableResource,\n  kMaxQueryCount,\n  ShaderStageKey,\n} from '../../capability_info.js';\nimport { GPUTest, ResourceState } from '../../gpu_test.js';\n\n/**\n * Base fixture for WebGPU validation tests.\n */\nexport class ValidationTest extends GPUTest {\n  /**\n   * Create a GPUTexture in the specified state.\n   * A `descriptor` may optionally be passed, which is used when `state` is not `'invalid'`.\n   */\n  createTextureWithState(\n    state: ResourceState,\n    descriptor?: Readonly<GPUTextureDescriptor>\n  ): GPUTexture {\n    descriptor = descriptor ?? {\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage:\n        GPUTextureUsage.COPY_SRC |\n        GPUTextureUsage.COPY_DST |\n        GPUTextureUsage.TEXTURE_BINDING |\n        GPUTextureUsage.STORAGE_BINDING |\n        GPUTextureUsage.RENDER_ATTACHMENT,\n    };\n\n    switch (state) {\n      case 'valid':\n        return this.trackForCleanup(this.device.createTexture(descriptor));\n      case 'invalid':\n        return this.getErrorTexture();\n      case 'destroyed': {\n        const texture = this.device.createTexture(descriptor);\n        texture.destroy();\n        return texture;\n      }\n    }\n  }\n\n  /**\n   * Create a GPUTexture in the specified state. A `descriptor` may optionally be passed;\n   * if `state` is `'invalid'`, it will be modified to add an invalid combination of usages.\n   */\n  createBufferWithState(\n    state: ResourceState,\n    descriptor?: Readonly<GPUBufferDescriptor>\n  ): GPUBuffer {\n    descriptor = descriptor ?? {\n      size: 4,\n      usage: GPUBufferUsage.VERTEX,\n    };\n\n    switch (state) {\n      case 'valid':\n        return this.trackForCleanup(this.device.createBuffer(descriptor));\n\n      case 'invalid': {\n        // Make the buffer invalid because of an invalid combination of usages but keep the\n        // descriptor passed as much as possible (for mappedAtCreation and friends).\n        this.device.pushErrorScope('validation');\n        const buffer = this.device.createBuffer({\n          ...descriptor,\n          usage: descriptor.usage | GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_SRC,\n        });\n        void this.device.popErrorScope();\n        return buffer;\n      }\n      case 'destroyed': {\n        const buffer = this.device.createBuffer(descriptor);\n        buffer.destroy();\n        return buffer;\n      }\n    }\n  }\n\n  /**\n   * Create a GPUQuerySet in the specified state.\n   * A `descriptor` may optionally be passed, which is used when `state` is not `'invalid'`.\n   */\n  createQuerySetWithState(\n    state: ResourceState,\n    desc?: Readonly<GPUQuerySetDescriptor>\n  ): GPUQuerySet {\n    const descriptor = { type: 'occlusion' as const, count: 2, ...desc };\n\n    switch (state) {\n      case 'valid':\n        return this.trackForCleanup(this.device.createQuerySet(descriptor));\n      case 'invalid': {\n        // Make the queryset invalid because of the count out of bounds.\n        descriptor.count = kMaxQueryCount + 1;\n        return this.expectGPUError('validation', () => this.device.createQuerySet(descriptor));\n      }\n      case 'destroyed': {\n        const queryset = this.device.createQuerySet(descriptor);\n        queryset.destroy();\n        return queryset;\n      }\n    }\n  }\n\n  /** Create an arbitrarily-sized GPUBuffer with the STORAGE usage. */\n  getStorageBuffer(): GPUBuffer {\n    return this.trackForCleanup(\n      this.device.createBuffer({ size: 1024, usage: GPUBufferUsage.STORAGE })\n    );\n  }\n\n  /** Create an arbitrarily-sized GPUBuffer with the UNIFORM usage. */\n  getUniformBuffer(): GPUBuffer {\n    return this.trackForCleanup(\n      this.device.createBuffer({ size: 1024, usage: GPUBufferUsage.UNIFORM })\n    );\n  }\n\n  /** Return an invalid GPUBuffer. */\n  getErrorBuffer(): GPUBuffer {\n    return this.createBufferWithState('invalid');\n  }\n\n  /** Return an invalid GPUSampler. */\n  getErrorSampler(): GPUSampler {\n    this.device.pushErrorScope('validation');\n    const sampler = this.device.createSampler({ lodMinClamp: -1 });\n    void this.device.popErrorScope();\n    return sampler;\n  }\n\n  /**\n   * Return an arbitrarily-configured GPUTexture with the `TEXTURE_BINDING` usage and specified\n   * sampleCount. The `RENDER_ATTACHMENT` usage will also be specified if sampleCount > 1 as is\n   * required by WebGPU SPEC.\n   */\n  getSampledTexture(sampleCount: number = 1): GPUTexture {\n    const usage =\n      sampleCount > 1\n        ? GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.RENDER_ATTACHMENT\n        : GPUTextureUsage.TEXTURE_BINDING;\n    return this.trackForCleanup(\n      this.device.createTexture({\n        size: { width: 16, height: 16, depthOrArrayLayers: 1 },\n        format: 'rgba8unorm',\n        usage,\n        sampleCount,\n      })\n    );\n  }\n\n  /** Return an arbitrarily-configured GPUTexture with the `STORAGE_BINDING` usage. */\n  getStorageTexture(format: GPUTextureFormat): GPUTexture {\n    return this.trackForCleanup(\n      this.device.createTexture({\n        size: { width: 16, height: 16, depthOrArrayLayers: 1 },\n        format,\n        usage: GPUTextureUsage.STORAGE_BINDING,\n      })\n    );\n  }\n\n  /** Return an arbitrarily-configured GPUTexture with the `RENDER_ATTACHMENT` usage. */\n  getRenderTexture(sampleCount: number = 1): GPUTexture {\n    return this.trackForCleanup(\n      this.device.createTexture({\n        size: { width: 16, height: 16, depthOrArrayLayers: 1 },\n        format: 'rgba8unorm',\n        usage: GPUTextureUsage.RENDER_ATTACHMENT,\n        sampleCount,\n      })\n    );\n  }\n\n  /** Return an invalid GPUTexture. */\n  getErrorTexture(): GPUTexture {\n    this.device.pushErrorScope('validation');\n    const texture = this.device.createTexture({\n      size: { width: 0, height: 0, depthOrArrayLayers: 0 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    });\n    void this.device.popErrorScope();\n    return texture;\n  }\n\n  /** Return an invalid GPUTextureView (created from an invalid GPUTexture). */\n  getErrorTextureView(): GPUTextureView {\n    this.device.pushErrorScope('validation');\n    const view = this.getErrorTexture().createView();\n    void this.device.popErrorScope();\n    return view;\n  }\n\n  /**\n   * Return an arbitrary object of the specified {@link webgpu/capability_info!BindableResource} type\n   * (e.g. `'errorBuf'`, `'nonFiltSamp'`, `sampledTexMS`, etc.)\n   */\n  getBindingResource(bindingType: BindableResource): GPUBindingResource {\n    switch (bindingType) {\n      case 'errorBuf':\n        return { buffer: this.getErrorBuffer() };\n      case 'errorSamp':\n        return this.getErrorSampler();\n      case 'errorTex':\n        return this.getErrorTextureView();\n      case 'uniformBuf':\n        return { buffer: this.getUniformBuffer() };\n      case 'storageBuf':\n        return { buffer: this.getStorageBuffer() };\n      case 'filtSamp':\n        return this.device.createSampler({ minFilter: 'linear' });\n      case 'nonFiltSamp':\n        return this.device.createSampler();\n      case 'compareSamp':\n        return this.device.createSampler({ compare: 'never' });\n      case 'sampledTex':\n        return this.getSampledTexture(1).createView();\n      case 'sampledTexMS':\n        return this.getSampledTexture(4).createView();\n      case 'readonlyStorageTex':\n      case 'writeonlyStorageTex':\n      case 'readwriteStorageTex':\n        return this.getStorageTexture('r32float').createView();\n    }\n  }\n\n  /** Create an arbitrarily-sized GPUBuffer with the STORAGE usage from mismatched device. */\n  getDeviceMismatchedStorageBuffer(): GPUBuffer {\n    return this.trackForCleanup(\n      this.mismatchedDevice.createBuffer({ size: 4, usage: GPUBufferUsage.STORAGE })\n    );\n  }\n\n  /** Create an arbitrarily-sized GPUBuffer with the UNIFORM usage from mismatched device. */\n  getDeviceMismatchedUniformBuffer(): GPUBuffer {\n    return this.trackForCleanup(\n      this.mismatchedDevice.createBuffer({ size: 4, usage: GPUBufferUsage.UNIFORM })\n    );\n  }\n\n  /** Return a GPUTexture with descriptor from mismatched device. */\n  getDeviceMismatchedTexture(descriptor: GPUTextureDescriptor): GPUTexture {\n    return this.trackForCleanup(this.mismatchedDevice.createTexture(descriptor));\n  }\n\n  /** Return an arbitrarily-configured GPUTexture with the `SAMPLED` usage from mismatched device. */\n  getDeviceMismatchedSampledTexture(sampleCount: number = 1): GPUTexture {\n    return this.getDeviceMismatchedTexture({\n      size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n      sampleCount,\n    });\n  }\n\n  /** Return an arbitrarily-configured GPUTexture with the `STORAGE` usage from mismatched device. */\n  getDeviceMismatchedStorageTexture(format: GPUTextureFormat): GPUTexture {\n    return this.getDeviceMismatchedTexture({\n      size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n      format,\n      usage: GPUTextureUsage.STORAGE_BINDING,\n    });\n  }\n\n  /** Return an arbitrarily-configured GPUTexture with the `RENDER_ATTACHMENT` usage from mismatched device. */\n  getDeviceMismatchedRenderTexture(sampleCount: number = 1): GPUTexture {\n    return this.getDeviceMismatchedTexture({\n      size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.RENDER_ATTACHMENT,\n      sampleCount,\n    });\n  }\n\n  getDeviceMismatchedBindingResource(bindingType: ValidBindableResource): GPUBindingResource {\n    switch (bindingType) {\n      case 'uniformBuf':\n        return { buffer: this.getDeviceMismatchedUniformBuffer() };\n      case 'storageBuf':\n        return { buffer: this.getDeviceMismatchedStorageBuffer() };\n      case 'filtSamp':\n        return this.mismatchedDevice.createSampler({ minFilter: 'linear' });\n      case 'nonFiltSamp':\n        return this.mismatchedDevice.createSampler();\n      case 'compareSamp':\n        return this.mismatchedDevice.createSampler({ compare: 'never' });\n      case 'sampledTex':\n        return this.getDeviceMismatchedSampledTexture(1).createView();\n      case 'sampledTexMS':\n        return this.getDeviceMismatchedSampledTexture(4).createView();\n      case 'readonlyStorageTex':\n      case 'writeonlyStorageTex':\n      case 'readwriteStorageTex':\n        return this.getDeviceMismatchedStorageTexture('r32float').createView();\n    }\n  }\n\n  /** Return a no-op shader code snippet for the specified shader stage. */\n  getNoOpShaderCode(stage: ShaderStageKey): string {\n    switch (stage) {\n      case 'VERTEX':\n        return `\n          @vertex fn main() -> @builtin(position) vec4<f32> {\n            return vec4<f32>();\n          }\n        `;\n      case 'FRAGMENT':\n        return `@fragment fn main() {}`;\n      case 'COMPUTE':\n        return `@compute @workgroup_size(1) fn main() {}`;\n    }\n  }\n\n  /** Create a GPURenderPipeline in the specified state. */\n  createRenderPipelineWithState(state: 'valid' | 'invalid'): GPURenderPipeline {\n    return state === 'valid' ? this.createNoOpRenderPipeline() : this.createErrorRenderPipeline();\n  }\n\n  /** Return a GPURenderPipeline with default options and no-op vertex and fragment shaders. */\n  createNoOpRenderPipeline(\n    layout: GPUPipelineLayout | GPUAutoLayoutMode = 'auto',\n    colorFormat: GPUTextureFormat = 'rgba8unorm'\n  ): GPURenderPipeline {\n    return this.device.createRenderPipeline({\n      layout,\n      vertex: {\n        module: this.device.createShaderModule({\n          code: this.getNoOpShaderCode('VERTEX'),\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: this.device.createShaderModule({\n          code: this.getNoOpShaderCode('FRAGMENT'),\n        }),\n        entryPoint: 'main',\n        targets: [{ format: colorFormat, writeMask: 0 }],\n      },\n      primitive: { topology: 'triangle-list' },\n    });\n  }\n\n  /** Return an invalid GPURenderPipeline. */\n  createErrorRenderPipeline(): GPURenderPipeline {\n    this.device.pushErrorScope('validation');\n    const pipeline = this.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: {\n        module: this.device.createShaderModule({\n          code: '',\n        }),\n        entryPoint: '',\n      },\n    });\n    void this.device.popErrorScope();\n    return pipeline;\n  }\n\n  /** Return a GPUComputePipeline with a no-op shader. */\n  createNoOpComputePipeline(\n    layout: GPUPipelineLayout | GPUAutoLayoutMode = 'auto'\n  ): GPUComputePipeline {\n    return this.device.createComputePipeline({\n      layout,\n      compute: {\n        module: this.device.createShaderModule({\n          code: this.getNoOpShaderCode('COMPUTE'),\n        }),\n        entryPoint: 'main',\n      },\n    });\n  }\n\n  /** Return an invalid GPUComputePipeline. */\n  createErrorComputePipeline(): GPUComputePipeline {\n    this.device.pushErrorScope('validation');\n    const pipeline = this.device.createComputePipeline({\n      layout: 'auto',\n      compute: {\n        module: this.device.createShaderModule({\n          code: '',\n        }),\n        entryPoint: '',\n      },\n    });\n    void this.device.popErrorScope();\n    return pipeline;\n  }\n\n  /** Return an invalid GPUShaderModule. */\n  createInvalidShaderModule(): GPUShaderModule {\n    this.device.pushErrorScope('validation');\n    const code = 'deadbeaf'; // Something make no sense\n    const shaderModule = this.device.createShaderModule({ code });\n    void this.device.popErrorScope();\n    return shaderModule;\n  }\n\n  /** Helper for testing createRenderPipeline(Async) validation */\n  doCreateRenderPipelineTest(\n    isAsync: boolean,\n    _success: boolean,\n    descriptor: GPURenderPipelineDescriptor,\n    errorTypeName: 'GPUPipelineError' | 'TypeError' = 'GPUPipelineError'\n  ) {\n    if (isAsync) {\n      if (_success) {\n        this.shouldResolve(this.device.createRenderPipelineAsync(descriptor));\n      } else {\n        this.shouldReject(errorTypeName, this.device.createRenderPipelineAsync(descriptor));\n      }\n    } else {\n      if (errorTypeName === 'GPUPipelineError') {\n        this.expectValidationError(() => {\n          this.device.createRenderPipeline(descriptor);\n        }, !_success);\n      } else {\n        this.shouldThrow(_success ? false : errorTypeName, () => {\n          this.device.createRenderPipeline(descriptor);\n        });\n      }\n    }\n  }\n\n  /** Helper for testing createComputePipeline(Async) validation */\n  doCreateComputePipelineTest(\n    isAsync: boolean,\n    _success: boolean,\n    descriptor: GPUComputePipelineDescriptor,\n    errorTypeName: 'GPUPipelineError' | 'TypeError' = 'GPUPipelineError'\n  ) {\n    if (isAsync) {\n      if (_success) {\n        this.shouldResolve(this.device.createComputePipelineAsync(descriptor));\n      } else {\n        this.shouldReject(errorTypeName, this.device.createComputePipelineAsync(descriptor));\n      }\n    } else {\n      if (errorTypeName === 'GPUPipelineError') {\n        this.expectValidationError(() => {\n          this.device.createComputePipeline(descriptor);\n        }, !_success);\n      } else {\n        this.shouldThrow(_success ? false : errorTypeName, () => {\n          this.device.createComputePipeline(descriptor);\n        });\n      }\n    }\n  }\n}\n"],"mappings":"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"}