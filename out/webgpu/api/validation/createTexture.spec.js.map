{"version":3,"file":"createTexture.spec.js","names":["description","SkipTestCase","makeTestGroup","assert","kTextureDimensions","kTextureUsages","kLimitInfo","GPUConst","kTextureFormats","kTextureFormatInfo","kCompressedTextureFormats","kUncompressedTextureFormats","kRegularTextureFormats","kFeaturesForFormats","filterFormatsByFeature","viewCompatible","textureDimensionAndFormatCompatible","maxMipLevelCount","ValidationTest","g","test","desc","params","u","combine","undefined","beginSubcases","filter","dimension","format","beforeAllSubcases","t","info","selectDeviceOrSkipTestCase","feature","fn","zeroArgument","size","blockWidth","blockHeight","mipLevelCount","usage","GPUTextureUsage","TEXTURE_BINDING","descriptor","success","expectValidationError","device","createTexture","skipIfTextureFormatNotSupported","unless","largestDimension","kTargetMipLevelCount","kTargetLargeSize","largeSize","Math","floor","combineWithParams","sampleCount","RENDER_ATTACHMENT","multisample","renderable","arrayLayerCount","expand","p","usageSet","Set","usage0","usage1","add","TextureUsage","colorRender","STORAGE_BINDING","color","storage","shouldError","expandWithParams","_success","maxTextureDimension1D","default","width","height","depthOrArrayLayers","maxTextureDimension2D","maxTextureArrayLayers","maxTextureDimension3D","appliedDimension","formatFeature","viewFormatFeature","viewFormat","compatible","viewFormats"],"sources":["../../../../src/webgpu/api/validation/createTexture.spec.ts"],"sourcesContent":["export const description = `createTexture validation tests.`;\n\nimport { SkipTestCase } from '../../../common/framework/fixture.js';\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { assert } from '../../../common/util/util.js';\nimport { kTextureDimensions, kTextureUsages, kLimitInfo } from '../../capability_info.js';\nimport { GPUConst } from '../../constants.js';\nimport {\n  kTextureFormats,\n  kTextureFormatInfo,\n  kCompressedTextureFormats,\n  kUncompressedTextureFormats,\n  kRegularTextureFormats,\n  kFeaturesForFormats,\n  filterFormatsByFeature,\n  viewCompatible,\n  textureDimensionAndFormatCompatible,\n} from '../../format_info.js';\nimport { maxMipLevelCount } from '../../util/texture/base.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('zero_size_and_usage')\n  .desc(\n    `Test texture creation with zero or nonzero size of\n    width, height, depthOrArrayLayers and mipLevelCount, usage for every dimension, and\n    representative formats.\n  `\n  )\n  .params(u =>\n    u\n      .combine('dimension', [undefined, ...kTextureDimensions])\n      .combine('format', [\n        'rgba8unorm',\n        'rgb10a2unorm',\n        'bc1-rgba-unorm',\n        'depth24plus-stencil8',\n      ] as const)\n      .beginSubcases()\n      .combine('zeroArgument', [\n        'none',\n        'width',\n        'height',\n        'depthOrArrayLayers',\n        'mipLevelCount',\n        'usage',\n      ] as const)\n      // Filter out incompatible dimension type and format combinations.\n      .filter(({ dimension, format }) => textureDimensionAndFormatCompatible(dimension, format))\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(t => {\n    const { dimension, zeroArgument, format } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    const size = [info.blockWidth, info.blockHeight, 1];\n    let mipLevelCount = 1;\n    let usage = GPUTextureUsage.TEXTURE_BINDING;\n\n    switch (zeroArgument) {\n      case 'width':\n        size[0] = 0;\n        break;\n      case 'height':\n        size[1] = 0;\n        break;\n      case 'depthOrArrayLayers':\n        size[2] = 0;\n        break;\n      case 'mipLevelCount':\n        mipLevelCount = 0;\n        break;\n      case 'usage':\n        usage = 0;\n        break;\n      default:\n        break;\n    }\n\n    const descriptor = {\n      size,\n      mipLevelCount,\n      dimension,\n      format,\n      usage,\n    };\n\n    const success = zeroArgument === 'none';\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('dimension_type_and_format_compatibility')\n  .desc(\n    `Test every dimension type on every format. Note that compressed formats and depth/stencil formats are not valid for 1D/3D dimension types.`\n  )\n  .params(u =>\n    u.combine('dimension', [undefined, ...kTextureDimensions]).combine('format', kTextureFormats)\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.skipIfTextureFormatNotSupported(format);\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(t => {\n    const { dimension, format } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    const descriptor: GPUTextureDescriptor = {\n      size: [info.blockWidth, info.blockHeight, 1],\n      dimension,\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !textureDimensionAndFormatCompatible(dimension, format));\n  });\n\ng.test('mipLevelCount,format')\n  .desc(\n    `Test texture creation with no mipmap chain, partial mipmap chain, full mipmap chain, out-of-bounds mipmap chain\n    for every format with different texture dimension types.`\n  )\n  .params(u =>\n    u\n      .combine('dimension', [undefined, ...kTextureDimensions])\n      .combine('format', kTextureFormats)\n      .beginSubcases()\n      .combine('mipLevelCount', [1, 2, 3, 6, 7])\n      // Filter out incompatible dimension type and format combinations.\n      .filter(({ dimension, format }) => textureDimensionAndFormatCompatible(dimension, format))\n      .combine('largestDimension', [0, 1, 2])\n      .unless(({ dimension, largestDimension }) => dimension === '1d' && largestDimension > 0)\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.skipIfTextureFormatNotSupported(format);\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(t => {\n    const { dimension, format, mipLevelCount, largestDimension } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    // Compute dimensions such that the dimensions are in range [17, 32] and aligned with the\n    // format block size so that there will be exactly 6 mip levels.\n    const kTargetMipLevelCount = 5;\n    const kTargetLargeSize = (1 << kTargetMipLevelCount) - 1;\n    const largeSize = [\n      Math.floor(kTargetLargeSize / info.blockWidth) * info.blockWidth,\n      Math.floor(kTargetLargeSize / info.blockHeight) * info.blockHeight,\n      kTargetLargeSize,\n    ];\n    assert(17 <= largeSize[0] && largeSize[0] <= 32);\n    assert(17 <= largeSize[1] && largeSize[1] <= 32);\n\n    // Note that compressed formats are not valid for 1D. They have already been filtered out for 1D\n    // in this test. So there is no dilemma about size.width equals 1 vs\n    // size.width % info.blockHeight equals 0 for 1D compressed formats.\n    const size = [info.blockWidth, info.blockHeight, 1];\n    size[largestDimension] = largeSize[largestDimension];\n\n    const descriptor = {\n      size,\n      mipLevelCount,\n      dimension,\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    const success = mipLevelCount <= maxMipLevelCount(descriptor);\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('mipLevelCount,bound_check')\n  .desc(\n    `Test mip level count bound check upon different texture size and different texture dimension types.\n    The cases below test: 1) there must be no mip levels after a 1 level (1D texture), or 1x1 level (2D texture), or 1x1x1 level (3D texture), 2) array layers are not mip-mapped, 3) power-of-two, non-power-of-two, and non-square sizes.`\n  )\n  .params(u =>\n    u //\n      .combine('format', ['rgba8unorm', 'bc1-rgba-unorm'] as const)\n      .beginSubcases()\n      .combineWithParams([\n        { size: [32, 32] }, // Mip level sizes: 32x32, 16x16, 8x8, 4x4, 2x2, 1x1\n        { size: [31, 32] }, // Mip level sizes: 31x32, 15x16, 7x8, 3x4, 1x2, 1x1\n        { size: [28, 32] }, // Mip level sizes: 28x32, 14x16, 7x8, 3x4, 1x2, 1x1\n        { size: [32, 31] }, // Mip level sizes: 32x31, 16x15, 8x7, 4x3, 2x1, 1x1\n        { size: [32, 28] }, // Mip level sizes: 32x28, 16x14, 8x7, 4x3, 2x1, 1x1\n        { size: [31, 31] }, // Mip level sizes: 31x31, 15x15, 7x7, 3x3, 1x1\n        { size: [32], dimension: '1d' as const }, // Mip level sizes: 32, 16, 8, 4, 2, 1\n        { size: [31], dimension: '1d' as const }, // Mip level sizes: 31, 15, 7, 3, 1\n        { size: [32, 32, 32], dimension: '3d' as const }, // Mip level sizes: 32x32x32, 16x16x16, 8x8x8, 4x4x4, 2x2x2, 1x1x1\n        { size: [32, 31, 31], dimension: '3d' as const }, // Mip level sizes: 32x31x31, 16x15x15, 8x7x7, 4x3x3, 2x1x1, 1x1x1\n        { size: [31, 32, 31], dimension: '3d' as const }, // Mip level sizes: 31x32x31, 15x16x15, 7x8x7, 3x4x3, 1x2x1, 1x1x1\n        { size: [31, 31, 32], dimension: '3d' as const }, // Mip level sizes: 31x31x32, 15x15x16, 7x7x8, 3x3x4, 1x1x2, 1x1x1\n        { size: [31, 31, 31], dimension: '3d' as const }, // Mip level sizes: 31x31x31, 15x15x15, 7x7x7, 3x3x3, 1x1x1\n        { size: [32, 8] }, // Mip levels: 32x8, 16x4, 8x2, 4x1, 2x1, 1x1\n        { size: [32, 32, 64] }, // Mip levels: 32x32x64, 16x16x64, 8x8x64, 4x4x64, 2x2x64, 1x1x64\n        { size: [32, 32, 64], dimension: '3d' as const }, // Mip levels: 32x32x64, 16x16x32, 8x8x16, 4x4x8, 2x2x4, 1x1x2, 1x1x1\n      ])\n      .unless(\n        ({ format, size, dimension }) =>\n          format === 'bc1-rgba-unorm' &&\n          (dimension === '1d' ||\n            dimension === '3d' ||\n            size[0] % kTextureFormatInfo[format].blockWidth !== 0 ||\n            size[1] % kTextureFormatInfo[format].blockHeight !== 0)\n      )\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(t => {\n    const { format, size, dimension } = t.params;\n\n    const descriptor = {\n      size,\n      mipLevelCount: 0,\n      dimension,\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    const mipLevelCount = maxMipLevelCount(descriptor);\n    descriptor.mipLevelCount = mipLevelCount;\n    t.device.createTexture(descriptor);\n\n    descriptor.mipLevelCount = mipLevelCount + 1;\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    });\n  });\n\ng.test('mipLevelCount,bound_check,bigger_than_integer_bit_width')\n  .desc(`Test mip level count bound check when mipLevelCount is bigger than integer bit width`)\n  .fn(t => {\n    const descriptor = {\n      size: [32, 32],\n      mipLevelCount: 100,\n      format: 'rgba8unorm' as const,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    });\n  });\n\ng.test('sampleCount,various_sampleCount_with_all_formats')\n  .desc(\n    `Test texture creation with various (valid or invalid) sample count and all formats. Note that 1D and 3D textures can't support multisample.`\n  )\n  .params(u =>\n    u\n      .combine('dimension', [undefined, '2d'] as const)\n      .combine('format', kTextureFormats)\n      .beginSubcases()\n      .combine('sampleCount', [0, 1, 2, 4, 8, 16, 32, 256])\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.skipIfTextureFormatNotSupported(format);\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(t => {\n    const { dimension, sampleCount, format } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    const usage =\n      sampleCount > 1\n        ? GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.RENDER_ATTACHMENT\n        : GPUTextureUsage.TEXTURE_BINDING;\n    const descriptor = {\n      size: [32 * info.blockWidth, 32 * info.blockHeight, 1],\n      sampleCount,\n      dimension,\n      format,\n      usage,\n    };\n\n    const success = sampleCount === 1 || (sampleCount === 4 && info.multisample && info.renderable);\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('sampleCount,valid_sampleCount_with_other_parameter_varies')\n  .desc(\n    `Test texture creation with valid sample count when dimensions, arrayLayerCount, mipLevelCount,\n     format, and usage varies. Texture can be single sample (sampleCount is 1) or multi-sample\n     (sampleCount is 4). Multisample texture requires that\n     1) its dimension is 2d or undefined,\n     2) its format supports multisample,\n     3) its mipLevelCount and arrayLayerCount are 1,\n     4) its usage doesn't include STORAGE_BINDING,\n     5) its usage includes RENDER_ATTACHMENT.`\n  )\n  .params(u =>\n    u\n      .combine('dimension', [undefined, ...kTextureDimensions])\n      .combine('format', kTextureFormats)\n      .beginSubcases()\n      .combine('sampleCount', [1, 4])\n      .combine('arrayLayerCount', [1, 2])\n      .unless(\n        ({ dimension, arrayLayerCount }) =>\n          arrayLayerCount === 2 && dimension !== '2d' && dimension !== undefined\n      )\n      .combine('mipLevelCount', [1, 2])\n      .expand('usage', p => {\n        const usageSet = new Set<number>();\n        for (const usage0 of kTextureUsages) {\n          for (const usage1 of kTextureUsages) {\n            usageSet.add(usage0 | usage1);\n          }\n        }\n        return usageSet;\n      })\n      // Filter out incompatible dimension type and format combinations.\n      .filter(({ dimension, format }) => textureDimensionAndFormatCompatible(dimension, format))\n      .unless(({ usage, format, mipLevelCount, dimension }) => {\n        const info = kTextureFormatInfo[format];\n        return (\n          ((usage & GPUConst.TextureUsage.RENDER_ATTACHMENT) !== 0 &&\n            (!info.colorRender || dimension !== '2d')) ||\n          ((usage & GPUConst.TextureUsage.STORAGE_BINDING) !== 0 && !info.color?.storage) ||\n          (mipLevelCount !== 1 && dimension === '1d')\n        );\n      })\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.skipIfTextureFormatNotSupported(format);\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(t => {\n    const { dimension, sampleCount, format, mipLevelCount, arrayLayerCount, usage } = t.params;\n    const { blockWidth, blockHeight } = kTextureFormatInfo[format];\n\n    const size =\n      dimension === '1d'\n        ? [32 * blockWidth, 1 * blockHeight, 1]\n        : dimension === '2d' || dimension === undefined\n        ? [32 * blockWidth, 32 * blockHeight, arrayLayerCount]\n        : [32 * blockWidth, 32 * blockHeight, 32];\n    const descriptor = {\n      size,\n      mipLevelCount,\n      sampleCount,\n      dimension,\n      format,\n      usage,\n    };\n\n    const success =\n      sampleCount === 1 ||\n      (sampleCount === 4 &&\n        (dimension === '2d' || dimension === undefined) &&\n        kTextureFormatInfo[format].multisample &&\n        mipLevelCount === 1 &&\n        arrayLayerCount === 1 &&\n        (usage & GPUConst.TextureUsage.RENDER_ATTACHMENT) !== 0 &&\n        (usage & GPUConst.TextureUsage.STORAGE_BINDING) === 0);\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('sample_count,1d_2d_array_3d')\n  .desc(`Test that you can not create 1d, 2d_array, and 3d multisampled textures`)\n  .params(u =>\n    u.combineWithParams([\n      { dimension: '2d', size: [4, 4, 1], shouldError: false },\n      { dimension: '1d', size: [4, 1, 1], shouldError: true },\n      { dimension: '2d', size: [4, 4, 4], shouldError: true },\n      { dimension: '2d', size: [4, 4, 6], shouldError: true },\n      { dimension: '3d', size: [4, 4, 4], shouldError: true },\n    ] as const)\n  )\n  .fn(t => {\n    const { dimension, size, shouldError } = t.params;\n\n    t.expectValidationError(() => {\n      t.device.createTexture({\n        size,\n        dimension,\n        sampleCount: 4,\n        format: 'rgba8unorm',\n        usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.RENDER_ATTACHMENT,\n      });\n    }, shouldError);\n  });\n\ng.test('texture_size,default_value_and_smallest_size,uncompressed_format')\n  .desc(\n    `Test default values for height and depthOrArrayLayers for every dimension type and every uncompressed format.\n    It also tests smallest size (lower bound) for every dimension type and every uncompressed format, while other texture_size tests are testing the upper bound.`\n  )\n  .params(u =>\n    u\n      .combine('dimension', [undefined, ...kTextureDimensions])\n      .combine('format', kUncompressedTextureFormats)\n      .beginSubcases()\n      .combine('size', [[1], [1, 1], [1, 1, 1]])\n      // Filter out incompatible dimension type and format combinations.\n      .filter(({ dimension, format }) => textureDimensionAndFormatCompatible(dimension, format))\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.skipIfTextureFormatNotSupported(format);\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(t => {\n    const { dimension, format, size } = t.params;\n\n    const descriptor: GPUTextureDescriptor = {\n      size,\n      dimension,\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    t.device.createTexture(descriptor);\n  });\n\ng.test('texture_size,default_value_and_smallest_size,compressed_format')\n  .desc(\n    `Test default values for height and depthOrArrayLayers for every dimension type and every compressed format.\n    It also tests smallest size (lower bound) for every dimension type and every compressed format, while other texture_size tests are testing the upper bound.`\n  )\n  .params(u =>\n    u\n      // Compressed formats are invalid for 1D and 3D.\n      .combine('dimension', [undefined, '2d'] as const)\n      .combine('format', kCompressedTextureFormats)\n      .beginSubcases()\n      .expandWithParams(p => {\n        const { blockWidth, blockHeight } = kTextureFormatInfo[p.format];\n        return [\n          { size: [1], _success: false },\n          { size: [blockWidth], _success: false },\n          { size: [1, 1], _success: false },\n          { size: [blockWidth, blockHeight], _success: true },\n          { size: [1, 1, 1], _success: false },\n          { size: [blockWidth, blockHeight, 1], _success: true },\n        ];\n      })\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(t => {\n    const { dimension, format, size, _success } = t.params;\n\n    const descriptor: GPUTextureDescriptor = {\n      size,\n      dimension,\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !_success);\n  });\n\ng.test('texture_size,1d_texture')\n  .desc(`Test texture size requirement for 1D texture`)\n  .params(u =>\n    u //\n      // Compressed and depth-stencil textures are invalid for 1D.\n      .combine('format', kRegularTextureFormats)\n      .beginSubcases()\n      .combine('width', [\n        kLimitInfo.maxTextureDimension1D.default - 1,\n        kLimitInfo.maxTextureDimension1D.default,\n        kLimitInfo.maxTextureDimension1D.default + 1,\n      ])\n      .combine('height', [1, 2])\n      .combine('depthOrArrayLayers', [1, 2])\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.skipIfTextureFormatNotSupported(format);\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(t => {\n    const { format, width, height, depthOrArrayLayers } = t.params;\n\n    const descriptor: GPUTextureDescriptor = {\n      size: [width, height, depthOrArrayLayers],\n      dimension: '1d' as const,\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    const success =\n      width <= kLimitInfo.maxTextureDimension1D.default && height === 1 && depthOrArrayLayers === 1;\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('texture_size,2d_texture,uncompressed_format')\n  .desc(`Test texture size requirement for 2D texture with uncompressed format.`)\n  .params(u =>\n    u\n      .combine('dimension', [undefined, '2d'] as const)\n      .combine('format', kUncompressedTextureFormats)\n      .combine('size', [\n        // Test the bound of width\n        [kLimitInfo.maxTextureDimension2D.default - 1, 1, 1],\n        [kLimitInfo.maxTextureDimension2D.default, 1, 1],\n        [kLimitInfo.maxTextureDimension2D.default + 1, 1, 1],\n        // Test the bound of height\n        [1, kLimitInfo.maxTextureDimension2D.default - 1, 1],\n        [1, kLimitInfo.maxTextureDimension2D.default, 1],\n        [1, kLimitInfo.maxTextureDimension2D.default + 1, 1],\n        // Test the bound of array layers\n        [1, 1, kLimitInfo.maxTextureArrayLayers.default - 1],\n        [1, 1, kLimitInfo.maxTextureArrayLayers.default],\n        [1, 1, kLimitInfo.maxTextureArrayLayers.default + 1],\n      ])\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.skipIfTextureFormatNotSupported(format);\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(t => {\n    const { dimension, format, size } = t.params;\n\n    const descriptor: GPUTextureDescriptor = {\n      size,\n      dimension,\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    const success =\n      size[0] <= kLimitInfo.maxTextureDimension2D.default &&\n      size[1] <= kLimitInfo.maxTextureDimension2D.default &&\n      size[2] <= kLimitInfo.maxTextureArrayLayers.default;\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('texture_size,2d_texture,compressed_format')\n  .desc(`Test texture size requirement for 2D texture with compressed format.`)\n  .params(u =>\n    u\n      .combine('dimension', [undefined, '2d'] as const)\n      .combine('format', kCompressedTextureFormats)\n      .expand('size', p => {\n        const { blockWidth, blockHeight } = kTextureFormatInfo[p.format];\n        return [\n          // Test the bound of width\n          [kLimitInfo.maxTextureDimension2D.default - 1, 1, 1],\n          [kLimitInfo.maxTextureDimension2D.default - blockWidth, 1, 1],\n          [kLimitInfo.maxTextureDimension2D.default - blockWidth, blockHeight, 1],\n          [kLimitInfo.maxTextureDimension2D.default, 1, 1],\n          [kLimitInfo.maxTextureDimension2D.default, blockHeight, 1],\n          [kLimitInfo.maxTextureDimension2D.default + 1, 1, 1],\n          [kLimitInfo.maxTextureDimension2D.default + blockWidth, 1, 1],\n          [kLimitInfo.maxTextureDimension2D.default + blockWidth, blockHeight, 1],\n          // Test the bound of height\n          [1, kLimitInfo.maxTextureDimension2D.default - 1, 1],\n          [1, kLimitInfo.maxTextureDimension2D.default - blockHeight, 1],\n          [blockWidth, kLimitInfo.maxTextureDimension2D.default - blockHeight, 1],\n          [1, kLimitInfo.maxTextureDimension2D.default, 1],\n          [blockWidth, kLimitInfo.maxTextureDimension2D.default, 1],\n          [1, kLimitInfo.maxTextureDimension2D.default + 1, 1],\n          [1, kLimitInfo.maxTextureDimension2D.default + blockWidth, 1],\n          [blockWidth, kLimitInfo.maxTextureDimension2D.default + blockHeight, 1],\n          // Test the bound of array layers\n          [1, 1, kLimitInfo.maxTextureArrayLayers.default - 1],\n          [blockWidth, 1, kLimitInfo.maxTextureArrayLayers.default - 1],\n          [1, blockHeight, kLimitInfo.maxTextureArrayLayers.default - 1],\n          [blockWidth, blockHeight, kLimitInfo.maxTextureArrayLayers.default - 1],\n          [1, 1, kLimitInfo.maxTextureArrayLayers.default],\n          [blockWidth, 1, kLimitInfo.maxTextureArrayLayers.default],\n          [1, blockHeight, kLimitInfo.maxTextureArrayLayers.default],\n          [blockWidth, blockHeight, kLimitInfo.maxTextureArrayLayers.default],\n          [1, 1, kLimitInfo.maxTextureArrayLayers.default + 1],\n          [blockWidth, 1, kLimitInfo.maxTextureArrayLayers.default + 1],\n          [1, blockHeight, kLimitInfo.maxTextureArrayLayers.default + 1],\n          [blockWidth, blockHeight, kLimitInfo.maxTextureArrayLayers.default + 1],\n        ];\n      })\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(t => {\n    const { dimension, format, size } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    const descriptor: GPUTextureDescriptor = {\n      size,\n      dimension,\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    const success =\n      size[0] % info.blockWidth === 0 &&\n      size[1] % info.blockHeight === 0 &&\n      size[0] <= kLimitInfo.maxTextureDimension2D.default &&\n      size[1] <= kLimitInfo.maxTextureDimension2D.default &&\n      size[2] <= kLimitInfo.maxTextureArrayLayers.default;\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('texture_size,3d_texture,uncompressed_format')\n  .desc(\n    `Test texture size requirement for 3D texture with uncompressed format. Note that depth/stencil formats are invalid for 3D textures, so we only test regular formats.`\n  )\n  .params(u =>\n    u //\n      .combine('format', kRegularTextureFormats)\n      .beginSubcases()\n      .combine('size', [\n        // Test the bound of width\n        [kLimitInfo.maxTextureDimension3D.default - 1, 1, 1],\n        [kLimitInfo.maxTextureDimension3D.default, 1, 1],\n        [kLimitInfo.maxTextureDimension3D.default + 1, 1, 1],\n        // Test the bound of height\n        [1, kLimitInfo.maxTextureDimension3D.default - 1, 1],\n        [1, kLimitInfo.maxTextureDimension3D.default, 1],\n        [1, kLimitInfo.maxTextureDimension3D.default + 1, 1],\n        // Test the bound of depth\n        [1, 1, kLimitInfo.maxTextureDimension3D.default - 1],\n        [1, 1, kLimitInfo.maxTextureDimension3D.default],\n        [1, 1, kLimitInfo.maxTextureDimension3D.default + 1],\n      ])\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.skipIfTextureFormatNotSupported(format);\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(t => {\n    const { format, size } = t.params;\n\n    const descriptor: GPUTextureDescriptor = {\n      size,\n      dimension: '3d' as const,\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    const success =\n      size[0] <= kLimitInfo.maxTextureDimension3D.default &&\n      size[1] <= kLimitInfo.maxTextureDimension3D.default &&\n      size[2] <= kLimitInfo.maxTextureDimension3D.default;\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('texture_size,3d_texture,compressed_format')\n  .desc(`Test texture size requirement for 3D texture with compressed format.`)\n  .params(u =>\n    u //\n      .combine('format', kCompressedTextureFormats)\n      .beginSubcases()\n      .expand('size', p => {\n        const { blockWidth, blockHeight } = kTextureFormatInfo[p.format];\n        return [\n          // Test the bound of width\n          [kLimitInfo.maxTextureDimension3D.default - 1, 1, 1],\n          [kLimitInfo.maxTextureDimension3D.default - blockWidth, 1, 1],\n          [kLimitInfo.maxTextureDimension3D.default - blockWidth, blockHeight, 1],\n          [kLimitInfo.maxTextureDimension3D.default, 1, 1],\n          [kLimitInfo.maxTextureDimension3D.default, blockHeight, 1],\n          [kLimitInfo.maxTextureDimension3D.default + 1, 1, 1],\n          [kLimitInfo.maxTextureDimension3D.default + blockWidth, 1, 1],\n          [kLimitInfo.maxTextureDimension3D.default + blockWidth, blockHeight, 1],\n          // Test the bound of height\n          [1, kLimitInfo.maxTextureDimension3D.default - 1, 1],\n          [1, kLimitInfo.maxTextureDimension3D.default - blockHeight, 1],\n          [blockWidth, kLimitInfo.maxTextureDimension3D.default - blockHeight, 1],\n          [1, kLimitInfo.maxTextureDimension3D.default, 1],\n          [blockWidth, kLimitInfo.maxTextureDimension3D.default, 1],\n          [1, kLimitInfo.maxTextureDimension3D.default + 1, 1],\n          [1, kLimitInfo.maxTextureDimension3D.default + blockWidth, 1],\n          [blockWidth, kLimitInfo.maxTextureDimension3D.default + blockHeight, 1],\n          // Test the bound of depth\n          [1, 1, kLimitInfo.maxTextureDimension3D.default - 1],\n          [blockWidth, 1, kLimitInfo.maxTextureDimension3D.default - 1],\n          [1, blockHeight, kLimitInfo.maxTextureDimension3D.default - 1],\n          [blockWidth, blockHeight, kLimitInfo.maxTextureDimension3D.default - 1],\n          [1, 1, kLimitInfo.maxTextureDimension3D.default],\n          [blockWidth, 1, kLimitInfo.maxTextureDimension3D.default],\n          [1, blockHeight, kLimitInfo.maxTextureDimension3D.default],\n          [blockWidth, blockHeight, kLimitInfo.maxTextureDimension3D.default],\n          [1, 1, kLimitInfo.maxTextureDimension3D.default + 1],\n          [blockWidth, 1, kLimitInfo.maxTextureDimension3D.default + 1],\n          [1, blockHeight, kLimitInfo.maxTextureDimension3D.default + 1],\n          [blockWidth, blockHeight, kLimitInfo.maxTextureDimension3D.default + 1],\n        ];\n      })\n  )\n  .beforeAllSubcases(t => {\n    // Compressed formats are not supported in 3D in WebGPU v1 because they are complicated but not very useful for now.\n    throw new SkipTestCase('Compressed 3D texture is not supported');\n\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(t => {\n    const { format, size } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    assert(\n      kLimitInfo.maxTextureDimension3D.default % info.blockWidth === 0 &&\n        kLimitInfo.maxTextureDimension3D.default % info.blockHeight === 0\n    );\n\n    const descriptor: GPUTextureDescriptor = {\n      size,\n      dimension: '3d' as const,\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    const success =\n      size[0] % info.blockWidth === 0 &&\n      size[1] % info.blockHeight === 0 &&\n      size[0] <= kLimitInfo.maxTextureDimension3D.default &&\n      size[1] <= kLimitInfo.maxTextureDimension3D.default &&\n      size[2] <= kLimitInfo.maxTextureDimension3D.default;\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('texture_usage')\n  .desc(\n    `Test texture usage (single usage or combined usages) for every texture format and every dimension type`\n  )\n  .params(u =>\n    u\n      .combine('dimension', [undefined, ...kTextureDimensions])\n      .combine('format', kTextureFormats)\n      .beginSubcases()\n      // If usage0 and usage1 are the same, then the usage being test is a single usage. Otherwise, it is a combined usage.\n      .combine('usage0', kTextureUsages)\n      .combine('usage1', kTextureUsages)\n      // Filter out incompatible dimension type and format combinations.\n      .filter(({ dimension, format }) => textureDimensionAndFormatCompatible(dimension, format))\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.skipIfTextureFormatNotSupported(format);\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(t => {\n    const { dimension, format, usage0, usage1 } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    const size = [info.blockWidth, info.blockHeight, 1];\n    const usage = usage0 | usage1;\n    const descriptor = {\n      size,\n      dimension,\n      format,\n      usage,\n    };\n\n    let success = true;\n    const appliedDimension = dimension ?? '2d';\n    // Note that we unconditionally test copy usages for all formats. We don't check copySrc/copyDst in kTextureFormatInfo in capability_info.js\n    // if (!info.copySrc && (usage & GPUTextureUsage.COPY_SRC) !== 0) success = false;\n    // if (!info.copyDst && (usage & GPUTextureUsage.COPY_DST) !== 0) success = false;\n    if (!info.color?.storage && (usage & GPUTextureUsage.STORAGE_BINDING) !== 0) success = false;\n    if (\n      (!info.renderable || appliedDimension !== '2d') &&\n      (usage & GPUTextureUsage.RENDER_ATTACHMENT) !== 0\n    )\n      success = false;\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('viewFormats')\n  .desc(\n    `Test creating a texture with viewFormats list for all {texture format}x{view format}. Only compatible view formats should be valid.`\n  )\n  .params(u =>\n    u\n      .combine('formatFeature', kFeaturesForFormats)\n      .combine('viewFormatFeature', kFeaturesForFormats)\n      .beginSubcases()\n      .expand('format', ({ formatFeature }) =>\n        filterFormatsByFeature(formatFeature, kTextureFormats)\n      )\n      .expand('viewFormat', ({ viewFormatFeature }) =>\n        filterFormatsByFeature(viewFormatFeature, kTextureFormats)\n      )\n  )\n  .beforeAllSubcases(t => {\n    const { formatFeature, viewFormatFeature } = t.params;\n    t.selectDeviceOrSkipTestCase([formatFeature, viewFormatFeature]);\n  })\n  .fn(t => {\n    const { format, viewFormat } = t.params;\n    const { blockWidth, blockHeight } = kTextureFormatInfo[format];\n\n    t.skipIfTextureFormatNotSupported(format, viewFormat);\n\n    const compatible = viewCompatible(format, viewFormat);\n\n    // Test the viewFormat in the list.\n    t.expectValidationError(() => {\n      t.device.createTexture({\n        format,\n        size: [blockWidth, blockHeight],\n        usage: GPUTextureUsage.TEXTURE_BINDING,\n        viewFormats: [viewFormat],\n      });\n    }, !compatible);\n\n    // Test the viewFormat and the texture format in the list.\n    t.expectValidationError(() => {\n      t.device.createTexture({\n        format,\n        size: [blockWidth, blockHeight],\n        usage: GPUTextureUsage.TEXTURE_BINDING,\n        viewFormats: [viewFormat, format],\n      });\n    }, !compatible);\n\n    // Test the viewFormat multiple times in the list.\n    t.expectValidationError(() => {\n      t.device.createTexture({\n        format,\n        size: [blockWidth, blockHeight],\n        usage: GPUTextureUsage.TEXTURE_BINDING,\n        viewFormats: [viewFormat, viewFormat],\n      });\n    }, !compatible);\n  });\n"],"mappings":"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"}