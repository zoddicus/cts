{"version":3,"file":"submit.spec.js","names":["description","makeTestGroup","ValidationTest","g","test","desc","paramsSubcasesOnly","cb0Mismatched","cb1Mismatched","beforeAllSubcases","t","selectMismatchedDeviceOrSkipTestCase","undefined","fn","params","mismatched","encoder0","mismatchedDevice","createCommandEncoder","device","cb0","finish","encoder1","cb1","expectValidationError","queue","submit","cb"],"sources":["../../../../../src/webgpu/api/validation/queue/submit.spec.ts"],"sourcesContent":["export const description = `\nTests submit validation.\n\nNote: destroyed buffer/texture/querySet are tested in destroyed/. (unless it gets moved here)\nNote: buffer map state is tested in ./buffer_mapped.spec.ts.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { ValidationTest } from '../validation_test.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('command_buffer,device_mismatch')\n  .desc(\n    `\n    Tests submit cannot be called with command buffers created from another device\n    Test with two command buffers to make sure all command buffers can be validated:\n    - cb0 and cb1 from same device\n    - cb0 and cb1 from different device\n    `\n  )\n  .paramsSubcasesOnly([\n    { cb0Mismatched: false, cb1Mismatched: false }, // control case\n    { cb0Mismatched: true, cb1Mismatched: false },\n    { cb0Mismatched: false, cb1Mismatched: true },\n  ])\n  .beforeAllSubcases(t => {\n    t.selectMismatchedDeviceOrSkipTestCase(undefined);\n  })\n  .fn(t => {\n    const { cb0Mismatched, cb1Mismatched } = t.params;\n    const mismatched = cb0Mismatched || cb1Mismatched;\n\n    const encoder0 = cb0Mismatched\n      ? t.mismatchedDevice.createCommandEncoder()\n      : t.device.createCommandEncoder();\n    const cb0 = encoder0.finish();\n\n    const encoder1 = cb1Mismatched\n      ? t.mismatchedDevice.createCommandEncoder()\n      : t.device.createCommandEncoder();\n    const cb1 = encoder1.finish();\n\n    t.expectValidationError(() => {\n      t.device.queue.submit([cb0, cb1]);\n    }, mismatched);\n  });\n\ng.test('command_buffer,duplicate_buffers')\n  .desc(\n    `\n    Tests submit cannot be called with the same command buffer listed multiple times:\n    `\n  )\n  .fn(t => {\n    const encoder0 = t.device.createCommandEncoder();\n    const cb = encoder0.finish();\n\n    t.expectValidationError(() => {\n      t.device.queue.submit([cb, cb]);\n    }, true);\n  });\n"],"mappings":";;GAAA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA,CAAC,CAED,SAASC,aAAa,QAAQ,4CAA4C;AAC1E,SAASC,cAAc,QAAQ,uBAAuB;;AAEtD,OAAO,MAAMC,CAAC,GAAGF,aAAa,CAACC,cAAc,CAAC;;AAE9CC,CAAC,CAACC,IAAI,CAAC,gCAAgC,CAAC;AACrCC,IAAI;EACF;AACL;AACA;AACA;AACA;AACA;AACE,CAAC;AACAC,kBAAkB,CAAC;AAClB,EAAEC,aAAa,EAAE,KAAK,EAAEC,aAAa,EAAE,KAAK,CAAC,CAAC,EAAE;AAChD,EAAED,aAAa,EAAE,IAAI,EAAEC,aAAa,EAAE,KAAK,CAAC,CAAC;AAC7C,EAAED,aAAa,EAAE,KAAK,EAAEC,aAAa,EAAE,IAAI,CAAC,CAAC;AAC9C,CAAC;AACDC,iBAAiB,CAAC,CAAAC,CAAC,KAAI;EACtBA,CAAC,CAACC,oCAAoC,CAACC,SAAS,CAAC;AACnD,CAAC,CAAC;AACDC,EAAE,CAAC,CAAAH,CAAC,KAAI;EACP,MAAM,EAAEH,aAAa,EAAEC,aAAa,CAAC,CAAC,GAAGE,CAAC,CAACI,MAAM;EACjD,MAAMC,UAAU,GAAGR,aAAa,IAAIC,aAAa;;EAEjD,MAAMQ,QAAQ,GAAGT,aAAa;EAC1BG,CAAC,CAACO,gBAAgB,CAACC,oBAAoB,CAAC,CAAC;EACzCR,CAAC,CAACS,MAAM,CAACD,oBAAoB,CAAC,CAAC;EACnC,MAAME,GAAG,GAAGJ,QAAQ,CAACK,MAAM,CAAC,CAAC;;EAE7B,MAAMC,QAAQ,GAAGd,aAAa;EAC1BE,CAAC,CAACO,gBAAgB,CAACC,oBAAoB,CAAC,CAAC;EACzCR,CAAC,CAACS,MAAM,CAACD,oBAAoB,CAAC,CAAC;EACnC,MAAMK,GAAG,GAAGD,QAAQ,CAACD,MAAM,CAAC,CAAC;;EAE7BX,CAAC,CAACc,qBAAqB,CAAC,MAAM;IAC5Bd,CAAC,CAACS,MAAM,CAACM,KAAK,CAACC,MAAM,CAAC,CAACN,GAAG,EAAEG,GAAG,CAAC,CAAC;EACnC,CAAC,EAAER,UAAU,CAAC;AAChB,CAAC,CAAC;;AAEJZ,CAAC,CAACC,IAAI,CAAC,kCAAkC,CAAC;AACvCC,IAAI;EACF;AACL;AACA;AACE,CAAC;AACAQ,EAAE,CAAC,CAAAH,CAAC,KAAI;EACP,MAAMM,QAAQ,GAAGN,CAAC,CAACS,MAAM,CAACD,oBAAoB,CAAC,CAAC;EAChD,MAAMS,EAAE,GAAGX,QAAQ,CAACK,MAAM,CAAC,CAAC;;EAE5BX,CAAC,CAACc,qBAAqB,CAAC,MAAM;IAC5Bd,CAAC,CAACS,MAAM,CAACM,KAAK,CAACC,MAAM,CAAC,CAACC,EAAE,EAAEA,EAAE,CAAC,CAAC;EACjC,CAAC,EAAE,IAAI,CAAC;AACV,CAAC,CAAC"}