{"version":3,"file":"render_pass_descriptor.spec.js","names":["description","makeTestGroup","range","kMaxColorAttachments","kQueryTypes","GPUConst","kDepthStencilFormats","kRenderableColorTextureFormats","kTextureFormatInfo","ValidationTest","F","createTexture","options","format","width","height","arrayLayerCount","mipLevelCount","sampleCount","usage","GPUTextureUsage","RENDER_ATTACHMENT","device","size","depthOrArrayLayers","getColorAttachment","texture","textureViewDescriptor","view","createView","clearValue","r","g","b","a","loadOp","storeOp","getDepthStencilAttachment","depthClearValue","depthLoadOp","depthStoreOp","stencilClearValue","stencilLoadOp","stencilStoreOp","tryRenderPass","success","descriptor","commandEncoder","createCommandEncoder","renderPass","beginRenderPass","end","expectValidationError","finish","test","desc","fn","t","colorTexture","colorAttachments","depthStencilTexture","depthStencilAttachment","paramsSubcasesOnly","u","combine","undefined","Array","fill","hasDepthStencilAttachment","params","isEmptyColorTargets","i","length","_success","paramsSimple","colorAttachmentsCount","push","beginSubcases","beforeAllSubcases","skipIfTextureFormatNotSupported","attachmentCount","info","shouldError","colorRender","byteCost","limits","maxColorAttachmentBytesPerSample","combineWithParams","formats","colorTexture1x1A","colorTexture1x1B","colorTexture2x2","depthStencilTexture1x1","depthStencilTexture2x2","baseArrayLayer","ARRAY_LAYER_COUNT","MIP_LEVEL_COUNT","COLOR_FORMAT","DEPTH_STENCIL_FORMAT","baseTextureViewDescriptor","dimension","baseMipLevel","resolveTargetTexture","resolveTarget","multisampledColorTexture","multisampledResolveTargetTexture","colorAttachment","TextureUsage","COPY_SRC","COPY_DST","STORAGE_BINDING","TEXTURE_BINDING","STORAGE","isValid","resolveTargetTextureView","multisampledDepthStencilTexture","selectDeviceOrSkipTestCase","feature","depthReadOnly","stencilReadOnly","depthAttachment","trackForCleanup","depthAttachmentView","encoder","renderPassDescriptor","pass","hasDepthSettings","hasStencilSettings","hasDepth","depth","hasStencil","stencil","goodAspectCombo","hasBothDepthOps","hasBothStencilOps","hasNeitherDepthOps","hasNeitherStencilOps","goodDepthCombo","goodStencilCombo","isDepthValueInRange","isInvalid","filter","multisample","resolve","queryType","timestampWrites","querySet","createQuerySet","type","count","beginningOfPassWriteIndex","endOfPassWriteIndex","querySetCount","occlusionQuerySet"],"sources":["../../../../../src/webgpu/api/validation/render_pass/render_pass_descriptor.spec.ts"],"sourcesContent":["export const description = `\nrender pass descriptor validation tests.\n\nTODO: review for completeness\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { range } from '../../../../common/util/util.js';\nimport { kMaxColorAttachments, kQueryTypes } from '../../../capability_info.js';\nimport { GPUConst } from '../../../constants.js';\nimport {\n  kDepthStencilFormats,\n  kRenderableColorTextureFormats,\n  kTextureFormatInfo,\n} from '../../../format_info.js';\nimport { ValidationTest } from '../validation_test.js';\n\nclass F extends ValidationTest {\n  createTexture(\n    options: {\n      format?: GPUTextureFormat;\n      width?: number;\n      height?: number;\n      arrayLayerCount?: number;\n      mipLevelCount?: number;\n      sampleCount?: number;\n      usage?: GPUTextureUsageFlags;\n    } = {}\n  ): GPUTexture {\n    const {\n      format = 'rgba8unorm',\n      width = 16,\n      height = 16,\n      arrayLayerCount = 1,\n      mipLevelCount = 1,\n      sampleCount = 1,\n      usage = GPUTextureUsage.RENDER_ATTACHMENT,\n    } = options;\n\n    return this.device.createTexture({\n      size: { width, height, depthOrArrayLayers: arrayLayerCount },\n      format,\n      mipLevelCount,\n      sampleCount,\n      usage,\n    });\n  }\n\n  getColorAttachment(\n    texture: GPUTexture,\n    textureViewDescriptor?: GPUTextureViewDescriptor\n  ): GPURenderPassColorAttachment {\n    const view = texture.createView(textureViewDescriptor);\n\n    return {\n      view,\n      clearValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n      loadOp: 'clear',\n      storeOp: 'store',\n    };\n  }\n\n  getDepthStencilAttachment(\n    texture: GPUTexture,\n    textureViewDescriptor?: GPUTextureViewDescriptor\n  ): GPURenderPassDepthStencilAttachment {\n    const view = texture.createView(textureViewDescriptor);\n\n    return {\n      view,\n      depthClearValue: 1.0,\n      depthLoadOp: 'clear',\n      depthStoreOp: 'store',\n      stencilClearValue: 0,\n      stencilLoadOp: 'clear',\n      stencilStoreOp: 'store',\n    };\n  }\n\n  tryRenderPass(success: boolean, descriptor: GPURenderPassDescriptor): void {\n    const commandEncoder = this.device.createCommandEncoder();\n    const renderPass = commandEncoder.beginRenderPass(descriptor);\n    renderPass.end();\n\n    this.expectValidationError(() => {\n      commandEncoder.finish();\n    }, !success);\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('attachments,one_color_attachment')\n  .desc(`Test that a render pass works with only one color attachment.`)\n  .fn(t => {\n    const colorTexture = t.createTexture({ format: 'rgba8unorm' });\n    const descriptor = {\n      colorAttachments: [t.getColorAttachment(colorTexture)],\n    };\n\n    t.tryRenderPass(true, descriptor);\n  });\n\ng.test('attachments,one_depth_stencil_attachment')\n  .desc(`Test that a render pass works with only one depthStencil attachment.`)\n  .fn(t => {\n    const depthStencilTexture = t.createTexture({ format: 'depth24plus-stencil8' });\n    const descriptor = {\n      colorAttachments: [],\n      depthStencilAttachment: t.getDepthStencilAttachment(depthStencilTexture),\n    };\n\n    t.tryRenderPass(true, descriptor);\n  });\n\ng.test('color_attachments,empty')\n  .desc(\n    `\n  Test that when colorAttachments has all values be 'undefined' or the sequence is empty, the\n  depthStencilAttachment must not be 'undefined'.\n  `\n  )\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('colorAttachments', [\n        [],\n        [undefined],\n        [undefined, undefined],\n        new Array(8).fill(undefined),\n        [{ format: 'rgba8unorm' }],\n      ])\n      .combine('hasDepthStencilAttachment', [false, true])\n  )\n  .fn(t => {\n    const { colorAttachments, hasDepthStencilAttachment } = t.params;\n\n    let isEmptyColorTargets = true;\n    for (let i = 0; i < colorAttachments.length; i++) {\n      if (colorAttachments[i] !== undefined) {\n        isEmptyColorTargets = false;\n        const colorTexture = t.createTexture();\n        colorAttachments[i] = t.getColorAttachment(colorTexture);\n      }\n    }\n\n    const _success = !isEmptyColorTargets || hasDepthStencilAttachment;\n    t.tryRenderPass(_success, {\n      colorAttachments,\n      depthStencilAttachment: hasDepthStencilAttachment\n        ? t.getDepthStencilAttachment(t.createTexture({ format: 'depth24plus-stencil8' }))\n        : undefined,\n    });\n  });\n\ng.test('color_attachments,limits,maxColorAttachments')\n  .desc(\n    `\n  Test that the out of bound of color attachment indexes are handled.\n    - a validation error is generated when color attachments exceed the maximum limit(8).\n  `\n  )\n  .paramsSimple([\n    { colorAttachmentsCount: 8, _success: true }, // Control case\n    { colorAttachmentsCount: 9, _success: false }, // Out of bounds\n  ])\n  .fn(t => {\n    const { colorAttachmentsCount, _success } = t.params;\n\n    const colorAttachments = [];\n    for (let i = 0; i < colorAttachmentsCount; i++) {\n      const colorTexture = t.createTexture({ format: 'r8unorm' });\n      colorAttachments.push(t.getColorAttachment(colorTexture));\n    }\n\n    t.tryRenderPass(_success, { colorAttachments });\n  });\n\ng.test('color_attachments,limits,maxColorAttachmentBytesPerSample,aligned')\n  .desc(\n    `\n    Test that the total bytes per sample of the formats of the color attachments must be no greater\n    than maxColorAttachmentBytesPerSample when the components are aligned (same format).\n  `\n  )\n  .params(u =>\n    u\n      .combine('format', kRenderableColorTextureFormats)\n      .beginSubcases()\n      .combine(\n        'attachmentCount',\n        range(kMaxColorAttachments, i => i + 1)\n      )\n  )\n  .beforeAllSubcases(t => {\n    t.skipIfTextureFormatNotSupported(t.params.format);\n  })\n  .fn(t => {\n    const { format, attachmentCount } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    const colorAttachments = [];\n    for (let i = 0; i < attachmentCount; i++) {\n      const colorTexture = t.createTexture({ format });\n      colorAttachments.push(t.getColorAttachment(colorTexture));\n    }\n    const shouldError =\n      info.colorRender === undefined ||\n      info.colorRender.byteCost * attachmentCount >\n        t.device.limits.maxColorAttachmentBytesPerSample;\n\n    t.tryRenderPass(!shouldError, { colorAttachments });\n  });\n\ng.test('color_attachments,limits,maxColorAttachmentBytesPerSample,unaligned')\n  .desc(\n    `\n    Test that the total bytes per sample of the formats of the color attachments must be no greater\n    than maxColorAttachmentBytesPerSample when the components are (potentially) unaligned.\n  `\n  )\n  .params(u =>\n    u.combineWithParams([\n      // Alignment causes the first 1 byte R8Unorm to become 4 bytes. So even though\n      // 1+4+8+16+1 < 32, the 4 byte alignment requirement of R32Float makes the first R8Unorm\n      // become 4 and 4+4+8+16+1 > 32. Re-ordering this so the R8Unorm's are at the end, however\n      // is allowed: 4+8+16+1+1 < 32.\n      {\n        formats: [\n          'r8unorm',\n          'r32float',\n          'rgba8unorm',\n          'rgba32float',\n          'r8unorm',\n        ] as GPUTextureFormat[],\n        _success: false,\n      },\n      {\n        formats: [\n          'r32float',\n          'rgba8unorm',\n          'rgba32float',\n          'r8unorm',\n          'r8unorm',\n        ] as GPUTextureFormat[],\n        _success: true,\n      },\n    ])\n  )\n  .fn(t => {\n    const { formats, _success } = t.params;\n\n    const colorAttachments = [];\n    for (const format of formats) {\n      const colorTexture = t.createTexture({ format });\n      colorAttachments.push(t.getColorAttachment(colorTexture));\n    }\n    t.tryRenderPass(_success, { colorAttachments });\n  });\n\ng.test('attachments,same_size')\n  .desc(\n    `\n  Test that attachments have the same size. Otherwise, a validation error should be generated.\n    - Succeed if all attachments have the same size.\n    - Fail if one of the color attachments has a different size.\n    - Fail if the depth stencil attachment has a different size.\n  `\n  )\n  .fn(t => {\n    const colorTexture1x1A = t.createTexture({ width: 1, height: 1, format: 'rgba8unorm' });\n    const colorTexture1x1B = t.createTexture({ width: 1, height: 1, format: 'rgba8unorm' });\n    const colorTexture2x2 = t.createTexture({ width: 2, height: 2, format: 'rgba8unorm' });\n    const depthStencilTexture1x1 = t.createTexture({\n      width: 1,\n      height: 1,\n      format: 'depth24plus-stencil8',\n    });\n    const depthStencilTexture2x2 = t.createTexture({\n      width: 2,\n      height: 2,\n      format: 'depth24plus-stencil8',\n    });\n\n    {\n      // Control case: all the same size (1x1)\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [\n          t.getColorAttachment(colorTexture1x1A),\n          t.getColorAttachment(colorTexture1x1B),\n        ],\n        depthStencilAttachment: t.getDepthStencilAttachment(depthStencilTexture1x1),\n      };\n\n      t.tryRenderPass(true, descriptor);\n    }\n    {\n      // One of the color attachments has a different size\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [\n          t.getColorAttachment(colorTexture1x1A),\n          t.getColorAttachment(colorTexture2x2),\n        ],\n      };\n\n      t.tryRenderPass(false, descriptor);\n    }\n    {\n      // The depth stencil attachment has a different size\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [\n          t.getColorAttachment(colorTexture1x1A),\n          t.getColorAttachment(colorTexture1x1B),\n        ],\n        depthStencilAttachment: t.getDepthStencilAttachment(depthStencilTexture2x2),\n      };\n\n      t.tryRenderPass(false, descriptor);\n    }\n  });\n\ng.test('attachments,color_depth_mismatch')\n  .desc(`Test that attachments match whether they are used for color or depth stencil.`)\n  .fn(t => {\n    const colorTexture = t.createTexture({ format: 'rgba8unorm' });\n    const depthStencilTexture = t.createTexture({ format: 'depth24plus-stencil8' });\n\n    {\n      // Using depth-stencil for color\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [t.getColorAttachment(depthStencilTexture)],\n      };\n\n      t.tryRenderPass(false, descriptor);\n    }\n    {\n      // Using color for depth-stencil\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [],\n        depthStencilAttachment: t.getDepthStencilAttachment(colorTexture),\n      };\n\n      t.tryRenderPass(false, descriptor);\n    }\n  });\n\ng.test('attachments,layer_count')\n  .desc(\n    `\n  Test the layer counts for color or depth stencil.\n    - Fail if using 2D array texture view with arrayLayerCount > 1.\n    - Succeed if using 2D array texture view that covers the first layer of the texture.\n    - Succeed if using 2D array texture view that covers the last layer for depth stencil.\n  `\n  )\n  .paramsSimple([\n    { arrayLayerCount: 5, baseArrayLayer: 0, _success: false },\n    { arrayLayerCount: 1, baseArrayLayer: 0, _success: true },\n    { arrayLayerCount: 1, baseArrayLayer: 9, _success: true },\n  ])\n  .fn(t => {\n    const { arrayLayerCount, baseArrayLayer, _success } = t.params;\n\n    const ARRAY_LAYER_COUNT = 10;\n    const MIP_LEVEL_COUNT = 1;\n    const COLOR_FORMAT = 'rgba8unorm';\n    const DEPTH_STENCIL_FORMAT = 'depth24plus-stencil8';\n\n    const colorTexture = t.createTexture({\n      format: COLOR_FORMAT,\n      width: 32,\n      height: 32,\n      mipLevelCount: MIP_LEVEL_COUNT,\n      arrayLayerCount: ARRAY_LAYER_COUNT,\n    });\n    const depthStencilTexture = t.createTexture({\n      format: DEPTH_STENCIL_FORMAT,\n      width: 32,\n      height: 32,\n      mipLevelCount: MIP_LEVEL_COUNT,\n      arrayLayerCount: ARRAY_LAYER_COUNT,\n    });\n\n    const baseTextureViewDescriptor: GPUTextureViewDescriptor = {\n      dimension: '2d-array',\n      baseArrayLayer,\n      arrayLayerCount,\n      baseMipLevel: 0,\n      mipLevelCount: MIP_LEVEL_COUNT,\n    };\n\n    {\n      // Check 2D array texture view for color\n      const textureViewDescriptor: GPUTextureViewDescriptor = {\n        ...baseTextureViewDescriptor,\n        format: COLOR_FORMAT,\n      };\n\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [t.getColorAttachment(colorTexture, textureViewDescriptor)],\n      };\n\n      t.tryRenderPass(_success, descriptor);\n    }\n    {\n      // Check 2D array texture view for depth stencil\n      const textureViewDescriptor: GPUTextureViewDescriptor = {\n        ...baseTextureViewDescriptor,\n        format: DEPTH_STENCIL_FORMAT,\n      };\n\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [],\n        depthStencilAttachment: t.getDepthStencilAttachment(\n          depthStencilTexture,\n          textureViewDescriptor\n        ),\n      };\n\n      t.tryRenderPass(_success, descriptor);\n    }\n  });\n\ng.test('attachments,mip_level_count')\n  .desc(\n    `\n  Test the mip level count for color or depth stencil.\n    - Fail if using 2D texture view with mipLevelCount > 1.\n    - Succeed if using 2D texture view that covers the first level of the texture.\n    - Succeed if using 2D texture view that covers the last level of the texture.\n  `\n  )\n  .paramsSimple([\n    { mipLevelCount: 2, baseMipLevel: 0, _success: false },\n    { mipLevelCount: 1, baseMipLevel: 0, _success: true },\n    { mipLevelCount: 1, baseMipLevel: 3, _success: true },\n  ])\n  .fn(t => {\n    const { mipLevelCount, baseMipLevel, _success } = t.params;\n\n    const ARRAY_LAYER_COUNT = 1;\n    const MIP_LEVEL_COUNT = 4;\n    const COLOR_FORMAT = 'rgba8unorm';\n    const DEPTH_STENCIL_FORMAT = 'depth24plus-stencil8';\n\n    const colorTexture = t.createTexture({\n      format: COLOR_FORMAT,\n      width: 32,\n      height: 32,\n      mipLevelCount: MIP_LEVEL_COUNT,\n      arrayLayerCount: ARRAY_LAYER_COUNT,\n    });\n    const depthStencilTexture = t.createTexture({\n      format: DEPTH_STENCIL_FORMAT,\n      width: 32,\n      height: 32,\n      mipLevelCount: MIP_LEVEL_COUNT,\n      arrayLayerCount: ARRAY_LAYER_COUNT,\n    });\n\n    const baseTextureViewDescriptor: GPUTextureViewDescriptor = {\n      dimension: '2d',\n      baseArrayLayer: 0,\n      arrayLayerCount: ARRAY_LAYER_COUNT,\n      baseMipLevel,\n      mipLevelCount,\n    };\n\n    {\n      // Check 2D texture view for color\n      const textureViewDescriptor: GPUTextureViewDescriptor = {\n        ...baseTextureViewDescriptor,\n        format: COLOR_FORMAT,\n      };\n\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [t.getColorAttachment(colorTexture, textureViewDescriptor)],\n      };\n\n      t.tryRenderPass(_success, descriptor);\n    }\n    {\n      // Check 2D texture view for depth stencil\n      const textureViewDescriptor: GPUTextureViewDescriptor = {\n        ...baseTextureViewDescriptor,\n        format: DEPTH_STENCIL_FORMAT,\n      };\n\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [],\n        depthStencilAttachment: t.getDepthStencilAttachment(\n          depthStencilTexture,\n          textureViewDescriptor\n        ),\n      };\n\n      t.tryRenderPass(_success, descriptor);\n    }\n  });\n\ng.test('color_attachments,non_multisampled')\n  .desc(\n    `\n  Test that setting a resolve target is invalid if the color attachments is non multisampled.\n  `\n  )\n  .fn(t => {\n    const colorTexture = t.createTexture({ sampleCount: 1 });\n    const resolveTargetTexture = t.createTexture({ sampleCount: 1 });\n\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [\n        {\n          view: colorTexture.createView(),\n          resolveTarget: resolveTargetTexture.createView(),\n          clearValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    };\n\n    t.tryRenderPass(false, descriptor);\n  });\n\ng.test('color_attachments,sample_count')\n  .desc(\n    `\n  Test the usages of multisampled textures for color attachments.\n    - Succeed if using a multisampled color attachment without setting a resolve target.\n    - Fail if using multiple color attachments with different sample counts.\n  `\n  )\n  .fn(t => {\n    const colorTexture = t.createTexture({ sampleCount: 1 });\n    const multisampledColorTexture = t.createTexture({ sampleCount: 4 });\n\n    {\n      // It is allowed to use a multisampled color attachment without setting resolve target\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [t.getColorAttachment(multisampledColorTexture)],\n      };\n      t.tryRenderPass(true, descriptor);\n    }\n    {\n      // It is not allowed to use multiple color attachments with different sample counts\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [\n          t.getColorAttachment(colorTexture),\n          t.getColorAttachment(multisampledColorTexture),\n        ],\n      };\n\n      t.tryRenderPass(false, descriptor);\n    }\n  });\n\ng.test('resolveTarget,sample_count')\n  .desc(\n    `\n  Test that using multisampled resolve target is invalid for color attachments.\n  `\n  )\n  .fn(t => {\n    const multisampledColorTexture = t.createTexture({ sampleCount: 4 });\n    const multisampledResolveTargetTexture = t.createTexture({ sampleCount: 4 });\n\n    const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n    colorAttachment.resolveTarget = multisampledResolveTargetTexture.createView();\n\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [colorAttachment],\n    };\n\n    t.tryRenderPass(false, descriptor);\n  });\n\ng.test('resolveTarget,array_layer_count')\n  .desc(\n    `\n  Test that using a resolve target with array layer count is greater than 1 is invalid for color\n  attachments.\n  `\n  )\n  .fn(t => {\n    const multisampledColorTexture = t.createTexture({ sampleCount: 4 });\n    const resolveTargetTexture = t.createTexture({ arrayLayerCount: 2 });\n\n    const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n    colorAttachment.resolveTarget = resolveTargetTexture.createView({ dimension: '2d-array' });\n\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [colorAttachment],\n    };\n\n    t.tryRenderPass(false, descriptor);\n  });\n\ng.test('resolveTarget,mipmap_level_count')\n  .desc(\n    `\n  Test that using a resolve target with that mipmap level count is greater than 1 is invalid for\n  color attachments.\n  `\n  )\n  .fn(t => {\n    const multisampledColorTexture = t.createTexture({ sampleCount: 4 });\n    const resolveTargetTexture = t.createTexture({ mipLevelCount: 2 });\n\n    const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n    colorAttachment.resolveTarget = resolveTargetTexture.createView();\n\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [colorAttachment],\n    };\n\n    t.tryRenderPass(false, descriptor);\n  });\n\ng.test('resolveTarget,usage')\n  .desc(\n    `\n  Test that using a resolve target whose usage is not RENDER_ATTACHMENT is invalid for color\n  attachments.\n  `\n  )\n  .paramsSimple([\n    { usage: GPUConst.TextureUsage.COPY_SRC | GPUConst.TextureUsage.COPY_DST },\n    { usage: GPUConst.TextureUsage.STORAGE_BINDING | GPUConst.TextureUsage.TEXTURE_BINDING },\n    { usage: GPUConst.TextureUsage.STORAGE_BINDING | GPUConst.TextureUsage.STORAGE },\n    { usage: GPUConst.TextureUsage.RENDER_ATTACHMENT | GPUConst.TextureUsage.TEXTURE_BINDING },\n  ])\n  .fn(t => {\n    const { usage } = t.params;\n\n    const multisampledColorTexture = t.createTexture({ sampleCount: 4 });\n    const resolveTargetTexture = t.createTexture({ usage });\n\n    const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n    colorAttachment.resolveTarget = resolveTargetTexture.createView();\n\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [colorAttachment],\n    };\n\n    const isValid = usage & GPUConst.TextureUsage.RENDER_ATTACHMENT ? true : false;\n    t.tryRenderPass(isValid, descriptor);\n  });\n\ng.test('resolveTarget,error_state')\n  .desc(`Test that a resolve target that has a error is invalid for color attachments.`)\n  .fn(t => {\n    const ARRAY_LAYER_COUNT = 1;\n\n    const multisampledColorTexture = t.createTexture({ sampleCount: 4 });\n    const resolveTargetTexture = t.createTexture({ arrayLayerCount: ARRAY_LAYER_COUNT });\n\n    const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n    t.expectValidationError(() => {\n      colorAttachment.resolveTarget = resolveTargetTexture.createView({\n        dimension: '2d',\n        format: 'rgba8unorm',\n        baseArrayLayer: ARRAY_LAYER_COUNT + 1,\n      });\n    });\n\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [colorAttachment],\n    };\n\n    t.tryRenderPass(false, descriptor);\n  });\n\ng.test('resolveTarget,single_sample_count')\n  .desc(\n    `\n  Test that a resolve target that has multi sample color attachment and a single resolve target is\n  valid.\n  `\n  )\n  .fn(t => {\n    const multisampledColorTexture = t.createTexture({ sampleCount: 4 });\n    const resolveTargetTexture = t.createTexture({ sampleCount: 1 });\n\n    const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n    colorAttachment.resolveTarget = resolveTargetTexture.createView();\n\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [colorAttachment],\n    };\n\n    t.tryRenderPass(true, descriptor);\n  });\n\ng.test('resolveTarget,different_format')\n  .desc(`Test that a resolve target that has a different format is invalid.`)\n  .fn(t => {\n    const multisampledColorTexture = t.createTexture({ sampleCount: 4 });\n    const resolveTargetTexture = t.createTexture({ format: 'bgra8unorm' });\n\n    const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n    colorAttachment.resolveTarget = resolveTargetTexture.createView();\n\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [colorAttachment],\n    };\n\n    t.tryRenderPass(false, descriptor);\n  });\n\ng.test('resolveTarget,different_size')\n  .desc(\n    `\n  Test that a resolve target that has a different size with the color attachment is invalid.\n  `\n  )\n  .fn(t => {\n    const size = 16;\n    const multisampledColorTexture = t.createTexture({ width: size, height: size, sampleCount: 4 });\n    const resolveTargetTexture = t.createTexture({\n      width: size * 2,\n      height: size * 2,\n      mipLevelCount: 2,\n    });\n\n    {\n      const resolveTargetTextureView = resolveTargetTexture.createView({\n        baseMipLevel: 0,\n        mipLevelCount: 1,\n      });\n\n      const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n      colorAttachment.resolveTarget = resolveTargetTextureView;\n\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [colorAttachment],\n      };\n\n      t.tryRenderPass(false, descriptor);\n    }\n    {\n      const resolveTargetTextureView = resolveTargetTexture.createView({ baseMipLevel: 1 });\n\n      const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n      colorAttachment.resolveTarget = resolveTargetTextureView;\n\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [colorAttachment],\n      };\n\n      t.tryRenderPass(true, descriptor);\n    }\n  });\n\ng.test('depth_stencil_attachment,sample_counts_mismatch')\n  .desc(\n    `\n  Test that the depth stencil attachment that has different number of samples with the color\n  attachment is invalid.\n  `\n  )\n  .fn(t => {\n    const multisampledDepthStencilTexture = t.createTexture({\n      sampleCount: 4,\n      format: 'depth24plus-stencil8',\n    });\n\n    {\n      // It is not allowed to use a depth stencil attachment whose sample count is different from\n      // the one of the color attachment.\n      const depthStencilTexture = t.createTexture({\n        sampleCount: 1,\n        format: 'depth24plus-stencil8',\n      });\n      const multisampledColorTexture = t.createTexture({ sampleCount: 4 });\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [t.getColorAttachment(multisampledColorTexture)],\n        depthStencilAttachment: t.getDepthStencilAttachment(depthStencilTexture),\n      };\n\n      t.tryRenderPass(false, descriptor);\n    }\n    {\n      const colorTexture = t.createTexture({ sampleCount: 1 });\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [t.getColorAttachment(colorTexture)],\n        depthStencilAttachment: t.getDepthStencilAttachment(multisampledDepthStencilTexture),\n      };\n\n      t.tryRenderPass(false, descriptor);\n    }\n    {\n      // It is allowed to use a multisampled depth stencil attachment whose sample count is equal to\n      // the one of the color attachment.\n      const multisampledColorTexture = t.createTexture({ sampleCount: 4 });\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [t.getColorAttachment(multisampledColorTexture)],\n        depthStencilAttachment: t.getDepthStencilAttachment(multisampledDepthStencilTexture),\n      };\n\n      t.tryRenderPass(true, descriptor);\n    }\n    {\n      // It is allowed to use a multisampled depth stencil attachment with no color attachment.\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [],\n        depthStencilAttachment: t.getDepthStencilAttachment(multisampledDepthStencilTexture),\n      };\n\n      t.tryRenderPass(true, descriptor);\n    }\n  });\n\ng.test('depth_stencil_attachment,loadOp_storeOp_match_depthReadOnly_stencilReadOnly')\n  .desc(\n    `\n  Test GPURenderPassDepthStencilAttachment Usage:\n    - if the format has a depth aspect:\n      - if depthReadOnly is true\n        - depthLoadOp and depthStoreOp must not be provided\n      - else:\n        - depthLoadOp and depthStoreOp must be provided\n    - if the format has a stencil aspect:\n      - if stencilReadOnly is true\n        - stencilLoadOp and stencilStoreOp must not be provided\n      - else:\n        - stencilLoadOp and stencilStoreOp must be provided\n  `\n  )\n  .params(u =>\n    u\n      .combine('format', kDepthStencilFormats)\n      .beginSubcases() // Note: It's easier to debug if you comment this line out as you can then run an individual case.\n      .combine('depthReadOnly', [undefined, true, false])\n      .combine('depthLoadOp', [undefined, 'clear', 'load'] as GPULoadOp[])\n      .combine('depthStoreOp', [undefined, 'discard', 'store'] as GPUStoreOp[])\n      .combine('stencilReadOnly', [undefined, true, false])\n      .combine('stencilLoadOp', [undefined, 'clear', 'load'] as GPULoadOp[])\n      .combine('stencilStoreOp', [undefined, 'discard', 'store'] as GPUStoreOp[])\n  )\n  .beforeAllSubcases(t => {\n    const info = kTextureFormatInfo[t.params.format as GPUTextureFormat];\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(t => {\n    const {\n      format,\n      depthReadOnly,\n      depthLoadOp,\n      depthStoreOp,\n      stencilReadOnly,\n      stencilLoadOp,\n      stencilStoreOp,\n    } = t.params;\n\n    const depthAttachment = t.trackForCleanup(\n      t.device.createTexture({\n        format,\n        size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n        usage: GPUTextureUsage.RENDER_ATTACHMENT,\n      })\n    );\n    const depthAttachmentView = depthAttachment.createView();\n\n    const encoder = t.device.createCommandEncoder();\n\n    // If depthLoadOp is \"clear\", depthClearValue must be provided and must be between 0.0 and 1.0,\n    // and it will be ignored if depthLoadOp is not \"clear\".\n    const depthClearValue = depthLoadOp === 'clear' ? 0 : undefined;\n    const renderPassDescriptor: GPURenderPassDescriptor = {\n      colorAttachments: [],\n      depthStencilAttachment: {\n        view: depthAttachmentView,\n        depthLoadOp,\n        depthStoreOp,\n        depthReadOnly,\n        stencilLoadOp,\n        stencilStoreOp,\n        stencilReadOnly,\n        depthClearValue,\n      },\n    };\n    const pass = encoder.beginRenderPass(renderPassDescriptor);\n    pass.end();\n\n    const info = kTextureFormatInfo[format];\n    const hasDepthSettings = !!depthLoadOp && !!depthStoreOp && !depthReadOnly;\n    const hasStencilSettings = !!stencilLoadOp && !!stencilStoreOp && !stencilReadOnly;\n    const hasDepth = info.depth;\n    const hasStencil = info.stencil;\n\n    const goodAspectCombo =\n      (hasDepth && hasStencil ? !depthReadOnly === !stencilReadOnly : true) &&\n      (hasDepthSettings ? hasDepth : true) &&\n      (hasStencilSettings ? hasStencil : true);\n\n    const hasBothDepthOps = !!depthLoadOp && !!depthStoreOp;\n    const hasBothStencilOps = !!stencilLoadOp && !!stencilStoreOp;\n    const hasNeitherDepthOps = !depthLoadOp && !depthStoreOp;\n    const hasNeitherStencilOps = !stencilLoadOp && !stencilStoreOp;\n\n    const goodDepthCombo = hasDepth && !depthReadOnly ? hasBothDepthOps : hasNeitherDepthOps;\n    const goodStencilCombo =\n      hasStencil && !stencilReadOnly ? hasBothStencilOps : hasNeitherStencilOps;\n\n    const shouldError = !goodAspectCombo || !goodDepthCombo || !goodStencilCombo;\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, shouldError);\n  });\n\ng.test('depth_stencil_attachment,depth_clear_value')\n  .desc(\n    `\n  Test that depthClearValue is invalid if the value is out of the range(0.0 and 1.0) only when\n  depthLoadOp is 'clear'.\n  `\n  )\n  .params(u =>\n    u\n      .combine('depthLoadOp', ['load', 'clear', undefined] as const)\n      .combine('depthClearValue', [undefined, -1.0, 0.0, 0.5, 1.0, 1.5] as const)\n  )\n  .fn(t => {\n    const { depthLoadOp, depthClearValue } = t.params;\n\n    const depthStencilTexture = t.createTexture({\n      format: depthLoadOp === undefined ? 'stencil8' : 'depth24plus-stencil8',\n    });\n    const depthStencilAttachment = t.getDepthStencilAttachment(depthStencilTexture);\n    depthStencilAttachment.depthClearValue = depthClearValue;\n    depthStencilAttachment.depthLoadOp = depthLoadOp;\n    if (depthLoadOp === undefined) {\n      depthStencilAttachment.depthStoreOp = undefined;\n    }\n\n    const descriptor = {\n      colorAttachments: [t.getColorAttachment(t.createTexture())],\n      depthStencilAttachment,\n    };\n\n    // We can not check for out of range because NaN is not out of range.\n    // So (v < 0.0 || v > 1.0) would return false when depthClearValue is undefined (NaN)\n    const isDepthValueInRange = depthClearValue! >= 0.0 && depthClearValue! <= 1.0;\n    const isInvalid = depthLoadOp === 'clear' && !isDepthValueInRange;\n\n    t.tryRenderPass(!isInvalid, descriptor);\n  });\n\ng.test('resolveTarget,format_supports_resolve')\n  .desc(\n    `\n  For all formats that support 'multisample', test that they can be used as a resolveTarget\n  if and only if they support 'resolve'.\n  `\n  )\n  .params(u =>\n    u\n      .combine('format', kRenderableColorTextureFormats)\n      .filter(t => kTextureFormatInfo[t.format].multisample)\n  )\n  .beforeAllSubcases(t => {\n    t.skipIfTextureFormatNotSupported(t.params.format);\n  })\n  .fn(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    const multisampledColorTexture = t.createTexture({ format, sampleCount: 4 });\n    const resolveTarget = t.createTexture({ format });\n\n    const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n    colorAttachment.resolveTarget = resolveTarget.createView();\n\n    t.tryRenderPass(!!info.colorRender?.resolve, {\n      colorAttachments: [colorAttachment],\n    });\n  });\n\ng.test('timestampWrites,query_set_type')\n  .desc(\n    `\n  Test that all entries of the timestampWrites must have type 'timestamp'. If all query types are\n  not 'timestamp', a validation error should be generated.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('queryType', kQueryTypes)\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase(['timestamp-query']);\n  })\n  .fn(t => {\n    const { queryType } = t.params;\n\n    const timestampWrites = {\n      querySet: t.device.createQuerySet({ type: queryType, count: 2 }),\n      beginningOfPassWriteIndex: 0,\n      endOfPassWriteIndex: 1,\n    };\n\n    const isValid = queryType === 'timestamp';\n\n    const colorTexture = t.createTexture();\n    const descriptor = {\n      colorAttachments: [t.getColorAttachment(colorTexture)],\n      timestampWrites,\n    };\n\n    t.tryRenderPass(isValid, descriptor);\n  });\n\ng.test('timestampWrite,query_index')\n  .desc(\n    `Test that querySet.count should be greater than timestampWrite.queryIndex, and that the\n         query indexes are unique.`\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('beginningOfPassWriteIndex', [undefined, 0, 1, 2, 3] as const)\n      .combine('endOfPassWriteIndex', [undefined, 0, 1, 2, 3] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase(['timestamp-query']);\n  })\n  .fn(t => {\n    const { beginningOfPassWriteIndex, endOfPassWriteIndex } = t.params;\n\n    const querySetCount = 2;\n\n    const timestampWrites = {\n      querySet: t.device.createQuerySet({ type: 'timestamp', count: querySetCount }),\n      beginningOfPassWriteIndex,\n      endOfPassWriteIndex,\n    };\n\n    const isValid =\n      beginningOfPassWriteIndex !== endOfPassWriteIndex &&\n      (beginningOfPassWriteIndex === undefined || beginningOfPassWriteIndex < querySetCount) &&\n      (endOfPassWriteIndex === undefined || endOfPassWriteIndex < querySetCount);\n\n    const colorTexture = t.createTexture();\n    const descriptor = {\n      colorAttachments: [t.getColorAttachment(colorTexture)],\n      timestampWrites,\n    };\n\n    t.tryRenderPass(isValid, descriptor);\n  });\n\ng.test('occlusionQuerySet,query_set_type')\n  .desc(`Test that occlusionQuerySet must have type 'occlusion'.`)\n  .params(u => u.combine('queryType', kQueryTypes))\n  .beforeAllSubcases(t => {\n    if (t.params.queryType === 'timestamp') {\n      t.selectDeviceOrSkipTestCase(['timestamp-query']);\n    }\n  })\n  .fn(t => {\n    const { queryType } = t.params;\n\n    const querySet = t.device.createQuerySet({\n      type: queryType,\n      count: 1,\n    });\n\n    const colorTexture = t.createTexture();\n    const descriptor = {\n      colorAttachments: [t.getColorAttachment(colorTexture)],\n      occlusionQuerySet: querySet,\n    };\n\n    const isValid = queryType === 'occlusion';\n    t.tryRenderPass(isValid, descriptor);\n  });\n"],"mappings":"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"}