{"version":3,"file":"createBindGroup.spec.js","names":["description","makeTestGroup","assert","makeValueTestVariant","unreachable","allBindingEntries","bindingTypeInfo","bufferBindingEntries","bufferBindingTypeInfo","kBindableResources","kBufferBindingTypes","kBufferUsages","kCompareFunctions","kSamplerBindingTypes","kTextureUsages","kTextureViewDimensions","sampledAndStorageBindingEntries","texBindingTypeInfo","GPUConst","kAllTextureFormats","kTextureFormatInfo","kResourceStates","getTextureDimensionFromView","ValidationTest","clone","descriptor","JSON","parse","stringify","g","kStorageTextureFormats","filter","f","color","storage","test","desc","paramsSubcasesOnly","u","combine","fn","t","layoutEntryCount","bindGroupEntryCount","params","layoutEntries","i","push","binding","visibility","GPUShaderStage","COMPUTE","buffer","type","bindGroupLayout","device","createBindGroupLayout","entries","resource","getStorageBuffer","shouldError","expectValidationError","createBindGroup","layout","layoutBinding","resourceType","entry","info","getBindingResource","resourceBindingIsCompatible","unless","usage","TextureUsage","STORAGE_BINDING","FRAGMENT","appliedUsage","RENDER_ATTACHMENT","size","width","height","depthOrArrayLayers","format","sampleCount","createTexture","createView","sampleType","texture","goodDescriptor","GPUTextureUsage","TEXTURE_BINDING","mismatchedTextureFormats","mismatchedTextureFormat","badDescriptor","p","viewDimension","beginSubcases","dimension","storageTexture","access","skipIfTextureViewDimensionNotSupported","isCompatibility","skipIf","textureView","multisampled","undefined","isValid","offset","_success","createBuffer","GPUBufferUsage","STORAGE","expand","minBindingSize","storageBuffer","state","bgl","validStages","createBufferWithState","createTextureWithState","beforeAllSubcases","selectMismatchedDeviceOrSkipTestCase","mismatched","sourceDevice","mismatchedDevice","ShaderStage","VERTEX","getUniformBuffer","sampler","combineWithParams","resource0Mismatched","resource1Mismatched","resource0","getDeviceMismatchedBindingResource","resource1","usage0","usage1","baseMipLevel","mipLevelCount","MIP_LEVEL_COUNT","storageTextureFormat","resourceFormat","BufferUsage","MAP_READ","MAP_WRITE","UNIFORM","add","mult","offsetAddMult","minAlignment","limits","base","limit","bindingSize","maxBindingSize","offsetMult","bufferSizeAddition","bufferSize","effectiveBindingSize","createSampler","bgType","compareFunction","compare"],"sources":["../../../../src/webgpu/api/validation/createBindGroup.spec.ts"],"sourcesContent":["export const description = `\n  createBindGroup validation tests.\n\n  TODO: Ensure sure tests cover all createBindGroup validation rules.\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { assert, makeValueTestVariant, unreachable } from '../../../common/util/util.js';\nimport {\n  allBindingEntries,\n  bindingTypeInfo,\n  bufferBindingEntries,\n  bufferBindingTypeInfo,\n  kBindableResources,\n  kBufferBindingTypes,\n  kBufferUsages,\n  kCompareFunctions,\n  kSamplerBindingTypes,\n  kTextureUsages,\n  kTextureViewDimensions,\n  sampledAndStorageBindingEntries,\n  texBindingTypeInfo,\n} from '../../capability_info.js';\nimport { GPUConst } from '../../constants.js';\nimport { kAllTextureFormats, kTextureFormatInfo } from '../../format_info.js';\nimport { kResourceStates } from '../../gpu_test.js';\nimport { getTextureDimensionFromView } from '../../util/texture/base.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nfunction clone<T extends GPUTextureDescriptor>(descriptor: T): T {\n  return JSON.parse(JSON.stringify(descriptor));\n}\n\nexport const g = makeTestGroup(ValidationTest);\n\nconst kStorageTextureFormats = kAllTextureFormats.filter(f => kTextureFormatInfo[f].color?.storage);\n\ng.test('binding_count_mismatch')\n  .desc('Test that the number of entries must match the number of entries in the BindGroupLayout.')\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('layoutEntryCount', [1, 2, 3])\n      .combine('bindGroupEntryCount', [1, 2, 3])\n  )\n  .fn(t => {\n    const { layoutEntryCount, bindGroupEntryCount } = t.params;\n\n    const layoutEntries: Array<GPUBindGroupLayoutEntry> = [];\n    for (let i = 0; i < layoutEntryCount; ++i) {\n      layoutEntries.push({\n        binding: i,\n        visibility: GPUShaderStage.COMPUTE,\n        buffer: { type: 'storage' },\n      });\n    }\n    const bindGroupLayout = t.device.createBindGroupLayout({ entries: layoutEntries });\n\n    const entries: Array<GPUBindGroupEntry> = [];\n    for (let i = 0; i < bindGroupEntryCount; ++i) {\n      entries.push({\n        binding: i,\n        resource: { buffer: t.getStorageBuffer() },\n      });\n    }\n\n    const shouldError = layoutEntryCount !== bindGroupEntryCount;\n    t.expectValidationError(() => {\n      t.device.createBindGroup({\n        entries,\n        layout: bindGroupLayout,\n      });\n    }, shouldError);\n  });\n\ng.test('binding_must_be_present_in_layout')\n  .desc(\n    'Test that the binding slot for each entry matches a binding slot defined in the BindGroupLayout.'\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('layoutBinding', [0, 1, 2])\n      .combine('binding', [0, 1, 2])\n  )\n  .fn(t => {\n    const { layoutBinding, binding } = t.params;\n\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [\n        { binding: layoutBinding, visibility: GPUShaderStage.COMPUTE, buffer: { type: 'storage' } },\n      ],\n    });\n\n    const descriptor = {\n      entries: [{ binding, resource: { buffer: t.getStorageBuffer() } }],\n      layout: bindGroupLayout,\n    };\n\n    const shouldError = layoutBinding !== binding;\n    t.expectValidationError(() => {\n      t.device.createBindGroup(descriptor);\n    }, shouldError);\n  });\n\ng.test('binding_must_contain_resource_defined_in_layout')\n  .desc(\n    'Test that only compatible resource types specified in the BindGroupLayout are allowed for each entry.'\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('resourceType', kBindableResources)\n      .combine('entry', allBindingEntries(false))\n  )\n  .fn(t => {\n    const { resourceType, entry } = t.params;\n    const info = bindingTypeInfo(entry);\n\n    const layout = t.device.createBindGroupLayout({\n      entries: [{ binding: 0, visibility: GPUShaderStage.COMPUTE, ...entry }],\n    });\n\n    const resource = t.getBindingResource(resourceType);\n\n    let resourceBindingIsCompatible;\n    switch (info.resource) {\n      // Either type of sampler may be bound to a filtering sampler binding.\n      case 'filtSamp':\n        resourceBindingIsCompatible = resourceType === 'filtSamp' || resourceType === 'nonFiltSamp';\n        break;\n      // But only non-filtering samplers can be used with non-filtering sampler bindings.\n      case 'nonFiltSamp':\n        resourceBindingIsCompatible = resourceType === 'nonFiltSamp';\n        break;\n      default:\n        resourceBindingIsCompatible = info.resource === resourceType;\n        break;\n    }\n    t.expectValidationError(() => {\n      t.device.createBindGroup({ layout, entries: [{ binding: 0, resource }] });\n    }, !resourceBindingIsCompatible);\n  });\n\ng.test('texture_binding_must_have_correct_usage')\n  .desc('Tests that texture bindings must have the correct usage.')\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('entry', sampledAndStorageBindingEntries(false))\n      .combine('usage', kTextureUsages)\n      .unless(({ entry, usage }) => {\n        const info = texBindingTypeInfo(entry);\n        // Can't create the texture for this (usage=STORAGE_BINDING and sampleCount=4), so skip.\n        return usage === GPUConst.TextureUsage.STORAGE_BINDING && info.resource === 'sampledTexMS';\n      })\n  )\n  .fn(t => {\n    const { entry, usage } = t.params;\n    const info = texBindingTypeInfo(entry);\n\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [{ binding: 0, visibility: GPUShaderStage.FRAGMENT, ...entry }],\n    });\n\n    // The `RENDER_ATTACHMENT` usage must be specified if sampleCount > 1 according to WebGPU SPEC.\n    const appliedUsage =\n      info.resource === 'sampledTexMS' ? usage | GPUConst.TextureUsage.RENDER_ATTACHMENT : usage;\n\n    const descriptor = {\n      size: { width: 16, height: 16, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm' as const,\n      usage: appliedUsage,\n      sampleCount: info.resource === 'sampledTexMS' ? 4 : 1,\n    };\n    const resource = t.device.createTexture(descriptor).createView();\n\n    const shouldError = (usage & info.usage) === 0;\n    t.expectValidationError(() => {\n      t.device.createBindGroup({\n        entries: [{ binding: 0, resource }],\n        layout: bindGroupLayout,\n      });\n    }, shouldError);\n  });\n\ng.test('texture_must_have_correct_component_type')\n  .desc(\n    `\n    Tests that texture bindings must have a format that matches the sample type specified in the BindGroupLayout.\n    - Tests a compatible format for every sample type\n    - Tests an incompatible format for every sample type`\n  )\n  .params(u => u.combine('sampleType', ['float', 'sint', 'uint'] as const))\n  .fn(t => {\n    const { sampleType } = t.params;\n\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.FRAGMENT,\n          texture: { sampleType },\n        },\n      ],\n    });\n\n    let format: GPUTextureFormat;\n    if (sampleType === 'float') {\n      format = 'r8unorm';\n    } else if (sampleType === 'sint') {\n      format = 'r8sint';\n    } else if (sampleType === 'uint') {\n      format = 'r8uint';\n    } else {\n      unreachable('Unexpected texture component type');\n    }\n\n    const goodDescriptor = {\n      size: { width: 16, height: 16, depthOrArrayLayers: 1 },\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    // Control case\n    t.device.createBindGroup({\n      entries: [\n        {\n          binding: 0,\n          resource: t.device.createTexture(goodDescriptor).createView(),\n        },\n      ],\n      layout: bindGroupLayout,\n    });\n\n    function* mismatchedTextureFormats(): Iterable<GPUTextureFormat> {\n      if (sampleType !== 'float') {\n        yield 'r8unorm';\n      }\n      if (sampleType !== 'sint') {\n        yield 'r8sint';\n      }\n      if (sampleType !== 'uint') {\n        yield 'r8uint';\n      }\n    }\n\n    // Mismatched texture binding formats are not valid.\n    for (const mismatchedTextureFormat of mismatchedTextureFormats()) {\n      const badDescriptor: GPUTextureDescriptor = clone(goodDescriptor);\n      badDescriptor.format = mismatchedTextureFormat;\n\n      t.expectValidationError(() => {\n        t.device.createBindGroup({\n          entries: [{ binding: 0, resource: t.device.createTexture(badDescriptor).createView() }],\n          layout: bindGroupLayout,\n        });\n      });\n    }\n  });\n\ng.test('texture_must_have_correct_dimension')\n  .desc(\n    `\n    Test that bound texture views match the dimensions supplied in the BindGroupLayout\n      - Test for every GPUTextureViewDimension\n      - Test for both TEXTURE_BINDING and STORAGE_BINDING.\n  `\n  )\n  .params(u =>\n    u\n      .combine('usage', [\n        GPUConst.TextureUsage.TEXTURE_BINDING,\n        GPUConst.TextureUsage.STORAGE_BINDING,\n      ])\n      .combine('viewDimension', kTextureViewDimensions)\n      .unless(\n        p =>\n          p.usage === GPUConst.TextureUsage.STORAGE_BINDING &&\n          (p.viewDimension === 'cube' || p.viewDimension === 'cube-array')\n      )\n      .beginSubcases()\n      .combine('dimension', kTextureViewDimensions)\n  )\n  .fn(t => {\n    const { usage, viewDimension, dimension } = t.params;\n\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [\n        usage === GPUTextureUsage.TEXTURE_BINDING\n          ? {\n              binding: 0,\n              visibility: GPUShaderStage.FRAGMENT,\n              texture: { viewDimension },\n            }\n          : {\n              binding: 0,\n              visibility: GPUShaderStage.FRAGMENT,\n              storageTexture: { access: 'write-only', format: 'rgba8unorm', viewDimension },\n            },\n      ],\n    });\n\n    let height = 16;\n    let depthOrArrayLayers = 6;\n    if (dimension === '1d') {\n      height = 1;\n      depthOrArrayLayers = 1;\n    }\n\n    const texture = t.device.createTexture({\n      size: { width: 16, height, depthOrArrayLayers },\n      format: 'rgba8unorm' as const,\n      usage,\n      dimension: getTextureDimensionFromView(dimension),\n    });\n\n    t.skipIfTextureViewDimensionNotSupported(viewDimension, dimension);\n    if (t.isCompatibility && texture.dimension === '2d') {\n      if (depthOrArrayLayers === 1) {\n        t.skipIf(\n          viewDimension !== '2d',\n          '1 layer 2d textures default to textureBindingViewDimension: \"2d\" in compat mode'\n        );\n      } else {\n        t.skipIf(\n          viewDimension !== '2d-array',\n          '> 1 layer 2d textures default to textureBindingViewDimension \"2d-array\" in compat mode'\n        );\n      }\n    }\n\n    const shouldError = viewDimension !== dimension;\n    const textureView = texture.createView({ dimension });\n\n    t.expectValidationError(() => {\n      t.device.createBindGroup({\n        entries: [{ binding: 0, resource: textureView }],\n        layout: bindGroupLayout,\n      });\n    }, shouldError);\n  });\n\ng.test('multisampled_validation')\n  .desc(\n    `\n    Test that the sample count of the texture is greater than 1 if the BindGroup entry's\n    multisampled is true. Otherwise, the texture's sampleCount should be 1.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('multisampled', [true, false])\n      .beginSubcases()\n      .combine('sampleCount', [1, 4])\n  )\n  .fn(t => {\n    const { multisampled, sampleCount } = t.params;\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.FRAGMENT,\n          texture: { multisampled, sampleType: multisampled ? 'unfilterable-float' : undefined },\n        },\n      ],\n    });\n\n    const texture = t.device.createTexture({\n      size: { width: 16, height: 16, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm' as const,\n      usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.RENDER_ATTACHMENT,\n      sampleCount,\n    });\n\n    const isValid = (!multisampled && sampleCount === 1) || (multisampled && sampleCount > 1);\n\n    const textureView = texture.createView();\n    t.expectValidationError(() => {\n      t.device.createBindGroup({\n        entries: [{ binding: 0, resource: textureView }],\n        layout: bindGroupLayout,\n      });\n    }, !isValid);\n  });\n\ng.test('buffer_offset_and_size_for_bind_groups_match')\n  .desc(\n    `\n    Test that a buffer binding's [offset, offset + size) must be contained in the BindGroup entry's buffer.\n    - Test for various offsets and sizes`\n  )\n  .paramsSubcasesOnly([\n    { offset: 0, size: 512, _success: true }, // offset 0 is valid\n    { offset: 256, size: 256, _success: true }, // offset 256 (aligned) is valid\n\n    // Touching the end of the buffer\n    { offset: 0, size: 1024, _success: true },\n    { offset: 0, size: undefined, _success: true },\n    { offset: 256 * 3, size: 256, _success: true },\n    { offset: 256 * 3, size: undefined, _success: true },\n\n    // Zero-sized bindings\n    { offset: 0, size: 0, _success: false },\n    { offset: 256, size: 0, _success: false },\n    { offset: 1024, size: 0, _success: false },\n    { offset: 1024, size: undefined, _success: false },\n\n    // Unaligned buffer offset is invalid\n    { offset: 1, size: 256, _success: false },\n    { offset: 1, size: undefined, _success: false },\n    { offset: 128, size: 256, _success: false },\n    { offset: 255, size: 256, _success: false },\n\n    // Out-of-bounds\n    { offset: 256 * 5, size: 0, _success: false }, // offset is OOB\n    { offset: 0, size: 256 * 5, _success: false }, // size is OOB\n    { offset: 1024, size: 1, _success: false }, // offset+size is OOB\n  ])\n  .fn(t => {\n    const { offset, size, _success } = t.params;\n\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [{ binding: 0, visibility: GPUShaderStage.COMPUTE, buffer: { type: 'storage' } }],\n    });\n\n    const buffer = t.device.createBuffer({\n      size: 1024,\n      usage: GPUBufferUsage.STORAGE,\n    });\n\n    const descriptor = {\n      entries: [\n        {\n          binding: 0,\n          resource: { buffer, offset, size },\n        },\n      ],\n      layout: bindGroupLayout,\n    };\n\n    if (_success) {\n      // Control case\n      t.device.createBindGroup(descriptor);\n    } else {\n      // Buffer offset and/or size don't match in bind groups.\n      t.expectValidationError(() => {\n        t.device.createBindGroup(descriptor);\n      });\n    }\n  });\n\ng.test('minBindingSize')\n  .desc('Tests that minBindingSize is correctly enforced.')\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('minBindingSize', [undefined, 4, 8, 256])\n      .expand('size', ({ minBindingSize }) =>\n        minBindingSize !== undefined\n          ? [minBindingSize - 4, minBindingSize, minBindingSize + 4]\n          : [4, 256]\n      )\n  )\n  .fn(t => {\n    const { size, minBindingSize } = t.params;\n\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.FRAGMENT,\n          buffer: {\n            type: 'storage',\n            minBindingSize,\n          },\n        },\n      ],\n    });\n\n    const storageBuffer = t.device.createBuffer({\n      size,\n      usage: GPUBufferUsage.STORAGE,\n    });\n\n    t.expectValidationError(\n      () => {\n        t.device.createBindGroup({\n          layout: bindGroupLayout,\n          entries: [\n            {\n              binding: 0,\n              resource: { buffer: storageBuffer },\n            },\n          ],\n        });\n      },\n      minBindingSize !== undefined && size < minBindingSize\n    );\n  });\n\ng.test('buffer,resource_state')\n  .desc('Test bind group creation with various buffer resource states')\n  .paramsSubcasesOnly(u =>\n    u.combine('state', kResourceStates).combine('entry', bufferBindingEntries(true))\n  )\n  .fn(t => {\n    const { state, entry } = t.params;\n\n    assert(entry.buffer !== undefined);\n    const info = bufferBindingTypeInfo(entry.buffer);\n\n    const bgl = t.device.createBindGroupLayout({\n      entries: [\n        {\n          ...entry,\n          binding: 0,\n          visibility: info.validStages,\n        },\n      ],\n    });\n\n    const buffer = t.createBufferWithState(state, {\n      usage: info.usage,\n      size: 4,\n    });\n\n    t.expectValidationError(() => {\n      t.device.createBindGroup({\n        layout: bgl,\n        entries: [\n          {\n            binding: 0,\n            resource: {\n              buffer,\n            },\n          },\n        ],\n      });\n    }, state === 'invalid');\n  });\n\ng.test('texture,resource_state')\n  .desc('Test bind group creation with various texture resource states')\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('state', kResourceStates)\n      .combine('entry', sampledAndStorageBindingEntries(true, 'rgba8unorm'))\n  )\n  .fn(t => {\n    const { state, entry } = t.params;\n    const info = texBindingTypeInfo(entry);\n\n    const bgl = t.device.createBindGroupLayout({\n      entries: [\n        {\n          ...entry,\n          binding: 0,\n          visibility: info.validStages,\n        },\n      ],\n    });\n\n    // The `RENDER_ATTACHMENT` usage must be specified if sampleCount > 1 according to WebGPU SPEC.\n    const usage = entry.texture?.multisampled\n      ? info.usage | GPUConst.TextureUsage.RENDER_ATTACHMENT\n      : info.usage;\n    const texture = t.createTextureWithState(state, {\n      usage,\n      size: [1, 1],\n      format: 'rgba8unorm',\n      sampleCount: entry.texture?.multisampled ? 4 : 1,\n    });\n\n    let textureView: GPUTextureView;\n    t.expectValidationError(() => {\n      textureView = texture.createView();\n    }, state === 'invalid');\n\n    t.expectValidationError(() => {\n      t.device.createBindGroup({\n        layout: bgl,\n        entries: [\n          {\n            binding: 0,\n            resource: textureView,\n          },\n        ],\n      });\n    }, state === 'invalid');\n  });\n\ng.test('bind_group_layout,device_mismatch')\n  .desc(\n    'Tests createBindGroup cannot be called with a bind group layout created from another device'\n  )\n  .paramsSubcasesOnly(u => u.combine('mismatched', [true, false]))\n  .beforeAllSubcases(t => {\n    t.selectMismatchedDeviceOrSkipTestCase(undefined);\n  })\n  .fn(t => {\n    const mismatched = t.params.mismatched;\n\n    const sourceDevice = mismatched ? t.mismatchedDevice : t.device;\n\n    const bgl = sourceDevice.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUConst.ShaderStage.VERTEX,\n          buffer: {},\n        },\n      ],\n    });\n\n    t.expectValidationError(() => {\n      t.device.createBindGroup({\n        layout: bgl,\n        entries: [\n          {\n            binding: 0,\n            resource: { buffer: t.getUniformBuffer() },\n          },\n        ],\n      });\n    }, mismatched);\n  });\n\ng.test('binding_resources,device_mismatch')\n  .desc(\n    `\n    Tests createBindGroup cannot be called with various resources created from another device\n    Test with two resources to make sure all resources can be validated:\n    - resource0 and resource1 from same device\n    - resource0 and resource1 from different device\n\n    TODO: test GPUExternalTexture as a resource\n    `\n  )\n  .params(u =>\n    u\n      .combine('entry', [\n        { buffer: { type: 'storage' } },\n        { sampler: { type: 'filtering' } },\n        { texture: { multisampled: false } },\n        { storageTexture: { access: 'write-only', format: 'rgba8unorm' } },\n      ] as const)\n      .beginSubcases()\n      .combineWithParams([\n        { resource0Mismatched: false, resource1Mismatched: false }, //control case\n        { resource0Mismatched: true, resource1Mismatched: false },\n        { resource0Mismatched: false, resource1Mismatched: true },\n      ])\n  )\n  .beforeAllSubcases(t => {\n    t.selectMismatchedDeviceOrSkipTestCase(undefined);\n  })\n  .fn(t => {\n    const { entry, resource0Mismatched, resource1Mismatched } = t.params;\n\n    const info = bindingTypeInfo(entry);\n\n    const resource0 = resource0Mismatched\n      ? t.getDeviceMismatchedBindingResource(info.resource)\n      : t.getBindingResource(info.resource);\n    const resource1 = resource1Mismatched\n      ? t.getDeviceMismatchedBindingResource(info.resource)\n      : t.getBindingResource(info.resource);\n\n    const bgl = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: info.validStages,\n          ...entry,\n        },\n        {\n          binding: 1,\n          visibility: info.validStages,\n          ...entry,\n        },\n      ],\n    });\n\n    t.expectValidationError(() => {\n      t.device.createBindGroup({\n        layout: bgl,\n        entries: [\n          {\n            binding: 0,\n            resource: resource0,\n          },\n          {\n            binding: 1,\n            resource: resource1,\n          },\n        ],\n      });\n    }, resource0Mismatched || resource1Mismatched);\n  });\n\ng.test('storage_texture,usage')\n  .desc(\n    `\n    Test that the texture usage contains STORAGE_BINDING if the BindGroup entry defines\n    storageTexture.\n  `\n  )\n  .params(u =>\n    u //\n      // If usage0 and usage1 are the same, the usage being test is a single usage. Otherwise, it's\n      // a combined usage.\n      .combine('usage0', kTextureUsages)\n      .combine('usage1', kTextureUsages)\n  )\n  .fn(t => {\n    const { usage0, usage1 } = t.params;\n\n    const usage = usage0 | usage1;\n\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.FRAGMENT,\n          storageTexture: { access: 'write-only', format: 'rgba8unorm' },\n        },\n      ],\n    });\n\n    const texture = t.device.createTexture({\n      size: { width: 16, height: 16, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm' as const,\n      usage,\n    });\n\n    const isValid = GPUTextureUsage.STORAGE_BINDING & usage;\n\n    const textureView = texture.createView();\n    t.expectValidationError(() => {\n      t.device.createBindGroup({\n        entries: [{ binding: 0, resource: textureView }],\n        layout: bindGroupLayout,\n      });\n    }, !isValid);\n  });\n\ng.test('storage_texture,mip_level_count')\n  .desc(\n    `\n    Test that the mip level count of the resource of the BindGroup entry as a descriptor is 1 if the\n    BindGroup entry defines storageTexture. If the mip level count is not 1, a validation error\n    should be generated.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('baseMipLevel', [1, 2])\n      .combine('mipLevelCount', [1, 2])\n  )\n  .fn(t => {\n    const { baseMipLevel, mipLevelCount } = t.params;\n\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.FRAGMENT,\n          storageTexture: { access: 'write-only', format: 'rgba8unorm' },\n        },\n      ],\n    });\n\n    const MIP_LEVEL_COUNT = 4;\n    const texture = t.device.createTexture({\n      size: { width: 16, height: 16, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm' as const,\n      usage: GPUTextureUsage.STORAGE_BINDING,\n      mipLevelCount: MIP_LEVEL_COUNT,\n    });\n\n    const textureView = texture.createView({ baseMipLevel, mipLevelCount });\n\n    t.expectValidationError(() => {\n      t.device.createBindGroup({\n        entries: [{ binding: 0, resource: textureView }],\n        layout: bindGroupLayout,\n      });\n    }, mipLevelCount !== 1);\n  });\n\ng.test('storage_texture,format')\n  .desc(\n    `\n    Test that the format of the storage texture is equal to resource's descriptor format if the\n    BindGroup entry defines storageTexture.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('storageTextureFormat', kStorageTextureFormats)\n      .combine('resourceFormat', kStorageTextureFormats)\n  )\n  .fn(t => {\n    const { storageTextureFormat, resourceFormat } = t.params;\n\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.FRAGMENT,\n          storageTexture: { access: 'write-only', format: storageTextureFormat },\n        },\n      ],\n    });\n\n    const texture = t.device.createTexture({\n      size: { width: 16, height: 16, depthOrArrayLayers: 1 },\n      format: resourceFormat,\n      usage: GPUTextureUsage.STORAGE_BINDING,\n    });\n\n    const isValid = storageTextureFormat === resourceFormat;\n    const textureView = texture.createView({ format: resourceFormat });\n    t.expectValidationError(() => {\n      t.device.createBindGroup({\n        entries: [{ binding: 0, resource: textureView }],\n        layout: bindGroupLayout,\n      });\n    }, !isValid);\n  });\n\ng.test('buffer,usage')\n  .desc(\n    `\n    Test that the buffer usage contains 'UNIFORM' if the BindGroup entry defines buffer and it's\n    type is 'uniform', and the buffer usage contains 'STORAGE' if the BindGroup entry's buffer type\n    is 'storage'|read-only-storage'.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('type', kBufferBindingTypes)\n      // If usage0 and usage1 are the same, the usage being test is a single usage. Otherwise, it's\n      // a combined usage.\n      .beginSubcases()\n      .combine('usage0', kBufferUsages)\n      .combine('usage1', kBufferUsages)\n      .unless(\n        ({ usage0, usage1 }) =>\n          ((usage0 | usage1) & (GPUConst.BufferUsage.MAP_READ | GPUConst.BufferUsage.MAP_WRITE)) !==\n          0\n      )\n  )\n  .fn(t => {\n    const { type, usage0, usage1 } = t.params;\n\n    const usage = usage0 | usage1;\n\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.COMPUTE,\n          buffer: { type },\n        },\n      ],\n    });\n\n    const buffer = t.device.createBuffer({\n      size: 4,\n      usage,\n    });\n\n    let isValid = false;\n    if (type === 'uniform') {\n      isValid = GPUBufferUsage.UNIFORM & usage ? true : false;\n    } else if (type === 'storage' || type === 'read-only-storage') {\n      isValid = GPUBufferUsage.STORAGE & usage ? true : false;\n    }\n\n    t.expectValidationError(() => {\n      t.device.createBindGroup({\n        entries: [{ binding: 0, resource: { buffer } }],\n        layout: bindGroupLayout,\n      });\n    }, !isValid);\n  });\n\ng.test('buffer,resource_offset')\n  .desc(\n    `\n    Test that the resource.offset of the BindGroup entry is a multiple of limits.\n    'minUniformBufferOffsetAlignment|minStorageBufferOffsetAlignment' if the BindGroup entry defines\n    buffer and the buffer type is 'uniform|storage|read-only-storage'.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('type', kBufferBindingTypes)\n      .beginSubcases()\n      .combine('offsetAddMult', [\n        { add: 0, mult: 0 },\n        { add: 0, mult: 0.5 },\n        { add: 0, mult: 1.5 },\n        { add: 2, mult: 0 },\n      ])\n  )\n  .fn(t => {\n    const { type, offsetAddMult } = t.params;\n    const minAlignment =\n      t.device.limits[\n        type === 'uniform' ? 'minUniformBufferOffsetAlignment' : 'minStorageBufferOffsetAlignment'\n      ];\n    const offset = makeValueTestVariant(minAlignment, offsetAddMult);\n\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.COMPUTE,\n          buffer: { type },\n        },\n      ],\n    });\n\n    const usage = type === 'uniform' ? GPUBufferUsage.UNIFORM : GPUBufferUsage.STORAGE;\n    const isValid = offset % minAlignment === 0;\n\n    const buffer = t.device.createBuffer({\n      size: 1024,\n      usage,\n    });\n\n    t.expectValidationError(() => {\n      t.device.createBindGroup({\n        entries: [{ binding: 0, resource: { buffer, offset } }],\n        layout: bindGroupLayout,\n      });\n    }, !isValid);\n  });\n\ng.test('buffer,resource_binding_size')\n  .desc(\n    `\n    Test that the buffer binding size of the BindGroup entry is equal to or less than limits.\n    'maxUniformBufferBindingSize|maxStorageBufferBindingSize' if the BindGroup entry defines\n    buffer and the buffer type is 'uniform|storage|read-only-storage'.\n  `\n  )\n  .params(u =>\n    u\n      .combine('type', kBufferBindingTypes)\n      .beginSubcases()\n      // Test a size of 1 (for uniform buffer) or 4 (for storage and read-only storage buffer)\n      // then values just within and just above the limit.\n      .combine('bindingSize', [\n        { base: 1, limit: 0 },\n        { base: 0, limit: 1 },\n        { base: 1, limit: 1 },\n      ])\n  )\n  .fn(t => {\n    const {\n      type,\n      bindingSize: { base, limit },\n    } = t.params;\n    const mult = type === 'uniform' ? 1 : 4;\n    const maxBindingSize =\n      t.device.limits[\n        type === 'uniform' ? 'maxUniformBufferBindingSize' : 'maxStorageBufferBindingSize'\n      ];\n    const bindingSize = base * mult + maxBindingSize * limit;\n\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.COMPUTE,\n          buffer: { type },\n        },\n      ],\n    });\n\n    const usage = type === 'uniform' ? GPUBufferUsage.UNIFORM : GPUBufferUsage.STORAGE;\n    const isValid = bindingSize <= maxBindingSize;\n\n    // MAINTENANCE_TODO: Allocating the max size seems likely to fail. Refactor test.\n    const buffer = t.device.createBuffer({\n      size: maxBindingSize,\n      usage,\n    });\n\n    t.expectValidationError(() => {\n      t.device.createBindGroup({\n        entries: [{ binding: 0, resource: { buffer, size: bindingSize } }],\n        layout: bindGroupLayout,\n      });\n    }, !isValid);\n  });\n\ng.test('buffer,effective_buffer_binding_size')\n  .desc(\n    `\n  Test that the effective buffer binding size of the BindGroup entry must be a multiple of 4 if the\n  buffer type is 'storage|read-only-storage', while there is no such restriction on uniform buffers.\n`\n  )\n  .params(u =>\n    u\n      .combine('type', kBufferBindingTypes)\n      .beginSubcases()\n      .combine('offsetMult', [0, 1])\n      .combine('bufferSizeAddition', [8, 10])\n      .combine('bindingSize', [undefined, 2, 4, 6])\n  )\n  .fn(t => {\n    const { type, offsetMult, bufferSizeAddition, bindingSize } = t.params;\n    const minAlignment =\n      t.device.limits[\n        type === 'uniform' ? 'minUniformBufferOffsetAlignment' : 'minStorageBufferOffsetAlignment'\n      ];\n    const offset = minAlignment * offsetMult;\n    const bufferSize = minAlignment + bufferSizeAddition;\n\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.COMPUTE,\n          buffer: { type },\n        },\n      ],\n    });\n\n    const effectiveBindingSize = bindingSize ?? bufferSize - offset;\n    let usage, isValid;\n    if (type === 'uniform') {\n      usage = GPUBufferUsage.UNIFORM;\n      isValid = true;\n    } else {\n      usage = GPUBufferUsage.STORAGE;\n      isValid = effectiveBindingSize % 4 === 0;\n    }\n\n    const buffer = t.device.createBuffer({\n      size: bufferSize,\n      usage,\n    });\n\n    t.expectValidationError(() => {\n      t.device.createBindGroup({\n        entries: [{ binding: 0, resource: { buffer, offset, size: bindingSize } }],\n        layout: bindGroupLayout,\n      });\n    }, !isValid);\n  });\n\ng.test('sampler,device_mismatch')\n  .desc(`Tests createBindGroup cannot be called with a sampler created from another device.`)\n  .paramsSubcasesOnly(u => u.combine('mismatched', [true, false]))\n  .beforeAllSubcases(t => {\n    t.selectMismatchedDeviceOrSkipTestCase(undefined);\n  })\n  .fn(t => {\n    const { mismatched } = t.params;\n\n    const sourceDevice = mismatched ? t.mismatchedDevice : t.device;\n\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.FRAGMENT,\n          sampler: { type: 'filtering' as const },\n        },\n      ],\n    });\n\n    const sampler = sourceDevice.createSampler();\n    t.expectValidationError(() => {\n      t.device.createBindGroup({\n        entries: [{ binding: 0, resource: sampler }],\n        layout: bindGroupLayout,\n      });\n    }, mismatched);\n  });\n\ng.test('sampler,compare_function_with_binding_type')\n  .desc(\n    `\n  Test that the sampler of the BindGroup has a 'compareFunction' value if the sampler type of the\n  BindGroupLayout is 'comparison'. Other sampler types should not have 'compare' field in\n  the descriptor of the sampler.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('bgType', kSamplerBindingTypes)\n      .beginSubcases()\n      .combine('compareFunction', [undefined, ...kCompareFunctions])\n  )\n  .fn(t => {\n    const { bgType, compareFunction } = t.params;\n\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.FRAGMENT,\n          sampler: { type: bgType },\n        },\n      ],\n    });\n\n    const isValid =\n      bgType === 'comparison' ? compareFunction !== undefined : compareFunction === undefined;\n\n    const sampler = t.device.createSampler({ compare: compareFunction });\n\n    t.expectValidationError(() => {\n      t.device.createBindGroup({\n        entries: [{ binding: 0, resource: sampler }],\n        layout: bindGroupLayout,\n      });\n    }, !isValid);\n  });\n"],"mappings":"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"}