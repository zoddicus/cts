{"version":3,"file":"by_ds_test.js","names":["assert","kTextureFormatInfo","virtualMipSize","makeFullscreenVertexModule","device","createShaderModule","code","getDepthTestEqualPipeline","t","format","sampleCount","expected","createRenderPipeline","layout","vertex","entryPoint","module","fragment","targets","depthStencil","depthCompare","depthWriteEnabled","primitive","topology","multisample","count","getStencilTestEqualPipeline","stencilFront","compare","stencilBack","checkContents","type","params","texture","state","subresourceRange","formatInfo","dimension","viewDescriptor","generateTextureViewDescriptorsForRendering","baseMipLevel","undefined","width","height","textureWidth","textureHeight","renderTexture","createTexture","size","usage","GPUTextureUsage","RENDER_ATTACHMENT","COPY_SRC","resolveTexture","resolveTarget","createView","commandEncoder","createCommandEncoder","pushDebugGroup","pass","beginRenderPass","colorAttachments","view","clearValue","loadOp","storeOp","depthStencilAttachment","depthStoreOp","depth","depthLoadOp","stencilStoreOp","stencil","stencilLoadOp","expectedDepth","stateToTexelComponents","Depth","setPipeline","expectedStencil","Stencil","setStencilReference","draw","end","popDebugGroup","queue","submit","finish","expectSingleColor","exp","R","checkContentsByDepthTest","args","checkContentsByStencilTest"],"sources":["../../../../../../src/webgpu/api/operation/resource_init/check_texture/by_ds_test.ts"],"sourcesContent":["import { assert } from '../../../../../common/util/util.js';\nimport { kTextureFormatInfo } from '../../../../format_info.js';\nimport { GPUTest } from '../../../../gpu_test.js';\nimport { virtualMipSize } from '../../../../util/texture/base.js';\nimport { CheckContents } from '../texture_zero.spec.js';\n\nfunction makeFullscreenVertexModule(device: GPUDevice) {\n  return device.createShaderModule({\n    code: `\n    @vertex\n    fn main(@builtin(vertex_index) VertexIndex : u32)\n         -> @builtin(position) vec4<f32> {\n      var pos : array<vec2<f32>, 3> = array<vec2<f32>, 3>(\n        vec2<f32>(-1.0, -3.0),\n        vec2<f32>( 3.0,  1.0),\n        vec2<f32>(-1.0,  1.0));\n      return vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n    }\n    `,\n  });\n}\n\nfunction getDepthTestEqualPipeline(\n  t: GPUTest,\n  format: GPUTextureFormat,\n  sampleCount: number,\n  expected: number\n): GPURenderPipeline {\n  return t.device.createRenderPipeline({\n    layout: 'auto',\n    vertex: {\n      entryPoint: 'main',\n      module: makeFullscreenVertexModule(t.device),\n    },\n    fragment: {\n      entryPoint: 'main',\n      module: t.device.createShaderModule({\n        code: `\n        struct Outputs {\n          @builtin(frag_depth) FragDepth : f32,\n          @location(0) outSuccess : f32,\n        };\n\n        @fragment\n        fn main() -> Outputs {\n          var output : Outputs;\n          output.FragDepth = f32(${expected});\n          output.outSuccess = 1.0;\n          return output;\n        }\n        `,\n      }),\n      targets: [{ format: 'r8unorm' }],\n    },\n    depthStencil: {\n      format,\n      depthCompare: 'equal',\n      depthWriteEnabled: false,\n    },\n    primitive: { topology: 'triangle-list' },\n    multisample: { count: sampleCount },\n  });\n}\n\nfunction getStencilTestEqualPipeline(\n  t: GPUTest,\n  format: GPUTextureFormat,\n  sampleCount: number\n): GPURenderPipeline {\n  return t.device.createRenderPipeline({\n    layout: 'auto',\n    vertex: {\n      entryPoint: 'main',\n      module: makeFullscreenVertexModule(t.device),\n    },\n    fragment: {\n      entryPoint: 'main',\n      module: t.device.createShaderModule({\n        code: `\n        @fragment\n        fn main() -> @location(0) f32 {\n          return 1.0;\n        }\n        `,\n      }),\n      targets: [{ format: 'r8unorm' }],\n    },\n    depthStencil: {\n      depthWriteEnabled: false,\n      depthCompare: 'always',\n      format,\n      stencilFront: { compare: 'equal' },\n      stencilBack: { compare: 'equal' },\n    },\n    primitive: { topology: 'triangle-list' },\n    multisample: { count: sampleCount },\n  });\n}\n\nconst checkContents: (type: 'depth' | 'stencil', ...args: Parameters<CheckContents>) => void = (\n  type,\n  t,\n  params,\n  texture,\n  state,\n  subresourceRange\n) => {\n  const formatInfo = kTextureFormatInfo[params.format];\n\n  assert(params.dimension === '2d');\n  for (const viewDescriptor of t.generateTextureViewDescriptorsForRendering(\n    'all',\n    subresourceRange\n  )) {\n    assert(viewDescriptor.baseMipLevel !== undefined);\n    const [width, height] = virtualMipSize(\n      params.dimension,\n      [t.textureWidth, t.textureHeight, 1],\n      viewDescriptor.baseMipLevel\n    );\n\n    const renderTexture = t.device.createTexture({\n      size: [width, height, 1],\n      format: 'r8unorm',\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n      sampleCount: params.sampleCount,\n    });\n\n    let resolveTexture = undefined;\n    let resolveTarget = undefined;\n    if (params.sampleCount > 1) {\n      resolveTexture = t.device.createTexture({\n        size: [width, height, 1],\n        format: 'r8unorm',\n        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n      });\n      resolveTarget = resolveTexture.createView();\n    }\n\n    const commandEncoder = t.device.createCommandEncoder();\n    commandEncoder.pushDebugGroup('checkContentsWithDepthStencil');\n\n    const pass = commandEncoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: renderTexture.createView(),\n          resolveTarget,\n          clearValue: [0, 0, 0, 0],\n          loadOp: 'load',\n          storeOp: 'store',\n        },\n      ],\n      depthStencilAttachment: {\n        view: texture.createView(viewDescriptor),\n        depthStoreOp: formatInfo.depth ? 'store' : undefined,\n        depthLoadOp: formatInfo.depth ? 'load' : undefined,\n        stencilStoreOp: formatInfo.stencil ? 'store' : undefined,\n        stencilLoadOp: formatInfo.stencil ? 'load' : undefined,\n      },\n    });\n\n    switch (type) {\n      case 'depth': {\n        const expectedDepth = t.stateToTexelComponents[state].Depth;\n        assert(expectedDepth !== undefined);\n\n        pass.setPipeline(\n          getDepthTestEqualPipeline(t, params.format, params.sampleCount, expectedDepth)\n        );\n        break;\n      }\n\n      case 'stencil': {\n        const expectedStencil = t.stateToTexelComponents[state].Stencil;\n        assert(expectedStencil !== undefined);\n\n        pass.setPipeline(getStencilTestEqualPipeline(t, params.format, params.sampleCount));\n        pass.setStencilReference(expectedStencil);\n        break;\n      }\n    }\n\n    pass.draw(3);\n    pass.end();\n\n    commandEncoder.popDebugGroup();\n    t.queue.submit([commandEncoder.finish()]);\n\n    t.expectSingleColor(resolveTexture || renderTexture, 'r8unorm', {\n      size: [width, height, 1],\n      exp: { R: 1 },\n    });\n  }\n};\n\nexport const checkContentsByDepthTest = (...args: Parameters<CheckContents>) =>\n  checkContents('depth', ...args);\n\nexport const checkContentsByStencilTest = (...args: Parameters<CheckContents>) =>\n  checkContents('stencil', ...args);\n"],"mappings":"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"}