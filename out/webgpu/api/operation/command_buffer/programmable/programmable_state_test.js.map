{"version":3,"file":"programmable_state_test.js","names":["unreachable","GPUTest","ProgrammableStateTest","commonBindGroupLayouts","Map","getBindGroupLayout","type","has","set","device","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","COMPUTE","FRAGMENT","buffer","get","getBindGroupLayouts","indices","bindGroupLayouts","a","b","out","createBindGroup","layout","resource","setBindGroup","encoder","index","factory","createBindingStatePipeline","encoderType","groups","algorithm","wgsl","createComputePipeline","createPipelineLayout","compute","module","createShaderModule","code","entryPoint","wgslShaders","vertex","fragment","createRenderPipeline","targets","format","primitive","topology","setPipeline","pass","pipeline","GPUComputePassEncoder","GPURenderPassEncoder","GPURenderBundleEncoder","dispatchOrDraw","dispatchWorkgroups","draw"],"sources":["../../../../../../src/webgpu/api/operation/command_buffer/programmable/programmable_state_test.ts"],"sourcesContent":["import { unreachable } from '../../../../../common/util/util.js';\nimport { GPUTest } from '../../../../gpu_test.js';\nimport { EncoderType } from '../../../../util/command_buffer_maker.js';\n\ninterface BindGroupIndices {\n  a: number;\n  b: number;\n  out: number;\n}\n\nexport class ProgrammableStateTest extends GPUTest {\n  private commonBindGroupLayouts: Map<string, GPUBindGroupLayout> = new Map();\n\n  getBindGroupLayout(type: GPUBufferBindingType): GPUBindGroupLayout {\n    if (!this.commonBindGroupLayouts.has(type)) {\n      this.commonBindGroupLayouts.set(\n        type,\n        this.device.createBindGroupLayout({\n          entries: [\n            {\n              binding: 0,\n              visibility: GPUShaderStage.COMPUTE | GPUShaderStage.FRAGMENT,\n              buffer: { type },\n            },\n          ],\n        })\n      );\n    }\n    return this.commonBindGroupLayouts.get(type)!;\n  }\n\n  getBindGroupLayouts(indices: BindGroupIndices): GPUBindGroupLayout[] {\n    const bindGroupLayouts: GPUBindGroupLayout[] = [];\n    bindGroupLayouts[indices.a] = this.getBindGroupLayout('read-only-storage');\n    bindGroupLayouts[indices.b] = this.getBindGroupLayout('read-only-storage');\n    bindGroupLayouts[indices.out] = this.getBindGroupLayout('storage');\n    return bindGroupLayouts;\n  }\n\n  createBindGroup(buffer: GPUBuffer, type: GPUBufferBindingType): GPUBindGroup {\n    return this.device.createBindGroup({\n      layout: this.getBindGroupLayout(type),\n      entries: [{ binding: 0, resource: { buffer } }],\n    });\n  }\n\n  setBindGroup(\n    encoder: GPUBindingCommandsMixin,\n    index: number,\n    factory: (index: number) => GPUBindGroup\n  ) {\n    encoder.setBindGroup(index, factory(index));\n  }\n\n  // Create a compute pipeline that performs an operation on data from two bind groups,\n  // then writes the result to a third bind group.\n  createBindingStatePipeline<T extends EncoderType>(\n    encoderType: T,\n    groups: BindGroupIndices,\n    algorithm: string = 'a.value - b.value'\n  ): GPUComputePipeline | GPURenderPipeline {\n    switch (encoderType) {\n      case 'compute pass': {\n        const wgsl = `struct Data {\n            value : i32\n          };\n\n          @group(${groups.a}) @binding(0) var<storage> a : Data;\n          @group(${groups.b}) @binding(0) var<storage> b : Data;\n          @group(${groups.out}) @binding(0) var<storage, read_write> out : Data;\n\n          @compute @workgroup_size(1) fn main() {\n            out.value = ${algorithm};\n            return;\n          }\n        `;\n\n        return this.device.createComputePipeline({\n          layout: this.device.createPipelineLayout({\n            bindGroupLayouts: this.getBindGroupLayouts(groups),\n          }),\n          compute: {\n            module: this.device.createShaderModule({\n              code: wgsl,\n            }),\n            entryPoint: 'main',\n          },\n        });\n      }\n      case 'render pass':\n      case 'render bundle': {\n        const wgslShaders = {\n          vertex: `\n            @vertex fn vert_main() -> @builtin(position) vec4<f32> {\n              return vec4<f32>(0.5, 0.5, 0.0, 1.0);\n            }\n          `,\n\n          fragment: `\n            struct Data {\n              value : i32\n            };\n\n            @group(${groups.a}) @binding(0) var<storage> a : Data;\n            @group(${groups.b}) @binding(0) var<storage> b : Data;\n            @group(${groups.out}) @binding(0) var<storage, read_write> out : Data;\n\n            @fragment fn frag_main() -> @location(0) vec4<f32> {\n              out.value = ${algorithm};\n              return vec4<f32>(1.0, 0.0, 0.0, 1.0);\n            }\n          `,\n        };\n\n        return this.device.createRenderPipeline({\n          layout: this.device.createPipelineLayout({\n            bindGroupLayouts: this.getBindGroupLayouts(groups),\n          }),\n          vertex: {\n            module: this.device.createShaderModule({\n              code: wgslShaders.vertex,\n            }),\n            entryPoint: 'vert_main',\n          },\n          fragment: {\n            module: this.device.createShaderModule({\n              code: wgslShaders.fragment,\n            }),\n            entryPoint: 'frag_main',\n            targets: [{ format: 'rgba8unorm' }],\n          },\n          primitive: { topology: 'point-list' },\n        });\n      }\n      default:\n        unreachable();\n    }\n  }\n\n  setPipeline(pass: GPUBindingCommandsMixin, pipeline: GPUComputePipeline | GPURenderPipeline) {\n    if (pass instanceof GPUComputePassEncoder) {\n      pass.setPipeline(pipeline as GPUComputePipeline);\n    } else if (pass instanceof GPURenderPassEncoder || pass instanceof GPURenderBundleEncoder) {\n      pass.setPipeline(pipeline as GPURenderPipeline);\n    }\n  }\n\n  dispatchOrDraw(pass: GPUBindingCommandsMixin) {\n    if (pass instanceof GPUComputePassEncoder) {\n      pass.dispatchWorkgroups(1);\n    } else if (pass instanceof GPURenderPassEncoder) {\n      pass.draw(1);\n    } else if (pass instanceof GPURenderBundleEncoder) {\n      pass.draw(1);\n    }\n  }\n}\n"],"mappings":"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"}