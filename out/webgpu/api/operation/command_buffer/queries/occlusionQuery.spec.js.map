{"version":3,"file":"occlusionQuery.spec.js","names":["description","kUnitCaseParamsBuilder","makeTestGroup","assert","range","unreachable","kMaxQueryCount","GPUTest","kRequiredQueryBufferOffsetAlignment","kBytesPerQuery","kTextureSize","kRenderModes","kBufferOffsets","RenderPassHelper","constructor","pass","helper","_pass","_helper","setScissorRect","x","y","width","height","_queryHelper","setStencilReference","ref","beginOcclusionQuery","queryIndex","begin","undefined","endOcclusionQuery","QueryHelperDirect","endFn","_endFn","setPipeline","pipeline","setVertexBuffer","buffer","draw","count","end","fn","QueryStarterDirect","QueryHelperRenderBundle","_encoder","QueryStarterRenderBundle","device","renderPassDescriptor","_device","colorAttachment","colorAttachments","_renderBundleEncoderDescriptor","colorFormats","depthStencilFormat","depthStencilAttachment","depthLoadOp","stencilLoadOp","sampleCount","resolveTarget","createRenderBundleEncoder","executeBundles","finish","OcclusionQueryTest","createBuffer","desc","trackForCleanup","createTexture","createQuerySet","createVertexBuffer","data","makeBufferWithContents","GPUBufferUsage","VERTEX","createSingleTriangleVertexBuffer","z","Float32Array","readBufferAsBigUint64","mapAsync","GPUMapMode","READ","result","BigUint64Array","getMappedRange","slice","unmap","setup","params","numQueries","sampleMask","alpha","writeMask","bufferOffset","renderMode","queryResolveBufferOffset","queryResolveBuffer","size","usage","QUERY_RESOLVE","COPY_SRC","readBuffer","MAP_READ","COPY_DST","vertexBuffer","renderTargetTexture","format","GPUTextureUsage","RENDER_ATTACHMENT","multisampleRenderTarget","depthStencilTexture","module","createShaderModule","code","haveDepth","includes","haveStencil","createRenderPipeline","layout","vertex","entryPoint","buffers","arrayStride","attributes","shaderLocation","offset","fragment","targets","multisample","mask","alphaToCoverageEnabled","depthStencil","depthWriteEnabled","depthCompare","stencilFront","compare","querySetOffset","occlusionQuerySet","type","view","createView","loadOp","storeOp","depthStoreOp","depthClearValue","stencilClearValue","stencilStoreOp","runQueryTest","resources","encodePassFn","checkQueryIndexResultFn","queryIndices","i","encoder","createCommandEncoder","beginRenderPass","resolveQuerySet","copyBufferToBuffer","queue","submit","resultNdx","passed","kQueryTestBaseParams","combine","g","test","t","kNumQueries","expect","queryHelper","expectPassed","makeQueryRunner","makeQueryChecker","getScissorRect","occluded","name","scissorCase","vertexBufferAtZ0","vertexBufferAtZ1","createQuad","vertexBufferBL","vertexBufferTR","drawMask","xOffset","yOffset","vertexBuffers","numPassedPerGroup","Array","fill","queryCount","resultCount","groupIndex","expected","forEach","numPassed","queryGroup","readBuffer2","readBuffer3","renderSomething","results","Promise","all","r"],"sources":["../../../../../../src/webgpu/api/operation/command_buffer/queries/occlusionQuery.spec.ts"],"sourcesContent":["export const description = `\nAPI operations tests for occlusion queries.\n\n- test query with\n  - scissor\n  - sample mask\n  - alpha to coverage\n  - stencil\n  - depth test\n- test empty query (no draw) (should be cleared?)\n- test via render bundle\n- test resolveQuerySet with non-zero firstIndex\n- test no queries is zero\n- test 0x0 -> 0x3 sample mask\n- test 0 -> 1 alpha to coverage\n- test resolving twice in same pass keeps values\n- test resolving twice across pass keeps values\n- test resolveQuerySet destinationOffset\n`;\n\nimport { kUnitCaseParamsBuilder } from '../../../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport {\n  assert,\n  TypedArrayBufferView,\n  range,\n  unreachable,\n} from '../../../../../common/util/util.js';\nimport { kMaxQueryCount } from '../../../../capability_info.js';\nimport { DepthStencilFormat } from '../../../../format_info.js';\nimport { GPUTest } from '../../../../gpu_test.js';\n\nconst kRequiredQueryBufferOffsetAlignment = 256;\nconst kBytesPerQuery = 8;\nconst kTextureSize = [4, 4];\n\nconst kRenderModes = ['direct', 'render-bundle'] as const;\ntype RenderMode = (typeof kRenderModes)[number];\n\nconst kBufferOffsets = ['zero', 'non-zero'] as const;\ntype BufferOffset = (typeof kBufferOffsets)[number];\n\ntype SetupParams = {\n  numQueries: number;\n  depthStencilFormat?: DepthStencilFormat;\n  sampleCount?: number;\n  sampleMask?: number;\n  alpha?: number;\n  writeMask?: number;\n  bufferOffset?: BufferOffset;\n  querySetOffset?: BufferOffset;\n  renderMode?: RenderMode;\n};\n\n// MAINTENANCE_TODO: Refactor these helper classes to use GPUTestBase.createEncoder\n//\n// The refactor would require some new features in CommandBufferMaker such as:\n//\n// * Multi render bundle in single render pass support\n//\n// * Some way to allow calling render pass commands on render bundle encoder.\n//   Potentially have a special abstract encoder that wraps the two and defers\n//   relevant calls appropriately.\n\n/**\n * This class is used by the RenderPassHelper below to\n * abstract calling these 4 functions on a RenderPassEncoder or a RenderBundleEncoder.\n */\ninterface QueryHelper {\n  setPipeline(pipeline: GPURenderPipeline): void;\n  setVertexBuffer(buffer: GPUBuffer): void;\n  draw(count: number): void;\n  end(): void;\n}\n\ninterface QueryStarter {\n  begin(endFn: () => void): QueryHelper;\n}\n\n/**\n * This class helps use a render pass encoder or a render bundle encoder\n * in the correct way given the order that operations must happen, in order to be\n * compatible across both paths.\n */\nclass RenderPassHelper {\n  _pass: GPURenderPassEncoder;\n  _helper: QueryStarter;\n  _queryHelper?: QueryHelper;\n\n  constructor(pass: GPURenderPassEncoder, helper: QueryStarter) {\n    this._pass = pass;\n    this._helper = helper;\n  }\n  setScissorRect(x: number, y: number, width: number, height: number) {\n    assert(!this._queryHelper);\n    this._pass.setScissorRect(x, y, width, height);\n  }\n  setStencilReference(ref: number) {\n    assert(!this._queryHelper);\n    this._pass.setStencilReference(ref);\n  }\n  beginOcclusionQuery(queryIndex: number) {\n    assert(!this._queryHelper);\n    this._pass.beginOcclusionQuery(queryIndex);\n    this._queryHelper = this._helper.begin(() => {\n      assert(!!this._queryHelper);\n      this._queryHelper = undefined;\n      this._pass.endOcclusionQuery();\n    });\n    return this._queryHelper;\n  }\n}\n\n/**\n * Helper class for using a render pass encoder directly\n */\nclass QueryHelperDirect implements QueryHelper {\n  _pass?: GPURenderPassEncoder;\n  _endFn: () => void;\n\n  constructor(pass: GPURenderPassEncoder, endFn: () => void) {\n    this._pass = pass;\n    this._endFn = endFn;\n  }\n  setPipeline(pipeline: GPURenderPipeline): void {\n    assert(!!this._pass);\n    this._pass.setPipeline(pipeline);\n  }\n  setVertexBuffer(buffer: GPUBuffer): void {\n    assert(!!this._pass);\n    this._pass.setVertexBuffer(0, buffer);\n  }\n  draw(count: number): void {\n    assert(!!this._pass);\n    this._pass.draw(count);\n  }\n  end() {\n    // make this object impossible to use after calling end\n    const fn = this._endFn;\n    this._endFn = unreachable;\n    this._pass = undefined;\n    fn();\n  }\n}\n\n/**\n * Helper class for starting a query on a render pass encoder directly\n */\nclass QueryStarterDirect implements QueryStarter {\n  _pass: GPURenderPassEncoder;\n  _helper?: QueryHelperDirect;\n\n  constructor(pass: GPURenderPassEncoder) {\n    this._pass = pass;\n  }\n  begin(endFn: () => void) {\n    assert(!this._helper);\n    this._helper = new QueryHelperDirect(this._pass, () => {\n      this._helper = undefined;\n      endFn();\n    });\n    return this._helper;\n  }\n}\n\n/**\n * Helper class for using a render bundle encoder.\n */\nclass QueryHelperRenderBundle implements QueryHelper {\n  _encoder?: GPURenderBundleEncoder;\n  _endFn: () => void;\n\n  constructor(pass: GPURenderBundleEncoder, endFn: () => void) {\n    this._encoder = pass;\n    this._endFn = endFn;\n  }\n  setPipeline(pipeline: GPURenderPipeline): void {\n    assert(!!this._encoder);\n    this._encoder.setPipeline(pipeline);\n  }\n  setVertexBuffer(buffer: GPUBuffer): void {\n    assert(!!this._encoder);\n    this._encoder.setVertexBuffer(0, buffer);\n  }\n  draw(count: number): void {\n    assert(!!this._encoder);\n    this._encoder.draw(count);\n  }\n  end() {\n    // make this object impossible to use after calling end\n    const fn = this._endFn;\n    this._endFn = unreachable;\n    this._encoder = undefined;\n    fn();\n  }\n}\n\n/**\n * Helper class for starting a query on a render bundle encoder\n */\nclass QueryStarterRenderBundle implements QueryStarter {\n  _device: GPUDevice;\n  _pass: GPURenderPassEncoder;\n  _renderBundleEncoderDescriptor: GPURenderBundleEncoderDescriptor;\n  _encoder?: GPURenderBundleEncoder;\n  _helper?: QueryHelperRenderBundle;\n\n  constructor(\n    device: GPUDevice,\n    pass: GPURenderPassEncoder,\n    renderPassDescriptor: GPURenderPassDescriptor\n  ) {\n    this._device = device;\n    this._pass = pass;\n    const colorAttachment = (\n      renderPassDescriptor.colorAttachments as GPURenderPassColorAttachment[]\n    )[0];\n    this._renderBundleEncoderDescriptor = {\n      colorFormats: ['rgba8unorm'],\n      depthStencilFormat: renderPassDescriptor.depthStencilAttachment?.depthLoadOp\n        ? 'depth24plus'\n        : renderPassDescriptor.depthStencilAttachment?.stencilLoadOp\n        ? 'stencil8'\n        : undefined,\n      sampleCount: colorAttachment.resolveTarget ? 4 : 1,\n    };\n  }\n  begin(endFn: () => void) {\n    assert(!this._encoder);\n    this._encoder = this._device.createRenderBundleEncoder(this._renderBundleEncoderDescriptor);\n    this._helper = new QueryHelperRenderBundle(this._encoder, () => {\n      assert(!!this._encoder);\n      assert(!!this._helper);\n      this._pass.executeBundles([this._encoder.finish()]);\n      this._helper = undefined;\n      this._encoder = undefined;\n      endFn();\n    });\n    return this._helper;\n  }\n  setPipeline(pipeline: GPURenderPipeline): void {\n    assert(!!this._encoder);\n    this._encoder.setPipeline(pipeline);\n  }\n  setVertexBuffer(buffer: GPUBuffer): void {\n    assert(!!this._encoder);\n    this._encoder.setVertexBuffer(0, buffer);\n  }\n  draw(count: number) {\n    assert(!!this._encoder);\n    this._encoder.draw(count);\n  }\n}\n\nclass OcclusionQueryTest extends GPUTest {\n  createBuffer(desc: GPUBufferDescriptor) {\n    return this.trackForCleanup(this.device.createBuffer(desc));\n  }\n  createTexture(desc: GPUTextureDescriptor) {\n    return this.trackForCleanup(this.device.createTexture(desc));\n  }\n  createQuerySet(desc: GPUQuerySetDescriptor) {\n    return this.trackForCleanup(this.device.createQuerySet(desc));\n  }\n  createVertexBuffer(data: TypedArrayBufferView) {\n    return this.makeBufferWithContents(data, GPUBufferUsage.VERTEX);\n  }\n  createSingleTriangleVertexBuffer(z: number) {\n    // prettier-ignore\n    return this.createVertexBuffer(new Float32Array([\n      -0.5, -0.5,  z,\n       0.5, -0.5,  z,\n      -0.5,  0.5,  z,\n    ]));\n  }\n  async readBufferAsBigUint64(buffer: GPUBuffer) {\n    await buffer.mapAsync(GPUMapMode.READ);\n    const result = new BigUint64Array(buffer.getMappedRange().slice(0));\n    buffer.unmap();\n    return result;\n  }\n  setup(params: SetupParams) {\n    const {\n      numQueries,\n      depthStencilFormat,\n      sampleMask = 0xffffffff,\n      alpha,\n      sampleCount,\n      writeMask = 0xf,\n      bufferOffset,\n      renderMode,\n    } = params;\n    const { device } = this;\n\n    const queryResolveBufferOffset =\n      bufferOffset === 'non-zero' ? kRequiredQueryBufferOffsetAlignment : 0;\n    const queryResolveBuffer = this.createBuffer({\n      size: numQueries * 8 + queryResolveBufferOffset,\n      usage: GPUBufferUsage.QUERY_RESOLVE | GPUBufferUsage.COPY_SRC,\n    });\n\n    const readBuffer = this.createBuffer({\n      size: numQueries * kBytesPerQuery,\n      usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\n    });\n\n    const vertexBuffer = this.createSingleTriangleVertexBuffer(0);\n\n    const renderTargetTexture = this.createTexture({\n      format: 'rgba8unorm',\n      size: kTextureSize,\n      usage: GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const multisampleRenderTarget = sampleCount\n      ? this.createTexture({\n          size: kTextureSize,\n          format: 'rgba8unorm',\n          usage: GPUTextureUsage.RENDER_ATTACHMENT,\n          sampleCount,\n        })\n      : null;\n\n    const depthStencilTexture = depthStencilFormat\n      ? this.createTexture({\n          format: depthStencilFormat,\n          size: kTextureSize,\n          usage: GPUTextureUsage.RENDER_ATTACHMENT,\n        })\n      : undefined;\n\n    const module = device.createShaderModule({\n      code: `\n        @vertex fn vs(@location(0) pos: vec4f) -> @builtin(position) vec4f {\n          return pos;\n        }\n\n        @fragment fn fs() -> @location(0) vec4f {\n          return vec4f(0, 0, 0, ${alpha === undefined ? 1 : alpha});\n        }\n      `,\n    });\n\n    const haveDepth = !!depthStencilFormat && depthStencilFormat.includes('depth');\n    const haveStencil = !!depthStencilFormat && depthStencilFormat.includes('stencil');\n    assert(!(haveDepth && haveStencil), 'code does not handle mixed depth-stencil');\n\n    const pipeline = device.createRenderPipeline({\n      layout: 'auto',\n      vertex: {\n        module,\n        entryPoint: 'vs',\n        buffers: [\n          {\n            arrayStride: 3 * 4,\n            attributes: [\n              {\n                shaderLocation: 0,\n                offset: 0,\n                format: 'float32x3',\n              },\n            ],\n          },\n        ],\n      },\n      fragment: {\n        module,\n        entryPoint: 'fs',\n        targets: [{ format: 'rgba8unorm', writeMask }],\n      },\n      ...(sampleCount && {\n        multisample: {\n          count: sampleCount,\n          mask: alpha === undefined ? sampleMask : 0xffffffff,\n          alphaToCoverageEnabled: alpha !== undefined,\n        },\n      }),\n      ...(depthStencilTexture && {\n        depthStencil: {\n          format: depthStencilFormat as GPUTextureFormat,\n          depthWriteEnabled: haveDepth,\n          depthCompare: haveDepth ? 'less-equal' : 'always',\n          ...(haveStencil && {\n            stencilFront: {\n              compare: 'equal',\n            },\n          }),\n        },\n      }),\n    });\n\n    const querySetOffset = params?.querySetOffset === 'non-zero' ? 7 : 0;\n    const occlusionQuerySet = this.createQuerySet({\n      type: 'occlusion',\n      count: numQueries + querySetOffset,\n    });\n\n    const renderPassDescriptor: GPURenderPassDescriptor = {\n      colorAttachments: sampleCount\n        ? [\n            {\n              view: multisampleRenderTarget!.createView(),\n              resolveTarget: renderTargetTexture.createView(),\n              loadOp: 'clear',\n              storeOp: 'store',\n            },\n          ]\n        : [\n            {\n              view: renderTargetTexture.createView(),\n              loadOp: 'clear',\n              storeOp: 'store',\n            },\n          ],\n      ...(haveDepth && {\n        depthStencilAttachment: {\n          view: depthStencilTexture!.createView(),\n          depthLoadOp: 'clear',\n          depthStoreOp: 'store',\n          depthClearValue: 0.5,\n        },\n      }),\n      ...(haveStencil && {\n        depthStencilAttachment: {\n          view: depthStencilTexture!.createView(),\n          stencilClearValue: 0,\n          stencilLoadOp: 'clear',\n          stencilStoreOp: 'store',\n        },\n      }),\n      occlusionQuerySet,\n    };\n\n    return {\n      readBuffer,\n      vertexBuffer,\n      queryResolveBuffer,\n      queryResolveBufferOffset,\n      occlusionQuerySet,\n      renderTargetTexture,\n      renderPassDescriptor,\n      pipeline,\n      depthStencilTexture,\n      querySetOffset,\n      renderMode,\n    };\n  }\n  async runQueryTest(\n    resources: ReturnType<OcclusionQueryTest['setup']>,\n    renderPassDescriptor: GPURenderPassDescriptor | null,\n    encodePassFn: (helper: RenderPassHelper, queryIndex: number) => void,\n    checkQueryIndexResultFn: (passed: boolean, queryIndex: number) => void\n  ) {\n    const { device } = this;\n    const {\n      readBuffer,\n      queryResolveBuffer,\n      queryResolveBufferOffset,\n      occlusionQuerySet,\n      querySetOffset,\n      renderMode = 'direct',\n    } = resources;\n    const numQueries = occlusionQuerySet.count - querySetOffset;\n    const queryIndices = range(numQueries, (i: number) => i + querySetOffset);\n\n    const encoder = device.createCommandEncoder();\n    if (renderPassDescriptor) {\n      const pass = encoder.beginRenderPass(renderPassDescriptor);\n      const helper = new RenderPassHelper(\n        pass,\n        renderMode === 'direct'\n          ? new QueryStarterDirect(pass)\n          : new QueryStarterRenderBundle(device, pass, renderPassDescriptor)\n      );\n\n      for (const queryIndex of queryIndices) {\n        encodePassFn(helper, queryIndex);\n      }\n      pass.end();\n    }\n\n    encoder.resolveQuerySet(\n      occlusionQuerySet,\n      querySetOffset,\n      numQueries,\n      queryResolveBuffer,\n      queryResolveBufferOffset\n    );\n    encoder.copyBufferToBuffer(\n      queryResolveBuffer,\n      queryResolveBufferOffset,\n      readBuffer,\n      0,\n      readBuffer.size\n    );\n    device.queue.submit([encoder.finish()]);\n\n    const result = await this.readBufferAsBigUint64(readBuffer);\n    for (const queryIndex of queryIndices) {\n      const resultNdx = queryIndex - querySetOffset;\n      const passed = !!result[resultNdx];\n      checkQueryIndexResultFn(passed, queryIndex);\n    }\n\n    return result;\n  }\n}\n\nconst kQueryTestBaseParams = kUnitCaseParamsBuilder\n  .combine('writeMask', [0xf, 0x0])\n  .combine('renderMode', kRenderModes)\n  .combine('bufferOffset', kBufferOffsets)\n  .combine('querySetOffset', kBufferOffsets);\n\nexport const g = makeTestGroup(OcclusionQueryTest);\n\ng.test('occlusion_query,initial')\n  .desc(`Test getting contents of QuerySet without any queries.`)\n  .fn(async t => {\n    const kNumQueries = kMaxQueryCount;\n    const resources = t.setup({ numQueries: kNumQueries });\n    await t.runQueryTest(\n      resources,\n      null,\n      () => {},\n      (passed: boolean) => {\n        t.expect(!passed);\n      }\n    );\n  });\n\ng.test('occlusion_query,basic')\n  .desc('Test all queries pass')\n  .params(kQueryTestBaseParams)\n  .fn(async t => {\n    const { writeMask, renderMode, bufferOffset, querySetOffset } = t.params;\n    const kNumQueries = 30;\n    const resources = t.setup({\n      writeMask,\n      renderMode,\n      bufferOffset,\n      querySetOffset,\n      numQueries: kNumQueries,\n    });\n    const { renderPassDescriptor, vertexBuffer, pipeline } = resources;\n\n    await t.runQueryTest(\n      resources,\n      renderPassDescriptor,\n      (helper, queryIndex) => {\n        const queryHelper = helper.beginOcclusionQuery(queryIndex);\n        queryHelper.setPipeline(pipeline);\n        queryHelper.setVertexBuffer(vertexBuffer);\n        queryHelper.draw(3);\n        queryHelper.end();\n      },\n      (passed, queryIndex) => {\n        const expectPassed = true;\n        t.expect(\n          !!passed === expectPassed,\n          `queryIndex: ${queryIndex}, was: ${!!passed}, expected: ${expectPassed}`\n        );\n      }\n    );\n  });\n\ng.test('occlusion_query,empty')\n  .desc(\n    `\n      Test beginOcclusionQuery/endOcclusionQuery with nothing in between clears the queries\n\n      Calls beginOcclusionQuery/draw/endOcclusionQuery that should show passing fragments\n      and validates they passed. Then executes the same queries (same QuerySet) without drawing.\n      Those queries should have not passed.\n    `\n  )\n  .fn(async t => {\n    const kNumQueries = 30;\n    const resources = t.setup({ numQueries: kNumQueries });\n    const { vertexBuffer, renderPassDescriptor, pipeline } = resources;\n\n    const makeQueryRunner = (draw: boolean) => {\n      return (helper: RenderPassHelper, queryIndex: number) => {\n        const queryHelper = helper.beginOcclusionQuery(queryIndex);\n        queryHelper.setPipeline(pipeline);\n        queryHelper.setVertexBuffer(vertexBuffer);\n        if (draw) {\n          queryHelper.draw(3);\n        }\n        queryHelper.end();\n      };\n    };\n\n    const makeQueryChecker = (draw: boolean) => {\n      return (passed: boolean, queryIndex: number) => {\n        const expectPassed = draw;\n        t.expect(\n          !!passed === expectPassed,\n          `draw: ${draw}, queryIndex: ${queryIndex}, was: ${!!passed}, expected: ${expectPassed}`\n        );\n      };\n    };\n\n    await t.runQueryTest(\n      resources,\n      renderPassDescriptor,\n      makeQueryRunner(true),\n      makeQueryChecker(true)\n    );\n    await t.runQueryTest(\n      resources,\n      renderPassDescriptor,\n      makeQueryRunner(false),\n      makeQueryChecker(false)\n    );\n  });\n\ng.test('occlusion_query,scissor')\n  .desc(\n    `\n      Test beginOcclusionQuery/endOcclusionQuery using scissor to occlude\n    `\n  )\n  .params(kQueryTestBaseParams)\n  .fn(async t => {\n    const { writeMask, renderMode, bufferOffset, querySetOffset } = t.params;\n    const kNumQueries = 30;\n    const resources = t.setup({\n      writeMask,\n      renderMode,\n      bufferOffset,\n      querySetOffset,\n      numQueries: kNumQueries,\n    });\n    const { renderPassDescriptor, renderTargetTexture, vertexBuffer, pipeline } = resources;\n\n    const getScissorRect = (i: number) => {\n      const { width, height } = renderTargetTexture;\n      switch (i % 4) {\n        case 0: // whole target\n          return {\n            x: 0,\n            y: 0,\n            width,\n            height,\n            occluded: false,\n            name: 'whole target',\n          };\n        case 1: // center\n          return {\n            x: width / 4,\n            y: height / 4,\n            width: width / 2,\n            height: height / 2,\n            occluded: false,\n            name: 'center',\n          };\n        case 2: // none\n          return {\n            x: width / 4,\n            y: height / 4,\n            width: 0,\n            height: 0,\n            occluded: true,\n            name: 'none',\n          };\n        case 3: // top 1/4\n          return {\n            x: 0,\n            y: 0,\n            width,\n            height: height / 2,\n            occluded: true,\n            name: 'top quarter',\n          };\n        default:\n          unreachable();\n      }\n    };\n\n    await t.runQueryTest(\n      resources,\n      renderPassDescriptor,\n      (helper, queryIndex) => {\n        const { x, y, width, height } = getScissorRect(queryIndex);\n        helper.setScissorRect(x, y, width, height);\n        const queryHelper = helper.beginOcclusionQuery(queryIndex);\n        queryHelper.setPipeline(pipeline);\n        queryHelper.setVertexBuffer(vertexBuffer);\n        queryHelper.draw(3);\n        queryHelper.end();\n      },\n      (passed, queryIndex) => {\n        const { occluded, name: scissorCase } = getScissorRect(queryIndex);\n        const expectPassed = !occluded;\n        t.expect(\n          !!passed === expectPassed,\n          `queryIndex: ${queryIndex}, scissorCase: ${scissorCase}, was: ${!!passed}, expected: ${expectPassed}`\n        );\n      }\n    );\n  });\n\ng.test('occlusion_query,depth')\n  .desc(\n    `\n      Test beginOcclusionQuery/endOcclusionQuery using depth test to occlude\n\n      Compares depth against 0.5, with alternating vertex buffers which have a depth\n      of 0 and 1. When depth check passes, we expect non-zero successful fragments.\n    `\n  )\n  .params(kQueryTestBaseParams)\n  .fn(async t => {\n    const { writeMask, renderMode, bufferOffset, querySetOffset } = t.params;\n    const kNumQueries = 30;\n    const resources = t.setup({\n      writeMask,\n      renderMode,\n      bufferOffset,\n      querySetOffset,\n      numQueries: kNumQueries,\n      depthStencilFormat: 'depth24plus',\n    });\n    const { vertexBuffer: vertexBufferAtZ0, renderPassDescriptor, pipeline } = resources;\n    const vertexBufferAtZ1 = t.createSingleTriangleVertexBuffer(1);\n\n    await t.runQueryTest(\n      resources,\n      renderPassDescriptor,\n      (helper, queryIndex) => {\n        const queryHelper = helper.beginOcclusionQuery(queryIndex);\n        queryHelper.setPipeline(pipeline);\n        queryHelper.setVertexBuffer(queryIndex % 2 ? vertexBufferAtZ1 : vertexBufferAtZ0);\n        queryHelper.draw(3);\n        queryHelper.end();\n      },\n      (passed, queryIndex) => {\n        const expectPassed = queryIndex % 2 === 0;\n        t.expect(\n          !!passed === expectPassed,\n          `queryIndex: ${queryIndex}, was: ${!!passed}, expected: ${expectPassed}`\n        );\n      }\n    );\n  });\n\ng.test('occlusion_query,stencil')\n  .desc(\n    `\n      Test beginOcclusionQuery/endOcclusionQuery using stencil to occlude\n\n      Compares stencil against 0, with alternating stencil reference values of\n      of 0 and 1. When stencil test passes, we expect non-zero successful fragments.\n    `\n  )\n  .params(kQueryTestBaseParams)\n  .fn(async t => {\n    const { writeMask, renderMode, bufferOffset, querySetOffset } = t.params;\n    const kNumQueries = 30;\n    const resources = t.setup({\n      writeMask,\n      renderMode,\n      bufferOffset,\n      querySetOffset,\n      numQueries: kNumQueries,\n      depthStencilFormat: 'stencil8',\n    });\n    const { vertexBuffer, renderPassDescriptor, pipeline } = resources;\n\n    await t.runQueryTest(\n      resources,\n      renderPassDescriptor,\n      (helper, queryIndex) => {\n        helper.setStencilReference(queryIndex % 2);\n        const queryHelper = helper.beginOcclusionQuery(queryIndex);\n        queryHelper.setPipeline(pipeline);\n        queryHelper.setVertexBuffer(vertexBuffer);\n        queryHelper.draw(3);\n        queryHelper.end();\n      },\n      (passed, queryIndex) => {\n        const expectPassed = queryIndex % 2 === 0;\n        t.expect(\n          !!passed === expectPassed,\n          `queryIndex: ${queryIndex}, was: ${!!passed}, expected: ${expectPassed}`\n        );\n      }\n    );\n  });\n\ng.test('occlusion_query,sample_mask')\n  .desc(\n    `\n      Test beginOcclusionQuery/endOcclusionQuery using sample_mask to occlude\n\n      Set sampleMask to 0, 2, 4, 6 and draw quads in top right or bottom left corners of the texel.\n      If the corner we draw to matches the corner masked we expect non-zero successful fragments.\n\n      See: https://learn.microsoft.com/en-us/windows/win32/api/d3d11/ne-d3d11-d3d11_standard_multisample_quality_levels\n    `\n  )\n  .params(kQueryTestBaseParams.combine('sampleMask', [0, 2, 4, 6]))\n  .fn(async t => {\n    const { writeMask, renderMode, bufferOffset, querySetOffset, sampleMask } = t.params;\n    const kNumQueries = 30;\n    const sampleCount = 4;\n    const resources = t.setup({\n      writeMask,\n      renderMode,\n      bufferOffset,\n      querySetOffset,\n      numQueries: kNumQueries,\n      sampleCount,\n      sampleMask,\n    });\n    const { renderPassDescriptor, pipeline } = resources;\n\n    const createQuad = (offset: number) => {\n      // prettier-ignore\n      return t.createVertexBuffer(new Float32Array([\n        offset + 0   , offset + 0   , 0,\n        offset + 0.25, offset + 0   , 0,\n        offset + 0   , offset + 0.25, 0,\n        offset + 0   , offset + 0.25, 0,\n        offset + 0.25, offset + 0   , 0,\n        offset + 0.25, offset + 0.25, 0,\n      ]));\n    };\n\n    const vertexBufferBL = createQuad(0);\n    const vertexBufferTR = createQuad(0.25);\n\n    await t.runQueryTest(\n      resources,\n      renderPassDescriptor,\n      (helper, queryIndex) => {\n        const queryHelper = helper.beginOcclusionQuery(queryIndex);\n        queryHelper.setPipeline(pipeline);\n        queryHelper.setVertexBuffer(queryIndex % 2 ? vertexBufferTR : vertexBufferBL);\n        queryHelper.draw(6);\n        queryHelper.end();\n      },\n      (passed, queryIndex) => {\n        // Above we draw to a specific corner (sample) of a multi-sampled texel\n        // drawMask is the \"sampleMask\" representation of that corner.\n        // In other words, if drawMask is 2 (we drew to the top right) and\n        // sampleMask is 2 (drawing is allowed to the top right) then we expect\n        // passing fragments.\n        const drawMask = queryIndex % 2 ? 2 : 4;\n        const expectPassed = !!(sampleMask & drawMask);\n        t.expect(\n          !!passed === expectPassed,\n          `queryIndex: ${queryIndex}, was: ${!!passed}, expected: ${expectPassed}`\n        );\n      }\n    );\n  });\n\ng.test('occlusion_query,alpha_to_coverage')\n  .desc(\n    `\n      Test beginOcclusionQuery/endOcclusionQuery using alphaToCoverage to occlude\n\n      Set alpha to 0, 0.25, 0.5, 0.75, and 1, draw quads in 4 corners of texel.\n      Some should be culled. We count how many passed via queries. It's undefined which\n      will pass but it is defined how many will pass for a given alpha value.\n\n      Note: It seems like the result is well defined but if we find some devices/drivers\n      don't follow this exactly then we can relax check for the expected number of passed\n      queries.\n\n      See: https://bgolus.medium.com/anti-aliased-alpha-test-the-esoteric-alpha-to-coverage-8b177335ae4f\n    `\n  )\n  .params(kQueryTestBaseParams.combine('alpha', [0, 0.25, 0.5, 0.75, 1.0]))\n  .fn(async t => {\n    const { writeMask, renderMode, bufferOffset, querySetOffset, alpha } = t.params;\n    const kNumQueries = 32;\n    const sampleCount = 4;\n    const resources = t.setup({\n      writeMask,\n      renderMode,\n      bufferOffset,\n      querySetOffset,\n      numQueries: kNumQueries,\n      sampleCount,\n      alpha,\n    });\n    const { renderPassDescriptor, pipeline } = resources;\n\n    const createQuad = (xOffset: number, yOffset: number) => {\n      // prettier-ignore\n      return t.createVertexBuffer(new Float32Array([\n        xOffset + 0   , yOffset + 0   , 0,\n        xOffset + 0.25, yOffset + 0   , 0,\n        xOffset + 0   , yOffset + 0.25, 0,\n        xOffset + 0   , yOffset + 0.25, 0,\n        xOffset + 0.25, yOffset + 0   , 0,\n        xOffset + 0.25, yOffset + 0.25, 0,\n      ]));\n    };\n\n    const vertexBuffers = [\n      createQuad(0, 0),\n      createQuad(0.25, 0),\n      createQuad(0, 0.25),\n      createQuad(0.25, 0.25),\n    ];\n\n    const numPassedPerGroup: number[] = new Array(kNumQueries / 4).fill(0);\n\n    // These tests can't use queryIndex to decide what to draw because which mask\n    // a particular alpha converts to is implementation defined. When querySetOffset is\n    // non-zero the queryIndex will go 7, 8, 9, 10, ... but we need to guarantee\n    // 4 queries per pixel and group those results so `queryIndex / 4 | 0` won't work.\n    // Instead we count the queries to get 4 draws per group, one to each quadrant of a pixel\n    // Then we total up the passes for those 4 queries by queryCount.\n    let queryCount = 0;\n    let resultCount = 0;\n    await t.runQueryTest(\n      resources,\n      renderPassDescriptor,\n      (helper, queryIndex) => {\n        const queryHelper = helper.beginOcclusionQuery(queryIndex);\n        queryHelper.setPipeline(pipeline);\n        queryHelper.setVertexBuffer(vertexBuffers[queryCount++ % 4]);\n        queryHelper.draw(6);\n        queryHelper.end();\n      },\n      passed => {\n        const groupIndex = (resultCount++ / 4) | 0;\n        numPassedPerGroup[groupIndex] += passed ? 1 : 0;\n      }\n    );\n\n    const expected = (alpha / 0.25) | 0;\n    numPassedPerGroup.forEach((numPassed, queryGroup) => {\n      t.expect(\n        numPassed === expected,\n        `queryGroup: ${queryGroup}, was: ${numPassed}, expected: ${expected}`\n      );\n    });\n  });\n\ng.test('occlusion_query,multi_resolve')\n  .desc('Test calling resolveQuerySet more than once does not change results')\n  .fn(async t => {\n    const { device } = t;\n    const kNumQueries = 30;\n    const {\n      pipeline,\n      vertexBuffer,\n      occlusionQuerySet,\n      renderPassDescriptor,\n      renderTargetTexture,\n      queryResolveBuffer,\n      readBuffer,\n    } = t.setup({ numQueries: kNumQueries });\n\n    const readBuffer2 = t.createBuffer(readBuffer);\n    const readBuffer3 = t.createBuffer(readBuffer);\n\n    const renderSomething = (encoder: GPUCommandEncoder) => {\n      const pass = encoder.beginRenderPass(renderPassDescriptor);\n      pass.setPipeline(pipeline);\n      pass.setVertexBuffer(0, vertexBuffer);\n      pass.setScissorRect(0, 0, renderTargetTexture.width, renderTargetTexture.height);\n      pass.draw(3);\n      pass.end();\n    };\n\n    {\n      const encoder = device.createCommandEncoder();\n      {\n        const pass = encoder.beginRenderPass(renderPassDescriptor);\n        pass.setPipeline(pipeline);\n        pass.setVertexBuffer(0, vertexBuffer);\n\n        for (let i = 0; i < kNumQueries; ++i) {\n          pass.beginOcclusionQuery(i);\n          if (i % 2) {\n            pass.setScissorRect(0, 0, renderTargetTexture.width, renderTargetTexture.height);\n          } else {\n            pass.setScissorRect(0, 0, 0, 0);\n          }\n          pass.draw(3);\n          pass.endOcclusionQuery();\n        }\n        pass.end();\n      }\n\n      // Intentionally call resolveQuerySet twice\n      encoder.resolveQuerySet(occlusionQuerySet, 0, kNumQueries, queryResolveBuffer, 0);\n      encoder.resolveQuerySet(occlusionQuerySet, 0, kNumQueries, queryResolveBuffer, 0);\n      encoder.copyBufferToBuffer(queryResolveBuffer, 0, readBuffer, 0, readBuffer.size);\n\n      // Rendering stuff unrelated should not affect results.\n      renderSomething(encoder);\n\n      encoder.resolveQuerySet(occlusionQuerySet, 0, kNumQueries, queryResolveBuffer, 0);\n      encoder.copyBufferToBuffer(queryResolveBuffer, 0, readBuffer2, 0, readBuffer2.size);\n      device.queue.submit([encoder.finish()]);\n    }\n\n    // Encode something else and draw again, then read the results\n    // They should not be affected.\n    {\n      const encoder = device.createCommandEncoder();\n      renderSomething(encoder);\n\n      encoder.resolveQuerySet(occlusionQuerySet, 0, kNumQueries, queryResolveBuffer, 0);\n      encoder.copyBufferToBuffer(queryResolveBuffer, 0, readBuffer3, 0, readBuffer3.size);\n      device.queue.submit([encoder.finish()]);\n    }\n\n    const results = await Promise.all([\n      t.readBufferAsBigUint64(readBuffer),\n      t.readBufferAsBigUint64(readBuffer2),\n      t.readBufferAsBigUint64(readBuffer3),\n    ]);\n\n    results.forEach((result, r) => {\n      for (let i = 0; i < kNumQueries; ++i) {\n        const passed = !!result[i];\n        const expectPassed = !!(i % 2);\n        t.expect(\n          passed === expectPassed,\n          `result(${r}): queryIndex: ${i}, passed: ${passed}, expected: ${expectPassed}`\n        );\n      }\n    });\n  });\n"],"mappings":"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"}