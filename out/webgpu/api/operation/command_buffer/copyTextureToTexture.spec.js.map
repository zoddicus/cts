{"version":3,"file":"copyTextureToTexture.spec.js","names":["description","makeTestGroup","assert","memcpy","unreachable","kBufferSizeAlignment","kMinDynamicBufferOffsetAlignment","kTextureDimensions","kTextureFormatInfo","kRegularTextureFormats","kCompressedTextureFormats","kDepthStencilFormats","textureDimensionAndFormatCompatible","depthStencilFormatAspectSize","isCompressedTextureFormat","viewCompatible","GPUTest","TextureTestMixin","makeBufferWithContents","checkElementsEqual","checkElementsEqualEither","align","physicalMipSize","DataArrayGenerator","kBytesPerRowAlignment","dataBytesForCopyOrFail","dataGenerator","F","GetInitialDataPerMipLevel","dimension","textureSize","format","mipLevel","textureSizeAtLevel","bytesPerBlock","color","bytes","blockWidthInTexel","blockWidth","blockHeightInTexel","blockHeight","blocksPerSubresource","width","height","byteSize","depthOrArrayLayers","generateView","GetInitialStencilDataPerMipLevel","aspectBytesPerBlock","DoCopyTextureToTextureTest","srcTextureSize","dstTextureSize","srcFormat","dstFormat","copyBoxOffsets","srcCopyLevel","dstCopyLevel","skipIfTextureFormatNotSupported","extraTextureUsageFlags","isCompatibility","GPUTextureUsage","TEXTURE_BINDING","mipLevelCount","srcTextureDesc","size","usage","COPY_SRC","COPY_DST","srcTexture","device","createTexture","trackForCleanup","dstTextureDesc","dstTexture","initialSrcData","srcTextureSizeAtLevel","srcBlocksPerRow","srcBlockRowsPerImage","queue","writeTexture","texture","bytesPerRow","rowsPerImage","dstTextureSizeAtLevel","minWidth","Math","min","minHeight","minDepth","appliedSrcOffset","x","srcOffset","y","z","appliedDstOffset","dstOffset","appliedCopyWidth","max","copyExtent","appliedCopyHeight","appliedCopyDepth","appliedSize","encoder","createCommandEncoder","copyTextureToTexture","origin","submit","finish","dstBlocksPerRow","dstBlockRowsPerImage","bytesPerDstAlignedBlockRow","dstBufferSize","expectedTexture","expectedData","Uint8Array","updateLinearTextureDataSubBox","src","dataLayout","offset","data","dest","expectTexturesToMatchByRendering","dstBufferDesc","GPUBufferUsage","dstBuffer","createBuffer","copyTextureToBuffer","buffer","expectedUint8DataWithPadding","expectedUint8Data","appliedCopyBlocksPerRow","appliedCopyBlockRowsPerImage","srcCopyOffsetInBlocks","dstCopyOffsetInBlocks","srcOffsetZ","dstOffsetZ","dstOffsetYInBlocks","expectedDataWithPaddingOffset","srcOffsetYInBlocks","expectedDataOffset","bytesInRow","start","length","dst","alternateExpectedData","includes","slice","i","expectGPUBufferValuesPassCheck","vals","srcByteOffset","type","typedLength","InitializeStencilAspect","sourceTexture","initialStencilData","srcCopyBaseArrayLayer","copySize","aspect","VerifyStencilAspect","destinationTexture","dstCopyBaseArrayLayer","outputBufferSize","layout","method","outputBuffer","expectedStencilData","initialOffsetPerLayer","expectedOffsetPerLayer","initialOffsetPerRow","expectedOffsetPerRow","expectGPUBufferValuesEqual","GetRenderPipelineForT2TCopyWithDepthTests","bindGroupLayout","hasColorAttachment","depthStencil","renderPipelineDescriptor","createPipelineLayout","bindGroupLayouts","vertex","module","createShaderModule","code","entryPoint","fragment","targets","createRenderPipeline","GetBindGroupLayoutForT2TCopyWithDepthTests","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","VERTEX","minBindingSize","hasDynamicOffset","GetBindGroupForT2TCopyWithDepthTests","totalCopyArrayLayers","uniformBufferSize","uniformBufferData","Float32Array","uniformBuffer","UNIFORM","createBindGroup","resource","InitializeDepthAspect","depthFormat","renderPipeline","depthWriteEnabled","depthCompare","bindGroup","hasStencil","stencil","srcCopyLayer","renderPass","beginRenderPass","colorAttachments","depthStencilAttachment","view","createView","baseArrayLayer","arrayLayerCount","baseMipLevel","depthClearValue","depthLoadOp","depthStoreOp","stencilLoadOp","undefined","stencilStoreOp","setBindGroup","setPipeline","draw","end","VerifyDepthAspect","outputColorTexture","RENDER_ATTACHMENT","dstCopyLayer","clearValue","r","g","b","a","loadOp","storeOp","expectSingleColor","exp","R","G","B","A","kCopyBoxOffsetsForWholeDepth","kCopyBoxOffsetsFor2DArrayTextures","test","desc","params","u","combine","filter","srcBaseFormat","baseFormat","dstBaseFormat","beginSubcases","expandWithParams","p","param","unless","fn","t","beforeAllSubcases","skipIfCopyTextureToTextureNotSupportedForFormat","selectDeviceOrSkipTestCase","feature","textureSizeInBlocks","srcBlockWidth","srcBlockHeight","dstBlockWidth","dstBlockHeight","paramsSubcasesOnly","combineWithParams","copyBoxOffset","selectDeviceForTextureFormatOrSkipTestCase","depth","kColorFormat","kSampleCount","sampleCount","renderPipelineForInit","multisample","count","initEncoder","renderPassForInit","copyEncoder","renderPipelineForValidation","getBindGroupLayout","expectedOutputTexture","validationEncoder","renderPassForValidation","kDepthFormat","vertexState","encoderForInit","renderPipelineForVerify","multisampledColorTexture","colorTextureAsResolveTarget","encoderForVerify","renderPassForVerify","resolveTarget"],"sources":["../../../../../src/webgpu/api/operation/command_buffer/copyTextureToTexture.spec.ts"],"sourcesContent":["export const description = `copyTextureToTexture operation tests`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { assert, memcpy, unreachable } from '../../../../common/util/util.js';\nimport {\n  kBufferSizeAlignment,\n  kMinDynamicBufferOffsetAlignment,\n  kTextureDimensions,\n} from '../../../capability_info.js';\nimport {\n  kTextureFormatInfo,\n  kRegularTextureFormats,\n  kCompressedTextureFormats,\n  kDepthStencilFormats,\n  textureDimensionAndFormatCompatible,\n  depthStencilFormatAspectSize,\n  DepthStencilFormat,\n  ColorTextureFormat,\n  isCompressedTextureFormat,\n  viewCompatible,\n} from '../../../format_info.js';\nimport { GPUTest, TextureTestMixin } from '../../../gpu_test.js';\nimport { makeBufferWithContents } from '../../../util/buffer.js';\nimport { checkElementsEqual, checkElementsEqualEither } from '../../../util/check_contents.js';\nimport { align } from '../../../util/math.js';\nimport { physicalMipSize } from '../../../util/texture/base.js';\nimport { DataArrayGenerator } from '../../../util/texture/data_generation.js';\nimport { kBytesPerRowAlignment, dataBytesForCopyOrFail } from '../../../util/texture/layout.js';\n\nconst dataGenerator = new DataArrayGenerator();\n\nclass F extends TextureTestMixin(GPUTest) {\n  GetInitialDataPerMipLevel(\n    dimension: GPUTextureDimension,\n    textureSize: Required<GPUExtent3DDict>,\n    format: ColorTextureFormat,\n    mipLevel: number\n  ): Uint8Array {\n    const textureSizeAtLevel = physicalMipSize(textureSize, format, dimension, mipLevel);\n    const bytesPerBlock = kTextureFormatInfo[format].color.bytes;\n    const blockWidthInTexel = kTextureFormatInfo[format].blockWidth;\n    const blockHeightInTexel = kTextureFormatInfo[format].blockHeight;\n    const blocksPerSubresource =\n      (textureSizeAtLevel.width / blockWidthInTexel) *\n      (textureSizeAtLevel.height / blockHeightInTexel);\n\n    const byteSize = bytesPerBlock * blocksPerSubresource * textureSizeAtLevel.depthOrArrayLayers;\n    return dataGenerator.generateView(byteSize);\n  }\n\n  GetInitialStencilDataPerMipLevel(\n    textureSize: Required<GPUExtent3DDict>,\n    format: DepthStencilFormat,\n    mipLevel: number\n  ): Uint8Array {\n    const textureSizeAtLevel = physicalMipSize(textureSize, format, '2d', mipLevel);\n    const aspectBytesPerBlock = depthStencilFormatAspectSize(format, 'stencil-only');\n    const byteSize =\n      aspectBytesPerBlock *\n      textureSizeAtLevel.width *\n      textureSizeAtLevel.height *\n      textureSizeAtLevel.depthOrArrayLayers;\n    return dataGenerator.generateView(byteSize);\n  }\n\n  DoCopyTextureToTextureTest(\n    dimension: GPUTextureDimension,\n    srcTextureSize: Required<GPUExtent3DDict>,\n    dstTextureSize: Required<GPUExtent3DDict>,\n    srcFormat: ColorTextureFormat,\n    dstFormat: ColorTextureFormat,\n    copyBoxOffsets: {\n      srcOffset: { x: number; y: number; z: number };\n      dstOffset: { x: number; y: number; z: number };\n      copyExtent: Required<GPUExtent3DDict>;\n    },\n    srcCopyLevel: number,\n    dstCopyLevel: number\n  ): void {\n    this.skipIfTextureFormatNotSupported(srcFormat, dstFormat);\n\n    // If we're in compatibility mode and it's a compressed texture\n    // then we need to render the texture to test the results of the copy.\n    const extraTextureUsageFlags =\n      isCompressedTextureFormat(dstFormat) && this.isCompatibility\n        ? GPUTextureUsage.TEXTURE_BINDING\n        : 0;\n    const mipLevelCount = dimension === '1d' ? 1 : 4;\n\n    // Create srcTexture and dstTexture\n    const srcTextureDesc: GPUTextureDescriptor = {\n      dimension,\n      size: srcTextureSize,\n      format: srcFormat,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n      mipLevelCount,\n    };\n    const srcTexture = this.device.createTexture(srcTextureDesc);\n    this.trackForCleanup(srcTexture);\n    const dstTextureDesc: GPUTextureDescriptor = {\n      dimension,\n      size: dstTextureSize,\n      format: dstFormat,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST | extraTextureUsageFlags,\n      mipLevelCount,\n    };\n    const dstTexture = this.device.createTexture(dstTextureDesc);\n    this.trackForCleanup(dstTexture);\n\n    // Fill the whole subresource of srcTexture at srcCopyLevel with initialSrcData.\n    const initialSrcData = this.GetInitialDataPerMipLevel(\n      dimension,\n      srcTextureSize,\n      srcFormat,\n      srcCopyLevel\n    );\n    const srcTextureSizeAtLevel = physicalMipSize(\n      srcTextureSize,\n      srcFormat,\n      dimension,\n      srcCopyLevel\n    );\n    const bytesPerBlock = kTextureFormatInfo[srcFormat].color.bytes;\n    const blockWidth = kTextureFormatInfo[srcFormat].blockWidth;\n    const blockHeight = kTextureFormatInfo[srcFormat].blockHeight;\n    const srcBlocksPerRow = srcTextureSizeAtLevel.width / blockWidth;\n    const srcBlockRowsPerImage = srcTextureSizeAtLevel.height / blockHeight;\n    this.device.queue.writeTexture(\n      { texture: srcTexture, mipLevel: srcCopyLevel },\n      initialSrcData,\n      {\n        bytesPerRow: srcBlocksPerRow * bytesPerBlock,\n        rowsPerImage: srcBlockRowsPerImage,\n      },\n      srcTextureSizeAtLevel\n    );\n\n    // Copy the region specified by copyBoxOffsets from srcTexture to dstTexture.\n    const dstTextureSizeAtLevel = physicalMipSize(\n      dstTextureSize,\n      dstFormat,\n      dimension,\n      dstCopyLevel\n    );\n    const minWidth = Math.min(srcTextureSizeAtLevel.width, dstTextureSizeAtLevel.width);\n    const minHeight = Math.min(srcTextureSizeAtLevel.height, dstTextureSizeAtLevel.height);\n    const minDepth = Math.min(\n      srcTextureSizeAtLevel.depthOrArrayLayers,\n      dstTextureSizeAtLevel.depthOrArrayLayers\n    );\n\n    const appliedSrcOffset = {\n      x: Math.min(copyBoxOffsets.srcOffset.x * blockWidth, minWidth),\n      y: Math.min(copyBoxOffsets.srcOffset.y * blockHeight, minHeight),\n      z: Math.min(copyBoxOffsets.srcOffset.z, minDepth),\n    };\n    const appliedDstOffset = {\n      x: Math.min(copyBoxOffsets.dstOffset.x * blockWidth, minWidth),\n      y: Math.min(copyBoxOffsets.dstOffset.y * blockHeight, minHeight),\n      z: Math.min(copyBoxOffsets.dstOffset.z, minDepth),\n    };\n\n    const appliedCopyWidth = Math.max(\n      minWidth +\n        copyBoxOffsets.copyExtent.width * blockWidth -\n        Math.max(appliedSrcOffset.x, appliedDstOffset.x),\n      0\n    );\n    const appliedCopyHeight = Math.max(\n      minHeight +\n        copyBoxOffsets.copyExtent.height * blockHeight -\n        Math.max(appliedSrcOffset.y, appliedDstOffset.y),\n      0\n    );\n    assert(appliedCopyWidth % blockWidth === 0 && appliedCopyHeight % blockHeight === 0);\n\n    const appliedCopyDepth = Math.max(\n      0,\n      minDepth +\n        copyBoxOffsets.copyExtent.depthOrArrayLayers -\n        Math.max(appliedSrcOffset.z, appliedDstOffset.z)\n    );\n    assert(appliedCopyDepth >= 0);\n\n    const appliedSize = {\n      width: appliedCopyWidth,\n      height: appliedCopyHeight,\n      depthOrArrayLayers: appliedCopyDepth,\n    };\n\n    {\n      const encoder = this.device.createCommandEncoder();\n      encoder.copyTextureToTexture(\n        { texture: srcTexture, mipLevel: srcCopyLevel, origin: appliedSrcOffset },\n        { texture: dstTexture, mipLevel: dstCopyLevel, origin: appliedDstOffset },\n        appliedSize\n      );\n      this.device.queue.submit([encoder.finish()]);\n    }\n\n    const dstBlocksPerRow = dstTextureSizeAtLevel.width / blockWidth;\n    const dstBlockRowsPerImage = dstTextureSizeAtLevel.height / blockHeight;\n    const bytesPerDstAlignedBlockRow = align(dstBlocksPerRow * bytesPerBlock, 256);\n    const dstBufferSize =\n      (dstBlockRowsPerImage * dstTextureSizeAtLevel.depthOrArrayLayers - 1) *\n        bytesPerDstAlignedBlockRow +\n      align(dstBlocksPerRow * bytesPerBlock, 4);\n\n    if (isCompressedTextureFormat(dstTexture.format) && this.isCompatibility) {\n      assert(viewCompatible(srcFormat, dstFormat));\n      // compare by rendering. We need the expected texture to match\n      // the dstTexture so we'll create a texture where we supply\n      // all of the data in JavaScript.\n      const expectedTexture = this.device.createTexture({\n        size: [dstTexture.width, dstTexture.height, dstTexture.depthOrArrayLayers],\n        mipLevelCount: dstTexture.mipLevelCount,\n        format: dstTexture.format,\n        usage: dstTexture.usage,\n      });\n      const expectedData = new Uint8Array(dstBufferSize);\n\n      // Execute the equivalent of `copyTextureToTexture`, copying\n      // from `initialSrcData` to `expectedData`.\n      this.updateLinearTextureDataSubBox(dstFormat, appliedSize, {\n        src: {\n          dataLayout: {\n            bytesPerRow: srcBlocksPerRow * bytesPerBlock,\n            rowsPerImage: srcBlockRowsPerImage,\n            offset: 0,\n          },\n          origin: appliedSrcOffset,\n          data: initialSrcData,\n        },\n        dest: {\n          dataLayout: {\n            bytesPerRow: dstBlocksPerRow * bytesPerBlock,\n            rowsPerImage: dstBlockRowsPerImage,\n            offset: 0,\n          },\n          origin: appliedDstOffset,\n          data: expectedData,\n        },\n      });\n\n      // Upload `expectedData` to `expectedTexture`. If `copyTextureToTexture`\n      // worked then the contents of `dstTexture` should match `expectedTexture`\n      this.queue.writeTexture(\n        { texture: expectedTexture, mipLevel: dstCopyLevel },\n        expectedData,\n        {\n          bytesPerRow: dstBlocksPerRow * bytesPerBlock,\n          rowsPerImage: dstBlockRowsPerImage,\n        },\n        dstTextureSizeAtLevel\n      );\n\n      this.expectTexturesToMatchByRendering(\n        dstTexture,\n        expectedTexture,\n        dstCopyLevel,\n        appliedDstOffset,\n        appliedSize\n      );\n      return;\n    }\n\n    // Copy the whole content of dstTexture at dstCopyLevel to dstBuffer.\n    const dstBufferDesc: GPUBufferDescriptor = {\n      size: dstBufferSize,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    };\n    const dstBuffer = this.device.createBuffer(dstBufferDesc);\n    this.trackForCleanup(dstBuffer);\n\n    {\n      const encoder = this.device.createCommandEncoder();\n      encoder.copyTextureToBuffer(\n        { texture: dstTexture, mipLevel: dstCopyLevel },\n        {\n          buffer: dstBuffer,\n          bytesPerRow: bytesPerDstAlignedBlockRow,\n          rowsPerImage: dstBlockRowsPerImage,\n        },\n        dstTextureSizeAtLevel\n      );\n      this.device.queue.submit([encoder.finish()]);\n    }\n\n    // Fill expectedUint8DataWithPadding with the expected data of dstTexture. The other values in\n    // expectedUint8DataWithPadding are kept 0 to check if the texels untouched by the copy are 0\n    // (their previous values).\n    const expectedUint8DataWithPadding = new Uint8Array(dstBufferSize);\n    const expectedUint8Data = new Uint8Array(initialSrcData);\n\n    const appliedCopyBlocksPerRow = appliedCopyWidth / blockWidth;\n    const appliedCopyBlockRowsPerImage = appliedCopyHeight / blockHeight;\n    const srcCopyOffsetInBlocks = {\n      x: appliedSrcOffset.x / blockWidth,\n      y: appliedSrcOffset.y / blockHeight,\n      z: appliedSrcOffset.z,\n    };\n    const dstCopyOffsetInBlocks = {\n      x: appliedDstOffset.x / blockWidth,\n      y: appliedDstOffset.y / blockHeight,\n      z: appliedDstOffset.z,\n    };\n\n    for (let z = 0; z < appliedCopyDepth; ++z) {\n      const srcOffsetZ = srcCopyOffsetInBlocks.z + z;\n      const dstOffsetZ = dstCopyOffsetInBlocks.z + z;\n      for (let y = 0; y < appliedCopyBlockRowsPerImage; ++y) {\n        const dstOffsetYInBlocks = dstCopyOffsetInBlocks.y + y;\n        const expectedDataWithPaddingOffset =\n          bytesPerDstAlignedBlockRow * (dstBlockRowsPerImage * dstOffsetZ + dstOffsetYInBlocks) +\n          dstCopyOffsetInBlocks.x * bytesPerBlock;\n\n        const srcOffsetYInBlocks = srcCopyOffsetInBlocks.y + y;\n        const expectedDataOffset =\n          bytesPerBlock *\n            srcBlocksPerRow *\n            (srcBlockRowsPerImage * srcOffsetZ + srcOffsetYInBlocks) +\n          srcCopyOffsetInBlocks.x * bytesPerBlock;\n\n        const bytesInRow = appliedCopyBlocksPerRow * bytesPerBlock;\n        memcpy(\n          { src: expectedUint8Data, start: expectedDataOffset, length: bytesInRow },\n          { dst: expectedUint8DataWithPadding, start: expectedDataWithPaddingOffset }\n        );\n      }\n    }\n\n    let alternateExpectedData = expectedUint8DataWithPadding;\n    // For 8-byte snorm formats, allow an alternative encoding of -1.\n    // MAINTENANCE_TODO: Use textureContentIsOKByT2B with TexelView.\n    if (srcFormat.includes('snorm')) {\n      switch (srcFormat) {\n        case 'r8snorm':\n        case 'rg8snorm':\n        case 'rgba8snorm':\n          alternateExpectedData = alternateExpectedData.slice();\n          for (let i = 0; i < alternateExpectedData.length; ++i) {\n            if (alternateExpectedData[i] === 128) {\n              alternateExpectedData[i] = 129;\n            } else if (alternateExpectedData[i] === 129) {\n              alternateExpectedData[i] = 128;\n            }\n          }\n          break;\n        case 'bc4-r-snorm':\n        case 'bc5-rg-snorm':\n        case 'eac-r11snorm':\n        case 'eac-rg11snorm':\n          break;\n        default:\n          unreachable();\n      }\n    }\n\n    // Verify the content of the whole subresource of dstTexture at dstCopyLevel (in dstBuffer) is expected.\n    this.expectGPUBufferValuesPassCheck(\n      dstBuffer,\n      alternateExpectedData === expectedUint8DataWithPadding\n        ? vals => checkElementsEqual(vals, expectedUint8DataWithPadding)\n        : vals =>\n            checkElementsEqualEither(vals, [expectedUint8DataWithPadding, alternateExpectedData]),\n      {\n        srcByteOffset: 0,\n        type: Uint8Array,\n        typedLength: expectedUint8DataWithPadding.length,\n      }\n    );\n  }\n\n  InitializeStencilAspect(\n    sourceTexture: GPUTexture,\n    initialStencilData: Uint8Array,\n    srcCopyLevel: number,\n    srcCopyBaseArrayLayer: number,\n    copySize: readonly [number, number, number]\n  ): void {\n    this.queue.writeTexture(\n      {\n        texture: sourceTexture,\n        mipLevel: srcCopyLevel,\n        aspect: 'stencil-only',\n        origin: { x: 0, y: 0, z: srcCopyBaseArrayLayer },\n      },\n      initialStencilData,\n      { bytesPerRow: copySize[0], rowsPerImage: copySize[1] },\n      copySize\n    );\n  }\n\n  VerifyStencilAspect(\n    destinationTexture: GPUTexture,\n    initialStencilData: Uint8Array,\n    dstCopyLevel: number,\n    dstCopyBaseArrayLayer: number,\n    copySize: readonly [number, number, number]\n  ): void {\n    const bytesPerRow = align(copySize[0], kBytesPerRowAlignment);\n    const rowsPerImage = copySize[1];\n    const outputBufferSize = align(\n      dataBytesForCopyOrFail({\n        layout: { bytesPerRow, rowsPerImage },\n        format: 'stencil8',\n        copySize,\n        method: 'CopyT2B',\n      }),\n      kBufferSizeAlignment\n    );\n    const outputBuffer = this.device.createBuffer({\n      size: outputBufferSize,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    });\n    this.trackForCleanup(outputBuffer);\n    const encoder = this.device.createCommandEncoder();\n    encoder.copyTextureToBuffer(\n      {\n        texture: destinationTexture,\n        aspect: 'stencil-only',\n        mipLevel: dstCopyLevel,\n        origin: { x: 0, y: 0, z: dstCopyBaseArrayLayer },\n      },\n      { buffer: outputBuffer, bytesPerRow, rowsPerImage },\n      copySize\n    );\n    this.queue.submit([encoder.finish()]);\n\n    const expectedStencilData = new Uint8Array(outputBufferSize);\n    for (let z = 0; z < copySize[2]; ++z) {\n      const initialOffsetPerLayer = z * copySize[0] * copySize[1];\n      const expectedOffsetPerLayer = z * bytesPerRow * rowsPerImage;\n      for (let y = 0; y < copySize[1]; ++y) {\n        const initialOffsetPerRow = initialOffsetPerLayer + y * copySize[0];\n        const expectedOffsetPerRow = expectedOffsetPerLayer + y * bytesPerRow;\n        memcpy(\n          { src: initialStencilData, start: initialOffsetPerRow, length: copySize[0] },\n          { dst: expectedStencilData, start: expectedOffsetPerRow }\n        );\n      }\n    }\n    this.expectGPUBufferValuesEqual(outputBuffer, expectedStencilData);\n  }\n\n  GetRenderPipelineForT2TCopyWithDepthTests(\n    bindGroupLayout: GPUBindGroupLayout,\n    hasColorAttachment: boolean,\n    depthStencil: GPUDepthStencilState\n  ): GPURenderPipeline {\n    const renderPipelineDescriptor: GPURenderPipelineDescriptor = {\n      layout: this.device.createPipelineLayout({ bindGroupLayouts: [bindGroupLayout] }),\n      vertex: {\n        module: this.device.createShaderModule({\n          code: `\n            struct Params {\n              copyLayer: f32\n            };\n            @group(0) @binding(0) var<uniform> param: Params;\n            @vertex\n            fn main(@builtin(vertex_index) VertexIndex : u32)-> @builtin(position) vec4<f32> {\n              var depthValue = 0.5 + 0.2 * sin(param.copyLayer);\n              var pos : array<vec3<f32>, 6> = array<vec3<f32>, 6>(\n                  vec3<f32>(-1.0,  1.0, depthValue),\n                  vec3<f32>(-1.0, -1.0, 0.0),\n                  vec3<f32>( 1.0,  1.0, 1.0),\n                  vec3<f32>(-1.0, -1.0, 0.0),\n                  vec3<f32>( 1.0,  1.0, 1.0),\n                  vec3<f32>( 1.0, -1.0, depthValue));\n              return vec4<f32>(pos[VertexIndex], 1.0);\n            }`,\n        }),\n        entryPoint: 'main',\n      },\n      depthStencil,\n    };\n    if (hasColorAttachment) {\n      renderPipelineDescriptor.fragment = {\n        module: this.device.createShaderModule({\n          code: `\n            @fragment\n            fn main() -> @location(0) vec4<f32> {\n              return vec4<f32>(0.0, 1.0, 0.0, 1.0);\n            }`,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: 'rgba8unorm' }],\n      };\n    }\n    return this.device.createRenderPipeline(renderPipelineDescriptor);\n  }\n\n  GetBindGroupLayoutForT2TCopyWithDepthTests(): GPUBindGroupLayout {\n    return this.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.VERTEX,\n          buffer: {\n            type: 'uniform',\n            minBindingSize: 4,\n            hasDynamicOffset: true,\n          },\n        },\n      ],\n    });\n  }\n\n  GetBindGroupForT2TCopyWithDepthTests(\n    bindGroupLayout: GPUBindGroupLayout,\n    totalCopyArrayLayers: number\n  ): GPUBindGroup {\n    // Prepare the uniform buffer that contains all the copy layers to generate different depth\n    // values for different copy layers.\n    assert(totalCopyArrayLayers > 0);\n    const uniformBufferSize = kMinDynamicBufferOffsetAlignment * (totalCopyArrayLayers - 1) + 4;\n    const uniformBufferData = new Float32Array(uniformBufferSize / 4);\n    for (let i = 1; i < totalCopyArrayLayers; ++i) {\n      uniformBufferData[(kMinDynamicBufferOffsetAlignment / 4) * i] = i;\n    }\n    const uniformBuffer = makeBufferWithContents(\n      this.device,\n      uniformBufferData,\n      GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM\n    );\n    return this.device.createBindGroup({\n      layout: bindGroupLayout,\n      entries: [\n        {\n          binding: 0,\n          resource: {\n            buffer: uniformBuffer,\n            size: 4,\n          },\n        },\n      ],\n    });\n  }\n\n  /** Initialize the depth aspect of sourceTexture with draw calls */\n  InitializeDepthAspect(\n    sourceTexture: GPUTexture,\n    depthFormat: GPUTextureFormat,\n    srcCopyLevel: number,\n    srcCopyBaseArrayLayer: number,\n    copySize: readonly [number, number, number]\n  ): void {\n    // Prepare a renderPipeline with depthCompareFunction == 'always' and depthWriteEnabled == true\n    // for the initializations of the depth attachment.\n    const bindGroupLayout = this.GetBindGroupLayoutForT2TCopyWithDepthTests();\n    const renderPipeline = this.GetRenderPipelineForT2TCopyWithDepthTests(bindGroupLayout, false, {\n      format: depthFormat,\n      depthWriteEnabled: true,\n      depthCompare: 'always',\n    });\n    const bindGroup = this.GetBindGroupForT2TCopyWithDepthTests(bindGroupLayout, copySize[2]);\n\n    const hasStencil = kTextureFormatInfo[sourceTexture.format].stencil;\n    const encoder = this.device.createCommandEncoder();\n    for (let srcCopyLayer = 0; srcCopyLayer < copySize[2]; ++srcCopyLayer) {\n      const renderPass = encoder.beginRenderPass({\n        colorAttachments: [],\n        depthStencilAttachment: {\n          view: sourceTexture.createView({\n            baseArrayLayer: srcCopyLayer + srcCopyBaseArrayLayer,\n            arrayLayerCount: 1,\n            baseMipLevel: srcCopyLevel,\n            mipLevelCount: 1,\n          }),\n          depthClearValue: 0.0,\n          depthLoadOp: 'clear',\n          depthStoreOp: 'store',\n          stencilLoadOp: hasStencil ? 'load' : undefined,\n          stencilStoreOp: hasStencil ? 'store' : undefined,\n        },\n      });\n      renderPass.setBindGroup(0, bindGroup, [srcCopyLayer * kMinDynamicBufferOffsetAlignment]);\n      renderPass.setPipeline(renderPipeline);\n      renderPass.draw(6);\n      renderPass.end();\n    }\n    this.queue.submit([encoder.finish()]);\n  }\n\n  VerifyDepthAspect(\n    destinationTexture: GPUTexture,\n    depthFormat: GPUTextureFormat,\n    dstCopyLevel: number,\n    dstCopyBaseArrayLayer: number,\n    copySize: [number, number, number]\n  ): void {\n    // Prepare a renderPipeline with depthCompareFunction == 'equal' and depthWriteEnabled == false\n    // for the comparison of the depth attachment.\n    const bindGroupLayout = this.GetBindGroupLayoutForT2TCopyWithDepthTests();\n    const renderPipeline = this.GetRenderPipelineForT2TCopyWithDepthTests(bindGroupLayout, true, {\n      format: depthFormat,\n      depthWriteEnabled: false,\n      depthCompare: 'equal',\n    });\n    const bindGroup = this.GetBindGroupForT2TCopyWithDepthTests(bindGroupLayout, copySize[2]);\n\n    const outputColorTexture = this.trackForCleanup(\n      this.device.createTexture({\n        format: 'rgba8unorm',\n        size: copySize,\n        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n      })\n    );\n    const hasStencil = kTextureFormatInfo[destinationTexture.format].stencil;\n    const encoder = this.device.createCommandEncoder();\n    for (let dstCopyLayer = 0; dstCopyLayer < copySize[2]; ++dstCopyLayer) {\n      // If the depth value is not expected, the color of outputColorTexture will remain Red after\n      // the render pass.\n      const renderPass = encoder.beginRenderPass({\n        colorAttachments: [\n          {\n            view: outputColorTexture.createView({\n              baseArrayLayer: dstCopyLayer,\n              arrayLayerCount: 1,\n            }),\n            clearValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n            loadOp: 'clear',\n            storeOp: 'store',\n          },\n        ],\n        depthStencilAttachment: {\n          view: destinationTexture.createView({\n            baseArrayLayer: dstCopyLayer + dstCopyBaseArrayLayer,\n            arrayLayerCount: 1,\n            baseMipLevel: dstCopyLevel,\n            mipLevelCount: 1,\n          }),\n          depthLoadOp: 'load',\n          depthStoreOp: 'store',\n          stencilLoadOp: hasStencil ? 'load' : undefined,\n          stencilStoreOp: hasStencil ? 'store' : undefined,\n        },\n      });\n      renderPass.setBindGroup(0, bindGroup, [dstCopyLayer * kMinDynamicBufferOffsetAlignment]);\n      renderPass.setPipeline(renderPipeline);\n      renderPass.draw(6);\n      renderPass.end();\n    }\n    this.queue.submit([encoder.finish()]);\n\n    this.expectSingleColor(outputColorTexture, 'rgba8unorm', {\n      size: copySize,\n      exp: { R: 0.0, G: 1.0, B: 0.0, A: 1.0 },\n    });\n  }\n}\n\nconst kCopyBoxOffsetsForWholeDepth = [\n  // From (0, 0) of src to (0, 0) of dst.\n  {\n    srcOffset: { x: 0, y: 0, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 },\n  },\n  // From (0, 0) of src to (blockWidth, 0) of dst.\n  {\n    srcOffset: { x: 0, y: 0, z: 0 },\n    dstOffset: { x: 1, y: 0, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 },\n  },\n  // From (0, 0) of src to (0, blockHeight) of dst.\n  {\n    srcOffset: { x: 0, y: 0, z: 0 },\n    dstOffset: { x: 0, y: 1, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 },\n  },\n  // From (blockWidth, 0) of src to (0, 0) of dst.\n  {\n    srcOffset: { x: 1, y: 0, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 },\n  },\n  // From (0, blockHeight) of src to (0, 0) of dst.\n  {\n    srcOffset: { x: 0, y: 1, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 },\n  },\n  // From (blockWidth, 0) of src to (0, 0) of dst, and the copy extent will not cover the last\n  // texel block column of both source and destination texture.\n  {\n    srcOffset: { x: 1, y: 0, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: -1, height: 0, depthOrArrayLayers: 0 },\n  },\n  // From (0, blockHeight) of src to (0, 0) of dst, and the copy extent will not cover the last\n  // texel block row of both source and destination texture.\n  {\n    srcOffset: { x: 0, y: 1, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: 0, height: -1, depthOrArrayLayers: 0 },\n  },\n] as const;\n\nconst kCopyBoxOffsetsFor2DArrayTextures = [\n  // Copy the whole array slices from the source texture to the destination texture.\n  // The copy extent will cover the whole subresource of either source or the\n  // destination texture\n  ...kCopyBoxOffsetsForWholeDepth,\n\n  // Copy 1 texture slice from the 1st slice of the source texture to the 1st slice of the\n  // destination texture.\n  {\n    srcOffset: { x: 0, y: 0, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: -2 },\n  },\n  // Copy 1 texture slice from the 2nd slice of the source texture to the 2nd slice of the\n  // destination texture.\n  {\n    srcOffset: { x: 0, y: 0, z: 1 },\n    dstOffset: { x: 0, y: 0, z: 1 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: -3 },\n  },\n  // Copy 1 texture slice from the 1st slice of the source texture to the 2nd slice of the\n  // destination texture.\n  {\n    srcOffset: { x: 0, y: 0, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 1 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: -1 },\n  },\n  // Copy 1 texture slice from the 2nd slice of the source texture to the 1st slice of the\n  // destination texture.\n  {\n    srcOffset: { x: 0, y: 0, z: 1 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: -1 },\n  },\n  // Copy 2 texture slices from the 1st slice of the source texture to the 1st slice of the\n  // destination texture.\n  {\n    srcOffset: { x: 0, y: 0, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: -3 },\n  },\n  // Copy 3 texture slices from the 2nd slice of the source texture to the 2nd slice of the\n  // destination texture.\n  {\n    srcOffset: { x: 0, y: 0, z: 1 },\n    dstOffset: { x: 0, y: 0, z: 1 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: -1 },\n  },\n] as const;\n\nexport const g = makeTestGroup(F);\n\ng.test('color_textures,non_compressed,non_array')\n  .desc(\n    `\n  Validate the correctness of the copy by filling the srcTexture with testable data and any\n  non-compressed color format supported by WebGPU, doing CopyTextureToTexture() copy, and verifying\n  the content of the whole dstTexture.\n\n  Copy {1 texel block, part of, the whole} srcTexture to the dstTexture {with, without} a non-zero\n  valid srcOffset that\n  - covers the whole dstTexture subresource\n  - covers the corners of the dstTexture\n  - doesn't cover any texels that are on the edge of the dstTexture\n  - covers the mipmap level > 0\n\n  Tests for all pairs of valid source/destination formats, and all texture dimensions.\n  `\n  )\n  .params(u =>\n    u\n      .combine('srcFormat', kRegularTextureFormats)\n      .combine('dstFormat', kRegularTextureFormats)\n      .filter(({ srcFormat, dstFormat }) => {\n        const srcBaseFormat = kTextureFormatInfo[srcFormat].baseFormat;\n        const dstBaseFormat = kTextureFormatInfo[dstFormat].baseFormat;\n        return (\n          srcFormat === dstFormat ||\n          (srcBaseFormat !== undefined &&\n            dstBaseFormat !== undefined &&\n            srcBaseFormat === dstBaseFormat)\n        );\n      })\n      .combine('dimension', kTextureDimensions)\n      .filter(\n        ({ dimension, srcFormat, dstFormat }) =>\n          textureDimensionAndFormatCompatible(dimension, srcFormat) &&\n          textureDimensionAndFormatCompatible(dimension, dstFormat)\n      )\n      .beginSubcases()\n      .expandWithParams(p => {\n        const params = [\n          {\n            srcTextureSize: { width: 32, height: 32, depthOrArrayLayers: 1 },\n            dstTextureSize: { width: 32, height: 32, depthOrArrayLayers: 1 },\n          },\n          {\n            srcTextureSize: { width: 31, height: 33, depthOrArrayLayers: 1 },\n            dstTextureSize: { width: 31, height: 33, depthOrArrayLayers: 1 },\n          },\n          {\n            srcTextureSize: { width: 32, height: 32, depthOrArrayLayers: 1 },\n            dstTextureSize: { width: 64, height: 64, depthOrArrayLayers: 1 },\n          },\n          {\n            srcTextureSize: { width: 32, height: 32, depthOrArrayLayers: 1 },\n            dstTextureSize: { width: 63, height: 61, depthOrArrayLayers: 1 },\n          },\n        ];\n        if (p.dimension === '1d') {\n          for (const param of params) {\n            param.srcTextureSize.height = 1;\n            param.dstTextureSize.height = 1;\n          }\n        }\n\n        return params;\n      })\n      .combine('copyBoxOffsets', kCopyBoxOffsetsForWholeDepth)\n      .unless(\n        p =>\n          p.dimension === '1d' &&\n          (p.copyBoxOffsets.copyExtent.height !== 0 ||\n            p.copyBoxOffsets.srcOffset.y !== 0 ||\n            p.copyBoxOffsets.dstOffset.y !== 0)\n      )\n      .combine('srcCopyLevel', [0, 3])\n      .combine('dstCopyLevel', [0, 3])\n      .unless(p => p.dimension === '1d' && (p.srcCopyLevel !== 0 || p.dstCopyLevel !== 0))\n  )\n  .fn(t => {\n    const {\n      dimension,\n      srcTextureSize,\n      dstTextureSize,\n      srcFormat,\n      dstFormat,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel,\n    } = t.params;\n\n    t.DoCopyTextureToTextureTest(\n      dimension,\n      srcTextureSize,\n      dstTextureSize,\n      srcFormat,\n      dstFormat,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel\n    );\n  });\n\ng.test('color_textures,compressed,non_array')\n  .desc(\n    `\n  Validate the correctness of the copy by filling the srcTexture with testable data and any\n  compressed color format supported by WebGPU, doing CopyTextureToTexture() copy, and verifying\n  the content of the whole dstTexture.\n\n  Tests for all pairs of valid source/destination formats, and all texture dimensions.\n  `\n  )\n  .params(u =>\n    u\n      .combine('srcFormat', kCompressedTextureFormats)\n      .combine('dstFormat', kCompressedTextureFormats)\n      .filter(({ srcFormat, dstFormat }) => {\n        const srcBaseFormat = kTextureFormatInfo[srcFormat].baseFormat;\n        const dstBaseFormat = kTextureFormatInfo[dstFormat].baseFormat;\n        return (\n          srcFormat === dstFormat ||\n          (srcBaseFormat !== undefined &&\n            dstBaseFormat !== undefined &&\n            srcBaseFormat === dstBaseFormat)\n        );\n      })\n      .combine('dimension', kTextureDimensions)\n      .filter(\n        ({ dimension, srcFormat, dstFormat }) =>\n          textureDimensionAndFormatCompatible(dimension, srcFormat) &&\n          textureDimensionAndFormatCompatible(dimension, dstFormat)\n      )\n      .beginSubcases()\n      .combine('textureSizeInBlocks', [\n        // The heights and widths in blocks are all power of 2\n        { src: { width: 16, height: 8 }, dst: { width: 16, height: 8 } },\n        // The virtual width of the source texture at mipmap level 2 (15) is not a multiple of 4 blocks\n        { src: { width: 15, height: 8 }, dst: { width: 16, height: 8 } },\n        // The virtual width of the destination texture at mipmap level 2 (15) is not a multiple\n        // of 4 blocks\n        { src: { width: 16, height: 8 }, dst: { width: 15, height: 8 } },\n        // The virtual height of the source texture at mipmap level 2 (13) is not a multiple of 4 blocks\n        { src: { width: 16, height: 13 }, dst: { width: 16, height: 8 } },\n        // The virtual height of the destination texture at mipmap level 2 (13) is not a\n        // multiple of 4 blocks\n        { src: { width: 16, height: 8 }, dst: { width: 16, height: 13 } },\n        // None of the widths or heights in blocks are power of 2\n        { src: { width: 15, height: 13 }, dst: { width: 15, height: 13 } },\n      ])\n      .combine('copyBoxOffsets', kCopyBoxOffsetsForWholeDepth)\n      .combine('srcCopyLevel', [0, 2])\n      .combine('dstCopyLevel', [0, 2])\n  )\n  .beforeAllSubcases(t => {\n    const { srcFormat, dstFormat } = t.params;\n    t.skipIfCopyTextureToTextureNotSupportedForFormat(srcFormat, dstFormat);\n    t.selectDeviceOrSkipTestCase([\n      kTextureFormatInfo[srcFormat].feature,\n      kTextureFormatInfo[dstFormat].feature,\n    ]);\n  })\n  .fn(t => {\n    const {\n      dimension,\n      textureSizeInBlocks,\n      srcFormat,\n      dstFormat,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel,\n    } = t.params;\n    const srcBlockWidth = kTextureFormatInfo[srcFormat].blockWidth;\n    const srcBlockHeight = kTextureFormatInfo[srcFormat].blockHeight;\n    const dstBlockWidth = kTextureFormatInfo[dstFormat].blockWidth;\n    const dstBlockHeight = kTextureFormatInfo[dstFormat].blockHeight;\n\n    t.DoCopyTextureToTextureTest(\n      dimension,\n      {\n        width: textureSizeInBlocks.src.width * srcBlockWidth,\n        height: textureSizeInBlocks.src.height * srcBlockHeight,\n        depthOrArrayLayers: 1,\n      },\n      {\n        width: textureSizeInBlocks.dst.width * dstBlockWidth,\n        height: textureSizeInBlocks.dst.height * dstBlockHeight,\n        depthOrArrayLayers: 1,\n      },\n      srcFormat,\n      dstFormat,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel\n    );\n  });\n\ng.test('color_textures,non_compressed,array')\n  .desc(\n    `\n  Validate the correctness of the texture-to-texture copy on 2D array textures by filling the\n  srcTexture with testable data and any non-compressed color format supported by WebGPU, doing\n  CopyTextureToTexture() copy, and verifying the content of the whole dstTexture.\n  `\n  )\n  .params(u =>\n    u\n      .combine('srcFormat', kRegularTextureFormats)\n      .combine('dstFormat', kRegularTextureFormats)\n      .filter(({ srcFormat, dstFormat }) => {\n        const srcBaseFormat = kTextureFormatInfo[srcFormat].baseFormat;\n        const dstBaseFormat = kTextureFormatInfo[dstFormat].baseFormat;\n        return (\n          srcFormat === dstFormat ||\n          (srcBaseFormat !== undefined &&\n            dstBaseFormat !== undefined &&\n            srcBaseFormat === dstBaseFormat)\n        );\n      })\n      .combine('dimension', ['2d', '3d'] as const)\n      .filter(\n        ({ dimension, srcFormat, dstFormat }) =>\n          textureDimensionAndFormatCompatible(dimension, srcFormat) &&\n          textureDimensionAndFormatCompatible(dimension, dstFormat)\n      )\n      .beginSubcases()\n      .combine('textureSize', [\n        {\n          srcTextureSize: { width: 64, height: 32, depthOrArrayLayers: 5 },\n          dstTextureSize: { width: 64, height: 32, depthOrArrayLayers: 5 },\n        },\n        {\n          srcTextureSize: { width: 31, height: 33, depthOrArrayLayers: 5 },\n          dstTextureSize: { width: 31, height: 33, depthOrArrayLayers: 5 },\n        },\n        {\n          srcTextureSize: { width: 31, height: 32, depthOrArrayLayers: 33 },\n          dstTextureSize: { width: 31, height: 32, depthOrArrayLayers: 33 },\n        },\n      ])\n\n      .combine('copyBoxOffsets', kCopyBoxOffsetsFor2DArrayTextures)\n      .combine('srcCopyLevel', [0, 3])\n      .combine('dstCopyLevel', [0, 3])\n  )\n  .fn(t => {\n    const {\n      dimension,\n      textureSize,\n      srcFormat,\n      dstFormat,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel,\n    } = t.params;\n\n    t.DoCopyTextureToTextureTest(\n      dimension,\n      textureSize.srcTextureSize,\n      textureSize.dstTextureSize,\n      srcFormat,\n      dstFormat,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel\n    );\n  });\n\ng.test('color_textures,compressed,array')\n  .desc(\n    `\n  Validate the correctness of the texture-to-texture copy on 2D array textures by filling the\n  srcTexture with testable data and any compressed color format supported by WebGPU, doing\n  CopyTextureToTexture() copy, and verifying the content of the whole dstTexture.\n\n  Tests for all pairs of valid source/destination formats, and all texture dimensions.\n  `\n  )\n  .params(u =>\n    u\n      .combine('srcFormat', kCompressedTextureFormats)\n      .combine('dstFormat', kCompressedTextureFormats)\n      .filter(({ srcFormat, dstFormat }) => {\n        const srcBaseFormat = kTextureFormatInfo[srcFormat].baseFormat;\n        const dstBaseFormat = kTextureFormatInfo[dstFormat].baseFormat;\n        return (\n          srcFormat === dstFormat ||\n          (srcBaseFormat !== undefined &&\n            dstBaseFormat !== undefined &&\n            srcBaseFormat === dstBaseFormat)\n        );\n      })\n      .combine('dimension', ['2d', '3d'] as const)\n      .filter(\n        ({ dimension, srcFormat, dstFormat }) =>\n          textureDimensionAndFormatCompatible(dimension, srcFormat) &&\n          textureDimensionAndFormatCompatible(dimension, dstFormat)\n      )\n      .beginSubcases()\n      .combine('textureSizeInBlocks', [\n        // The heights and widths in blocks are all power of 2\n        { src: { width: 2, height: 2 }, dst: { width: 2, height: 2 } },\n        // None of the widths or heights in blocks are power of 2\n        { src: { width: 15, height: 13 }, dst: { width: 15, height: 13 } },\n      ])\n      .combine('copyBoxOffsets', kCopyBoxOffsetsFor2DArrayTextures)\n      .combine('srcCopyLevel', [0, 2])\n      .combine('dstCopyLevel', [0, 2])\n  )\n  .beforeAllSubcases(t => {\n    const { srcFormat, dstFormat } = t.params;\n    t.skipIfCopyTextureToTextureNotSupportedForFormat(srcFormat, dstFormat);\n    t.selectDeviceOrSkipTestCase([\n      kTextureFormatInfo[srcFormat].feature,\n      kTextureFormatInfo[dstFormat].feature,\n    ]);\n  })\n  .fn(t => {\n    const {\n      dimension,\n      textureSizeInBlocks,\n      srcFormat,\n      dstFormat,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel,\n    } = t.params;\n    const srcBlockWidth = kTextureFormatInfo[srcFormat].blockWidth;\n    const srcBlockHeight = kTextureFormatInfo[srcFormat].blockHeight;\n    const dstBlockWidth = kTextureFormatInfo[dstFormat].blockWidth;\n    const dstBlockHeight = kTextureFormatInfo[dstFormat].blockHeight;\n\n    t.DoCopyTextureToTextureTest(\n      dimension,\n      {\n        width: textureSizeInBlocks.src.width * srcBlockWidth,\n        height: textureSizeInBlocks.src.height * srcBlockHeight,\n        depthOrArrayLayers: 5,\n      },\n      {\n        width: textureSizeInBlocks.dst.width * dstBlockWidth,\n        height: textureSizeInBlocks.dst.height * dstBlockHeight,\n        depthOrArrayLayers: 5,\n      },\n      srcFormat,\n      dstFormat,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel\n    );\n  });\n\ng.test('zero_sized')\n  .desc(\n    `\n  Validate the correctness of zero-sized copies (should be no-ops).\n\n  - For each texture dimension.\n  - Copies that are zero-sized in only one dimension {x, y, z}, each touching the {lower, upper} end\n  of that dimension.\n  `\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combineWithParams([\n        { dimension: '1d', textureSize: { width: 32, height: 1, depthOrArrayLayers: 1 } },\n        { dimension: '2d', textureSize: { width: 32, height: 32, depthOrArrayLayers: 5 } },\n        { dimension: '3d', textureSize: { width: 32, height: 32, depthOrArrayLayers: 5 } },\n      ] as const)\n      .combine('copyBoxOffset', [\n        // copyExtent.width === 0\n        {\n          srcOffset: { x: 0, y: 0, z: 0 },\n          dstOffset: { x: 0, y: 0, z: 0 },\n          copyExtent: { width: -64, height: 0, depthOrArrayLayers: 0 },\n        },\n        // copyExtent.width === 0 && srcOffset.x === textureWidth\n        {\n          srcOffset: { x: 64, y: 0, z: 0 },\n          dstOffset: { x: 0, y: 0, z: 0 },\n          copyExtent: { width: -64, height: 0, depthOrArrayLayers: 0 },\n        },\n        // copyExtent.width === 0 && dstOffset.x === textureWidth\n        {\n          srcOffset: { x: 0, y: 0, z: 0 },\n          dstOffset: { x: 64, y: 0, z: 0 },\n          copyExtent: { width: -64, height: 0, depthOrArrayLayers: 0 },\n        },\n        // copyExtent.height === 0\n        {\n          srcOffset: { x: 0, y: 0, z: 0 },\n          dstOffset: { x: 0, y: 0, z: 0 },\n          copyExtent: { width: 0, height: -32, depthOrArrayLayers: 0 },\n        },\n        // copyExtent.height === 0 && srcOffset.y === textureHeight\n        {\n          srcOffset: { x: 0, y: 32, z: 0 },\n          dstOffset: { x: 0, y: 0, z: 0 },\n          copyExtent: { width: 0, height: -32, depthOrArrayLayers: 0 },\n        },\n        // copyExtent.height === 0 && dstOffset.y === textureHeight\n        {\n          srcOffset: { x: 0, y: 0, z: 0 },\n          dstOffset: { x: 0, y: 32, z: 0 },\n          copyExtent: { width: 0, height: -32, depthOrArrayLayers: 0 },\n        },\n        // copyExtent.depthOrArrayLayers === 0\n        {\n          srcOffset: { x: 0, y: 0, z: 0 },\n          dstOffset: { x: 0, y: 0, z: 0 },\n          copyExtent: { width: 0, height: 0, depthOrArrayLayers: -5 },\n        },\n        // copyExtent.depthOrArrayLayers === 0 && srcOffset.z === textureDepth\n        {\n          srcOffset: { x: 0, y: 0, z: 5 },\n          dstOffset: { x: 0, y: 0, z: 0 },\n          copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 },\n        },\n        // copyExtent.depthOrArrayLayers === 0 && dstOffset.z === textureDepth\n        {\n          srcOffset: { x: 0, y: 0, z: 0 },\n          dstOffset: { x: 0, y: 0, z: 5 },\n          copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 },\n        },\n      ])\n      .unless(\n        p =>\n          p.dimension === '1d' &&\n          (p.copyBoxOffset.copyExtent.height !== 0 ||\n            p.copyBoxOffset.srcOffset.y !== 0 ||\n            p.copyBoxOffset.dstOffset.y !== 0)\n      )\n      .combine('srcCopyLevel', [0, 3])\n      .combine('dstCopyLevel', [0, 3])\n      .unless(p => p.dimension === '1d' && (p.srcCopyLevel !== 0 || p.dstCopyLevel !== 0))\n  )\n  .fn(t => {\n    const { dimension, textureSize, copyBoxOffset, srcCopyLevel, dstCopyLevel } = t.params;\n\n    const srcFormat = 'rgba8unorm';\n    const dstFormat = 'rgba8unorm';\n\n    t.DoCopyTextureToTextureTest(\n      dimension,\n      textureSize,\n      textureSize,\n      srcFormat,\n      dstFormat,\n      copyBoxOffset,\n      srcCopyLevel,\n      dstCopyLevel\n    );\n  });\n\ng.test('copy_depth_stencil')\n  .desc(\n    `\n  Validate the correctness of copyTextureToTexture() with depth and stencil aspect.\n\n  For all the texture formats with stencil aspect:\n  - Initialize the stencil aspect of the source texture with writeTexture().\n  - Copy the stencil aspect from the source texture into the destination texture\n  - Copy the stencil aspect of the destination texture into another staging buffer and check its\n    content\n  - Test the copies from / into zero / non-zero array layer / mipmap levels\n  - Test copying multiple array layers\n\n  For all the texture formats with depth aspect:\n  - Initialize the depth aspect of the source texture with a draw call\n  - Copy the depth aspect from the source texture into the destination texture\n  - Validate the content in the destination texture with the depth comparison function 'equal'\n  `\n  )\n  .params(u =>\n    u\n      .combine('format', kDepthStencilFormats)\n      .beginSubcases()\n      .combine('srcTextureSize', [\n        { width: 32, height: 16, depthOrArrayLayers: 1 },\n        { width: 32, height: 16, depthOrArrayLayers: 4 },\n        { width: 24, height: 48, depthOrArrayLayers: 5 },\n      ])\n      .combine('srcCopyLevel', [0, 2])\n      .combine('dstCopyLevel', [0, 2])\n      .combine('srcCopyBaseArrayLayer', [0, 1])\n      .combine('dstCopyBaseArrayLayer', [0, 1])\n      .filter(t => {\n        return (\n          t.srcTextureSize.depthOrArrayLayers > t.srcCopyBaseArrayLayer &&\n          t.srcTextureSize.depthOrArrayLayers > t.dstCopyBaseArrayLayer\n        );\n      })\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    t.selectDeviceForTextureFormatOrSkipTestCase(format);\n  })\n  .fn(t => {\n    const {\n      format,\n      srcTextureSize,\n      srcCopyLevel,\n      dstCopyLevel,\n      srcCopyBaseArrayLayer,\n      dstCopyBaseArrayLayer,\n    } = t.params;\n\n    const copySize: [number, number, number] = [\n      srcTextureSize.width >> srcCopyLevel,\n      srcTextureSize.height >> srcCopyLevel,\n      srcTextureSize.depthOrArrayLayers - Math.max(srcCopyBaseArrayLayer, dstCopyBaseArrayLayer),\n    ];\n    const sourceTexture = t.trackForCleanup(\n      t.device.createTexture({\n        format,\n        size: srcTextureSize,\n        usage:\n          GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,\n        mipLevelCount: srcCopyLevel + 1,\n      })\n    );\n    const destinationTexture = t.trackForCleanup(\n      t.device.createTexture({\n        format,\n        size: [\n          copySize[0] << dstCopyLevel,\n          copySize[1] << dstCopyLevel,\n          srcTextureSize.depthOrArrayLayers,\n        ] as const,\n        usage:\n          GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,\n        mipLevelCount: dstCopyLevel + 1,\n      })\n    );\n\n    let initialStencilData: undefined | Uint8Array = undefined;\n    if (kTextureFormatInfo[format].stencil) {\n      initialStencilData = t.GetInitialStencilDataPerMipLevel(srcTextureSize, format, srcCopyLevel);\n      t.InitializeStencilAspect(\n        sourceTexture,\n        initialStencilData,\n        srcCopyLevel,\n        srcCopyBaseArrayLayer,\n        copySize\n      );\n    }\n    if (kTextureFormatInfo[format].depth) {\n      t.InitializeDepthAspect(sourceTexture, format, srcCopyLevel, srcCopyBaseArrayLayer, copySize);\n    }\n\n    const encoder = t.device.createCommandEncoder();\n    encoder.copyTextureToTexture(\n      {\n        texture: sourceTexture,\n        mipLevel: srcCopyLevel,\n        origin: { x: 0, y: 0, z: srcCopyBaseArrayLayer },\n      },\n      {\n        texture: destinationTexture,\n        mipLevel: dstCopyLevel,\n        origin: { x: 0, y: 0, z: dstCopyBaseArrayLayer },\n      },\n      copySize\n    );\n    t.queue.submit([encoder.finish()]);\n\n    if (kTextureFormatInfo[format].stencil) {\n      assert(initialStencilData !== undefined);\n      t.VerifyStencilAspect(\n        destinationTexture,\n        initialStencilData,\n        dstCopyLevel,\n        dstCopyBaseArrayLayer,\n        copySize\n      );\n    }\n    if (kTextureFormatInfo[format].depth) {\n      t.VerifyDepthAspect(\n        destinationTexture,\n        format,\n        dstCopyLevel,\n        dstCopyBaseArrayLayer,\n        copySize\n      );\n    }\n  });\n\ng.test('copy_multisampled_color')\n  .desc(\n    `\n  Validate the correctness of copyTextureToTexture() with multisampled color formats.\n\n  - Initialize the source texture with a triangle in a render pass.\n  - Copy from the source texture into the destination texture with CopyTextureToTexture().\n  - Compare every sub-pixel of source texture and destination texture in another render pass:\n    - If they are different, then output RED; otherwise output GREEN\n  - Verify the pixels in the output texture are all GREEN.\n  - Note that in current WebGPU SPEC the mipmap level count and array layer count of a multisampled\n    texture can only be 1.\n  `\n  )\n  .fn(t => {\n    const textureSize = [32, 16, 1] as const;\n    const kColorFormat = 'rgba8unorm';\n    const kSampleCount = 4;\n\n    const sourceTexture = t.device.createTexture({\n      format: kColorFormat,\n      size: textureSize,\n      usage:\n        GPUTextureUsage.COPY_SRC |\n        GPUTextureUsage.TEXTURE_BINDING |\n        GPUTextureUsage.RENDER_ATTACHMENT,\n      sampleCount: kSampleCount,\n    });\n    t.trackForCleanup(sourceTexture);\n    const destinationTexture = t.device.createTexture({\n      format: kColorFormat,\n      size: textureSize,\n      usage:\n        GPUTextureUsage.COPY_DST |\n        GPUTextureUsage.TEXTURE_BINDING |\n        GPUTextureUsage.RENDER_ATTACHMENT,\n      sampleCount: kSampleCount,\n    });\n    t.trackForCleanup(destinationTexture);\n\n    // Initialize sourceTexture with a draw call.\n    const renderPipelineForInit = t.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `\n            @vertex\n            fn main(@builtin(vertex_index) VertexIndex : u32) -> @builtin(position) vec4<f32> {\n              var pos = array<vec2<f32>, 3>(\n                  vec2<f32>(-1.0,  1.0),\n                  vec2<f32>( 1.0,  1.0),\n                  vec2<f32>( 1.0, -1.0)\n              );\n              return vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n            }`,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: `\n            @fragment\n            fn main() -> @location(0) vec4<f32> {\n              return vec4<f32>(0.3, 0.5, 0.8, 1.0);\n            }`,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: kColorFormat }],\n      },\n      multisample: {\n        count: kSampleCount,\n      },\n    });\n    const initEncoder = t.device.createCommandEncoder();\n    const renderPassForInit = initEncoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: sourceTexture.createView(),\n          clearValue: [1.0, 0.0, 0.0, 1.0],\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    });\n    renderPassForInit.setPipeline(renderPipelineForInit);\n    renderPassForInit.draw(3);\n    renderPassForInit.end();\n    t.queue.submit([initEncoder.finish()]);\n\n    // Do the texture-to-texture copy\n    const copyEncoder = t.device.createCommandEncoder();\n    copyEncoder.copyTextureToTexture(\n      {\n        texture: sourceTexture,\n      },\n      {\n        texture: destinationTexture,\n      },\n      textureSize\n    );\n    t.queue.submit([copyEncoder.finish()]);\n\n    // Verify if all the sub-pixel values at the same location of sourceTexture and\n    // destinationTexture are equal.\n    const renderPipelineForValidation = t.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `\n          @vertex\n          fn main(@builtin(vertex_index) VertexIndex : u32) -> @builtin(position) vec4<f32> {\n            var pos = array<vec2<f32>, 6>(\n              vec2<f32>(-1.0,  1.0),\n              vec2<f32>(-1.0, -1.0),\n              vec2<f32>( 1.0,  1.0),\n              vec2<f32>(-1.0, -1.0),\n              vec2<f32>( 1.0,  1.0),\n              vec2<f32>( 1.0, -1.0));\n            return vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n          }`,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: `\n          @group(0) @binding(0) var sourceTexture : texture_multisampled_2d<f32>;\n          @group(0) @binding(1) var destinationTexture : texture_multisampled_2d<f32>;\n          @fragment\n          fn main(@builtin(position) coord_in: vec4<f32>) -> @location(0) vec4<f32> {\n            var coord_in_vec2 = vec2<i32>(i32(coord_in.x), i32(coord_in.y));\n            for (var sampleIndex = 0; sampleIndex < ${kSampleCount};\n              sampleIndex = sampleIndex + 1) {\n              var sourceSubPixel : vec4<f32> =\n                textureLoad(sourceTexture, coord_in_vec2, sampleIndex);\n              var destinationSubPixel : vec4<f32> =\n                textureLoad(destinationTexture, coord_in_vec2, sampleIndex);\n              if (!all(sourceSubPixel == destinationSubPixel)) {\n                return vec4<f32>(1.0, 0.0, 0.0, 1.0);\n              }\n            }\n            return vec4<f32>(0.0, 1.0, 0.0, 1.0);\n          }`,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: kColorFormat }],\n      },\n    });\n    const bindGroup = t.device.createBindGroup({\n      layout: renderPipelineForValidation.getBindGroupLayout(0),\n      entries: [\n        {\n          binding: 0,\n          resource: sourceTexture.createView(),\n        },\n        {\n          binding: 1,\n          resource: destinationTexture.createView(),\n        },\n      ],\n    });\n    const expectedOutputTexture = t.device.createTexture({\n      format: kColorFormat,\n      size: textureSize,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n    t.trackForCleanup(expectedOutputTexture);\n    const validationEncoder = t.device.createCommandEncoder();\n    const renderPassForValidation = validationEncoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: expectedOutputTexture.createView(),\n          clearValue: [1.0, 0.0, 0.0, 1.0],\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    });\n    renderPassForValidation.setPipeline(renderPipelineForValidation);\n    renderPassForValidation.setBindGroup(0, bindGroup);\n    renderPassForValidation.draw(6);\n    renderPassForValidation.end();\n    t.queue.submit([validationEncoder.finish()]);\n\n    t.expectSingleColor(expectedOutputTexture, 'rgba8unorm', {\n      size: [textureSize[0], textureSize[1], textureSize[2]],\n      exp: { R: 0.0, G: 1.0, B: 0.0, A: 1.0 },\n    });\n  });\n\ng.test('copy_multisampled_depth')\n  .desc(\n    `\n  Validate the correctness of copyTextureToTexture() with multisampled depth formats.\n\n  - Initialize the source texture with a triangle in a render pass.\n  - Copy from the source texture into the destination texture with CopyTextureToTexture().\n  - Validate the content in the destination texture with the depth comparison function 'equal'.\n  - Note that in current WebGPU SPEC the mipmap level count and array layer count of a multisampled\n    texture can only be 1.\n  `\n  )\n  .fn(t => {\n    const textureSize = [32, 16, 1] as const;\n    const kDepthFormat = 'depth24plus';\n    const kSampleCount = 4;\n\n    const sourceTexture = t.device.createTexture({\n      format: kDepthFormat,\n      size: textureSize,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n      sampleCount: kSampleCount,\n    });\n    t.trackForCleanup(sourceTexture);\n    const destinationTexture = t.device.createTexture({\n      format: kDepthFormat,\n      size: textureSize,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,\n      sampleCount: kSampleCount,\n    });\n    t.trackForCleanup(destinationTexture);\n\n    const vertexState: GPUVertexState = {\n      module: t.device.createShaderModule({\n        code: `\n          @vertex\n          fn main(@builtin(vertex_index) VertexIndex : u32)-> @builtin(position) vec4<f32> {\n            var pos : array<vec3<f32>, 6> = array<vec3<f32>, 6>(\n                vec3<f32>(-1.0,  1.0, 0.5),\n                vec3<f32>(-1.0, -1.0, 0.0),\n                vec3<f32>( 1.0,  1.0, 1.0),\n                vec3<f32>(-1.0, -1.0, 0.0),\n                vec3<f32>( 1.0,  1.0, 1.0),\n                vec3<f32>( 1.0, -1.0, 0.5));\n            return vec4<f32>(pos[VertexIndex], 1.0);\n          }`,\n      }),\n      entryPoint: 'main',\n    };\n\n    // Initialize the depth aspect of source texture with a draw call\n    const renderPipelineForInit = t.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: vertexState,\n      depthStencil: {\n        format: kDepthFormat,\n        depthCompare: 'always',\n        depthWriteEnabled: true,\n      },\n      multisample: {\n        count: kSampleCount,\n      },\n    });\n\n    const encoderForInit = t.device.createCommandEncoder();\n    const renderPassForInit = encoderForInit.beginRenderPass({\n      colorAttachments: [],\n      depthStencilAttachment: {\n        view: sourceTexture.createView(),\n        depthClearValue: 0.0,\n        depthLoadOp: 'clear',\n        depthStoreOp: 'store',\n      },\n    });\n    renderPassForInit.setPipeline(renderPipelineForInit);\n    renderPassForInit.draw(6);\n    renderPassForInit.end();\n    t.queue.submit([encoderForInit.finish()]);\n\n    // Do the texture-to-texture copy\n    const copyEncoder = t.device.createCommandEncoder();\n    copyEncoder.copyTextureToTexture(\n      {\n        texture: sourceTexture,\n      },\n      {\n        texture: destinationTexture,\n      },\n      textureSize\n    );\n    t.queue.submit([copyEncoder.finish()]);\n\n    // Verify the depth values in destinationTexture are what we expected with\n    // depthCompareFunction == 'equal' and depthWriteEnabled == false in the render pipeline\n    const kColorFormat = 'rgba8unorm';\n    const renderPipelineForVerify = t.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: vertexState,\n      fragment: {\n        module: t.device.createShaderModule({\n          code: `\n          @fragment\n          fn main() -> @location(0) vec4<f32> {\n            return vec4<f32>(0.0, 1.0, 0.0, 1.0);\n          }`,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: kColorFormat }],\n      },\n      depthStencil: {\n        format: kDepthFormat,\n        depthCompare: 'equal',\n        depthWriteEnabled: false,\n      },\n      multisample: {\n        count: kSampleCount,\n      },\n    });\n    const multisampledColorTexture = t.device.createTexture({\n      format: kColorFormat,\n      size: textureSize,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n      sampleCount: kSampleCount,\n    });\n    t.trackForCleanup(multisampledColorTexture);\n    const colorTextureAsResolveTarget = t.device.createTexture({\n      format: kColorFormat,\n      size: textureSize,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n    t.trackForCleanup(colorTextureAsResolveTarget);\n\n    const encoderForVerify = t.device.createCommandEncoder();\n    const renderPassForVerify = encoderForVerify.beginRenderPass({\n      colorAttachments: [\n        {\n          view: multisampledColorTexture.createView(),\n          clearValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n          loadOp: 'clear',\n          storeOp: 'discard',\n          resolveTarget: colorTextureAsResolveTarget.createView(),\n        },\n      ],\n      depthStencilAttachment: {\n        view: destinationTexture.createView(),\n        depthLoadOp: 'load',\n        depthStoreOp: 'store',\n      },\n    });\n    renderPassForVerify.setPipeline(renderPipelineForVerify);\n    renderPassForVerify.draw(6);\n    renderPassForVerify.end();\n    t.queue.submit([encoderForVerify.finish()]);\n\n    t.expectSingleColor(colorTextureAsResolveTarget, kColorFormat, {\n      size: [textureSize[0], textureSize[1], textureSize[2]],\n      exp: { R: 0.0, G: 1.0, B: 0.0, A: 1.0 },\n    });\n  });\n"],"mappings":"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"}