{"version":3,"file":"depth_bias.spec.js","names":["description","makeTestGroup","unreachable","kTextureFormatInfo","GPUTest","TextureTestMixin","TexelView","QuadAngle","kPointTwoFiveBiasForPointTwoFiveZOnFloat","DepthBiasTest","runDepthBiasTestInternal","depthFormat","quadAngle","bias","biasSlopeScale","biasClamp","initialDepth","renderTargetFormat","depthFormatInfo","vertexShaderCode","Flat","TiltedX","renderTarget","trackForCleanup","device","createTexture","format","size","width","height","depthOrArrayLayers","usage","GPUTextureUsage","COPY_SRC","RENDER_ATTACHMENT","depthTexture","sampleCount","mipLevelCount","depthStencilAttachment","view","createView","depthLoadOp","depth","undefined","depthStoreOp","stencilLoadOp","stencil","stencilStoreOp","depthClearValue","encoder","createCommandEncoder","pass","beginRenderPass","colorAttachments","storeOp","loadOp","depthCompare","testState","depthWriteEnabled","depthBias","depthBiasSlopeScale","depthBiasClamp","testPipeline","createRenderPipelineForTest","setPipeline","draw","end","queue","submit","finish","runDepthBiasTest","_expectedDepth","expColor","Depth","expTexelView","fromTexelsAsColors","_coords","expectTexelViewComparisonIsOkInTexture","texture","runDepthBiasTestFor24BitFormat","_expectedColor","R","G","B","A","vertex","depthStencil","createRenderPipeline","layout","module","createShaderModule","code","entryPoint","fragment","targets","g","test","desc","params","u","combineWithParams","fn","t","combine","Float32Array"],"sources":["../../../../../src/webgpu/api/operation/rendering/depth_bias.spec.ts"],"sourcesContent":["export const description = `\nTests render results with different depth bias values like 'positive', 'negative',\n'slope', 'clamp', etc.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { unreachable } from '../../../../common/util/util.js';\nimport {\n  kTextureFormatInfo,\n  DepthStencilFormat,\n  EncodableTextureFormat,\n} from '../../../format_info.js';\nimport { GPUTest, TextureTestMixin } from '../../../gpu_test.js';\nimport { TexelView } from '../../../util/texture/texel_view.js';\n\nenum QuadAngle {\n  Flat,\n  TiltedX,\n}\n\n// Floating point depth buffers use the following formula to calculate bias\n// bias = depthBias * 2 ** (exponent(max z of primitive) - number of bits in mantissa) +\n//        slopeScale * maxSlope\n// https://docs.microsoft.com/en-us/windows/win32/direct3d11/d3d10-graphics-programming-guide-output-merger-stage-depth-bias\n// https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetDepthBias.html\n// https://developer.apple.com/documentation/metal/mtlrendercommandencoder/1516269-setdepthbias\n//\n// To get a final bias of 0.25 for primitives with z = 0.25, we can use\n// depthBias = 0.25 / (2 ** (-2 - 23)) = 8388608.\nconst kPointTwoFiveBiasForPointTwoFiveZOnFloat = 8388608;\n\nclass DepthBiasTest extends TextureTestMixin(GPUTest) {\n  runDepthBiasTestInternal(\n    depthFormat: DepthStencilFormat,\n    {\n      quadAngle,\n      bias,\n      biasSlopeScale,\n      biasClamp,\n      initialDepth,\n    }: {\n      quadAngle: QuadAngle;\n      bias: number;\n      biasSlopeScale: number;\n      biasClamp: number;\n      initialDepth: number;\n    }\n  ): { renderTarget: GPUTexture; depthTexture: GPUTexture } {\n    const renderTargetFormat = 'rgba8unorm';\n    const depthFormatInfo = kTextureFormatInfo[depthFormat];\n\n    let vertexShaderCode: string;\n    switch (quadAngle) {\n      case QuadAngle.Flat:\n        // Draw a square at z = 0.25.\n        vertexShaderCode = `\n          @vertex\n          fn main(@builtin(vertex_index) VertexIndex : u32) -> @builtin(position) vec4<f32> {\n            var pos = array<vec2<f32>, 6>(\n            vec2<f32>(-1.0, -1.0),\n            vec2<f32>( 1.0, -1.0),\n            vec2<f32>(-1.0,  1.0),\n            vec2<f32>(-1.0,  1.0),\n            vec2<f32>( 1.0, -1.0),\n            vec2<f32>( 1.0,  1.0));\n            return vec4<f32>(pos[VertexIndex], 0.25, 1.0);\n          }\n          `;\n        break;\n      case QuadAngle.TiltedX:\n        // Draw a square ranging from 0 to 0.5, bottom to top.\n        vertexShaderCode = `\n          @vertex\n          fn main(@builtin(vertex_index) VertexIndex : u32) -> @builtin(position) vec4<f32> {\n            var pos = array<vec3<f32>, 6>(\n            vec3<f32>(-1.0, -1.0, 0.0),\n            vec3<f32>( 1.0, -1.0, 0.0),\n            vec3<f32>(-1.0,  1.0, 0.5),\n            vec3<f32>(-1.0,  1.0, 0.5),\n            vec3<f32>( 1.0, -1.0, 0.0),\n            vec3<f32>( 1.0,  1.0, 0.5));\n            return vec4<f32>(pos[VertexIndex], 1.0);\n          }\n          `;\n        break;\n      default:\n        unreachable();\n    }\n\n    const renderTarget = this.trackForCleanup(\n      this.device.createTexture({\n        format: renderTargetFormat,\n        size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n        usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n      })\n    );\n\n    const depthTexture = this.trackForCleanup(\n      this.device.createTexture({\n        size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n        format: depthFormat,\n        sampleCount: 1,\n        mipLevelCount: 1,\n        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n      })\n    );\n\n    const depthStencilAttachment: GPURenderPassDepthStencilAttachment = {\n      view: depthTexture.createView(),\n      depthLoadOp: depthFormatInfo.depth ? 'clear' : undefined,\n      depthStoreOp: depthFormatInfo.depth ? 'store' : undefined,\n      stencilLoadOp: depthFormatInfo.stencil ? 'clear' : undefined,\n      stencilStoreOp: depthFormatInfo.stencil ? 'store' : undefined,\n      depthClearValue: initialDepth,\n    };\n\n    const encoder = this.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: renderTarget.createView(),\n          storeOp: 'store',\n          loadOp: 'load',\n        },\n      ],\n      depthStencilAttachment,\n    });\n\n    let depthCompare: GPUCompareFunction = 'always';\n    if (depthFormat !== 'depth32float') {\n      depthCompare = 'greater';\n    }\n\n    const testState = {\n      format: depthFormat,\n      depthCompare,\n      depthWriteEnabled: true,\n      depthBias: bias,\n      depthBiasSlopeScale: biasSlopeScale,\n      depthBiasClamp: biasClamp,\n    } as const;\n\n    // Draw a square with the given depth state and bias values.\n    const testPipeline = this.createRenderPipelineForTest(vertexShaderCode, testState);\n    pass.setPipeline(testPipeline);\n    pass.draw(6);\n    pass.end();\n    this.device.queue.submit([encoder.finish()]);\n\n    return { renderTarget, depthTexture };\n  }\n\n  runDepthBiasTest(\n    depthFormat: EncodableTextureFormat & DepthStencilFormat,\n    {\n      quadAngle,\n      bias,\n      biasSlopeScale,\n      biasClamp,\n      _expectedDepth,\n    }: {\n      quadAngle: QuadAngle;\n      bias: number;\n      biasSlopeScale: number;\n      biasClamp: number;\n      _expectedDepth: number;\n    }\n  ) {\n    const { depthTexture } = this.runDepthBiasTestInternal(depthFormat, {\n      quadAngle,\n      bias,\n      biasSlopeScale,\n      biasClamp,\n      initialDepth: 0,\n    });\n\n    const expColor = { Depth: _expectedDepth };\n    const expTexelView = TexelView.fromTexelsAsColors(depthFormat, _coords => expColor);\n    this.expectTexelViewComparisonIsOkInTexture({ texture: depthTexture }, expTexelView, [1, 1]);\n  }\n\n  runDepthBiasTestFor24BitFormat(\n    depthFormat: DepthStencilFormat,\n    {\n      quadAngle,\n      bias,\n      biasSlopeScale,\n      biasClamp,\n      _expectedColor,\n    }: {\n      quadAngle: QuadAngle;\n      bias: number;\n      biasSlopeScale: number;\n      biasClamp: number;\n      _expectedColor: Float32Array;\n    }\n  ) {\n    const { renderTarget } = this.runDepthBiasTestInternal(depthFormat, {\n      quadAngle,\n      bias,\n      biasSlopeScale,\n      biasClamp,\n      initialDepth: 0.4,\n    });\n\n    const renderTargetFormat = 'rgba8unorm';\n    const expColor = {\n      R: _expectedColor[0],\n      G: _expectedColor[1],\n      B: _expectedColor[2],\n      A: _expectedColor[3],\n    };\n    const expTexelView = TexelView.fromTexelsAsColors(renderTargetFormat, _coords => expColor);\n    this.expectTexelViewComparisonIsOkInTexture({ texture: renderTarget }, expTexelView, [1, 1]);\n  }\n\n  createRenderPipelineForTest(\n    vertex: string,\n    depthStencil: GPUDepthStencilState\n  ): GPURenderPipeline {\n    return this.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: {\n        module: this.device.createShaderModule({\n          code: vertex,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        targets: [{ format: 'rgba8unorm' }],\n        module: this.device.createShaderModule({\n          code: `\n            @fragment fn main() -> @location(0) vec4<f32> {\n              return vec4<f32>(1.0, 0.0, 0.0, 1.0);\n            }`,\n        }),\n        entryPoint: 'main',\n      },\n      depthStencil,\n    });\n  }\n}\n\nexport const g = makeTestGroup(DepthBiasTest);\n\ng.test('depth_bias')\n  .desc(\n    `\n  Tests that a square with different depth bias values like 'positive', 'negative',\n  'slope', 'clamp', etc. is drawn as expected.\n  `\n  )\n  .params(u =>\n    u //\n      .combineWithParams([\n        {\n          quadAngle: QuadAngle.Flat,\n          bias: kPointTwoFiveBiasForPointTwoFiveZOnFloat,\n          biasSlopeScale: 0,\n          biasClamp: 0,\n          _expectedDepth: 0.5,\n        },\n        {\n          quadAngle: QuadAngle.Flat,\n          bias: kPointTwoFiveBiasForPointTwoFiveZOnFloat,\n          biasSlopeScale: 0,\n          biasClamp: 0.125,\n          _expectedDepth: 0.375,\n        },\n        {\n          quadAngle: QuadAngle.Flat,\n          bias: -kPointTwoFiveBiasForPointTwoFiveZOnFloat,\n          biasSlopeScale: 0,\n          biasClamp: 0.125,\n          _expectedDepth: 0,\n        },\n        {\n          quadAngle: QuadAngle.Flat,\n          bias: -kPointTwoFiveBiasForPointTwoFiveZOnFloat,\n          biasSlopeScale: 0,\n          biasClamp: -0.125,\n          _expectedDepth: 0.125,\n        },\n        {\n          quadAngle: QuadAngle.TiltedX,\n          bias: 0,\n          biasSlopeScale: 0,\n          biasClamp: 0,\n          _expectedDepth: 0.25,\n        },\n        {\n          quadAngle: QuadAngle.TiltedX,\n          bias: 0,\n          biasSlopeScale: 1,\n          biasClamp: 0,\n          _expectedDepth: 0.75,\n        },\n        {\n          quadAngle: QuadAngle.TiltedX,\n          bias: 0,\n          biasSlopeScale: -0.5,\n          biasClamp: 0,\n          _expectedDepth: 0,\n        },\n      ] as const)\n  )\n  .fn(t => {\n    t.runDepthBiasTest('depth32float', t.params);\n  });\n\ng.test('depth_bias_24bit_format')\n  .desc(\n    `\n  Tests that a square with different depth bias values like 'positive', 'negative',\n  'slope', 'clamp', etc. is drawn as expected with 24 bit depth format.\n\n  TODO: Enhance these tests by reading back the depth (emulating the copy using texture sampling)\n  and checking the result directly, like the non-24-bit depth tests, instead of just relying on\n  whether the depth test passes or fails.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('format', ['depth24plus', 'depth24plus-stencil8'] as const)\n      .combineWithParams([\n        {\n          quadAngle: QuadAngle.Flat,\n          bias: 0.25 * (1 << 25),\n          biasSlopeScale: 0,\n          biasClamp: 0,\n          _expectedColor: new Float32Array([1.0, 0.0, 0.0, 1.0]),\n        },\n        {\n          quadAngle: QuadAngle.TiltedX,\n          bias: 0.25 * (1 << 25),\n          biasSlopeScale: 1,\n          biasClamp: 0,\n          _expectedColor: new Float32Array([1.0, 0.0, 0.0, 1.0]),\n        },\n        {\n          quadAngle: QuadAngle.Flat,\n          bias: 0.25 * (1 << 25),\n          biasSlopeScale: 0,\n          biasClamp: 0.1,\n          _expectedColor: new Float32Array([0.0, 0.0, 0.0, 0.0]),\n        },\n      ] as const)\n  )\n  .fn(t => {\n    const { format } = t.params;\n    t.runDepthBiasTestFor24BitFormat(format, t.params);\n  });\n"],"mappings":"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"}