{"version":3,"file":"color_target_state.spec.js","names":["description","makeTestGroup","assert","unreachable","kBlendFactors","kBlendOperations","GPUConst","kEncodableTextureFormats","kTextureFormatInfo","GPUTest","TextureTestMixin","clamp","TexelView","BlendingTest","createRenderPipelineForTest","colorTargetState","device","createRenderPipeline","layout","fragment","targets","module","createShaderModule","code","entryPoint","vertex","createBindGroupForTest","data","createBindGroup","entries","binding","resource","buffer","makeBufferWithContents","GPUBufferUsage","UNIFORM","g","mapColor","col","f","r","b","a","computeBlendFactor","src","dst","blendColor","factor","v","Math","min","undefined","computeBlendOperation","srcFactor","dstFactor","operation","_","k","max","test","desc","params","u","combine","filter","t","beginSubcases","expand","p","needsBlendConstant","fn","textureFormat","srcColor","dstColor","blendConstant","expectedColor","component","pipeline","format","blend","color","alpha","primitive","topology","renderTarget","createTexture","usage","GPUTextureUsage","RENDER_ATTACHMENT","COPY_SRC","size","commandEncoder","createCommandEncoder","renderPass","beginRenderPass","colorAttachments","view","createView","clearValue","loadOp","storeOp","setPipeline","setBlendConstant","setBindGroup","getBindGroupLayout","Float32Array","draw","end","queue","submit","finish","expectSinglePixelComparisonsAreOkInTexture","texture","coord","x","y","exp","R","G","B","A","maxFractionalDiff","kBlendableFormats","info","renderable","sampleType","beforeAllSubcases","skipIfTextureFormatNotSupported","expColor","expTexelView","fromTexelsAsColors","_coords","expectTexelViewComparisonIsOkInTexture","kSize","kWhiteColorData","blendComponent","testPipeline","paramsSubcasesOnly","kColorWriteCombinations","mask","ColorWrite","RED","GREEN","BLUE","ALPHA","writeMask","kBaseColorData","disabled","GPUColorWrite","srcValue","dstValue","expValue"],"sources":["../../../../../src/webgpu/api/operation/rendering/color_target_state.spec.ts"],"sourcesContent":["export const description = `\nTest blending results.\n\nTODO:\n- Test result for all combinations of args (make sure each case is distinguishable from others\n- Test underflow/overflow has consistent behavior\n- ?\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { assert, TypedArrayBufferView, unreachable } from '../../../../common/util/util.js';\nimport { kBlendFactors, kBlendOperations } from '../../../capability_info.js';\nimport { GPUConst } from '../../../constants.js';\nimport { kEncodableTextureFormats, kTextureFormatInfo } from '../../../format_info.js';\nimport { GPUTest, TextureTestMixin } from '../../../gpu_test.js';\nimport { clamp } from '../../../util/math.js';\nimport { TexelView } from '../../../util/texture/texel_view.js';\n\nclass BlendingTest extends GPUTest {\n  createRenderPipelineForTest(colorTargetState: GPUColorTargetState): GPURenderPipeline {\n    return this.device.createRenderPipeline({\n      layout: 'auto',\n      fragment: {\n        targets: [colorTargetState],\n        module: this.device.createShaderModule({\n          code: `\n            struct Params {\n              color : vec4<f32>\n            }\n            @group(0) @binding(0) var<uniform> params : Params;\n            @fragment fn main() -> @location(0) vec4<f32> {\n              return params.color;\n            }\n            `,\n        }),\n        entryPoint: 'main',\n      },\n      vertex: {\n        module: this.device.createShaderModule({\n          code: `\n            @vertex fn main(\n              @builtin(vertex_index) VertexIndex : u32\n              ) -> @builtin(position) vec4<f32> {\n              var pos = array<vec2<f32>, 3>(\n                  vec2<f32>(-1.0, -1.0),\n                  vec2<f32>(3.0, -1.0),\n                  vec2<f32>(-1.0, 3.0));\n              return vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n            }\n            `,\n        }),\n        entryPoint: 'main',\n      },\n    });\n  }\n\n  createBindGroupForTest(layout: GPUBindGroupLayout, data: TypedArrayBufferView): GPUBindGroup {\n    return this.device.createBindGroup({\n      layout,\n      entries: [\n        {\n          binding: 0,\n          resource: {\n            buffer: this.makeBufferWithContents(data, GPUBufferUsage.UNIFORM),\n          },\n        },\n      ],\n    });\n  }\n}\n\nexport const g = makeTestGroup(TextureTestMixin(BlendingTest));\n\nfunction mapColor(\n  col: GPUColorDict,\n  f: (v: number, k: keyof GPUColorDict) => number\n): GPUColorDict {\n  return {\n    r: f(col.r, 'r'),\n    g: f(col.g, 'g'),\n    b: f(col.b, 'b'),\n    a: f(col.a, 'a'),\n  };\n}\n\nfunction computeBlendFactor(\n  src: GPUColorDict,\n  dst: GPUColorDict,\n  blendColor: GPUColorDict | undefined,\n  factor: GPUBlendFactor\n): GPUColorDict {\n  switch (factor) {\n    case 'zero':\n      return { r: 0, g: 0, b: 0, a: 0 };\n    case 'one':\n      return { r: 1, g: 1, b: 1, a: 1 };\n    case 'src':\n      return { ...src };\n    case 'one-minus-src':\n      return mapColor(src, v => 1 - v);\n    case 'src-alpha':\n      return mapColor(src, () => src.a);\n    case 'one-minus-src-alpha':\n      return mapColor(src, () => 1 - src.a);\n    case 'dst':\n      return { ...dst };\n    case 'one-minus-dst':\n      return mapColor(dst, v => 1 - v);\n    case 'dst-alpha':\n      return mapColor(dst, () => dst.a);\n    case 'one-minus-dst-alpha':\n      return mapColor(dst, () => 1 - dst.a);\n    case 'src-alpha-saturated': {\n      const f = Math.min(src.a, 1 - dst.a);\n      return { r: f, g: f, b: f, a: 1 };\n    }\n    case 'constant':\n      assert(blendColor !== undefined);\n      return { ...blendColor };\n    case 'one-minus-constant':\n      assert(blendColor !== undefined);\n      return mapColor(blendColor, v => 1 - v);\n    default:\n      unreachable();\n  }\n}\n\nfunction computeBlendOperation(\n  src: GPUColorDict,\n  srcFactor: GPUColorDict,\n  dst: GPUColorDict,\n  dstFactor: GPUColorDict,\n  operation: GPUBlendOperation\n) {\n  switch (operation) {\n    case 'add':\n      return mapColor(src, (_, k) => srcFactor[k] * src[k] + dstFactor[k] * dst[k]);\n    case 'max':\n      return mapColor(src, (_, k) => Math.max(src[k], dst[k]));\n    case 'min':\n      return mapColor(src, (_, k) => Math.min(src[k], dst[k]));\n    case 'reverse-subtract':\n      return mapColor(src, (_, k) => dstFactor[k] * dst[k] - srcFactor[k] * src[k]);\n    case 'subtract':\n      return mapColor(src, (_, k) => srcFactor[k] * src[k] - dstFactor[k] * dst[k]);\n  }\n}\n\ng.test('blending,GPUBlendComponent')\n  .desc(\n    `Test all combinations of parameters for GPUBlendComponent.\n\n  Tests that parameters are correctly passed to the backend API and blend computations\n  are done correctly by blending a single pixel. The test uses rgba16float as the format\n  to avoid checking clamping behavior (tested in api,operation,rendering,blending:clamp,*).\n\n  Params:\n    - component= {color, alpha} - whether to test blending the color or the alpha component.\n    - srcFactor= {...all GPUBlendFactors}\n    - dstFactor= {...all GPUBlendFactors}\n    - operation= {...all GPUBlendOperations}`\n  )\n  .params(u =>\n    u //\n      .combine('component', ['color', 'alpha'] as const)\n      .combine('srcFactor', kBlendFactors)\n      .combine('dstFactor', kBlendFactors)\n      .combine('operation', kBlendOperations)\n      .filter(t => {\n        if (t.operation === 'min' || t.operation === 'max') {\n          return t.srcFactor === 'one' && t.dstFactor === 'one';\n        }\n        return true;\n      })\n      .beginSubcases()\n      .combine('srcColor', [{ r: 0.11, g: 0.61, b: 0.81, a: 0.44 }])\n      .combine('dstColor', [\n        { r: 0.51, g: 0.22, b: 0.71, a: 0.33 },\n        { r: 0.09, g: 0.73, b: 0.93, a: 0.81 },\n      ])\n      .expand('blendConstant', p => {\n        const needsBlendConstant =\n          p.srcFactor === 'one-minus-constant' ||\n          p.srcFactor === 'constant' ||\n          p.dstFactor === 'one-minus-constant' ||\n          p.dstFactor === 'constant';\n        return needsBlendConstant ? [{ r: 0.91, g: 0.82, b: 0.73, a: 0.64 }] : [undefined];\n      })\n  )\n  .fn(t => {\n    const textureFormat: GPUTextureFormat = 'rgba16float';\n    const srcColor = t.params.srcColor;\n    const dstColor = t.params.dstColor;\n    const blendConstant = t.params.blendConstant;\n\n    const srcFactor = computeBlendFactor(srcColor, dstColor, blendConstant, t.params.srcFactor);\n    const dstFactor = computeBlendFactor(srcColor, dstColor, blendConstant, t.params.dstFactor);\n\n    const expectedColor = computeBlendOperation(\n      srcColor,\n      srcFactor,\n      dstColor,\n      dstFactor,\n      t.params.operation\n    );\n\n    switch (t.params.component) {\n      case 'color':\n        expectedColor.a = srcColor.a;\n        break;\n      case 'alpha':\n        expectedColor.r = srcColor.r;\n        expectedColor.g = srcColor.g;\n        expectedColor.b = srcColor.b;\n        break;\n    }\n\n    const pipeline = t.device.createRenderPipeline({\n      layout: 'auto',\n      fragment: {\n        targets: [\n          {\n            format: textureFormat,\n            blend: {\n              // Set both color/alpha to defaults...\n              color: {},\n              alpha: {},\n              // ... but then override the component we're testing.\n              [t.params.component]: {\n                srcFactor: t.params.srcFactor,\n                dstFactor: t.params.dstFactor,\n                operation: t.params.operation,\n              },\n            },\n          },\n        ],\n        module: t.device.createShaderModule({\n          code: `\nstruct Uniform {\n  color: vec4<f32>\n};\n@group(0) @binding(0) var<uniform> u : Uniform;\n\n@fragment fn main() -> @location(0) vec4<f32> {\n  return u.color;\n}\n          `,\n        }),\n        entryPoint: 'main',\n      },\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `\n@vertex fn main() -> @builtin(position) vec4<f32> {\n    return vec4<f32>(0.0, 0.0, 0.0, 1.0);\n}\n          `,\n        }),\n        entryPoint: 'main',\n      },\n      primitive: {\n        topology: 'point-list',\n      },\n    });\n\n    const renderTarget = t.device.createTexture({\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n      size: [1, 1, 1],\n      format: textureFormat,\n    });\n\n    const commandEncoder = t.device.createCommandEncoder();\n    const renderPass = commandEncoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: renderTarget.createView(),\n          clearValue: dstColor,\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    });\n    renderPass.setPipeline(pipeline);\n    if (blendConstant) {\n      renderPass.setBlendConstant(blendConstant);\n    }\n    renderPass.setBindGroup(\n      0,\n      t.device.createBindGroup({\n        layout: pipeline.getBindGroupLayout(0),\n        entries: [\n          {\n            binding: 0,\n            resource: {\n              buffer: t.makeBufferWithContents(\n                new Float32Array([srcColor.r, srcColor.g, srcColor.b, srcColor.a]),\n                GPUBufferUsage.UNIFORM\n              ),\n            },\n          },\n        ],\n      })\n    );\n    renderPass.draw(1);\n    renderPass.end();\n\n    t.device.queue.submit([commandEncoder.finish()]);\n\n    t.expectSinglePixelComparisonsAreOkInTexture(\n      { texture: renderTarget },\n      [\n        {\n          coord: { x: 0, y: 0 },\n          exp: { R: expectedColor.r, G: expectedColor.g, B: expectedColor.b, A: expectedColor.a },\n        },\n      ],\n      { maxFractionalDiff: 0.003 }\n    );\n  });\n\nconst kBlendableFormats = kEncodableTextureFormats.filter(f => {\n  const info = kTextureFormatInfo[f];\n  return info.renderable && info.sampleType === 'float';\n});\n\ng.test('blending,formats')\n  .desc(\n    `Test blending results works for all formats that support it, and that blending is not applied\n  for formats that do not. Blending should be done in linear space for srgb formats.`\n  )\n  .params(u =>\n    u //\n      .combine('format', kBlendableFormats)\n  )\n  .beforeAllSubcases(t => {\n    t.skipIfTextureFormatNotSupported(t.params.format);\n  })\n  .fn(t => {\n    const { format } = t.params;\n\n    const pipeline = t.device.createRenderPipeline({\n      layout: 'auto',\n      fragment: {\n        targets: [\n          {\n            format,\n            blend: {\n              color: { srcFactor: 'one', dstFactor: 'one', operation: 'add' },\n              alpha: { srcFactor: 'one', dstFactor: 'one', operation: 'add' },\n            },\n          },\n        ],\n        module: t.device.createShaderModule({\n          code: `\n@fragment fn main() -> @location(0) vec4<f32> {\n  return vec4<f32>(0.4, 0.4, 0.4, 0.4);\n}\n          `,\n        }),\n        entryPoint: 'main',\n      },\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `\n@vertex fn main() -> @builtin(position) vec4<f32> {\n    return vec4<f32>(0.0, 0.0, 0.0, 1.0);\n}\n          `,\n        }),\n        entryPoint: 'main',\n      },\n      primitive: {\n        topology: 'point-list',\n      },\n    });\n\n    const renderTarget = t.device.createTexture({\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n      size: [1, 1, 1],\n      format,\n    });\n\n    const commandEncoder = t.device.createCommandEncoder();\n    const renderPass = commandEncoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: renderTarget.createView(),\n          clearValue: { r: 0.2, g: 0.2, b: 0.2, a: 0.2 },\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    });\n    renderPass.setPipeline(pipeline);\n    renderPass.draw(1);\n    renderPass.end();\n    t.device.queue.submit([commandEncoder.finish()]);\n\n    const expColor = { R: 0.6, G: 0.6, B: 0.6, A: 0.6 };\n    const expTexelView = TexelView.fromTexelsAsColors(format, _coords => expColor);\n    t.expectTexelViewComparisonIsOkInTexture({ texture: renderTarget }, expTexelView, [1, 1, 1]);\n  });\n\ng.test('blend_constant,initial')\n  .desc(`Test that the blend constant is set to [0,0,0,0] at the beginning of a pass.`)\n  .fn(t => {\n    const format = 'rgba8unorm';\n    const kSize = 1;\n    const kWhiteColorData = new Float32Array([255, 255, 255, 255]);\n\n    const blendComponent = { srcFactor: 'constant', dstFactor: 'one', operation: 'add' } as const;\n    const testPipeline = t.createRenderPipelineForTest({\n      format,\n      blend: { color: blendComponent, alpha: blendComponent },\n    });\n\n    const renderTarget = t.device.createTexture({\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n      size: [kSize, kSize],\n      format,\n    });\n\n    const commandEncoder = t.device.createCommandEncoder();\n    const renderPass = commandEncoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: renderTarget.createView(),\n          loadOp: 'load',\n          storeOp: 'store',\n        },\n      ],\n    });\n    renderPass.setPipeline(testPipeline);\n    renderPass.setBindGroup(\n      0,\n      t.createBindGroupForTest(testPipeline.getBindGroupLayout(0), kWhiteColorData)\n    );\n    renderPass.draw(3);\n    // Draw [1,1,1,1] with `src * constant + dst * 1`.\n    // The blend constant defaults to [0,0,0,0], so the result is\n    // `[1,1,1,1] * [0,0,0,0] + [0,0,0,0] * 1` = [0,0,0,0].\n    renderPass.end();\n    t.device.queue.submit([commandEncoder.finish()]);\n\n    // Check that the initial blend constant is black(0,0,0,0) after setting testPipeline which has\n    // a white color buffer data.\n    const expColor = { R: 0, G: 0, B: 0, A: 0 };\n    const expTexelView = TexelView.fromTexelsAsColors(format, _coords => expColor);\n    t.expectTexelViewComparisonIsOkInTexture({ texture: renderTarget }, expTexelView, [\n      kSize,\n      kSize,\n    ]);\n  });\n\ng.test('blend_constant,setting')\n  .desc(`Test that setting the blend constant to the RGBA values works at the beginning of a pass.`)\n  .paramsSubcasesOnly([\n    { r: 1.0, g: 1.0, b: 1.0, a: 1.0 },\n    { r: 0.5, g: 1.0, b: 0.5, a: 0.0 },\n    { r: 0.0, g: 0.0, b: 0.0, a: 0.0 },\n  ])\n  .fn(t => {\n    const { r, g, b, a } = t.params;\n\n    const format = 'rgba8unorm';\n    const kSize = 1;\n    const kWhiteColorData = new Float32Array([255, 255, 255, 255]);\n\n    const blendComponent = { srcFactor: 'constant', dstFactor: 'one', operation: 'add' } as const;\n    const testPipeline = t.createRenderPipelineForTest({\n      format,\n      blend: { color: blendComponent, alpha: blendComponent },\n    });\n\n    const renderTarget = t.device.createTexture({\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n      size: [kSize, kSize],\n      format,\n    });\n\n    const commandEncoder = t.device.createCommandEncoder();\n    const renderPass = commandEncoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: renderTarget.createView(),\n          loadOp: 'load',\n          storeOp: 'store',\n        },\n      ],\n    });\n    renderPass.setPipeline(testPipeline);\n    renderPass.setBlendConstant({ r, g, b, a });\n    renderPass.setBindGroup(\n      0,\n      t.createBindGroupForTest(testPipeline.getBindGroupLayout(0), kWhiteColorData)\n    );\n    renderPass.draw(3);\n    // Draw [1,1,1,1] with `src * constant + dst * 1`. The blend constant to [r,g,b,a], so the\n    // result is `[1,1,1,1] * [r,g,b,a] + [0,0,0,0] * 1` = [r,g,b,a].\n    renderPass.end();\n    t.device.queue.submit([commandEncoder.finish()]);\n\n    // Check that the blend constant is the same as the given constant after setting the constant\n    // via setBlendConstant.\n    const expColor = { R: r, G: g, B: b, A: a };\n    const expTexelView = TexelView.fromTexelsAsColors(format, _coords => expColor);\n\n    t.expectTexelViewComparisonIsOkInTexture({ texture: renderTarget }, expTexelView, [\n      kSize,\n      kSize,\n    ]);\n  });\n\ng.test('blend_constant,not_inherited')\n  .desc(`Test that the blending constant is not inherited between render passes.`)\n  .fn(t => {\n    const format = 'rgba8unorm';\n    const kSize = 1;\n    const kWhiteColorData = new Float32Array([255, 255, 255, 255]);\n\n    const blendComponent = { srcFactor: 'constant', dstFactor: 'one', operation: 'add' } as const;\n    const testPipeline = t.createRenderPipelineForTest({\n      format,\n      blend: { color: blendComponent, alpha: blendComponent },\n    });\n\n    const renderTarget = t.device.createTexture({\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n      size: [kSize, kSize],\n      format,\n    });\n\n    const commandEncoder = t.device.createCommandEncoder();\n    {\n      const renderPass = commandEncoder.beginRenderPass({\n        colorAttachments: [\n          {\n            view: renderTarget.createView(),\n            loadOp: 'load',\n            storeOp: 'store',\n          },\n        ],\n      });\n      renderPass.setPipeline(testPipeline);\n      renderPass.setBlendConstant({ r: 1.0, g: 1.0, b: 1.0, a: 1.0 }); // Set to white color.\n      renderPass.setBindGroup(\n        0,\n        t.createBindGroupForTest(testPipeline.getBindGroupLayout(0), kWhiteColorData)\n      );\n      renderPass.draw(3);\n      // Draw [1,1,1,1] with `src * constant + dst * 1`. The blend constant to [1,1,1,1], so the\n      // result is `[1,1,1,1] * [1,1,1,1] + [0,0,0,0] * 1` = [1,1,1,1].\n      renderPass.end();\n    }\n    {\n      const renderPass = commandEncoder.beginRenderPass({\n        colorAttachments: [\n          {\n            view: renderTarget.createView(),\n            loadOp: 'clear',\n            storeOp: 'store',\n          },\n        ],\n      });\n      renderPass.setPipeline(testPipeline);\n      renderPass.setBindGroup(\n        0,\n        t.createBindGroupForTest(testPipeline.getBindGroupLayout(0), kWhiteColorData)\n      );\n      renderPass.draw(3);\n      // Draw [1,1,1,1] with `src * constant + dst * 1`. The blend constant defaults to [0,0,0,0],\n      // so the result is `[1,1,1,1] * [0,0,0,0] + [0,0,0,0] * 1` = [0,0,0,0].\n      renderPass.end();\n    }\n    t.device.queue.submit([commandEncoder.finish()]);\n\n    // Check that the blend constant is not inherited from the first render pass.\n    const expColor = { R: 0, G: 0, B: 0, A: 0 };\n    const expTexelView = TexelView.fromTexelsAsColors(format, _coords => expColor);\n\n    t.expectTexelViewComparisonIsOkInTexture({ texture: renderTarget }, expTexelView, [\n      kSize,\n      kSize,\n    ]);\n  });\n\nconst kColorWriteCombinations: readonly GPUColorWriteFlags[] = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n];\n\ng.test('color_write_mask,channel_work')\n  .desc(\n    `\n  Test that the color write mask works with the zero channel, a single channel, multiple channels,\n  and all channels.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('mask', kColorWriteCombinations)\n  )\n  .fn(t => {\n    const { mask } = t.params;\n\n    const format = 'rgba8unorm';\n    const kSize = 1;\n\n    let r = 0,\n      g = 0,\n      b = 0,\n      a = 0;\n    if (mask & GPUConst.ColorWrite.RED) {\n      r = 1;\n    }\n    if (mask & GPUConst.ColorWrite.GREEN) {\n      g = 1;\n    }\n    if (mask & GPUConst.ColorWrite.BLUE) {\n      b = 1;\n    }\n    if (mask & GPUConst.ColorWrite.ALPHA) {\n      a = 1;\n    }\n\n    const testPipeline = t.createRenderPipelineForTest({\n      format,\n      writeMask: mask,\n    });\n\n    const renderTarget = t.device.createTexture({\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n      size: [kSize, kSize],\n      format,\n    });\n\n    const kBaseColorData = new Float32Array([32, 64, 128, 192]);\n\n    const commandEncoder = t.device.createCommandEncoder();\n    {\n      const renderPass = commandEncoder.beginRenderPass({\n        colorAttachments: [\n          {\n            view: renderTarget.createView(),\n            loadOp: 'load',\n            storeOp: 'store',\n          },\n        ],\n      });\n      renderPass.setPipeline(testPipeline);\n      renderPass.setBindGroup(\n        0,\n        t.createBindGroupForTest(testPipeline.getBindGroupLayout(0), kBaseColorData)\n      );\n      renderPass.draw(3);\n      renderPass.end();\n    }\n    t.device.queue.submit([commandEncoder.finish()]);\n\n    const expColor = { R: r, G: g, B: b, A: a };\n    const expTexelView = TexelView.fromTexelsAsColors(format, _coords => expColor);\n\n    t.expectTexelViewComparisonIsOkInTexture({ texture: renderTarget }, expTexelView, [\n      kSize,\n      kSize,\n    ]);\n  });\n\ng.test('color_write_mask,blending_disabled')\n  .desc(\n    `Test that the color write mask works when blending is disabled or set to the defaults\n  (which has the same blending result).`\n  )\n  .params(u => u.combine('disabled', [false, true]))\n  .fn(t => {\n    const format = 'rgba8unorm';\n    const kSize = 1;\n\n    const blend = t.params.disabled ? undefined : { color: {}, alpha: {} };\n\n    const testPipeline = t.createRenderPipelineForTest({\n      format,\n      blend,\n      writeMask: GPUColorWrite.RED,\n    });\n\n    const renderTarget = t.device.createTexture({\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n      size: [kSize, kSize],\n      format,\n    });\n\n    const kBaseColorData = new Float32Array([32, 64, 128, 192]);\n\n    const commandEncoder = t.device.createCommandEncoder();\n    {\n      const renderPass = commandEncoder.beginRenderPass({\n        colorAttachments: [\n          {\n            view: renderTarget.createView(),\n            loadOp: 'load',\n            storeOp: 'store',\n          },\n        ],\n      });\n      renderPass.setPipeline(testPipeline);\n      renderPass.setBindGroup(\n        0,\n        t.createBindGroupForTest(testPipeline.getBindGroupLayout(0), kBaseColorData)\n      );\n      // Draw [1,1,1,1] with `src * 1 + dst * 0`. So the\n      // result is `[1,1,1,1] * [1,1,1,1] + [0,0,0,0] * 0` = [1,1,1,1].\n      renderPass.draw(3);\n      renderPass.end();\n    }\n    t.device.queue.submit([commandEncoder.finish()]);\n\n    const expColor = { R: 1, G: 0, B: 0, A: 0 };\n    const expTexelView = TexelView.fromTexelsAsColors(format, _coords => expColor);\n\n    t.expectTexelViewComparisonIsOkInTexture({ texture: renderTarget }, expTexelView, [\n      kSize,\n      kSize,\n    ]);\n  });\n\ng.test('blending,clamping')\n  .desc(\n    `\n  Test that clamping occurs at the correct points in the blend process: src value, src factor, dst\n  factor, and output.\n    - TODO: Need to test snorm formats.\n    - TODO: Need to test src value, srcFactor and dstFactor.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('format', ['rgba8unorm', 'rg16float'] as const)\n      .combine('srcValue', [0.4, 0.6, 0.8, 1.0])\n      .combine('dstValue', [0.2, 0.4])\n  )\n  .fn(t => {\n    const { format, srcValue, dstValue } = t.params;\n\n    const blendComponent = { srcFactor: 'one', dstFactor: 'one', operation: 'add' } as const;\n\n    const pipeline = t.device.createRenderPipeline({\n      layout: 'auto',\n      fragment: {\n        targets: [\n          {\n            format,\n            blend: {\n              color: blendComponent,\n              alpha: blendComponent,\n            },\n          },\n        ],\n        module: t.device.createShaderModule({\n          code: `\n@fragment fn main() -> @location(0) vec4<f32> {\n  return vec4<f32>(${srcValue}, ${srcValue}, ${srcValue}, ${srcValue});\n}\n          `,\n        }),\n        entryPoint: 'main',\n      },\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `\n@vertex fn main() -> @builtin(position) vec4<f32> {\n    return vec4<f32>(0.0, 0.0, 0.0, 1.0);\n}\n          `,\n        }),\n        entryPoint: 'main',\n      },\n      primitive: {\n        topology: 'point-list',\n      },\n    });\n\n    const renderTarget = t.device.createTexture({\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n      size: [1, 1, 1],\n      format,\n    });\n\n    const commandEncoder = t.device.createCommandEncoder();\n    const renderPass = commandEncoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: renderTarget.createView(),\n          clearValue: { r: dstValue, g: dstValue, b: dstValue, a: dstValue },\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    });\n    renderPass.setPipeline(pipeline);\n    renderPass.draw(1);\n    renderPass.end();\n    t.device.queue.submit([commandEncoder.finish()]);\n\n    let expValue: number;\n    switch (format) {\n      case 'rgba8unorm': // unorm types should clamp if the sum of srcValue and dstValue exceeds 1.\n        expValue = clamp(srcValue + dstValue, { min: 0, max: 1 });\n        break;\n      case 'rg16float': // float format types doesn't clamp.\n        expValue = srcValue + dstValue;\n        break;\n    }\n\n    const expColor = { R: expValue, G: expValue, B: expValue, A: expValue };\n    const expTexelView = TexelView.fromTexelsAsColors(format, _coords => expColor);\n\n    t.expectTexelViewComparisonIsOkInTexture({ texture: renderTarget }, expTexelView, [1, 1, 1]);\n  });\n"],"mappings":"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"}