{"version":3,"file":"readonly_depth_stencil.spec.js","names":["description","makeTestGroup","kDepthStencilFormats","kTextureFormatInfo","GPUTest","g","test","desc","params","p","combine","undefined","filter","info","format","depthMatch","depth","depthReadOnly","stencilMatch","stencil","stencilReadOnly","beforeAllSubcases","t","selectDeviceForTextureFormatOrSkipTestCase","fn","formatInfo","hasDepth","hasStencil","ds","device","createTexture","label","size","usage","GPUTextureUsage","RENDER_ATTACHMENT","TEXTURE_BINDING","trackForCleanup","initModule","createShaderModule","code","initPipeline","createRenderPipeline","layout","vertex","module","fragment","targets","entryPoint","depthStencil","depthWriteEnabled","depthCompare","stencilBack","compare","passOp","stencilFront","primitive","topology","encoder","createCommandEncoder","initPass","beginRenderPass","colorAttachments","depthStencilAttachment","view","createView","depthStoreOp","depthLoadOp","depthClearValue","stencilStoreOp","stencilLoadOp","stencilClearValue","setPipeline","i","setStencilReference","draw","end","kFragDepth","kStencilRef","testAndCheckModule","testPipeline","fakeStencil","fakeDepth","stencilView","aspect","depthView","testBindGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","testPass","setBindGroup","checkPipeline","checkBindGroup","resultTexture","COPY_SRC","checkPass","loadOp","clearValue","storeOp","queue","submit","finish","expectSingleColor","exp","R"],"sources":["../../../../../../src/webgpu/api/operation/memory_sync/texture/readonly_depth_stencil.spec.ts"],"sourcesContent":["export const description = `\nMemory synchronization tests for depth-stencil attachments in a single pass, with checks for readonlyness.\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { kDepthStencilFormats, kTextureFormatInfo } from '../../../../format_info.js';\nimport { GPUTest } from '../../../../gpu_test.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('sampling_while_testing')\n  .desc(\n    `Tests concurrent sampling and testing of readonly depth-stencil attachments in a render pass.\n      - Test for all depth-stencil formats.\n      - Test for all valid combinations of depth/stencilReadOnly.\n\nIn particular this test checks that a non-readonly aspect can be rendered to, and used for depth/stencil\ntesting while the other one is used for sampling.\n  `\n  )\n  .params(p =>\n    p\n      .combine('format', kDepthStencilFormats) //\n      .combine('depthReadOnly', [true, false, undefined])\n      .combine('stencilReadOnly', [true, false, undefined])\n      .filter(p => {\n        const info = kTextureFormatInfo[p.format];\n        const depthMatch = (info.depth === undefined) === (p.depthReadOnly === undefined);\n        const stencilMatch = (info.stencil === undefined) === (p.stencilReadOnly === undefined);\n        return depthMatch && stencilMatch;\n      })\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceForTextureFormatOrSkipTestCase(t.params.format);\n  })\n  .fn(t => {\n    const { format, depthReadOnly, stencilReadOnly } = t.params;\n    const formatInfo = kTextureFormatInfo[format];\n    const hasDepth = formatInfo.depth !== undefined;\n    const hasStencil = formatInfo.stencil !== undefined;\n\n    // The 3x3 depth stencil texture used for the tests.\n    const ds = t.device.createTexture({\n      label: 'testTexture',\n      size: [3, 3],\n      format,\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING,\n    });\n    t.trackForCleanup(ds);\n\n    // Fill the texture along the X axis with stencil values 1, 2, 3 and along the Y axis depth\n    // values 0.1, 0.2, 0.3. The depth value is written using @builtin(frag_depth) while the\n    // stencil is written using stencil operation and modifying the stencilReference.\n    const initModule = t.device.createShaderModule({\n      code: `\n            @vertex fn vs(\n                @builtin(instance_index) x : u32, @builtin(vertex_index) y : u32\n            ) -> @builtin(position) vec4f {\n                let texcoord = (vec2f(f32(x), f32(y)) + vec2f(0.5)) / 3;\n                return vec4f((texcoord * 2) - vec2f(1.0), 0, 1);\n            }\n            @fragment fn fs_with_depth(@builtin(position) pos : vec4f) -> @builtin(frag_depth) f32 {\n                return (pos.y + 0.5) / 10;\n            }\n            @fragment fn fs_no_depth() {\n            }\n        `,\n    });\n    const initPipeline = t.device.createRenderPipeline({\n      layout: 'auto',\n      label: 'initPipeline',\n      vertex: { module: initModule },\n      fragment: {\n        module: initModule,\n        targets: [],\n        entryPoint: hasDepth ? 'fs_with_depth' : 'fs_no_depth',\n      },\n      depthStencil: {\n        format,\n        ...(hasDepth && {\n          depthWriteEnabled: true,\n          depthCompare: 'always',\n        }),\n        ...(hasStencil && {\n          stencilBack: { compare: 'always', passOp: 'replace' },\n          stencilFront: { compare: 'always', passOp: 'replace' },\n        }),\n      },\n      primitive: { topology: 'point-list' },\n    });\n\n    const encoder = t.device.createCommandEncoder();\n\n    const initPass = encoder.beginRenderPass({\n      colorAttachments: [],\n      depthStencilAttachment: {\n        view: ds.createView(),\n        ...(hasDepth && {\n          depthStoreOp: 'store',\n          depthLoadOp: 'clear',\n          depthClearValue: 0,\n        }),\n        ...(hasStencil && {\n          stencilStoreOp: 'store',\n          stencilLoadOp: 'clear',\n          stencilClearValue: 0,\n        }),\n      },\n    });\n    initPass.setPipeline(initPipeline);\n    for (let i = 0; i < 3; i++) {\n      initPass.setStencilReference(i + 1);\n      // Draw 3 points (Y = 0, 1, 2) at X = instance_index = i.\n      initPass.draw(3, 1, 0, i);\n    }\n    initPass.end();\n\n    // Perform the actual test:\n    //   - The shader outputs depth 0.15 and stencil 2 (via stencilReference).\n    //   - Test that the fragdepth / stencilref must be <= to what's in the depth-stencil attachment.\n    //      -> Fragments that have depth 0.1 or stencil 1 are tested out.\n    //   - Test that sampling the depth / stencil (when possible) is <= 0.2 for depth, <= 2 for stencil\n    //      -> Fragments that have depth 0.3 or stencil 3 are discarded if that aspect is readonly.\n    //   - Write the depth / increment the stencil if the aspect is not readonly.\n    //      -> After the test, fragments that passed will have non-readonly aspects updated.\n    const kFragDepth = 0.15;\n    const kStencilRef = 2;\n    const testAndCheckModule = t.device.createShaderModule({\n      code: `\n          @group(0) @binding(0) var depthTex : texture_2d<f32>;\n          @group(0) @binding(1) var stencilTex : texture_2d<u32>;\n\n          @vertex fn full_quad_vs(@builtin(vertex_index) id : u32) -> @builtin(position) vec4f {\n            let pos = array(vec2f(-3, -1), vec2(3, -1), vec2(0, 2));\n            return vec4f(pos[id], ${kFragDepth}, 1.0);\n          }\n\n          @fragment fn test_texture(@builtin(position) pos : vec4f) {\n            let texel = vec2u(floor(pos.xy));\n            if ${!!stencilReadOnly} && textureLoad(stencilTex, texel, 0).r > 2 {\n                discard;\n            }\n            if ${!!depthReadOnly} && textureLoad(depthTex, texel, 0).r > 0.21 {\n                discard;\n            }\n          }\n\n          @fragment fn check_texture(@builtin(position) pos : vec4f) -> @location(0) u32 {\n            let texel = vec2u(floor(pos.xy));\n\n            // The current values in the framebuffer.\n            let initStencil = texel.x + 1;\n            let initDepth = f32(texel.y + 1) / 10.0;\n\n            // Expected results of the test_texture step.\n            let stencilTestPasses = !${hasStencil} || ${kStencilRef} <= initStencil;\n            let depthTestPasses = !${hasDepth} || ${kFragDepth} <= initDepth;\n            let fsDiscards = (${!!stencilReadOnly} && initStencil > 2) ||\n                             (${!!depthReadOnly} && initDepth > 0.21);\n\n            // Compute the values that should be in the framebuffer.\n            var stencil = initStencil;\n            var depth = initDepth;\n\n            // When the fragments aren't discarded, fragment output operations happen.\n            if depthTestPasses && stencilTestPasses && !fsDiscards {\n                if ${!stencilReadOnly} {\n                    stencil += 1;\n                }\n                if ${!depthReadOnly} {\n                    depth = ${kFragDepth};\n                }\n            }\n\n            if ${hasStencil} && textureLoad(stencilTex, texel, 0).r != stencil {\n                return 0;\n            }\n            if ${hasDepth} && abs(textureLoad(depthTex, texel, 0).r - depth) > 0.01 {\n                return 0;\n            }\n            return 1;\n          }\n    `,\n    });\n    const testPipeline = t.device.createRenderPipeline({\n      label: 'testPipeline',\n      layout: 'auto',\n      vertex: { module: testAndCheckModule },\n      fragment: { module: testAndCheckModule, entryPoint: 'test_texture', targets: [] },\n      depthStencil: {\n        format,\n        ...(hasDepth && {\n          depthCompare: 'less-equal',\n          depthWriteEnabled: !depthReadOnly,\n        }),\n        ...(hasStencil && {\n          stencilBack: {\n            compare: 'less-equal',\n            passOp: stencilReadOnly ? 'keep' : 'increment-clamp',\n          },\n          stencilFront: {\n            compare: 'less-equal',\n            passOp: stencilReadOnly ? 'keep' : 'increment-clamp',\n          },\n        }),\n      },\n      primitive: { topology: 'triangle-list' },\n    });\n\n    // Make fake stencil or depth textures to put in the bindgroup if the aspect is not readonly.\n    const fakeStencil = t.device.createTexture({\n      label: 'fakeStencil',\n      format: 'r32uint',\n      size: [1, 1],\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    });\n    t.trackForCleanup(fakeStencil);\n    const fakeDepth = t.device.createTexture({\n      label: 'fakeDepth',\n      format: 'r32float',\n      size: [1, 1],\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    });\n    t.trackForCleanup(fakeDepth);\n    const stencilView = stencilReadOnly\n      ? ds.createView({ aspect: 'stencil-only' })\n      : fakeStencil.createView();\n    const depthView = depthReadOnly\n      ? ds.createView({ aspect: 'depth-only' })\n      : fakeDepth.createView();\n    const testBindGroup = t.device.createBindGroup({\n      layout: testPipeline.getBindGroupLayout(0),\n      entries: [\n        { binding: 0, resource: depthView },\n        { binding: 1, resource: stencilView },\n      ],\n    });\n\n    // Run the test.\n    const testPass = encoder.beginRenderPass({\n      colorAttachments: [],\n      depthStencilAttachment: {\n        view: ds.createView(),\n        ...(hasDepth &&\n          (depthReadOnly\n            ? { depthReadOnly: true }\n            : {\n                depthStoreOp: 'store',\n                depthLoadOp: 'load',\n              })),\n        ...(hasStencil &&\n          (stencilReadOnly\n            ? { stencilReadOnly: true }\n            : {\n                stencilStoreOp: 'store',\n                stencilLoadOp: 'load',\n              })),\n      },\n    });\n    testPass.setPipeline(testPipeline);\n    testPass.setStencilReference(kStencilRef);\n    testPass.setBindGroup(0, testBindGroup);\n    testPass.draw(3);\n    testPass.end();\n\n    // Check that the contents of the textures are what we expect. See the shader module for the\n    // computation of what's expected, it writes a 1 on success, 0 otherwise.\n    const checkPipeline = t.device.createRenderPipeline({\n      label: 'checkPipeline',\n      layout: 'auto',\n      vertex: { module: testAndCheckModule },\n      fragment: {\n        module: testAndCheckModule,\n        entryPoint: 'check_texture',\n        targets: [{ format: 'r32uint' }],\n      },\n      primitive: { topology: 'triangle-list' },\n    });\n    const checkBindGroup = t.device.createBindGroup({\n      layout: checkPipeline.getBindGroupLayout(0),\n      entries: [\n        {\n          binding: 0,\n          resource: hasDepth ? ds.createView({ aspect: 'depth-only' }) : fakeDepth.createView(),\n        },\n        {\n          binding: 1,\n          resource: hasStencil\n            ? ds.createView({ aspect: 'stencil-only' })\n            : fakeStencil.createView(),\n        },\n      ],\n    });\n\n    const resultTexture = t.device.createTexture({\n      label: 'resultTexture',\n      format: 'r32uint',\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n      size: [3, 3],\n    });\n    const checkPass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: resultTexture.createView(),\n          loadOp: 'clear',\n          clearValue: [0, 0, 0, 0],\n          storeOp: 'store',\n        },\n      ],\n    });\n    checkPass.setPipeline(checkPipeline);\n    checkPass.setBindGroup(0, checkBindGroup);\n    checkPass.draw(3);\n    checkPass.end();\n\n    t.queue.submit([encoder.finish()]);\n\n    // The check texture should be full of success (a.k.a. 1)!\n    t.expectSingleColor(resultTexture, resultTexture.format, { size: [3, 3, 1], exp: { R: 1 } });\n  });\n"],"mappings":"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"}