{"version":3,"file":"same_subresource.spec.js","names":["description","makeTestGroup","assert","memcpy","unreachable","GPUTest","align","getTextureCopyLayout","kTexelRepresentationInfo","kOperationBoundaries","kBoundaryInfo","OperationContextHelper","kAllReadOps","kAllWriteOps","checkOpsValidForContext","kOpInfo","g","fullscreenQuadWGSL","TextureSyncTestHelper","kTextureSize","kTextureFormat","constructor","t","textureCreationParams","texture","trackForCleanup","device","createTexture","size","format","performReadOp","op","in","context","ensureContext","usage","GPUTextureUsage","COPY_SRC","COPY_DST","commandEncoder","undefined","copyTextureToTexture","byteLength","bytesPerRow","buffer","createBuffer","GPUBufferUsage","copyTextureToBuffer","copyBufferToTexture","STORAGE_BINDING","bindGroupLayout","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","FRAGMENT","COMPUTE","sampleType","storageTexture","access","bindGroup","createBindGroup","layout","resource","createView","module","createShaderModule","code","renderPipeline","createRenderPipeline","createPipelineLayout","bindGroupLayouts","vertex","entryPoint","fragment","targets","writeMask","renderBundleEncoder","setPipeline","setBindGroup","draw","renderPassEncoder","computePipeline","createComputePipeline","compute","computePassEncoder","dispatchWorkgroups","Math","ceil","performWriteOp","data","beginRenderPass","colorAttachments","view","clearValue","R","G","B","A","loadOp","storeOp","currentContext","rep","texelData","pack","encode","numTexels","fullTexelData","ArrayBuffer","i","src","dst","start","queue","writeTexture","j","writeBuffer","renderTarget","RENDER_ATTACHMENT","sampleCount","resolveTarget","storedValue","map","x","toFixed","join","test","desc","params","u","combine","expand","p","boundary","contexts","expandWithParams","_context","read","write","fn","helper","readUsage","writeUsage","texelValue1","texelValue2","readbackTexture","ensureBoundary","ensureSubmit","expectSingleColor","exp","texelValue","first","second","unimplemented"],"sources":["../../../../../../src/webgpu/api/operation/memory_sync/texture/same_subresource.spec.ts"],"sourcesContent":["export const description = `\nMemory Synchronization Tests for Texture: read before write, read after write, and write after write to the same subresource.\n\n- TODO: Test synchronization between multiple queues.\n- TODO: Test depth/stencil attachments.\n- TODO: Use non-solid-color texture contents [2]\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { assert, memcpy, unreachable } from '../../../../../common/util/util.js';\nimport { EncodableTextureFormat } from '../../../../format_info.js';\nimport { GPUTest } from '../../../../gpu_test.js';\nimport { align } from '../../../../util/math.js';\nimport { getTextureCopyLayout } from '../../../../util/texture/layout.js';\nimport {\n  kTexelRepresentationInfo,\n  PerTexelComponent,\n} from '../../../../util/texture/texel_data.js';\nimport {\n  kOperationBoundaries,\n  OperationContext,\n  kBoundaryInfo,\n  OperationContextHelper,\n} from '../operation_context_helper.js';\n\nimport {\n  kAllReadOps,\n  kAllWriteOps,\n  checkOpsValidForContext,\n  Op,\n  kOpInfo,\n} from './texture_sync_test.js';\n\nexport const g = makeTestGroup(GPUTest);\n\nconst fullscreenQuadWGSL = `\n  struct VertexOutput {\n    @builtin(position) Position : vec4<f32>\n  };\n\n  @vertex fn vert_main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\n    var pos = array<vec2<f32>, 6>(\n        vec2<f32>( 1.0,  1.0),\n        vec2<f32>( 1.0, -1.0),\n        vec2<f32>(-1.0, -1.0),\n        vec2<f32>( 1.0,  1.0),\n        vec2<f32>(-1.0, -1.0),\n        vec2<f32>(-1.0,  1.0));\n\n    var output : VertexOutput;\n    output.Position = vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n    return output;\n  }\n`;\n\nclass TextureSyncTestHelper extends OperationContextHelper {\n  private texture: GPUTexture;\n\n  public override readonly kTextureSize = [4, 4] as const;\n  public override readonly kTextureFormat: EncodableTextureFormat = 'rgba8unorm';\n\n  constructor(\n    t: GPUTest,\n    textureCreationParams: {\n      usage: GPUTextureUsageFlags;\n    }\n  ) {\n    super(t);\n    this.texture = t.trackForCleanup(\n      t.device.createTexture({\n        size: this.kTextureSize,\n        format: this.kTextureFormat,\n        ...textureCreationParams,\n      })\n    );\n  }\n\n  /**\n   * Perform a read operation on the test texture.\n   * @return GPUTexture copy containing the contents.\n   */\n  performReadOp({ op, in: context }: { op: Op; in: OperationContext }): GPUTexture {\n    this.ensureContext(context);\n    switch (op) {\n      case 't2t-copy': {\n        const texture = this.t.trackForCleanup(\n          this.device.createTexture({\n            size: this.kTextureSize,\n            format: this.kTextureFormat,\n            usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n          })\n        );\n\n        assert(this.commandEncoder !== undefined);\n        this.commandEncoder.copyTextureToTexture(\n          {\n            texture: this.texture,\n          },\n          { texture },\n          this.kTextureSize\n        );\n        return texture;\n      }\n      case 't2b-copy': {\n        const { byteLength, bytesPerRow } = getTextureCopyLayout(this.kTextureFormat, '2d', [\n          ...this.kTextureSize,\n          1,\n        ]);\n        const buffer = this.t.trackForCleanup(\n          this.device.createBuffer({\n            size: byteLength,\n            usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n          })\n        );\n\n        const texture = this.t.trackForCleanup(\n          this.device.createTexture({\n            size: this.kTextureSize,\n            format: this.kTextureFormat,\n            usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n          })\n        );\n\n        assert(this.commandEncoder !== undefined);\n        this.commandEncoder.copyTextureToBuffer(\n          {\n            texture: this.texture,\n          },\n          { buffer, bytesPerRow },\n          this.kTextureSize\n        );\n        this.commandEncoder.copyBufferToTexture(\n          { buffer, bytesPerRow },\n          { texture },\n          this.kTextureSize\n        );\n        return texture;\n      }\n      case 'sample': {\n        const texture = this.t.trackForCleanup(\n          this.device.createTexture({\n            size: this.kTextureSize,\n            format: this.kTextureFormat,\n            usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.STORAGE_BINDING,\n          })\n        );\n\n        const bindGroupLayout = this.device.createBindGroupLayout({\n          entries: [\n            {\n              binding: 0,\n              visibility: GPUShaderStage.FRAGMENT | GPUShaderStage.COMPUTE,\n              texture: {\n                sampleType: 'unfilterable-float',\n              },\n            },\n            {\n              binding: 1,\n              visibility: GPUShaderStage.FRAGMENT | GPUShaderStage.COMPUTE,\n              storageTexture: {\n                access: 'write-only',\n                format: this.kTextureFormat,\n              },\n            },\n          ],\n        });\n\n        const bindGroup = this.device.createBindGroup({\n          layout: bindGroupLayout,\n          entries: [\n            {\n              binding: 0,\n              resource: this.texture.createView(),\n            },\n            {\n              binding: 1,\n              resource: texture.createView(),\n            },\n          ],\n        });\n\n        switch (context) {\n          case 'render-pass-encoder':\n          case 'render-bundle-encoder': {\n            const module = this.device.createShaderModule({\n              code: `${fullscreenQuadWGSL}\n\n                @group(0) @binding(0) var inputTex: texture_2d<f32>;\n                @group(0) @binding(1) var outputTex: texture_storage_2d<rgba8unorm, write>;\n\n                @fragment fn frag_main(@builtin(position) fragCoord: vec4<f32>) -> @location(0) vec4<f32> {\n                  let coord = vec2<i32>(fragCoord.xy);\n                  textureStore(outputTex, coord, textureLoad(inputTex, coord, 0));\n                  return vec4<f32>();\n                }\n              `,\n            });\n            const renderPipeline = this.device.createRenderPipeline({\n              layout: this.device.createPipelineLayout({\n                bindGroupLayouts: [bindGroupLayout],\n              }),\n              vertex: {\n                module,\n                entryPoint: 'vert_main',\n              },\n              fragment: {\n                module,\n                entryPoint: 'frag_main',\n\n                // Unused attachment since we can't use textureStore in the vertex shader.\n                // Set writeMask to zero.\n                targets: [\n                  {\n                    format: this.kTextureFormat,\n                    writeMask: 0,\n                  },\n                ],\n              },\n            });\n\n            switch (context) {\n              case 'render-bundle-encoder':\n                assert(this.renderBundleEncoder !== undefined);\n                this.renderBundleEncoder.setPipeline(renderPipeline);\n                this.renderBundleEncoder.setBindGroup(0, bindGroup);\n                this.renderBundleEncoder.draw(6);\n                break;\n              case 'render-pass-encoder':\n                assert(this.renderPassEncoder !== undefined);\n                this.renderPassEncoder.setPipeline(renderPipeline);\n                this.renderPassEncoder.setBindGroup(0, bindGroup);\n                this.renderPassEncoder.draw(6);\n                break;\n            }\n            break;\n          }\n          case 'compute-pass-encoder': {\n            const module = this.device.createShaderModule({\n              code: `\n                @group(0) @binding(0) var inputTex: texture_2d<f32>;\n                @group(0) @binding(1) var outputTex: texture_storage_2d<rgba8unorm, write>;\n\n                @compute @workgroup_size(8, 8)\n                fn main(@builtin(global_invocation_id) gid : vec3<u32>) {\n                  if (any(gid.xy >= vec2<u32>(textureDimensions(inputTex)))) {\n                    return;\n                  }\n                  let coord = vec2<i32>(gid.xy);\n                  textureStore(outputTex, coord, textureLoad(inputTex, coord, 0));\n                }\n              `,\n            });\n            const computePipeline = this.device.createComputePipeline({\n              layout: this.device.createPipelineLayout({\n                bindGroupLayouts: [bindGroupLayout],\n              }),\n              compute: {\n                module,\n                entryPoint: 'main',\n              },\n            });\n\n            assert(this.computePassEncoder !== undefined);\n            this.computePassEncoder.setPipeline(computePipeline);\n            this.computePassEncoder.setBindGroup(0, bindGroup);\n            this.computePassEncoder.dispatchWorkgroups(\n              Math.ceil(this.kTextureSize[0] / 8),\n              Math.ceil(this.kTextureSize[1] / 8)\n            );\n            break;\n          }\n          default:\n            unreachable();\n        }\n\n        return texture;\n      }\n      case 'b2t-copy':\n      case 'attachment-resolve':\n      case 'attachment-store':\n        unreachable();\n    }\n    unreachable();\n  }\n\n  performWriteOp(\n    { op, in: context }: { op: Op; in: OperationContext },\n    data: PerTexelComponent<number>\n  ) {\n    this.ensureContext(context);\n    switch (op) {\n      case 'attachment-store': {\n        assert(this.commandEncoder !== undefined);\n        this.renderPassEncoder = this.commandEncoder.beginRenderPass({\n          colorAttachments: [\n            {\n              view: this.texture.createView(),\n              // [2] Use non-solid-color texture values\n              clearValue: [data.R ?? 0, data.G ?? 0, data.B ?? 0, data.A ?? 0],\n              loadOp: 'clear',\n              storeOp: 'store',\n            },\n          ],\n        });\n        this.currentContext = 'render-pass-encoder';\n        break;\n      }\n      case 'write-texture': {\n        // [2] Use non-solid-color texture values\n        const rep = kTexelRepresentationInfo[this.kTextureFormat];\n        const texelData = rep.pack(rep.encode(data));\n        const numTexels = this.kTextureSize[0] * this.kTextureSize[1];\n        const fullTexelData = new ArrayBuffer(texelData.byteLength * numTexels);\n        for (let i = 0; i < numTexels; ++i) {\n          memcpy({ src: texelData }, { dst: fullTexelData, start: i * texelData.byteLength });\n        }\n\n        this.queue.writeTexture(\n          { texture: this.texture },\n          fullTexelData,\n          {\n            bytesPerRow: texelData.byteLength * this.kTextureSize[0],\n          },\n          this.kTextureSize\n        );\n        break;\n      }\n      case 't2t-copy': {\n        const texture = this.device.createTexture({\n          size: this.kTextureSize,\n          format: this.kTextureFormat,\n          usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n        });\n\n        // [2] Use non-solid-color texture values\n        const rep = kTexelRepresentationInfo[this.kTextureFormat];\n        const texelData = rep.pack(rep.encode(data));\n        const numTexels = this.kTextureSize[0] * this.kTextureSize[1];\n        const fullTexelData = new ArrayBuffer(texelData.byteLength * numTexels);\n        for (let i = 0; i < numTexels; ++i) {\n          memcpy({ src: texelData }, { dst: fullTexelData, start: i * texelData.byteLength });\n        }\n\n        this.queue.writeTexture(\n          { texture },\n          fullTexelData,\n          {\n            bytesPerRow: texelData.byteLength * this.kTextureSize[0],\n          },\n          this.kTextureSize\n        );\n\n        assert(this.commandEncoder !== undefined);\n        this.commandEncoder.copyTextureToTexture(\n          { texture },\n          { texture: this.texture },\n          this.kTextureSize\n        );\n        break;\n      }\n      case 'b2t-copy': {\n        // [2] Use non-solid-color texture values\n        const rep = kTexelRepresentationInfo[this.kTextureFormat];\n        const texelData = rep.pack(rep.encode(data));\n        const bytesPerRow = align(texelData.byteLength, 256);\n        const fullTexelData = new ArrayBuffer(bytesPerRow * this.kTextureSize[1]);\n        for (let i = 0; i < this.kTextureSize[1]; ++i) {\n          for (let j = 0; j < this.kTextureSize[0]; ++j) {\n            memcpy(\n              { src: texelData },\n              {\n                dst: fullTexelData,\n                start: i * bytesPerRow + j * texelData.byteLength,\n              }\n            );\n          }\n        }\n\n        const buffer = this.t.trackForCleanup(\n          this.device.createBuffer({\n            size: fullTexelData.byteLength,\n            usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n          })\n        );\n\n        this.queue.writeBuffer(buffer, 0, fullTexelData);\n\n        assert(this.commandEncoder !== undefined);\n        this.commandEncoder.copyBufferToTexture(\n          { buffer, bytesPerRow },\n          { texture: this.texture },\n          this.kTextureSize\n        );\n        break;\n      }\n      case 'attachment-resolve': {\n        assert(this.commandEncoder !== undefined);\n        const renderTarget = this.t.trackForCleanup(\n          this.device.createTexture({\n            format: this.kTextureFormat,\n            size: this.kTextureSize,\n            usage: GPUTextureUsage.RENDER_ATTACHMENT,\n            sampleCount: 4,\n          })\n        );\n        this.renderPassEncoder = this.commandEncoder.beginRenderPass({\n          colorAttachments: [\n            {\n              view: renderTarget.createView(),\n              resolveTarget: this.texture.createView(),\n              // [2] Use non-solid-color texture values\n              clearValue: [data.R ?? 0, data.G ?? 0, data.B ?? 0, data.A ?? 0],\n              loadOp: 'clear',\n              storeOp: 'discard',\n            },\n          ],\n        });\n        this.currentContext = 'render-pass-encoder';\n        break;\n      }\n      case 'storage': {\n        const bindGroupLayout = this.device.createBindGroupLayout({\n          entries: [\n            {\n              binding: 0,\n              visibility: GPUShaderStage.FRAGMENT | GPUShaderStage.COMPUTE,\n              storageTexture: {\n                access: 'write-only',\n                format: this.kTextureFormat,\n              },\n            },\n          ],\n        });\n\n        const bindGroup = this.device.createBindGroup({\n          layout: bindGroupLayout,\n          entries: [\n            {\n              binding: 0,\n              resource: this.texture.createView(),\n            },\n          ],\n        });\n\n        // [2] Use non-solid-color texture values\n        const storedValue = `vec4<f32>(${[data.R ?? 0, data.G ?? 0, data.B ?? 0, data.A ?? 0]\n          .map(x => x.toFixed(5))\n          .join(', ')})`;\n\n        switch (context) {\n          case 'render-pass-encoder':\n          case 'render-bundle-encoder': {\n            const module = this.device.createShaderModule({\n              code: `${fullscreenQuadWGSL}\n\n                @group(0) @binding(0) var outputTex: texture_storage_2d<rgba8unorm, write>;\n\n                @fragment fn frag_main(@builtin(position) fragCoord: vec4<f32>) -> @location(0) vec4<f32> {\n                  textureStore(outputTex, vec2<i32>(fragCoord.xy), ${storedValue});\n                  return vec4<f32>();\n                }\n              `,\n            });\n            const renderPipeline = this.device.createRenderPipeline({\n              layout: this.device.createPipelineLayout({\n                bindGroupLayouts: [bindGroupLayout],\n              }),\n              vertex: {\n                module,\n                entryPoint: 'vert_main',\n              },\n              fragment: {\n                module,\n                entryPoint: 'frag_main',\n\n                // Unused attachment since we can't use textureStore in the vertex shader.\n                // Set writeMask to zero.\n                targets: [\n                  {\n                    format: this.kTextureFormat,\n                    writeMask: 0,\n                  },\n                ],\n              },\n            });\n\n            switch (context) {\n              case 'render-bundle-encoder':\n                assert(this.renderBundleEncoder !== undefined);\n                this.renderBundleEncoder.setPipeline(renderPipeline);\n                this.renderBundleEncoder.setBindGroup(0, bindGroup);\n                this.renderBundleEncoder.draw(6);\n                break;\n              case 'render-pass-encoder':\n                assert(this.renderPassEncoder !== undefined);\n                this.renderPassEncoder.setPipeline(renderPipeline);\n                this.renderPassEncoder.setBindGroup(0, bindGroup);\n                this.renderPassEncoder.draw(6);\n                break;\n            }\n            break;\n          }\n          case 'compute-pass-encoder': {\n            const module = this.device.createShaderModule({\n              code: `\n                @group(0) @binding(0) var outputTex: texture_storage_2d<rgba8unorm, write>;\n\n                @compute @workgroup_size(8, 8)\n                fn main(@builtin(global_invocation_id) gid : vec3<u32>) {\n                  if (any(gid.xy >= vec2<u32>(textureDimensions(outputTex)))) {\n                    return;\n                  }\n                  let coord = vec2<i32>(gid.xy);\n                  textureStore(outputTex, coord, ${storedValue});\n                }\n              `,\n            });\n            const computePipeline = this.device.createComputePipeline({\n              layout: this.device.createPipelineLayout({\n                bindGroupLayouts: [bindGroupLayout],\n              }),\n              compute: {\n                module,\n                entryPoint: 'main',\n              },\n            });\n\n            assert(this.computePassEncoder !== undefined);\n            this.computePassEncoder.setPipeline(computePipeline);\n            this.computePassEncoder.setBindGroup(0, bindGroup);\n            this.computePassEncoder.dispatchWorkgroups(\n              Math.ceil(this.kTextureSize[0] / 8),\n              Math.ceil(this.kTextureSize[1] / 8)\n            );\n            break;\n          }\n          default:\n            unreachable();\n        }\n        break;\n      }\n      case 't2b-copy':\n      case 'sample':\n        unreachable();\n    }\n  }\n}\n\ng.test('rw')\n  .desc(\n    `\n    Perform a 'read' operations on a texture subresource, followed by a 'write' operation.\n    Operations are separated by a 'boundary' (pass, encoder, queue-op, etc.).\n    Test that the results are synchronized.\n    The read should not see the contents written by the subsequent write.`\n  )\n  .params(u =>\n    u\n      .combine('boundary', kOperationBoundaries)\n      .expand('_context', p => kBoundaryInfo[p.boundary].contexts)\n      .expandWithParams(function* ({ _context }) {\n        for (const read of kAllReadOps) {\n          for (const write of kAllWriteOps) {\n            if (checkOpsValidForContext([read, write], _context)) {\n              yield {\n                read: { op: read, in: _context[0] },\n                write: { op: write, in: _context[1] },\n              };\n            }\n          }\n        }\n      })\n  )\n  .fn(t => {\n    const helper = new TextureSyncTestHelper(t, {\n      usage:\n        GPUTextureUsage.COPY_DST |\n        kOpInfo[t.params.read.op].readUsage |\n        kOpInfo[t.params.write.op].writeUsage,\n    });\n    // [2] Use non-solid-color texture value.\n    const texelValue1 = { R: 0, G: 1, B: 0, A: 1 } as const;\n    const texelValue2 = { R: 1, G: 0, B: 0, A: 1 } as const;\n\n    // Initialize the texture with something.\n    helper.performWriteOp({ op: 'write-texture', in: 'queue' }, texelValue1);\n    const readbackTexture = helper.performReadOp(t.params.read);\n    helper.ensureBoundary(t.params.boundary);\n    helper.performWriteOp(t.params.write, texelValue2);\n    helper.ensureSubmit();\n\n    // Contents should be the first value written, not the second.\n    t.expectSingleColor(readbackTexture, helper.kTextureFormat, {\n      size: [...helper.kTextureSize, 1],\n      exp: texelValue1,\n    });\n  });\n\ng.test('wr')\n  .desc(\n    `\n    Perform a 'write' operation on a texture subresource, followed by a 'read' operation.\n    Operations are separated by a 'boundary' (pass, encoder, queue-op, etc.).\n    Test that the results are synchronized.\n    The read should see exactly the contents written by the previous write.\n\n    - TODO: Use non-solid-color texture contents [2]`\n  )\n  .params(u =>\n    u\n      .combine('boundary', kOperationBoundaries)\n      .expand('_context', p => kBoundaryInfo[p.boundary].contexts)\n      .expandWithParams(function* ({ _context }) {\n        for (const read of kAllReadOps) {\n          for (const write of kAllWriteOps) {\n            if (checkOpsValidForContext([write, read], _context)) {\n              yield {\n                write: { op: write, in: _context[0] },\n                read: { op: read, in: _context[1] },\n              };\n            }\n          }\n        }\n      })\n  )\n  .fn(t => {\n    const helper = new TextureSyncTestHelper(t, {\n      usage: kOpInfo[t.params.read.op].readUsage | kOpInfo[t.params.write.op].writeUsage,\n    });\n    // [2] Use non-solid-color texture value.\n    const texelValue = { R: 0, G: 1, B: 0, A: 1 } as const;\n\n    helper.performWriteOp(t.params.write, texelValue);\n    helper.ensureBoundary(t.params.boundary);\n    const readbackTexture = helper.performReadOp(t.params.read);\n    helper.ensureSubmit();\n\n    // Contents should be exactly the values written.\n    t.expectSingleColor(readbackTexture, helper.kTextureFormat, {\n      size: [...helper.kTextureSize, 1],\n      exp: texelValue,\n    });\n  });\n\ng.test('ww')\n  .desc(\n    `\n    Perform a 'first' write operation on a texture subresource, followed by a 'second' write operation.\n    Operations are separated by a 'boundary' (pass, encoder, queue-op, etc.).\n    Test that the results are synchronized.\n    The second write should overwrite the contents of the first.`\n  )\n  .params(u =>\n    u\n      .combine('boundary', kOperationBoundaries)\n      .expand('_context', p => kBoundaryInfo[p.boundary].contexts)\n      .expandWithParams(function* ({ _context }) {\n        for (const first of kAllWriteOps) {\n          for (const second of kAllWriteOps) {\n            if (checkOpsValidForContext([first, second], _context)) {\n              yield {\n                first: { op: first, in: _context[0] },\n                second: { op: second, in: _context[1] },\n              };\n            }\n          }\n        }\n      })\n  )\n  .fn(t => {\n    const helper = new TextureSyncTestHelper(t, {\n      usage:\n        GPUTextureUsage.COPY_SRC |\n        kOpInfo[t.params.first.op].writeUsage |\n        kOpInfo[t.params.second.op].writeUsage,\n    });\n    // [2] Use non-solid-color texture value.\n    const texelValue1 = { R: 1, G: 0, B: 0, A: 1 } as const;\n    const texelValue2 = { R: 0, G: 1, B: 0, A: 1 } as const;\n\n    helper.performWriteOp(t.params.first, texelValue1);\n    helper.ensureBoundary(t.params.boundary);\n    helper.performWriteOp(t.params.second, texelValue2);\n    helper.ensureSubmit();\n\n    // Read back the contents so we can test the result.\n    const readbackTexture = helper.performReadOp({ op: 't2t-copy', in: 'command-encoder' });\n    helper.ensureSubmit();\n\n    // Contents should be the second value written.\n    t.expectSingleColor(readbackTexture, helper.kTextureFormat, {\n      size: [...helper.kTextureSize, 1],\n      exp: texelValue2,\n    });\n  });\n\ng.test('rw,single_pass,load_store')\n  .desc(\n    `\n    TODO: Test memory synchronization when loading from a texture subresource in a single pass and storing to it.`\n  )\n  .unimplemented();\n\ng.test('rw,single_pass,load_resolve')\n  .desc(\n    `\n    TODO: Test memory synchronization when loading from a texture subresource in a single pass and resolving to it.`\n  )\n  .unimplemented();\n"],"mappings":"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"}