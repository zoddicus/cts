{"version":3,"file":"map.spec.js","names":["description","makeTestGroup","assert","memcpy","checkElementsEqual","MappingTest","g","kSubcases","size","range","undefined","reifyMapRange","bufferSize","offset","mapRegionBoundModes","getRegionForMap","mapAsyncRegionLeft","mapAsyncRegionRight","regionLeft","regionRight","test","desc","params","u","combine","beginSubcases","combineWithParams","fn","t","rangeOffset","rangeSize","buffer","createBufferTracked","usage","GPUBufferUsage","COPY_SRC","MAP_WRITE","mapRegion","mapAsync","GPUMapMode","WRITE","arrayBuffer","getMappedRange","checkMapWrite","range1","range2","mappedAtCreation","rangeOffset1","rangeSize1","rangeOffset2","rangeSize2","init","byteLength","expectedBuffer","ArrayBuffer","expected","Uint32Array","BYTES_PER_ELEMENT","data","i","length","unmap","init2","expected2","data2","expectGPUBufferValuesEqual","COPY_DST","MAP_READ","READ","actual","Uint8Array","expectOK","expectedArrayBuffer","uint8Expected","int8Expected","Int8Array","uint16Expected","Uint16Array","int16Expected","Int16Array","uint32Expected","int32Expected","Int32Array","float32Expected","Float32Array","float64Expected","Float64Array","Number","MAX_VALUE","MIN_VALUE","src","dst","mappedArrayBuffer","mappable","usageType","afterUnmap","afterDestroy","validationError","expectValidationError","expect","mapState","destroy","mapModeType","beforeUnmap","beforeDestroy","bufferCreationValidationError","mapMode","mapAsyncValidationError","promise","fail"],"sources":["../../../../../src/webgpu/api/operation/buffers/map.spec.ts"],"sourcesContent":["export const description = `\nTest the operation of buffer mapping, specifically the data contents written via\nmap-write/mappedAtCreation, and the contents of buffers returned by getMappedRange on\nbuffers which are mapped-read/mapped-write/mappedAtCreation.\n\nrange: used for getMappedRange\nmapRegion: used for mapAsync\n\nmapRegionBoundModes is used to get mapRegion from range:\n - default-expand: expand mapRegion to buffer bound by setting offset/size to undefined\n - explicit-expand: expand mapRegion to buffer bound by explicitly calculating offset/size\n - minimal: make mapRegion to be the same as range which is the minimal range to make getMappedRange input valid\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { assert, memcpy } from '../../../../common/util/util.js';\nimport { checkElementsEqual } from '../../../util/check_contents.js';\n\nimport { MappingTest } from './mapping_test.js';\n\nexport const g = makeTestGroup(MappingTest);\n\nconst kSubcases = [\n  { size: 0, range: [] },\n  { size: 0, range: [undefined] },\n  { size: 0, range: [undefined, undefined] },\n  { size: 0, range: [0] },\n  { size: 0, range: [0, undefined] },\n  { size: 0, range: [0, 0] },\n  { size: 12, range: [] },\n  { size: 12, range: [undefined] },\n  { size: 12, range: [undefined, undefined] },\n  { size: 12, range: [0] },\n  { size: 12, range: [0, undefined] },\n  { size: 12, range: [0, 12] },\n  { size: 12, range: [0, 0] },\n  { size: 12, range: [8] },\n  { size: 12, range: [8, undefined] },\n  { size: 12, range: [8, 4] },\n  { size: 28, range: [8, 8] },\n  { size: 28, range: [8, 12] },\n  { size: 512 * 1024, range: [] },\n] as const;\n\nfunction reifyMapRange(bufferSize: number, range: readonly [number?, number?]): [number, number] {\n  const offset = range[0] ?? 0;\n  return [offset, range[1] ?? bufferSize - offset];\n}\n\nconst mapRegionBoundModes = ['default-expand', 'explicit-expand', 'minimal'] as const;\ntype MapRegionBoundMode = (typeof mapRegionBoundModes)[number];\n\nfunction getRegionForMap(\n  bufferSize: number,\n  range: [number, number],\n  {\n    mapAsyncRegionLeft,\n    mapAsyncRegionRight,\n  }: {\n    mapAsyncRegionLeft: MapRegionBoundMode;\n    mapAsyncRegionRight: MapRegionBoundMode;\n  }\n) {\n  const regionLeft = mapAsyncRegionLeft === 'minimal' ? range[0] : 0;\n  const regionRight = mapAsyncRegionRight === 'minimal' ? range[0] + range[1] : bufferSize;\n  return [\n    mapAsyncRegionLeft === 'default-expand' ? undefined : regionLeft,\n    mapAsyncRegionRight === 'default-expand' ? undefined : regionRight - regionLeft,\n  ] as const;\n}\n\ng.test('mapAsync,write')\n  .desc(\n    `Use map-write to write to various ranges of variously-sized buffers, then expectContents\n(which does copyBufferToBuffer + map-read) to ensure the contents were written.`\n  )\n  .params(u =>\n    u\n      .combine('mapAsyncRegionLeft', mapRegionBoundModes)\n      .combine('mapAsyncRegionRight', mapRegionBoundModes)\n      .beginSubcases()\n      .combineWithParams(kSubcases)\n  )\n  .fn(async t => {\n    const { size, range } = t.params;\n    const [rangeOffset, rangeSize] = reifyMapRange(size, range);\n\n    const buffer = t.createBufferTracked({\n      size,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.MAP_WRITE,\n    });\n\n    const mapRegion = getRegionForMap(size, [rangeOffset, rangeSize], t.params);\n    await buffer.mapAsync(GPUMapMode.WRITE, ...mapRegion);\n    const arrayBuffer = buffer.getMappedRange(...range);\n    t.checkMapWrite(buffer, rangeOffset, arrayBuffer, rangeSize);\n  });\n\ng.test('mapAsync,write,unchanged_ranges_preserved')\n  .desc(\n    `Use mappedAtCreation or mapAsync to write to various ranges of variously-sized buffers, then\nuse mapAsync to map a different range and zero it out. Finally use expectGPUBufferValuesEqual\n(which does copyBufferToBuffer + map-read) to verify that contents originally written outside the\nsecond mapped range were not altered.`\n  )\n  .params(u =>\n    u\n      .beginSubcases()\n      .combine('mappedAtCreation', [false, true])\n      .combineWithParams([\n        { size: 12, range1: [], range2: [8] },\n        { size: 12, range1: [], range2: [0, 8] },\n        { size: 12, range1: [0, 8], range2: [8] },\n        { size: 12, range1: [8], range2: [0, 8] },\n        { size: 28, range1: [], range2: [8, 8] },\n        { size: 28, range1: [8, 16], range2: [16, 8] },\n        { size: 32, range1: [16, 12], range2: [8, 16] },\n        { size: 32, range1: [8, 8], range2: [24, 4] },\n      ] as const)\n  )\n  .fn(async t => {\n    const { size, range1, range2, mappedAtCreation } = t.params;\n    const [rangeOffset1, rangeSize1] = reifyMapRange(size, range1);\n    const [rangeOffset2, rangeSize2] = reifyMapRange(size, range2);\n\n    const buffer = t.createBufferTracked({\n      mappedAtCreation,\n      size,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.MAP_WRITE,\n    });\n\n    // If the buffer is not mappedAtCreation map it now.\n    if (!mappedAtCreation) {\n      await buffer.mapAsync(GPUMapMode.WRITE);\n    }\n\n    // Set the initial contents of the buffer.\n    const init = buffer.getMappedRange(...range1);\n\n    assert(init.byteLength === rangeSize1);\n    const expectedBuffer = new ArrayBuffer(size);\n    const expected = new Uint32Array(\n      expectedBuffer,\n      rangeOffset1,\n      rangeSize1 / Uint32Array.BYTES_PER_ELEMENT\n    );\n    const data = new Uint32Array(init);\n    for (let i = 0; i < data.length; ++i) {\n      data[i] = expected[i] = i + 1;\n    }\n    buffer.unmap();\n\n    // Write to a second range of the buffer\n    await buffer.mapAsync(GPUMapMode.WRITE, ...range2);\n    const init2 = buffer.getMappedRange(...range2);\n\n    assert(init2.byteLength === rangeSize2);\n    const expected2 = new Uint32Array(\n      expectedBuffer,\n      rangeOffset2,\n      rangeSize2 / Uint32Array.BYTES_PER_ELEMENT\n    );\n    const data2 = new Uint32Array(init2);\n    for (let i = 0; i < data2.length; ++i) {\n      data2[i] = expected2[i] = 0;\n    }\n    buffer.unmap();\n\n    // Verify that the range of the buffer which was not overwritten was preserved.\n    t.expectGPUBufferValuesEqual(buffer, expected, rangeOffset1);\n  });\n\ng.test('mapAsync,read')\n  .desc(\n    `Use mappedAtCreation to initialize various ranges of variously-sized buffers, then\nmap-read and check the read-back result.`\n  )\n  .params(u =>\n    u\n      .combine('mapAsyncRegionLeft', mapRegionBoundModes)\n      .combine('mapAsyncRegionRight', mapRegionBoundModes)\n      .beginSubcases()\n      .combineWithParams(kSubcases)\n  )\n  .fn(async t => {\n    const { size, range } = t.params;\n    const [rangeOffset, rangeSize] = reifyMapRange(size, range);\n\n    const buffer = t.createBufferTracked({\n      mappedAtCreation: true,\n      size,\n      usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ,\n    });\n    const init = buffer.getMappedRange(...range);\n\n    assert(init.byteLength === rangeSize);\n    const expected = new Uint32Array(new ArrayBuffer(rangeSize));\n    const data = new Uint32Array(init);\n    for (let i = 0; i < data.length; ++i) {\n      data[i] = expected[i] = i + 1;\n    }\n    buffer.unmap();\n\n    const mapRegion = getRegionForMap(size, [rangeOffset, rangeSize], t.params);\n    await buffer.mapAsync(GPUMapMode.READ, ...mapRegion);\n    const actual = new Uint8Array(buffer.getMappedRange(...range));\n    t.expectOK(checkElementsEqual(actual, new Uint8Array(expected.buffer)));\n  });\n\ng.test('mapAsync,read,typedArrayAccess')\n  .desc(`Use various TypedArray types to read back from a mapped buffer`)\n  .params(u =>\n    u\n      .combine('mapAsyncRegionLeft', mapRegionBoundModes)\n      .combine('mapAsyncRegionRight', mapRegionBoundModes)\n      .beginSubcases()\n      .combineWithParams([\n        { size: 80, range: [] },\n        { size: 160, range: [] },\n        { size: 160, range: [0, 80] },\n        { size: 160, range: [80] },\n        { size: 160, range: [40, 120] },\n        { size: 160, range: [40] },\n      ] as const)\n  )\n  .fn(async t => {\n    const { size, range } = t.params;\n    const [rangeOffset, rangeSize] = reifyMapRange(size, range);\n\n    // Fill an array buffer with a variety of values of different types.\n    const expectedArrayBuffer = new ArrayBuffer(80);\n    const uint8Expected = new Uint8Array(expectedArrayBuffer, 0, 2);\n    uint8Expected[0] = 1;\n    uint8Expected[1] = 255;\n\n    const int8Expected = new Int8Array(expectedArrayBuffer, 2, 2);\n    int8Expected[0] = -1;\n    int8Expected[1] = 127;\n\n    const uint16Expected = new Uint16Array(expectedArrayBuffer, 4, 2);\n    uint16Expected[0] = 1;\n    uint16Expected[1] = 65535;\n\n    const int16Expected = new Int16Array(expectedArrayBuffer, 8, 2);\n    int16Expected[0] = -1;\n    int16Expected[1] = 32767;\n\n    const uint32Expected = new Uint32Array(expectedArrayBuffer, 12, 2);\n    uint32Expected[0] = 1;\n    uint32Expected[1] = 4294967295;\n\n    const int32Expected = new Int32Array(expectedArrayBuffer, 20, 2);\n    int32Expected[2] = -1;\n    int32Expected[3] = 2147483647;\n\n    const float32Expected = new Float32Array(expectedArrayBuffer, 28, 3);\n    float32Expected[0] = 1;\n    float32Expected[1] = -1;\n    float32Expected[2] = 12345.6789;\n\n    const float64Expected = new Float64Array(expectedArrayBuffer, 40, 5);\n    float64Expected[0] = 1;\n    float64Expected[1] = -1;\n    float64Expected[2] = 12345.6789;\n    float64Expected[3] = Number.MAX_VALUE;\n    float64Expected[4] = Number.MIN_VALUE;\n\n    const buffer = t.createBufferTracked({\n      mappedAtCreation: true,\n      size,\n      usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ,\n    });\n    const init = buffer.getMappedRange(...range);\n\n    // Copy the expected values into the mapped range.\n    assert(init.byteLength === rangeSize);\n    memcpy({ src: expectedArrayBuffer }, { dst: init });\n    buffer.unmap();\n\n    const mapRegion = getRegionForMap(size, [rangeOffset, rangeSize], t.params);\n    await buffer.mapAsync(GPUMapMode.READ, ...mapRegion);\n    const mappedArrayBuffer = buffer.getMappedRange(...range);\n    t.expectOK(checkElementsEqual(new Uint8Array(mappedArrayBuffer, 0, 2), uint8Expected));\n    t.expectOK(checkElementsEqual(new Int8Array(mappedArrayBuffer, 2, 2), int8Expected));\n    t.expectOK(checkElementsEqual(new Uint16Array(mappedArrayBuffer, 4, 2), uint16Expected));\n    t.expectOK(checkElementsEqual(new Int16Array(mappedArrayBuffer, 8, 2), int16Expected));\n    t.expectOK(checkElementsEqual(new Uint32Array(mappedArrayBuffer, 12, 2), uint32Expected));\n    t.expectOK(checkElementsEqual(new Int32Array(mappedArrayBuffer, 20, 2), int32Expected));\n    t.expectOK(checkElementsEqual(new Float32Array(mappedArrayBuffer, 28, 3), float32Expected));\n    t.expectOK(checkElementsEqual(new Float64Array(mappedArrayBuffer, 40, 5), float64Expected));\n  });\n\ng.test('mappedAtCreation')\n  .desc(\n    `Use mappedAtCreation to write to various ranges of variously-sized buffers created either\nwith or without the MAP_WRITE usage (since this could affect the mappedAtCreation upload path),\nthen expectContents (which does copyBufferToBuffer + map-read) to ensure the contents were written.`\n  )\n  .params(u =>\n    u //\n      .combine('mappable', [false, true])\n      .beginSubcases()\n      .combineWithParams(kSubcases)\n  )\n  .fn(t => {\n    const { size, range, mappable } = t.params;\n    const [, rangeSize] = reifyMapRange(size, range);\n\n    const buffer = t.createBufferTracked({\n      mappedAtCreation: true,\n      size,\n      usage: GPUBufferUsage.COPY_SRC | (mappable ? GPUBufferUsage.MAP_WRITE : 0),\n    });\n    const arrayBuffer = buffer.getMappedRange(...range);\n    t.checkMapWrite(buffer, range[0] ?? 0, arrayBuffer, rangeSize);\n  });\n\ng.test('remapped_for_write')\n  .desc(\n    `Use mappedAtCreation or mapAsync to write to various ranges of variously-sized buffers created\nwith the MAP_WRITE usage, then mapAsync again and ensure that the previously written values are\nstill present in the mapped buffer.`\n  )\n  .params(u =>\n    u //\n      .combine('mapAsyncRegionLeft', mapRegionBoundModes)\n      .combine('mapAsyncRegionRight', mapRegionBoundModes)\n      .beginSubcases()\n      .combine('mappedAtCreation', [false, true])\n      .combineWithParams(kSubcases)\n  )\n  .fn(async t => {\n    const { size, range, mappedAtCreation } = t.params;\n    const [rangeOffset, rangeSize] = reifyMapRange(size, range);\n\n    const buffer = t.createBufferTracked({\n      mappedAtCreation,\n      size,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.MAP_WRITE,\n    });\n\n    // If the buffer is not mappedAtCreation map it now.\n    if (!mappedAtCreation) {\n      await buffer.mapAsync(GPUMapMode.WRITE);\n    }\n\n    // Set the initial contents of the buffer.\n    const init = buffer.getMappedRange(...range);\n\n    assert(init.byteLength === rangeSize);\n    const expected = new Uint32Array(new ArrayBuffer(rangeSize));\n    const data = new Uint32Array(init);\n    for (let i = 0; i < data.length; ++i) {\n      data[i] = expected[i] = i + 1;\n    }\n    buffer.unmap();\n\n    // Check that upon remapping the for WRITE the values in the buffer are\n    // still the same.\n    const mapRegion = getRegionForMap(size, [rangeOffset, rangeSize], t.params);\n    await buffer.mapAsync(GPUMapMode.WRITE, ...mapRegion);\n    const actual = new Uint8Array(buffer.getMappedRange(...range));\n    t.expectOK(checkElementsEqual(actual, new Uint8Array(expected.buffer)));\n  });\n\ng.test('mappedAtCreation,mapState')\n  .desc('Test that exposed map state of buffer created with mappedAtCreation has expected values.')\n  .params(u =>\n    u\n      .combine('usageType', ['invalid', 'read', 'write'])\n      .combine('afterUnmap', [false, true])\n      .combine('afterDestroy', [false, true])\n  )\n  .fn(t => {\n    const { usageType, afterUnmap, afterDestroy } = t.params;\n    const usage =\n      usageType === 'read'\n        ? GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ\n        : usageType === 'write'\n        ? GPUBufferUsage.COPY_SRC | GPUBufferUsage.MAP_WRITE\n        : 0;\n    const validationError = usage === 0;\n    const size = 8;\n    const range = [0, 8];\n\n    let buffer: GPUBuffer;\n    t.expectValidationError(() => {\n      buffer = t.createBufferTracked({\n        mappedAtCreation: true,\n        size,\n        usage,\n      });\n    }, validationError);\n\n    // mapState must be \"mapped\" regardless of validation error\n    t.expect(buffer!.mapState === 'mapped');\n\n    // getMappedRange must not change the map state\n    buffer!.getMappedRange(...range);\n    t.expect(buffer!.mapState === 'mapped');\n\n    if (afterUnmap) {\n      buffer!.unmap();\n      t.expect(buffer!.mapState === 'unmapped');\n    }\n\n    if (afterDestroy) {\n      buffer!.destroy();\n      t.expect(buffer!.mapState === 'unmapped');\n    }\n  });\n\ng.test('mapAsync,mapState')\n  .desc('Test that exposed map state of buffer mapped with mapAsync has expected values.')\n  .params(u =>\n    u\n      .combine('usageType', ['invalid', 'read', 'write'])\n      .combine('mapModeType', ['READ', 'WRITE'] as const)\n      .combine('beforeUnmap', [false, true])\n      .combine('beforeDestroy', [false, true])\n      .combine('afterUnmap', [false, true])\n      .combine('afterDestroy', [false, true])\n  )\n  .fn(async t => {\n    const { usageType, mapModeType, beforeUnmap, beforeDestroy, afterUnmap, afterDestroy } =\n      t.params;\n    const size = 8;\n    const range = [0, 8];\n    const usage =\n      usageType === 'read'\n        ? GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ\n        : usageType === 'write'\n        ? GPUBufferUsage.COPY_SRC | GPUBufferUsage.MAP_WRITE\n        : 0;\n    const bufferCreationValidationError = usage === 0;\n    const mapMode = GPUMapMode[mapModeType];\n\n    let buffer: GPUBuffer;\n    t.expectValidationError(() => {\n      buffer = t.createBufferTracked({\n        mappedAtCreation: false,\n        size,\n        usage,\n      });\n    }, bufferCreationValidationError);\n\n    t.expect(buffer!.mapState === 'unmapped');\n\n    {\n      const mapAsyncValidationError =\n        bufferCreationValidationError ||\n        (mapMode === GPUMapMode.READ && !(usage & GPUBufferUsage.MAP_READ)) ||\n        (mapMode === GPUMapMode.WRITE && !(usage & GPUBufferUsage.MAP_WRITE));\n      let promise: Promise<void>;\n      t.expectValidationError(() => {\n        promise = buffer!.mapAsync(mapMode);\n      }, mapAsyncValidationError);\n      t.expect(buffer!.mapState === 'pending');\n\n      try {\n        if (beforeUnmap) {\n          buffer!.unmap();\n          t.expect(buffer!.mapState === 'unmapped');\n        }\n        if (beforeDestroy) {\n          buffer!.destroy();\n          t.expect(buffer!.mapState === 'unmapped');\n        }\n\n        await promise!;\n        t.expect(buffer!.mapState === 'mapped');\n\n        // getMappedRange must not change the map state\n        buffer!.getMappedRange(...range);\n        t.expect(buffer!.mapState === 'mapped');\n      } catch {\n        // unmapped before resolve, destroyed before resolve, or mapAsync validation error\n        // will end up with rejection and 'unmapped'\n        t.expect(buffer!.mapState === 'unmapped');\n      }\n    }\n\n    // If buffer is already mapped test mapAsync on already mapped buffer\n    if (buffer!.mapState === 'mapped') {\n      // mapAsync on already mapped buffer must be rejected with a validation error\n      // and the map state must keep 'mapped'\n      let promise: Promise<void>;\n      t.expectValidationError(() => {\n        promise = buffer!.mapAsync(GPUMapMode.WRITE);\n      }, true);\n      t.expect(buffer!.mapState === 'mapped');\n\n      try {\n        await promise!;\n        t.fail('mapAsync on already mapped buffer must not succeed.');\n      } catch {\n        t.expect(buffer!.mapState === 'mapped');\n      }\n    }\n\n    if (afterUnmap) {\n      buffer!.unmap();\n      t.expect(buffer!.mapState === 'unmapped');\n    }\n\n    if (afterDestroy) {\n      buffer!.destroy();\n      t.expect(buffer!.mapState === 'unmapped');\n    }\n  });\n"],"mappings":";;GAAA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAED,SAASC,aAAa,QAAQ,4CAA4C;AAC1E,SAASC,MAAM,EAAEC,MAAM,QAAQ,iCAAiC;AAChE,SAASC,kBAAkB,QAAQ,iCAAiC;;AAEpE,SAASC,WAAW,QAAQ,mBAAmB;;AAE/C,OAAO,MAAMC,CAAC,GAAGL,aAAa,CAACI,WAAW,CAAC;;AAE3C,MAAME,SAAS,GAAG;AAChB,EAAEC,IAAI,EAAE,CAAC,EAAEC,KAAK,EAAE,EAAE,CAAC,CAAC;AACtB,EAAED,IAAI,EAAE,CAAC,EAAEC,KAAK,EAAE,CAACC,SAAS,CAAC,CAAC,CAAC;AAC/B,EAAEF,IAAI,EAAE,CAAC,EAAEC,KAAK,EAAE,CAACC,SAAS,EAAEA,SAAS,CAAC,CAAC,CAAC;AAC1C,EAAEF,IAAI,EAAE,CAAC,EAAEC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACvB,EAAED,IAAI,EAAE,CAAC,EAAEC,KAAK,EAAE,CAAC,CAAC,EAAEC,SAAS,CAAC,CAAC,CAAC;AAClC,EAAEF,IAAI,EAAE,CAAC,EAAEC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAC1B,EAAED,IAAI,EAAE,EAAE,EAAEC,KAAK,EAAE,EAAE,CAAC,CAAC;AACvB,EAAED,IAAI,EAAE,EAAE,EAAEC,KAAK,EAAE,CAACC,SAAS,CAAC,CAAC,CAAC;AAChC,EAAEF,IAAI,EAAE,EAAE,EAAEC,KAAK,EAAE,CAACC,SAAS,EAAEA,SAAS,CAAC,CAAC,CAAC;AAC3C,EAAEF,IAAI,EAAE,EAAE,EAAEC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,EAAED,IAAI,EAAE,EAAE,EAAEC,KAAK,EAAE,CAAC,CAAC,EAAEC,SAAS,CAAC,CAAC,CAAC;AACnC,EAAEF,IAAI,EAAE,EAAE,EAAEC,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;AAC5B,EAAED,IAAI,EAAE,EAAE,EAAEC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAC3B,EAAED,IAAI,EAAE,EAAE,EAAEC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACxB,EAAED,IAAI,EAAE,EAAE,EAAEC,KAAK,EAAE,CAAC,CAAC,EAAEC,SAAS,CAAC,CAAC,CAAC;AACnC,EAAEF,IAAI,EAAE,EAAE,EAAEC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAC3B,EAAED,IAAI,EAAE,EAAE,EAAEC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAC3B,EAAED,IAAI,EAAE,EAAE,EAAEC,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;AAC5B,EAAED,IAAI,EAAE,GAAG,GAAG,IAAI,EAAEC,KAAK,EAAE,EAAE,CAAC,CAAC,CACvB;;;AAEV,SAASE,aAAaA,CAACC,UAAkB,EAAEH,KAAkC,EAAoB;EAC/F,MAAMI,MAAM,GAAGJ,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;EAC5B,OAAO,CAACI,MAAM,EAAEJ,KAAK,CAAC,CAAC,CAAC,IAAIG,UAAU,GAAGC,MAAM,CAAC;AAClD;;AAEA,MAAMC,mBAAmB,GAAG,CAAC,gBAAgB,EAAE,iBAAiB,EAAE,SAAS,CAAU;;;AAGrF,SAASC,eAAeA;AACtBH,UAAkB;AAClBH,KAAuB;AACvB;EACEO,kBAAkB;EAClBC;;;;AAIF,CAAC;AACD;EACA,MAAMC,UAAU,GAAGF,kBAAkB,KAAK,SAAS,GAAGP,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC;EAClE,MAAMU,WAAW,GAAGF,mBAAmB,KAAK,SAAS,GAAGR,KAAK,CAAC,CAAC,CAAC,GAAGA,KAAK,CAAC,CAAC,CAAC,GAAGG,UAAU;EACxF,OAAO;EACLI,kBAAkB,KAAK,gBAAgB,GAAGN,SAAS,GAAGQ,UAAU;EAChED,mBAAmB,KAAK,gBAAgB,GAAGP,SAAS,GAAGS,WAAW,GAAGD,UAAU,CAChF;;AACH;;AAEAZ,CAAC,CAACc,IAAI,CAAC,gBAAgB,CAAC;AACrBC,IAAI;EACF;AACL;AACE,CAAC;AACAC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,oBAAoB,EAAEV,mBAAmB,CAAC;AAClDU,OAAO,CAAC,qBAAqB,EAAEV,mBAAmB,CAAC;AACnDW,aAAa,CAAC,CAAC;AACfC,iBAAiB,CAACnB,SAAS;AAChC,CAAC;AACAoB,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,MAAM,EAAEpB,IAAI,EAAEC,KAAK,CAAC,CAAC,GAAGmB,CAAC,CAACN,MAAM;EAChC,MAAM,CAACO,WAAW,EAAEC,SAAS,CAAC,GAAGnB,aAAa,CAACH,IAAI,EAAEC,KAAK,CAAC;;EAE3D,MAAMsB,MAAM,GAAGH,CAAC,CAACI,mBAAmB,CAAC;IACnCxB,IAAI;IACJyB,KAAK,EAAEC,cAAc,CAACC,QAAQ,GAAGD,cAAc,CAACE;EAClD,CAAC,CAAC;;EAEF,MAAMC,SAAS,GAAGtB,eAAe,CAACP,IAAI,EAAE,CAACqB,WAAW,EAAEC,SAAS,CAAC,EAAEF,CAAC,CAACN,MAAM,CAAC;EAC3E,MAAMS,MAAM,CAACO,QAAQ,CAACC,UAAU,CAACC,KAAK,EAAE,GAAGH,SAAS,CAAC;EACrD,MAAMI,WAAW,GAAGV,MAAM,CAACW,cAAc,CAAC,GAAGjC,KAAK,CAAC;EACnDmB,CAAC,CAACe,aAAa,CAACZ,MAAM,EAAEF,WAAW,EAAEY,WAAW,EAAEX,SAAS,CAAC;AAC9D,CAAC,CAAC;;AAEJxB,CAAC,CAACc,IAAI,CAAC,2CAA2C,CAAC;AAChDC,IAAI;EACF;AACL;AACA;AACA;AACE,CAAC;AACAC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEE,aAAa,CAAC,CAAC;AACfD,OAAO,CAAC,kBAAkB,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;AAC1CE,iBAAiB,CAAC;AACjB,EAAElB,IAAI,EAAE,EAAE,EAAEoC,MAAM,EAAE,EAAE,EAAEC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACrC,EAAErC,IAAI,EAAE,EAAE,EAAEoC,MAAM,EAAE,EAAE,EAAEC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACxC,EAAErC,IAAI,EAAE,EAAE,EAAEoC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAEC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC,EAAErC,IAAI,EAAE,EAAE,EAAEoC,MAAM,EAAE,CAAC,CAAC,CAAC,EAAEC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACzC,EAAErC,IAAI,EAAE,EAAE,EAAEoC,MAAM,EAAE,EAAE,EAAEC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACxC,EAAErC,IAAI,EAAE,EAAE,EAAEoC,MAAM,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAEC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;AAC9C,EAAErC,IAAI,EAAE,EAAE,EAAEoC,MAAM,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAEC,MAAM,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;AAC/C,EAAErC,IAAI,EAAE,EAAE,EAAEoC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAEC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;AACrC;AACd,CAAC;AACAlB,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,MAAM,EAAEpB,IAAI,EAAEoC,MAAM,EAAEC,MAAM,EAAEC,gBAAgB,CAAC,CAAC,GAAGlB,CAAC,CAACN,MAAM;EAC3D,MAAM,CAACyB,YAAY,EAAEC,UAAU,CAAC,GAAGrC,aAAa,CAACH,IAAI,EAAEoC,MAAM,CAAC;EAC9D,MAAM,CAACK,YAAY,EAAEC,UAAU,CAAC,GAAGvC,aAAa,CAACH,IAAI,EAAEqC,MAAM,CAAC;;EAE9D,MAAMd,MAAM,GAAGH,CAAC,CAACI,mBAAmB,CAAC;IACnCc,gBAAgB;IAChBtC,IAAI;IACJyB,KAAK,EAAEC,cAAc,CAACC,QAAQ,GAAGD,cAAc,CAACE;EAClD,CAAC,CAAC;;EAEF;EACA,IAAI,CAACU,gBAAgB,EAAE;IACrB,MAAMf,MAAM,CAACO,QAAQ,CAACC,UAAU,CAACC,KAAK,CAAC;EACzC;;EAEA;EACA,MAAMW,IAAI,GAAGpB,MAAM,CAACW,cAAc,CAAC,GAAGE,MAAM,CAAC;;EAE7C1C,MAAM,CAACiD,IAAI,CAACC,UAAU,KAAKJ,UAAU,CAAC;EACtC,MAAMK,cAAc,GAAG,IAAIC,WAAW,CAAC9C,IAAI,CAAC;EAC5C,MAAM+C,QAAQ,GAAG,IAAIC,WAAW;IAC9BH,cAAc;IACdN,YAAY;IACZC,UAAU,GAAGQ,WAAW,CAACC;EAC3B,CAAC;EACD,MAAMC,IAAI,GAAG,IAAIF,WAAW,CAACL,IAAI,CAAC;EAClC,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,IAAI,CAACE,MAAM,EAAE,EAAED,CAAC,EAAE;IACpCD,IAAI,CAACC,CAAC,CAAC,GAAGJ,QAAQ,CAACI,CAAC,CAAC,GAAGA,CAAC,GAAG,CAAC;EAC/B;EACA5B,MAAM,CAAC8B,KAAK,CAAC,CAAC;;EAEd;EACA,MAAM9B,MAAM,CAACO,QAAQ,CAACC,UAAU,CAACC,KAAK,EAAE,GAAGK,MAAM,CAAC;EAClD,MAAMiB,KAAK,GAAG/B,MAAM,CAACW,cAAc,CAAC,GAAGG,MAAM,CAAC;;EAE9C3C,MAAM,CAAC4D,KAAK,CAACV,UAAU,KAAKF,UAAU,CAAC;EACvC,MAAMa,SAAS,GAAG,IAAIP,WAAW;IAC/BH,cAAc;IACdJ,YAAY;IACZC,UAAU,GAAGM,WAAW,CAACC;EAC3B,CAAC;EACD,MAAMO,KAAK,GAAG,IAAIR,WAAW,CAACM,KAAK,CAAC;EACpC,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGK,KAAK,CAACJ,MAAM,EAAE,EAAED,CAAC,EAAE;IACrCK,KAAK,CAACL,CAAC,CAAC,GAAGI,SAAS,CAACJ,CAAC,CAAC,GAAG,CAAC;EAC7B;EACA5B,MAAM,CAAC8B,KAAK,CAAC,CAAC;;EAEd;EACAjC,CAAC,CAACqC,0BAA0B,CAAClC,MAAM,EAAEwB,QAAQ,EAAER,YAAY,CAAC;AAC9D,CAAC,CAAC;;AAEJzC,CAAC,CAACc,IAAI,CAAC,eAAe,CAAC;AACpBC,IAAI;EACF;AACL;AACE,CAAC;AACAC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,oBAAoB,EAAEV,mBAAmB,CAAC;AAClDU,OAAO,CAAC,qBAAqB,EAAEV,mBAAmB,CAAC;AACnDW,aAAa,CAAC,CAAC;AACfC,iBAAiB,CAACnB,SAAS;AAChC,CAAC;AACAoB,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,MAAM,EAAEpB,IAAI,EAAEC,KAAK,CAAC,CAAC,GAAGmB,CAAC,CAACN,MAAM;EAChC,MAAM,CAACO,WAAW,EAAEC,SAAS,CAAC,GAAGnB,aAAa,CAACH,IAAI,EAAEC,KAAK,CAAC;;EAE3D,MAAMsB,MAAM,GAAGH,CAAC,CAACI,mBAAmB,CAAC;IACnCc,gBAAgB,EAAE,IAAI;IACtBtC,IAAI;IACJyB,KAAK,EAAEC,cAAc,CAACgC,QAAQ,GAAGhC,cAAc,CAACiC;EAClD,CAAC,CAAC;EACF,MAAMhB,IAAI,GAAGpB,MAAM,CAACW,cAAc,CAAC,GAAGjC,KAAK,CAAC;;EAE5CP,MAAM,CAACiD,IAAI,CAACC,UAAU,KAAKtB,SAAS,CAAC;EACrC,MAAMyB,QAAQ,GAAG,IAAIC,WAAW,CAAC,IAAIF,WAAW,CAACxB,SAAS,CAAC,CAAC;EAC5D,MAAM4B,IAAI,GAAG,IAAIF,WAAW,CAACL,IAAI,CAAC;EAClC,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,IAAI,CAACE,MAAM,EAAE,EAAED,CAAC,EAAE;IACpCD,IAAI,CAACC,CAAC,CAAC,GAAGJ,QAAQ,CAACI,CAAC,CAAC,GAAGA,CAAC,GAAG,CAAC;EAC/B;EACA5B,MAAM,CAAC8B,KAAK,CAAC,CAAC;;EAEd,MAAMxB,SAAS,GAAGtB,eAAe,CAACP,IAAI,EAAE,CAACqB,WAAW,EAAEC,SAAS,CAAC,EAAEF,CAAC,CAACN,MAAM,CAAC;EAC3E,MAAMS,MAAM,CAACO,QAAQ,CAACC,UAAU,CAAC6B,IAAI,EAAE,GAAG/B,SAAS,CAAC;EACpD,MAAMgC,MAAM,GAAG,IAAIC,UAAU,CAACvC,MAAM,CAACW,cAAc,CAAC,GAAGjC,KAAK,CAAC,CAAC;EAC9DmB,CAAC,CAAC2C,QAAQ,CAACnE,kBAAkB,CAACiE,MAAM,EAAE,IAAIC,UAAU,CAACf,QAAQ,CAACxB,MAAM,CAAC,CAAC,CAAC;AACzE,CAAC,CAAC;;AAEJzB,CAAC,CAACc,IAAI,CAAC,gCAAgC,CAAC;AACrCC,IAAI,CAAE,gEAA+D,CAAC;AACtEC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,oBAAoB,EAAEV,mBAAmB,CAAC;AAClDU,OAAO,CAAC,qBAAqB,EAAEV,mBAAmB,CAAC;AACnDW,aAAa,CAAC,CAAC;AACfC,iBAAiB,CAAC;AACjB,EAAElB,IAAI,EAAE,EAAE,EAAEC,KAAK,EAAE,EAAE,CAAC,CAAC;AACvB,EAAED,IAAI,EAAE,GAAG,EAAEC,KAAK,EAAE,EAAE,CAAC,CAAC;AACxB,EAAED,IAAI,EAAE,GAAG,EAAEC,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;AAC7B,EAAED,IAAI,EAAE,GAAG,EAAEC,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAC1B,EAAED,IAAI,EAAE,GAAG,EAAEC,KAAK,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC;AAC/B,EAAED,IAAI,EAAE,GAAG,EAAEC,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAClB;AACd,CAAC;AACAkB,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,MAAM,EAAEpB,IAAI,EAAEC,KAAK,CAAC,CAAC,GAAGmB,CAAC,CAACN,MAAM;EAChC,MAAM,CAACO,WAAW,EAAEC,SAAS,CAAC,GAAGnB,aAAa,CAACH,IAAI,EAAEC,KAAK,CAAC;;EAE3D;EACA,MAAM+D,mBAAmB,GAAG,IAAIlB,WAAW,CAAC,EAAE,CAAC;EAC/C,MAAMmB,aAAa,GAAG,IAAIH,UAAU,CAACE,mBAAmB,EAAE,CAAC,EAAE,CAAC,CAAC;EAC/DC,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC;EACpBA,aAAa,CAAC,CAAC,CAAC,GAAG,GAAG;;EAEtB,MAAMC,YAAY,GAAG,IAAIC,SAAS,CAACH,mBAAmB,EAAE,CAAC,EAAE,CAAC,CAAC;EAC7DE,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACpBA,YAAY,CAAC,CAAC,CAAC,GAAG,GAAG;;EAErB,MAAME,cAAc,GAAG,IAAIC,WAAW,CAACL,mBAAmB,EAAE,CAAC,EAAE,CAAC,CAAC;EACjEI,cAAc,CAAC,CAAC,CAAC,GAAG,CAAC;EACrBA,cAAc,CAAC,CAAC,CAAC,GAAG,KAAK;;EAEzB,MAAME,aAAa,GAAG,IAAIC,UAAU,CAACP,mBAAmB,EAAE,CAAC,EAAE,CAAC,CAAC;EAC/DM,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACrBA,aAAa,CAAC,CAAC,CAAC,GAAG,KAAK;;EAExB,MAAME,cAAc,GAAG,IAAIxB,WAAW,CAACgB,mBAAmB,EAAE,EAAE,EAAE,CAAC,CAAC;EAClEQ,cAAc,CAAC,CAAC,CAAC,GAAG,CAAC;EACrBA,cAAc,CAAC,CAAC,CAAC,GAAG,UAAU;;EAE9B,MAAMC,aAAa,GAAG,IAAIC,UAAU,CAACV,mBAAmB,EAAE,EAAE,EAAE,CAAC,CAAC;EAChES,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACrBA,aAAa,CAAC,CAAC,CAAC,GAAG,UAAU;;EAE7B,MAAME,eAAe,GAAG,IAAIC,YAAY,CAACZ,mBAAmB,EAAE,EAAE,EAAE,CAAC,CAAC;EACpEW,eAAe,CAAC,CAAC,CAAC,GAAG,CAAC;EACtBA,eAAe,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACvBA,eAAe,CAAC,CAAC,CAAC,GAAG,UAAU;;EAE/B,MAAME,eAAe,GAAG,IAAIC,YAAY,CAACd,mBAAmB,EAAE,EAAE,EAAE,CAAC,CAAC;EACpEa,eAAe,CAAC,CAAC,CAAC,GAAG,CAAC;EACtBA,eAAe,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACvBA,eAAe,CAAC,CAAC,CAAC,GAAG,UAAU;EAC/BA,eAAe,CAAC,CAAC,CAAC,GAAGE,MAAM,CAACC,SAAS;EACrCH,eAAe,CAAC,CAAC,CAAC,GAAGE,MAAM,CAACE,SAAS;;EAErC,MAAM1D,MAAM,GAAGH,CAAC,CAACI,mBAAmB,CAAC;IACnCc,gBAAgB,EAAE,IAAI;IACtBtC,IAAI;IACJyB,KAAK,EAAEC,cAAc,CAACgC,QAAQ,GAAGhC,cAAc,CAACiC;EAClD,CAAC,CAAC;EACF,MAAMhB,IAAI,GAAGpB,MAAM,CAACW,cAAc,CAAC,GAAGjC,KAAK,CAAC;;EAE5C;EACAP,MAAM,CAACiD,IAAI,CAACC,UAAU,KAAKtB,SAAS,CAAC;EACrC3B,MAAM,CAAC,EAAEuF,GAAG,EAAElB,mBAAmB,CAAC,CAAC,EAAE,EAAEmB,GAAG,EAAExC,IAAI,CAAC,CAAC,CAAC;EACnDpB,MAAM,CAAC8B,KAAK,CAAC,CAAC;;EAEd,MAAMxB,SAAS,GAAGtB,eAAe,CAACP,IAAI,EAAE,CAACqB,WAAW,EAAEC,SAAS,CAAC,EAAEF,CAAC,CAACN,MAAM,CAAC;EAC3E,MAAMS,MAAM,CAACO,QAAQ,CAACC,UAAU,CAAC6B,IAAI,EAAE,GAAG/B,SAAS,CAAC;EACpD,MAAMuD,iBAAiB,GAAG7D,MAAM,CAACW,cAAc,CAAC,GAAGjC,KAAK,CAAC;EACzDmB,CAAC,CAAC2C,QAAQ,CAACnE,kBAAkB,CAAC,IAAIkE,UAAU,CAACsB,iBAAiB,EAAE,CAAC,EAAE,CAAC,CAAC,EAAEnB,aAAa,CAAC,CAAC;EACtF7C,CAAC,CAAC2C,QAAQ,CAACnE,kBAAkB,CAAC,IAAIuE,SAAS,CAACiB,iBAAiB,EAAE,CAAC,EAAE,CAAC,CAAC,EAAElB,YAAY,CAAC,CAAC;EACpF9C,CAAC,CAAC2C,QAAQ,CAACnE,kBAAkB,CAAC,IAAIyE,WAAW,CAACe,iBAAiB,EAAE,CAAC,EAAE,CAAC,CAAC,EAAEhB,cAAc,CAAC,CAAC;EACxFhD,CAAC,CAAC2C,QAAQ,CAACnE,kBAAkB,CAAC,IAAI2E,UAAU,CAACa,iBAAiB,EAAE,CAAC,EAAE,CAAC,CAAC,EAAEd,aAAa,CAAC,CAAC;EACtFlD,CAAC,CAAC2C,QAAQ,CAACnE,kBAAkB,CAAC,IAAIoD,WAAW,CAACoC,iBAAiB,EAAE,EAAE,EAAE,CAAC,CAAC,EAAEZ,cAAc,CAAC,CAAC;EACzFpD,CAAC,CAAC2C,QAAQ,CAACnE,kBAAkB,CAAC,IAAI8E,UAAU,CAACU,iBAAiB,EAAE,EAAE,EAAE,CAAC,CAAC,EAAEX,aAAa,CAAC,CAAC;EACvFrD,CAAC,CAAC2C,QAAQ,CAACnE,kBAAkB,CAAC,IAAIgF,YAAY,CAACQ,iBAAiB,EAAE,EAAE,EAAE,CAAC,CAAC,EAAET,eAAe,CAAC,CAAC;EAC3FvD,CAAC,CAAC2C,QAAQ,CAACnE,kBAAkB,CAAC,IAAIkF,YAAY,CAACM,iBAAiB,EAAE,EAAE,EAAE,CAAC,CAAC,EAAEP,eAAe,CAAC,CAAC;AAC7F,CAAC,CAAC;;AAEJ/E,CAAC,CAACc,IAAI,CAAC,kBAAkB,CAAC;AACvBC,IAAI;EACF;AACL;AACA;AACE,CAAC;AACAC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC,CAAC;AAAA,CACCC,OAAO,CAAC,UAAU,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;AAClCC,aAAa,CAAC,CAAC;AACfC,iBAAiB,CAACnB,SAAS;AAChC,CAAC;AACAoB,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAM,EAAEpB,IAAI,EAAEC,KAAK,EAAEoF,QAAQ,CAAC,CAAC,GAAGjE,CAAC,CAACN,MAAM;EAC1C,MAAM,GAAGQ,SAAS,CAAC,GAAGnB,aAAa,CAACH,IAAI,EAAEC,KAAK,CAAC;;EAEhD,MAAMsB,MAAM,GAAGH,CAAC,CAACI,mBAAmB,CAAC;IACnCc,gBAAgB,EAAE,IAAI;IACtBtC,IAAI;IACJyB,KAAK,EAAEC,cAAc,CAACC,QAAQ,IAAI0D,QAAQ,GAAG3D,cAAc,CAACE,SAAS,GAAG,CAAC;EAC3E,CAAC,CAAC;EACF,MAAMK,WAAW,GAAGV,MAAM,CAACW,cAAc,CAAC,GAAGjC,KAAK,CAAC;EACnDmB,CAAC,CAACe,aAAa,CAACZ,MAAM,EAAEtB,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,EAAEgC,WAAW,EAAEX,SAAS,CAAC;AAChE,CAAC,CAAC;;AAEJxB,CAAC,CAACc,IAAI,CAAC,oBAAoB,CAAC;AACzBC,IAAI;EACF;AACL;AACA;AACE,CAAC;AACAC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC,CAAC;AAAA,CACCC,OAAO,CAAC,oBAAoB,EAAEV,mBAAmB,CAAC;AAClDU,OAAO,CAAC,qBAAqB,EAAEV,mBAAmB,CAAC;AACnDW,aAAa,CAAC,CAAC;AACfD,OAAO,CAAC,kBAAkB,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;AAC1CE,iBAAiB,CAACnB,SAAS;AAChC,CAAC;AACAoB,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,MAAM,EAAEpB,IAAI,EAAEC,KAAK,EAAEqC,gBAAgB,CAAC,CAAC,GAAGlB,CAAC,CAACN,MAAM;EAClD,MAAM,CAACO,WAAW,EAAEC,SAAS,CAAC,GAAGnB,aAAa,CAACH,IAAI,EAAEC,KAAK,CAAC;;EAE3D,MAAMsB,MAAM,GAAGH,CAAC,CAACI,mBAAmB,CAAC;IACnCc,gBAAgB;IAChBtC,IAAI;IACJyB,KAAK,EAAEC,cAAc,CAACC,QAAQ,GAAGD,cAAc,CAACE;EAClD,CAAC,CAAC;;EAEF;EACA,IAAI,CAACU,gBAAgB,EAAE;IACrB,MAAMf,MAAM,CAACO,QAAQ,CAACC,UAAU,CAACC,KAAK,CAAC;EACzC;;EAEA;EACA,MAAMW,IAAI,GAAGpB,MAAM,CAACW,cAAc,CAAC,GAAGjC,KAAK,CAAC;;EAE5CP,MAAM,CAACiD,IAAI,CAACC,UAAU,KAAKtB,SAAS,CAAC;EACrC,MAAMyB,QAAQ,GAAG,IAAIC,WAAW,CAAC,IAAIF,WAAW,CAACxB,SAAS,CAAC,CAAC;EAC5D,MAAM4B,IAAI,GAAG,IAAIF,WAAW,CAACL,IAAI,CAAC;EAClC,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,IAAI,CAACE,MAAM,EAAE,EAAED,CAAC,EAAE;IACpCD,IAAI,CAACC,CAAC,CAAC,GAAGJ,QAAQ,CAACI,CAAC,CAAC,GAAGA,CAAC,GAAG,CAAC;EAC/B;EACA5B,MAAM,CAAC8B,KAAK,CAAC,CAAC;;EAEd;EACA;EACA,MAAMxB,SAAS,GAAGtB,eAAe,CAACP,IAAI,EAAE,CAACqB,WAAW,EAAEC,SAAS,CAAC,EAAEF,CAAC,CAACN,MAAM,CAAC;EAC3E,MAAMS,MAAM,CAACO,QAAQ,CAACC,UAAU,CAACC,KAAK,EAAE,GAAGH,SAAS,CAAC;EACrD,MAAMgC,MAAM,GAAG,IAAIC,UAAU,CAACvC,MAAM,CAACW,cAAc,CAAC,GAAGjC,KAAK,CAAC,CAAC;EAC9DmB,CAAC,CAAC2C,QAAQ,CAACnE,kBAAkB,CAACiE,MAAM,EAAE,IAAIC,UAAU,CAACf,QAAQ,CAACxB,MAAM,CAAC,CAAC,CAAC;AACzE,CAAC,CAAC;;AAEJzB,CAAC,CAACc,IAAI,CAAC,2BAA2B,CAAC;AAChCC,IAAI,CAAC,0FAA0F,CAAC;AAChGC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,WAAW,EAAE,CAAC,SAAS,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;AAClDA,OAAO,CAAC,YAAY,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;AACpCA,OAAO,CAAC,cAAc,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;AAC1C,CAAC;AACAG,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAM,EAAEkE,SAAS,EAAEC,UAAU,EAAEC,YAAY,CAAC,CAAC,GAAGpE,CAAC,CAACN,MAAM;EACxD,MAAMW,KAAK;EACT6D,SAAS,KAAK,MAAM;EAChB5D,cAAc,CAACgC,QAAQ,GAAGhC,cAAc,CAACiC,QAAQ;EACjD2B,SAAS,KAAK,OAAO;EACrB5D,cAAc,CAACC,QAAQ,GAAGD,cAAc,CAACE,SAAS;EAClD,CAAC;EACP,MAAM6D,eAAe,GAAGhE,KAAK,KAAK,CAAC;EACnC,MAAMzB,IAAI,GAAG,CAAC;EACd,MAAMC,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;;EAEpB,IAAIsB,MAAiB;EACrBH,CAAC,CAACsE,qBAAqB,CAAC,MAAM;IAC5BnE,MAAM,GAAGH,CAAC,CAACI,mBAAmB,CAAC;MAC7Bc,gBAAgB,EAAE,IAAI;MACtBtC,IAAI;MACJyB;IACF,CAAC,CAAC;EACJ,CAAC,EAAEgE,eAAe,CAAC;;EAEnB;EACArE,CAAC,CAACuE,MAAM,CAACpE,MAAM,CAAEqE,QAAQ,KAAK,QAAQ,CAAC;;EAEvC;EACArE,MAAM,CAAEW,cAAc,CAAC,GAAGjC,KAAK,CAAC;EAChCmB,CAAC,CAACuE,MAAM,CAACpE,MAAM,CAAEqE,QAAQ,KAAK,QAAQ,CAAC;;EAEvC,IAAIL,UAAU,EAAE;IACdhE,MAAM,CAAE8B,KAAK,CAAC,CAAC;IACfjC,CAAC,CAACuE,MAAM,CAACpE,MAAM,CAAEqE,QAAQ,KAAK,UAAU,CAAC;EAC3C;;EAEA,IAAIJ,YAAY,EAAE;IAChBjE,MAAM,CAAEsE,OAAO,CAAC,CAAC;IACjBzE,CAAC,CAACuE,MAAM,CAACpE,MAAM,CAAEqE,QAAQ,KAAK,UAAU,CAAC;EAC3C;AACF,CAAC,CAAC;;AAEJ9F,CAAC,CAACc,IAAI,CAAC,mBAAmB,CAAC;AACxBC,IAAI,CAAC,iFAAiF,CAAC;AACvFC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,WAAW,EAAE,CAAC,SAAS,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;AAClDA,OAAO,CAAC,aAAa,EAAE,CAAC,MAAM,EAAE,OAAO,CAAU,CAAC;AAClDA,OAAO,CAAC,aAAa,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;AACrCA,OAAO,CAAC,eAAe,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;AACvCA,OAAO,CAAC,YAAY,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;AACpCA,OAAO,CAAC,cAAc,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;AAC1C,CAAC;AACAG,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,MAAM,EAAEkE,SAAS,EAAEQ,WAAW,EAAEC,WAAW,EAAEC,aAAa,EAAET,UAAU,EAAEC,YAAY,CAAC,CAAC;EACpFpE,CAAC,CAACN,MAAM;EACV,MAAMd,IAAI,GAAG,CAAC;EACd,MAAMC,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EACpB,MAAMwB,KAAK;EACT6D,SAAS,KAAK,MAAM;EAChB5D,cAAc,CAACgC,QAAQ,GAAGhC,cAAc,CAACiC,QAAQ;EACjD2B,SAAS,KAAK,OAAO;EACrB5D,cAAc,CAACC,QAAQ,GAAGD,cAAc,CAACE,SAAS;EAClD,CAAC;EACP,MAAMqE,6BAA6B,GAAGxE,KAAK,KAAK,CAAC;EACjD,MAAMyE,OAAO,GAAGnE,UAAU,CAAC+D,WAAW,CAAC;;EAEvC,IAAIvE,MAAiB;EACrBH,CAAC,CAACsE,qBAAqB,CAAC,MAAM;IAC5BnE,MAAM,GAAGH,CAAC,CAACI,mBAAmB,CAAC;MAC7Bc,gBAAgB,EAAE,KAAK;MACvBtC,IAAI;MACJyB;IACF,CAAC,CAAC;EACJ,CAAC,EAAEwE,6BAA6B,CAAC;;EAEjC7E,CAAC,CAACuE,MAAM,CAACpE,MAAM,CAAEqE,QAAQ,KAAK,UAAU,CAAC;;EAEzC;IACE,MAAMO,uBAAuB;IAC3BF,6BAA6B;IAC5BC,OAAO,KAAKnE,UAAU,CAAC6B,IAAI,IAAI,EAAEnC,KAAK,GAAGC,cAAc,CAACiC,QAAQ,CAAE;IAClEuC,OAAO,KAAKnE,UAAU,CAACC,KAAK,IAAI,EAAEP,KAAK,GAAGC,cAAc,CAACE,SAAS,CAAE;IACvE,IAAIwE,OAAsB;IAC1BhF,CAAC,CAACsE,qBAAqB,CAAC,MAAM;MAC5BU,OAAO,GAAG7E,MAAM,CAAEO,QAAQ,CAACoE,OAAO,CAAC;IACrC,CAAC,EAAEC,uBAAuB,CAAC;IAC3B/E,CAAC,CAACuE,MAAM,CAACpE,MAAM,CAAEqE,QAAQ,KAAK,SAAS,CAAC;;IAExC,IAAI;MACF,IAAIG,WAAW,EAAE;QACfxE,MAAM,CAAE8B,KAAK,CAAC,CAAC;QACfjC,CAAC,CAACuE,MAAM,CAACpE,MAAM,CAAEqE,QAAQ,KAAK,UAAU,CAAC;MAC3C;MACA,IAAII,aAAa,EAAE;QACjBzE,MAAM,CAAEsE,OAAO,CAAC,CAAC;QACjBzE,CAAC,CAACuE,MAAM,CAACpE,MAAM,CAAEqE,QAAQ,KAAK,UAAU,CAAC;MAC3C;;MAEA,MAAMQ,OAAQ;MACdhF,CAAC,CAACuE,MAAM,CAACpE,MAAM,CAAEqE,QAAQ,KAAK,QAAQ,CAAC;;MAEvC;MACArE,MAAM,CAAEW,cAAc,CAAC,GAAGjC,KAAK,CAAC;MAChCmB,CAAC,CAACuE,MAAM,CAACpE,MAAM,CAAEqE,QAAQ,KAAK,QAAQ,CAAC;IACzC,CAAC,CAAC,MAAM;MACN;MACA;MACAxE,CAAC,CAACuE,MAAM,CAACpE,MAAM,CAAEqE,QAAQ,KAAK,UAAU,CAAC;IAC3C;EACF;;EAEA;EACA,IAAIrE,MAAM,CAAEqE,QAAQ,KAAK,QAAQ,EAAE;IACjC;IACA;IACA,IAAIQ,OAAsB;IAC1BhF,CAAC,CAACsE,qBAAqB,CAAC,MAAM;MAC5BU,OAAO,GAAG7E,MAAM,CAAEO,QAAQ,CAACC,UAAU,CAACC,KAAK,CAAC;IAC9C,CAAC,EAAE,IAAI,CAAC;IACRZ,CAAC,CAACuE,MAAM,CAACpE,MAAM,CAAEqE,QAAQ,KAAK,QAAQ,CAAC;;IAEvC,IAAI;MACF,MAAMQ,OAAQ;MACdhF,CAAC,CAACiF,IAAI,CAAC,qDAAqD,CAAC;IAC/D,CAAC,CAAC,MAAM;MACNjF,CAAC,CAACuE,MAAM,CAACpE,MAAM,CAAEqE,QAAQ,KAAK,QAAQ,CAAC;IACzC;EACF;;EAEA,IAAIL,UAAU,EAAE;IACdhE,MAAM,CAAE8B,KAAK,CAAC,CAAC;IACfjC,CAAC,CAACuE,MAAM,CAACpE,MAAM,CAAEqE,QAAQ,KAAK,UAAU,CAAC;EAC3C;;EAEA,IAAIJ,YAAY,EAAE;IAChBjE,MAAM,CAAEsE,OAAO,CAAC,CAAC;IACjBzE,CAAC,CAACuE,MAAM,CAACpE,MAAM,CAAEqE,QAAQ,KAAK,UAAU,CAAC;EAC3C;AACF,CAAC,CAAC"}