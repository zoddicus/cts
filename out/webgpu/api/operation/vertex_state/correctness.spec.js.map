{"version":3,"file":"correctness.spec.js","names":["description","makeTestGroup","assert","filterUniqueValueTestVariants","makeValueTestVariant","memcpy","unreachable","kPerStageBindingLimits","kVertexFormatInfo","kVertexFormats","GPUTest","float32ToFloat16Bits","normalizedIntegerAsFloat","align","clamp","mapBufferAttribs","buffer","f","newAttributes","a","attributes","push","shaderLocation","mapStateAttribs","buffers","map","b","makeRgb10a2","rgba","r","g","normalizeRgb10a2","index","normalizationFactor","VertexStateTest","makeTestWGSL","vertexCount","instanceCount","maxUniformBuffers","getDefaultLimit","maxLimit","device","limits","maxVertexAttributes","vsInputs","vsChecks","vsBindings","format","shaderComponentCount","componentCount","i","shaderType","shaderBaseType","maxCount","indexBuiltin","stepMode","storageType","component","expected","attribComponent","providedData","type","floatTolerance","makeTestPipeline","module","createShaderModule","code","bufferLayouts","slot","createRenderPipeline","layout","vertex","entryPoint","primitive","topology","fragment","targets","submitRenderPass","pipeline","expectedData","testTexture","createTexture","size","usage","GPUTextureUsage","RENDER_ATTACHMENT","COPY_SRC","encoder","createCommandEncoder","pass","beginRenderPass","colorAttachments","view","createView","clearValue","loadOp","storeOp","setPipeline","setBindGroup","setVertexBuffer","vbOffset","draw","end","queue","submit","finish","expectSingleColor","exp","R","generateTestData","formatInfo","bitSize","bytesPerComponent","data","Float32Array","vertexData","Uint16Array","testComponentCount","length","Math","pow","Int32Array","Int16Array","Int8Array","Uint32Array","Uint8Array","v","flat","expandTestData","vertexComponentSize","byteLength","expectedComponentSize","expandedVertexData","expandedExpectedData","targetVertexOffset","sourceVertexOffset","src","start","dst","targetExpectedOffset","sourceExpectedOffset","interleaveVertexDataInto","target","targetStride","offset","srcStart","dstStart","createTestAndPipelineData","state","attrib","testData","createExpectedBG","bgEntries","expectedDataBuffer","makeBufferWithContents","GPUBufferUsage","UNIFORM","STORAGE","binding","resource","createBindGroup","getBindGroupLayout","entries","createVertexBuffers","vertexBuffers","ArrayBuffer","arrayStride","fill","byteSize","VERTEX","runTest","expectedDataBG","test","desc","params","u","combine","beginSubcases","mult","add","fn","t","slotVariant","shaderLocationVariant","makeLimitVariant","expand","p","formatSize","Set","arrayStrideVariant","offsetVariant","min","max","paramsSubcasesOnly","stepModes","vbCountVariant","additionalVBOffset","vbCount","kVertexCount","kInstanceCount","formatByteSize","alignedFormatByteSize","baseDataVertexCount","baseData","vertexBuffer","baseTestData","expectedDataBytesPerVertex","slice","attribs","maxVertexBuffers","deviceMaxVertexAttributes","isCompatibility","attributesPerBuffer","ceil","attributesEmitted","j","kCount","stride0TestData","stride0VertexBuffer","originalData","expandedData","set","varyingTestData","varyingVertexBuffer"],"sources":["../../../../../src/webgpu/api/operation/vertex_state/correctness.spec.ts"],"sourcesContent":["export const description = `\nTODO: Test more corner case values for Float16 / Float32 (INF, NaN, ...) and reduce the\nfloat tolerance.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport {\n  assert,\n  filterUniqueValueTestVariants,\n  makeValueTestVariant,\n  memcpy,\n  unreachable,\n} from '../../../../common/util/util.js';\nimport {\n  kPerStageBindingLimits,\n  kVertexFormatInfo,\n  kVertexFormats,\n} from '../../../capability_info.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { float32ToFloat16Bits, normalizedIntegerAsFloat } from '../../../util/conversion.js';\nimport { align, clamp } from '../../../util/math.js';\n\n// These types mirror the structure of GPUVertexBufferLayout but allow defining the extra\n// dictionary members at the GPUVertexBufferLayout and GPUVertexAttribute level. The are used\n// like so:\n//\n//   VertexState<{arrayStride: number}, {format: VertexFormat}>\n//   VertexBuffer<{arrayStride: number}, {format: VertexFormat}>\n//   VertexAttrib<{format: VertexFormat}>\ntype VertexAttrib<A> = A & { shaderLocation: number };\ntype VertexBuffer<V, A> = V & {\n  slot: number;\n  attributes: VertexAttrib<A>[];\n};\ntype VertexState<V, A> = VertexBuffer<V, A>[];\n\ntype VertexLayoutState<V, A> = VertexState<\n  { stepMode: GPUVertexStepMode; arrayStride: number } & V,\n  { format: GPUVertexFormat; offset: number } & A\n>;\n\nfunction mapBufferAttribs<V, A1, A2>(\n  buffer: VertexBuffer<V, A1>,\n  f: (v: V, a: VertexAttrib<A1>) => A2\n): VertexBuffer<V, A2> {\n  const newAttributes: VertexAttrib<A2>[] = [];\n  for (const a of buffer.attributes) {\n    newAttributes.push({\n      shaderLocation: a.shaderLocation,\n      ...f(buffer, a),\n    });\n  }\n\n  return { ...buffer, attributes: newAttributes };\n}\n\nfunction mapStateAttribs<V, A1, A2>(\n  buffers: VertexState<V, A1>,\n  f: (v: V, a: VertexAttrib<A1>) => A2\n): VertexState<V, A2> {\n  return buffers.map(b => mapBufferAttribs(b, f));\n}\n\nfunction makeRgb10a2(rgba: Array<number>): number {\n  const [r, g, b, a] = rgba;\n  assert((r & 0x3ff) === r);\n  assert((g & 0x3ff) === g);\n  assert((b & 0x3ff) === b);\n  assert((a & 0x3) === a);\n  return r | (g << 10) | (b << 20) | (a << 30);\n}\n\nfunction normalizeRgb10a2(rgba: number, index: number): number {\n  const normalizationFactor = index % 4 === 3 ? 3 : 1023;\n  return rgba / normalizationFactor;\n}\n\ntype TestData = {\n  shaderBaseType: string;\n  floatTolerance?: number;\n  // The number of vertex components in the vertexData (expectedData might contain more because\n  // it is padded to 4 components).\n  testComponentCount: number;\n  // The data that will be in the uniform buffer and used to check the vertex inputs.\n  expectedData: ArrayBuffer;\n  // The data that will be in the vertex buffer.\n  vertexData: ArrayBuffer;\n};\n\nclass VertexStateTest extends GPUTest {\n  // Generate for VS + FS (entrypoints vsMain / fsMain) that for each attribute will check that its\n  // value corresponds to what's expected (as provided by a uniform buffer per attribute) and then\n  // renders each vertex at position (vertexIndex, instanceindex) with either 1 (success) or\n  // a negative number corresponding to the check number (in case you need to debug a failure).\n  makeTestWGSL(\n    buffers: VertexState<\n      { stepMode: GPUVertexStepMode },\n      {\n        format: GPUVertexFormat;\n        shaderBaseType: string;\n        shaderComponentCount?: number;\n        floatTolerance?: number;\n      }\n    >,\n    vertexCount: number,\n    instanceCount: number\n  ): string {\n    // In the base WebGPU spec maxVertexAttributes is larger than maxUniformBufferPerStage. We'll\n    // use a combination of uniform and storage buffers to cover all possible attributes. This\n    // happens to work because maxUniformBuffer + maxStorageBuffer = 12 + 8 = 20 which is larger\n    // than maxVertexAttributes = 16.\n    // However this might not work in the future for implementations that allow even more vertex\n    // attributes so there will need to be larger changes when that happens.\n    const maxUniformBuffers = this.getDefaultLimit(kPerStageBindingLimits['uniformBuf'].maxLimit);\n    assert(\n      maxUniformBuffers + this.getDefaultLimit(kPerStageBindingLimits['storageBuf'].maxLimit) >=\n        this.device.limits.maxVertexAttributes\n    );\n\n    let vsInputs = '';\n    let vsChecks = '';\n    let vsBindings = '';\n\n    for (const b of buffers) {\n      for (const a of b.attributes) {\n        const format = kVertexFormatInfo[a.format];\n        const shaderComponentCount = a.shaderComponentCount ?? format.componentCount;\n        const i = a.shaderLocation;\n\n        // shaderType is either a scalar type like f32 or a vecN<scalarType>\n        let shaderType = a.shaderBaseType;\n        if (shaderComponentCount !== 1) {\n          shaderType = `vec${shaderComponentCount}<${shaderType}>`;\n        }\n\n        let maxCount = `${vertexCount}`;\n        let indexBuiltin = `input.vertexIndex`;\n        if (b.stepMode === 'instance') {\n          maxCount = `${instanceCount}`;\n          indexBuiltin = `input.instanceIndex`;\n        }\n\n        // Start using storage buffers when we run out of uniform buffers.\n        let storageType = 'uniform';\n        if (i >= maxUniformBuffers) {\n          storageType = 'storage, read';\n        }\n\n        vsInputs += `  @location(${i}) attrib${i} : ${shaderType},\\n`;\n        vsBindings += `struct S${i} { data : array<vec4<${a.shaderBaseType}>, ${maxCount}> };\\n`;\n        vsBindings += `@group(0) @binding(${i}) var<${storageType}> providedData${i} : S${i};\\n`;\n\n        // Generate the all the checks for the attributes.\n        for (let component = 0; component < shaderComponentCount; component++) {\n          // Components are filled with (0, 0, 0, 1) if they aren't provided data from the pipeline.\n          if (component >= format.componentCount) {\n            const expected = component === 3 ? '1' : '0';\n            vsChecks += `  check(input.attrib${i}[${component}] == ${a.shaderBaseType}(${expected}));\\n`;\n            continue;\n          }\n\n          // Check each component individually, with special handling of tolerance for floats.\n          const attribComponent =\n            shaderComponentCount === 1 ? `input.attrib${i}` : `input.attrib${i}[${component}]`;\n          const providedData = `providedData${i}.data[${indexBuiltin}][${component}]`;\n          if (format.type === 'uint' || format.type === 'sint') {\n            vsChecks += `  check(${attribComponent} == ${providedData});\\n`;\n          } else {\n            vsChecks += `  check(floatsSimilar(${attribComponent}, ${providedData}, f32(${\n              a.floatTolerance ?? 0\n            })));\\n`;\n          }\n        }\n      }\n    }\n\n    return `\nstruct Inputs {\n${vsInputs}\n  @builtin(vertex_index) vertexIndex: u32,\n  @builtin(instance_index) instanceIndex: u32,\n};\n\n${vsBindings}\n\nvar<private> vsResult : i32 = 1;\nvar<private> checkIndex : i32 = 0;\nfn check(success : bool) {\n  if (!success) {\n    vsResult = -checkIndex;\n  }\n  checkIndex = checkIndex + 1;\n}\n\nfn floatsSimilar(a : f32, b : f32, tolerance : f32) -> bool {\n  // Note: -0.0 and 0.0 have different bit patterns, but compare as equal.\n  return abs(a - b) < tolerance;\n}\n\nfn doTest(input : Inputs) {\n${vsChecks}\n}\n\nstruct VSOutputs {\n  @location(0) @interpolate(flat) result : i32,\n  @builtin(position) position : vec4<f32>,\n};\n\n@vertex fn vsMain(input : Inputs) -> VSOutputs {\n  doTest(input);\n\n  // Place that point at pixel (vertexIndex, instanceIndex) in a framebuffer of size\n  // (vertexCount , instanceCount).\n  var output : VSOutputs;\n  output.position = vec4<f32>(\n    ((f32(input.vertexIndex) + 0.5) / ${vertexCount}.0 * 2.0) - 1.0,\n    ((f32(input.instanceIndex) + 0.5) / ${instanceCount}.0 * 2.0) - 1.0,\n    0.0, 1.0\n  );\n  output.result = vsResult;\n  return output;\n}\n\n@fragment fn fsMain(@location(0) @interpolate(flat) result : i32)\n  -> @location(0) i32 {\n  return result;\n}\n    `;\n  }\n\n  makeTestPipeline(\n    buffers: VertexState<\n      { stepMode: GPUVertexStepMode; arrayStride: number },\n      {\n        offset: number;\n        format: GPUVertexFormat;\n        shaderBaseType: string;\n        shaderComponentCount?: number;\n        floatTolerance?: number;\n      }\n    >,\n    vertexCount: number,\n    instanceCount: number\n  ): GPURenderPipeline {\n    const module = this.device.createShaderModule({\n      code: this.makeTestWGSL(buffers, vertexCount, instanceCount),\n    });\n\n    const bufferLayouts: GPUVertexBufferLayout[] = [];\n    for (const b of buffers) {\n      bufferLayouts[b.slot] = b;\n    }\n\n    return this.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: {\n        module,\n        entryPoint: 'vsMain',\n        buffers: bufferLayouts,\n      },\n      primitive: {\n        topology: 'point-list',\n      },\n      fragment: {\n        module,\n        entryPoint: 'fsMain',\n        targets: [\n          {\n            format: 'r32sint',\n          },\n        ],\n      },\n    });\n  }\n\n  // Runs the render pass drawing points in a vertexCount*instanceCount rectangle, then check each\n  // of produced a value of 1 which means that the tests in the shader passed.\n  submitRenderPass(\n    pipeline: GPURenderPipeline,\n    buffers: VertexState<{ buffer: GPUBuffer; vbOffset?: number }, {}>,\n    expectedData: GPUBindGroup,\n    vertexCount: number,\n    instanceCount: number\n  ) {\n    const testTexture = this.device.createTexture({\n      format: 'r32sint',\n      size: [vertexCount, instanceCount],\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n    });\n\n    const encoder = this.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: testTexture.createView(),\n          clearValue: [0, 0, 0, 0],\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    });\n\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, expectedData);\n    for (const buffer of buffers) {\n      pass.setVertexBuffer(buffer.slot, buffer.buffer, buffer.vbOffset ?? 0);\n    }\n    pass.draw(vertexCount, instanceCount);\n    pass.end();\n\n    this.device.queue.submit([encoder.finish()]);\n\n    this.expectSingleColor(testTexture, 'r32sint', {\n      size: [vertexCount, instanceCount, 1],\n      exp: { R: 1 },\n    });\n  }\n\n  // Generate TestData for the format with interesting test values.\n  // MAINTENANCE_TODO cache the result on the fixture?\n  // Note that the test data always starts with an interesting value, so that using the first\n  // test value in a test is still meaningful.\n  generateTestData(format: GPUVertexFormat): TestData {\n    const formatInfo = kVertexFormatInfo[format];\n    const bitSize =\n      formatInfo.bytesPerComponent === 'packed' ? 0 : formatInfo.bytesPerComponent * 8;\n\n    switch (formatInfo.type) {\n      case 'float': {\n        // -0.0 and +0.0 have different bit patterns, but compare as equal.\n        const data = [42.42, 0.0, -0.0, 1.0, -1.0, 1000, -18.7, 25.17];\n        const expectedData = new Float32Array(data).buffer;\n        const vertexData =\n          bitSize === 32\n            ? expectedData\n            : bitSize === 16\n            ? new Uint16Array(data.map(float32ToFloat16Bits)).buffer\n            : unreachable();\n\n        return {\n          shaderBaseType: 'f32',\n          testComponentCount: data.length,\n          expectedData,\n          vertexData,\n          floatTolerance: 0.05,\n        };\n      }\n\n      case 'sint': {\n        /* prettier-ignore */\n        const data = [\n          42,\n          0, 1, 2, 3, 4, 5,\n          -1, -2, -3, -4, -5,\n          Math.pow(2, bitSize - 2),\n          Math.pow(2, bitSize - 1) - 1, // max value\n          -Math.pow(2, bitSize - 2),\n          -Math.pow(2, bitSize - 1), // min value\n        ];\n        const expectedData = new Int32Array(data).buffer;\n        const vertexData =\n          bitSize === 32\n            ? expectedData\n            : bitSize === 16\n            ? new Int16Array(data).buffer\n            : new Int8Array(data).buffer;\n\n        return {\n          shaderBaseType: 'i32',\n          testComponentCount: data.length,\n          expectedData,\n          vertexData,\n        };\n      }\n\n      case 'uint': {\n        /* prettier-ignore */\n        const data = [\n          42,\n          0, 1, 2, 3, 4, 5,\n          Math.pow(2, bitSize - 1),\n          Math.pow(2, bitSize) - 1, // max value\n        ];\n        const expectedData = new Uint32Array(data).buffer;\n        const vertexData =\n          bitSize === 32\n            ? expectedData\n            : bitSize === 16\n            ? new Uint16Array(data).buffer\n            : new Uint8Array(data).buffer;\n\n        return {\n          shaderBaseType: 'u32',\n          testComponentCount: data.length,\n          expectedData,\n          vertexData,\n        };\n      }\n\n      case 'snorm': {\n        /* prettier-ignore */\n        const data = [\n          42,\n          0, 1, 2, 3, 4, 5,\n          -1, -2, -3, -4, -5,\n          Math.pow(2,bitSize - 2),\n          Math.pow(2,bitSize - 1) - 1, // max value\n          -Math.pow(2,bitSize - 2),\n          -Math.pow(2,bitSize - 1), // min value\n        ];\n        const vertexData =\n          bitSize === 16\n            ? new Int16Array(data).buffer\n            : bitSize === 8\n            ? new Int8Array(data).buffer\n            : unreachable();\n\n        return {\n          shaderBaseType: 'f32',\n          testComponentCount: data.length,\n          expectedData: new Float32Array(data.map(v => normalizedIntegerAsFloat(v, bitSize, true)))\n            .buffer,\n          vertexData,\n          floatTolerance: 0.1 * normalizedIntegerAsFloat(1, bitSize, true),\n        };\n      }\n\n      case 'unorm': {\n        if (formatInfo.bytesPerComponent === 'packed') {\n          assert(format === 'unorm10-10-10-2'); // This is the only packed format for now.\n          assert(bitSize === 0);\n\n          /* prettier-ignore */\n          const data = [\n            [   0,    0,    0, 0],\n            [1023, 1023, 1023, 3],\n            [ 243,  567,  765, 2],\n          ];\n          const vertexData = new Uint32Array(data.map(makeRgb10a2)).buffer;\n          const expectedData = new Float32Array(data.flat().map(normalizeRgb10a2)).buffer;\n\n          return {\n            shaderBaseType: 'f32',\n            testComponentCount: data.flat().length,\n            expectedData,\n            vertexData,\n            floatTolerance: 0.1 / 1023,\n          };\n        }\n\n        /* prettier-ignore */\n        const data = [\n          42,\n          0, 1, 2, 3, 4, 5,\n          Math.pow(2, bitSize - 1),\n          Math.pow(2, bitSize) - 1, // max value\n        ];\n        const vertexData =\n          bitSize === 16\n            ? new Uint16Array(data).buffer\n            : bitSize === 8\n            ? new Uint8Array(data).buffer\n            : unreachable();\n\n        return {\n          shaderBaseType: 'f32',\n          testComponentCount: data.length,\n          expectedData: new Float32Array(data.map(v => normalizedIntegerAsFloat(v, bitSize, false)))\n            .buffer,\n          vertexData,\n          floatTolerance: 0.1 * normalizedIntegerAsFloat(1, bitSize, false),\n        };\n      }\n    }\n  }\n\n  // The TestData generated for a format might not contain enough data for all the vertices we are\n  // going to draw, so we expand them by adding additional copies of the vertexData as needed.\n  // expectedData is a bit different because it also needs to be unpacked to have `componentCount`\n  // components every 4 components (because the shader uses vec4 for the expected data).\n  expandTestData(data: TestData, maxCount: number, componentCount: number): TestData {\n    const vertexComponentSize = data.vertexData.byteLength / data.testComponentCount;\n    const expectedComponentSize = data.expectedData.byteLength / data.testComponentCount;\n\n    const expandedVertexData = new Uint8Array(maxCount * componentCount * vertexComponentSize);\n    const expandedExpectedData = new Uint8Array(4 * maxCount * expectedComponentSize);\n\n    for (let index = 0; index < maxCount; index++) {\n      for (let component = 0; component < componentCount; component++) {\n        // If only we had some builtin JS memcpy function between ArrayBuffers...\n        const targetVertexOffset = (index * componentCount + component) * vertexComponentSize;\n        const sourceVertexOffset = targetVertexOffset % data.vertexData.byteLength;\n        memcpy(\n          { src: data.vertexData, start: sourceVertexOffset, length: vertexComponentSize },\n          { dst: expandedVertexData, start: targetVertexOffset }\n        );\n\n        const targetExpectedOffset = (index * 4 + component) * expectedComponentSize;\n        const sourceExpectedOffset =\n          ((index * componentCount + component) * expectedComponentSize) %\n          data.expectedData.byteLength;\n        memcpy(\n          { src: data.expectedData, start: sourceExpectedOffset, length: expectedComponentSize },\n          { dst: expandedExpectedData, start: targetExpectedOffset }\n        );\n      }\n    }\n\n    return {\n      shaderBaseType: data.shaderBaseType,\n      testComponentCount: maxCount * componentCount,\n      floatTolerance: data.floatTolerance,\n      expectedData: expandedExpectedData.buffer,\n      vertexData: expandedVertexData.buffer,\n    };\n  }\n\n  // Copies `size` bytes from `source` to `target` starting at `offset` each `targetStride`.\n  // (the data in `source` is assumed packed)\n  interleaveVertexDataInto(\n    target: ArrayBuffer,\n    src: ArrayBuffer,\n    { targetStride, offset, size }: { targetStride: number; offset: number; size: number }\n  ) {\n    const dst = new Uint8Array(target);\n    for (\n      let srcStart = 0, dstStart = offset;\n      srcStart < src.byteLength;\n      srcStart += size, dstStart += targetStride\n    ) {\n      memcpy({ src, start: srcStart, length: size }, { dst, start: dstStart });\n    }\n  }\n\n  createTestAndPipelineData<V, A>(\n    state: VertexLayoutState<V, A>,\n    vertexCount: number,\n    instanceCount: number\n  ): VertexLayoutState<V, A & TestData> {\n    // Gather the test data and some additional test state for attribs.\n    return mapStateAttribs(state, (buffer, attrib) => {\n      const maxCount = buffer.stepMode === 'instance' ? instanceCount : vertexCount;\n      const formatInfo = kVertexFormatInfo[attrib.format];\n\n      let testData = this.generateTestData(attrib.format);\n      testData = this.expandTestData(testData, maxCount, formatInfo.componentCount);\n\n      return {\n        ...testData,\n        ...attrib,\n      };\n    });\n  }\n\n  createExpectedBG(state: VertexState<{}, TestData>, pipeline: GPURenderPipeline): GPUBindGroup {\n    // Create the bindgroups from that test data\n    const bgEntries: GPUBindGroupEntry[] = [];\n\n    for (const buffer of state) {\n      for (const attrib of buffer.attributes) {\n        const expectedDataBuffer = this.makeBufferWithContents(\n          new Uint8Array(attrib.expectedData),\n          GPUBufferUsage.UNIFORM | GPUBufferUsage.STORAGE\n        );\n        bgEntries.push({\n          binding: attrib.shaderLocation,\n          resource: { buffer: expectedDataBuffer },\n        });\n      }\n    }\n\n    return this.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: bgEntries,\n    });\n  }\n\n  createVertexBuffers(\n    state: VertexLayoutState<{ vbOffset?: number }, TestData>,\n    vertexCount: number,\n    instanceCount: number\n  ): VertexState<{ buffer: GPUBuffer; vbOffset?: number }, {}> {\n    // Create the vertex buffers\n    const vertexBuffers: VertexState<{ buffer: GPUBuffer; vbOffset?: number }, {}> = [];\n\n    for (const buffer of state) {\n      const maxCount = buffer.stepMode === 'instance' ? instanceCount : vertexCount;\n\n      // Fill the vertex data with garbage so that we don't get `0` (which could be a test value)\n      // if the vertex shader loads the vertex data incorrectly.\n      const vertexData = new ArrayBuffer(\n        align(buffer.arrayStride * maxCount + (buffer.vbOffset ?? 0), 4)\n      );\n      new Uint8Array(vertexData).fill(0xc4);\n\n      for (const attrib of buffer.attributes) {\n        const formatInfo = kVertexFormatInfo[attrib.format];\n        this.interleaveVertexDataInto(vertexData, attrib.vertexData, {\n          targetStride: buffer.arrayStride,\n          offset: (buffer.vbOffset ?? 0) + attrib.offset,\n          size: formatInfo.byteSize,\n        });\n      }\n\n      vertexBuffers.push({\n        slot: buffer.slot,\n        buffer: this.makeBufferWithContents(new Uint8Array(vertexData), GPUBufferUsage.VERTEX),\n        vbOffset: buffer.vbOffset,\n        attributes: [],\n      });\n    }\n\n    return vertexBuffers;\n  }\n\n  runTest(\n    buffers: VertexLayoutState<{ vbOffset?: number }, { shaderComponentCount?: number }>,\n    // Default to using 20 vertices and 20 instances so that we cover each of the test data at least\n    // once (at the time of writing the largest testData has 16 values).\n    vertexCount: number = 20,\n    instanceCount: number = 20\n  ) {\n    const testData = this.createTestAndPipelineData(buffers, vertexCount, instanceCount);\n    const pipeline = this.makeTestPipeline(testData, vertexCount, instanceCount);\n    const expectedDataBG = this.createExpectedBG(testData, pipeline);\n    const vertexBuffers = this.createVertexBuffers(testData, vertexCount, instanceCount);\n    this.submitRenderPass(pipeline, vertexBuffers, expectedDataBG, vertexCount, instanceCount);\n  }\n}\n\nexport const g = makeTestGroup(VertexStateTest);\n\ng.test('vertex_format_to_shader_format_conversion')\n  .desc(\n    `Test that the raw data passed in vertex buffers is correctly converted to the input type in the shader. Test for:\n  - all formats\n  - 1 to 4 components in the shader's input type (unused components are filled with 0 and except the 4th with 1)\n  - various locations\n  - various slots`\n  )\n  .params(u =>\n    u //\n      .combine('format', kVertexFormats)\n      .combine('shaderComponentCount', [1, 2, 3, 4])\n      .beginSubcases()\n      .combine('slotVariant', [\n        { mult: 0, add: 0 },\n        { mult: 0, add: 1 },\n        { mult: 1, add: -1 },\n      ])\n      .combine('shaderLocationVariant', [\n        { mult: 0, add: 0 },\n        { mult: 0, add: 1 },\n        { mult: 1, add: -1 },\n      ])\n  )\n  .fn(t => {\n    const { format, shaderComponentCount, slotVariant, shaderLocationVariant } = t.params;\n    const slot = t.makeLimitVariant('maxVertexBuffers', slotVariant);\n    const shaderLocation = t.makeLimitVariant('maxVertexAttributes', shaderLocationVariant);\n    t.runTest([\n      {\n        slot,\n        arrayStride: 16,\n        stepMode: 'vertex',\n        attributes: [\n          {\n            shaderLocation,\n            format,\n            offset: 0,\n            shaderComponentCount,\n          },\n        ],\n      },\n    ]);\n  });\n\ng.test('setVertexBuffer_offset_and_attribute_offset')\n  .desc(\n    `Test that the vertex buffer offset and attribute offset in the vertex state are applied correctly. Test for:\n  - all formats\n  - various setVertexBuffer offsets\n  - various attribute offsets in a fixed arrayStride`\n  )\n  .params(u =>\n    u //\n      .combine('format', kVertexFormats)\n      .beginSubcases()\n      .combine('vbOffset', [0, 4, 400, 1004])\n      .combine('arrayStride', [128])\n      .expand('offset', p => {\n        const formatInfo = kVertexFormatInfo[p.format];\n        const formatSize = formatInfo.byteSize;\n        return new Set([\n          0,\n          4,\n          8,\n          formatSize,\n          formatSize * 2,\n          p.arrayStride / 2,\n          p.arrayStride - formatSize - 4,\n          p.arrayStride - formatSize - 8,\n          p.arrayStride - formatSize - formatSize,\n          p.arrayStride - formatSize - formatSize * 2,\n          p.arrayStride - formatSize,\n        ]);\n      })\n  )\n  .fn(t => {\n    const { format, vbOffset, arrayStride, offset } = t.params;\n    t.runTest([\n      {\n        slot: 0,\n        arrayStride,\n        stepMode: 'vertex',\n        vbOffset,\n        attributes: [\n          {\n            shaderLocation: 0,\n            format,\n            offset,\n          },\n        ],\n      },\n    ]);\n  });\n\ng.test('non_zero_array_stride_and_attribute_offset')\n  .desc(\n    `Test that the array stride and attribute offset in the vertex state are applied correctly. Test for:\n  - all formats\n  - various array strides\n  - various attribute offsets in a fixed arrayStride`\n  )\n  .params(u =>\n    u //\n      .combine('format', kVertexFormats)\n      .beginSubcases()\n      .expand('arrayStrideVariant', p => {\n        const formatInfo = kVertexFormatInfo[p.format];\n        const formatSize = formatInfo.byteSize;\n\n        return [\n          { mult: 0, add: align(formatSize, 4) },\n          { mult: 0, add: align(formatSize, 4) + 4 },\n          { mult: 1, add: 0 },\n        ];\n      })\n      .expand('offsetVariant', function* (p) {\n        const formatInfo = kVertexFormatInfo[p.format];\n        const formatSize = formatInfo.byteSize;\n        yield { mult: 0, add: 0 };\n        yield { mult: 0, add: 4 };\n        if (formatSize !== 4) yield { mult: 0, add: formatSize };\n        yield { mult: 0.5, add: 0 };\n        yield { mult: 1, add: -formatSize * 2 };\n        if (formatSize !== 4) yield { mult: 1, add: -formatSize - 4 };\n        yield { mult: 1, add: -formatSize };\n      })\n  )\n  .fn(t => {\n    const { format, arrayStrideVariant, offsetVariant } = t.params;\n    const arrayStride = t.makeLimitVariant('maxVertexBufferArrayStride', arrayStrideVariant);\n    const formatInfo = kVertexFormatInfo[format];\n    const formatSize = formatInfo.byteSize;\n    const offset = clamp(makeValueTestVariant(arrayStride, offsetVariant), {\n      min: 0,\n      max: arrayStride - formatSize,\n    });\n\n    t.runTest([\n      {\n        slot: 0,\n        arrayStride,\n        stepMode: 'vertex',\n        attributes: [\n          {\n            shaderLocation: 0,\n            format,\n            offset,\n          },\n        ],\n      },\n    ]);\n  });\n\ng.test('buffers_with_varying_step_mode')\n  .desc(\n    `Test buffers with varying step modes in the same vertex state.\n  - Various combination of step modes`\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('stepModes', [\n        ['instance'],\n        ['vertex', 'vertex', 'instance'],\n        ['instance', 'vertex', 'instance'],\n        ['vertex', 'instance', 'vertex', 'vertex'],\n      ])\n  )\n  .fn(t => {\n    const { stepModes } = t.params;\n    const state = (stepModes as GPUVertexStepMode[]).map((stepMode, i) => ({\n      slot: i,\n      arrayStride: 4,\n      stepMode,\n      attributes: [\n        {\n          shaderLocation: i,\n          format: 'float32' as const,\n          offset: 0,\n        },\n      ],\n    }));\n    t.runTest(state);\n  });\n\ng.test('vertex_buffer_used_multiple_times_overlapped')\n  .desc(\n    `Test using the same vertex buffer in for multiple \"vertex buffers\", with data from each buffer overlapping.\n  - For each vertex format.\n  - For various numbers of vertex buffers [2, 3, max]`\n  )\n  .params(u =>\n    u //\n      .combine('format', kVertexFormats)\n      .beginSubcases()\n      .combine('vbCountVariant', [\n        { mult: 0, add: 2 },\n        { mult: 0, add: 3 },\n        { mult: 1, add: 0 },\n      ])\n      .combine('additionalVBOffset', [0, 4, 120])\n  )\n  .fn(t => {\n    const { format, vbCountVariant, additionalVBOffset } = t.params;\n    const vbCount = t.makeLimitVariant('maxVertexBuffers', vbCountVariant);\n    const kVertexCount = 20;\n    const kInstanceCount = 1;\n    const formatInfo = kVertexFormatInfo[format];\n    const formatByteSize = formatInfo.byteSize;\n    // We need to align so the offset for non-0 setVertexBuffer don't fail validation.\n    const alignedFormatByteSize = align(formatByteSize, 4);\n\n    // In this test we want to test using the same vertex buffer for multiple different attributes.\n    // For example if vbCount is 3, we will create a vertex buffer containing the following data:\n    //    a0, a1, a2, a3, ..., a<baseDataVertexCount>\n    // We also create the expected data for the vertex fetching from that buffer so we can modify it\n    // below.\n    const baseDataVertexCount = kVertexCount + vbCount - 1;\n    const baseData = t.createTestAndPipelineData(\n      [\n        {\n          slot: 0,\n          arrayStride: alignedFormatByteSize,\n          stepMode: 'vertex',\n          vbOffset: additionalVBOffset,\n          attributes: [{ shaderLocation: 0, format, offset: 0 }],\n        },\n      ],\n      baseDataVertexCount,\n      kInstanceCount\n    );\n    const vertexBuffer = t.createVertexBuffers(baseData, baseDataVertexCount, kInstanceCount)[0]\n      .buffer;\n\n    // We are going to bind the vertex buffer multiple times, each time at a different offset that's\n    // a multiple of the data size. So what should be fetched by the vertex shader is:\n    //    - attrib0: a0, a1, ..., a19\n    //    - attrib1: a1, a2, ..., a20\n    //    - attrib2: a2, a3, ..., a21\n    //    etc.\n    // We re-create the test data by:\n    //   1) creating multiple \"vertex buffers\" that all point at the GPUBuffer above but at\n    //      different offsets.\n    //   2) selecting what parts of the expectedData each attribute will see in the expectedData for\n    //      the full vertex buffer.\n    const baseTestData = baseData[0].attributes[0];\n    assert(baseTestData.testComponentCount === formatInfo.componentCount * baseDataVertexCount);\n    const expectedDataBytesPerVertex = baseTestData.expectedData.byteLength / baseDataVertexCount;\n\n    const testData: VertexLayoutState<{}, TestData> = [];\n    const vertexBuffers: VertexState<{ buffer: GPUBuffer; vbOffset: number }, {}> = [];\n    for (let i = 0; i < vbCount; i++) {\n      vertexBuffers.push({\n        buffer: vertexBuffer,\n        slot: i,\n        vbOffset: additionalVBOffset + i * alignedFormatByteSize,\n        attributes: [],\n      });\n\n      testData.push({\n        slot: i,\n        arrayStride: alignedFormatByteSize,\n        stepMode: 'vertex',\n        attributes: [\n          {\n            shaderLocation: i,\n            format,\n            offset: 0,\n\n            shaderBaseType: baseTestData.shaderBaseType,\n            floatTolerance: baseTestData.floatTolerance,\n            // Select vertices [i, i + kVertexCount]\n            testComponentCount: kVertexCount * formatInfo.componentCount,\n            expectedData: baseTestData.expectedData.slice(\n              expectedDataBytesPerVertex * i,\n              expectedDataBytesPerVertex * (kVertexCount + i)\n            ),\n            vertexData: new ArrayBuffer(0),\n          },\n        ],\n      });\n    }\n\n    // Run the test with the modified test data.\n    const pipeline = t.makeTestPipeline(testData, kVertexCount, kInstanceCount);\n    const expectedDataBG = t.createExpectedBG(testData, pipeline);\n    t.submitRenderPass(pipeline, vertexBuffers, expectedDataBG, kVertexCount, kInstanceCount);\n  });\n\ng.test('vertex_buffer_used_multiple_times_interleaved')\n  .desc(\n    `Test using the same vertex buffer in for multiple \"vertex buffers\", with data from each buffer interleaved.\n  - For each vertex format.\n  - For various numbers of vertex buffers [2, 3, max]`\n  )\n  .params(u =>\n    u //\n      .combine('format', kVertexFormats)\n      .beginSubcases()\n      .combine('vbCountVariant', [\n        { mult: 0, add: 2 },\n        { mult: 0, add: 3 },\n        { mult: 1, add: 0 },\n      ])\n      .combine('additionalVBOffset', [0, 4, 120])\n  )\n  .fn(t => {\n    const { format, vbCountVariant, additionalVBOffset } = t.params;\n    const vbCount = t.makeLimitVariant('maxVertexBuffers', vbCountVariant);\n    const kVertexCount = 20;\n    const kInstanceCount = 1;\n    const formatInfo = kVertexFormatInfo[format];\n    const formatByteSize = formatInfo.byteSize;\n    // We need to align so the offset for non-0 setVertexBuffer don't fail validation.\n    const alignedFormatByteSize = align(formatByteSize, 4);\n\n    // Create data for a single vertex buffer with many attributes, that will be split between\n    // many vertex buffers set at different offsets.\n\n    // In this test we want to test using the same vertex buffer for multiple different attributes.\n    // For example if vbCount is 3, we will create a vertex buffer containing the following data:\n    //    a0, a0, a0, a1, a1, a1, ...\n    // To do that we create a single vertex buffer with `vbCount` attributes that all have the same\n    // format.\n    const attribs: GPUVertexAttribute[] = [];\n    for (let i = 0; i < vbCount; i++) {\n      attribs.push({ format, offset: i * alignedFormatByteSize, shaderLocation: i });\n    }\n    const baseData = t.createTestAndPipelineData(\n      [\n        {\n          slot: 0,\n          arrayStride: alignedFormatByteSize * vbCount,\n          stepMode: 'vertex',\n          vbOffset: additionalVBOffset,\n          attributes: attribs,\n        },\n      ],\n      // Request one vertex more than what we need so we have an extra full stride. Otherwise WebGPU\n      // validation of vertex being in bounds will fail for all vertex buffers at an offset that's\n      // not 0 (since their last stride will go beyond the data for vertex kVertexCount -1).\n      kVertexCount + 1,\n      kInstanceCount\n    );\n    const vertexBuffer = t.createVertexBuffers(baseData, kVertexCount + 1, kInstanceCount)[0]\n      .buffer;\n\n    // Then we recreate test data by:\n    //   1) creating multiple \"vertex buffers\" that all point at the GPUBuffer above but at\n    //      different offsets.\n    //   2) have multiple vertex buffer, each with one attributes that will expect a0, a1, ...\n    const testData: VertexLayoutState<{}, TestData> = [];\n    const vertexBuffers: VertexState<{ buffer: GPUBuffer; vbOffset: number }, {}> = [];\n    for (let i = 0; i < vbCount; i++) {\n      vertexBuffers.push({\n        slot: i,\n        buffer: vertexBuffer,\n        vbOffset: additionalVBOffset + i * alignedFormatByteSize,\n        attributes: [],\n      });\n      testData.push({\n        ...baseData[0],\n        slot: i,\n        attributes: [{ ...baseData[0].attributes[i], offset: 0 }],\n      });\n    }\n\n    // Run the test with the modified test data.\n    const pipeline = t.makeTestPipeline(testData, kVertexCount, kInstanceCount);\n    const expectedDataBG = t.createExpectedBG(testData, pipeline);\n    t.submitRenderPass(pipeline, vertexBuffers, expectedDataBG, kVertexCount, kInstanceCount);\n  });\n\ng.test('max_buffers_and_attribs')\n  .desc(\n    `Test a vertex state that loads as many attributes and buffers as possible.\n  - For each format.\n  `\n  )\n  .params(u => u.combine('format', kVertexFormats))\n  .fn(t => {\n    const { format } = t.params;\n    // In compat mode, @builtin(vertex_index) and @builtin(instance_index) each take an attribute\n    const maxVertexBuffers = t.device.limits.maxVertexBuffers;\n    const deviceMaxVertexAttributes = t.device.limits.maxVertexAttributes;\n    const maxVertexAttributes = deviceMaxVertexAttributes - (t.isCompatibility ? 2 : 0);\n    const attributesPerBuffer = Math.ceil(maxVertexAttributes / maxVertexBuffers);\n    let attributesEmitted = 0;\n\n    const state: VertexLayoutState<{}, {}> = [];\n    for (let i = 0; i < maxVertexBuffers; i++) {\n      const attributes: GPUVertexAttribute[] = [];\n      for (let j = 0; j < attributesPerBuffer && attributesEmitted < maxVertexAttributes; j++) {\n        attributes.push({ format, offset: 0, shaderLocation: attributesEmitted });\n        attributesEmitted++;\n      }\n      state.push({\n        slot: i,\n        stepMode: 'vertex',\n        arrayStride: 32,\n        attributes,\n      });\n    }\n    t.runTest(state);\n  });\n\ng.test('array_stride_zero')\n  .desc(\n    `Test that arrayStride 0 correctly uses the same data for all vertex/instances, while another test vertex buffer with arrayStride != 0 gets different data.\n  - Test for all formats\n  - Test for both step modes`\n  )\n  .params(u =>\n    u //\n      .combine('format', kVertexFormats)\n      .beginSubcases()\n      .combine('stepMode', ['vertex', 'instance'] as const)\n      .expand('offsetVariant', p => {\n        const formatInfo = kVertexFormatInfo[p.format];\n        const formatSize = formatInfo.byteSize;\n        return filterUniqueValueTestVariants([\n          { mult: 0, add: 0 },\n          { mult: 0, add: 4 },\n          { mult: 0, add: 8 },\n          { mult: 0, add: formatSize },\n          { mult: 0, add: formatSize * 2 },\n          { mult: 0.5, add: 0 },\n          { mult: 1, add: -formatSize - 4 },\n          { mult: 1, add: -formatSize - 8 },\n          { mult: 1, add: -formatSize },\n          { mult: 1, add: -formatSize * 2 },\n        ]);\n      })\n  )\n  .fn(t => {\n    const { format, stepMode, offsetVariant } = t.params;\n    const offset = t.makeLimitVariant('maxVertexBufferArrayStride', offsetVariant);\n    const kCount = 10;\n\n    // Create the stride 0 part of the test, first by faking a single vertex being drawn and\n    // then expanding the data to cover kCount vertex / instances\n    const stride0TestData = t.createTestAndPipelineData(\n      [\n        {\n          slot: 0,\n          arrayStride: 2048,\n          stepMode,\n          vbOffset: offset, // used to push data in the vertex buffer\n          attributes: [{ format, offset: 0, shaderLocation: 0 }],\n        },\n      ],\n      1,\n      1\n    )[0];\n    const stride0VertexBuffer = t.createVertexBuffers([stride0TestData], kCount, kCount)[0];\n\n    // Expand the stride0 test data to have kCount values for expectedData.\n    const originalData = stride0TestData.attributes[0].expectedData;\n    const expandedData = new ArrayBuffer(kCount * originalData.byteLength);\n    for (let i = 0; i < kCount; i++) {\n      new Uint8Array(expandedData, originalData.byteLength * i).set(new Uint8Array(originalData));\n    }\n\n    // Fixup stride0TestData to use arrayStride 0.\n    stride0TestData.attributes[0].offset = offset;\n    stride0TestData.attributes[0].expectedData = expandedData;\n    stride0TestData.attributes[0].testComponentCount *= kCount;\n    stride0TestData.arrayStride = 0;\n    stride0VertexBuffer.vbOffset = 0;\n\n    // Create the part of the state that will be varying for each vertex / instance\n    const varyingTestData = t.createTestAndPipelineData(\n      [\n        {\n          slot: 1,\n          arrayStride: 32,\n          stepMode,\n          attributes: [{ format, offset: 0, shaderLocation: 1 }],\n        },\n      ],\n      kCount,\n      kCount\n    )[0];\n    const varyingVertexBuffer = t.createVertexBuffers([varyingTestData], kCount, kCount)[0];\n\n    // Run the test with the merged test state.\n    const state = [stride0TestData, varyingTestData];\n    const vertexBuffers = [stride0VertexBuffer, varyingVertexBuffer];\n\n    const pipeline = t.makeTestPipeline(state, kCount, kCount);\n    const expectedDataBG = t.createExpectedBG(state, pipeline);\n    t.submitRenderPass(pipeline, vertexBuffers, expectedDataBG, kCount, kCount);\n  });\n\ng.test('discontiguous_location_and_attribs')\n  .desc('Test that using far away slots / shaderLocations works as expected')\n  .fn(t => {\n    t.runTest([\n      {\n        slot: t.device.limits.maxVertexBuffers - 1,\n        arrayStride: 4,\n        stepMode: 'vertex',\n        attributes: [\n          { format: 'uint8x2', offset: 2, shaderLocation: 0 },\n          { format: 'uint8x2', offset: 0, shaderLocation: 8 },\n        ],\n      },\n      {\n        slot: 1,\n        arrayStride: 16,\n        stepMode: 'instance',\n        vbOffset: 1000,\n        attributes: [\n          {\n            format: 'uint32x4',\n            offset: 0,\n            shaderLocation: t.device.limits.maxVertexAttributes - 1,\n          },\n        ],\n      },\n    ]);\n  });\n\ng.test('overlapping_attributes')\n  .desc(\n    `Test that overlapping attributes in the same vertex buffer works\n   - Test for all formats`\n  )\n  .params(u => u.combine('format', kVertexFormats))\n  .fn(t => {\n    const { format } = t.params;\n\n    // In compat mode, @builtin(vertex_index) and @builtin(instance_index) each take an attribute\n    const maxVertexAttributes = t.device.limits.maxVertexAttributes - (t.isCompatibility ? 2 : 0);\n    const attributes: GPUVertexAttribute[] = [];\n    for (let i = 0; i < maxVertexAttributes; i++) {\n      attributes.push({ format, offset: 0, shaderLocation: i });\n    }\n\n    t.runTest([\n      {\n        slot: 0,\n        stepMode: 'vertex',\n        arrayStride: 32,\n        attributes,\n      },\n    ]);\n  });\n"],"mappings":"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"}