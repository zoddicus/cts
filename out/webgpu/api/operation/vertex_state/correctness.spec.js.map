{"version":3,"file":"correctness.spec.js","names":["description","makeTestGroup","assert","filterUniqueValueTestVariants","makeValueTestVariant","memcpy","unreachable","kPerStageBindingLimits","kVertexFormatInfo","kVertexFormats","GPUTest","float32ToFloat16Bits","normalizedIntegerAsFloat","align","clamp","mapBufferAttribs","buffer","f","newAttributes","a","attributes","push","shaderLocation","mapStateAttribs","buffers","map","b","VertexStateTest","makeTestWGSL","vertexCount","instanceCount","maxUniformBuffers","max","device","limits","maxVertexAttributes","vsInputs","vsChecks","vsBindings","format","shaderComponentCount","componentCount","i","shaderType","shaderBaseType","maxCount","indexBuiltin","stepMode","storageType","component","expected","attribComponent","providedData","type","floatTolerance","makeTestPipeline","module","createShaderModule","code","bufferLayouts","slot","createRenderPipeline","layout","vertex","entryPoint","primitive","topology","fragment","targets","submitRenderPass","pipeline","expectedData","testTexture","createTexture","size","usage","GPUTextureUsage","RENDER_ATTACHMENT","COPY_SRC","encoder","createCommandEncoder","pass","beginRenderPass","colorAttachments","view","createView","clearValue","loadOp","storeOp","setPipeline","setBindGroup","setVertexBuffer","vbOffset","draw","end","queue","submit","finish","expectSingleColor","exp","R","generateTestData","formatInfo","bitSize","bytesPerComponent","data","Float32Array","vertexData","Uint16Array","testComponentCount","length","Math","pow","Int32Array","Int16Array","Int8Array","Uint32Array","Uint8Array","v","expandTestData","vertexComponentSize","byteLength","expectedComponentSize","expandedVertexData","expandedExpectedData","index","targetVertexOffset","sourceVertexOffset","src","start","dst","targetExpectedOffset","sourceExpectedOffset","interleaveVertexDataInto","target","targetStride","offset","srcStart","dstStart","createTestAndPipelineData","state","attrib","testData","createExpectedBG","bgEntries","expectedDataBuffer","makeBufferWithContents","GPUBufferUsage","UNIFORM","STORAGE","binding","resource","createBindGroup","getBindGroupLayout","entries","createVertexBuffers","vertexBuffers","ArrayBuffer","arrayStride","fill","VERTEX","runTest","expectedDataBG","g","test","desc","params","u","combine","beginSubcases","mult","add","fn","t","slotVariant","shaderLocationVariant","makeLimitVariant","expand","p","formatSize","Set","arrayStrideVariant","offsetVariant","min","paramsSubcasesOnly","stepModes","vbCountVariant","additionalVBOffset","vbCount","kVertexCount","kInstanceCount","formatByteSize","alignedFormatByteSize","baseDataVertexCount","baseData","vertexBuffer","baseTestData","expectedDataBytesPerVertex","slice","attribs","maxVertexBuffers","deviceMaxVertexAttributes","isCompatibility","attributesPerBuffer","ceil","attributesEmitted","j","kCount","stride0TestData","stride0VertexBuffer","originalData","expandedData","set","varyingTestData","varyingVertexBuffer"],"sources":["../../../../../src/webgpu/api/operation/vertex_state/correctness.spec.ts"],"sourcesContent":["export const description = `\nTODO: Test more corner case values for Float16 / Float32 (INF, NaN, ...) and reduce the\nfloat tolerance.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport {\n  assert,\n  filterUniqueValueTestVariants,\n  makeValueTestVariant,\n  memcpy,\n  unreachable,\n} from '../../../../common/util/util.js';\nimport {\n  kPerStageBindingLimits,\n  kVertexFormatInfo,\n  kVertexFormats,\n} from '../../../capability_info.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { float32ToFloat16Bits, normalizedIntegerAsFloat } from '../../../util/conversion.js';\nimport { align, clamp } from '../../../util/math.js';\n\n// These types mirror the structure of GPUVertexBufferLayout but allow defining the extra\n// dictionary members at the GPUVertexBufferLayout and GPUVertexAttribute level. The are used\n// like so:\n//\n//   VertexState<{arrayStride: number}, {format: VertexFormat}>\n//   VertexBuffer<{arrayStride: number}, {format: VertexFormat}>\n//   VertexAttrib<{format: VertexFormat}>\ntype VertexAttrib<A> = A & { shaderLocation: number };\ntype VertexBuffer<V, A> = V & {\n  slot: number;\n  attributes: VertexAttrib<A>[];\n};\ntype VertexState<V, A> = VertexBuffer<V, A>[];\n\ntype VertexLayoutState<V, A> = VertexState<\n  { stepMode: GPUVertexStepMode; arrayStride: number } & V,\n  { format: GPUVertexFormat; offset: number } & A\n>;\n\nfunction mapBufferAttribs<V, A1, A2>(\n  buffer: VertexBuffer<V, A1>,\n  f: (v: V, a: VertexAttrib<A1>) => A2\n): VertexBuffer<V, A2> {\n  const newAttributes: VertexAttrib<A2>[] = [];\n  for (const a of buffer.attributes) {\n    newAttributes.push({\n      shaderLocation: a.shaderLocation,\n      ...f(buffer, a),\n    });\n  }\n\n  return { ...buffer, attributes: newAttributes };\n}\n\nfunction mapStateAttribs<V, A1, A2>(\n  buffers: VertexState<V, A1>,\n  f: (v: V, a: VertexAttrib<A1>) => A2\n): VertexState<V, A2> {\n  return buffers.map(b => mapBufferAttribs(b, f));\n}\n\ntype TestData = {\n  shaderBaseType: string;\n  floatTolerance?: number;\n  // The number of vertex components in the vertexData (expectedData might contain more because\n  // it is padded to 4 components).\n  testComponentCount: number;\n  // The data that will be in the uniform buffer and used to check the vertex inputs.\n  expectedData: ArrayBuffer;\n  // The data that will be in the vertex buffer.\n  vertexData: ArrayBuffer;\n};\n\nclass VertexStateTest extends GPUTest {\n  // Generate for VS + FS (entrypoints vsMain / fsMain) that for each attribute will check that its\n  // value corresponds to what's expected (as provided by a uniform buffer per attribute) and then\n  // renders each vertex at position (vertexIndex, instanceindex) with either 1 (success) or\n  // a negative number corresponding to the check number (in case you need to debug a failure).\n  makeTestWGSL(\n    buffers: VertexState<\n      { stepMode: GPUVertexStepMode },\n      {\n        format: GPUVertexFormat;\n        shaderBaseType: string;\n        shaderComponentCount?: number;\n        floatTolerance?: number;\n      }\n    >,\n    vertexCount: number,\n    instanceCount: number\n  ): string {\n    // In the base WebGPU spec maxVertexAttributes is larger than maxUniformBufferPerStage. We'll\n    // use a combination of uniform and storage buffers to cover all possible attributes. This\n    // happens to work because maxUniformBuffer + maxStorageBuffer = 12 + 8 = 20 which is larger\n    // than maxVertexAttributes = 16.\n    // However this might not work in the future for implementations that allow even more vertex\n    // attributes so there will need to be larger changes when that happens.\n    const maxUniformBuffers = kPerStageBindingLimits['uniformBuf'].max;\n    assert(\n      maxUniformBuffers + kPerStageBindingLimits['storageBuf'].max >=\n        this.device.limits.maxVertexAttributes\n    );\n\n    let vsInputs = '';\n    let vsChecks = '';\n    let vsBindings = '';\n\n    for (const b of buffers) {\n      for (const a of b.attributes) {\n        const format = kVertexFormatInfo[a.format];\n        const shaderComponentCount = a.shaderComponentCount ?? format.componentCount;\n        const i = a.shaderLocation;\n\n        // shaderType is either a scalar type like f32 or a vecN<scalarType>\n        let shaderType = a.shaderBaseType;\n        if (shaderComponentCount !== 1) {\n          shaderType = `vec${shaderComponentCount}<${shaderType}>`;\n        }\n\n        let maxCount = `${vertexCount}`;\n        let indexBuiltin = `input.vertexIndex`;\n        if (b.stepMode === 'instance') {\n          maxCount = `${instanceCount}`;\n          indexBuiltin = `input.instanceIndex`;\n        }\n\n        // Start using storage buffers when we run out of uniform buffers.\n        let storageType = 'uniform';\n        if (i >= maxUniformBuffers) {\n          storageType = 'storage, read';\n        }\n\n        vsInputs += `  @location(${i}) attrib${i} : ${shaderType},\\n`;\n        vsBindings += `struct S${i} { data : array<vec4<${a.shaderBaseType}>, ${maxCount}> };\\n`;\n        vsBindings += `@group(0) @binding(${i}) var<${storageType}> providedData${i} : S${i};\\n`;\n\n        // Generate the all the checks for the attributes.\n        for (let component = 0; component < shaderComponentCount; component++) {\n          // Components are filled with (0, 0, 0, 1) if they aren't provided data from the pipeline.\n          if (component >= format.componentCount) {\n            const expected = component === 3 ? '1' : '0';\n            vsChecks += `  check(input.attrib${i}[${component}] == ${a.shaderBaseType}(${expected}));\\n`;\n            continue;\n          }\n\n          // Check each component individually, with special handling of tolerance for floats.\n          const attribComponent =\n            shaderComponentCount === 1 ? `input.attrib${i}` : `input.attrib${i}[${component}]`;\n          const providedData = `providedData${i}.data[${indexBuiltin}][${component}]`;\n          if (format.type === 'uint' || format.type === 'sint') {\n            vsChecks += `  check(${attribComponent} == ${providedData});\\n`;\n          } else {\n            vsChecks += `  check(floatsSimilar(${attribComponent}, ${providedData}, f32(${\n              a.floatTolerance ?? 0\n            })));\\n`;\n          }\n        }\n      }\n    }\n\n    return `\nstruct Inputs {\n${vsInputs}\n  @builtin(vertex_index) vertexIndex: u32,\n  @builtin(instance_index) instanceIndex: u32,\n};\n\n${vsBindings}\n\nvar<private> vsResult : i32 = 1;\nvar<private> checkIndex : i32 = 0;\nfn check(success : bool) {\n  if (!success) {\n    vsResult = -checkIndex;\n  }\n  checkIndex = checkIndex + 1;\n}\n\nfn floatsSimilar(a : f32, b : f32, tolerance : f32) -> bool {\n  // Note: -0.0 and 0.0 have different bit patterns, but compare as equal.\n  return abs(a - b) < tolerance;\n}\n\nfn doTest(input : Inputs) {\n${vsChecks}\n}\n\nstruct VSOutputs {\n  @location(0) @interpolate(flat) result : i32,\n  @builtin(position) position : vec4<f32>,\n};\n\n@vertex fn vsMain(input : Inputs) -> VSOutputs {\n  doTest(input);\n\n  // Place that point at pixel (vertexIndex, instanceIndex) in a framebuffer of size\n  // (vertexCount , instanceCount).\n  var output : VSOutputs;\n  output.position = vec4<f32>(\n    ((f32(input.vertexIndex) + 0.5) / ${vertexCount}.0 * 2.0) - 1.0,\n    ((f32(input.instanceIndex) + 0.5) / ${instanceCount}.0 * 2.0) - 1.0,\n    0.0, 1.0\n  );\n  output.result = vsResult;\n  return output;\n}\n\n@fragment fn fsMain(@location(0) @interpolate(flat) result : i32)\n  -> @location(0) i32 {\n  return result;\n}\n    `;\n  }\n\n  makeTestPipeline(\n    buffers: VertexState<\n      { stepMode: GPUVertexStepMode; arrayStride: number },\n      {\n        offset: number;\n        format: GPUVertexFormat;\n        shaderBaseType: string;\n        shaderComponentCount?: number;\n        floatTolerance?: number;\n      }\n    >,\n    vertexCount: number,\n    instanceCount: number\n  ): GPURenderPipeline {\n    const module = this.device.createShaderModule({\n      code: this.makeTestWGSL(buffers, vertexCount, instanceCount),\n    });\n\n    const bufferLayouts: GPUVertexBufferLayout[] = [];\n    for (const b of buffers) {\n      bufferLayouts[b.slot] = b;\n    }\n\n    return this.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: {\n        module,\n        entryPoint: 'vsMain',\n        buffers: bufferLayouts,\n      },\n      primitive: {\n        topology: 'point-list',\n      },\n      fragment: {\n        module,\n        entryPoint: 'fsMain',\n        targets: [\n          {\n            format: 'r32sint',\n          },\n        ],\n      },\n    });\n  }\n\n  // Runs the render pass drawing points in a vertexCount*instanceCount rectangle, then check each\n  // of produced a value of 1 which means that the tests in the shader passed.\n  submitRenderPass(\n    pipeline: GPURenderPipeline,\n    buffers: VertexState<{ buffer: GPUBuffer; vbOffset?: number }, {}>,\n    expectedData: GPUBindGroup,\n    vertexCount: number,\n    instanceCount: number\n  ) {\n    const testTexture = this.device.createTexture({\n      format: 'r32sint',\n      size: [vertexCount, instanceCount],\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n    });\n\n    const encoder = this.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: testTexture.createView(),\n          clearValue: [0, 0, 0, 0],\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    });\n\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, expectedData);\n    for (const buffer of buffers) {\n      pass.setVertexBuffer(buffer.slot, buffer.buffer, buffer.vbOffset ?? 0);\n    }\n    pass.draw(vertexCount, instanceCount);\n    pass.end();\n\n    this.device.queue.submit([encoder.finish()]);\n\n    this.expectSingleColor(testTexture, 'r32sint', {\n      size: [vertexCount, instanceCount, 1],\n      exp: { R: 1 },\n    });\n  }\n\n  // Generate TestData for the format with interesting test values.\n  // MAINTENANCE_TODO cache the result on the fixture?\n  // Note that the test data always starts with an interesting value, so that using the first\n  // test value in a test is still meaningful.\n  generateTestData(format: GPUVertexFormat): TestData {\n    const formatInfo = kVertexFormatInfo[format];\n    const bitSize = formatInfo.bytesPerComponent * 8;\n\n    switch (formatInfo.type) {\n      case 'float': {\n        // -0.0 and +0.0 have different bit patterns, but compare as equal.\n        const data = [42.42, 0.0, -0.0, 1.0, -1.0, 1000, -18.7, 25.17];\n        const expectedData = new Float32Array(data).buffer;\n        const vertexData =\n          bitSize === 32\n            ? expectedData\n            : bitSize === 16\n            ? new Uint16Array(data.map(float32ToFloat16Bits)).buffer\n            : unreachable();\n\n        return {\n          shaderBaseType: 'f32',\n          testComponentCount: data.length,\n          expectedData,\n          vertexData,\n          floatTolerance: 0.05,\n        };\n      }\n\n      case 'sint': {\n        /* prettier-ignore */\n        const data = [\n          42,\n          0, 1, 2, 3, 4, 5,\n          -1, -2, -3, -4, -5,\n          Math.pow(2, bitSize - 2),\n          Math.pow(2, bitSize - 1) - 1, // max value\n          -Math.pow(2, bitSize - 2),\n          -Math.pow(2, bitSize - 1), // min value\n        ];\n        const expectedData = new Int32Array(data).buffer;\n        const vertexData =\n          bitSize === 32\n            ? expectedData\n            : bitSize === 16\n            ? new Int16Array(data).buffer\n            : new Int8Array(data).buffer;\n\n        return {\n          shaderBaseType: 'i32',\n          testComponentCount: data.length,\n          expectedData,\n          vertexData,\n        };\n      }\n\n      case 'uint': {\n        /* prettier-ignore */\n        const data = [\n          42,\n          0, 1, 2, 3, 4, 5,\n          Math.pow(2, bitSize - 1),\n          Math.pow(2, bitSize) - 1, // max value\n        ];\n        const expectedData = new Uint32Array(data).buffer;\n        const vertexData =\n          bitSize === 32\n            ? expectedData\n            : bitSize === 16\n            ? new Uint16Array(data).buffer\n            : new Uint8Array(data).buffer;\n\n        return {\n          shaderBaseType: 'u32',\n          testComponentCount: data.length,\n          expectedData,\n          vertexData,\n        };\n      }\n\n      case 'snorm': {\n        /* prettier-ignore */\n        const data = [\n          42,\n          0, 1, 2, 3, 4, 5,\n          -1, -2, -3, -4, -5,\n          Math.pow(2,bitSize - 2),\n          Math.pow(2,bitSize - 1) - 1, // max value\n          -Math.pow(2,bitSize - 2),\n          -Math.pow(2,bitSize - 1), // min value\n        ];\n        const vertexData =\n          bitSize === 16\n            ? new Int16Array(data).buffer\n            : bitSize === 8\n            ? new Int8Array(data).buffer\n            : unreachable();\n\n        return {\n          shaderBaseType: 'f32',\n          testComponentCount: data.length,\n          expectedData: new Float32Array(data.map(v => normalizedIntegerAsFloat(v, bitSize, true)))\n            .buffer,\n          vertexData,\n          floatTolerance: 0.1 * normalizedIntegerAsFloat(1, bitSize, true),\n        };\n      }\n\n      case 'unorm': {\n        /* prettier-ignore */\n        const data = [\n          42,\n          0, 1, 2, 3, 4, 5,\n          Math.pow(2, bitSize - 1),\n          Math.pow(2, bitSize) - 1, // max value\n        ];\n        const vertexData =\n          bitSize === 16\n            ? new Uint16Array(data).buffer\n            : bitSize === 8\n            ? new Uint8Array(data).buffer\n            : unreachable();\n\n        return {\n          shaderBaseType: 'f32',\n          testComponentCount: data.length,\n          expectedData: new Float32Array(data.map(v => normalizedIntegerAsFloat(v, bitSize, false)))\n            .buffer,\n          vertexData,\n          floatTolerance: 0.1 * normalizedIntegerAsFloat(1, bitSize, false),\n        };\n      }\n    }\n  }\n\n  // The TestData generated for a format might not contain enough data for all the vertices we are\n  // going to draw, so we expand them by adding additional copies of the vertexData as needed.\n  // expectedData is a bit different because it also needs to be unpacked to have `componentCount`\n  // components every 4 components (because the shader uses vec4 for the expected data).\n  expandTestData(data: TestData, maxCount: number, componentCount: number): TestData {\n    const vertexComponentSize = data.vertexData.byteLength / data.testComponentCount;\n    const expectedComponentSize = data.expectedData.byteLength / data.testComponentCount;\n\n    const expandedVertexData = new Uint8Array(maxCount * componentCount * vertexComponentSize);\n    const expandedExpectedData = new Uint8Array(4 * maxCount * expectedComponentSize);\n\n    for (let index = 0; index < maxCount; index++) {\n      for (let component = 0; component < componentCount; component++) {\n        // If only we had some builtin JS memcpy function between ArrayBuffers...\n        const targetVertexOffset = (index * componentCount + component) * vertexComponentSize;\n        const sourceVertexOffset = targetVertexOffset % data.vertexData.byteLength;\n        memcpy(\n          { src: data.vertexData, start: sourceVertexOffset, length: vertexComponentSize },\n          { dst: expandedVertexData, start: targetVertexOffset }\n        );\n\n        const targetExpectedOffset = (index * 4 + component) * expectedComponentSize;\n        const sourceExpectedOffset =\n          ((index * componentCount + component) * expectedComponentSize) %\n          data.expectedData.byteLength;\n        memcpy(\n          { src: data.expectedData, start: sourceExpectedOffset, length: expectedComponentSize },\n          { dst: expandedExpectedData, start: targetExpectedOffset }\n        );\n      }\n    }\n\n    return {\n      shaderBaseType: data.shaderBaseType,\n      testComponentCount: maxCount * componentCount,\n      floatTolerance: data.floatTolerance,\n      expectedData: expandedExpectedData.buffer,\n      vertexData: expandedVertexData.buffer,\n    };\n  }\n\n  // Copies `size` bytes from `source` to `target` starting at `offset` each `targetStride`.\n  // (the data in `source` is assumed packed)\n  interleaveVertexDataInto(\n    target: ArrayBuffer,\n    src: ArrayBuffer,\n    { targetStride, offset, size }: { targetStride: number; offset: number; size: number }\n  ) {\n    const dst = new Uint8Array(target);\n    for (\n      let srcStart = 0, dstStart = offset;\n      srcStart < src.byteLength;\n      srcStart += size, dstStart += targetStride\n    ) {\n      memcpy({ src, start: srcStart, length: size }, { dst, start: dstStart });\n    }\n  }\n\n  createTestAndPipelineData<V, A>(\n    state: VertexLayoutState<V, A>,\n    vertexCount: number,\n    instanceCount: number\n  ): VertexLayoutState<V, A & TestData> {\n    // Gather the test data and some additional test state for attribs.\n    return mapStateAttribs(state, (buffer, attrib) => {\n      const maxCount = buffer.stepMode === 'instance' ? instanceCount : vertexCount;\n      const formatInfo = kVertexFormatInfo[attrib.format];\n\n      let testData = this.generateTestData(attrib.format);\n      testData = this.expandTestData(testData, maxCount, formatInfo.componentCount);\n\n      return {\n        ...testData,\n        ...attrib,\n      };\n    });\n  }\n\n  createExpectedBG(state: VertexState<{}, TestData>, pipeline: GPURenderPipeline): GPUBindGroup {\n    // Create the bindgroups from that test data\n    const bgEntries: GPUBindGroupEntry[] = [];\n\n    for (const buffer of state) {\n      for (const attrib of buffer.attributes) {\n        const expectedDataBuffer = this.makeBufferWithContents(\n          new Uint8Array(attrib.expectedData),\n          GPUBufferUsage.UNIFORM | GPUBufferUsage.STORAGE\n        );\n        bgEntries.push({\n          binding: attrib.shaderLocation,\n          resource: { buffer: expectedDataBuffer },\n        });\n      }\n    }\n\n    return this.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: bgEntries,\n    });\n  }\n\n  createVertexBuffers(\n    state: VertexLayoutState<{ vbOffset?: number }, TestData>,\n    vertexCount: number,\n    instanceCount: number\n  ): VertexState<{ buffer: GPUBuffer; vbOffset?: number }, {}> {\n    // Create the vertex buffers\n    const vertexBuffers: VertexState<{ buffer: GPUBuffer; vbOffset?: number }, {}> = [];\n\n    for (const buffer of state) {\n      const maxCount = buffer.stepMode === 'instance' ? instanceCount : vertexCount;\n\n      // Fill the vertex data with garbage so that we don't get `0` (which could be a test value)\n      // if the vertex shader loads the vertex data incorrectly.\n      const vertexData = new ArrayBuffer(\n        align(buffer.arrayStride * maxCount + (buffer.vbOffset ?? 0), 4)\n      );\n      new Uint8Array(vertexData).fill(0xc4);\n\n      for (const attrib of buffer.attributes) {\n        const formatInfo = kVertexFormatInfo[attrib.format];\n        this.interleaveVertexDataInto(vertexData, attrib.vertexData, {\n          targetStride: buffer.arrayStride,\n          offset: (buffer.vbOffset ?? 0) + attrib.offset,\n          size: formatInfo.componentCount * formatInfo.bytesPerComponent,\n        });\n      }\n\n      vertexBuffers.push({\n        slot: buffer.slot,\n        buffer: this.makeBufferWithContents(new Uint8Array(vertexData), GPUBufferUsage.VERTEX),\n        vbOffset: buffer.vbOffset,\n        attributes: [],\n      });\n    }\n\n    return vertexBuffers;\n  }\n\n  runTest(\n    buffers: VertexLayoutState<{ vbOffset?: number }, { shaderComponentCount?: number }>,\n    // Default to using 20 vertices and 20 instances so that we cover each of the test data at least\n    // once (at the time of writing the largest testData has 16 values).\n    vertexCount: number = 20,\n    instanceCount: number = 20\n  ) {\n    const testData = this.createTestAndPipelineData(buffers, vertexCount, instanceCount);\n    const pipeline = this.makeTestPipeline(testData, vertexCount, instanceCount);\n    const expectedDataBG = this.createExpectedBG(testData, pipeline);\n    const vertexBuffers = this.createVertexBuffers(testData, vertexCount, instanceCount);\n    this.submitRenderPass(pipeline, vertexBuffers, expectedDataBG, vertexCount, instanceCount);\n  }\n}\n\nexport const g = makeTestGroup(VertexStateTest);\n\ng.test('vertex_format_to_shader_format_conversion')\n  .desc(\n    `Test that the raw data passed in vertex buffers is correctly converted to the input type in the shader. Test for:\n  - all formats\n  - 1 to 4 components in the shader's input type (unused components are filled with 0 and except the 4th with 1)\n  - various locations\n  - various slots`\n  )\n  .params(u =>\n    u //\n      .combine('format', kVertexFormats)\n      .combine('shaderComponentCount', [1, 2, 3, 4])\n      .beginSubcases()\n      .combine('slotVariant', [\n        { mult: 0, add: 0 },\n        { mult: 0, add: 1 },\n        { mult: 1, add: -1 },\n      ])\n      .combine('shaderLocationVariant', [\n        { mult: 0, add: 0 },\n        { mult: 0, add: 1 },\n        { mult: 1, add: -1 },\n      ])\n  )\n  .fn(t => {\n    const { format, shaderComponentCount, slotVariant, shaderLocationVariant } = t.params;\n    const slot = t.makeLimitVariant('maxVertexBuffers', slotVariant);\n    const shaderLocation = t.makeLimitVariant('maxVertexAttributes', shaderLocationVariant);\n    t.runTest([\n      {\n        slot,\n        arrayStride: 16,\n        stepMode: 'vertex',\n        attributes: [\n          {\n            shaderLocation,\n            format,\n            offset: 0,\n            shaderComponentCount,\n          },\n        ],\n      },\n    ]);\n  });\n\ng.test('setVertexBuffer_offset_and_attribute_offset')\n  .desc(\n    `Test that the vertex buffer offset and attribute offset in the vertex state are applied correctly. Test for:\n  - all formats\n  - various setVertexBuffer offsets\n  - various attribute offsets in a fixed arrayStride`\n  )\n  .params(u =>\n    u //\n      .combine('format', kVertexFormats)\n      .beginSubcases()\n      .combine('vbOffset', [0, 4, 400, 1004])\n      .combine('arrayStride', [128])\n      .expand('offset', p => {\n        const formatInfo = kVertexFormatInfo[p.format];\n        const formatSize = formatInfo.bytesPerComponent * formatInfo.componentCount;\n        return new Set([\n          0,\n          4,\n          8,\n          formatSize,\n          formatSize * 2,\n          p.arrayStride / 2,\n          p.arrayStride - formatSize - 4,\n          p.arrayStride - formatSize - 8,\n          p.arrayStride - formatSize - formatSize,\n          p.arrayStride - formatSize - formatSize * 2,\n          p.arrayStride - formatSize,\n        ]);\n      })\n  )\n  .fn(t => {\n    const { format, vbOffset, arrayStride, offset } = t.params;\n    t.runTest([\n      {\n        slot: 0,\n        arrayStride,\n        stepMode: 'vertex',\n        vbOffset,\n        attributes: [\n          {\n            shaderLocation: 0,\n            format,\n            offset,\n          },\n        ],\n      },\n    ]);\n  });\n\ng.test('non_zero_array_stride_and_attribute_offset')\n  .desc(\n    `Test that the array stride and attribute offset in the vertex state are applied correctly. Test for:\n  - all formats\n  - various array strides\n  - various attribute offsets in a fixed arrayStride`\n  )\n  .params(u =>\n    u //\n      .combine('format', kVertexFormats)\n      .beginSubcases()\n      .expand('arrayStrideVariant', p => {\n        const formatInfo = kVertexFormatInfo[p.format];\n        const formatSize = formatInfo.bytesPerComponent * formatInfo.componentCount;\n\n        return [\n          { mult: 0, add: align(formatSize, 4) },\n          { mult: 0, add: align(formatSize, 4) + 4 },\n          { mult: 1, add: 0 },\n        ];\n      })\n      .expand('offsetVariant', p => {\n        const formatInfo = kVertexFormatInfo[p.format];\n        const formatSize = formatInfo.bytesPerComponent * formatInfo.componentCount;\n        return [\n          { mult: 0, add: 0 },\n          { mult: 0, add: formatSize },\n          { mult: 0, add: 4 },\n          { mult: 0.5, add: 0 },\n          { mult: 1, add: -formatSize * 2 },\n          { mult: 1, add: -formatSize - 4 },\n          { mult: 1, add: -formatSize },\n        ];\n      })\n  )\n  .fn(t => {\n    const { format, arrayStrideVariant, offsetVariant } = t.params;\n    const arrayStride = t.makeLimitVariant('maxVertexBufferArrayStride', arrayStrideVariant);\n    const formatInfo = kVertexFormatInfo[format];\n    const formatSize = formatInfo.bytesPerComponent * formatInfo.componentCount;\n    const offset = clamp(makeValueTestVariant(arrayStride, offsetVariant), {\n      min: 0,\n      max: arrayStride - formatSize,\n    });\n\n    t.runTest([\n      {\n        slot: 0,\n        arrayStride,\n        stepMode: 'vertex',\n        attributes: [\n          {\n            shaderLocation: 0,\n            format,\n            offset,\n          },\n        ],\n      },\n    ]);\n  });\n\ng.test('buffers_with_varying_step_mode')\n  .desc(\n    `Test buffers with varying step modes in the same vertex state.\n  - Various combination of step modes`\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('stepModes', [\n        ['instance'],\n        ['vertex', 'vertex', 'instance'],\n        ['instance', 'vertex', 'instance'],\n        ['vertex', 'instance', 'vertex', 'vertex'],\n      ])\n  )\n  .fn(t => {\n    const { stepModes } = t.params;\n    const state = (stepModes as GPUVertexStepMode[]).map((stepMode, i) => ({\n      slot: i,\n      arrayStride: 4,\n      stepMode,\n      attributes: [\n        {\n          shaderLocation: i,\n          format: 'float32' as const,\n          offset: 0,\n        },\n      ],\n    }));\n    t.runTest(state);\n  });\n\ng.test('vertex_buffer_used_multiple_times_overlapped')\n  .desc(\n    `Test using the same vertex buffer in for multiple \"vertex buffers\", with data from each buffer overlapping.\n  - For each vertex format.\n  - For various numbers of vertex buffers [2, 3, max]`\n  )\n  .params(u =>\n    u //\n      .combine('format', kVertexFormats)\n      .beginSubcases()\n      .combine('vbCountVariant', [\n        { mult: 0, add: 2 },\n        { mult: 0, add: 3 },\n        { mult: 1, add: 0 },\n      ])\n      .combine('additionalVBOffset', [0, 4, 120])\n  )\n  .fn(t => {\n    const { format, vbCountVariant, additionalVBOffset } = t.params;\n    const vbCount = t.makeLimitVariant('maxVertexBuffers', vbCountVariant);\n    const kVertexCount = 20;\n    const kInstanceCount = 1;\n    const formatInfo = kVertexFormatInfo[format];\n    const formatByteSize = formatInfo.bytesPerComponent * formatInfo.componentCount;\n    // We need to align so the offset for non-0 setVertexBuffer don't fail validation.\n    const alignedFormatByteSize = align(formatByteSize, 4);\n\n    // In this test we want to test using the same vertex buffer for multiple different attributes.\n    // For example if vbCount is 3, we will create a vertex buffer containing the following data:\n    //    a0, a1, a2, a3, ..., a<baseDataVertexCount>\n    // We also create the expected data for the vertex fetching from that buffer so we can modify it\n    // below.\n    const baseDataVertexCount = kVertexCount + vbCount - 1;\n    const baseData = t.createTestAndPipelineData(\n      [\n        {\n          slot: 0,\n          arrayStride: alignedFormatByteSize,\n          stepMode: 'vertex',\n          vbOffset: additionalVBOffset,\n          attributes: [{ shaderLocation: 0, format, offset: 0 }],\n        },\n      ],\n      baseDataVertexCount,\n      kInstanceCount\n    );\n    const vertexBuffer = t.createVertexBuffers(baseData, baseDataVertexCount, kInstanceCount)[0]\n      .buffer;\n\n    // We are going to bind the vertex buffer multiple times, each time at a different offset that's\n    // a multiple of the data size. So what should be fetched by the vertex shader is:\n    //    - attrib0: a0, a1, ..., a19\n    //    - attrib1: a1, a2, ..., a20\n    //    - attrib2: a2, a3, ..., a21\n    //    etc.\n    // We re-create the test data by:\n    //   1) creating multiple \"vertex buffers\" that all point at the GPUBuffer above but at\n    //      different offsets.\n    //   2) selecting what parts of the expectedData each attribute will see in the expectedData for\n    //      the full vertex buffer.\n    const baseTestData = baseData[0].attributes[0];\n    assert(baseTestData.testComponentCount === formatInfo.componentCount * baseDataVertexCount);\n    const expectedDataBytesPerVertex = baseTestData.expectedData.byteLength / baseDataVertexCount;\n\n    const testData: VertexLayoutState<{}, TestData> = [];\n    const vertexBuffers: VertexState<{ buffer: GPUBuffer; vbOffset: number }, {}> = [];\n    for (let i = 0; i < vbCount; i++) {\n      vertexBuffers.push({\n        buffer: vertexBuffer,\n        slot: i,\n        vbOffset: additionalVBOffset + i * alignedFormatByteSize,\n        attributes: [],\n      });\n\n      testData.push({\n        slot: i,\n        arrayStride: alignedFormatByteSize,\n        stepMode: 'vertex',\n        attributes: [\n          {\n            shaderLocation: i,\n            format,\n            offset: 0,\n\n            shaderBaseType: baseTestData.shaderBaseType,\n            floatTolerance: baseTestData.floatTolerance,\n            // Select vertices [i, i + kVertexCount]\n            testComponentCount: kVertexCount * formatInfo.componentCount,\n            expectedData: baseTestData.expectedData.slice(\n              expectedDataBytesPerVertex * i,\n              expectedDataBytesPerVertex * (kVertexCount + i)\n            ),\n            vertexData: new ArrayBuffer(0),\n          },\n        ],\n      });\n    }\n\n    // Run the test with the modified test data.\n    const pipeline = t.makeTestPipeline(testData, kVertexCount, kInstanceCount);\n    const expectedDataBG = t.createExpectedBG(testData, pipeline);\n    t.submitRenderPass(pipeline, vertexBuffers, expectedDataBG, kVertexCount, kInstanceCount);\n  });\n\ng.test('vertex_buffer_used_multiple_times_interleaved')\n  .desc(\n    `Test using the same vertex buffer in for multiple \"vertex buffers\", with data from each buffer interleaved.\n  - For each vertex format.\n  - For various numbers of vertex buffers [2, 3, max]`\n  )\n  .params(u =>\n    u //\n      .combine('format', kVertexFormats)\n      .beginSubcases()\n      .combine('vbCountVariant', [\n        { mult: 0, add: 2 },\n        { mult: 0, add: 3 },\n        { mult: 1, add: 0 },\n      ])\n      .combine('additionalVBOffset', [0, 4, 120])\n  )\n  .fn(t => {\n    const { format, vbCountVariant, additionalVBOffset } = t.params;\n    const vbCount = t.makeLimitVariant('maxVertexBuffers', vbCountVariant);\n    const kVertexCount = 20;\n    const kInstanceCount = 1;\n    const formatInfo = kVertexFormatInfo[format];\n    const formatByteSize = formatInfo.bytesPerComponent * formatInfo.componentCount;\n    // We need to align so the offset for non-0 setVertexBuffer don't fail validation.\n    const alignedFormatByteSize = align(formatByteSize, 4);\n\n    // Create data for a single vertex buffer with many attributes, that will be split between\n    // many vertex buffers set at different offsets.\n\n    // In this test we want to test using the same vertex buffer for multiple different attributes.\n    // For example if vbCount is 3, we will create a vertex buffer containing the following data:\n    //    a0, a0, a0, a1, a1, a1, ...\n    // To do that we create a single vertex buffer with `vbCount` attributes that all have the same\n    // format.\n    const attribs: GPUVertexAttribute[] = [];\n    for (let i = 0; i < vbCount; i++) {\n      attribs.push({ format, offset: i * alignedFormatByteSize, shaderLocation: i });\n    }\n    const baseData = t.createTestAndPipelineData(\n      [\n        {\n          slot: 0,\n          arrayStride: alignedFormatByteSize * vbCount,\n          stepMode: 'vertex',\n          vbOffset: additionalVBOffset,\n          attributes: attribs,\n        },\n      ],\n      // Request one vertex more than what we need so we have an extra full stride. Otherwise WebGPU\n      // validation of vertex being in bounds will fail for all vertex buffers at an offset that's\n      // not 0 (since their last stride will go beyond the data for vertex kVertexCount -1).\n      kVertexCount + 1,\n      kInstanceCount\n    );\n    const vertexBuffer = t.createVertexBuffers(baseData, kVertexCount + 1, kInstanceCount)[0]\n      .buffer;\n\n    // Then we recreate test data by:\n    //   1) creating multiple \"vertex buffers\" that all point at the GPUBuffer above but at\n    //      different offsets.\n    //   2) have multiple vertex buffer, each with one attributes that will expect a0, a1, ...\n    const testData: VertexLayoutState<{}, TestData> = [];\n    const vertexBuffers: VertexState<{ buffer: GPUBuffer; vbOffset: number }, {}> = [];\n    for (let i = 0; i < vbCount; i++) {\n      vertexBuffers.push({\n        slot: i,\n        buffer: vertexBuffer,\n        vbOffset: additionalVBOffset + i * alignedFormatByteSize,\n        attributes: [],\n      });\n      testData.push({\n        ...baseData[0],\n        slot: i,\n        attributes: [{ ...baseData[0].attributes[i], offset: 0 }],\n      });\n    }\n\n    // Run the test with the modified test data.\n    const pipeline = t.makeTestPipeline(testData, kVertexCount, kInstanceCount);\n    const expectedDataBG = t.createExpectedBG(testData, pipeline);\n    t.submitRenderPass(pipeline, vertexBuffers, expectedDataBG, kVertexCount, kInstanceCount);\n  });\n\ng.test('max_buffers_and_attribs')\n  .desc(\n    `Test a vertex state that loads as many attributes and buffers as possible.\n  - For each format.\n  `\n  )\n  .params(u => u.combine('format', kVertexFormats))\n  .fn(t => {\n    const { format } = t.params;\n    // In compat mode, @builtin(vertex_index) and @builtin(instance_index) each take an attribute\n    const maxVertexBuffers = t.device.limits.maxVertexBuffers;\n    const deviceMaxVertexAttributes = t.device.limits.maxVertexAttributes;\n    const maxVertexAttributes = deviceMaxVertexAttributes - (t.isCompatibility ? 2 : 0);\n    const attributesPerBuffer = Math.ceil(maxVertexAttributes / maxVertexBuffers);\n    let attributesEmitted = 0;\n\n    const state: VertexLayoutState<{}, {}> = [];\n    for (let i = 0; i < maxVertexBuffers; i++) {\n      const attributes: GPUVertexAttribute[] = [];\n      for (let j = 0; j < attributesPerBuffer && attributesEmitted < maxVertexAttributes; j++) {\n        attributes.push({ format, offset: 0, shaderLocation: attributesEmitted });\n        attributesEmitted++;\n      }\n      state.push({\n        slot: i,\n        stepMode: 'vertex',\n        arrayStride: 32,\n        attributes,\n      });\n    }\n    t.runTest(state);\n  });\n\ng.test('array_stride_zero')\n  .desc(\n    `Test that arrayStride 0 correctly uses the same data for all vertex/instances, while another test vertex buffer with arrayStride != 0 gets different data.\n  - Test for all formats\n  - Test for both step modes`\n  )\n  .params(u =>\n    u //\n      .combine('format', kVertexFormats)\n      .beginSubcases()\n      .combine('stepMode', ['vertex', 'instance'] as const)\n      .expand('offsetVariant', p => {\n        const formatInfo = kVertexFormatInfo[p.format];\n        const formatSize = formatInfo.bytesPerComponent * formatInfo.componentCount;\n        return filterUniqueValueTestVariants([\n          { mult: 0, add: 0 },\n          { mult: 0, add: 4 },\n          { mult: 0, add: 8 },\n          { mult: 0, add: formatSize },\n          { mult: 0, add: formatSize * 2 },\n          { mult: 0.5, add: 0 },\n          { mult: 1, add: -formatSize - 4 },\n          { mult: 1, add: -formatSize - 8 },\n          { mult: 1, add: -formatSize },\n          { mult: 1, add: -formatSize * 2 },\n        ]);\n      })\n  )\n  .fn(t => {\n    const { format, stepMode, offsetVariant } = t.params;\n    const offset = t.makeLimitVariant('maxVertexBufferArrayStride', offsetVariant);\n    const kCount = 10;\n\n    // Create the stride 0 part of the test, first by faking a single vertex being drawn and\n    // then expanding the data to cover kCount vertex / instances\n    const stride0TestData = t.createTestAndPipelineData(\n      [\n        {\n          slot: 0,\n          arrayStride: 2048,\n          stepMode,\n          vbOffset: offset, // used to push data in the vertex buffer\n          attributes: [{ format, offset: 0, shaderLocation: 0 }],\n        },\n      ],\n      1,\n      1\n    )[0];\n    const stride0VertexBuffer = t.createVertexBuffers([stride0TestData], kCount, kCount)[0];\n\n    // Expand the stride0 test data to have kCount values for expectedData.\n    const originalData = stride0TestData.attributes[0].expectedData;\n    const expandedData = new ArrayBuffer(kCount * originalData.byteLength);\n    for (let i = 0; i < kCount; i++) {\n      new Uint8Array(expandedData, originalData.byteLength * i).set(new Uint8Array(originalData));\n    }\n\n    // Fixup stride0TestData to use arrayStride 0.\n    stride0TestData.attributes[0].offset = offset;\n    stride0TestData.attributes[0].expectedData = expandedData;\n    stride0TestData.attributes[0].testComponentCount *= kCount;\n    stride0TestData.arrayStride = 0;\n    stride0VertexBuffer.vbOffset = 0;\n\n    // Create the part of the state that will be varying for each vertex / instance\n    const varyingTestData = t.createTestAndPipelineData(\n      [\n        {\n          slot: 1,\n          arrayStride: 32,\n          stepMode,\n          attributes: [{ format, offset: 0, shaderLocation: 1 }],\n        },\n      ],\n      kCount,\n      kCount\n    )[0];\n    const varyingVertexBuffer = t.createVertexBuffers([varyingTestData], kCount, kCount)[0];\n\n    // Run the test with the merged test state.\n    const state = [stride0TestData, varyingTestData];\n    const vertexBuffers = [stride0VertexBuffer, varyingVertexBuffer];\n\n    const pipeline = t.makeTestPipeline(state, kCount, kCount);\n    const expectedDataBG = t.createExpectedBG(state, pipeline);\n    t.submitRenderPass(pipeline, vertexBuffers, expectedDataBG, kCount, kCount);\n  });\n\ng.test('discontiguous_location_and_attribs')\n  .desc('Test that using far away slots / shaderLocations works as expected')\n  .fn(t => {\n    t.runTest([\n      {\n        slot: t.device.limits.maxVertexBuffers - 1,\n        arrayStride: 4,\n        stepMode: 'vertex',\n        attributes: [\n          { format: 'uint8x2', offset: 2, shaderLocation: 0 },\n          { format: 'uint8x2', offset: 0, shaderLocation: 8 },\n        ],\n      },\n      {\n        slot: 1,\n        arrayStride: 16,\n        stepMode: 'instance',\n        vbOffset: 1000,\n        attributes: [\n          {\n            format: 'uint32x4',\n            offset: 0,\n            shaderLocation: t.device.limits.maxVertexAttributes - 1,\n          },\n        ],\n      },\n    ]);\n  });\n\ng.test('overlapping_attributes')\n  .desc(\n    `Test that overlapping attributes in the same vertex buffer works\n   - Test for all formats`\n  )\n  .params(u => u.combine('format', kVertexFormats))\n  .fn(t => {\n    const { format } = t.params;\n\n    // In compat mode, @builtin(vertex_index) and @builtin(instance_index) each take an attribute\n    const maxVertexAttributes = t.device.limits.maxVertexAttributes - (t.isCompatibility ? 2 : 0);\n    const attributes: GPUVertexAttribute[] = [];\n    for (let i = 0; i < maxVertexAttributes; i++) {\n      attributes.push({ format, offset: 0, shaderLocation: i });\n    }\n\n    t.runTest([\n      {\n        slot: 0,\n        stepMode: 'vertex',\n        arrayStride: 32,\n        attributes,\n      },\n    ]);\n  });\n"],"mappings":"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"}