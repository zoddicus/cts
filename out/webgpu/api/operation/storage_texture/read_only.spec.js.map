{"version":3,"file":"read_only.spec.js","names":["description","makeTestGroup","unreachable","assert","Float16Array","kColorTextureFormats","kTextureFormatInfo","GPUTest","ComponentCount","format","F","InitTextureAndGetExpectedOutputBufferData","storageTexture","bytesPerBlock","undefined","width","height","depthOrArrayLayers","texelData","ArrayBuffer","texelTypedDataView","GetTypedArrayBufferViewForTexelData","componentCount","outputBufferData","outputBufferTypedData","GetTypedArrayBufferForOutputBufferData","SetData","texelValue","outputValue","texelDataIndex","component","texelComponentIndex","outputTexelComponentIndex","z","y","x","Math","max","f16Array","queue","writeTexture","texture","bytesPerRow","rowsPerImage","arrayBuffer","color","type","Uint32Array","Int32Array","Float32Array","Uint8Array","Uint16Array","Int8Array","Int16Array","GetOutputBufferWGSLType","DoTransform","outputBuffer","declaration","textureDeclaration","textureLoadCoord","computeShader","computePipeline","device","createComputePipeline","compute","module","createShaderModule","code","layout","bindGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","createView","buffer","commandEncoder","createCommandEncoder","computePassEncoder","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","submit","finish","g","test","desc","params","u","combine","filter","p","storage","fn","t","kWidth","textureSize","createTexture","size","usage","GPUTextureUsage","COPY_SRC","COPY_DST","STORAGE_BINDING","trackForCleanup","expectedData","createBuffer","GPUBufferUsage","STORAGE","expectGPUBufferValuesEqual"],"sources":["../../../../../src/webgpu/api/operation/storage_texture/read_only.spec.ts"],"sourcesContent":["export const description = `\nTests for the behavior of read-only storage textures.\n\nTODO:\n- Test the use of read-only storage textures in vertex and fragment shaders\n- Test 1D and 3D textures\n- Test mipmap level > 0\n- Test bgra8unorm with 'bgra8unorm-storage'\n- Test resource usage transitions with read-only storage textures\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { unreachable, assert } from '../../../../common/util/util.js';\nimport { Float16Array } from '../../../../external/petamoriken/float16/float16.js';\nimport {\n  ColorTextureFormat,\n  kColorTextureFormats,\n  kTextureFormatInfo,\n} from '../../../format_info.js';\nimport { GPUTest } from '../../../gpu_test.js';\n\nfunction ComponentCount(format: ColorTextureFormat): number {\n  switch (format) {\n    case 'r32float':\n    case 'r32sint':\n    case 'r32uint':\n      return 1;\n    case 'rg32float':\n    case 'rg32sint':\n    case 'rg32uint':\n      return 2;\n    case 'rgba32float':\n    case 'rgba32sint':\n    case 'rgba32uint':\n    case 'rgba8sint':\n    case 'rgba8uint':\n    case 'rgba8snorm':\n    case 'rgba8unorm':\n    case 'rgba16float':\n    case 'rgba16sint':\n    case 'rgba16uint':\n      return 4;\n    default:\n      unreachable();\n      return 0;\n  }\n}\n\nclass F extends GPUTest {\n  InitTextureAndGetExpectedOutputBufferData(\n    storageTexture: GPUTexture,\n    format: ColorTextureFormat\n  ): ArrayBuffer {\n    const bytesPerBlock = kTextureFormatInfo[format].bytesPerBlock;\n    assert(bytesPerBlock !== undefined);\n\n    const width = storageTexture.width;\n    const height = storageTexture.height;\n    const depthOrArrayLayers = storageTexture.depthOrArrayLayers;\n\n    const texelData = new ArrayBuffer(bytesPerBlock * width * height * depthOrArrayLayers);\n    const texelTypedDataView = this.GetTypedArrayBufferViewForTexelData(texelData, format);\n    const componentCount = ComponentCount(format);\n    const outputBufferData = new ArrayBuffer(4 * 4 * width * height * depthOrArrayLayers);\n    const outputBufferTypedData = this.GetTypedArrayBufferForOutputBufferData(\n      outputBufferData,\n      format\n    );\n\n    const SetData = (\n      texelValue: number,\n      outputValue: number,\n      texelDataIndex: number,\n      component: number\n    ) => {\n      const texelComponentIndex = texelDataIndex * componentCount + component;\n      texelTypedDataView[texelComponentIndex] = texelValue;\n      const outputTexelComponentIndex = texelDataIndex * 4 + component;\n      outputBufferTypedData[outputTexelComponentIndex] = outputValue;\n    };\n    for (let z = 0; z < depthOrArrayLayers; ++z) {\n      for (let y = 0; y < height; ++y) {\n        for (let x = 0; x < width; ++x) {\n          const texelDataIndex = z * width * height + y * width + x;\n          outputBufferTypedData[4 * texelDataIndex] = 0;\n          outputBufferTypedData[4 * texelDataIndex + 1] = 0;\n          outputBufferTypedData[4 * texelDataIndex + 2] = 0;\n          outputBufferTypedData[4 * texelDataIndex + 3] = 1;\n          for (let component = 0; component < componentCount; ++component) {\n            switch (format) {\n              case 'r32uint':\n              case 'rg32uint':\n              case 'rgba16uint':\n              case 'rgba32uint': {\n                const texelValue = 4 * texelDataIndex + component + 1;\n                SetData(texelValue, texelValue, texelDataIndex, component);\n                break;\n              }\n              case 'rgba8uint': {\n                const texelValue = (4 * texelDataIndex + component + 1) % 256;\n                SetData(texelValue, texelValue, texelDataIndex, component);\n                break;\n              }\n              case 'rgba8unorm': {\n                const texelValue = (4 * texelDataIndex + component + 1) % 256;\n                const outputValue = texelValue / 255.0;\n                SetData(texelValue, outputValue, texelDataIndex, component);\n                break;\n              }\n              case 'r32sint':\n              case 'rg32sint':\n              case 'rgba16sint':\n              case 'rgba32sint': {\n                const texelValue =\n                  (texelDataIndex & 1 ? 1 : -1) * (4 * texelDataIndex + component + 1);\n                SetData(texelValue, texelValue, texelDataIndex, component);\n                break;\n              }\n              case 'rgba8sint': {\n                const texelValue = ((4 * texelDataIndex + component + 1) % 256) - 128;\n                SetData(texelValue, texelValue, texelDataIndex, component);\n                break;\n              }\n              case 'rgba8snorm': {\n                const texelValue = ((4 * texelDataIndex + component + 1) % 256) - 128;\n                const outputValue = Math.max(texelValue / 127.0, -1.0);\n                SetData(texelValue, outputValue, texelDataIndex, component);\n                break;\n              }\n              case 'r32float':\n              case 'rg32float':\n              case 'rgba32float': {\n                const texelValue = (4 * texelDataIndex + component + 1) / 10.0;\n                SetData(texelValue, texelValue, texelDataIndex, component);\n                break;\n              }\n              case 'rgba16float': {\n                const texelValue = (4 * texelDataIndex + component + 1) / 10.0;\n                const f16Array = new Float16Array(1);\n                f16Array[0] = texelValue;\n                SetData(texelValue, f16Array[0], texelDataIndex, component);\n                break;\n              }\n              default:\n                unreachable();\n                break;\n            }\n          }\n        }\n      }\n    }\n    this.queue.writeTexture(\n      {\n        texture: storageTexture,\n      },\n      texelData,\n      {\n        bytesPerRow: bytesPerBlock * width,\n        rowsPerImage: height,\n      },\n      [width, height, depthOrArrayLayers]\n    );\n\n    return outputBufferData;\n  }\n\n  GetTypedArrayBufferForOutputBufferData(arrayBuffer: ArrayBuffer, format: ColorTextureFormat) {\n    switch (kTextureFormatInfo[format].color.type) {\n      case 'uint':\n        return new Uint32Array(arrayBuffer);\n      case 'sint':\n        return new Int32Array(arrayBuffer);\n      case 'float':\n      case 'unfilterable-float':\n        return new Float32Array(arrayBuffer);\n    }\n  }\n\n  GetTypedArrayBufferViewForTexelData(arrayBuffer: ArrayBuffer, format: ColorTextureFormat) {\n    switch (format) {\n      case 'r32uint':\n      case 'rg32uint':\n      case 'rgba32uint':\n        return new Uint32Array(arrayBuffer);\n      case 'rgba8uint':\n      case 'rgba8unorm':\n        return new Uint8Array(arrayBuffer);\n      case 'rgba16uint':\n        return new Uint16Array(arrayBuffer);\n      case 'r32sint':\n      case 'rg32sint':\n      case 'rgba32sint':\n        return new Int32Array(arrayBuffer);\n      case 'rgba8sint':\n      case 'rgba8snorm':\n        return new Int8Array(arrayBuffer);\n      case 'rgba16sint':\n        return new Int16Array(arrayBuffer);\n      case 'r32float':\n      case 'rg32float':\n      case 'rgba32float':\n        return new Float32Array(arrayBuffer);\n      case 'rgba16float':\n        return new Float16Array(arrayBuffer);\n      default:\n        unreachable();\n        return new Uint8Array(arrayBuffer);\n    }\n  }\n\n  GetOutputBufferWGSLType(format: ColorTextureFormat) {\n    switch (kTextureFormatInfo[format].color.type) {\n      case 'uint':\n        return 'vec4u';\n      case 'sint':\n        return 'vec4i';\n      case 'float':\n      case 'unfilterable-float':\n        return 'vec4f';\n      default:\n        unreachable();\n        return '';\n    }\n  }\n\n  DoTransform(storageTexture: GPUTexture, format: ColorTextureFormat, outputBuffer: GPUBuffer) {\n    const declaration =\n      storageTexture.depthOrArrayLayers > 1 ? 'texture_storage_2d_array' : 'texture_storage_2d';\n    const textureDeclaration = `\n    @group(0) @binding(0) var readOnlyTexture: ${declaration}<${format}, read>;\n    `;\n\n    const textureLoadCoord =\n      storageTexture.depthOrArrayLayers > 1\n        ? `vec2u(invocationID.x, invocationID.y), invocationID.z`\n        : `vec2u(invocationID.x, invocationID.y)`;\n    const computeShader = `\n    ${textureDeclaration}\n    @group(0) @binding(1)\n    var<storage,read_write> outputBuffer : array<${this.GetOutputBufferWGSLType(format)}>;\n    @compute\n    @workgroup_size(${storageTexture.width}, ${storageTexture.height}, ${\n      storageTexture.depthOrArrayLayers\n    })\n    fn main(\n      @builtin(local_invocation_id) invocationID: vec3u,\n      @builtin(local_invocation_index) invocationIndex: u32) {\n      let initialValue = textureLoad(readOnlyTexture, ${textureLoadCoord});\n      outputBuffer[invocationIndex] = initialValue;\n    }`;\n    const computePipeline = this.device.createComputePipeline({\n      compute: {\n        module: this.device.createShaderModule({\n          code: computeShader,\n        }),\n      },\n      layout: 'auto',\n    });\n    const bindGroup = this.device.createBindGroup({\n      layout: computePipeline.getBindGroupLayout(0),\n      entries: [\n        {\n          binding: 0,\n          resource: storageTexture.createView(),\n        },\n        {\n          binding: 1,\n          resource: {\n            buffer: outputBuffer,\n          },\n        },\n      ],\n    });\n\n    const commandEncoder = this.device.createCommandEncoder();\n    const computePassEncoder = commandEncoder.beginComputePass();\n    computePassEncoder.setPipeline(computePipeline);\n    computePassEncoder.setBindGroup(0, bindGroup);\n    computePassEncoder.dispatchWorkgroups(1);\n    computePassEncoder.end();\n    this.queue.submit([commandEncoder.finish()]);\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('basic')\n  .desc(\n    `The basic functionality tests for read-only storage textures. In the test we read data from\n    the read-only storage texture, write the data into an output storage buffer, and check if the\n    data in the output storage buffer is exactly what we expect.`\n  )\n  .params(u =>\n    u\n      .combine('format', kColorTextureFormats)\n      .filter(p => kTextureFormatInfo[p.format].color?.storage === true)\n      .combine('depthOrArrayLayers', [1, 2] as const)\n  )\n  .fn(t => {\n    const { format, depthOrArrayLayers } = t.params;\n\n    const kWidth = 8;\n    const height = 8;\n    const textureSize = [kWidth, height, depthOrArrayLayers] as const;\n    const storageTexture = t.device.createTexture({\n      format,\n      size: textureSize,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST | GPUTextureUsage.STORAGE_BINDING,\n    });\n    t.trackForCleanup(storageTexture);\n\n    const expectedData = t.InitTextureAndGetExpectedOutputBufferData(storageTexture, format);\n\n    const outputBuffer = t.device.createBuffer({\n      size: 4 * 4 * kWidth * height * depthOrArrayLayers,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.STORAGE,\n    });\n    t.trackForCleanup(outputBuffer);\n\n    t.DoTransform(storageTexture, format, outputBuffer);\n\n    switch (kTextureFormatInfo[format].color.type) {\n      case 'uint':\n        t.expectGPUBufferValuesEqual(outputBuffer, new Uint32Array(expectedData));\n        break;\n      case 'sint':\n        t.expectGPUBufferValuesEqual(outputBuffer, new Int32Array(expectedData));\n        break;\n      case 'float':\n      case 'unfilterable-float':\n        t.expectGPUBufferValuesEqual(outputBuffer, new Float32Array(expectedData));\n        break;\n      default:\n        unreachable();\n        break;\n    }\n  });\n"],"mappings":"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"}