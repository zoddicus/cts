{"version":3,"file":"overrides.spec.js","names":["description","makeTestGroup","range","GPUTest","F","ExpectShaderOutputWithConstants","isAsync","expected","constants","code","dst","device","createBuffer","size","byteLength","usage","GPUBufferUsage","COPY_SRC","STORAGE","descriptor","layout","compute","module","createShaderModule","entryPoint","promise","createComputePipelineAsync","Promise","resolve","createComputePipeline","pipeline","bindGroup","createBindGroup","entries","binding","resource","buffer","offset","getBindGroupLayout","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","queue","submit","finish","expectGPUBufferValuesEqual","g","test","desc","params","u","combine","fn","t","count","Uint32Array","i","c0","c1","c2","c3","c5","c6","c8","c9","Float32Array","type","v","workgroup_size_str","d","expects","buffers","BYTES_PER_ELEMENT","descriptors","a","promises","all","pipelines","bindGroups"],"sources":["../../../../../src/webgpu/api/operation/compute_pipeline/overrides.spec.ts"],"sourcesContent":["export const description = `\nCompute pipeline using overridable constants test.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { range } from '../../../../common/util/util.js';\nimport { GPUTest } from '../../../gpu_test.js';\n\nclass F extends GPUTest {\n  async ExpectShaderOutputWithConstants(\n    isAsync: boolean,\n    expected: Uint32Array | Float32Array,\n    constants: Record<string, GPUPipelineConstantValue>,\n    code: string\n  ) {\n    const dst = this.device.createBuffer({\n      size: expected.byteLength,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.STORAGE,\n    });\n\n    const descriptor: GPUComputePipelineDescriptor = {\n      layout: 'auto',\n      compute: {\n        module: this.device.createShaderModule({\n          code,\n        }),\n        entryPoint: 'main',\n        constants,\n      },\n    };\n\n    const promise = isAsync\n      ? this.device.createComputePipelineAsync(descriptor)\n      : Promise.resolve(this.device.createComputePipeline(descriptor));\n\n    const pipeline = await promise;\n    const bindGroup = this.device.createBindGroup({\n      entries: [{ binding: 0, resource: { buffer: dst, offset: 0, size: expected.byteLength } }],\n      layout: pipeline.getBindGroupLayout(0),\n    });\n\n    const encoder = this.device.createCommandEncoder();\n    const pass = encoder.beginComputePass();\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bindGroup);\n    pass.dispatchWorkgroups(1);\n    pass.end();\n    this.device.queue.submit([encoder.finish()]);\n\n    this.expectGPUBufferValuesEqual(dst, expected);\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('basic')\n  .desc(\n    `Test that either correct constants override values or default values when no constants override value are provided at pipeline creation time are used as the output to the storage buffer.`\n  )\n  .params(u => u.combine('isAsync', [true, false]))\n  .fn(async t => {\n    const count = 11;\n    await t.ExpectShaderOutputWithConstants(\n      t.params.isAsync,\n      new Uint32Array(range(count, i => i)),\n      {\n        c0: 0,\n        c1: 1,\n        c2: 2,\n        c3: 3,\n        // c4 is using default value\n        c5: 5,\n        c6: 6,\n        // c7 is using default value\n        c8: 8,\n        c9: 9,\n        // c10 is using default value\n      },\n      `\n      override c0: bool;              // type: bool\n      override c1: bool = false;      // default override\n      override c2: f32;               // type: float32\n      override c3: f32 = 0.0;         // default override\n      override c4: f32 = 4.0;         // default\n      override c5: i32;               // type: int32\n      override c6: i32 = 0;           // default override\n      override c7: i32 = 7;           // default\n      override c8: u32;               // type: uint32\n      override c9: u32 = 0u;          // default override\n      override c10: u32 = 10u;        // default\n\n      struct Buf {\n          data : array<u32, ${count}>\n      }\n\n      @group(0) @binding(0) var<storage, read_write> buf : Buf;\n\n      @compute @workgroup_size(1) fn main() {\n          buf.data[0] = u32(c0);\n          buf.data[1] = u32(c1);\n          buf.data[2] = u32(c2);\n          buf.data[3] = u32(c3);\n          buf.data[4] = u32(c4);\n          buf.data[5] = u32(c5);\n          buf.data[6] = u32(c6);\n          buf.data[7] = u32(c7);\n          buf.data[8] = u32(c8);\n          buf.data[9] = u32(c9);\n          buf.data[10] = u32(c10);\n      }\n    `\n    );\n  });\n\ng.test('numeric_id')\n  .desc(\n    `Test that correct values are used as output to the storage buffer for constants specified with numeric id instead of their names.`\n  )\n  .params(u => u.combine('isAsync', [true, false]))\n  .fn(async t => {\n    await t.ExpectShaderOutputWithConstants(\n      t.params.isAsync,\n      new Uint32Array([1, 2, 3]),\n      {\n        1001: 1,\n        1: 2,\n        // 1003 is using default value\n      },\n      `\n        @id(1001) override c1: u32;            // some big numeric id\n        @id(1) override c2: u32 = 0u;          // id == 1 might collide with some generated constant id\n        @id(1003) override c3: u32 = 3u;       // default\n\n        struct Buf {\n            data : array<u32, 3>\n        }\n\n        @group(0) @binding(0) var<storage, read_write> buf : Buf;\n\n        @compute @workgroup_size(1) fn main() {\n            buf.data[0] = c1;\n            buf.data[1] = c2;\n            buf.data[2] = c3;\n        }\n      `\n    );\n  });\n\ng.test('precision')\n  .desc(\n    `Test that float number precision is preserved for constants as they are used for compute shader output of the storage buffer.`\n  )\n  .params(u => u.combine('isAsync', [true, false]))\n  .fn(async t => {\n    const c1 = 3.14159;\n    const c2 = 3.141592653589793;\n    await t.ExpectShaderOutputWithConstants(\n      t.params.isAsync,\n      // These values will get rounded to f32 and createComputePipeline, so the values coming out from the shader won't be the exact same one as shown here.\n      new Float32Array([c1, c2]),\n      {\n        c1,\n        c2,\n      },\n      `\n        override c1: f32;\n        override c2: f32;\n\n        struct Buf {\n            data : array<f32, 2>\n        }\n\n        @group(0) @binding(0) var<storage, read_write> buf : Buf;\n\n        @compute @workgroup_size(1) fn main() {\n            buf.data[0] = c1;\n            buf.data[1] = c2;\n        }\n      `\n    );\n  });\n\ng.test('workgroup_size')\n  .desc(\n    `Test that constants can be used as workgroup size correctly, the compute shader should write the max local invocation id to the storage buffer which is equal to the workgroup size dimension given by the constant.`\n  )\n  .params(u =>\n    u //\n      .combine('isAsync', [true, false])\n      .combine('type', ['u32', 'i32'])\n      .combine('size', [3, 16, 64])\n      .combine('v', ['x', 'y', 'z'])\n  )\n  .fn(async t => {\n    const { isAsync, type, size, v } = t.params;\n    const workgroup_size_str = v === 'x' ? 'd' : v === 'y' ? '1, d' : '1, 1, d';\n    await t.ExpectShaderOutputWithConstants(\n      isAsync,\n      new Uint32Array([size]),\n      {\n        d: size,\n      },\n      `\n        override d: ${type};\n\n        struct Buf {\n            data : array<u32, 1>\n        }\n\n        @group(0) @binding(0) var<storage, read_write> buf : Buf;\n\n        @compute @workgroup_size(${workgroup_size_str}) fn main(\n            @builtin(local_invocation_id) local_invocation_id : vec3<u32>\n        ) {\n            if (local_invocation_id.${v} >= u32(d - 1)) {\n                buf.data[0] = local_invocation_id.${v} + 1;\n            }\n        }\n      `\n    );\n  });\n\ng.test('shared_shader_module')\n  .desc(\n    `Test that when the same shader module is shared by different pipelines, the correct constant values are used as output to the storage buffer. The constant value should not affect other pipeline sharing the same shader module.`\n  )\n  .params(u => u.combine('isAsync', [true, false]))\n  .fn(async t => {\n    const module = t.device.createShaderModule({\n      code: `\n      override a: u32;\n\n      struct Buf {\n          data : array<u32, 1>\n      }\n\n      @group(0) @binding(0) var<storage, read_write> buf : Buf;\n\n      @compute @workgroup_size(1) fn main() {\n          buf.data[0] = a;\n      }`,\n    });\n\n    const expects = [new Uint32Array([1]), new Uint32Array([2])];\n    const buffers = [\n      t.device.createBuffer({\n        size: Uint32Array.BYTES_PER_ELEMENT,\n        usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.STORAGE,\n      }),\n      t.device.createBuffer({\n        size: Uint32Array.BYTES_PER_ELEMENT,\n        usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.STORAGE,\n      }),\n    ];\n\n    const descriptors: GPUComputePipelineDescriptor[] = [\n      {\n        layout: 'auto',\n        compute: {\n          module,\n          entryPoint: 'main',\n          constants: {\n            a: 1,\n          },\n        },\n      },\n      {\n        layout: 'auto',\n        compute: {\n          module,\n          entryPoint: 'main',\n          constants: {\n            a: 2,\n          },\n        },\n      },\n    ];\n\n    const promises = t.params.isAsync\n      ? Promise.all([\n          t.device.createComputePipelineAsync(descriptors[0]),\n          t.device.createComputePipelineAsync(descriptors[1]),\n        ])\n      : Promise.resolve([\n          t.device.createComputePipeline(descriptors[0]),\n          t.device.createComputePipeline(descriptors[1]),\n        ]);\n\n    const pipelines = await promises;\n    const bindGroups = [\n      t.device.createBindGroup({\n        entries: [\n          {\n            binding: 0,\n            resource: { buffer: buffers[0], offset: 0, size: Uint32Array.BYTES_PER_ELEMENT },\n          },\n        ],\n        layout: pipelines[0].getBindGroupLayout(0),\n      }),\n      t.device.createBindGroup({\n        entries: [\n          {\n            binding: 0,\n            resource: { buffer: buffers[1], offset: 0, size: Uint32Array.BYTES_PER_ELEMENT },\n          },\n        ],\n        layout: pipelines[1].getBindGroupLayout(0),\n      }),\n    ];\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginComputePass();\n    pass.setPipeline(pipelines[0]);\n    pass.setBindGroup(0, bindGroups[0]);\n    pass.dispatchWorkgroups(1);\n    pass.setPipeline(pipelines[1]);\n    pass.setBindGroup(0, bindGroups[1]);\n    pass.dispatchWorkgroups(1);\n    pass.end();\n    t.device.queue.submit([encoder.finish()]);\n\n    t.expectGPUBufferValuesEqual(buffers[0], expects[0]);\n    t.expectGPUBufferValuesEqual(buffers[1], expects[1]);\n  });\n\ng.test('multi_entry_points')\n  .desc(\n    `Test that constants used for different entry points are used correctly as output to the storage buffer. They should have no impact for pipeline using entry points that doesn't reference them.`\n  )\n  .params(u => u.combine('isAsync', [true, false]))\n  .fn(async t => {\n    const module = t.device.createShaderModule({\n      code: `\n    override c1: u32;\n    override c2: u32;\n    override c3: u32;\n\n    struct Buf {\n        data : array<u32, 1>\n    }\n\n    @group(0) @binding(0) var<storage, read_write> buf : Buf;\n\n    @compute @workgroup_size(1) fn main1() {\n        buf.data[0] = c1;\n    }\n\n    @compute @workgroup_size(1) fn main2() {\n        buf.data[0] = c2;\n    }\n\n    @compute @workgroup_size(c3) fn main3() {\n        buf.data[0] = 3u;\n    }`,\n    });\n\n    const expects = [\n      new Uint32Array([1]),\n      new Uint32Array([2]),\n      new Uint32Array([3]),\n      new Uint32Array([4]),\n    ];\n\n    const buffers = [\n      t.device.createBuffer({\n        size: Uint32Array.BYTES_PER_ELEMENT,\n        usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.STORAGE,\n      }),\n      t.device.createBuffer({\n        size: Uint32Array.BYTES_PER_ELEMENT,\n        usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.STORAGE,\n      }),\n      t.device.createBuffer({\n        size: Uint32Array.BYTES_PER_ELEMENT,\n        usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.STORAGE,\n      }),\n      t.device.createBuffer({\n        size: Uint32Array.BYTES_PER_ELEMENT,\n        usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.STORAGE,\n      }),\n    ];\n\n    const descriptors: GPUComputePipelineDescriptor[] = [\n      {\n        layout: 'auto',\n        compute: {\n          module,\n          entryPoint: 'main1',\n          constants: {\n            c1: 1,\n          },\n        },\n      },\n      {\n        layout: 'auto',\n        compute: {\n          module,\n          entryPoint: 'main2',\n          constants: {\n            c2: 2,\n          },\n        },\n      },\n      {\n        layout: 'auto',\n        compute: {\n          module,\n          entryPoint: 'main3',\n          constants: {\n            // c3 is used as workgroup size\n            c3: 1,\n          },\n        },\n      },\n      {\n        layout: 'auto',\n        compute: {\n          module,\n          entryPoint: 'main1',\n          constants: {\n            // assign a different value to c1\n            c1: 4,\n          },\n        },\n      },\n    ];\n\n    const promises = t.params.isAsync\n      ? Promise.all([\n          t.device.createComputePipelineAsync(descriptors[0]),\n          t.device.createComputePipelineAsync(descriptors[1]),\n          t.device.createComputePipelineAsync(descriptors[2]),\n          t.device.createComputePipelineAsync(descriptors[3]),\n        ])\n      : Promise.resolve([\n          t.device.createComputePipeline(descriptors[0]),\n          t.device.createComputePipeline(descriptors[1]),\n          t.device.createComputePipeline(descriptors[2]),\n          t.device.createComputePipeline(descriptors[3]),\n        ]);\n\n    const pipelines = await promises;\n    const bindGroups = [\n      t.device.createBindGroup({\n        entries: [\n          {\n            binding: 0,\n            resource: { buffer: buffers[0], offset: 0, size: Uint32Array.BYTES_PER_ELEMENT },\n          },\n        ],\n        layout: pipelines[0].getBindGroupLayout(0),\n      }),\n      t.device.createBindGroup({\n        entries: [\n          {\n            binding: 0,\n            resource: { buffer: buffers[1], offset: 0, size: Uint32Array.BYTES_PER_ELEMENT },\n          },\n        ],\n        layout: pipelines[1].getBindGroupLayout(0),\n      }),\n      t.device.createBindGroup({\n        entries: [\n          {\n            binding: 0,\n            resource: { buffer: buffers[2], offset: 0, size: Uint32Array.BYTES_PER_ELEMENT },\n          },\n        ],\n        layout: pipelines[2].getBindGroupLayout(0),\n      }),\n      t.device.createBindGroup({\n        entries: [\n          {\n            binding: 0,\n            resource: { buffer: buffers[3], offset: 0, size: Uint32Array.BYTES_PER_ELEMENT },\n          },\n        ],\n        layout: pipelines[3].getBindGroupLayout(0),\n      }),\n    ];\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginComputePass();\n    pass.setPipeline(pipelines[0]);\n    pass.setBindGroup(0, bindGroups[0]);\n    pass.dispatchWorkgroups(1);\n    pass.setPipeline(pipelines[1]);\n    pass.setBindGroup(0, bindGroups[1]);\n    pass.dispatchWorkgroups(1);\n    pass.setPipeline(pipelines[2]);\n    pass.setBindGroup(0, bindGroups[2]);\n    pass.dispatchWorkgroups(1);\n    pass.setPipeline(pipelines[3]);\n    pass.setBindGroup(0, bindGroups[3]);\n    pass.dispatchWorkgroups(1);\n    pass.end();\n    t.device.queue.submit([encoder.finish()]);\n\n    t.expectGPUBufferValuesEqual(buffers[0], expects[0]);\n    t.expectGPUBufferValuesEqual(buffers[1], expects[1]);\n    t.expectGPUBufferValuesEqual(buffers[2], expects[2]);\n    t.expectGPUBufferValuesEqual(buffers[3], expects[3]);\n  });\n"],"mappings":"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"}