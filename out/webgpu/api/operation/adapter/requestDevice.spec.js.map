{"version":3,"file":"requestDevice.spec.js","names":["description","Fixture","makeTestGroup","getGPU","assert","assertReject","raceWithRejectOnTimeout","getDefaultLimitsForAdapter","kFeatureNames","kLimits","kLimitClasses","clamp","isPowerOfTwo","g","test","desc","paramsSubcasesOnly","u","combine","undefined","requiredFeatures","requiredLimits","fn","t","args","params","gpu","rec","adapter","requestAdapter","device","requestDevice","expect","features","size","limitInfo","limit","limits","default","destroy","lostInfo","lost","reason","kTimeoutMS","unless","initialError","awaitInitialError","awaitSuccess","shouldReject","minUniformBufferOffsetAlignment","promise","shouldResolve","lostDevice","feature","has","unknownLimitName","beginSubcases","limitValue","value","expandWithParams","p","mul","add","min","max","maximumValue","success","class"],"sources":["../../../../../src/webgpu/api/operation/adapter/requestDevice.spec.ts"],"sourcesContent":["export const description = `\nTest GPUAdapter.requestDevice.\n\nNote tests explicitly destroy created devices so that tests don't have to wait for GC to clean up\npotentially limited native resources.\n`;\n\nimport { Fixture } from '../../../../common/framework/fixture.js';\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { getGPU } from '../../../../common/util/navigator_gpu.js';\nimport { assert, assertReject, raceWithRejectOnTimeout } from '../../../../common/util/util.js';\nimport {\n  getDefaultLimitsForAdapter,\n  kFeatureNames,\n  kLimits,\n  kLimitClasses,\n} from '../../../capability_info.js';\nimport { clamp, isPowerOfTwo } from '../../../util/math.js';\n\nexport const g = makeTestGroup(Fixture);\n\ng.test('default')\n  .desc(\n    `\n    Test requesting the device with a variation of default parameters.\n    - No features listed in default device\n    - Default limits`\n  )\n  .paramsSubcasesOnly(u =>\n    u.combine('args', [\n      [],\n      [undefined],\n      [{}],\n      [{ requiredFeatures: [], requiredLimits: {} }],\n    ] as const)\n  )\n  .fn(async t => {\n    const { args } = t.params;\n    const gpu = getGPU(t.rec);\n    const adapter = await gpu.requestAdapter();\n    assert(adapter !== null);\n    const device = await adapter.requestDevice(...args);\n    assert(device !== null);\n\n    // Default device should have no features.\n    t.expect(device.features.size === 0, 'Default device should not have any features');\n    // All limits should be defaults.\n    const limitInfo = getDefaultLimitsForAdapter(adapter);\n    for (const limit of kLimits) {\n      t.expect(\n        device.limits[limit] === limitInfo[limit].default,\n        `Expected ${limit} == default: ${device.limits[limit]} != ${limitInfo[limit].default}`\n      );\n    }\n\n    device.destroy();\n  });\n\ng.test('invalid')\n  .desc(\n    `\n    Test that requesting device on an invalid adapter resolves with lost device.\n    - Induce invalid adapter via a device lost from a device.destroy()\n    - Check the device is lost with reason 'destroyed'\n    - Try creating another device on the now-stale adapter\n    - Check that returns a device lost with 'unknown'\n    `\n  )\n  .fn(async t => {\n    const gpu = getGPU(t.rec);\n    const adapter = await gpu.requestAdapter();\n    assert(adapter !== null);\n\n    {\n      // Request a device and destroy it immediately afterwards.\n      const device = await adapter.requestDevice();\n      assert(device !== null);\n      device.destroy();\n      const lostInfo = await device.lost;\n      t.expect(lostInfo.reason === 'destroyed');\n    }\n\n    // The adapter should now be invalid since a device was lost. Requesting another device should\n    // return an already lost device.\n    const kTimeoutMS = 1000;\n    const device = await adapter.requestDevice();\n    const lost = await raceWithRejectOnTimeout(device.lost, kTimeoutMS, 'device was not lost');\n    t.expect(lost.reason === 'unknown');\n  });\n\ng.test('stale')\n  .desc(\n    `\n    Test that adapter.requestDevice() can successfully return a device once, and once only.\n    - Tests that we can successfully resolve after serial and concurrent rejections.\n    - Tests that consecutive valid attempts only succeeds the first time, returning lost device otherwise.`\n  )\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('initialError', [undefined, 'TypeError', 'OperationError'])\n      .combine('awaitInitialError', [true, false])\n      .combine('awaitSuccess', [true, false])\n      .unless(\n        ({ initialError, awaitInitialError }) => initialError === undefined && awaitInitialError\n      )\n  )\n  .fn(async t => {\n    const gpu = getGPU(t.rec);\n    const adapter = await gpu.requestAdapter();\n    assert(adapter !== null);\n\n    const { initialError, awaitInitialError, awaitSuccess } = t.params;\n\n    switch (initialError) {\n      case undefined:\n        break;\n      case 'TypeError':\n        // Cause a type error by requesting with an unknown feature.\n        if (awaitInitialError) {\n          await assertReject(\n            adapter.requestDevice({ requiredFeatures: ['unknown-feature' as GPUFeatureName] })\n          );\n        } else {\n          t.shouldReject(\n            'TypeError',\n            adapter.requestDevice({ requiredFeatures: ['unknown-feature' as GPUFeatureName] })\n          );\n        }\n        break;\n      case 'OperationError':\n        // Cause an operation error by requesting with an alignment limit that is not a power of 2.\n        if (awaitInitialError) {\n          await assertReject(\n            adapter.requestDevice({ requiredLimits: { minUniformBufferOffsetAlignment: 255 } })\n          );\n        } else {\n          t.shouldReject(\n            'OperationError',\n            adapter.requestDevice({ requiredLimits: { minUniformBufferOffsetAlignment: 255 } })\n          );\n        }\n        break;\n    }\n\n    let device: GPUDevice | undefined = undefined;\n    const promise = adapter.requestDevice();\n    if (awaitSuccess) {\n      device = await promise;\n      assert(device !== null);\n    } else {\n      t.shouldResolve(\n        (async () => {\n          const device = await promise;\n          device.destroy();\n        })()\n      );\n    }\n\n    const kTimeoutMS = 1000;\n    const lostDevice = await adapter.requestDevice();\n    const lost = await raceWithRejectOnTimeout(\n      lostDevice.lost,\n      kTimeoutMS,\n      'adapter was not stale'\n    );\n    t.expect(lost.reason === 'unknown');\n\n    // Make sure to destroy the valid device after trying to get a second one. Otherwise, the second\n    // device may fail because the adapter is put into an invalid state from the destroy.\n    if (device) {\n      device.destroy();\n    }\n  });\n\ng.test('features,unknown')\n  .desc(\n    `\n    Test requesting device with an unknown feature.`\n  )\n  .fn(async t => {\n    const gpu = getGPU(t.rec);\n    const adapter = await gpu.requestAdapter();\n    assert(adapter !== null);\n\n    t.shouldReject(\n      'TypeError',\n      adapter.requestDevice({ requiredFeatures: ['unknown-feature' as GPUFeatureName] })\n    );\n  });\n\ng.test('features,known')\n  .desc(\n    `\n    Test requesting device with all features.\n    - Succeeds with device supporting feature if adapter supports the feature.\n    - Rejects if the adapter does not support the feature.`\n  )\n  .params(u => u.combine('feature', kFeatureNames))\n  .fn(async t => {\n    const { feature } = t.params;\n\n    const gpu = getGPU(t.rec);\n    const adapter = await gpu.requestAdapter();\n    assert(adapter !== null);\n\n    const promise = adapter.requestDevice({ requiredFeatures: [feature] });\n    if (adapter.features.has(feature)) {\n      const device = await promise;\n      t.expect(device.features.has(feature), 'Device should include the required feature');\n    } else {\n      t.shouldReject('TypeError', promise);\n    }\n  });\n\ng.test('limits,unknown')\n  .desc(\n    `\n    Test that specifying limits that aren't part of the supported limit set causes\n    requestDevice to reject.`\n  )\n  .fn(async t => {\n    const gpu = getGPU(t.rec);\n    const adapter = await gpu.requestAdapter();\n    assert(adapter !== null);\n\n    const requiredLimits: Record<string, number> = { unknownLimitName: 9000 };\n\n    t.shouldReject('OperationError', adapter.requestDevice({ requiredLimits }));\n  });\n\ng.test('limits,supported')\n  .desc(\n    `\n    Test that each supported limit can be specified with valid values.\n    - Tests each limit with the default values given by the spec\n    - Tests each limit with the supported values given by the adapter`\n  )\n  .params(u =>\n    u.combine('limit', kLimits).beginSubcases().combine('limitValue', ['default', 'adapter'])\n  )\n  .fn(async t => {\n    const { limit, limitValue } = t.params;\n\n    const gpu = getGPU(t.rec);\n    const adapter = await gpu.requestAdapter();\n    assert(adapter !== null);\n\n    const limitInfo = getDefaultLimitsForAdapter(adapter);\n    let value: number = -1;\n    switch (limitValue) {\n      case 'default':\n        value = limitInfo[limit].default;\n        break;\n      case 'adapter':\n        value = adapter.limits[limit];\n        break;\n    }\n\n    const device = await adapter.requestDevice({ requiredLimits: { [limit]: value } });\n    assert(device !== null);\n    t.expect(\n      device.limits[limit] === value,\n      'Devices reported limit should match the required limit'\n    );\n    device.destroy();\n  });\n\ng.test('limit,better_than_supported')\n  .desc(\n    `\n    Test that specifying a better limit than what the adapter supports causes requestDevice to\n    reject.\n    - Tests each limit\n    - Tests requesting better limits by various amounts`\n  )\n  .params(u =>\n    u\n      .combine('limit', kLimits)\n      .beginSubcases()\n      .expandWithParams(p => {\n        switch (kLimitClasses[p.limit]) {\n          case 'maximum':\n            return [\n              { mul: 1, add: 1 },\n              { mul: 1, add: 100 },\n            ];\n          case 'alignment':\n            return [\n              { mul: 1, add: -1 },\n              { mul: 1 / 2, add: 0 },\n              { mul: 1 / 1024, add: 0 },\n            ];\n        }\n      })\n  )\n  .fn(async t => {\n    const { limit, mul, add } = t.params;\n\n    const gpu = getGPU(t.rec);\n    const adapter = await gpu.requestAdapter();\n    assert(adapter !== null);\n\n    const limitInfo = getDefaultLimitsForAdapter(adapter);\n    const value = adapter.limits[limit] * mul + add;\n    const requiredLimits = {\n      [limit]: clamp(value, { min: 0, max: limitInfo[limit].maximumValue }),\n    };\n\n    t.shouldReject('OperationError', adapter.requestDevice({ requiredLimits }));\n  });\n\ng.test('limit,worse_than_default')\n  .desc(\n    `\n    Test that specifying a worse limit than the default values required by the spec cause the value\n    to clamp.\n    - Tests each limit\n    - Tests requesting worse limits by various amounts`\n  )\n  .params(u =>\n    u\n      .combine('limit', kLimits)\n      .beginSubcases()\n      .expandWithParams(p => {\n        switch (kLimitClasses[p.limit]) {\n          case 'maximum':\n            return [\n              { mul: 1, add: -1 },\n              { mul: 1, add: -100 },\n            ];\n          case 'alignment':\n            return [\n              { mul: 1, add: 1 },\n              { mul: 2, add: 0 },\n              { mul: 1024, add: 0 },\n            ];\n        }\n      })\n  )\n  .fn(async t => {\n    const { limit, mul, add } = t.params;\n\n    const gpu = getGPU(t.rec);\n    const adapter = await gpu.requestAdapter();\n    assert(adapter !== null);\n\n    const limitInfo = getDefaultLimitsForAdapter(adapter);\n    const value = limitInfo[limit].default * mul + add;\n    const requiredLimits = {\n      [limit]: clamp(value, { min: 0, max: limitInfo[limit].maximumValue }),\n    };\n\n    let success;\n    switch (limitInfo[limit].class) {\n      case 'alignment':\n        success = isPowerOfTwo(value);\n        break;\n      case 'maximum':\n        success = true;\n        break;\n    }\n\n    if (success) {\n      const device = await adapter.requestDevice({ requiredLimits });\n      assert(device !== null);\n      t.expect(\n        device.limits[limit] === limitInfo[limit].default,\n        'Devices reported limit should match the default limit'\n      );\n      device.destroy();\n    } else {\n      t.shouldReject('OperationError', adapter.requestDevice({ requiredLimits }));\n    }\n  });\n"],"mappings":"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"}