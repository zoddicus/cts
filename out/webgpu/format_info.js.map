{"version":3,"file":"format_info.js","names":["keysOf","assert","align","kFormatUniversalDefaults","blockWidth","undefined","blockHeight","color","depth","stencil","colorRender","multisample","feature","baseFormat","sampleType","copySrc","copyDst","bytesPerBlock","renderable","renderTargetPixelByteCost","renderTargetComponentAlignment","formatTableWithDefaults","defaults","table","Object","fromEntries","entries","map","k","row","kRegularTextureFormatInfo","r8unorm","type","storage","readWriteStorage","bytes","blend","resolve","byteCost","alignment","r8snorm","r8uint","r8sint","rg8unorm","rg8snorm","rg8uint","rg8sint","rgba8unorm","rgba8snorm","rgba8uint","rgba8sint","bgra8unorm","r16uint","r16sint","r16float","rg16uint","rg16sint","rg16float","rgba16uint","rgba16sint","rgba16float","r32uint","r32sint","r32float","rg32uint","rg32sint","rg32float","rgba32uint","rgba32sint","rgba32float","rgb10a2uint","rgb10a2unorm","rg11b10ufloat","rgb9e5ufloat","kSizedDepthStencilFormatInfo","stencil8","depth16unorm","depth32float","kUnsizedDepthStencilFormatInfo","depth24plus","kBCTextureFormatInfo","kETC2TextureFormatInfo","kASTCTextureFormatInfo","kCompressedTextureFormatInfo","kColorTextureFormatInfo","kEncodableTextureFormatInfo","kSizedTextureFormatInfo","kDepthStencilFormatInfo","kUncompressedTextureFormatInfo","kAllTextureFormatInfo","kRegularTextureFormats","kSizedDepthStencilFormats","kUnsizedDepthStencilFormats","kCompressedTextureFormats","kColorTextureFormats","kEncodableTextureFormats","kSizedTextureFormats","kDepthStencilFormats","kUncompressedTextureFormats","kAllTextureFormats","kRenderableColorTextureFormats","filter","v","every","f","kTextureFormatInfo","kTextureFormatInfo_TypeCheck","kTextureFormats","kValidTextureFormatsForCopyE2T","kDepthStencilFormatCapabilityInBufferTextureCopy","CopyB2T","CopyT2B","texelAspectSize","kDepthStencilFormatResolvedAspect","all","resolvePerAspectFormat","format","aspect","resolved","depthStencilFormatCopyableAspects","appliedType","depthStencilBufferTextureCopySupported","supportedAspects","includes","depthStencilFormatAspectSize","textureDimensionAndFormatCompatible","dimension","info","viewCompatible","a","b","getFeaturesForFormats","formats","Array","from","Set","filterFormatsByFeature","isCompressedTextureFormat","isEncodableTextureformat","kFeaturesForFormats","computeBytesPerSampleFromFormats","bytesPerSample","alignedBytesPerSample","computeBytesPerSample","targets"],"sources":["../../src/webgpu/format_info.ts"],"sourcesContent":["import { keysOf } from '../common/util/data_tables.js';\nimport { assert } from '../common/util/util.js';\n\nimport { align } from './util/math.js';\nimport { ImageCopyType } from './util/texture/layout.js';\n\n//\n// Texture format tables\n//\n\n/**\n * Defaults applied to all texture format tables automatically. Used only inside\n * `formatTableWithDefaults`. This ensures keys are never missing, always explicitly `undefined`.\n *\n * All top-level keys must be defined here, or they won't be exposed at all.\n */\nconst kFormatUniversalDefaults = {\n  blockWidth: undefined,\n  blockHeight: undefined,\n  color: undefined,\n  depth: undefined,\n  stencil: undefined,\n  colorRender: undefined,\n  multisample: undefined,\n  feature: undefined,\n  baseFormat: undefined,\n\n  sampleType: undefined,\n  copySrc: undefined,\n  copyDst: undefined,\n  bytesPerBlock: undefined,\n  renderable: false,\n  renderTargetPixelByteCost: undefined,\n  renderTargetComponentAlignment: undefined,\n\n  // IMPORTANT:\n  // Add new top-level keys both here and in TextureFormatInfo_TypeCheck.\n} as const;\n/**\n * Takes `table` and applies `defaults` to every row, i.e. for each row,\n * `{ ... kUniversalDefaults, ...defaults, ...row }`.\n * This only operates at the first level; it doesn't support defaults in nested objects.\n */\nfunction formatTableWithDefaults<Defaults extends {}, Table extends { readonly [K: string]: {} }>({\n  defaults,\n  table,\n}: {\n  defaults: Defaults;\n  table: Table;\n}): {\n  readonly [F in keyof Table]: {\n    readonly [K in keyof typeof kFormatUniversalDefaults]: K extends keyof Table[F]\n      ? Table[F][K]\n      : K extends keyof Defaults\n      ? Defaults[K]\n      : (typeof kFormatUniversalDefaults)[K];\n  };\n} {\n  return Object.fromEntries(\n    Object.entries(table).map(([k, row]) => [\n      k,\n      { ...kFormatUniversalDefaults, ...defaults, ...row },\n    ])\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  ) as any;\n}\n\n/** \"plain color formats\", plus rgb9e5ufloat. */\nconst kRegularTextureFormatInfo = formatTableWithDefaults({\n  defaults: { blockWidth: 1, blockHeight: 1, copySrc: true, copyDst: true },\n  table: {\n    // plain, 8 bits per component\n\n    r8unorm: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 1,\n      },\n      colorRender: { blend: true, resolve: true, byteCost: 1, alignment: 1 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    r8snorm: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 1,\n      },\n      multisample: false,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    r8uint: {\n      color: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 1,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 1, alignment: 1 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    r8sint: {\n      color: {\n        type: 'sint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 1,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 1, alignment: 1 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    rg8unorm: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 2,\n      },\n      colorRender: { blend: true, resolve: true, byteCost: 2, alignment: 1 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rg8snorm: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 2,\n      },\n      multisample: false,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rg8uint: {\n      color: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 2,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 2, alignment: 1 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rg8sint: {\n      color: {\n        type: 'sint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 2,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 2, alignment: 1 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    rgba8unorm: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: true, resolve: true, byteCost: 8, alignment: 1 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      baseFormat: 'rgba8unorm',\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'rgba8unorm-srgb': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: true, resolve: true, byteCost: 8, alignment: 1 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      baseFormat: 'rgba8unorm',\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rgba8snorm: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      multisample: false,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rgba8uint: {\n      color: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 4, alignment: 1 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rgba8sint: {\n      color: {\n        type: 'sint',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 4, alignment: 1 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    bgra8unorm: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: true, resolve: true, byteCost: 8, alignment: 1 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      baseFormat: 'bgra8unorm',\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'bgra8unorm-srgb': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: true, resolve: true, byteCost: 8, alignment: 1 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      baseFormat: 'bgra8unorm',\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    // plain, 16 bits per component\n\n    r16uint: {\n      color: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 2,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 2, alignment: 2 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    r16sint: {\n      color: {\n        type: 'sint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 2,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 2, alignment: 2 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    r16float: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 2,\n      },\n      colorRender: { blend: true, resolve: true, byteCost: 2, alignment: 2 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    rg16uint: {\n      color: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 4, alignment: 2 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rg16sint: {\n      color: {\n        type: 'sint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 4, alignment: 2 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rg16float: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: true, resolve: true, byteCost: 4, alignment: 2 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    rgba16uint: {\n      color: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 8, alignment: 2 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rgba16sint: {\n      color: {\n        type: 'sint',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 8, alignment: 2 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rgba16float: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      colorRender: { blend: true, resolve: true, byteCost: 8, alignment: 2 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    // plain, 32 bits per component\n\n    r32uint: {\n      color: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: true,\n        bytes: 4,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 4, alignment: 4 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: false,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    r32sint: {\n      color: {\n        type: 'sint',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: true,\n        bytes: 4,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 4, alignment: 4 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: false,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    r32float: {\n      color: {\n        type: 'unfilterable-float',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: true,\n        bytes: 4,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 4, alignment: 4 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    rg32uint: {\n      color: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 8, alignment: 4 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: false,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rg32sint: {\n      color: {\n        type: 'sint',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 8, alignment: 4 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: false,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rg32float: {\n      color: {\n        type: 'unfilterable-float',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 8, alignment: 4 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: false,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    rgba32uint: {\n      color: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 16, alignment: 4 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: false,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rgba32sint: {\n      color: {\n        type: 'sint',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 16, alignment: 4 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: false,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rgba32float: {\n      color: {\n        type: 'unfilterable-float',\n        copySrc: true,\n        copyDst: true,\n        storage: true,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 16, alignment: 4 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: false,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    // plain, mixed component width, 32 bits per texel\n\n    rgb10a2uint: {\n      color: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: false, resolve: false, byteCost: 8, alignment: 4 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rgb10a2unorm: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      colorRender: { blend: true, resolve: true, byteCost: 8, alignment: 4 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rg11b10ufloat: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      multisample: false,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n      renderTargetPixelByteCost: 8,\n      renderTargetComponentAlignment: 4,\n    },\n\n    // packed\n\n    rgb9e5ufloat: {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      multisample: false,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n  },\n} as const);\n\n// MAINTENANCE_TODO: Distinguishing \"sized\" and \"unsized\" depth stencil formats doesn't make sense\n// because one aspect can be sized and one can be unsized. This should be cleaned up, but is kept\n// this way during a migration phase.\nconst kSizedDepthStencilFormatInfo = formatTableWithDefaults({\n  defaults: { blockWidth: 1, blockHeight: 1, multisample: true, copySrc: true, renderable: true },\n  table: {\n    stencil8: {\n      stencil: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 1,\n      },\n      sampleType: 'uint',\n      copyDst: true,\n      bytesPerBlock: 1,\n    },\n    depth16unorm: {\n      depth: {\n        type: 'depth',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 2,\n      },\n      sampleType: 'depth',\n      copyDst: true,\n      bytesPerBlock: 2,\n    },\n    depth32float: {\n      depth: {\n        type: 'depth',\n        copySrc: true,\n        copyDst: false,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      sampleType: 'depth',\n      copyDst: false,\n      bytesPerBlock: 4,\n    },\n  },\n} as const);\nconst kUnsizedDepthStencilFormatInfo = formatTableWithDefaults({\n  defaults: { blockWidth: 1, blockHeight: 1, multisample: true },\n  table: {\n    depth24plus: {\n      depth: {\n        type: 'depth',\n        copySrc: false,\n        copyDst: false,\n        storage: false,\n        readWriteStorage: false,\n        bytes: undefined,\n      },\n      copySrc: false,\n      copyDst: false,\n      sampleType: 'depth',\n      renderable: true,\n    },\n    'depth24plus-stencil8': {\n      depth: {\n        type: 'depth',\n        copySrc: false,\n        copyDst: false,\n        storage: false,\n        readWriteStorage: false,\n        bytes: undefined,\n      },\n      stencil: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 1,\n      },\n      copySrc: false,\n      copyDst: false,\n      sampleType: 'depth',\n      renderable: true,\n    },\n    'depth32float-stencil8': {\n      depth: {\n        type: 'depth',\n        copySrc: true,\n        copyDst: false,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 4,\n      },\n      stencil: {\n        type: 'uint',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 1,\n      },\n      feature: 'depth32float-stencil8',\n      copySrc: false,\n      copyDst: false,\n      sampleType: 'depth',\n      renderable: true,\n    },\n  },\n} as const);\n\nconst kBCTextureFormatInfo = formatTableWithDefaults({\n  defaults: {\n    blockWidth: 4,\n    blockHeight: 4,\n    multisample: false,\n    feature: 'texture-compression-bc',\n    sampleType: 'float',\n    copySrc: true,\n    copyDst: true,\n  },\n  table: {\n    'bc1-rgba-unorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      baseFormat: 'bc1-rgba-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'bc1-rgba-unorm-srgb': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      baseFormat: 'bc1-rgba-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'bc2-rgba-unorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'bc2-rgba-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'bc2-rgba-unorm-srgb': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'bc2-rgba-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'bc3-rgba-unorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'bc3-rgba-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'bc3-rgba-unorm-srgb': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'bc3-rgba-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'bc4-r-unorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'bc4-r-snorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'bc5-rg-unorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'bc5-rg-snorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'bc6h-rgb-ufloat': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'bc6h-rgb-float': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'bc7-rgba-unorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'bc7-rgba-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'bc7-rgba-unorm-srgb': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'bc7-rgba-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n  },\n} as const);\n\nconst kETC2TextureFormatInfo = formatTableWithDefaults({\n  defaults: {\n    blockWidth: 4,\n    blockHeight: 4,\n    multisample: false,\n    feature: 'texture-compression-etc2',\n    sampleType: 'float',\n    copySrc: true,\n    copyDst: true,\n  },\n  table: {\n    'etc2-rgb8unorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      baseFormat: 'etc2-rgb8unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'etc2-rgb8unorm-srgb': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      baseFormat: 'etc2-rgb8unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'etc2-rgb8a1unorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      baseFormat: 'etc2-rgb8a1unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'etc2-rgb8a1unorm-srgb': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      baseFormat: 'etc2-rgb8a1unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'etc2-rgba8unorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'etc2-rgba8unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'etc2-rgba8unorm-srgb': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'etc2-rgba8unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'eac-r11unorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'eac-r11snorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 8,\n      },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'eac-rg11unorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'eac-rg11snorm': {\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n  },\n} as const);\n\nconst kASTCTextureFormatInfo = formatTableWithDefaults({\n  defaults: {\n    multisample: false,\n    feature: 'texture-compression-astc',\n    sampleType: 'float',\n    copySrc: true,\n    copyDst: true,\n  },\n  table: {\n    'astc-4x4-unorm': {\n      blockWidth: 4,\n      blockHeight: 4,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-4x4-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-4x4-unorm-srgb': {\n      blockWidth: 4,\n      blockHeight: 4,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-4x4-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-5x4-unorm': {\n      blockWidth: 5,\n      blockHeight: 4,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-5x4-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-5x4-unorm-srgb': {\n      blockWidth: 5,\n      blockHeight: 4,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-5x4-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-5x5-unorm': {\n      blockWidth: 5,\n      blockHeight: 5,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-5x5-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-5x5-unorm-srgb': {\n      blockWidth: 5,\n      blockHeight: 5,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-5x5-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-6x5-unorm': {\n      blockWidth: 6,\n      blockHeight: 5,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-6x5-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-6x5-unorm-srgb': {\n      blockWidth: 6,\n      blockHeight: 5,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-6x5-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-6x6-unorm': {\n      blockWidth: 6,\n      blockHeight: 6,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-6x6-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-6x6-unorm-srgb': {\n      blockWidth: 6,\n      blockHeight: 6,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-6x6-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-8x5-unorm': {\n      blockWidth: 8,\n      blockHeight: 5,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-8x5-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-8x5-unorm-srgb': {\n      blockWidth: 8,\n      blockHeight: 5,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-8x5-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-8x6-unorm': {\n      blockWidth: 8,\n      blockHeight: 6,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-8x6-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-8x6-unorm-srgb': {\n      blockWidth: 8,\n      blockHeight: 6,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-8x6-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-8x8-unorm': {\n      blockWidth: 8,\n      blockHeight: 8,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-8x8-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-8x8-unorm-srgb': {\n      blockWidth: 8,\n      blockHeight: 8,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-8x8-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-10x5-unorm': {\n      blockWidth: 10,\n      blockHeight: 5,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-10x5-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-10x5-unorm-srgb': {\n      blockWidth: 10,\n      blockHeight: 5,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-10x5-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-10x6-unorm': {\n      blockWidth: 10,\n      blockHeight: 6,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-10x6-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-10x6-unorm-srgb': {\n      blockWidth: 10,\n      blockHeight: 6,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-10x6-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-10x8-unorm': {\n      blockWidth: 10,\n      blockHeight: 8,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-10x8-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-10x8-unorm-srgb': {\n      blockWidth: 10,\n      blockHeight: 8,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-10x8-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-10x10-unorm': {\n      blockWidth: 10,\n      blockHeight: 10,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-10x10-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-10x10-unorm-srgb': {\n      blockWidth: 10,\n      blockHeight: 10,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-10x10-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-12x10-unorm': {\n      blockWidth: 12,\n      blockHeight: 10,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-12x10-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-12x10-unorm-srgb': {\n      blockWidth: 12,\n      blockHeight: 10,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-12x10-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-12x12-unorm': {\n      blockWidth: 12,\n      blockHeight: 12,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-12x12-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-12x12-unorm-srgb': {\n      blockWidth: 12,\n      blockHeight: 12,\n      color: {\n        type: 'float',\n        copySrc: true,\n        copyDst: true,\n        storage: false,\n        readWriteStorage: false,\n        bytes: 16,\n      },\n      baseFormat: 'astc-12x12-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n  },\n} as const);\n\n// Definitions for use locally. To access the table entries, use `kTextureFormatInfo`.\n\n// MAINTENANCE_TODO: Consider generating the exports below programmatically by filtering the big list, instead\n// of using these local constants? Requires some type magic though.\n/* prettier-ignore */ const   kCompressedTextureFormatInfo = { ...kBCTextureFormatInfo, ...kETC2TextureFormatInfo, ...kASTCTextureFormatInfo } as const;\n/* prettier-ignore */ const        kColorTextureFormatInfo = { ...kRegularTextureFormatInfo, ...kCompressedTextureFormatInfo } as const;\n/* prettier-ignore */ const    kEncodableTextureFormatInfo = { ...kRegularTextureFormatInfo, ...kSizedDepthStencilFormatInfo } as const;\n/* prettier-ignore */ const        kSizedTextureFormatInfo = { ...kRegularTextureFormatInfo, ...kSizedDepthStencilFormatInfo, ...kCompressedTextureFormatInfo } as const;\n/* prettier-ignore */ const        kDepthStencilFormatInfo = { ...kSizedDepthStencilFormatInfo, ...kUnsizedDepthStencilFormatInfo } as const;\n/* prettier-ignore */ const kUncompressedTextureFormatInfo = { ...kRegularTextureFormatInfo, ...kSizedDepthStencilFormatInfo, ...kUnsizedDepthStencilFormatInfo } as const;\n/* prettier-ignore */ const          kAllTextureFormatInfo = { ...kUncompressedTextureFormatInfo, ...kCompressedTextureFormatInfo } as const;\n\n/** A \"regular\" texture format (uncompressed, sized, single-plane color formats). */\n/* prettier-ignore */ export type      RegularTextureFormat = keyof typeof kRegularTextureFormatInfo;\n/** A sized depth/stencil texture format. */\n/* prettier-ignore */ export type   SizedDepthStencilFormat = keyof typeof kSizedDepthStencilFormatInfo;\n/** An unsized depth/stencil texture format. */\n/* prettier-ignore */ export type UnsizedDepthStencilFormat = keyof typeof kUnsizedDepthStencilFormatInfo;\n/** A compressed (block) texture format. */\n/* prettier-ignore */ export type   CompressedTextureFormat = keyof typeof kCompressedTextureFormatInfo;\n\n/** A color texture format (regular | compressed). */\n/* prettier-ignore */ export type        ColorTextureFormat = keyof typeof kColorTextureFormatInfo;\n/** An encodable texture format (regular | sized depth/stencil). */\n/* prettier-ignore */ export type    EncodableTextureFormat = keyof typeof kEncodableTextureFormatInfo;\n/** A sized texture format (regular | sized depth/stencil | compressed). */\n/* prettier-ignore */ export type        SizedTextureFormat = keyof typeof kSizedTextureFormatInfo;\n/** A depth/stencil format (sized | unsized). */\n/* prettier-ignore */ export type        DepthStencilFormat = keyof typeof kDepthStencilFormatInfo;\n/** An uncompressed (block size 1x1) format (regular | depth/stencil). */\n/* prettier-ignore */ export type UncompressedTextureFormat = keyof typeof kUncompressedTextureFormatInfo;\n\n/* prettier-ignore */ export const      kRegularTextureFormats: readonly      RegularTextureFormat[] = keysOf(     kRegularTextureFormatInfo);\n/* prettier-ignore */ export const   kSizedDepthStencilFormats: readonly   SizedDepthStencilFormat[] = keysOf(  kSizedDepthStencilFormatInfo);\n/* prettier-ignore */ export const kUnsizedDepthStencilFormats: readonly UnsizedDepthStencilFormat[] = keysOf(kUnsizedDepthStencilFormatInfo);\n/* prettier-ignore */ export const   kCompressedTextureFormats: readonly   CompressedTextureFormat[] = keysOf(  kCompressedTextureFormatInfo);\n\n/* prettier-ignore */ export const        kColorTextureFormats: readonly        ColorTextureFormat[] = keysOf(       kColorTextureFormatInfo);\n/* prettier-ignore */ export const    kEncodableTextureFormats: readonly    EncodableTextureFormat[] = keysOf(   kEncodableTextureFormatInfo);\n/* prettier-ignore */ export const        kSizedTextureFormats: readonly        SizedTextureFormat[] = keysOf(       kSizedTextureFormatInfo);\n/* prettier-ignore */ export const        kDepthStencilFormats: readonly        DepthStencilFormat[] = keysOf(       kDepthStencilFormatInfo);\n/* prettier-ignore */ export const kUncompressedTextureFormats: readonly UncompressedTextureFormat[] = keysOf(kUncompressedTextureFormatInfo);\n/* prettier-ignore */ export const          kAllTextureFormats: readonly          GPUTextureFormat[] = keysOf(         kAllTextureFormatInfo);\n\n// CompressedTextureFormat are unrenderable so filter from RegularTextureFormats for color targets is enough\nexport const kRenderableColorTextureFormats = kRegularTextureFormats.filter(\n  v => kColorTextureFormatInfo[v].colorRender\n);\nassert(\n  kRenderableColorTextureFormats.every(\n    f =>\n      kAllTextureFormatInfo[f].renderTargetComponentAlignment !== undefined &&\n      kAllTextureFormatInfo[f].renderTargetPixelByteCost !== undefined\n  )\n);\n\n/** Per-GPUTextureFormat-per-aspect info. */\ninterface TextureFormatAspectInfo {\n  /** Whether the aspect can be used as `COPY_SRC`. */\n  copySrc: boolean;\n  /** Whether the aspect can be used as `COPY_DST`. */\n  copyDst: boolean;\n  /** Whether the aspect can be used as `STORAGE`. */\n  storage: boolean;\n  /** Whether the aspect can be used as `STORAGE` with `read-write` storage texture access. */\n  readWriteStorage: boolean;\n  /** The \"texel block copy footprint\" of one texel block; `undefined` if the aspect is unsized. */\n  bytes: number | undefined;\n}\n/** Per GPUTextureFormat-per-aspect info for color aspects. */\ninterface TextureFormatColorAspectInfo extends TextureFormatAspectInfo {\n  bytes: number;\n  /** \"Best\" sample type of the format. \"float\" also implies \"unfilterable-float\". */\n  type: 'float' | 'uint' | 'sint' | 'unfilterable-float';\n}\n/** Per GPUTextureFormat-per-aspect info for depth aspects. */\ninterface TextureFormatDepthAspectInfo extends TextureFormatAspectInfo {\n  /** \"depth\" also implies \"unfilterable-float\". */\n  type: 'depth';\n}\n/** Per GPUTextureFormat-per-aspect info for stencil aspects. */\ninterface TextureFormatStencilAspectInfo extends TextureFormatAspectInfo {\n  bytes: 1;\n  type: 'uint';\n}\n\n/**\n * Per-GPUTextureFormat info.\n * This is not actually the type of values in kTextureFormatInfo; that type is fully const\n * so that it can be narrowed very precisely at usage sites by the compiler.\n * This type exists only as a type check on the inferred type of kTextureFormatInfo.\n * Documentation is also written here, but not actually visible to the IDE.\n */\ntype TextureFormatInfo_TypeCheck = {\n  /** Texel block width. */\n  blockWidth: number;\n  /** Texel block height. */\n  blockHeight: number;\n  /** Whether the format can be used in a multisample texture. */\n  multisample: boolean;\n  /** The base format for srgb formats. Specified on both srgb and equivalent non-srgb formats. */\n  baseFormat: GPUTextureFormat | undefined;\n  /** Optional feature required to use this format, or `undefined` if none. */\n  feature: GPUFeatureName | undefined;\n\n  /** @deprecated */\n  sampleType: GPUTextureSampleType;\n  /** @deprecated */\n  copySrc: boolean;\n  /** @deprecated */\n  copyDst: boolean;\n  /** @deprecated */\n  bytesPerBlock: number | undefined;\n  /** @deprecated */\n  renderable: boolean;\n  /** @deprecated */\n  renderTargetPixelByteCost: number | undefined;\n  /** @deprecated */\n  renderTargetComponentAlignment: number | undefined;\n\n  // IMPORTANT:\n  // Add new top-level keys both here and in kUniversalDefaults.\n} & (\n  | {\n      /** Color aspect info. */\n      color: TextureFormatColorAspectInfo;\n      /** Defined if the format is a color format that can be used as `RENDER_ATTACHMENT`. */\n      colorRender:\n        | undefined\n        | {\n            /** Whether the format is blendable. */\n            blend: boolean;\n            /** Whether the format can be a multisample resolve target. */\n            resolve: boolean;\n            /** The \"render target pixel byte cost\" of the format. */\n            byteCost: number;\n            /** The \"render target component alignment\" of the format. */\n            alignment: number;\n          };\n    }\n  | (\n      | {\n          /** Depth aspect info. */\n          depth: TextureFormatDepthAspectInfo;\n          /** Stencil aspect info. */\n          stencil: undefined | TextureFormatStencilAspectInfo;\n          multisample: true;\n        }\n      | {\n          /** Stencil aspect info. */\n          stencil: TextureFormatStencilAspectInfo;\n          multisample: true;\n        }\n    )\n);\n\n/** Per-GPUTextureFormat info. */\nexport const kTextureFormatInfo = {\n  ...kRegularTextureFormatInfo,\n  ...kSizedDepthStencilFormatInfo,\n  ...kUnsizedDepthStencilFormatInfo,\n  ...kBCTextureFormatInfo,\n  ...kETC2TextureFormatInfo,\n  ...kASTCTextureFormatInfo,\n} as const;\n\n/** Defining this variable verifies the type of kTextureFormatInfo2. It is not used. */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst kTextureFormatInfo_TypeCheck: {\n  readonly [F in GPUTextureFormat]: TextureFormatInfo_TypeCheck;\n} = kTextureFormatInfo;\n\n/** List of all GPUTextureFormat values. */\n// MAINTENANCE_TODO: dedup with kAllTextureFormats\nexport const kTextureFormats: readonly GPUTextureFormat[] = keysOf(kAllTextureFormatInfo);\n\n/** Valid GPUTextureFormats for `copyExternalImageToTexture`, by spec. */\nexport const kValidTextureFormatsForCopyE2T = [\n  'r8unorm',\n  'r16float',\n  'r32float',\n  'rg8unorm',\n  'rg16float',\n  'rg32float',\n  'rgba8unorm',\n  'rgba8unorm-srgb',\n  'bgra8unorm',\n  'bgra8unorm-srgb',\n  'rgb10a2unorm',\n  'rgba16float',\n  'rgba32float',\n] as const;\n\n//\n// Other related stuff\n//\n\nconst kDepthStencilFormatCapabilityInBufferTextureCopy = {\n  // kUnsizedDepthStencilFormats\n  depth24plus: {\n    CopyB2T: [],\n    CopyT2B: [],\n    texelAspectSize: { 'depth-only': -1, 'stencil-only': -1 },\n  },\n  'depth24plus-stencil8': {\n    CopyB2T: ['stencil-only'],\n    CopyT2B: ['stencil-only'],\n    texelAspectSize: { 'depth-only': -1, 'stencil-only': 1 },\n  },\n\n  // kSizedDepthStencilFormats\n  depth16unorm: {\n    CopyB2T: ['all', 'depth-only'],\n    CopyT2B: ['all', 'depth-only'],\n    texelAspectSize: { 'depth-only': 2, 'stencil-only': -1 },\n  },\n  depth32float: {\n    CopyB2T: [],\n    CopyT2B: ['all', 'depth-only'],\n    texelAspectSize: { 'depth-only': 4, 'stencil-only': -1 },\n  },\n  'depth32float-stencil8': {\n    CopyB2T: ['stencil-only'],\n    CopyT2B: ['depth-only', 'stencil-only'],\n    texelAspectSize: { 'depth-only': 4, 'stencil-only': 1 },\n  },\n  stencil8: {\n    CopyB2T: ['all', 'stencil-only'],\n    CopyT2B: ['all', 'stencil-only'],\n    texelAspectSize: { 'depth-only': -1, 'stencil-only': 1 },\n  },\n} as const;\n\n/** `kDepthStencilFormatResolvedAspect[format][aspect]` returns the aspect-specific format for a\n *  depth-stencil format, or `undefined` if the format doesn't have the aspect.\n */\nexport const kDepthStencilFormatResolvedAspect: {\n  readonly [k in DepthStencilFormat]: {\n    readonly [a in GPUTextureAspect]: DepthStencilFormat | undefined;\n  };\n} = {\n  // kUnsizedDepthStencilFormats\n  depth24plus: {\n    all: 'depth24plus',\n    'depth-only': 'depth24plus',\n    'stencil-only': undefined,\n  },\n  'depth24plus-stencil8': {\n    all: 'depth24plus-stencil8',\n    'depth-only': 'depth24plus',\n    'stencil-only': 'stencil8',\n  },\n\n  // kSizedDepthStencilFormats\n  depth16unorm: {\n    all: 'depth16unorm',\n    'depth-only': 'depth16unorm',\n    'stencil-only': undefined,\n  },\n  depth32float: {\n    all: 'depth32float',\n    'depth-only': 'depth32float',\n    'stencil-only': undefined,\n  },\n  'depth32float-stencil8': {\n    all: 'depth32float-stencil8',\n    'depth-only': 'depth32float',\n    'stencil-only': 'stencil8',\n  },\n  stencil8: {\n    all: 'stencil8',\n    'depth-only': undefined,\n    'stencil-only': 'stencil8',\n  },\n} as const;\n\n/**\n * @returns the GPUTextureFormat corresponding to the @param aspect of @param format.\n * This allows choosing the correct format for depth-stencil aspects when creating pipelines that\n * will have to match the resolved format of views, or to get per-aspect information like the\n * `blockByteSize`.\n *\n * Many helpers use an `undefined` `aspect` to means `'all'` so this is also the default for this\n * function.\n */\nexport function resolvePerAspectFormat(\n  format: GPUTextureFormat,\n  aspect?: GPUTextureAspect\n): GPUTextureFormat {\n  if (aspect === 'all' || aspect === undefined) {\n    return format;\n  }\n  assert(!!kTextureFormatInfo[format].depth || !!kTextureFormatInfo[format].stencil);\n  const resolved = kDepthStencilFormatResolvedAspect[format as DepthStencilFormat][aspect ?? 'all'];\n  assert(resolved !== undefined);\n  return resolved;\n}\n\n/**\n * Gets all copyable aspects for copies between texture and buffer for specified depth/stencil format and copy type, by spec.\n */\nexport function depthStencilFormatCopyableAspects(\n  type: ImageCopyType,\n  format: DepthStencilFormat\n): readonly GPUTextureAspect[] {\n  const appliedType = type === 'WriteTexture' ? 'CopyB2T' : type;\n  return kDepthStencilFormatCapabilityInBufferTextureCopy[format][appliedType];\n}\n\n/**\n * Computes whether a copy between a depth/stencil texture aspect and a buffer is supported, by spec.\n */\nexport function depthStencilBufferTextureCopySupported(\n  type: ImageCopyType,\n  format: DepthStencilFormat,\n  aspect: GPUTextureAspect\n): boolean {\n  const supportedAspects: readonly GPUTextureAspect[] = depthStencilFormatCopyableAspects(\n    type,\n    format\n  );\n  return supportedAspects.includes(aspect);\n}\n\n/**\n * Returns the byte size of the depth or stencil aspect of the specified depth/stencil format,\n * or -1 if none.\n */\nexport function depthStencilFormatAspectSize(\n  format: DepthStencilFormat,\n  aspect: 'depth-only' | 'stencil-only'\n) {\n  const texelAspectSize =\n    kDepthStencilFormatCapabilityInBufferTextureCopy[format].texelAspectSize[aspect];\n  assert(texelAspectSize > 0);\n  return texelAspectSize;\n}\n\n/**\n * Returns true iff a texture can be created with the provided GPUTextureDimension\n * (defaulting to 2d) and GPUTextureFormat, by spec.\n */\nexport function textureDimensionAndFormatCompatible(\n  dimension: undefined | GPUTextureDimension,\n  format: GPUTextureFormat\n): boolean {\n  const info = kAllTextureFormatInfo[format];\n  return !(\n    (dimension === '1d' || dimension === '3d') &&\n    (info.blockWidth > 1 || info.depth || info.stencil)\n  );\n}\n\n/**\n * Check if two formats are view format compatible.\n *\n * This function may need to be generalized to use `baseFormat` from `kTextureFormatInfo`.\n */\nexport function viewCompatible(a: GPUTextureFormat, b: GPUTextureFormat): boolean {\n  return a === b || a + '-srgb' === b || b + '-srgb' === a;\n}\n\nexport function getFeaturesForFormats<T>(\n  formats: readonly (T & (GPUTextureFormat | undefined))[]\n): readonly (GPUFeatureName | undefined)[] {\n  return Array.from(new Set(formats.map(f => (f ? kTextureFormatInfo[f].feature : undefined))));\n}\n\nexport function filterFormatsByFeature<T>(\n  feature: GPUFeatureName | undefined,\n  formats: readonly (T & (GPUTextureFormat | undefined))[]\n): readonly (T & (GPUTextureFormat | undefined))[] {\n  return formats.filter(f => f === undefined || kTextureFormatInfo[f].feature === feature);\n}\n\nexport function isCompressedTextureFormat(format: GPUTextureFormat) {\n  return format in kCompressedTextureFormatInfo;\n}\n\nexport function isEncodableTextureformat(format: GPUTextureFormat) {\n  return format in kEncodableTextureFormatInfo;\n}\n\nexport const kFeaturesForFormats = getFeaturesForFormats(kTextureFormats);\n\n/**\n * Given an array of texture formats return the number of bytes per sample.\n */\nexport function computeBytesPerSampleFromFormats(formats: readonly GPUTextureFormat[]) {\n  let bytesPerSample = 0;\n  for (const format of formats) {\n    const info = kTextureFormatInfo[format];\n    const alignedBytesPerSample = align(bytesPerSample, info.colorRender!.alignment);\n    bytesPerSample = alignedBytesPerSample + info.colorRender!.byteCost;\n  }\n  return bytesPerSample;\n}\n\n/**\n * Given an array of GPUColorTargetState return the number of bytes per sample\n */\nexport function computeBytesPerSample(targets: GPUColorTargetState[]) {\n  return computeBytesPerSampleFromFormats(targets.map(({ format }) => format));\n}\n"],"mappings":"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"}