{"version":3,"file":"copyTextureToTexture.spec.js","names":["description","makeTestGroup","kCompressedTextureFormats","kTextureFormatInfo","CompatibilityTest","g","test","desc","params","u","combine","beforeAllSubcases","t","format","selectDeviceOrSkipTestCase","feature","fn","blockWidth","blockHeight","srcTexture","device","createTexture","size","usage","GPUTextureUsage","COPY_SRC","trackForCleanup","dstTexture","COPY_DST","encoder","createCommandEncoder","copyTextureToTexture","texture","expectGPUError","finish"],"sources":["../../../../../../../src/webgpu/compat/api/validation/encoding/cmds/copyTextureToTexture.spec.ts"],"sourcesContent":["export const description = `\nTests limitations of copyTextureToTextures in compat mode.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { kCompressedTextureFormats, kTextureFormatInfo } from '../../../../../format_info.js';\nimport { CompatibilityTest } from '../../../../compatibility_test.js';\n\nexport const g = makeTestGroup(CompatibilityTest);\n\ng.test('compressed')\n  .desc(\n    `Tests that you can not call copyTextureToTextures with compressed textures in compat mode.`\n  )\n  .params(u => u.combine('format', kCompressedTextureFormats))\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    t.selectDeviceOrSkipTestCase([kTextureFormatInfo[format].feature]);\n  })\n  .fn(t => {\n    const { format } = t.params;\n\n    const { blockWidth, blockHeight } = kTextureFormatInfo[format];\n\n    const srcTexture = t.device.createTexture({\n      size: [blockWidth, blockHeight, 1],\n      format,\n      usage: GPUTextureUsage.COPY_SRC,\n    });\n    t.trackForCleanup(srcTexture);\n\n    const dstTexture = t.device.createTexture({\n      size: [blockWidth, blockHeight, 1],\n      format,\n      usage: GPUTextureUsage.COPY_DST,\n    });\n    t.trackForCleanup(dstTexture);\n\n    const encoder = t.device.createCommandEncoder();\n    encoder.copyTextureToTexture({ texture: srcTexture }, { texture: dstTexture }, [\n      blockWidth,\n      blockHeight,\n      1,\n    ]);\n    t.expectGPUError('validation', () => {\n      encoder.finish();\n    });\n  });\n"],"mappings":";;GAAA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAAC,CAED,SAASC,aAAa,QAAQ,kDAAkD;AAChF,SAASC,yBAAyB,EAAEC,kBAAkB,QAAQ,+BAA+B;AAC7F,SAASC,iBAAiB,QAAQ,mCAAmC;;AAErE,OAAO,MAAMC,CAAC,GAAGJ,aAAa,CAACG,iBAAiB,CAAC;;AAEjDC,CAAC,CAACC,IAAI,CAAC,YAAY,CAAC;AACjBC,IAAI;EACF;AACH,CAAC;AACAC,MAAM,CAAC,CAAAC,CAAC,KAAIA,CAAC,CAACC,OAAO,CAAC,QAAQ,EAAER,yBAAyB,CAAC,CAAC;AAC3DS,iBAAiB,CAAC,CAAAC,CAAC,KAAI;EACtB,MAAM,EAAEC,MAAM,CAAC,CAAC,GAAGD,CAAC,CAACJ,MAAM;EAC3BI,CAAC,CAACE,0BAA0B,CAAC,CAACX,kBAAkB,CAACU,MAAM,CAAC,CAACE,OAAO,CAAC,CAAC;AACpE,CAAC,CAAC;AACDC,EAAE,CAAC,CAAAJ,CAAC,KAAI;EACP,MAAM,EAAEC,MAAM,CAAC,CAAC,GAAGD,CAAC,CAACJ,MAAM;;EAE3B,MAAM,EAAES,UAAU,EAAEC,WAAW,CAAC,CAAC,GAAGf,kBAAkB,CAACU,MAAM,CAAC;;EAE9D,MAAMM,UAAU,GAAGP,CAAC,CAACQ,MAAM,CAACC,aAAa,CAAC;IACxCC,IAAI,EAAE,CAACL,UAAU,EAAEC,WAAW,EAAE,CAAC,CAAC;IAClCL,MAAM;IACNU,KAAK,EAAEC,eAAe,CAACC;EACzB,CAAC,CAAC;EACFb,CAAC,CAACc,eAAe,CAACP,UAAU,CAAC;;EAE7B,MAAMQ,UAAU,GAAGf,CAAC,CAACQ,MAAM,CAACC,aAAa,CAAC;IACxCC,IAAI,EAAE,CAACL,UAAU,EAAEC,WAAW,EAAE,CAAC,CAAC;IAClCL,MAAM;IACNU,KAAK,EAAEC,eAAe,CAACI;EACzB,CAAC,CAAC;EACFhB,CAAC,CAACc,eAAe,CAACC,UAAU,CAAC;;EAE7B,MAAME,OAAO,GAAGjB,CAAC,CAACQ,MAAM,CAACU,oBAAoB,CAAC,CAAC;EAC/CD,OAAO,CAACE,oBAAoB,CAAC,EAAEC,OAAO,EAAEb,UAAU,CAAC,CAAC,EAAE,EAAEa,OAAO,EAAEL,UAAU,CAAC,CAAC,EAAE;EAC7EV,UAAU;EACVC,WAAW;EACX,CAAC;EACF,CAAC;EACFN,CAAC,CAACqB,cAAc,CAAC,YAAY,EAAE,MAAM;IACnCJ,OAAO,CAACK,MAAM,CAAC,CAAC;EAClB,CAAC,CAAC;AACJ,CAAC,CAAC"}