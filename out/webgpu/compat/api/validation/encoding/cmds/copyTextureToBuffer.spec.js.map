{"version":3,"file":"copyTextureToBuffer.spec.js","names":["description","makeTestGroup","kCompressedTextureFormats","kTextureFormatInfo","align","CompatibilityTest","g","test","desc","params","u","combine","beforeAllSubcases","t","format","selectDeviceOrSkipTestCase","feature","fn","info","textureSize","blockWidth","blockHeight","texture","createTextureTracked","size","usage","GPUTextureUsage","COPY_SRC","bytesPerRow","color","bytes","buffer","createBufferTracked","GPUBufferUsage","COPY_DST","encoder","device","createCommandEncoder","copyTextureToBuffer","expectGPUErrorInCompatibilityMode","finish"],"sources":["../../../../../../../src/webgpu/compat/api/validation/encoding/cmds/copyTextureToBuffer.spec.ts"],"sourcesContent":["export const description = `\nTests limitations of copyTextureToBuffer in compat mode.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { kCompressedTextureFormats, kTextureFormatInfo } from '../../../../../format_info.js';\nimport { align } from '../../../../../util/math.js';\nimport { CompatibilityTest } from '../../../../compatibility_test.js';\n\nexport const g = makeTestGroup(CompatibilityTest);\n\ng.test('compressed')\n  .desc(`Tests that you can not call copyTextureToBuffer with compressed textures in compat mode.`)\n  .params(u => u.combine('format', kCompressedTextureFormats))\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    t.selectDeviceOrSkipTestCase([kTextureFormatInfo[format].feature]);\n  })\n  .fn(t => {\n    const { format } = t.params;\n\n    const info = kTextureFormatInfo[format];\n\n    const textureSize = [info.blockWidth, info.blockHeight, 1];\n    const texture = t.createTextureTracked({\n      size: textureSize,\n      format,\n      usage: GPUTextureUsage.COPY_SRC,\n    });\n\n    const bytesPerRow = align(info.color.bytes, 256);\n\n    const buffer = t.createBufferTracked({\n      size: bytesPerRow,\n      usage: GPUBufferUsage.COPY_DST,\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    encoder.copyTextureToBuffer({ texture }, { buffer, bytesPerRow }, textureSize);\n    t.expectGPUErrorInCompatibilityMode('validation', () => {\n      encoder.finish();\n    });\n  });\n"],"mappings":";;GAAA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAAC,CAED,SAASC,aAAa,QAAQ,kDAAkD;AAChF,SAASC,yBAAyB,EAAEC,kBAAkB,QAAQ,+BAA+B;AAC7F,SAASC,KAAK,QAAQ,6BAA6B;AACnD,SAASC,iBAAiB,QAAQ,mCAAmC;;AAErE,OAAO,MAAMC,CAAC,GAAGL,aAAa,CAACI,iBAAiB,CAAC;;AAEjDC,CAAC,CAACC,IAAI,CAAC,YAAY,CAAC;AACjBC,IAAI,CAAE,0FAAyF,CAAC;AAChGC,MAAM,CAAC,CAAAC,CAAC,KAAIA,CAAC,CAACC,OAAO,CAAC,QAAQ,EAAET,yBAAyB,CAAC,CAAC;AAC3DU,iBAAiB,CAAC,CAAAC,CAAC,KAAI;EACtB,MAAM,EAAEC,MAAM,CAAC,CAAC,GAAGD,CAAC,CAACJ,MAAM;EAC3BI,CAAC,CAACE,0BAA0B,CAAC,CAACZ,kBAAkB,CAACW,MAAM,CAAC,CAACE,OAAO,CAAC,CAAC;AACpE,CAAC,CAAC;AACDC,EAAE,CAAC,CAAAJ,CAAC,KAAI;EACP,MAAM,EAAEC,MAAM,CAAC,CAAC,GAAGD,CAAC,CAACJ,MAAM;;EAE3B,MAAMS,IAAI,GAAGf,kBAAkB,CAACW,MAAM,CAAC;;EAEvC,MAAMK,WAAW,GAAG,CAACD,IAAI,CAACE,UAAU,EAAEF,IAAI,CAACG,WAAW,EAAE,CAAC,CAAC;EAC1D,MAAMC,OAAO,GAAGT,CAAC,CAACU,oBAAoB,CAAC;IACrCC,IAAI,EAAEL,WAAW;IACjBL,MAAM;IACNW,KAAK,EAAEC,eAAe,CAACC;EACzB,CAAC,CAAC;;EAEF,MAAMC,WAAW,GAAGxB,KAAK,CAACc,IAAI,CAACW,KAAK,CAACC,KAAK,EAAE,GAAG,CAAC;;EAEhD,MAAMC,MAAM,GAAGlB,CAAC,CAACmB,mBAAmB,CAAC;IACnCR,IAAI,EAAEI,WAAW;IACjBH,KAAK,EAAEQ,cAAc,CAACC;EACxB,CAAC,CAAC;;EAEF,MAAMC,OAAO,GAAGtB,CAAC,CAACuB,MAAM,CAACC,oBAAoB,CAAC,CAAC;EAC/CF,OAAO,CAACG,mBAAmB,CAAC,EAAEhB,OAAO,CAAC,CAAC,EAAE,EAAES,MAAM,EAAEH,WAAW,CAAC,CAAC,EAAET,WAAW,CAAC;EAC9EN,CAAC,CAAC0B,iCAAiC,CAAC,YAAY,EAAE,MAAM;IACtDJ,OAAO,CAACK,MAAM,CAAC,CAAC;EAClB,CAAC,CAAC;AACJ,CAAC,CAAC"}