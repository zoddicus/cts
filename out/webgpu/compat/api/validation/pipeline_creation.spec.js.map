{"version":3,"file":"pipeline_creation.spec.js","names":["description","makeTestGroup","kShaderStages","CompatibilityTest","g","test","desc","params","u","combineWithParams","sampleWGSL","textureType","combine","filter","t","startsWith","stage","fn","async","usageWGSL","module","device","createShaderModule","code","success","isCompatibility","doCreateComputePipelineTest","layout","compute","doCreateRenderPipelineTest","vertex","fragment","targets","format"],"sources":["../../../../../src/webgpu/compat/api/validation/pipeline_creation.spec.ts"],"sourcesContent":["export const description = `\nTests that createComputePipeline(async), and createRenderPipeline(async)\nreject pipelines that are invalid in compat mode\n\n- test that depth textures can not be used with non-comparison samplers\n\nTODO:\n- test that a shader that has more than min(maxSamplersPerShaderStage, maxSampledTexturesPerShaderStage)\n  texture+sampler combinations generates a validation error.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { kShaderStages } from '../../../shader/validation/decl/util.js';\nimport { CompatibilityTest } from '../../compatibility_test.js';\n\nexport const g = makeTestGroup(CompatibilityTest);\n\ng.test('depth_textures')\n  .desc('Tests that depth textures can not be used with non-comparison samplers in compat mode.')\n  .params(u =>\n    u //\n      .combineWithParams([\n        {\n          sampleWGSL: 'textureSample(t, s, vec2f(0))', // should pass\n          textureType: 'texture_2d<f32>',\n        },\n        {\n          sampleWGSL: 'textureSample(t, s, vec2f(0))',\n          textureType: 'texture_depth_2d',\n        },\n        {\n          sampleWGSL: 'textureSample(t, s, vec3f(0))',\n          textureType: 'texture_depth_cube',\n        },\n        {\n          sampleWGSL: 'textureSample(t, s, vec2f(0), 0)',\n          textureType: 'texture_depth_2d_array',\n        },\n        {\n          sampleWGSL: 'textureSample(t, s, vec2f(0), vec2i(0, 0))',\n          textureType: 'texture_depth_2d',\n        },\n        {\n          sampleWGSL: 'textureSample(t, s, vec2f(0), 0, vec2i(0, 0))',\n          textureType: 'texture_depth_2d_array',\n        },\n        {\n          sampleWGSL: 'textureSampleLevel(t, s, vec2f(0), 0)',\n          textureType: 'texture_depth_2d',\n        },\n        {\n          sampleWGSL: 'textureSampleLevel(t, s, vec3f(0), 0)',\n          textureType: 'texture_depth_cube',\n        },\n        {\n          sampleWGSL: 'textureSampleLevel(t, s, vec2f(0), 0, 0)',\n          textureType: 'texture_depth_2d_array',\n        },\n        {\n          sampleWGSL: 'textureSampleLevel(t, s, vec2f(0), 0, vec2i(0, 0))',\n          textureType: 'texture_depth_2d',\n        },\n        {\n          sampleWGSL: 'textureSampleLevel(t, s, vec2f(0), 0, 0, vec2i(0, 0))',\n          textureType: 'texture_depth_2d_array',\n        },\n        {\n          sampleWGSL: 'textureGather(t, s, vec2f(0))',\n          textureType: 'texture_depth_2d',\n        },\n        {\n          sampleWGSL: 'textureGather(t, s, vec3f(0))',\n          textureType: 'texture_depth_cube',\n        },\n        {\n          sampleWGSL: 'textureGather(t, s, vec2f(0), 0)',\n          textureType: 'texture_depth_2d_array',\n        },\n        {\n          sampleWGSL: 'textureGather(t, s, vec2f(0), vec2i(0, 0))',\n          textureType: 'texture_depth_2d',\n        },\n        {\n          sampleWGSL: 'textureGather(t, s, vec2f(0), 0, vec2i(0, 0))',\n          textureType: 'texture_depth_2d_array',\n        },\n      ])\n      .combine('stage', kShaderStages)\n      .filter(t => t.sampleWGSL.startsWith('textureGather') || t.stage === 'fragment')\n      .combine('async', [false, true] as const)\n  )\n  .fn(t => {\n    const { sampleWGSL, textureType, stage, async } = t.params;\n\n    const usageWGSL = `_ = ${sampleWGSL};`;\n    const module = t.device.createShaderModule({\n      code: `\n        @group(0) @binding(0) var t: ${textureType};\n        @group(1) @binding(0) var s: sampler;\n\n        // make sure it's fine such a combination exists but it's not used.\n        fn unused() {\n          ${usageWGSL};\n        }\n\n        @vertex fn vs() -> @builtin(position) vec4f {\n            ${stage === 'vertex' ? usageWGSL : ''}\n            return vec4f(0);\n        }\n\n        @fragment fn fs() -> @location(0) vec4f {\n            ${stage === 'fragment' ? usageWGSL : ''}\n            return vec4f(0);\n        }\n\n        @compute @workgroup_size(1) fn cs() {\n            ${stage === 'compute' ? usageWGSL : ''};\n        }\n      `,\n    });\n\n    const success = !t.isCompatibility || textureType === 'texture_2d<f32>';\n    switch (stage) {\n      case 'compute':\n        t.doCreateComputePipelineTest(async, success, {\n          layout: 'auto',\n          compute: {\n            module,\n          },\n        });\n        break;\n      case 'fragment':\n      case 'vertex':\n        t.doCreateRenderPipelineTest(async, success, {\n          layout: 'auto',\n          vertex: {\n            module,\n          },\n          fragment: {\n            module,\n            targets: [{ format: 'rgba8unorm' }],\n          },\n        });\n        break;\n    }\n  });\n"],"mappings":"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"}