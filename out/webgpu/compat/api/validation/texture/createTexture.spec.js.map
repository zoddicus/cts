{"version":3,"file":"createTexture.spec.js","names":["description","makeTestGroup","kTextureDimensions","kTextureViewDimensions","kColorTextureFormats","kCompatModeUnsupportedStorageTextureFormats","kTextureFormatInfo","getTextureDimensionFromView","CompatibilityTest","g","test","desc","fn","t","expectGPUError","device","createTexture","size","format","usage","GPUTextureUsage","TEXTURE_BINDING","viewFormats","params","u","combine","dimension","textureBindingViewDimension","depthOrArrayLayers","shouldError","texture","trackForCleanup","filter","baseFormat","beforeAllSubcases","info","skipIfTextureFormatNotSupported","selectDeviceOrSkipTestCase","feature","formatPairs","blockWidth","blockHeight","STORAGE_BINDING"],"sources":["../../../../../../src/webgpu/compat/api/validation/texture/createTexture.spec.ts"],"sourcesContent":["/* eslint-disable prettier/prettier */\nexport const description = `\nTests that you can not use bgra8unorm-srgb in compat mode.\nTests that textureBindingViewDimension must compatible with texture dimension\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { kTextureDimensions, kTextureViewDimensions } from '../../../../capability_info.js';\nimport { kColorTextureFormats, kCompatModeUnsupportedStorageTextureFormats, kTextureFormatInfo } from '../../../../format_info.js';\nimport { getTextureDimensionFromView } from '../../../../util/texture/base.js';\nimport { CompatibilityTest } from '../../../compatibility_test.js';\n\nexport const g = makeTestGroup(CompatibilityTest);\n\ng.test('unsupportedTextureFormats')\n  .desc(`Tests that you can not create a bgra8unorm-srgb texture in compat mode.`)\n  .fn(t => {\n    t.expectGPUError(\n      'validation',\n      () =>\n        t.device.createTexture({\n          size: [1, 1, 1],\n          format: 'bgra8unorm-srgb',\n          usage: GPUTextureUsage.TEXTURE_BINDING,\n        }),\n      true\n    );\n  });\n\ng.test('unsupportedTextureViewFormats')\n  .desc(\n    `Tests that you can not create a bgra8unorm texture with a bgra8unorm-srgb viewFormat in compat mode.`\n  )\n  .fn(t => {\n    t.expectGPUError(\n      'validation',\n      () =>\n        t.device.createTexture({\n          size: [1, 1, 1],\n          format: 'bgra8unorm',\n          viewFormats: ['bgra8unorm-srgb'],\n          usage: GPUTextureUsage.TEXTURE_BINDING,\n        }),\n      true\n    );\n  });\n\ng.test('invalidTextureBindingViewDimension')\n  .desc(\n    `Tests that you can not specify a textureBindingViewDimension that is incompatible with the texture's dimension.`\n  )\n  .params(u =>\n    u //\n      .combine('dimension', kTextureDimensions)\n      .combine('textureBindingViewDimension', kTextureViewDimensions)\n  )\n  .fn(t => {\n    const { dimension, textureBindingViewDimension } = t.params;\n    const depthOrArrayLayers = textureBindingViewDimension === '1d' || textureBindingViewDimension === '2d' ? 1 : 6;\n    const shouldError = getTextureDimensionFromView(textureBindingViewDimension) !== dimension;\n    t.expectGPUError(\n      'validation',\n      () => {\n        const texture = t.device.createTexture({\n          size: [1, 1, depthOrArrayLayers],\n          format: 'rgba8unorm',\n          usage: GPUTextureUsage.TEXTURE_BINDING,\n          dimension,\n          textureBindingViewDimension,\n        } as GPUTextureDescriptor); // MAINTENANCE_TODO: remove cast once textureBindingViewDimension is added to IDL\n        t.trackForCleanup(texture);\n      },\n      shouldError\n    );\n  });\n\ng.test('depthOrArrayLayers_incompatible_with_textureBindingViewDimension')\n  .desc(\n    `Tests\n    * if textureBindingViewDimension is '2d' then depthOrArrayLayers must be 1\n    * if textureBindingViewDimension is 'cube' then depthOrArrayLayers must be 6\n    `\n  )\n  .params(u =>\n    u //\n      .combine('textureBindingViewDimension', ['2d', 'cube'])\n      .combine('depthOrArrayLayers', [1, 3, 6, 12])\n  )\n  .fn(t => {\n    const { textureBindingViewDimension, depthOrArrayLayers } = t.params;\n    const shouldError =\n      (textureBindingViewDimension === '2d' && depthOrArrayLayers !== 1) ||\n      (textureBindingViewDimension === 'cube' && depthOrArrayLayers !== 6);\n    t.expectGPUError(\n      'validation',\n      () => {\n        const texture = t.device.createTexture({\n          size: [1, 1, depthOrArrayLayers],\n          format: 'rgba8unorm',\n          usage: GPUTextureUsage.TEXTURE_BINDING,\n          textureBindingViewDimension,\n        } as GPUTextureDescriptor); // MAINTENANCE_TODO: remove cast once textureBindingViewDimension is added to IDL\n        t.trackForCleanup(texture);\n      },\n      shouldError\n    );\n  });\n\ng.test('format_reinterpretation')\n  .desc(\n    `\n    Tests that you can not request different view formats when creating a texture.\n    For example, rgba8unorm can not be viewed as rgba8unorm-srgb\n  `\n  )\n  .params(u =>\n    u //\n      .combine('format', kColorTextureFormats as GPUTextureFormat[])\n      .filter(\n        ({ format }) =>\n          !!kTextureFormatInfo[format].baseFormat &&\n          kTextureFormatInfo[format].baseFormat !== format\n      )\n  )\n  .beforeAllSubcases(t => {\n    const info = kTextureFormatInfo[t.params.format];\n    t.skipIfTextureFormatNotSupported(t.params.format);\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    const formatPairs = [\n      { format, viewFormats: [info.baseFormat!] },\n      { format: info.baseFormat!, viewFormats: [format] },\n      { format, viewFormats: [format, info.baseFormat!] },\n      { format: info.baseFormat!, viewFormats: [format, info.baseFormat!] },\n    ];\n    for (const { format, viewFormats } of formatPairs) {\n      t.expectGPUError(\n        'validation',\n        () => {\n          const texture = t.device.createTexture({\n            size: [info.blockWidth, info.blockHeight],\n            format,\n            viewFormats,\n            usage: GPUTextureUsage.TEXTURE_BINDING,\n          });\n          t.trackForCleanup(texture);\n        },\n        true\n      );\n    }\n  });\n\ng.test('unsupportedStorageTextureFormats')\n  .desc(`Tests that you can not create unsupported storage texture formats in compat mode.`)\n  .params(u => u.combine('format', kCompatModeUnsupportedStorageTextureFormats))\n  .fn(t => {\n    const { format } = t.params;\n    t.expectGPUError(\n      'validation',\n      () =>\n        t.device.createTexture({\n          size: [1, 1, 1],\n          format,\n          usage: GPUTextureUsage.STORAGE_BINDING,\n        }),\n      true\n    );\n  });\n"],"mappings":"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"}