{"version":3,"file":"createTexture.spec.js","names":["description","makeTestGroup","kTextureDimensions","kTextureViewDimensions","getTextureDimensionFromView","CompatibilityTest","g","test","desc","fn","t","expectGPUError","device","createTexture","size","format","usage","GPUTextureUsage","TEXTURE_BINDING","viewFormats","params","u","combine","dimension","textureBindingViewDimension","depthOrArrayLayers","shouldError","texture","trackForCleanup"],"sources":["../../../../../../src/webgpu/compat/api/validation/texture/createTexture.spec.ts"],"sourcesContent":["/* eslint-disable prettier/prettier */\nexport const description = `\nTests that you can not use bgra8unorm-srgb in compat mode.\nTests that textureBindingViewDimension must compatible with texture dimension\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { kTextureDimensions, kTextureViewDimensions } from '../../../../capability_info.js';\nimport { getTextureDimensionFromView } from '../../../../util/texture/base.js';\nimport { CompatibilityTest } from '../../../compatibility_test.js';\n\nexport const g = makeTestGroup(CompatibilityTest);\n\ng.test('unsupportedTextureFormats')\n  .desc(`Tests that you can not create a bgra8unorm-srgb texture in compat mode.`)\n  .fn(t => {\n    t.expectGPUError(\n      'validation',\n      () =>\n        t.device.createTexture({\n          size: [1, 1, 1],\n          format: 'bgra8unorm-srgb',\n          usage: GPUTextureUsage.TEXTURE_BINDING,\n        }),\n      true\n    );\n  });\n\ng.test('unsupportedTextureViewFormats')\n  .desc(\n    `Tests that you can not create a bgra8unorm texture with a bgra8unorm-srgb viewFormat in compat mode.`\n  )\n  .fn(t => {\n    t.expectGPUError(\n      'validation',\n      () =>\n        t.device.createTexture({\n          size: [1, 1, 1],\n          format: 'bgra8unorm',\n          viewFormats: ['bgra8unorm-srgb'],\n          usage: GPUTextureUsage.TEXTURE_BINDING,\n        }),\n      true\n    );\n  });\n\ng.test('invalidTextureBindingViewDimension')\n  .desc(\n    `Tests that you can not specify a textureBindingViewDimension that is incompatible with the texture's dimension.`\n  )\n  .params(u =>\n    u //\n      .combine('dimension', kTextureDimensions)\n      .combine('textureBindingViewDimension', kTextureViewDimensions)\n  )\n  .fn(t => {\n    const { dimension, textureBindingViewDimension } = t.params;\n    const depthOrArrayLayers = textureBindingViewDimension === '1d' || textureBindingViewDimension === '2d' ? 1 : 6;\n    const shouldError = getTextureDimensionFromView(textureBindingViewDimension) !== dimension;\n    t.expectGPUError(\n      'validation',\n      () => {\n        const texture = t.device.createTexture({\n          size: [1, 1, depthOrArrayLayers],\n          format: 'rgba8unorm',\n          usage: GPUTextureUsage.TEXTURE_BINDING,\n          dimension,\n          textureBindingViewDimension,\n        } as GPUTextureDescriptor); // MAINTENANCE_TODO: remove cast once textureBindingViewDimension is added to IDL\n        t.trackForCleanup(texture);\n      },\n      shouldError\n    );\n  });\n\ng.test('depthOrArrayLayers_incompatible_with_textureBindingViewDimension')\n  .desc(\n    `Tests\n    * if textureBindingViewDimension is '2d' then depthOrArrayLayers must be 1\n    * if textureBindingViewDimension is 'cube' then depthOrArrayLayers must be 6\n    `\n  )\n  .params(u =>\n    u //\n      .combine('textureBindingViewDimension', ['2d', 'cube'])\n      .combine('depthOrArrayLayers', [1, 3, 6, 12])\n  )\n  .fn(t => {\n    const { textureBindingViewDimension, depthOrArrayLayers } = t.params;\n    const shouldError =\n      (textureBindingViewDimension === '2d' && depthOrArrayLayers !== 1) ||\n      (textureBindingViewDimension === 'cube' && depthOrArrayLayers !== 6);\n    t.expectGPUError(\n      'validation',\n      () => {\n        const texture = t.device.createTexture({\n          size: [1, 1, depthOrArrayLayers],\n          format: 'rgba8unorm',\n          usage: GPUTextureUsage.TEXTURE_BINDING,\n          textureBindingViewDimension,\n        } as GPUTextureDescriptor); // MAINTENANCE_TODO: remove cast once textureBindingViewDimension is added to IDL\n        t.trackForCleanup(texture);\n      },\n      shouldError\n    );\n  });\n\n"],"mappings":"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"}