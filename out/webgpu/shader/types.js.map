{"version":3,"file":"types.js","names":["keysOf","assert","align","kArrayLength","HostSharableTypes","kScalarTypeInfo","layout","alignment","size","supportsAtomics","arrayLength","innerLength","undefined","kScalarTypes","kVectorContainerTypeInfo","kVectorContainerTypes","kMatrixContainerTypeInfo","kMatrixContainerTypes","kAccessModeInfo","read","write","read_write","kAddressSpaceInfo","storage","scope","binding","spell","accessModes","spellAccessMode","uniform","private","workgroup","function","handle","TexelFormats","format","_shaderType","generateTypes","addressSpace","baseType","containerType","isAtomic","scalarInfo","scalarType","isHostSharable","toString","type","_kTypeInfo","elementBaseType","vectorType","matrixType","matrixInfo","arrayTypeInfo","arrayStride","elementLayout","sharableType","p","storageMode","supportedScalarTypes","info","isHostShared"],"sources":["../../../src/webgpu/shader/types.ts"],"sourcesContent":["import { keysOf } from '../../common/util/data_tables.js';\nimport { assert } from '../../common/util/util.js';\nimport { align } from '../util/math.js';\n\nconst kArrayLength = 3;\n\nexport type Requirement = 'never' | 'may' | 'must'; // never is the same as \"must not\"\nexport type ContainerType = 'scalar' | 'vector' | 'matrix' | 'atomic' | 'array';\nexport type ScalarType = 'i32' | 'u32' | 'f32' | 'bool';\n\nexport const HostSharableTypes = ['i32', 'u32', 'f32'] as const;\n\n/** Info for each plain scalar type. */\nexport const kScalarTypeInfo =\n  /* prettier-ignore */ {\n  'i32':    { layout: { alignment:  4, size:  4 }, supportsAtomics:  true, arrayLength: 1, innerLength: 0 },\n  'u32':    { layout: { alignment:  4, size:  4 }, supportsAtomics:  true, arrayLength: 1, innerLength: 0 },\n  'f32':    { layout: { alignment:  4, size:  4 }, supportsAtomics: false, arrayLength: 1, innerLength: 0 },\n  'bool':   { layout:                   undefined, supportsAtomics: false, arrayLength: 1, innerLength: 0 },\n} as const;\n/** List of all plain scalar types. */\nexport const kScalarTypes = keysOf(kScalarTypeInfo);\n\n/** Info for each vecN<> container type. */\nexport const kVectorContainerTypeInfo =\n  /* prettier-ignore */ {\n  'vec2':   { layout: { alignment:  8, size:  8 }, arrayLength: 2 , innerLength: 0 },\n  'vec3':   { layout: { alignment: 16, size: 12 }, arrayLength: 3 , innerLength: 0 },\n  'vec4':   { layout: { alignment: 16, size: 16 }, arrayLength: 4 , innerLength: 0 },\n} as const;\n/** List of all vecN<> container types. */\nexport const kVectorContainerTypes = keysOf(kVectorContainerTypeInfo);\n\n/** Info for each matNxN<> container type. */\nexport const kMatrixContainerTypeInfo =\n  /* prettier-ignore */ {\n  'mat2x2': { layout: { alignment:  8, size: 16 }, arrayLength: 2, innerLength: 2 },\n  'mat3x2': { layout: { alignment:  8, size: 24 }, arrayLength: 3, innerLength: 2 },\n  'mat4x2': { layout: { alignment:  8, size: 32 }, arrayLength: 4, innerLength: 2 },\n  'mat2x3': { layout: { alignment: 16, size: 32 }, arrayLength: 2, innerLength: 3 },\n  'mat3x3': { layout: { alignment: 16, size: 48 }, arrayLength: 3, innerLength: 3 },\n  'mat4x3': { layout: { alignment: 16, size: 64 }, arrayLength: 4, innerLength: 3 },\n  'mat2x4': { layout: { alignment: 16, size: 32 }, arrayLength: 2, innerLength: 4 },\n  'mat3x4': { layout: { alignment: 16, size: 48 }, arrayLength: 3, innerLength: 4 },\n  'mat4x4': { layout: { alignment: 16, size: 64 }, arrayLength: 4, innerLength: 4 },\n} as const;\n/** List of all matNxN<> container types. */\nexport const kMatrixContainerTypes = keysOf(kMatrixContainerTypeInfo);\n\nexport type AddressSpace = 'storage' | 'uniform' | 'private' | 'function' | 'workgroup' | 'handle';\nexport type AccessMode = 'read' | 'write' | 'read_write';\nexport type Scope = 'module' | 'function';\n\nexport const kAccessModeInfo = {\n  read: { read: true, write: false },\n  write: { read: false, write: true },\n  read_write: { read: true, write: true },\n} as const;\n\nexport type AddressSpaceInfo = {\n  // Variables in this address space must be declared in what scope?\n  scope: Scope;\n\n  // True if a variable in this address space requires a binding.\n  binding: boolean;\n\n  // Spell the address space in var declarations?\n  spell: Requirement;\n\n  // Access modes for ordinary accesses (loads, stores).\n  // The first one is the default.\n  // This is empty for the 'handle' address space where access is opaque.\n  accessModes: readonly AccessMode[];\n\n  // Spell the access mode in var declarations?\n  //   7.3 var Declarations\n  //   The access mode always has a default value, and except for variables\n  //   in the storage address space, must not be specified in the WGSL source.\n  //   See ยง13.3 Address Spaces.\n  spellAccessMode: Requirement;\n};\n\nexport const kAddressSpaceInfo: Record<string, AddressSpaceInfo> = {\n  storage: {\n    scope: 'module',\n    binding: true,\n    spell: 'must',\n    accessModes: ['read', 'read_write'],\n    spellAccessMode: 'may',\n  },\n  uniform: {\n    scope: 'module',\n    binding: true,\n    spell: 'must',\n    accessModes: ['read'],\n    spellAccessMode: 'never',\n  },\n  private: {\n    scope: 'module',\n    binding: false,\n    spell: 'must',\n    accessModes: ['read_write'],\n    spellAccessMode: 'never',\n  },\n  workgroup: {\n    scope: 'module',\n    binding: false,\n    spell: 'must',\n    accessModes: ['read_write'],\n    spellAccessMode: 'never',\n  },\n  function: {\n    scope: 'function',\n    binding: false,\n    spell: 'may',\n    accessModes: ['read_write'],\n    spellAccessMode: 'never',\n  },\n  handle: {\n    scope: 'module',\n    binding: true,\n    spell: 'never',\n    accessModes: [],\n    spellAccessMode: 'never',\n  },\n} as const;\n\n/** List of texel formats and their shader representation */\nexport const TexelFormats = [\n  { format: 'rgba8unorm', _shaderType: 'f32' },\n  { format: 'rgba8snorm', _shaderType: 'f32' },\n  { format: 'rgba8uint', _shaderType: 'u32' },\n  { format: 'rgba8sint', _shaderType: 'i32' },\n  { format: 'rgba16uint', _shaderType: 'u32' },\n  { format: 'rgba16sint', _shaderType: 'i32' },\n  { format: 'rgba16float', _shaderType: 'f32' },\n  { format: 'r32uint', _shaderType: 'u32' },\n  { format: 'r32sint', _shaderType: 'i32' },\n  { format: 'r32float', _shaderType: 'f32' },\n  { format: 'rg32uint', _shaderType: 'u32' },\n  { format: 'rg32sint', _shaderType: 'i32' },\n  { format: 'rg32float', _shaderType: 'f32' },\n  { format: 'rgba32uint', _shaderType: 'i32' },\n  { format: 'rgba32sint', _shaderType: 'i32' },\n  { format: 'rgba32float', _shaderType: 'f32' },\n] as const;\n\n/**\n * Generate a bunch types (vec, mat, sized/unsized array) for testing.\n */\nexport function* generateTypes({\n  addressSpace,\n  baseType,\n  containerType,\n  isAtomic = false,\n}: {\n  addressSpace: AddressSpace;\n  /** Base scalar type (i32/u32/f32/bool). */\n  baseType: ScalarType;\n  /** Container type (scalar/vector/matrix/array) */\n  containerType: ContainerType;\n  /** Whether to wrap the baseType in `atomic<>`. */\n  isAtomic?: boolean;\n}) {\n  const scalarInfo = kScalarTypeInfo[baseType];\n  if (isAtomic) {\n    assert(scalarInfo.supportsAtomics, 'type does not support atomics');\n  }\n  const scalarType = isAtomic ? `atomic<${baseType}>` : baseType;\n\n  // Storage and uniform require host-sharable types.\n  if (addressSpace === 'storage' || addressSpace === 'uniform') {\n    assert(isHostSharable(baseType), 'type ' + baseType.toString() + ' is not host sharable');\n  }\n\n  // Scalar types\n  if (containerType === 'scalar') {\n    yield {\n      type: `${scalarType}`,\n      _kTypeInfo: {\n        elementBaseType: `${scalarType}`,\n        ...scalarInfo,\n      },\n    };\n  }\n\n  // Vector types\n  if (containerType === 'vector') {\n    for (const vectorType of kVectorContainerTypes) {\n      yield {\n        type: `${vectorType}<${scalarType}>`,\n        _kTypeInfo: { elementBaseType: baseType, ...kVectorContainerTypeInfo[vectorType] },\n      };\n    }\n  }\n\n  if (containerType === 'matrix') {\n    // Matrices can only be f32.\n    if (baseType === 'f32') {\n      for (const matrixType of kMatrixContainerTypes) {\n        const matrixInfo = kMatrixContainerTypeInfo[matrixType];\n        yield {\n          type: `${matrixType}<${scalarType}>`,\n          _kTypeInfo: {\n            elementBaseType: `vec${matrixInfo.innerLength}<${scalarType}>`,\n            ...matrixInfo,\n          },\n        };\n      }\n    }\n  }\n\n  // Array types\n  if (containerType === 'array') {\n    const arrayTypeInfo = {\n      elementBaseType: `${baseType}`,\n      arrayLength: kArrayLength,\n      layout: scalarInfo.layout\n        ? {\n            alignment: scalarInfo.layout.alignment,\n            size:\n              addressSpace === 'uniform'\n                ? // Uniform storage class must have array elements aligned to 16.\n                  kArrayLength *\n                  arrayStride({\n                    ...scalarInfo.layout,\n                    alignment: 16,\n                  })\n                : kArrayLength * arrayStride(scalarInfo.layout),\n          }\n        : undefined,\n    };\n\n    // Sized\n    if (addressSpace === 'uniform') {\n      yield {\n        type: `array<vec4<${scalarType}>,${kArrayLength}>`,\n        _kTypeInfo: arrayTypeInfo,\n      };\n    } else {\n      yield { type: `array<${scalarType},${kArrayLength}>`, _kTypeInfo: arrayTypeInfo };\n    }\n    // Unsized\n    if (addressSpace === 'storage') {\n      yield { type: `array<${scalarType}>`, _kTypeInfo: arrayTypeInfo };\n    }\n  }\n\n  function arrayStride(elementLayout: { size: number; alignment: number }) {\n    return align(elementLayout.size, elementLayout.alignment);\n  }\n\n  function isHostSharable(baseType: ScalarType) {\n    for (const sharableType of HostSharableTypes) {\n      if (sharableType === baseType) return true;\n    }\n    return false;\n  }\n}\n\n/** Atomic access requires scalar/array container type and storage/workgroup memory. */\nexport function supportsAtomics(p: {\n  addressSpace: string;\n  storageMode: AccessMode | undefined;\n  access: string;\n  containerType: ContainerType;\n}) {\n  return (\n    ((p.addressSpace === 'storage' && p.storageMode === 'read_write') ||\n      p.addressSpace === 'workgroup') &&\n    (p.containerType === 'scalar' || p.containerType === 'array')\n  );\n}\n\n/** Generates an iterator of supported base types (i32/u32/f32/bool) */\nexport function* supportedScalarTypes(p: { isAtomic: boolean; addressSpace: string }) {\n  for (const scalarType of kScalarTypes) {\n    const info = kScalarTypeInfo[scalarType];\n\n    // Test atomics only on supported scalar types.\n    if (p.isAtomic && !info.supportsAtomics) continue;\n\n    // Storage and uniform require host-sharable types.\n    const isHostShared = p.addressSpace === 'storage' || p.addressSpace === 'uniform';\n    if (isHostShared && info.layout === undefined) continue;\n\n    yield scalarType;\n  }\n}\n"],"mappings":"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"}