{"version":3,"file":"compute_builtins.spec.js","names":["description","makeTestGroup","GPUTest","g","test","desc","params","u","combine","combineWithParams","groupSize","x","y","z","numGroups","beginSubcases","fn","t","invocationsPerGroup","totalInvocations","structures","local_id","local_index","global_id","group_id","num_groups","method","wgsl","pipeline","device","createComputePipeline","layout","compute","module","createShaderModule","code","entryPoint","kLocalIdOffset","kLocalIndexOffset","kGlobalIdOffset","kGroupIdOffset","kNumGroupsOffset","kOutputElementSize","outputBuffer","createBufferTracked","size","usage","GPUBufferUsage","STORAGE","COPY_SRC","bindGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","buffer","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatch","dispatchWorkgroups","dispatchBuffer","Uint32Array","BYTES_PER_ELEMENT","INDIRECT","mappedAtCreation","dispatchData","getMappedRange","unmap","dispatchWorkgroupsIndirect","end","queue","submit","finish","checkEachIndex","output","gz","gy","gx","lz","ly","lx","groupIndex","localIndex","globalIndex","globalOffset","expectEqual","name","expected","actual","Error","undefined","checkVec3Value","fieldOffset","offset","error","expectGPUBufferValuesPassCheck","outputData","type","typedLength"],"sources":["../../../../../src/webgpu/shader/execution/shader_io/compute_builtins.spec.ts"],"sourcesContent":["export const description = `Test compute shader builtin variables`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../gpu_test.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n// Test that the values for each input builtin are correct.\ng.test('inputs')\n  .desc(`Test compute shader builtin inputs values`)\n  .params(u =>\n    u\n      .combine('method', ['param', 'struct', 'mixed'] as const)\n      .combine('dispatch', ['direct', 'indirect'] as const)\n      .combineWithParams([\n        {\n          groupSize: { x: 1, y: 1, z: 1 },\n          numGroups: { x: 1, y: 1, z: 1 },\n        },\n        {\n          groupSize: { x: 8, y: 4, z: 2 },\n          numGroups: { x: 1, y: 1, z: 1 },\n        },\n        {\n          groupSize: { x: 1, y: 1, z: 1 },\n          numGroups: { x: 8, y: 4, z: 2 },\n        },\n        {\n          groupSize: { x: 3, y: 7, z: 5 },\n          numGroups: { x: 13, y: 9, z: 11 },\n        },\n      ] as const)\n      .beginSubcases()\n  )\n  .fn(t => {\n    const invocationsPerGroup = t.params.groupSize.x * t.params.groupSize.y * t.params.groupSize.z;\n    const totalInvocations =\n      invocationsPerGroup * t.params.numGroups.x * t.params.numGroups.y * t.params.numGroups.z;\n\n    // Generate the structures, parameters, and builtin expressions used in the shader.\n    let params = '';\n    let structures = '';\n    let local_id = '';\n    let local_index = '';\n    let global_id = '';\n    let group_id = '';\n    let num_groups = '';\n    switch (t.params.method) {\n      case 'param':\n        params = `\n          @builtin(local_invocation_id) local_id : vec3<u32>,\n          @builtin(local_invocation_index) local_index : u32,\n          @builtin(global_invocation_id) global_id : vec3<u32>,\n          @builtin(workgroup_id) group_id : vec3<u32>,\n          @builtin(num_workgroups) num_groups : vec3<u32>,\n        `;\n        local_id = 'local_id';\n        local_index = 'local_index';\n        global_id = 'global_id';\n        group_id = 'group_id';\n        num_groups = 'num_groups';\n        break;\n      case 'struct':\n        structures = `struct Inputs {\n            @builtin(local_invocation_id) local_id : vec3<u32>,\n            @builtin(local_invocation_index) local_index : u32,\n            @builtin(global_invocation_id) global_id : vec3<u32>,\n            @builtin(workgroup_id) group_id : vec3<u32>,\n            @builtin(num_workgroups) num_groups : vec3<u32>,\n          };`;\n        params = `inputs : Inputs`;\n        local_id = 'inputs.local_id';\n        local_index = 'inputs.local_index';\n        global_id = 'inputs.global_id';\n        group_id = 'inputs.group_id';\n        num_groups = 'inputs.num_groups';\n        break;\n      case 'mixed':\n        structures = `struct InputsA {\n          @builtin(local_invocation_index) local_index : u32,\n          @builtin(global_invocation_id) global_id : vec3<u32>,\n        };\n        struct InputsB {\n          @builtin(workgroup_id) group_id : vec3<u32>\n        };`;\n        params = `@builtin(local_invocation_id) local_id : vec3<u32>,\n                  inputsA : InputsA,\n                  inputsB : InputsB,\n                  @builtin(num_workgroups) num_groups : vec3<u32>,`;\n        local_id = 'local_id';\n        local_index = 'inputsA.local_index';\n        global_id = 'inputsA.global_id';\n        group_id = 'inputsB.group_id';\n        num_groups = 'num_groups';\n        break;\n    }\n\n    // WGSL shader that stores every builtin value to a buffer, for every invocation in the grid.\n    const wgsl = `\n      struct Outputs {\n        local_id: vec3u,\n        local_index: u32,\n        global_id: vec3u,\n        group_id: vec3u,\n        num_groups: vec3u,\n      };\n      @group(0) @binding(0) var<storage, read_write> outputs : array<Outputs>;\n\n      ${structures}\n\n      const group_width = ${t.params.groupSize.x}u;\n      const group_height = ${t.params.groupSize.y}u;\n      const group_depth = ${t.params.groupSize.z}u;\n\n      @compute @workgroup_size(group_width, group_height, group_depth)\n      fn main(\n        ${params}\n        ) {\n        let group_index = ((${group_id}.z * ${num_groups}.y) + ${group_id}.y) * ${num_groups}.x + ${group_id}.x;\n        let global_index = group_index * ${invocationsPerGroup}u + ${local_index};\n        var o: Outputs;\n        o.local_id = ${local_id};\n        o.local_index = ${local_index};\n        o.global_id = ${global_id};\n        o.group_id = ${group_id};\n        o.num_groups = ${num_groups};\n        outputs[global_index] = o;\n      }\n    `;\n\n    const pipeline = t.device.createComputePipeline({\n      layout: 'auto',\n      compute: {\n        module: t.device.createShaderModule({\n          code: wgsl,\n        }),\n        entryPoint: 'main',\n      },\n    });\n\n    // Offsets are in u32 size units\n    const kLocalIdOffset = 0;\n    const kLocalIndexOffset = 3;\n    const kGlobalIdOffset = 4;\n    const kGroupIdOffset = 8;\n    const kNumGroupsOffset = 12;\n    const kOutputElementSize = 16;\n\n    // Create the output buffers.\n    const outputBuffer = t.createBufferTracked({\n      size: totalInvocations * kOutputElementSize * 4,\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n    });\n\n    const bindGroup = t.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [{ binding: 0, resource: { buffer: outputBuffer } }],\n    });\n\n    // Run the shader.\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginComputePass();\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bindGroup);\n    switch (t.params.dispatch) {\n      case 'direct':\n        pass.dispatchWorkgroups(t.params.numGroups.x, t.params.numGroups.y, t.params.numGroups.z);\n        break;\n      case 'indirect': {\n        const dispatchBuffer = t.createBufferTracked({\n          size: 3 * Uint32Array.BYTES_PER_ELEMENT,\n          usage: GPUBufferUsage.INDIRECT,\n          mappedAtCreation: true,\n        });\n        const dispatchData = new Uint32Array(dispatchBuffer.getMappedRange());\n        dispatchData[0] = t.params.numGroups.x;\n        dispatchData[1] = t.params.numGroups.y;\n        dispatchData[2] = t.params.numGroups.z;\n        dispatchBuffer.unmap();\n        pass.dispatchWorkgroupsIndirect(dispatchBuffer, 0);\n        break;\n      }\n    }\n    pass.end();\n    t.queue.submit([encoder.finish()]);\n\n    type vec3 = { x: number; y: number; z: number };\n\n    // Helper to check that the vec3<u32> value at each index of the provided `output` buffer\n    // matches the expected value for that invocation, as generated by the `getBuiltinValue`\n    // function. The `name` parameter is the builtin name, used for error messages.\n    const checkEachIndex = (output: Uint32Array) => {\n      // Loop over workgroups.\n      for (let gz = 0; gz < t.params.numGroups.z; gz++) {\n        for (let gy = 0; gy < t.params.numGroups.y; gy++) {\n          for (let gx = 0; gx < t.params.numGroups.x; gx++) {\n            // Loop over invocations within a group.\n            for (let lz = 0; lz < t.params.groupSize.z; lz++) {\n              for (let ly = 0; ly < t.params.groupSize.y; ly++) {\n                for (let lx = 0; lx < t.params.groupSize.x; lx++) {\n                  const groupIndex = (gz * t.params.numGroups.y + gy) * t.params.numGroups.x + gx;\n                  const localIndex = (lz * t.params.groupSize.y + ly) * t.params.groupSize.x + lx;\n                  const globalIndex = groupIndex * invocationsPerGroup + localIndex;\n                  const globalOffset = globalIndex * kOutputElementSize;\n\n                  const expectEqual = (name: string, expected: number, actual: number) => {\n                    if (actual !== expected) {\n                      return new Error(\n                        `${name} failed at group(${gx},${gy},${gz}) local(${lx},${ly},${lz}))\\n` +\n                          `    expected: ${expected}\\n` +\n                          `    got:      ${actual}`\n                      );\n                    }\n                    return undefined;\n                  };\n\n                  const checkVec3Value = (name: string, fieldOffset: number, expected: vec3) => {\n                    const offset = globalOffset + fieldOffset;\n                    return (\n                      expectEqual(`${name}.x`, expected.x, output[offset + 0]) ||\n                      expectEqual(`${name}.y`, expected.y, output[offset + 1]) ||\n                      expectEqual(`${name}.z`, expected.z, output[offset + 2])\n                    );\n                  };\n\n                  const error =\n                    checkVec3Value('local_id', kLocalIdOffset, { x: lx, y: ly, z: lz }) ||\n                    checkVec3Value('global_id', kGlobalIdOffset, {\n                      x: gx * t.params.groupSize.x + lx,\n                      y: gy * t.params.groupSize.y + ly,\n                      z: gz * t.params.groupSize.z + lz,\n                    }) ||\n                    checkVec3Value('group_id', kGroupIdOffset, { x: gx, y: gy, z: gz }) ||\n                    checkVec3Value('num_groups', kNumGroupsOffset, t.params.numGroups) ||\n                    expectEqual(\n                      'local_index',\n                      localIndex,\n                      output[globalOffset + kLocalIndexOffset]\n                    );\n                  if (error) {\n                    return error;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      return undefined;\n    };\n\n    t.expectGPUBufferValuesPassCheck(outputBuffer, outputData => checkEachIndex(outputData), {\n      type: Uint32Array,\n      typedLength: outputBuffer.size / 4,\n    });\n  });\n"],"mappings":"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"}