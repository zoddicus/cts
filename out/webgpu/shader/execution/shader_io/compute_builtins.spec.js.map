{"version":3,"file":"compute_builtins.spec.js","names":["description","makeTestGroup","iterRange","GPUTest","g","test","desc","params","u","combine","combineWithParams","groupSize","x","y","z","numGroups","beginSubcases","fn","t","invocationsPerGroup","totalInvocations","structures","local_id","local_index","global_id","group_id","num_groups","method","wgsl","pipeline","device","createComputePipeline","layout","compute","module","createShaderModule","code","entryPoint","createBuffer","size","binding","buffer","usage","GPUBufferUsage","STORAGE","COPY_SRC","trackForCleanup","bindGroupEntries","push","resource","localIdBuffer","localIndexBuffer","globalIdBuffer","groupIdBuffer","numGroupsBuffer","bindGroup","createBindGroup","getBindGroupLayout","entries","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatch","dispatchWorkgroups","dispatchBuffer","Uint32Array","BYTES_PER_ELEMENT","INDIRECT","mappedAtCreation","dispatchData","getMappedRange","unmap","dispatchWorkgroupsIndirect","end","queue","submit","finish","checkEachIndex","output","name","getBuiltinValue","gz","gy","gx","lz","ly","lx","groupIndex","localIndex","globalIndex","expected","Error","undefined","expectGPUBufferValuesEqual","expectGPUBufferValuesPassCheck","outputData","_","localId","type","typedLength","getGlobalId","groupId"],"sources":["../../../../../src/webgpu/shader/execution/shader_io/compute_builtins.spec.ts"],"sourcesContent":["export const description = `Test compute shader builtin variables`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { iterRange } from '../../../../common/util/util.js';\nimport { GPUTest } from '../../../gpu_test.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n// Test that the values for each input builtin are correct.\ng.test('inputs')\n  .desc(`Test compute shader builtin inputs values`)\n  .params(u =>\n    u\n      .combine('method', ['param', 'struct', 'mixed'] as const)\n      .combine('dispatch', ['direct', 'indirect'] as const)\n      .combineWithParams([\n        {\n          groupSize: { x: 1, y: 1, z: 1 },\n          numGroups: { x: 1, y: 1, z: 1 },\n        },\n        {\n          groupSize: { x: 8, y: 4, z: 2 },\n          numGroups: { x: 1, y: 1, z: 1 },\n        },\n        {\n          groupSize: { x: 1, y: 1, z: 1 },\n          numGroups: { x: 8, y: 4, z: 2 },\n        },\n        {\n          groupSize: { x: 3, y: 7, z: 5 },\n          numGroups: { x: 13, y: 9, z: 11 },\n        },\n      ] as const)\n      .beginSubcases()\n  )\n  .fn(t => {\n    const invocationsPerGroup = t.params.groupSize.x * t.params.groupSize.y * t.params.groupSize.z;\n    const totalInvocations =\n      invocationsPerGroup * t.params.numGroups.x * t.params.numGroups.y * t.params.numGroups.z;\n\n    // Generate the structures, parameters, and builtin expressions used in the shader.\n    let params = '';\n    let structures = '';\n    let local_id = '';\n    let local_index = '';\n    let global_id = '';\n    let group_id = '';\n    let num_groups = '';\n    switch (t.params.method) {\n      case 'param':\n        params = `\n          @builtin(local_invocation_id) local_id : vec3<u32>,\n          @builtin(local_invocation_index) local_index : u32,\n          @builtin(global_invocation_id) global_id : vec3<u32>,\n          @builtin(workgroup_id) group_id : vec3<u32>,\n          @builtin(num_workgroups) num_groups : vec3<u32>,\n        `;\n        local_id = 'local_id';\n        local_index = 'local_index';\n        global_id = 'global_id';\n        group_id = 'group_id';\n        num_groups = 'num_groups';\n        break;\n      case 'struct':\n        structures = `struct Inputs {\n            @builtin(local_invocation_id) local_id : vec3<u32>,\n            @builtin(local_invocation_index) local_index : u32,\n            @builtin(global_invocation_id) global_id : vec3<u32>,\n            @builtin(workgroup_id) group_id : vec3<u32>,\n            @builtin(num_workgroups) num_groups : vec3<u32>,\n          };`;\n        params = `inputs : Inputs`;\n        local_id = 'inputs.local_id';\n        local_index = 'inputs.local_index';\n        global_id = 'inputs.global_id';\n        group_id = 'inputs.group_id';\n        num_groups = 'inputs.num_groups';\n        break;\n      case 'mixed':\n        structures = `struct InputsA {\n          @builtin(local_invocation_index) local_index : u32,\n          @builtin(global_invocation_id) global_id : vec3<u32>,\n        };\n        struct InputsB {\n          @builtin(workgroup_id) group_id : vec3<u32>\n        };`;\n        params = `@builtin(local_invocation_id) local_id : vec3<u32>,\n                  inputsA : InputsA,\n                  inputsB : InputsB,\n                  @builtin(num_workgroups) num_groups : vec3<u32>,`;\n        local_id = 'local_id';\n        local_index = 'inputsA.local_index';\n        global_id = 'inputsA.global_id';\n        group_id = 'inputsB.group_id';\n        num_groups = 'num_groups';\n        break;\n    }\n\n    // WGSL shader that stores every builtin value to a buffer, for every invocation in the grid.\n    const wgsl = `\n      struct S {\n        data : array<u32>\n      };\n      struct V {\n        data : array<vec3<u32>>\n      };\n      @group(0) @binding(0) var<storage, read_write> local_id_out : V;\n      @group(0) @binding(1) var<storage, read_write> local_index_out : S;\n      @group(0) @binding(2) var<storage, read_write> global_id_out : V;\n      @group(0) @binding(3) var<storage, read_write> group_id_out : V;\n      @group(0) @binding(4) var<storage, read_write> num_groups_out : V;\n\n      ${structures}\n\n      const group_width = ${t.params.groupSize.x}u;\n      const group_height = ${t.params.groupSize.y}u;\n      const group_depth = ${t.params.groupSize.z}u;\n\n      @compute @workgroup_size(group_width, group_height, group_depth)\n      fn main(\n        ${params}\n        ) {\n        let group_index = ((${group_id}.z * ${num_groups}.y) + ${group_id}.y) * ${num_groups}.x + ${group_id}.x;\n        let global_index = group_index * ${invocationsPerGroup}u + ${local_index};\n        local_id_out.data[global_index] = ${local_id};\n        local_index_out.data[global_index] = ${local_index};\n        global_id_out.data[global_index] = ${global_id};\n        group_id_out.data[global_index] = ${group_id};\n        num_groups_out.data[global_index] = ${num_groups};\n      }\n    `;\n\n    const pipeline = t.device.createComputePipeline({\n      layout: 'auto',\n      compute: {\n        module: t.device.createShaderModule({\n          code: wgsl,\n        }),\n        entryPoint: 'main',\n      },\n    });\n\n    // Helper to create a `size`-byte buffer with binding number `binding`.\n    function createBuffer(size: number, binding: number) {\n      const buffer = t.device.createBuffer({\n        size,\n        usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n      });\n      t.trackForCleanup(buffer);\n\n      bindGroupEntries.push({\n        binding,\n        resource: {\n          buffer,\n        },\n      });\n\n      return buffer;\n    }\n\n    // Create the output buffers.\n    const bindGroupEntries: GPUBindGroupEntry[] = [];\n    const localIdBuffer = createBuffer(totalInvocations * 16, 0);\n    const localIndexBuffer = createBuffer(totalInvocations * 4, 1);\n    const globalIdBuffer = createBuffer(totalInvocations * 16, 2);\n    const groupIdBuffer = createBuffer(totalInvocations * 16, 3);\n    const numGroupsBuffer = createBuffer(totalInvocations * 16, 4);\n\n    const bindGroup = t.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: bindGroupEntries,\n    });\n\n    // Run the shader.\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginComputePass();\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bindGroup);\n    switch (t.params.dispatch) {\n      case 'direct':\n        pass.dispatchWorkgroups(t.params.numGroups.x, t.params.numGroups.y, t.params.numGroups.z);\n        break;\n      case 'indirect': {\n        const dispatchBuffer = t.device.createBuffer({\n          size: 3 * Uint32Array.BYTES_PER_ELEMENT,\n          usage: GPUBufferUsage.INDIRECT,\n          mappedAtCreation: true,\n        });\n        t.trackForCleanup(dispatchBuffer);\n        const dispatchData = new Uint32Array(dispatchBuffer.getMappedRange());\n        dispatchData[0] = t.params.numGroups.x;\n        dispatchData[1] = t.params.numGroups.y;\n        dispatchData[2] = t.params.numGroups.z;\n        dispatchBuffer.unmap();\n        pass.dispatchWorkgroupsIndirect(dispatchBuffer, 0);\n        break;\n      }\n    }\n    pass.end();\n    t.queue.submit([encoder.finish()]);\n\n    type vec3 = { x: number; y: number; z: number };\n\n    // Helper to check that the vec3<u32> value at each index of the provided `output` buffer\n    // matches the expected value for that invocation, as generated by the `getBuiltinValue`\n    // function. The `name` parameter is the builtin name, used for error messages.\n    const checkEachIndex = (\n      output: Uint32Array,\n      name: string,\n      getBuiltinValue: (groupId: vec3, localId: vec3) => vec3\n    ) => {\n      // Loop over workgroups.\n      for (let gz = 0; gz < t.params.numGroups.z; gz++) {\n        for (let gy = 0; gy < t.params.numGroups.y; gy++) {\n          for (let gx = 0; gx < t.params.numGroups.x; gx++) {\n            // Loop over invocations within a group.\n            for (let lz = 0; lz < t.params.groupSize.z; lz++) {\n              for (let ly = 0; ly < t.params.groupSize.y; ly++) {\n                for (let lx = 0; lx < t.params.groupSize.x; lx++) {\n                  const groupIndex = (gz * t.params.numGroups.y + gy) * t.params.numGroups.x + gx;\n                  const localIndex = (lz * t.params.groupSize.y + ly) * t.params.groupSize.x + lx;\n                  const globalIndex = groupIndex * invocationsPerGroup + localIndex;\n                  const expected = getBuiltinValue(\n                    { x: gx, y: gy, z: gz },\n                    { x: lx, y: ly, z: lz }\n                  );\n                  if (output[globalIndex * 4 + 0] !== expected.x) {\n                    return new Error(\n                      `${name}.x failed at group(${gx},${gy},${gz}) local(${lx},${ly},${lz}))\\n` +\n                        `    expected: ${expected.x}\\n` +\n                        `    got:      ${output[globalIndex * 4 + 0]}`\n                    );\n                  }\n                  if (output[globalIndex * 4 + 1] !== expected.y) {\n                    return new Error(\n                      `${name}.y failed at group(${gx},${gy},${gz}) local(${lx},${ly},${lz}))\\n` +\n                        `    expected: ${expected.y}\\n` +\n                        `    got:      ${output[globalIndex * 4 + 1]}`\n                    );\n                  }\n                  if (output[globalIndex * 4 + 2] !== expected.z) {\n                    return new Error(\n                      `${name}.z failed at group(${gx},${gy},${gz}) local(${lx},${ly},${lz}))\\n` +\n                        `    expected: ${expected.z}\\n` +\n                        `    got:      ${output[globalIndex * 4 + 2]}`\n                    );\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      return undefined;\n    };\n\n    // Check @builtin(local_invocation_index) values.\n    t.expectGPUBufferValuesEqual(\n      localIndexBuffer,\n      new Uint32Array([...iterRange(totalInvocations, x => x % invocationsPerGroup)])\n    );\n\n    // Check @builtin(local_invocation_id) values.\n    t.expectGPUBufferValuesPassCheck(\n      localIdBuffer,\n      outputData => checkEachIndex(outputData, 'local_invocation_id', (_, localId) => localId),\n      { type: Uint32Array, typedLength: totalInvocations * 4 }\n    );\n\n    // Check @builtin(global_invocation_id) values.\n    const getGlobalId = (groupId: vec3, localId: vec3) => {\n      return {\n        x: groupId.x * t.params.groupSize.x + localId.x,\n        y: groupId.y * t.params.groupSize.y + localId.y,\n        z: groupId.z * t.params.groupSize.z + localId.z,\n      };\n    };\n    t.expectGPUBufferValuesPassCheck(\n      globalIdBuffer,\n      outputData => checkEachIndex(outputData, 'global_invocation_id', getGlobalId),\n      { type: Uint32Array, typedLength: totalInvocations * 4 }\n    );\n\n    // Check @builtin(workgroup_id) values.\n    t.expectGPUBufferValuesPassCheck(\n      groupIdBuffer,\n      outputData => checkEachIndex(outputData, 'workgroup_id', (groupId, _) => groupId),\n      { type: Uint32Array, typedLength: totalInvocations * 4 }\n    );\n\n    // Check @builtin(num_workgroups) values.\n    t.expectGPUBufferValuesPassCheck(\n      numGroupsBuffer,\n      outputData => checkEachIndex(outputData, 'num_workgroups', () => t.params.numGroups),\n      { type: Uint32Array, typedLength: totalInvocations * 4 }\n    );\n  });\n"],"mappings":"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"}