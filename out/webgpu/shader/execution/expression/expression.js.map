{"version":3,"file":"expression.js","names":["globalTestConfig","assert","objectEquals","unreachable","compare","kValue","ScalarType","Scalar","TypeVec","TypeU32","Vector","VectorType","u32","i32","Matrix","MatrixType","scalarTypeOf","FPInterval","cartesianProduct","quantizeToI32","quantizeToU32","isComparator","e","Array","toComparator","input","got","kind","allInputSources","onlyConstInputSource","valueStride","ty","width","cols","rows","toString","valueStrides","tys","map","reduce","sum","c","storageType","elementType","fromStorage","expr","toStorage","getOrCreate","key","create","existing","get","undefined","value","set","run","t","shaderBuilder","parameterTypes","resultType","cfg","inputSource","cases","batch_size","vectorize","packed","packScalarsToVector","casesPerBatch","Math","floor","min","device","limits","maxUniformBufferBindingSize","maxStorageBufferBindingSize","pipelineCache","Map","maxBatchesInFlight","batchesInFlight","resolvePromiseBlockingBatch","batchFinishedCallback","i","length","batchCases","slice","Promise","resolve","checkBatch","submitBatch","queue","onSubmittedWorkDone","finally","outputBufferSize","outputBuffer","createBuffer","size","usage","GPUBufferUsage","COPY_SRC","COPY_DST","STORAGE","pipeline","group","buildPipeline","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","testHeartbeatCallback","submit","finish","checkExpectation","outputData","outputs","read","errs","caseIdx","cmp","expected","matched","push","join","Error","expectGPUBufferValuesPassCheck","type","Uint8Array","typedLength","v","fn","wgslOutputs","count","output_struct","dim","wgslValuesArray","expressionBuilder","wgsl","wgslInputVar","wgslHeader","usedF16","some","header","basicExpressionShaderBody","body","unrollConstEvalLoops","_","paramExpr","basicExpressionBuilder","basicExpressionWithPredeclarationBuilder","predeclaration","compoundAssignmentBuilder","op","lhsType","rhsType","values","abstractFloatSnippet","case_idx","accessor","f64","positive","subnormal","max","negative","abstractFloatCaseBody","keys","idx","results","r","abstractFloatShaderBuilder","forEach","inputTypes","input_str","param_str","source","module","createShaderModule","code","createComputePipeline","layout","compute","entryPoint","createBindGroup","getBindGroupLayout","entries","binding","resource","buffer","inputSize","inputData","caseStride","caseBase","offset","paramIdx","params","copyTo","inputBuffer","makeBufferWithContents","UNIFORM","vectorWidth","packedCases","packedParameterTypes","p","packedResultType","clampCaseIdx","packedInputs","inputElements","cmp_impls","comparators","gElements","eElements","d","elements","generateScalarBinaryToScalarCases","param0s","param1s","quantize","scalarize","generateBinaryToI32Cases","generateBinaryToU32Cases","makeScalarVectorBinaryToVectorCase","scalar","vector","result","includes","generateScalarVectorBinaryToVectorCases","scalars","vectors","s","makeVectorScalarBinaryToVectorCase","generateVectorScalarBinaryToVectorCases","generateU32VectorBinaryToVectorCases","generateVectorU32BinaryToVectorCases","generateI32VectorBinaryToVectorCases","generateVectorI32BinaryToVectorCases"],"sources":["../../../../../src/webgpu/shader/execution/expression/expression.ts"],"sourcesContent":["import { globalTestConfig } from '../../../../common/framework/test_config.js';\nimport { ROArrayArray } from '../../../../common/util/types.js';\nimport { assert, objectEquals, unreachable } from '../../../../common/util/util.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { compare, Comparator, ComparatorImpl } from '../../../util/compare.js';\nimport { kValue } from '../../../util/constants.js';\nimport {\n  ScalarType,\n  Scalar,\n  Type,\n  TypeVec,\n  TypeU32,\n  Value,\n  Vector,\n  VectorType,\n  u32,\n  i32,\n  Matrix,\n  MatrixType,\n  ScalarBuilder,\n  scalarTypeOf,\n} from '../../../util/conversion.js';\nimport { FPInterval } from '../../../util/floating_point.js';\nimport {\n  cartesianProduct,\n  QuantizeFunc,\n  quantizeToI32,\n  quantizeToU32,\n} from '../../../util/math.js';\n\nexport type Expectation =\n  | Value\n  | FPInterval\n  | readonly FPInterval[]\n  | ROArrayArray<FPInterval>\n  | Comparator;\n\n/** @returns if this Expectation actually a Comparator */\nexport function isComparator(e: Expectation): e is Comparator {\n  return !(\n    e instanceof FPInterval ||\n    e instanceof Scalar ||\n    e instanceof Vector ||\n    e instanceof Matrix ||\n    e instanceof Array\n  );\n}\n\n/** @returns the input if it is already a Comparator, otherwise wraps it in a 'value' comparator */\nexport function toComparator(input: Expectation): Comparator {\n  if (isComparator(input)) {\n    return input;\n  }\n\n  return { compare: got => compare(got, input as Value), kind: 'value' };\n}\n\n/** Case is a single expression test case. */\nexport type Case = {\n  // The input value(s)\n  input: Value | ReadonlyArray<Value>;\n  // The expected result, or function to check the result\n  expected: Expectation;\n};\n\n/** CaseList is a list of Cases */\nexport type CaseList = Array<Case>;\n\n/** The input value source */\nexport type InputSource =\n  | 'const' // Shader creation time constant values (@const)\n  | 'uniform' // Uniform buffer\n  | 'storage_r' // Read-only storage buffer\n  | 'storage_rw'; // Read-write storage buffer\n\n/** All possible input sources */\nexport const allInputSources: InputSource[] = ['const', 'uniform', 'storage_r', 'storage_rw'];\n\n/** Just constant input source */\nexport const onlyConstInputSource: InputSource[] = ['const'];\n\n/** Configuration for running a expression test */\nexport type Config = {\n  // Where the input values are read from\n  inputSource: InputSource;\n  // If defined, scalar test cases will be packed into vectors of the given\n  // width, which must be 2, 3 or 4.\n  // Requires that all parameters of the expression overload are of a scalar\n  // type, and the return type of the expression overload is also a scalar type.\n  // If the number of test cases is not a multiple of the vector width, then the\n  // last scalar value is repeated to fill the last vector value.\n  vectorize?: number;\n};\n\n// Helper for returning the stride for a given Type\nfunction valueStride(ty: Type): number {\n  // AbstractFloats are passed out of the shader via a struct of 2x u32s and\n  // unpacking containers as arrays\n  if (scalarTypeOf(ty).kind === 'abstract-float') {\n    if (ty instanceof ScalarType) {\n      return 16;\n    }\n    if (ty instanceof VectorType) {\n      if (ty.width === 2) {\n        return 16;\n      }\n      // vec3s have padding to make them the same size as vec4s\n      return 32;\n    }\n    if (ty instanceof MatrixType) {\n      switch (ty.cols) {\n        case 2:\n          switch (ty.rows) {\n            case 2:\n              return 32;\n            case 3:\n              return 64;\n            case 4:\n              return 64;\n          }\n          break;\n        case 3:\n          switch (ty.rows) {\n            case 2:\n              return 48;\n            case 3:\n              return 96;\n            case 4:\n              return 96;\n          }\n          break;\n        case 4:\n          switch (ty.rows) {\n            case 2:\n              return 64;\n            case 3:\n              return 128;\n            case 4:\n              return 128;\n          }\n          break;\n      }\n    }\n    unreachable(`AbstractFloats have not yet been implemented for ${ty.toString()}`);\n  }\n\n  if (ty instanceof MatrixType) {\n    switch (ty.cols) {\n      case 2:\n        switch (ty.rows) {\n          case 2:\n            return 16;\n          case 3:\n            return 32;\n          case 4:\n            return 32;\n        }\n        break;\n      case 3:\n        switch (ty.rows) {\n          case 2:\n            return 32;\n          case 3:\n            return 64;\n          case 4:\n            return 64;\n        }\n        break;\n      case 4:\n        switch (ty.rows) {\n          case 2:\n            return 32;\n          case 3:\n            return 64;\n          case 4:\n            return 64;\n        }\n        break;\n    }\n    unreachable(\n      `Attempted to get stride length for a matrix with dimensions (${ty.cols}x${ty.rows}), which isn't currently handled`\n    );\n  }\n\n  // Handles scalars and vectors\n  return 16;\n}\n\n// Helper for summing up all of the stride values for an array of Types\nfunction valueStrides(tys: Type[]): number {\n  return tys.map(valueStride).reduce((sum, c) => sum + c);\n}\n\n// Helper for returning the WGSL storage type for the given Type.\nfunction storageType(ty: Type): Type {\n  if (ty instanceof ScalarType) {\n    assert(ty.kind !== 'f64', `No storage type defined for 'f64' values`);\n    assert(\n      ty.kind !== 'abstract-float',\n      `Custom handling is implemented for 'abstract-float' values`\n    );\n    if (ty.kind === 'bool') {\n      return TypeU32;\n    }\n  }\n  if (ty instanceof VectorType) {\n    return TypeVec(ty.width, storageType(ty.elementType) as ScalarType);\n  }\n  return ty;\n}\n\n// Helper for converting a value of the type 'ty' from the storage type.\nfunction fromStorage(ty: Type, expr: string): string {\n  if (ty instanceof ScalarType) {\n    assert(ty.kind !== 'abstract-float', `AbstractFloat values should not be in input storage`);\n    assert(ty.kind !== 'f64', `'No storage type defined for 'f64' values`);\n    if (ty.kind === 'bool') {\n      return `${expr} != 0u`;\n    }\n  }\n  if (ty instanceof VectorType) {\n    assert(\n      ty.elementType.kind !== 'abstract-float',\n      `AbstractFloat values cannot appear in input storage`\n    );\n    assert(ty.elementType.kind !== 'f64', `'No storage type defined for 'f64' values`);\n    if (ty.elementType.kind === 'bool') {\n      return `${expr} != vec${ty.width}<u32>(0u)`;\n    }\n  }\n  return expr;\n}\n\n// Helper for converting a value of the type 'ty' to the storage type.\nfunction toStorage(ty: Type, expr: string): string {\n  if (ty instanceof ScalarType) {\n    assert(\n      ty.kind !== 'abstract-float',\n      `AbstractFloat values have custom code for writing to storage`\n    );\n    assert(ty.kind !== 'f64', `No storage type defined for 'f64' values`);\n    if (ty.kind === 'bool') {\n      return `select(0u, 1u, ${expr})`;\n    }\n  }\n  if (ty instanceof VectorType) {\n    assert(\n      ty.elementType.kind !== 'abstract-float',\n      `AbstractFloat values have custom code for writing to storage`\n    );\n    assert(ty.elementType.kind !== 'f64', `'No storage type defined for 'f64' values`);\n    if (ty.elementType.kind === 'bool') {\n      return `select(vec${ty.width}<u32>(0u), vec${ty.width}<u32>(1u), ${expr})`;\n    }\n  }\n  return expr;\n}\n\n// A Pipeline is a map of WGSL shader source to a built pipeline\ntype PipelineCache = Map<String, GPUComputePipeline>;\n\n/**\n * Searches for an entry with the given key, adding and returning the result of calling\n * `create` if the entry was not found.\n * @param map the cache map\n * @param key the entry's key\n * @param create the function used to construct a value, if not found in the cache\n * @returns the value, either fetched from the cache, or newly built.\n */\nfunction getOrCreate<K, V>(map: Map<K, V>, key: K, create: () => V) {\n  const existing = map.get(key);\n  if (existing !== undefined) {\n    return existing;\n  }\n  const value = create();\n  map.set(key, value);\n  return value;\n}\n\n/**\n * Runs the list of expression tests, possibly splitting the tests into multiple\n * dispatches to keep the input data within the buffer binding limits.\n * run() will pack the scalar test cases into smaller set of vectorized tests\n * if `cfg.vectorize` is defined.\n * @param t the GPUTest\n * @param shaderBuilder the shader builder function\n * @param parameterTypes the list of expression parameter types\n * @param resultType the return type for the expression overload\n * @param cfg test configuration values\n * @param cases list of test cases\n * @param batch_size override the calculated casesPerBatch.\n */\nexport async function run(\n  t: GPUTest,\n  shaderBuilder: ShaderBuilder,\n  parameterTypes: Array<Type>,\n  resultType: Type,\n  cfg: Config = { inputSource: 'storage_r' },\n  cases: CaseList,\n  batch_size?: number\n) {\n  // If the 'vectorize' config option was provided, pack the cases into vectors.\n  if (cfg.vectorize !== undefined) {\n    const packed = packScalarsToVector(parameterTypes, resultType, cases, cfg.vectorize);\n    cases = packed.cases;\n    parameterTypes = packed.parameterTypes;\n    resultType = packed.resultType;\n  }\n\n  // The size of the input buffer may exceed the maximum buffer binding size,\n  // so chunk the tests up into batches that fit into the limits. We also split\n  // the cases into smaller batches to help with shader compilation performance.\n  const casesPerBatch = (function () {\n    if (batch_size) {\n      return batch_size;\n    }\n    switch (cfg.inputSource) {\n      case 'const':\n        // Some drivers are slow to optimize shaders with many constant values,\n        // or statements. 32 is an empirically picked number of cases that works\n        // well for most drivers.\n        return 32;\n      case 'uniform':\n        // Some drivers are slow to build pipelines with large uniform buffers.\n        // 2k appears to be a sweet-spot when benchmarking.\n        return Math.floor(\n          Math.min(1024 * 2, t.device.limits.maxUniformBufferBindingSize) /\n            valueStrides(parameterTypes)\n        );\n      case 'storage_r':\n      case 'storage_rw':\n        return Math.floor(\n          t.device.limits.maxStorageBufferBindingSize / valueStrides(parameterTypes)\n        );\n    }\n  })();\n\n  // A cache to hold built shader pipelines.\n  const pipelineCache = new Map<String, GPUComputePipeline>();\n\n  // Submit all the cases in batches, rate-limiting to ensure not too many\n  // batches are in flight simultaneously.\n  const maxBatchesInFlight = 5;\n  let batchesInFlight = 0;\n  let resolvePromiseBlockingBatch: (() => void) | undefined = undefined;\n  const batchFinishedCallback = () => {\n    batchesInFlight -= 1;\n    // If there is any batch waiting on a previous batch to finish,\n    // unblock it now, and clear the resolve callback.\n    if (resolvePromiseBlockingBatch) {\n      resolvePromiseBlockingBatch();\n      resolvePromiseBlockingBatch = undefined;\n    }\n  };\n\n  for (let i = 0; i < cases.length; i += casesPerBatch) {\n    const batchCases = cases.slice(i, Math.min(i + casesPerBatch, cases.length));\n\n    if (batchesInFlight > maxBatchesInFlight) {\n      await new Promise<void>(resolve => {\n        // There should only be one batch waiting at a time.\n        assert(resolvePromiseBlockingBatch === undefined);\n        resolvePromiseBlockingBatch = resolve;\n      });\n    }\n    batchesInFlight += 1;\n\n    const checkBatch = submitBatch(\n      t,\n      shaderBuilder,\n      parameterTypes,\n      resultType,\n      batchCases,\n      cfg.inputSource,\n      pipelineCache\n    );\n    checkBatch();\n    t.queue.onSubmittedWorkDone().finally(batchFinishedCallback);\n  }\n}\n\n/**\n * Submits the list of expression tests. The input data must fit within the\n * buffer binding limits of the given inputSource.\n * @param t the GPUTest\n * @param shaderBuilder the shader builder function\n * @param parameterTypes the list of expression parameter types\n * @param resultType the return type for the expression overload\n * @param cases list of test cases that fit within the binding limits of the device\n * @param inputSource the source of the input values\n * @param pipelineCache the cache of compute pipelines, shared between batches\n * @returns a function that checks the results are as expected\n */\nfunction submitBatch(\n  t: GPUTest,\n  shaderBuilder: ShaderBuilder,\n  parameterTypes: Array<Type>,\n  resultType: Type,\n  cases: CaseList,\n  inputSource: InputSource,\n  pipelineCache: PipelineCache\n): () => void {\n  // Construct a buffer to hold the results of the expression tests\n  const outputBufferSize = cases.length * valueStride(resultType);\n  const outputBuffer = t.device.createBuffer({\n    size: outputBufferSize,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST | GPUBufferUsage.STORAGE,\n  });\n\n  const [pipeline, group] = buildPipeline(\n    t,\n    shaderBuilder,\n    parameterTypes,\n    resultType,\n    cases,\n    inputSource,\n    outputBuffer,\n    pipelineCache\n  );\n\n  const encoder = t.device.createCommandEncoder();\n  const pass = encoder.beginComputePass();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, group);\n  pass.dispatchWorkgroups(1);\n  pass.end();\n\n  // Heartbeat to ensure CTS runners know we're alive.\n  globalTestConfig.testHeartbeatCallback();\n\n  t.queue.submit([encoder.finish()]);\n\n  // Return a function that can check the results of the shader\n  return () => {\n    const checkExpectation = (outputData: Uint8Array) => {\n      // Read the outputs from the output buffer\n      const outputs = new Array<Value>(cases.length);\n      for (let i = 0; i < cases.length; i++) {\n        outputs[i] = resultType.read(outputData, i * valueStride(resultType));\n      }\n\n      // The list of expectation failures\n      const errs: string[] = [];\n\n      // For each case...\n      for (let caseIdx = 0; caseIdx < cases.length; caseIdx++) {\n        const c = cases[caseIdx];\n        const got = outputs[caseIdx];\n        const cmp = toComparator(c.expected).compare(got);\n        if (!cmp.matched) {\n          errs.push(`(${c.input instanceof Array ? c.input.join(', ') : c.input})\n    returned: ${cmp.got}\n    expected: ${cmp.expected}`);\n        }\n      }\n\n      return errs.length > 0 ? new Error(errs.join('\\n\\n')) : undefined;\n    };\n\n    // Heartbeat to ensure CTS runners know we're alive.\n    globalTestConfig.testHeartbeatCallback();\n\n    t.expectGPUBufferValuesPassCheck(outputBuffer, checkExpectation, {\n      type: Uint8Array,\n      typedLength: outputBufferSize,\n    });\n  };\n}\n\n/**\n * map is a helper for returning a new array with each element of `v`\n * transformed with `fn`.\n * If `v` is not an array, then `fn` is called with (v, 0).\n */\nfunction map<T, U>(v: T | readonly T[], fn: (value: T, index?: number) => U): U[] {\n  if (v instanceof Array) {\n    return v.map(fn);\n  }\n  return [fn(v, 0)];\n}\n\n/**\n * ShaderBuilder is a function used to construct the WGSL shader used by an\n * expression test.\n * @param parameterTypes the list of expression parameter types\n * @param resultType the return type for the expression overload\n * @param cases list of test cases that fit within the binding limits of the device\n * @param inputSource the source of the input values\n */\nexport type ShaderBuilder = (\n  parameterTypes: Array<Type>,\n  resultType: Type,\n  cases: CaseList,\n  inputSource: InputSource\n) => string;\n\n/**\n * Helper that returns the WGSL to declare the output storage buffer for a shader\n */\nfunction wgslOutputs(resultType: Type, count: number): string {\n  let output_struct = undefined;\n  if (scalarTypeOf(resultType).kind !== 'abstract-float') {\n    output_struct = `\nstruct Output {\n  @size(${valueStride(resultType)}) value : ${storageType(resultType)}\n};`;\n  } else {\n    if (resultType instanceof ScalarType) {\n      output_struct = `struct AF {\n  low: u32,\n  high: u32,\n};\n\nstruct Output {\n  @size(${valueStride(resultType)}) value: AF,\n};`;\n    }\n    if (resultType instanceof VectorType) {\n      const dim = resultType.width;\n      output_struct = `struct AF {\n  low: u32,\n  high: u32,\n};\n\nstruct Output {\n  @size(${valueStride(resultType)}) value: array<AF, ${dim}>,\n};`;\n    }\n\n    if (resultType instanceof MatrixType) {\n      const cols = resultType.cols;\n      const rows = resultType.rows === 2 ? 2 : 4; // 3 element rows have a padding element\n      output_struct = `struct AF {\n  low: u32,\n  high: u32,\n};\n\nstruct Output {\n   @size(${valueStride(resultType)}) value: array<array<AF, ${rows}>, ${cols}>,\n};`;\n    }\n\n    assert(output_struct !== undefined, `No implementation for result type '${resultType}'`);\n  }\n\n  return `${output_struct}\n@group(0) @binding(0) var<storage, read_write> outputs : array<Output, ${count}>;\n`;\n}\n\n/**\n * Helper that returns the WGSL to declare the values array for a shader\n */\nfunction wgslValuesArray(\n  parameterTypes: Array<Type>,\n  resultType: Type,\n  cases: CaseList,\n  expressionBuilder: ExpressionBuilder\n): string {\n  return `\nconst values = array(\n  ${cases.map(c => expressionBuilder(map(c.input, v => v.wgsl()))).join(',\\n  ')}\n);`;\n}\n\n/**\n * Helper that returns the WGSL 'var' declaration for the given input source\n */\nfunction wgslInputVar(inputSource: InputSource, count: number) {\n  switch (inputSource) {\n    case 'storage_r':\n      return `@group(0) @binding(1) var<storage, read> inputs : array<Input, ${count}>;`;\n    case 'storage_rw':\n      return `@group(0) @binding(1) var<storage, read_write> inputs : array<Input, ${count}>;`;\n    case 'uniform':\n      return `@group(0) @binding(1) var<uniform> inputs : array<Input, ${count}>;`;\n  }\n  throw new Error(`InputSource ${inputSource} does not use an input var`);\n}\n\n/**\n * Helper that returns the WGSL header before any other declaration, currently include f16\n * enable directive if necessary.\n */\nfunction wgslHeader(parameterTypes: Array<Type>, resultType: Type) {\n  const usedF16 =\n    scalarTypeOf(resultType).kind === 'f16' ||\n    parameterTypes.some((ty: Type) => scalarTypeOf(ty).kind === 'f16');\n  const header = usedF16 ? 'enable f16;\\n' : '';\n  return header;\n}\n\n/**\n * ExpressionBuilder returns the WGSL used to evaluate an expression with the\n * given input values.\n */\nexport type ExpressionBuilder = (values: ReadonlyArray<string>) => string;\n\n/**\n * Returns a ShaderBuilder that builds a basic expression test shader.\n * @param expressionBuilder the expression builder\n */\nfunction basicExpressionShaderBody(\n  expressionBuilder: ExpressionBuilder,\n  parameterTypes: Array<Type>,\n  resultType: Type,\n  cases: CaseList,\n  inputSource: InputSource\n): string {\n  assert(\n    scalarTypeOf(resultType).kind !== 'abstract-float',\n    `abstractFloatShaderBuilder should be used when result type is 'abstract-float`\n  );\n  if (inputSource === 'const') {\n    //////////////////////////////////////////////////////////////////////////\n    // Constant eval\n    //////////////////////////////////////////////////////////////////////////\n    let body = '';\n    if (parameterTypes.some(ty => scalarTypeOf(ty).kind === 'abstract-float')) {\n      // Directly assign the expression to the output, to avoid an\n      // intermediate store, which will concretize the value early\n      body = cases\n        .map(\n          (c, i) =>\n            `  outputs[${i}].value = ${toStorage(\n              resultType,\n              expressionBuilder(map(c.input, v => v.wgsl()))\n            )};`\n        )\n        .join('\\n  ');\n    } else if (globalTestConfig.unrollConstEvalLoops) {\n      body = cases\n        .map((_, i) => {\n          const value = `values[${i}]`;\n          return `  outputs[${i}].value = ${toStorage(resultType, value)};`;\n        })\n        .join('\\n  ');\n    } else {\n      body = `\n  for (var i = 0u; i < ${cases.length}; i++) {\n    outputs[i].value = ${toStorage(resultType, `values[i]`)};\n  }`;\n    }\n\n    return `\n${wgslOutputs(resultType, cases.length)}\n\n${wgslValuesArray(parameterTypes, resultType, cases, expressionBuilder)}\n\n@compute @workgroup_size(1)\nfn main() {\n${body}\n}`;\n  } else {\n    //////////////////////////////////////////////////////////////////////////\n    // Runtime eval\n    //////////////////////////////////////////////////////////////////////////\n\n    // returns the WGSL expression to load the ith parameter of the given type from the input buffer\n    const paramExpr = (ty: Type, i: number) => fromStorage(ty, `inputs[i].param${i}`);\n\n    // resolves to the expression that calls the builtin\n    const expr = toStorage(resultType, expressionBuilder(parameterTypes.map(paramExpr)));\n\n    return `\nstruct Input {\n${parameterTypes\n  .map((ty, i) => `  @size(${valueStride(ty)}) param${i} : ${storageType(ty)},`)\n  .join('\\n')}\n};\n\n${wgslOutputs(resultType, cases.length)}\n\n${wgslInputVar(inputSource, cases.length)}\n\n@compute @workgroup_size(1)\nfn main() {\n  for (var i = 0; i < ${cases.length}; i++) {\n    outputs[i].value = ${expr};\n  }\n}\n`;\n  }\n}\n\n/**\n * Returns a ShaderBuilder that builds a basic expression test shader.\n * @param expressionBuilder the expression builder\n */\nexport function basicExpressionBuilder(expressionBuilder: ExpressionBuilder): ShaderBuilder {\n  return (\n    parameterTypes: Array<Type>,\n    resultType: Type,\n    cases: CaseList,\n    inputSource: InputSource\n  ) => {\n    return `\\\n${wgslHeader(parameterTypes, resultType)}\n\n${basicExpressionShaderBody(expressionBuilder, parameterTypes, resultType, cases, inputSource)}`;\n  };\n}\n\n/**\n * Returns a ShaderBuilder that builds a basic expression test shader with given predeclaration\n * string goes after WGSL header (i.e. enable directives) if any but before anything else.\n * @param expressionBuilder the expression builder\n * @param predeclaration the predeclaration string\n */\nexport function basicExpressionWithPredeclarationBuilder(\n  expressionBuilder: ExpressionBuilder,\n  predeclaration: string\n): ShaderBuilder {\n  return (\n    parameterTypes: Array<Type>,\n    resultType: Type,\n    cases: CaseList,\n    inputSource: InputSource\n  ) => {\n    return `\\\n${wgslHeader(parameterTypes, resultType)}\n\n${predeclaration}\n\n${basicExpressionShaderBody(expressionBuilder, parameterTypes, resultType, cases, inputSource)}`;\n  };\n}\n\n/**\n * Returns a ShaderBuilder that builds a compound assignment operator test shader.\n * @param op the compound operator\n */\nexport function compoundAssignmentBuilder(op: string): ShaderBuilder {\n  return (\n    parameterTypes: Array<Type>,\n    resultType: Type,\n    cases: CaseList,\n    inputSource: InputSource\n  ) => {\n    //////////////////////////////////////////////////////////////////////////\n    // Input validation\n    //////////////////////////////////////////////////////////////////////////\n    if (parameterTypes.length !== 2) {\n      throw new Error(`compoundBinaryOp() requires exactly two parameters values per case`);\n    }\n    const lhsType = parameterTypes[0];\n    const rhsType = parameterTypes[1];\n    if (!objectEquals(lhsType, resultType)) {\n      throw new Error(\n        `compoundBinaryOp() requires result type (${resultType}) to be equal to the LHS type (${lhsType})`\n      );\n    }\n    if (inputSource === 'const') {\n      //////////////////////////////////////////////////////////////////////////\n      // Constant eval\n      //////////////////////////////////////////////////////////////////////////\n      let body = '';\n      if (globalTestConfig.unrollConstEvalLoops) {\n        body = cases\n          .map((_, i) => {\n            return `\n  var ret_${i} = lhs[${i}];\n  ret_${i} ${op} rhs[${i}];\n  outputs[${i}].value = ${storageType(resultType)}(ret_${i});`;\n          })\n          .join('\\n  ');\n      } else {\n        body = `\n  for (var i = 0u; i < ${cases.length}; i++) {\n    var ret = lhs[i];\n    ret ${op} rhs[i];\n    outputs[i].value = ${storageType(resultType)}(ret);\n  }`;\n      }\n\n      const values = cases.map(c => (c.input as Value[]).map(v => v.wgsl()));\n\n      return `\n${wgslHeader(parameterTypes, resultType)}\n${wgslOutputs(resultType, cases.length)}\n\nconst lhs = array(\n${values.map(c => `${c[0]}`).join(',\\n  ')}\n      );\nconst rhs = array(\n${values.map(c => `${c[1]}`).join(',\\n  ')}\n);\n\n@compute @workgroup_size(1)\nfn main() {\n${body}\n}`;\n    } else {\n      //////////////////////////////////////////////////////////////////////////\n      // Runtime eval\n      //////////////////////////////////////////////////////////////////////////\n      return `\n${wgslHeader(parameterTypes, resultType)}\n${wgslOutputs(resultType, cases.length)}\n\nstruct Input {\n  @size(${valueStride(lhsType)}) lhs : ${storageType(lhsType)},\n  @size(${valueStride(rhsType)}) rhs : ${storageType(rhsType)},\n}\n\n${wgslInputVar(inputSource, cases.length)}\n\n@compute @workgroup_size(1)\nfn main() {\n  for (var i = 0; i < ${cases.length}; i++) {\n    var ret = ${lhsType}(inputs[i].lhs);\n    ret ${op} ${rhsType}(inputs[i].rhs);\n    outputs[i].value = ${storageType(resultType)}(ret);\n  }\n}\n`;\n    }\n  };\n}\n\n/**\n * @returns a string that extracts the value of an AbstractFloat into an output\n *          destination\n * @param expr expression for an AbstractFloat value, if working with vectors or\n *             matrices, this string needs to include indexing into the\n *             container.\n * @param case_idx index in the case output array to assign the result\n * @param accessor string representing how access to the AF that needs to be\n *                 operated on.\n *                 For scalars this should be left as ''.\n *                 For vectors this will be an indexing operation,\n *                 i.e. '[i]'\n *                 For matrices this will double indexing operation,\n *                 i.e. '[c][r]'\n */\nfunction abstractFloatSnippet(expr: string, case_idx: number, accessor: string = ''): string {\n  // AbstractFloats are f64s under the hood. WebGPU does not support\n  // putting f64s in buffers, so the result needs to be split up into u32s\n  // and rebuilt in the test framework.\n  //\n  // Since there is no 64-bit data type that can be used as an element for a\n  // vector or a matrix in WGSL, the testing framework needs to pass the u32s\n  // via a struct with two u32s, and deconstruct vectors and matrices into\n  // arrays.\n  //\n  // This is complicated by the fact that user defined functions cannot\n  // take/return AbstractFloats, and AbstractFloats cannot be stored in\n  // variables, so the code cannot just inject a simple utility function\n  // at the top of the shader, instead this snippet needs to be inlined\n  // everywhere the test needs to return an AbstractFloat.\n  //\n  // select is used below, since ifs are not available during constant\n  // eval. This has the side effect of short-circuiting doesn't occur, so\n  // both sides of the select have to evaluate and be valid.\n  //\n  // This snippet implements FTZ for subnormals to bypass the need for\n  // complex subnormal specific logic.\n  //\n  // Expressions resulting in subnormals can still be reasonably tested,\n  // since this snippet will return 0 with the correct sign, which is\n  // always in the acceptance interval for a subnormal result, since an\n  // implementation may FTZ.\n  //\n  // Documentation for the snippet working with scalar results is included here\n  // in this code block, since shader length affects compilation time\n  // significantly on some backends. The code for vectors and matrices basically\n  // the same thing, with extra indexing operations.\n  //\n  // Snippet with documentation:\n  //   const kExponentBias = 1022;\n  //\n  //   // Detect if the value is zero or subnormal, so that FTZ behaviour\n  //   // can occur\n  //   const subnormal_or_zero : bool = (${expr} <= ${kValue.f64.positive.subnormal.max}) && (${expr} >= ${kValue.f64.negative.subnormal.min});\n  //\n  //   // MSB of the upper u32 is 1 if the value is negative, otherwise 0\n  //   // Extract the sign bit early, so that abs() can be used with\n  //   // frexp() so negative cases do not need to be handled\n  //   const sign_bit : u32 = select(0, 0x80000000, ${expr} < 0);\n  //\n  //   // Use frexp() to obtain the exponent and fractional parts, and\n  //   // then perform FTZ if needed\n  //   const f = frexp(abs(${expr}));\n  //   const f_fract = select(f.fract, 0, subnormal_or_zero);\n  //   const f_exp = select(f.exp, -kExponentBias, subnormal_or_zero);\n  //\n  //   // Adjust for the exponent bias and shift for storing in bits\n  //   // [20..31] of the upper u32\n  //   const exponent_bits : u32 = (f_exp + kExponentBias) << 20;\n  //\n  //   // Extract the portion of the mantissa that appears in upper u32 as\n  //   // a float for later use\n  //   const high_mantissa = ldexp(f_fract, 21);\n  //\n  //   // Extract the portion of the mantissa that appears in upper u32 as\n  //   // as bits. This value is masked, because normals will explicitly\n  //   // have the implicit leading 1 that should not be in the final\n  //   // result.\n  //   const high_mantissa_bits : u32 = u32(ldexp(f_fract, 21)) & 0x000fffff;\n  //\n  //   // Calculate the mantissa stored in the lower u32 as a float\n  //   const low_mantissa = f_fract - ldexp(floor(high_mantissa), -21);\n  //\n  //   // Convert the lower u32 mantissa to bits\n  //   const low_mantissa_bits = u32(ldexp(low_mantissa, 53));\n  //\n  //   outputs[${i}].value.high = sign_bit | exponent_bits | high_mantissa_bits;\n  //   outputs[${i}].value.low = low_mantissa_bits;\n  // prettier-ignore\n  return `  {\n    const kExponentBias = 1022;\n    const subnormal_or_zero : bool = (${expr}${accessor} <= ${kValue.f64.positive.subnormal.max}) && (${expr}${accessor} >= ${kValue.f64.negative.subnormal.min});\n    const sign_bit : u32 = select(0, 0x80000000, ${expr}${accessor} < 0);\n    const f = frexp(abs(${expr}${accessor}));\n    const f_fract = select(f.fract, 0, subnormal_or_zero);\n    const f_exp = select(f.exp, -kExponentBias, subnormal_or_zero);\n    const exponent_bits : u32 = (f_exp + kExponentBias) << 20;\n    const high_mantissa = ldexp(f_fract, 21);\n    const high_mantissa_bits : u32 = u32(ldexp(f_fract, 21)) & 0x000fffff;\n    const low_mantissa = f_fract - ldexp(floor(high_mantissa), -21);\n    const low_mantissa_bits = u32(ldexp(low_mantissa, 53));\n    outputs[${case_idx}].value${accessor}.high = sign_bit | exponent_bits | high_mantissa_bits;\n    outputs[${case_idx}].value${accessor}.low = low_mantissa_bits;\n  }`;\n}\n\n/** @returns a string for a specific case that has a AbstractFloat result */\nfunction abstractFloatCaseBody(expr: string, resultType: Type, i: number): string {\n  if (resultType instanceof ScalarType) {\n    return abstractFloatSnippet(expr, i);\n  }\n\n  if (resultType instanceof VectorType) {\n    return [...Array(resultType.width).keys()]\n      .map(idx => abstractFloatSnippet(expr, i, `[${idx}]`))\n      .join('  \\n');\n  }\n\n  if (resultType instanceof MatrixType) {\n    const cols = resultType.cols;\n    const rows = resultType.rows;\n    const results: String[] = [...Array(cols * rows)];\n\n    for (let c = 0; c < cols; c++) {\n      for (let r = 0; r < rows; r++) {\n        results[c * rows + r] = abstractFloatSnippet(expr, i, `[${c}][${r}]`);\n      }\n    }\n\n    return results.join('  \\n');\n  }\n\n  unreachable(`Results of type '${resultType}' not yet implemented`);\n}\n\n/**\n * @returns a ShaderBuilder that builds a test shader hands AbstractFloat results.\n * @param expressionBuilder an expression builder that will return AbstractFloats\n */\nexport function abstractFloatShaderBuilder(expressionBuilder: ExpressionBuilder): ShaderBuilder {\n  return (\n    parameterTypes: Array<Type>,\n    resultType: Type,\n    cases: CaseList,\n    inputSource: InputSource\n  ) => {\n    assert(inputSource === 'const', 'AbstractFloat results are only defined for const-eval');\n    assert(\n      scalarTypeOf(resultType).kind === 'abstract-float',\n      `Expected resultType of 'abstract-float', received '${scalarTypeOf(resultType).kind}' instead`\n    );\n\n    const body = cases\n      .map((c, i) => {\n        const expr = `${expressionBuilder(map(c.input, v => v.wgsl()))}`;\n        return abstractFloatCaseBody(expr, resultType, i);\n      })\n      .join('\\n  ');\n\n    return `\n${wgslHeader(parameterTypes, resultType)}\n\n${wgslOutputs(resultType, cases.length)}\n\n@compute @workgroup_size(1)\nfn main() {\n${body}\n}`;\n  };\n}\n\n/**\n * Constructs and returns a GPUComputePipeline and GPUBindGroup for running a\n * batch of test cases. If a pre-created pipeline can be found in\n * `pipelineCache`, then this may be returned instead of creating a new\n * pipeline.\n * @param t the GPUTest\n * @param shaderBuilder the shader builder\n * @param parameterTypes the list of expression parameter types\n * @param resultType the return type for the expression overload\n * @param cases list of test cases that fit within the binding limits of the device\n * @param inputSource the source of the input values\n * @param outputBuffer the buffer that will hold the output values of the tests\n * @param pipelineCache the cache of compute pipelines, shared between batches\n */\nfunction buildPipeline(\n  t: GPUTest,\n  shaderBuilder: ShaderBuilder,\n  parameterTypes: Array<Type>,\n  resultType: Type,\n  cases: CaseList,\n  inputSource: InputSource,\n  outputBuffer: GPUBuffer,\n  pipelineCache: PipelineCache\n): [GPUComputePipeline, GPUBindGroup] {\n  cases.forEach(c => {\n    const inputTypes = c.input instanceof Array ? c.input.map(i => i.type) : [c.input.type];\n    if (!objectEquals(inputTypes, parameterTypes)) {\n      const input_str = `[${inputTypes.join(',')}]`;\n      const param_str = `[${parameterTypes.join(',')}]`;\n      throw new Error(\n        `case input types ${input_str} do not match provided runner parameter types ${param_str}`\n      );\n    }\n  });\n\n  const source = shaderBuilder(parameterTypes, resultType, cases, inputSource);\n\n  switch (inputSource) {\n    case 'const': {\n      // build the shader module\n      const module = t.device.createShaderModule({ code: source });\n\n      // build the pipeline\n      const pipeline = t.device.createComputePipeline({\n        layout: 'auto',\n        compute: { module, entryPoint: 'main' },\n      });\n\n      // build the bind group\n      const group = t.device.createBindGroup({\n        layout: pipeline.getBindGroupLayout(0),\n        entries: [{ binding: 0, resource: { buffer: outputBuffer } }],\n      });\n\n      return [pipeline, group];\n    }\n\n    case 'uniform':\n    case 'storage_r':\n    case 'storage_rw': {\n      // Input values come from a uniform or storage buffer\n\n      // size in bytes of the input buffer\n      const inputSize = cases.length * valueStrides(parameterTypes);\n\n      // Holds all the parameter values for all cases\n      const inputData = new Uint8Array(inputSize);\n\n      // Pack all the input parameter values into the inputData buffer\n      {\n        const caseStride = valueStrides(parameterTypes);\n        for (let caseIdx = 0; caseIdx < cases.length; caseIdx++) {\n          const caseBase = caseIdx * caseStride;\n          let offset = caseBase;\n          for (let paramIdx = 0; paramIdx < parameterTypes.length; paramIdx++) {\n            const params = cases[caseIdx].input;\n            if (params instanceof Array) {\n              params[paramIdx].copyTo(inputData, offset);\n            } else {\n              params.copyTo(inputData, offset);\n            }\n            offset += valueStride(parameterTypes[paramIdx]);\n          }\n        }\n      }\n\n      // build the compute pipeline, if the shader hasn't been compiled already.\n      const pipeline = getOrCreate(pipelineCache, source, () => {\n        // build the shader module\n        const module = t.device.createShaderModule({ code: source });\n\n        // build the pipeline\n        return t.device.createComputePipeline({\n          layout: 'auto',\n          compute: { module, entryPoint: 'main' },\n        });\n      });\n\n      // build the input buffer\n      const inputBuffer = t.makeBufferWithContents(\n        inputData,\n        GPUBufferUsage.COPY_SRC |\n          (inputSource === 'uniform' ? GPUBufferUsage.UNIFORM : GPUBufferUsage.STORAGE)\n      );\n\n      // build the bind group\n      const group = t.device.createBindGroup({\n        layout: pipeline.getBindGroupLayout(0),\n        entries: [\n          { binding: 0, resource: { buffer: outputBuffer } },\n          { binding: 1, resource: { buffer: inputBuffer } },\n        ],\n      });\n\n      return [pipeline, group];\n    }\n  }\n}\n\n/**\n * Packs a list of scalar test cases into a smaller list of vector cases.\n * Requires that all parameters of the expression overload are of a scalar type,\n * and the return type of the expression overload is also a scalar type.\n * If `cases.length` is not a multiple of `vectorWidth`, then the last scalar\n * test case value is repeated to fill the vector value.\n */\nfunction packScalarsToVector(\n  parameterTypes: Array<Type>,\n  resultType: Type,\n  cases: CaseList,\n  vectorWidth: number\n): { cases: CaseList; parameterTypes: Array<Type>; resultType: Type } {\n  // Validate that the parameters and return type are all vectorizable\n  for (let i = 0; i < parameterTypes.length; i++) {\n    const ty = parameterTypes[i];\n    if (!(ty instanceof ScalarType)) {\n      throw new Error(\n        `packScalarsToVector() can only be used on scalar parameter types, but the ${i}'th parameter type is a ${ty}'`\n      );\n    }\n  }\n  if (!(resultType instanceof ScalarType)) {\n    throw new Error(\n      `packScalarsToVector() can only be used with a scalar return type, but the return type is a ${resultType}'`\n    );\n  }\n\n  const packedCases: Array<Case> = [];\n  const packedParameterTypes = parameterTypes.map(p => TypeVec(vectorWidth, p as ScalarType));\n  const packedResultType = new VectorType(vectorWidth, resultType);\n\n  const clampCaseIdx = (idx: number) => Math.min(idx, cases.length - 1);\n\n  let caseIdx = 0;\n  while (caseIdx < cases.length) {\n    // Construct the vectorized inputs from the scalar cases\n    const packedInputs = new Array<Vector>(parameterTypes.length);\n    for (let paramIdx = 0; paramIdx < parameterTypes.length; paramIdx++) {\n      const inputElements = new Array<Scalar>(vectorWidth);\n      for (let i = 0; i < vectorWidth; i++) {\n        const input = cases[clampCaseIdx(caseIdx + i)].input;\n        inputElements[i] = (input instanceof Array ? input[paramIdx] : input) as Scalar;\n      }\n      packedInputs[paramIdx] = new Vector(inputElements);\n    }\n\n    // Gather the comparators for the packed cases\n    const cmp_impls = new Array<ComparatorImpl>(vectorWidth);\n    for (let i = 0; i < vectorWidth; i++) {\n      cmp_impls[i] = toComparator(cases[clampCaseIdx(caseIdx + i)].expected).compare;\n    }\n    const comparators: Comparator = {\n      compare: (got: Value) => {\n        let matched = true;\n        const gElements = new Array<string>(vectorWidth);\n        const eElements = new Array<string>(vectorWidth);\n        for (let i = 0; i < vectorWidth; i++) {\n          const d = cmp_impls[i]((got as Vector).elements[i]);\n          matched = matched && d.matched;\n          gElements[i] = d.got;\n          eElements[i] = d.expected;\n        }\n        return {\n          matched,\n          got: `${packedResultType}(${gElements.join(', ')})`,\n          expected: `${packedResultType}(${eElements.join(', ')})`,\n        };\n      },\n      kind: 'packed',\n    };\n\n    // Append the new packed case\n    packedCases.push({ input: packedInputs, expected: comparators });\n    caseIdx += vectorWidth;\n  }\n\n  return {\n    cases: packedCases,\n    parameterTypes: packedParameterTypes,\n    resultType: packedResultType,\n  };\n}\n\n/**\n * Indicates bounds that acceptance intervals need to be within to avoid inputs\n * being filtered out. This is used for const-eval tests, since going OOB will\n * cause a validation error not an execution error.\n */\nexport type IntervalFilter =\n  | 'finite' // Expected to be finite in the interval numeric space\n  | 'unfiltered'; // No expectations\n\n/**\n * A function that performs a binary operation on x and y, and returns the expected\n * result.\n */\nexport interface BinaryOp {\n  (x: number, y: number): number | undefined;\n}\n\n/**\n * @returns array of Case for the input params with op applied\n * @param param0s array of inputs to try for the first param\n * @param param1s array of inputs to try for the second param\n * @param op callback called on each pair of inputs to produce each case\n * @param quantize function to quantize all values\n * @param scalarize function to convert numbers to Scalars\n */\nfunction generateScalarBinaryToScalarCases(\n  param0s: readonly number[],\n  param1s: readonly number[],\n  op: BinaryOp,\n  quantize: QuantizeFunc,\n  scalarize: ScalarBuilder\n): Case[] {\n  param0s = param0s.map(quantize);\n  param1s = param1s.map(quantize);\n  return cartesianProduct(param0s, param1s).reduce((cases, e) => {\n    const expected = op(e[0], e[1]);\n    if (expected !== undefined) {\n      cases.push({ input: [scalarize(e[0]), scalarize(e[1])], expected: scalarize(expected) });\n    }\n    return cases;\n  }, new Array<Case>());\n}\n\n/**\n * @returns an array of Cases for operations over a range of inputs\n * @param param0s array of inputs to try for the first param\n * @param param1s array of inputs to try for the second param\n * @param op callback called on each pair of inputs to produce each case\n */\nexport function generateBinaryToI32Cases(\n  param0s: readonly number[],\n  param1s: readonly number[],\n  op: BinaryOp\n) {\n  return generateScalarBinaryToScalarCases(param0s, param1s, op, quantizeToI32, i32);\n}\n\n/**\n * @returns an array of Cases for operations over a range of inputs\n * @param param0s array of inputs to try for the first param\n * @param param1s array of inputs to try for the second param\n * @param op callback called on each pair of inputs to produce each case\n */\nexport function generateBinaryToU32Cases(\n  param0s: readonly number[],\n  param1s: readonly number[],\n  op: BinaryOp\n) {\n  return generateScalarBinaryToScalarCases(param0s, param1s, op, quantizeToU32, u32);\n}\n\n/**\n * @returns a Case for the input params with op applied\n * @param scalar scalar param\n * @param vector vector param (2, 3, or 4 elements)\n * @param op the op to apply to scalar and vector\n * @param quantize function to quantize all values in vectors and scalars\n * @param scalarize function to convert numbers to Scalars\n */\nfunction makeScalarVectorBinaryToVectorCase(\n  scalar: number,\n  vector: readonly number[],\n  op: BinaryOp,\n  quantize: QuantizeFunc,\n  scalarize: ScalarBuilder\n): Case | undefined {\n  scalar = quantize(scalar);\n  vector = vector.map(quantize);\n  const result = vector.map(v => op(scalar, v));\n  if (result.includes(undefined)) {\n    return undefined;\n  }\n  return {\n    input: [scalarize(scalar), new Vector(vector.map(scalarize))],\n    expected: new Vector((result as readonly number[]).map(scalarize)),\n  };\n}\n\n/**\n * @returns array of Case for the input params with op applied\n * @param scalars array of scalar params\n * @param vectors array of vector params (2, 3, or 4 elements)\n * @param op the op to apply to each pair of scalar and vector\n * @param quantize function to quantize all values in vectors and scalars\n * @param scalarize function to convert numbers to Scalars\n */\nfunction generateScalarVectorBinaryToVectorCases(\n  scalars: readonly number[],\n  vectors: ROArrayArray<number>,\n  op: BinaryOp,\n  quantize: QuantizeFunc,\n  scalarize: ScalarBuilder\n): Case[] {\n  const cases = new Array<Case>();\n  scalars.forEach(s => {\n    vectors.forEach(v => {\n      const c = makeScalarVectorBinaryToVectorCase(s, v, op, quantize, scalarize);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n    });\n  });\n  return cases;\n}\n\n/**\n * @returns a Case for the input params with op applied\n * @param vector vector param (2, 3, or 4 elements)\n * @param scalar scalar param\n * @param op the op to apply to vector and scalar\n * @param quantize function to quantize all values in vectors and scalars\n * @param scalarize function to convert numbers to Scalars\n */\nfunction makeVectorScalarBinaryToVectorCase(\n  vector: readonly number[],\n  scalar: number,\n  op: BinaryOp,\n  quantize: QuantizeFunc,\n  scalarize: ScalarBuilder\n): Case | undefined {\n  vector = vector.map(quantize);\n  scalar = quantize(scalar);\n  const result = vector.map(v => op(v, scalar));\n  if (result.includes(undefined)) {\n    return undefined;\n  }\n  return {\n    input: [new Vector(vector.map(scalarize)), scalarize(scalar)],\n    expected: new Vector((result as readonly number[]).map(scalarize)),\n  };\n}\n\n/**\n * @returns array of Case for the input params with op applied\n * @param vectors array of vector params (2, 3, or 4 elements)\n * @param scalars array of scalar params\n * @param op the op to apply to each pair of vector and scalar\n * @param quantize function to quantize all values in vectors and scalars\n * @param scalarize function to convert numbers to Scalars\n */\nfunction generateVectorScalarBinaryToVectorCases(\n  vectors: ROArrayArray<number>,\n  scalars: readonly number[],\n  op: BinaryOp,\n  quantize: QuantizeFunc,\n  scalarize: ScalarBuilder\n): Case[] {\n  const cases = new Array<Case>();\n  scalars.forEach(s => {\n    vectors.forEach(v => {\n      const c = makeVectorScalarBinaryToVectorCase(v, s, op, quantize, scalarize);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n    });\n  });\n  return cases;\n}\n\n/**\n * @returns array of Case for the input params with op applied\n * @param scalars array of scalar params\n * @param vectors array of vector params (2, 3, or 4 elements)\n * @param op he op to apply to each pair of scalar and vector\n */\nexport function generateU32VectorBinaryToVectorCases(\n  scalars: readonly number[],\n  vectors: ROArrayArray<number>,\n  op: BinaryOp\n): Case[] {\n  return generateScalarVectorBinaryToVectorCases(scalars, vectors, op, quantizeToU32, u32);\n}\n\n/**\n * @returns array of Case for the input params with op applied\n * @param vectors array of vector params (2, 3, or 4 elements)\n * @param scalars array of scalar params\n * @param op he op to apply to each pair of vector and scalar\n */\nexport function generateVectorU32BinaryToVectorCases(\n  vectors: ROArrayArray<number>,\n  scalars: readonly number[],\n  op: BinaryOp\n): Case[] {\n  return generateVectorScalarBinaryToVectorCases(vectors, scalars, op, quantizeToU32, u32);\n}\n\n/**\n * @returns array of Case for the input params with op applied\n * @param scalars array of scalar params\n * @param vectors array of vector params (2, 3, or 4 elements)\n * @param op he op to apply to each pair of scalar and vector\n */\nexport function generateI32VectorBinaryToVectorCases(\n  scalars: readonly number[],\n  vectors: ROArrayArray<number>,\n  op: BinaryOp\n): Case[] {\n  return generateScalarVectorBinaryToVectorCases(scalars, vectors, op, quantizeToI32, i32);\n}\n\n/**\n * @returns array of Case for the input params with op applied\n * @param vectors array of vector params (2, 3, or 4 elements)\n * @param scalars array of scalar params\n * @param op he op to apply to each pair of vector and scalar\n */\nexport function generateVectorI32BinaryToVectorCases(\n  vectors: ROArrayArray<number>,\n  scalars: readonly number[],\n  op: BinaryOp\n): Case[] {\n  return generateVectorScalarBinaryToVectorCases(vectors, scalars, op, quantizeToI32, i32);\n}\n"],"mappings":"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"}