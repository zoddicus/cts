{"version":3,"file":"expression.js","names":["globalTestConfig","assert","objectEquals","unreachable","compare","kValue","ScalarType","Scalar","TypeVec","TypeU32","Vector","VectorType","u32","i32","Matrix","MatrixType","scalarTypeOf","FPInterval","cartesianProduct","quantizeToI32","quantizeToU32","isComparator","e","Array","toComparator","input","got","kind","allInputSources","valueStride","ty","cols","rows","valueStrides","tys","map","reduce","sum","c","storageType","width","elementType","fromStorage","expr","toStorage","getOrCreate","key","create","existing","get","undefined","value","set","run","t","shaderBuilder","parameterTypes","resultType","cfg","inputSource","cases","batch_size","vectorize","packed","packScalarsToVector","casesPerBatch","Math","floor","min","device","limits","maxUniformBufferBindingSize","maxStorageBufferBindingSize","pipelineCache","Map","maxBatchesInFlight","batchesInFlight","resolvePromiseBlockingBatch","batchFinishedCallback","i","length","batchCases","slice","Promise","resolve","checkBatch","submitBatch","queue","onSubmittedWorkDone","finally","outputBufferSize","outputBuffer","createBuffer","size","usage","GPUBufferUsage","COPY_SRC","COPY_DST","STORAGE","pipeline","group","buildPipeline","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","testHeartbeatCallback","submit","finish","checkExpectation","outputData","outputs","read","errs","caseIdx","cmp","expected","matched","push","join","Error","expectGPUBufferValuesPassCheck","type","Uint8Array","typedLength","v","fn","wgslOutputs","count","wgslValuesArray","expressionBuilder","some","wgsl","wgslInputVar","wgslHeader","usedF16","header","basicExpressionShaderBody","body","f64","subnormal","positive","max","negative","unrollConstEvalLoops","_","paramExpr","basicExpressionBuilder","basicExpressionWithPredeclarationBuilder","predeclaration","compoundAssignmentBuilder","op","lhsType","rhsType","values","forEach","inputTypes","input_str","param_str","source","module","createShaderModule","code","createComputePipeline","layout","compute","entryPoint","createBindGroup","getBindGroupLayout","entries","binding","resource","buffer","inputSize","inputData","caseStride","caseBase","offset","paramIdx","params","copyTo","inputBuffer","makeBufferWithContents","UNIFORM","vectorWidth","packedCases","packedParameterTypes","p","packedResultType","clampCaseIdx","idx","packedInputs","inputElements","cmp_impls","comparators","gElements","eElements","d","elements","generateScalarBinaryToScalarCases","param0s","param1s","quantize","scalarize","generateBinaryToI32Cases","generateBinaryToU32Cases","makeScalarVectorBinaryToVectorCase","scalar","vector","result","includes","generateScalarVectorBinaryToVectorCases","scalars","vectors","s","makeVectorScalarBinaryToVectorCase","generateVectorScalarBinaryToVectorCases","generateU32VectorBinaryToVectorCases","generateVectorU32BinaryToVectorCases","generateI32VectorBinaryToVectorCases","generateVectorI32BinaryToVectorCases"],"sources":["../../../../../src/webgpu/shader/execution/expression/expression.ts"],"sourcesContent":["import { globalTestConfig } from '../../../../common/framework/test_config.js';\nimport { assert, objectEquals, unreachable } from '../../../../common/util/util.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { compare, Comparator, ComparatorImpl } from '../../../util/compare.js';\nimport { kValue } from '../../../util/constants.js';\nimport {\n  ScalarType,\n  Scalar,\n  Type,\n  TypeVec,\n  TypeU32,\n  Value,\n  Vector,\n  VectorType,\n  u32,\n  i32,\n  Matrix,\n  MatrixType,\n  ScalarBuilder,\n  scalarTypeOf,\n} from '../../../util/conversion.js';\nimport { FPInterval } from '../../../util/floating_point.js';\nimport {\n  cartesianProduct,\n  QuantizeFunc,\n  quantizeToI32,\n  quantizeToU32,\n} from '../../../util/math.js';\n\nexport type Expectation = Value | FPInterval | FPInterval[] | FPInterval[][] | Comparator;\n\n/** @returns if this Expectation actually a Comparator */\nexport function isComparator(e: Expectation): e is Comparator {\n  return !(\n    e instanceof FPInterval ||\n    e instanceof Scalar ||\n    e instanceof Vector ||\n    e instanceof Matrix ||\n    e instanceof Array\n  );\n}\n\n/** @returns the input if it is already a Comparator, otherwise wraps it in a 'value' comparator */\nexport function toComparator(input: Expectation): Comparator {\n  if (isComparator(input)) {\n    return input;\n  }\n\n  return { compare: got => compare(got, input as Value), kind: 'value' };\n}\n\n/** Case is a single expression test case. */\nexport type Case = {\n  // The input value(s)\n  input: Value | Array<Value>;\n  // The expected result, or function to check the result\n  expected: Expectation;\n};\n\n/** CaseList is a list of Cases */\nexport type CaseList = Array<Case>;\n\n/** The input value source */\nexport type InputSource =\n  | 'const' // Shader creation time constant values (@const)\n  | 'uniform' // Uniform buffer\n  | 'storage_r' // Read-only storage buffer\n  | 'storage_rw'; // Read-write storage buffer\n\n/** All possible input sources */\nexport const allInputSources: InputSource[] = ['const', 'uniform', 'storage_r', 'storage_rw'];\n\n/** Configuration for running a expression test */\nexport type Config = {\n  // Where the input values are read from\n  inputSource: InputSource;\n  // If defined, scalar test cases will be packed into vectors of the given\n  // width, which must be 2, 3 or 4.\n  // Requires that all parameters of the expression overload are of a scalar\n  // type, and the return type of the expression overload is also a scalar type.\n  // If the number of test cases is not a multiple of the vector width, then the\n  // last scalar value is repeated to fill the last vector value.\n  vectorize?: number;\n};\n\n// Helper for returning the stride for a given Type\nfunction valueStride(ty: Type): number {\n  if (ty instanceof MatrixType) {\n    switch (ty.cols) {\n      case 2:\n        switch (ty.rows) {\n          case 2:\n            return 16;\n          case 3:\n            return 32;\n          case 4:\n            return 32;\n        }\n        break;\n      case 3:\n        switch (ty.rows) {\n          case 2:\n            return 32;\n          case 3:\n            return 64;\n          case 4:\n            return 64;\n        }\n        break;\n      case 4:\n        switch (ty.rows) {\n          case 2:\n            return 32;\n          case 3:\n            return 64;\n          case 4:\n            return 64;\n        }\n        break;\n    }\n    unreachable(\n      `Attempted to get stride length for a matrix with dimensions (${ty.cols}x${ty.rows}), which isn't currently handled`\n    );\n  }\n\n  // Handles scalars and vectors\n  return 16;\n}\n\n// Helper for summing up all of the stride values for an array of Types\nfunction valueStrides(tys: Type[]): number {\n  return tys.map(valueStride).reduce((sum, c) => sum + c);\n}\n\n// Helper for returning the WGSL storage type for the given Type.\nfunction storageType(ty: Type): Type {\n  if (ty instanceof ScalarType) {\n    assert(ty.kind !== 'f64', `'No storage type defined for 'f64' values`);\n    if (ty.kind === 'abstract-float') {\n      return TypeVec(2, TypeU32);\n    }\n    if (ty.kind === 'bool') {\n      return TypeU32;\n    }\n  }\n  if (ty instanceof VectorType) {\n    return TypeVec(ty.width, storageType(ty.elementType) as ScalarType);\n  }\n  return ty;\n}\n\n// Helper for converting a value of the type 'ty' from the storage type.\nfunction fromStorage(ty: Type, expr: string): string {\n  if (ty instanceof ScalarType) {\n    assert(ty.kind !== 'abstract-float', `AbstractFloat values should not be in input storage`);\n    assert(ty.kind !== 'f64', `'No storage type defined for 'f64' values`);\n    if (ty.kind === 'bool') {\n      return `${expr} != 0u`;\n    }\n  }\n  if (ty instanceof VectorType) {\n    assert(\n      ty.elementType.kind !== 'abstract-float',\n      `AbstractFloat values should not be in input storage`\n    );\n    assert(ty.elementType.kind !== 'f64', `'No storage type defined for 'f64' values`);\n    if (ty.elementType.kind === 'bool') {\n      return `${expr} != vec${ty.width}<u32>(0u)`;\n    }\n  }\n  return expr;\n}\n\n// Helper for converting a value of the type 'ty' to the storage type.\nfunction toStorage(ty: Type, expr: string): string {\n  if (ty instanceof ScalarType) {\n    assert(\n      ty.kind !== 'abstract-float',\n      `AbstractFloat values have custom code writing to input storage`\n    );\n    assert(ty.kind !== 'f64', `No storage type defined for 'f64' values`);\n    if (ty.kind === 'bool') {\n      return `select(0u, 1u, ${expr})`;\n    }\n  }\n  if (ty instanceof VectorType) {\n    assert(\n      ty.elementType.kind !== 'abstract-float',\n      `AbstractFloat values have custom code writing to input storage`\n    );\n    assert(ty.elementType.kind !== 'f64', `'No storage type defined for 'f64' values`);\n    if (ty.elementType.kind === 'bool') {\n      return `select(vec${ty.width}<u32>(0u), vec${ty.width}<u32>(1u), ${expr})`;\n    }\n  }\n  return expr;\n}\n\n// A Pipeline is a map of WGSL shader source to a built pipeline\ntype PipelineCache = Map<String, GPUComputePipeline>;\n\n/**\n * Searches for an entry with the given key, adding and returning the result of calling\n * @p create if the entry was not found.\n * @param map the cache map\n * @param key the entry's key\n * @param create the function used to construct a value, if not found in the cache\n * @returns the value, either fetched from the cache, or newly built.\n */\nfunction getOrCreate<K, V>(map: Map<K, V>, key: K, create: () => V) {\n  const existing = map.get(key);\n  if (existing !== undefined) {\n    return existing;\n  }\n  const value = create();\n  map.set(key, value);\n  return value;\n}\n\n/**\n * Runs the list of expression tests, possibly splitting the tests into multiple\n * dispatches to keep the input data within the buffer binding limits.\n * run() will pack the scalar test cases into smaller set of vectorized tests\n * if `cfg.vectorize` is defined.\n * @param t the GPUTest\n * @param shaderBuilder the shader builder function\n * @param parameterTypes the list of expression parameter types\n * @param resultType the return type for the expression overload\n * @param cfg test configuration values\n * @param cases list of test cases\n * @param batch_size override the calculated casesPerBatch.\n */\nexport async function run(\n  t: GPUTest,\n  shaderBuilder: ShaderBuilder,\n  parameterTypes: Array<Type>,\n  resultType: Type,\n  cfg: Config = { inputSource: 'storage_r' },\n  cases: CaseList,\n  batch_size?: number\n) {\n  // If the 'vectorize' config option was provided, pack the cases into vectors.\n  if (cfg.vectorize !== undefined) {\n    const packed = packScalarsToVector(parameterTypes, resultType, cases, cfg.vectorize);\n    cases = packed.cases;\n    parameterTypes = packed.parameterTypes;\n    resultType = packed.resultType;\n  }\n\n  // The size of the input buffer may exceed the maximum buffer binding size,\n  // so chunk the tests up into batches that fit into the limits. We also split\n  // the cases into smaller batches to help with shader compilation performance.\n  const casesPerBatch = (function () {\n    if (batch_size) {\n      return batch_size;\n    }\n    switch (cfg.inputSource) {\n      case 'const':\n        // Some drivers are slow to optimize shaders with many constant values,\n        // or statements. 32 is an empirically picked number of cases that works\n        // well for most drivers.\n        return 32;\n      case 'uniform':\n        // Some drivers are slow to build pipelines with large uniform buffers.\n        // 2k appears to be a sweet-spot when benchmarking.\n        return Math.floor(\n          Math.min(1024 * 2, t.device.limits.maxUniformBufferBindingSize) /\n            valueStrides(parameterTypes)\n        );\n      case 'storage_r':\n      case 'storage_rw':\n        return Math.floor(\n          t.device.limits.maxStorageBufferBindingSize / valueStrides(parameterTypes)\n        );\n    }\n  })();\n\n  // A cache to hold built shader pipelines.\n  const pipelineCache = new Map<String, GPUComputePipeline>();\n\n  // Submit all the cases in batches, rate-limiting to ensure not too many\n  // batches are in flight simultaneously.\n  const maxBatchesInFlight = 5;\n  let batchesInFlight = 0;\n  let resolvePromiseBlockingBatch: (() => void) | undefined = undefined;\n  const batchFinishedCallback = () => {\n    batchesInFlight -= 1;\n    // If there is any batch waiting on a previous batch to finish,\n    // unblock it now, and clear the resolve callback.\n    if (resolvePromiseBlockingBatch) {\n      resolvePromiseBlockingBatch();\n      resolvePromiseBlockingBatch = undefined;\n    }\n  };\n\n  for (let i = 0; i < cases.length; i += casesPerBatch) {\n    const batchCases = cases.slice(i, Math.min(i + casesPerBatch, cases.length));\n\n    if (batchesInFlight > maxBatchesInFlight) {\n      await new Promise<void>(resolve => {\n        // There should only be one batch waiting at a time.\n        assert(resolvePromiseBlockingBatch === undefined);\n        resolvePromiseBlockingBatch = resolve;\n      });\n    }\n    batchesInFlight += 1;\n\n    const checkBatch = submitBatch(\n      t,\n      shaderBuilder,\n      parameterTypes,\n      resultType,\n      batchCases,\n      cfg.inputSource,\n      pipelineCache\n    );\n    checkBatch();\n    t.queue.onSubmittedWorkDone().finally(batchFinishedCallback);\n  }\n}\n\n/**\n * Submits the list of expression tests. The input data must fit within the\n * buffer binding limits of the given inputSource.\n * @param t the GPUTest\n * @param shaderBuilder the shader builder function\n * @param parameterTypes the list of expression parameter types\n * @param resultType the return type for the expression overload\n * @param cases list of test cases that fit within the binding limits of the device\n * @param inputSource the source of the input values\n * @param pipelineCache the cache of compute pipelines, shared between batches\n * @returns a function that checks the results are as expected\n */\nfunction submitBatch(\n  t: GPUTest,\n  shaderBuilder: ShaderBuilder,\n  parameterTypes: Array<Type>,\n  resultType: Type,\n  cases: CaseList,\n  inputSource: InputSource,\n  pipelineCache: PipelineCache\n): () => void {\n  // Construct a buffer to hold the results of the expression tests\n  const outputBufferSize = cases.length * valueStride(resultType);\n  const outputBuffer = t.device.createBuffer({\n    size: outputBufferSize,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST | GPUBufferUsage.STORAGE,\n  });\n\n  const [pipeline, group] = buildPipeline(\n    t,\n    shaderBuilder,\n    parameterTypes,\n    resultType,\n    cases,\n    inputSource,\n    outputBuffer,\n    pipelineCache\n  );\n\n  const encoder = t.device.createCommandEncoder();\n  const pass = encoder.beginComputePass();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, group);\n  pass.dispatchWorkgroups(1);\n  pass.end();\n\n  // Heartbeat to ensure CTS runners know we're alive.\n  globalTestConfig.testHeartbeatCallback();\n\n  t.queue.submit([encoder.finish()]);\n\n  // Return a function that can check the results of the shader\n  return () => {\n    const checkExpectation = (outputData: Uint8Array) => {\n      // Read the outputs from the output buffer\n      const outputs = new Array<Value>(cases.length);\n      for (let i = 0; i < cases.length; i++) {\n        outputs[i] = resultType.read(outputData, i * valueStride(resultType));\n      }\n\n      // The list of expectation failures\n      const errs: string[] = [];\n\n      // For each case...\n      for (let caseIdx = 0; caseIdx < cases.length; caseIdx++) {\n        const c = cases[caseIdx];\n        const got = outputs[caseIdx];\n        const cmp = toComparator(c.expected).compare(got);\n        if (!cmp.matched) {\n          errs.push(`(${c.input instanceof Array ? c.input.join(', ') : c.input})\n    returned: ${cmp.got}\n    expected: ${cmp.expected}`);\n        }\n      }\n\n      return errs.length > 0 ? new Error(errs.join('\\n\\n')) : undefined;\n    };\n\n    // Heartbeat to ensure CTS runners know we're alive.\n    globalTestConfig.testHeartbeatCallback();\n\n    t.expectGPUBufferValuesPassCheck(outputBuffer, checkExpectation, {\n      type: Uint8Array,\n      typedLength: outputBufferSize,\n    });\n  };\n}\n\n/**\n * map is a helper for returning a new array with each element of @p v\n * transformed with @p fn.\n * If @p v is not an array, then @p fn is called with (v, 0).\n */\nfunction map<T, U>(v: T | T[], fn: (value: T, index?: number) => U): U[] {\n  if (v instanceof Array) {\n    return v.map(fn);\n  }\n  return [fn(v, 0)];\n}\n\n/**\n * ShaderBuilder is a function used to construct the WGSL shader used by an\n * expression test.\n * @param parameterTypes the list of expression parameter types\n * @param resultType the return type for the expression overload\n * @param cases list of test cases that fit within the binding limits of the device\n * @param inputSource the source of the input values\n */\nexport type ShaderBuilder = (\n  parameterTypes: Array<Type>,\n  resultType: Type,\n  cases: CaseList,\n  inputSource: InputSource\n) => string;\n\n/**\n * Helper that returns the WGSL to declare the output storage buffer for a shader\n */\nfunction wgslOutputs(resultType: Type, count: number): string {\n  return `\nstruct Output {\n  @size(${valueStride(resultType)}) value : ${storageType(resultType)}\n};\n@group(0) @binding(0) var<storage, read_write> outputs : array<Output, ${count}>;`;\n}\n\n/**\n * Helper that returns the WGSL to declare the values array for a shader\n */\nfunction wgslValuesArray(\n  parameterTypes: Array<Type>,\n  resultType: Type,\n  cases: CaseList,\n  expressionBuilder: ExpressionBuilder\n): string {\n  // AbstractFloat values cannot be stored in an array\n  if (parameterTypes.some(ty => scalarTypeOf(ty).kind === 'abstract-float')) {\n    return '';\n  }\n  return `\nconst values = array(\n  ${cases.map(c => expressionBuilder(map(c.input, v => v.wgsl()))).join(',\\n  ')}\n);`;\n}\n\n/**\n * Helper that returns the WGSL 'var' declaration for the given input source\n */\nfunction wgslInputVar(inputSource: InputSource, count: number) {\n  switch (inputSource) {\n    case 'storage_r':\n      return `@group(0) @binding(1) var<storage, read> inputs : array<Input, ${count}>;`;\n    case 'storage_rw':\n      return `@group(0) @binding(1) var<storage, read_write> inputs : array<Input, ${count}>;`;\n    case 'uniform':\n      return `@group(0) @binding(1) var<uniform> inputs : array<Input, ${count}>;`;\n  }\n  throw new Error(`InputSource ${inputSource} does not use an input var`);\n}\n\n/**\n * Helper that returns the WGSL header before any other declaration, currently include f16\n * enable directive if necessary.\n */\nfunction wgslHeader(parameterTypes: Array<Type>, resultType: Type) {\n  const usedF16 =\n    scalarTypeOf(resultType).kind === 'f16' ||\n    parameterTypes.some((ty: Type) => scalarTypeOf(ty).kind === 'f16');\n  const header = usedF16 ? 'enable f16;\\n' : '';\n  return header;\n}\n\n/**\n * ExpressionBuilder returns the WGSL used to evaluate an expression with the\n * given input values.\n */\nexport type ExpressionBuilder = (values: Array<string>) => string;\n\n/**\n * Returns a ShaderBuilder that builds a basic expression test shader.\n * @param expressionBuilder the expression builder\n */\nfunction basicExpressionShaderBody(\n  expressionBuilder: ExpressionBuilder,\n  parameterTypes: Array<Type>,\n  resultType: Type,\n  cases: CaseList,\n  inputSource: InputSource\n): string {\n  if (inputSource === 'const') {\n    //////////////////////////////////////////////////////////////////////////\n    // Constant eval\n    //////////////////////////////////////////////////////////////////////////\n    let body = '';\n    if (\n      scalarTypeOf(resultType).kind !== 'abstract-float' &&\n      parameterTypes.some(ty => scalarTypeOf(ty).kind === 'abstract-float')\n    ) {\n      // Directly assign the expression to the output, to avoid an\n      // intermediate store, which will concretize the value early\n      body = cases\n        .map(\n          (c, i) =>\n            `  outputs[${i}].value = ${toStorage(\n              resultType,\n              expressionBuilder(map(c.input, v => v.wgsl()))\n            )};`\n        )\n        .join('\\n  ');\n    } else if (scalarTypeOf(resultType).kind === 'abstract-float') {\n      // AbstractFloats are f64s under the hood. WebGPU does not support\n      // putting f64s in buffers, so the result needs to be split up into u32s\n      // and rebuilt in the test framework.\n      //\n      // This is complicated by the fact that user defined functions cannot\n      // take/return AbstractFloats, and AbstractFloats cannot be stored in\n      // variables, so the code cannot just inject a simple utility function\n      // at the top of the shader, instead this snippet needs to be inlined\n      // everywhere the test needs to return an AbstractFloat.\n      //\n      // select is used below, since ifs are not available during constant\n      // eval. This has the side effect of short-circuiting doesn't occur, so\n      // both sides of the select have to evaluate and be valid.\n      //\n      // This snippet implements FTZ for subnormals to bypass the need for\n      // complex subnormal specific logic.\n      //\n      // Expressions resulting in subnormals can still be reasonably tested,\n      // since this snippet will return 0 with the correct sign, which is\n      // always in the acceptance interval for a subnormal result, since an\n      // implementation may FTZ.\n      //\n      // Document for the snippet is included here in this code block, since\n      // shader length affects compilation time  significantly on some\n      // backends.\n      //\n      // Snippet with documentation:\n      //   const kExponentBias = 1022;\n      //\n      //   // Detect if the value is zero or subnormal, so that FTZ behaviour\n      //   // can occur\n      //   const subnormal_or_zero : bool = (${expr} <= ${kValue.f64.subnormal.positive.max}) && (${expr} >= ${kValue.f64.subnormal.negative.min});\n      //\n      //   // MSB of the upper u32 is 1 if the value is negative, otherwise 0\n      //   // Extract the sign bit early, so that abs() can be used with\n      //   // frexp() so negative cases do not need to be handled\n      //   const sign_bit : u32 = select(0, 0x80000000, ${expr} < 0);\n      //\n      //   // Use frexp() to obtain the exponent and fractional parts, and\n      //   // then perform FTZ if needed\n      //   const f = frexp(abs(${expr}));\n      //   const f_fract = select(f.fract, 0, subnormal_or_zero);\n      //   const f_exp = select(f.exp, -kExponentBias, subnormal_or_zero);\n      //\n      //   // Adjust for the exponent bias and shift for storing in bits\n      //   // [20..31] of the upper u32\n      //   const exponent_bits : u32 = (f_exp + kExponentBias) << 20;\n      //\n      //   // Extract the portion of the mantissa that appears in upper u32 as\n      //   // a float for later use\n      //   const high_mantissa = ldexp(f_fract, 21);\n      //\n      //   // Extract the portion of the mantissa that appears in upper u32 as\n      //   // as bits. This value is masked, because normals will explicitly\n      //   // have the implicit leading 1 that should not be in the final\n      //   // result.\n      //   const high_mantissa_bits : u32 = u32(ldexp(f_fract, 21)) & 0x000fffff;\n      //\n      //   // Calculate the mantissa stored in the lower u32 as a float\n      //   const low_mantissa = f_fract - ldexp(floor(high_mantissa), -21);\n      //\n      //   // Convert the lower u32 mantissa to bits\n      //   const low_mantissa_bits = u32(ldexp(low_mantissa, 53));\n      //\n      //   // Pack the result into 2x u32s for writing out to the testing\n      //   // framework\n      //   outputs[${i}].value.x = low_mantissa_bits;\n      //   outputs[${i}].value.y = sign_bit | exponent_bits | high_mantissa_bits;\n      body = cases\n        .map((c, i) => {\n          const expr = `${expressionBuilder(map(c.input, v => v.wgsl()))}`;\n          // prettier-ignore\n          return `  {\n    const kExponentBias = 1022;\n    const subnormal_or_zero : bool = (${expr} <= ${kValue.f64.subnormal.positive.max}) && (${expr} >= ${kValue.f64.subnormal.negative.min});\n    const sign_bit : u32 = select(0, 0x80000000, ${expr} < 0);\n    const f = frexp(abs(${expr}));\n    const f_fract = select(f.fract, 0, subnormal_or_zero);\n    const f_exp = select(f.exp, -kExponentBias, subnormal_or_zero);\n    const exponent_bits : u32 = (f_exp + kExponentBias) << 20;\n    const high_mantissa = ldexp(f_fract, 21);\n    const high_mantissa_bits : u32 = u32(ldexp(f_fract, 21)) & 0x000fffff;\n    const low_mantissa = f_fract - ldexp(floor(high_mantissa), -21);\n    const low_mantissa_bits = u32(ldexp(low_mantissa, 53));\n    outputs[${i}].value.x = low_mantissa_bits;\n    outputs[${i}].value.y = sign_bit | exponent_bits | high_mantissa_bits;\n  }`;\n        })\n        .join('\\n  ');\n    } else if (globalTestConfig.unrollConstEvalLoops) {\n      body = cases\n        .map((_, i) => {\n          const value = `values[${i}]`;\n          return `  outputs[${i}].value = ${toStorage(resultType, value)};`;\n        })\n        .join('\\n  ');\n    } else {\n      body = `\n  for (var i = 0u; i < ${cases.length}; i++) {\n    outputs[i].value = ${toStorage(resultType, `values[i]`)};\n  }`;\n    }\n\n    return `\n${wgslOutputs(resultType, cases.length)}\n\n${wgslValuesArray(parameterTypes, resultType, cases, expressionBuilder)}\n\n@compute @workgroup_size(1)\nfn main() {\n${body}\n}`;\n  } else {\n    //////////////////////////////////////////////////////////////////////////\n    // Runtime eval\n    //////////////////////////////////////////////////////////////////////////\n\n    // returns the WGSL expression to load the ith parameter of the given type from the input buffer\n    const paramExpr = (ty: Type, i: number) => fromStorage(ty, `inputs[i].param${i}`);\n\n    // resolves to the expression that calls the builtin\n    const expr = toStorage(resultType, expressionBuilder(parameterTypes.map(paramExpr)));\n\n    return `\nstruct Input {\n${parameterTypes\n  .map((ty, i) => `  @size(${valueStride(ty)}) param${i} : ${storageType(ty)},`)\n  .join('\\n')}\n};\n\n${wgslOutputs(resultType, cases.length)}\n\n${wgslInputVar(inputSource, cases.length)}\n\n@compute @workgroup_size(1)\nfn main() {\n  for (var i = 0; i < ${cases.length}; i++) {\n    outputs[i].value = ${expr};\n  }\n}\n`;\n  }\n}\n\n/**\n * Returns a ShaderBuilder that builds a basic expression test shader.\n * @param expressionBuilder the expression builder\n */\nexport function basicExpressionBuilder(expressionBuilder: ExpressionBuilder): ShaderBuilder {\n  return (\n    parameterTypes: Array<Type>,\n    resultType: Type,\n    cases: CaseList,\n    inputSource: InputSource\n  ) => {\n    return `\\\n${wgslHeader(parameterTypes, resultType)}\n\n${basicExpressionShaderBody(expressionBuilder, parameterTypes, resultType, cases, inputSource)}`;\n  };\n}\n\n/**\n * Returns a ShaderBuilder that builds a basic expression test shader with given predeclaration\n * string goes after WGSL header (i.e. enable directives) if any but before anything else.\n * @param expressionBuilder the expression builder\n * @param predeclaration the predeclaration string\n */\nexport function basicExpressionWithPredeclarationBuilder(\n  expressionBuilder: ExpressionBuilder,\n  predeclaration: string\n): ShaderBuilder {\n  return (\n    parameterTypes: Array<Type>,\n    resultType: Type,\n    cases: CaseList,\n    inputSource: InputSource\n  ) => {\n    return `\\\n${wgslHeader(parameterTypes, resultType)}\n\n${predeclaration}\n\n${basicExpressionShaderBody(expressionBuilder, parameterTypes, resultType, cases, inputSource)}`;\n  };\n}\n\n/**\n * Returns a ShaderBuilder that builds a compound assignment operator test shader.\n * @param op the compound operator\n */\nexport function compoundAssignmentBuilder(op: string): ShaderBuilder {\n  return (\n    parameterTypes: Array<Type>,\n    resultType: Type,\n    cases: CaseList,\n    inputSource: InputSource\n  ) => {\n    //////////////////////////////////////////////////////////////////////////\n    // Input validation\n    //////////////////////////////////////////////////////////////////////////\n    if (parameterTypes.length !== 2) {\n      throw new Error(`compoundBinaryOp() requires exactly two parameters values per case`);\n    }\n    const lhsType = parameterTypes[0];\n    const rhsType = parameterTypes[1];\n    if (!objectEquals(lhsType, resultType)) {\n      throw new Error(\n        `compoundBinaryOp() requires result type (${resultType}) to be equal to the LHS type (${lhsType})`\n      );\n    }\n    if (inputSource === 'const') {\n      //////////////////////////////////////////////////////////////////////////\n      // Constant eval\n      //////////////////////////////////////////////////////////////////////////\n      let body = '';\n      if (globalTestConfig.unrollConstEvalLoops) {\n        body = cases\n          .map((_, i) => {\n            return `\n  var ret_${i} = lhs[${i}];\n  ret_${i} ${op} rhs[${i}];\n  outputs[${i}].value = ${storageType(resultType)}(ret_${i});`;\n          })\n          .join('\\n  ');\n      } else {\n        body = `\n  for (var i = 0u; i < ${cases.length}; i++) {\n    var ret = lhs[i];\n    ret ${op} rhs[i];\n    outputs[i].value = ${storageType(resultType)}(ret);\n  }`;\n      }\n\n      const values = cases.map(c => (c.input as Value[]).map(v => v.wgsl()));\n\n      return `\n${wgslHeader(parameterTypes, resultType)}\n${wgslOutputs(resultType, cases.length)}\n\nconst lhs = array(\n${values.map(c => `${c[0]}`).join(',\\n  ')}\n      );\nconst rhs = array(\n${values.map(c => `${c[1]}`).join(',\\n  ')}\n);\n\n@compute @workgroup_size(1)\nfn main() {\n${body}\n}`;\n    } else {\n      //////////////////////////////////////////////////////////////////////////\n      // Runtime eval\n      //////////////////////////////////////////////////////////////////////////\n      return `\n${wgslHeader(parameterTypes, resultType)}\n${wgslOutputs(resultType, cases.length)}\n\nstruct Input {\n  @size(${valueStride(lhsType)}) lhs : ${storageType(lhsType)},\n  @size(${valueStride(rhsType)}) rhs : ${storageType(rhsType)},\n}\n\n${wgslInputVar(inputSource, cases.length)}\n\n@compute @workgroup_size(1)\nfn main() {\n  for (var i = 0; i < ${cases.length}; i++) {\n    var ret = ${lhsType}(inputs[i].lhs);\n    ret ${op} ${rhsType}(inputs[i].rhs);\n    outputs[i].value = ${storageType(resultType)}(ret);\n  }\n}\n`;\n    }\n  };\n}\n\n/**\n * Constructs and returns a GPUComputePipeline and GPUBindGroup for running a\n * batch of test cases. If a pre-created pipeline can be found in\n * @p pipelineCache, then this may be returned instead of creating a new\n * pipeline.\n * @param t the GPUTest\n * @param shaderBuilder the shader builder\n * @param parameterTypes the list of expression parameter types\n * @param resultType the return type for the expression overload\n * @param cases list of test cases that fit within the binding limits of the device\n * @param inputSource the source of the input values\n * @param outputBuffer the buffer that will hold the output values of the tests\n * @param pipelineCache the cache of compute pipelines, shared between batches\n */\nfunction buildPipeline(\n  t: GPUTest,\n  shaderBuilder: ShaderBuilder,\n  parameterTypes: Array<Type>,\n  resultType: Type,\n  cases: CaseList,\n  inputSource: InputSource,\n  outputBuffer: GPUBuffer,\n  pipelineCache: PipelineCache\n): [GPUComputePipeline, GPUBindGroup] {\n  cases.forEach(c => {\n    const inputTypes = c.input instanceof Array ? c.input.map(i => i.type) : [c.input.type];\n    if (!objectEquals(inputTypes, parameterTypes)) {\n      const input_str = `[${inputTypes.join(',')}]`;\n      const param_str = `[${parameterTypes.join(',')}]`;\n      throw new Error(\n        `case input types ${input_str} do not match provided runner parameter types ${param_str}`\n      );\n    }\n  });\n\n  const source = shaderBuilder(parameterTypes, resultType, cases, inputSource);\n\n  switch (inputSource) {\n    case 'const': {\n      // build the shader module\n      const module = t.device.createShaderModule({ code: source });\n\n      // build the pipeline\n      const pipeline = t.device.createComputePipeline({\n        layout: 'auto',\n        compute: { module, entryPoint: 'main' },\n      });\n\n      // build the bind group\n      const group = t.device.createBindGroup({\n        layout: pipeline.getBindGroupLayout(0),\n        entries: [{ binding: 0, resource: { buffer: outputBuffer } }],\n      });\n\n      return [pipeline, group];\n    }\n\n    case 'uniform':\n    case 'storage_r':\n    case 'storage_rw': {\n      // Input values come from a uniform or storage buffer\n\n      // size in bytes of the input buffer\n      const inputSize = cases.length * valueStrides(parameterTypes);\n\n      // Holds all the parameter values for all cases\n      const inputData = new Uint8Array(inputSize);\n\n      // Pack all the input parameter values into the inputData buffer\n      {\n        const caseStride = valueStrides(parameterTypes);\n        for (let caseIdx = 0; caseIdx < cases.length; caseIdx++) {\n          const caseBase = caseIdx * caseStride;\n          let offset = caseBase;\n          for (let paramIdx = 0; paramIdx < parameterTypes.length; paramIdx++) {\n            const params = cases[caseIdx].input;\n            if (params instanceof Array) {\n              params[paramIdx].copyTo(inputData, offset);\n            } else {\n              params.copyTo(inputData, offset);\n            }\n            offset += valueStride(parameterTypes[paramIdx]);\n          }\n        }\n      }\n\n      // build the compute pipeline, if the shader hasn't been compiled already.\n      const pipeline = getOrCreate(pipelineCache, source, () => {\n        // build the shader module\n        const module = t.device.createShaderModule({ code: source });\n\n        // build the pipeline\n        return t.device.createComputePipeline({\n          layout: 'auto',\n          compute: { module, entryPoint: 'main' },\n        });\n      });\n\n      // build the input buffer\n      const inputBuffer = t.makeBufferWithContents(\n        inputData,\n        GPUBufferUsage.COPY_SRC |\n          (inputSource === 'uniform' ? GPUBufferUsage.UNIFORM : GPUBufferUsage.STORAGE)\n      );\n\n      // build the bind group\n      const group = t.device.createBindGroup({\n        layout: pipeline.getBindGroupLayout(0),\n        entries: [\n          { binding: 0, resource: { buffer: outputBuffer } },\n          { binding: 1, resource: { buffer: inputBuffer } },\n        ],\n      });\n\n      return [pipeline, group];\n    }\n  }\n}\n\n/**\n * Packs a list of scalar test cases into a smaller list of vector cases.\n * Requires that all parameters of the expression overload are of a scalar type,\n * and the return type of the expression overload is also a scalar type.\n * If `cases.length` is not a multiple of `vectorWidth`, then the last scalar\n * test case value is repeated to fill the vector value.\n */\nfunction packScalarsToVector(\n  parameterTypes: Array<Type>,\n  resultType: Type,\n  cases: CaseList,\n  vectorWidth: number\n): { cases: CaseList; parameterTypes: Array<Type>; resultType: Type } {\n  // Validate that the parameters and return type are all vectorizable\n  for (let i = 0; i < parameterTypes.length; i++) {\n    const ty = parameterTypes[i];\n    if (!(ty instanceof ScalarType)) {\n      throw new Error(\n        `packScalarsToVector() can only be used on scalar parameter types, but the ${i}'th parameter type is a ${ty}'`\n      );\n    }\n  }\n  if (!(resultType instanceof ScalarType)) {\n    throw new Error(\n      `packScalarsToVector() can only be used with a scalar return type, but the return type is a ${resultType}'`\n    );\n  }\n\n  const packedCases: Array<Case> = [];\n  const packedParameterTypes = parameterTypes.map(p => TypeVec(vectorWidth, p as ScalarType));\n  const packedResultType = new VectorType(vectorWidth, resultType);\n\n  const clampCaseIdx = (idx: number) => Math.min(idx, cases.length - 1);\n\n  let caseIdx = 0;\n  while (caseIdx < cases.length) {\n    // Construct the vectorized inputs from the scalar cases\n    const packedInputs = new Array<Vector>(parameterTypes.length);\n    for (let paramIdx = 0; paramIdx < parameterTypes.length; paramIdx++) {\n      const inputElements = new Array<Scalar>(vectorWidth);\n      for (let i = 0; i < vectorWidth; i++) {\n        const input = cases[clampCaseIdx(caseIdx + i)].input;\n        inputElements[i] = (input instanceof Array ? input[paramIdx] : input) as Scalar;\n      }\n      packedInputs[paramIdx] = new Vector(inputElements);\n    }\n\n    // Gather the comparators for the packed cases\n    const cmp_impls = new Array<ComparatorImpl>(vectorWidth);\n    for (let i = 0; i < vectorWidth; i++) {\n      cmp_impls[i] = toComparator(cases[clampCaseIdx(caseIdx + i)].expected).compare;\n    }\n    const comparators: Comparator = {\n      compare: (got: Value) => {\n        let matched = true;\n        const gElements = new Array<string>(vectorWidth);\n        const eElements = new Array<string>(vectorWidth);\n        for (let i = 0; i < vectorWidth; i++) {\n          const d = cmp_impls[i]((got as Vector).elements[i]);\n          matched = matched && d.matched;\n          gElements[i] = d.got;\n          eElements[i] = d.expected;\n        }\n        return {\n          matched,\n          got: `${packedResultType}(${gElements.join(', ')})`,\n          expected: `${packedResultType}(${eElements.join(', ')})`,\n        };\n      },\n      kind: 'packed',\n    };\n\n    // Append the new packed case\n    packedCases.push({ input: packedInputs, expected: comparators });\n    caseIdx += vectorWidth;\n  }\n\n  return {\n    cases: packedCases,\n    parameterTypes: packedParameterTypes,\n    resultType: packedResultType,\n  };\n}\n\n/**\n * Indicates bounds that acceptance intervals need to be within to avoid inputs\n * being filtered out. This is used for const-eval tests, since going OOB will\n * cause a validation error not an execution error.\n */\nexport type IntervalFilter =\n  | 'finite' // Expected to be finite in the interval numeric space\n  | 'unfiltered'; // No expectations\n\n/**\n * A function that performs a binary operation on x and y, and returns the expected\n * result.\n */\nexport interface BinaryOp {\n  (x: number, y: number): number | undefined;\n}\n\n/**\n * @returns array of Case for the input params with op applied\n * @param param0s array of inputs to try for the first param\n * @param param1s array of inputs to try for the second param\n * @param op callback called on each pair of inputs to produce each case\n * @param quantize function to quantize all values\n * @param scalarize function to convert numbers to Scalars\n */\nfunction generateScalarBinaryToScalarCases(\n  param0s: number[],\n  param1s: number[],\n  op: BinaryOp,\n  quantize: QuantizeFunc,\n  scalarize: ScalarBuilder\n): Case[] {\n  param0s = param0s.map(quantize);\n  param1s = param1s.map(quantize);\n  return cartesianProduct(param0s, param1s).reduce((cases, e) => {\n    const expected = op(e[0], e[1]);\n    if (expected !== undefined) {\n      cases.push({ input: [scalarize(e[0]), scalarize(e[1])], expected: scalarize(expected) });\n    }\n    return cases;\n  }, new Array<Case>());\n}\n\n/**\n * @returns an array of Cases for operations over a range of inputs\n * @param param0s array of inputs to try for the first param\n * @param param1s array of inputs to try for the second param\n * @param op callback called on each pair of inputs to produce each case\n */\nexport function generateBinaryToI32Cases(param0s: number[], param1s: number[], op: BinaryOp) {\n  return generateScalarBinaryToScalarCases(param0s, param1s, op, quantizeToI32, i32);\n}\n\n/**\n * @returns an array of Cases for operations over a range of inputs\n * @param param0s array of inputs to try for the first param\n * @param param1s array of inputs to try for the second param\n * @param op callback called on each pair of inputs to produce each case\n */\nexport function generateBinaryToU32Cases(param0s: number[], param1s: number[], op: BinaryOp) {\n  return generateScalarBinaryToScalarCases(param0s, param1s, op, quantizeToU32, u32);\n}\n\n/**\n * @returns a Case for the input params with op applied\n * @param scalar scalar param\n * @param vector vector param (2, 3, or 4 elements)\n * @param op the op to apply to scalar and vector\n * @param quantize function to quantize all values in vectors and scalars\n * @param scalarize function to convert numbers to Scalars\n */\nfunction makeScalarVectorBinaryToVectorCase(\n  scalar: number,\n  vector: number[],\n  op: BinaryOp,\n  quantize: QuantizeFunc,\n  scalarize: ScalarBuilder\n): Case | undefined {\n  scalar = quantize(scalar);\n  vector = vector.map(quantize);\n  const result = vector.map(v => op(scalar, v));\n  if (result.includes(undefined)) {\n    return undefined;\n  }\n  return {\n    input: [scalarize(scalar), new Vector(vector.map(scalarize))],\n    expected: new Vector((result as number[]).map(scalarize)),\n  };\n}\n\n/**\n * @returns array of Case for the input params with op applied\n * @param scalars array of scalar params\n * @param vectors array of vector params (2, 3, or 4 elements)\n * @param op the op to apply to each pair of scalar and vector\n * @param quantize function to quantize all values in vectors and scalars\n * @param scalarize function to convert numbers to Scalars\n */\nfunction generateScalarVectorBinaryToVectorCases(\n  scalars: number[],\n  vectors: number[][],\n  op: BinaryOp,\n  quantize: QuantizeFunc,\n  scalarize: ScalarBuilder\n): Case[] {\n  const cases = new Array<Case>();\n  scalars.forEach(s => {\n    vectors.forEach(v => {\n      const c = makeScalarVectorBinaryToVectorCase(s, v, op, quantize, scalarize);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n    });\n  });\n  return cases;\n}\n\n/**\n * @returns a Case for the input params with op applied\n * @param vector vector param (2, 3, or 4 elements)\n * @param scalar scalar param\n * @param op the op to apply to vector and scalar\n * @param quantize function to quantize all values in vectors and scalars\n * @param scalarize function to convert numbers to Scalars\n */\nfunction makeVectorScalarBinaryToVectorCase(\n  vector: number[],\n  scalar: number,\n  op: BinaryOp,\n  quantize: QuantizeFunc,\n  scalarize: ScalarBuilder\n): Case | undefined {\n  vector = vector.map(quantize);\n  scalar = quantize(scalar);\n  const result = vector.map(v => op(v, scalar));\n  if (result.includes(undefined)) {\n    return undefined;\n  }\n  return {\n    input: [new Vector(vector.map(scalarize)), scalarize(scalar)],\n    expected: new Vector((result as number[]).map(scalarize)),\n  };\n}\n\n/**\n * @returns array of Case for the input params with op applied\n * @param vectors array of vector params (2, 3, or 4 elements)\n * @param scalars array of scalar params\n * @param op the op to apply to each pair of vector and scalar\n * @param quantize function to quantize all values in vectors and scalars\n * @param scalarize function to convert numbers to Scalars\n */\nfunction generateVectorScalarBinaryToVectorCases(\n  vectors: number[][],\n  scalars: number[],\n  op: BinaryOp,\n  quantize: QuantizeFunc,\n  scalarize: ScalarBuilder\n): Case[] {\n  const cases = new Array<Case>();\n  scalars.forEach(s => {\n    vectors.forEach(v => {\n      const c = makeVectorScalarBinaryToVectorCase(v, s, op, quantize, scalarize);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n    });\n  });\n  return cases;\n}\n\n/**\n * @returns array of Case for the input params with op applied\n * @param scalars array of scalar params\n * @param vectors array of vector params (2, 3, or 4 elements)\n * @param op he op to apply to each pair of scalar and vector\n */\nexport function generateU32VectorBinaryToVectorCases(\n  scalars: number[],\n  vectors: number[][],\n  op: BinaryOp\n): Case[] {\n  return generateScalarVectorBinaryToVectorCases(scalars, vectors, op, quantizeToU32, u32);\n}\n\n/**\n * @returns array of Case for the input params with op applied\n * @param vectors array of vector params (2, 3, or 4 elements)\n * @param scalars array of scalar params\n * @param op he op to apply to each pair of vector and scalar\n */\nexport function generateVectorU32BinaryToVectorCases(\n  vectors: number[][],\n  scalars: number[],\n  op: BinaryOp\n): Case[] {\n  return generateVectorScalarBinaryToVectorCases(vectors, scalars, op, quantizeToU32, u32);\n}\n\n/**\n * @returns array of Case for the input params with op applied\n * @param scalars array of scalar params\n * @param vectors array of vector params (2, 3, or 4 elements)\n * @param op he op to apply to each pair of scalar and vector\n */\nexport function generateI32VectorBinaryToVectorCases(\n  scalars: number[],\n  vectors: number[][],\n  op: BinaryOp\n): Case[] {\n  return generateScalarVectorBinaryToVectorCases(scalars, vectors, op, quantizeToI32, i32);\n}\n\n/**\n * @returns array of Case for the input params with op applied\n * @param vectors array of vector params (2, 3, or 4 elements)\n * @param scalars array of scalar params\n * @param op he op to apply to each pair of vector and scalar\n */\nexport function generateVectorI32BinaryToVectorCases(\n  vectors: number[][],\n  scalars: number[],\n  op: BinaryOp\n): Case[] {\n  return generateVectorScalarBinaryToVectorCases(vectors, scalars, op, quantizeToI32, i32);\n}\n"],"mappings":"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"}