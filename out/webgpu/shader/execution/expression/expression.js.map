{"version":3,"file":"expression.js","names":["globalTestConfig","assert","objectEquals","unreachable","kValue","MatrixType","ScalarType","Type","VectorType","VectorValue","isAbstractType","scalarTypeOf","ArrayType","elementTypeOf","align","toComparator","allInputSources","onlyConstInputSource","allButConstInputSource","sizeAndAlignmentOf","ty","source","kind","size","alignment","out","elementType","n","width","rows","cols","count","strideOf","sizeAndAlign","structLayout","members","callback","offset","i","length","member","index","type","Math","max","stride","structStride","wgslMembers","memberName","lines","layout","m","push","padding","join","storageType","u32","vec","fromStorage","expr","toStorage","getOrCreate","map","key","create","existing","get","undefined","value","set","run","t","shaderBuilder","parameterTypes","resultType","cfg","inputSource","cases","batch_size","vectorize","packed","packScalarsToVector","casesPerBatch","floor","min","device","limits","maxUniformBufferBindingSize","maxStorageBufferBindingSize","pipelineCache","Map","maxBatchesInFlight","batchesInFlight","resolvePromiseBlockingBatch","batchFinishedCallback","processBatch","batchCases","checkBatch","submitBatch","queue","onSubmittedWorkDone","finally","pendingBatches","slice","Promise","resolve","all","outputStride","outputBufferSize","outputBuffer","createBuffer","usage","GPUBufferUsage","COPY_SRC","COPY_DST","STORAGE","pipeline","group","buildPipeline","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","testHeartbeatCallback","submit","finish","checkExpectation","outputData","outputs","Array","read","errs","caseIdx","c","got","cmp","expected","compare","matched","input","Error","expectGPUBufferValuesPassCheck","Uint8Array","typedLength","v","fn","wgslOutputs","output_struct","dim","wgslValuesArray","expressionBuilder","wgsl","wgslInputVar","wgslHeader","usedF16","some","header","basicExpressionShaderBody","body","unrollConstEvalLoops","_","valuesArray","paramExpr","basicExpressionBuilder","basicExpressionWithPredeclarationBuilder","predeclaration","compoundAssignmentBuilder","op","lhsType","rhsType","values","abstractFloatSnippet","case_idx","accessor","f64","positive","subnormal","negative","abstractFloatCaseBody","keys","idx","results","r","abstractFloatShaderBuilder","abstractIntSnippet","abstractIntCaseBody","abstractIntShaderBuilder","forEach","inputTypes","input_str","param_str","module","createShaderModule","code","createComputePipelineAsync","compute","entryPoint","createBindGroup","getBindGroupLayout","entries","binding","resource","buffer","caseStride","inputSize","inputData","arg","copyTo","createComputePipeline","inputBuffer","makeBufferWithContents","UNIFORM","vectorWidth","packedCases","packedParameterTypes","p","packedResultType","clampCaseIdx","packedInputs","paramIdx","inputElements","cmp_impls","comparators","gElements","eElements","d","elements"],"sources":["../../../../../src/webgpu/shader/execution/expression/expression.ts"],"sourcesContent":["import { globalTestConfig } from '../../../../common/framework/test_config.js';\nimport { assert, objectEquals, unreachable } from '../../../../common/util/util.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { Comparator, ComparatorImpl } from '../../../util/compare.js';\nimport { kValue } from '../../../util/constants.js';\nimport {\n  MatrixType,\n  ScalarValue,\n  ScalarType,\n  Type,\n  VectorType,\n  Value,\n  VectorValue,\n  isAbstractType,\n  scalarTypeOf,\n  ArrayType,\n  elementTypeOf,\n} from '../../../util/conversion.js';\nimport { align } from '../../../util/math.js';\n\nimport { Case } from './case.js';\nimport { toComparator } from './expectation.js';\n\n/** The input value source */\nexport type InputSource =\n  | 'const' // Shader creation time constant values (@const)\n  | 'uniform' // Uniform buffer\n  | 'storage_r' // Read-only storage buffer\n  | 'storage_rw'; // Read-write storage buffer\n\n/** All possible input sources */\nexport const allInputSources: InputSource[] = ['const', 'uniform', 'storage_r', 'storage_rw'];\n\n/** Just constant input source */\nexport const onlyConstInputSource: InputSource[] = ['const'];\n\n/** All input sources except const */\nexport const allButConstInputSource: InputSource[] = ['uniform', 'storage_r', 'storage_rw'];\n\n/** Configuration for running a expression test */\nexport type Config = {\n  // Where the input values are read from\n  inputSource: InputSource;\n  // If defined, scalar test cases will be packed into vectors of the given\n  // width, which must be 2, 3 or 4.\n  // Requires that all parameters of the expression overload are of a scalar\n  // type, and the return type of the expression overload is also a scalar type.\n  // If the number of test cases is not a multiple of the vector width, then the\n  // last scalar value is repeated to fill the last vector value.\n  vectorize?: number;\n};\n\n/**\n * @returns the size and alignment in bytes of the type 'ty', taking into\n * consideration storage alignment constraints and abstract numerics, which are\n * encoded as a struct of holding two u32s.\n */\nfunction sizeAndAlignmentOf(ty: Type, source: InputSource): { size: number; alignment: number } {\n  if (ty instanceof ScalarType) {\n    if (ty.kind === 'abstract-float' || ty.kind === 'abstract-int') {\n      // AbstractFloats and AbstractInts are passed out of the shader via structs of\n      // 2x u32s and unpacking containers as arrays\n      return { size: 8, alignment: 8 };\n    }\n    return { size: ty.size, alignment: ty.alignment };\n  }\n\n  if (ty instanceof VectorType) {\n    const out = sizeAndAlignmentOf(ty.elementType, source);\n    const n = ty.width === 3 ? 4 : ty.width;\n    out.size *= n;\n    out.alignment *= n;\n    return out;\n  }\n\n  if (ty instanceof MatrixType) {\n    const out = sizeAndAlignmentOf(ty.elementType, source);\n    const n = ty.rows === 3 ? 4 : ty.rows;\n    out.size *= n * ty.cols;\n    out.alignment *= n;\n    return out;\n  }\n\n  if (ty instanceof ArrayType) {\n    const out = sizeAndAlignmentOf(ty.elementType, source);\n    if (source === 'uniform') {\n      out.alignment = align(out.alignment, 16);\n    }\n    out.size *= ty.count;\n    return out;\n  }\n\n  unreachable(`unhandled type: ${ty}`);\n}\n\n/**\n * @returns the stride in bytes of the type 'ty', taking into consideration abstract numerics,\n * which are encoded as a struct of 2 x u32.\n */\nfunction strideOf(ty: Type, source: InputSource): number {\n  const sizeAndAlign = sizeAndAlignmentOf(ty, source);\n  return align(sizeAndAlign.size, sizeAndAlign.alignment);\n}\n\n/**\n * Calls 'callback' with the layout information of each structure member with the types 'members'.\n * @returns the byte size, stride and alignment of the structure.\n */\nfunction structLayout(\n  members: Type[],\n  source: InputSource,\n  callback?: (m: {\n    index: number;\n    type: Type;\n    size: number;\n    alignment: number;\n    offset: number;\n  }) => void\n): { size: number; stride: number; alignment: number } {\n  let offset = 0;\n  let alignment = 1;\n  for (let i = 0; i < members.length; i++) {\n    const member = members[i];\n    const sizeAndAlign = sizeAndAlignmentOf(member, source);\n    offset = align(offset, sizeAndAlign.alignment);\n    if (callback) {\n      callback({\n        index: i,\n        type: member,\n        size: sizeAndAlign.size,\n        alignment: sizeAndAlign.alignment,\n        offset,\n      });\n    }\n    offset += sizeAndAlign.size;\n    alignment = Math.max(alignment, sizeAndAlign.alignment);\n  }\n\n  if (source === 'uniform') {\n    alignment = align(alignment, 16);\n  }\n\n  const size = offset;\n  const stride = align(size, alignment);\n  return { size, stride, alignment };\n}\n\n/** @returns the stride in bytes between two consecutive structures with the given members */\nfunction structStride(members: Type[], source: InputSource): number {\n  return structLayout(members, source).stride;\n}\n\n/** @returns the WGSL to describe the structure members in 'members' */\nfunction wgslMembers(members: Type[], source: InputSource, memberName: (i: number) => string) {\n  const lines: string[] = [];\n  const layout = structLayout(members, source, m => {\n    lines.push(`  @size(${m.size}) ${memberName(lines.length)} : ${m.type},`);\n  });\n  const padding = layout.stride - layout.size;\n  if (padding > 0) {\n    // Pad with a 'f16' if the padding requires an odd multiple of 2 bytes.\n    // This is required as 'i32' has an alignment and size of 4 bytes.\n    const ty = (padding & 2) !== 0 ? 'f16' : 'i32';\n    lines.push(`  @size(${padding}) padding : ${ty},`);\n  }\n  return lines.join('\\n');\n}\n\n// Helper for returning the WGSL storage type for the given Type.\nfunction storageType(ty: Type): Type {\n  if (ty instanceof ScalarType) {\n    assert(ty.kind !== 'f64', `No storage type defined for 'f64' values`);\n    assert(ty.kind !== 'abstract-int', `Custom handling is implemented for 'abstract-int' values`);\n    assert(\n      ty.kind !== 'abstract-float',\n      `Custom handling is implemented for 'abstract-float' values`\n    );\n    if (ty.kind === 'bool') {\n      return Type.u32;\n    }\n  }\n  if (ty instanceof VectorType) {\n    return Type.vec(ty.width, storageType(ty.elementType) as ScalarType);\n  }\n  return ty;\n}\n\n// Helper for converting a value of the type 'ty' from the storage type.\nfunction fromStorage(ty: Type, expr: string): string {\n  if (ty instanceof ScalarType) {\n    assert(ty.kind !== 'abstract-int', `'abstract-int' values should not be in input storage`);\n    assert(ty.kind !== 'abstract-float', `'abstract-float' values should not be in input storage`);\n    assert(ty.kind !== 'f64', `'No storage type defined for 'f64' values`);\n    if (ty.kind === 'bool') {\n      return `${expr} != 0u`;\n    }\n  }\n  if (ty instanceof VectorType) {\n    assert(\n      ty.elementType.kind !== 'abstract-int',\n      `'abstract-int' values cannot appear in input storage`\n    );\n    assert(\n      ty.elementType.kind !== 'abstract-float',\n      `'abstract-float' values cannot appear in input storage`\n    );\n    assert(ty.elementType.kind !== 'f64', `'No storage type defined for 'f64' values`);\n    if (ty.elementType.kind === 'bool') {\n      return `${expr} != vec${ty.width}<u32>(0u)`;\n    }\n  }\n  return expr;\n}\n\n// Helper for converting a value of the type 'ty' to the storage type.\nfunction toStorage(ty: Type, expr: string): string {\n  if (ty instanceof ScalarType) {\n    assert(\n      ty.kind !== 'abstract-int',\n      `'abstract-int' values have custom code for writing to storage`\n    );\n    assert(\n      ty.kind !== 'abstract-float',\n      `'abstract-float' values have custom code for writing to storage`\n    );\n    assert(ty.kind !== 'f64', `No storage type defined for 'f64' values`);\n    if (ty.kind === 'bool') {\n      return `select(0u, 1u, ${expr})`;\n    }\n  }\n  if (ty instanceof VectorType) {\n    assert(\n      ty.elementType.kind !== 'abstract-int',\n      `'abstract-int' values have custom code for writing to storage`\n    );\n    assert(\n      ty.elementType.kind !== 'abstract-float',\n      `'abstract-float' values have custom code for writing to storage`\n    );\n    assert(ty.elementType.kind !== 'f64', `'No storage type defined for 'f64' values`);\n    if (ty.elementType.kind === 'bool') {\n      return `select(vec${ty.width}<u32>(0u), vec${ty.width}<u32>(1u), ${expr})`;\n    }\n  }\n  return expr;\n}\n\n// A Pipeline is a map of WGSL shader source to a built pipeline\ntype PipelineCache = Map<String, GPUComputePipeline>;\n\n/**\n * Searches for an entry with the given key, adding and returning the result of calling\n * `create` if the entry was not found.\n * @param map the cache map\n * @param key the entry's key\n * @param create the function used to construct a value, if not found in the cache\n * @returns the value, either fetched from the cache, or newly built.\n */\nfunction getOrCreate<K, V>(map: Map<K, V>, key: K, create: () => V) {\n  const existing = map.get(key);\n  if (existing !== undefined) {\n    return existing;\n  }\n  const value = create();\n  map.set(key, value);\n  return value;\n}\n\n/**\n * Runs the list of expression tests, possibly splitting the tests into multiple\n * dispatches to keep the input data within the buffer binding limits.\n * run() will pack the scalar test cases into smaller set of vectorized tests\n * if `cfg.vectorize` is defined.\n * @param t the GPUTest\n * @param shaderBuilder the shader builder function\n * @param parameterTypes the list of expression parameter types\n * @param resultType the return type for the expression overload\n * @param cfg test configuration values\n * @param cases list of test cases\n * @param batch_size override the calculated casesPerBatch.\n */\nexport async function run(\n  t: GPUTest,\n  shaderBuilder: ShaderBuilder,\n  parameterTypes: Array<Type>,\n  resultType: Type,\n  cfg: Config = { inputSource: 'storage_r' },\n  cases: Case[],\n  batch_size?: number\n) {\n  // If the 'vectorize' config option was provided, pack the cases into vectors.\n  if (cfg.vectorize !== undefined) {\n    const packed = packScalarsToVector(parameterTypes, resultType, cases, cfg.vectorize);\n    cases = packed.cases;\n    parameterTypes = packed.parameterTypes;\n    resultType = packed.resultType;\n  }\n\n  // The size of the input buffer may exceed the maximum buffer binding size,\n  // so chunk the tests up into batches that fit into the limits. We also split\n  // the cases into smaller batches to help with shader compilation performance.\n  const casesPerBatch = (function () {\n    if (batch_size) {\n      return batch_size;\n    }\n    switch (cfg.inputSource) {\n      case 'const':\n        // Some drivers are slow to optimize shaders with many constant values,\n        // or statements. 32 is an empirically picked number of cases that works\n        // well for most drivers.\n        return 32;\n      case 'uniform':\n        // Some drivers are slow to build pipelines with large uniform buffers.\n        // 2k appears to be a sweet-spot when benchmarking.\n        return Math.floor(\n          Math.min(1024 * 2, t.device.limits.maxUniformBufferBindingSize) /\n            structStride(parameterTypes, cfg.inputSource)\n        );\n      case 'storage_r':\n      case 'storage_rw':\n        return Math.floor(\n          t.device.limits.maxStorageBufferBindingSize /\n            structStride(parameterTypes, cfg.inputSource)\n        );\n    }\n  })();\n\n  // A cache to hold built shader pipelines.\n  const pipelineCache = new Map<String, GPUComputePipeline>();\n\n  // Submit all the cases in batches, rate-limiting to ensure not too many\n  // batches are in flight simultaneously.\n  const maxBatchesInFlight = 5;\n  let batchesInFlight = 0;\n  let resolvePromiseBlockingBatch: (() => void) | undefined = undefined;\n  const batchFinishedCallback = () => {\n    batchesInFlight -= 1;\n    // If there is any batch waiting on a previous batch to finish,\n    // unblock it now, and clear the resolve callback.\n    if (resolvePromiseBlockingBatch) {\n      resolvePromiseBlockingBatch();\n      resolvePromiseBlockingBatch = undefined;\n    }\n  };\n\n  const processBatch = async (batchCases: Case[]) => {\n    const checkBatch = await submitBatch(\n      t,\n      shaderBuilder,\n      parameterTypes,\n      resultType,\n      batchCases,\n      cfg.inputSource,\n      pipelineCache\n    );\n    checkBatch();\n    void t.queue.onSubmittedWorkDone().finally(batchFinishedCallback);\n  };\n\n  const pendingBatches = [];\n\n  for (let i = 0; i < cases.length; i += casesPerBatch) {\n    const batchCases = cases.slice(i, Math.min(i + casesPerBatch, cases.length));\n\n    if (batchesInFlight > maxBatchesInFlight) {\n      await new Promise<void>(resolve => {\n        // There should only be one batch waiting at a time.\n        assert(resolvePromiseBlockingBatch === undefined);\n        resolvePromiseBlockingBatch = resolve;\n      });\n    }\n    batchesInFlight += 1;\n\n    pendingBatches.push(processBatch(batchCases));\n  }\n\n  await Promise.all(pendingBatches);\n}\n\n/**\n * Submits the list of expression tests. The input data must fit within the\n * buffer binding limits of the given inputSource.\n * @param t the GPUTest\n * @param shaderBuilder the shader builder function\n * @param parameterTypes the list of expression parameter types\n * @param resultType the return type for the expression overload\n * @param cases list of test cases that fit within the binding limits of the device\n * @param inputSource the source of the input values\n * @param pipelineCache the cache of compute pipelines, shared between batches\n * @returns a function that checks the results are as expected\n */\nasync function submitBatch(\n  t: GPUTest,\n  shaderBuilder: ShaderBuilder,\n  parameterTypes: Array<Type>,\n  resultType: Type,\n  cases: Case[],\n  inputSource: InputSource,\n  pipelineCache: PipelineCache\n): Promise<() => void> {\n  // Construct a buffer to hold the results of the expression tests\n  const outputStride = structStride([resultType], 'storage_rw');\n  const outputBufferSize = align(cases.length * outputStride, 4);\n  const outputBuffer = t.device.createBuffer({\n    size: outputBufferSize,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST | GPUBufferUsage.STORAGE,\n  });\n\n  const [pipeline, group] = await buildPipeline(\n    t,\n    shaderBuilder,\n    parameterTypes,\n    resultType,\n    cases,\n    inputSource,\n    outputBuffer,\n    pipelineCache\n  );\n\n  const encoder = t.device.createCommandEncoder();\n  const pass = encoder.beginComputePass();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, group);\n  pass.dispatchWorkgroups(1);\n  pass.end();\n\n  // Heartbeat to ensure CTS runners know we're alive.\n  globalTestConfig.testHeartbeatCallback();\n\n  t.queue.submit([encoder.finish()]);\n\n  // Return a function that can check the results of the shader\n  return () => {\n    const checkExpectation = (outputData: Uint8Array) => {\n      // Read the outputs from the output buffer\n      const outputs = new Array<Value>(cases.length);\n      for (let i = 0; i < cases.length; i++) {\n        outputs[i] = resultType.read(outputData, i * outputStride);\n      }\n\n      // The list of expectation failures\n      const errs: string[] = [];\n\n      // For each case...\n      for (let caseIdx = 0; caseIdx < cases.length; caseIdx++) {\n        const c = cases[caseIdx];\n        const got = outputs[caseIdx];\n        const cmp = toComparator(c.expected).compare(got);\n        if (!cmp.matched) {\n          errs.push(`(${c.input instanceof Array ? c.input.join(', ') : c.input})\n    returned: ${cmp.got}\n    expected: ${cmp.expected}`);\n        }\n      }\n\n      return errs.length > 0 ? new Error(errs.join('\\n\\n')) : undefined;\n    };\n\n    // Heartbeat to ensure CTS runners know we're alive.\n    globalTestConfig.testHeartbeatCallback();\n\n    t.expectGPUBufferValuesPassCheck(outputBuffer, checkExpectation, {\n      type: Uint8Array,\n      typedLength: outputBufferSize,\n    });\n  };\n}\n\n/**\n * map is a helper for returning a new array with each element of `v`\n * transformed with `fn`.\n * If `v` is not an array, then `fn` is called with (v, 0).\n */\nfunction map<T, U>(v: T | readonly T[], fn: (value: T, index?: number) => U): U[] {\n  if (v instanceof Array) {\n    return v.map(fn);\n  }\n  return [fn(v, 0)];\n}\n\n/**\n * ShaderBuilder is a function used to construct the WGSL shader used by an\n * expression test.\n * @param parameterTypes the list of expression parameter types\n * @param resultType the return type for the expression overload\n * @param cases list of test cases that fit within the binding limits of the device\n * @param inputSource the source of the input values\n */\nexport type ShaderBuilder = (\n  parameterTypes: Array<Type>,\n  resultType: Type,\n  cases: Case[],\n  inputSource: InputSource\n) => string;\n\n/**\n * Helper that returns the WGSL to declare the output storage buffer for a shader\n */\nfunction wgslOutputs(resultType: Type, count: number): string {\n  let output_struct = undefined;\n  if (\n    scalarTypeOf(resultType).kind !== 'abstract-float' &&\n    scalarTypeOf(resultType).kind !== 'abstract-int'\n  ) {\n    output_struct = `\nstruct Output {\n  @size(${strideOf(resultType, 'storage_rw')}) value : ${storageType(resultType)}\n};`;\n  } else {\n    if (resultType instanceof ScalarType) {\n      output_struct = `struct AF {\n  low: u32,\n  high: u32,\n};\n\nstruct Output {\n  @size(${strideOf(resultType, 'storage_rw')}) value: AF,\n};`;\n    }\n    if (resultType instanceof VectorType) {\n      const dim = resultType.width;\n      output_struct = `struct AF {\n  low: u32,\n  high: u32,\n};\n\nstruct Output {\n  @size(${strideOf(resultType, 'storage_rw')}) value: array<AF, ${dim}>,\n};`;\n    }\n\n    if (resultType instanceof MatrixType) {\n      const cols = resultType.cols;\n      const rows = resultType.rows === 2 ? 2 : 4; // 3 element rows have a padding element\n      output_struct = `struct AF {\n  low: u32,\n  high: u32,\n};\n\nstruct Output {\n   @size(${strideOf(resultType, 'storage_rw')}) value: array<array<AF, ${rows}>, ${cols}>,\n};`;\n    }\n\n    assert(output_struct !== undefined, `No implementation for result type '${resultType}'`);\n  }\n\n  return `${output_struct}\n@group(0) @binding(0) var<storage, read_write> outputs : array<Output, ${count}>;\n`;\n}\n\n/**\n * Helper that returns the WGSL to declare the values array for a shader\n */\nfunction wgslValuesArray(\n  parameterTypes: Array<Type>,\n  resultType: Type,\n  cases: Case[],\n  expressionBuilder: ExpressionBuilder\n): string {\n  return `\nconst values = array(\n  ${cases.map(c => expressionBuilder(map(c.input, v => v.wgsl()))).join(',\\n  ')}\n);`;\n}\n\n/**\n * Helper that returns the WGSL 'var' declaration for the given input source\n */\nfunction wgslInputVar(inputSource: InputSource, count: number) {\n  switch (inputSource) {\n    case 'storage_r':\n      return `@group(0) @binding(1) var<storage, read> inputs : array<Input, ${count}>;`;\n    case 'storage_rw':\n      return `@group(0) @binding(1) var<storage, read_write> inputs : array<Input, ${count}>;`;\n    case 'uniform':\n      return `@group(0) @binding(1) var<uniform> inputs : array<Input, ${count}>;`;\n  }\n  throw new Error(`InputSource ${inputSource} does not use an input var`);\n}\n\n/**\n * Helper that returns the WGSL header before any other declaration, currently include f16\n * enable directive if necessary.\n */\nfunction wgslHeader(parameterTypes: Array<Type>, resultType: Type) {\n  const usedF16 =\n    scalarTypeOf(resultType).kind === 'f16' ||\n    parameterTypes.some((ty: Type) => scalarTypeOf(ty).kind === 'f16');\n  const header = usedF16 ? 'enable f16;\\n' : '';\n  return header;\n}\n\n/**\n * ExpressionBuilder returns the WGSL used to evaluate an expression with the\n * given input values.\n */\nexport type ExpressionBuilder = (values: ReadonlyArray<string>) => string;\n\n/**\n * Returns a ShaderBuilder that builds a basic expression test shader.\n * @param expressionBuilder the expression builder\n */\nfunction basicExpressionShaderBody(\n  expressionBuilder: ExpressionBuilder,\n  parameterTypes: Array<Type>,\n  resultType: Type,\n  cases: Case[],\n  inputSource: InputSource\n): string {\n  assert(\n    scalarTypeOf(resultType).kind !== 'abstract-int',\n    `abstractIntShaderBuilder should be used when result type is 'abstract-int'`\n  );\n  assert(\n    scalarTypeOf(resultType).kind !== 'abstract-float',\n    `abstractFloatShaderBuilder should be used when result type is 'abstract-float'`\n  );\n  if (inputSource === 'const') {\n    //////////////////////////////////////////////////////////////////////////\n    // Constant eval\n    //////////////////////////////////////////////////////////////////////////\n    let body = '';\n    if (parameterTypes.some(ty => isAbstractType(elementTypeOf(ty)))) {\n      // Directly assign the expression to the output, to avoid an\n      // intermediate store, which will concretize the value early\n      body = cases\n        .map(\n          (c, i) =>\n            `  outputs[${i}].value = ${toStorage(\n              resultType,\n              expressionBuilder(map(c.input, v => v.wgsl()))\n            )};`\n        )\n        .join('\\n  ');\n    } else if (globalTestConfig.unrollConstEvalLoops) {\n      body = cases\n        .map((_, i) => {\n          const value = `values[${i}]`;\n          return `  outputs[${i}].value = ${toStorage(resultType, value)};`;\n        })\n        .join('\\n  ');\n    } else {\n      body = `\n  for (var i = 0u; i < ${cases.length}; i++) {\n    outputs[i].value = ${toStorage(resultType, `values[i]`)};\n  }`;\n    }\n\n    // If params are abstract, we will assign them directly to the storage array, so skip the values array.\n    let valuesArray = '';\n    if (!parameterTypes.some(isAbstractType)) {\n      valuesArray = wgslValuesArray(parameterTypes, resultType, cases, expressionBuilder);\n    }\n\n    return `\n${wgslOutputs(resultType, cases.length)}\n\n${valuesArray}\n\n@compute @workgroup_size(1)\nfn main() {\n${body}\n}`;\n  } else {\n    //////////////////////////////////////////////////////////////////////////\n    // Runtime eval\n    //////////////////////////////////////////////////////////////////////////\n\n    // returns the WGSL expression to load the ith parameter of the given type from the input buffer\n    const paramExpr = (ty: Type, i: number) => fromStorage(ty, `inputs[i].param${i}`);\n\n    // resolves to the expression that calls the builtin\n    const expr = toStorage(resultType, expressionBuilder(parameterTypes.map(paramExpr)));\n\n    return `\nstruct Input {\n${wgslMembers(parameterTypes.map(storageType), inputSource, i => `param${i}`)}\n}\n\n${wgslOutputs(resultType, cases.length)}\n\n${wgslInputVar(inputSource, cases.length)}\n\n@compute @workgroup_size(1)\nfn main() {\n  for (var i = 0; i < ${cases.length}; i++) {\n    outputs[i].value = ${expr};\n  }\n}\n`;\n  }\n}\n\n/**\n * Returns a ShaderBuilder that builds a basic expression test shader.\n * @param expressionBuilder the expression builder\n */\nexport function basicExpressionBuilder(expressionBuilder: ExpressionBuilder): ShaderBuilder {\n  return (\n    parameterTypes: Array<Type>,\n    resultType: Type,\n    cases: Case[],\n    inputSource: InputSource\n  ) => {\n    return `\\\n${wgslHeader(parameterTypes, resultType)}\n\n${basicExpressionShaderBody(expressionBuilder, parameterTypes, resultType, cases, inputSource)}`;\n  };\n}\n\n/**\n * Returns a ShaderBuilder that builds a basic expression test shader with given predeclaration\n * string goes after WGSL header (i.e. enable directives) if any but before anything else.\n * @param expressionBuilder the expression builder\n * @param predeclaration the predeclaration string\n */\nexport function basicExpressionWithPredeclarationBuilder(\n  expressionBuilder: ExpressionBuilder,\n  predeclaration: string\n): ShaderBuilder {\n  return (\n    parameterTypes: Array<Type>,\n    resultType: Type,\n    cases: Case[],\n    inputSource: InputSource\n  ) => {\n    return `\\\n${wgslHeader(parameterTypes, resultType)}\n\n${predeclaration}\n\n${basicExpressionShaderBody(expressionBuilder, parameterTypes, resultType, cases, inputSource)}`;\n  };\n}\n\n/**\n * Returns a ShaderBuilder that builds a compound assignment operator test shader.\n * @param op the compound operator\n */\nexport function compoundAssignmentBuilder(op: string): ShaderBuilder {\n  return (\n    parameterTypes: Array<Type>,\n    resultType: Type,\n    cases: Case[],\n    inputSource: InputSource\n  ) => {\n    //////////////////////////////////////////////////////////////////////////\n    // Input validation\n    //////////////////////////////////////////////////////////////////////////\n    if (parameterTypes.length !== 2) {\n      throw new Error(`compoundBinaryOp() requires exactly two parameters values per case`);\n    }\n    const lhsType = parameterTypes[0];\n    const rhsType = parameterTypes[1];\n    if (!objectEquals(lhsType, resultType)) {\n      throw new Error(\n        `compoundBinaryOp() requires result type (${resultType}) to be equal to the LHS type (${lhsType})`\n      );\n    }\n    if (inputSource === 'const') {\n      //////////////////////////////////////////////////////////////////////////\n      // Constant eval\n      //////////////////////////////////////////////////////////////////////////\n      let body = '';\n      if (globalTestConfig.unrollConstEvalLoops) {\n        body = cases\n          .map((_, i) => {\n            return `\n  var ret_${i} = lhs[${i}];\n  ret_${i} ${op} rhs[${i}];\n  outputs[${i}].value = ${storageType(resultType)}(ret_${i});`;\n          })\n          .join('\\n  ');\n      } else {\n        body = `\n  for (var i = 0u; i < ${cases.length}; i++) {\n    var ret = lhs[i];\n    ret ${op} rhs[i];\n    outputs[i].value = ${storageType(resultType)}(ret);\n  }`;\n      }\n\n      const values = cases.map(c => (c.input as Value[]).map(v => v.wgsl()));\n\n      return `\n${wgslHeader(parameterTypes, resultType)}\n${wgslOutputs(resultType, cases.length)}\n\nconst lhs = array(\n${values.map(c => `${c[0]}`).join(',\\n  ')}\n      );\nconst rhs = array(\n${values.map(c => `${c[1]}`).join(',\\n  ')}\n);\n\n@compute @workgroup_size(1)\nfn main() {\n${body}\n}`;\n    } else {\n      //////////////////////////////////////////////////////////////////////////\n      // Runtime eval\n      //////////////////////////////////////////////////////////////////////////\n      return `\n${wgslHeader(parameterTypes, resultType)}\n${wgslOutputs(resultType, cases.length)}\n\nstruct Input {\n${wgslMembers([lhsType, rhsType].map(storageType), inputSource, i => ['lhs', 'rhs'][i])}\n}\n\n${wgslInputVar(inputSource, cases.length)}\n\n@compute @workgroup_size(1)\nfn main() {\n  for (var i = 0; i < ${cases.length}; i++) {\n    var ret = ${lhsType}(inputs[i].lhs);\n    ret ${op} ${rhsType}(inputs[i].rhs);\n    outputs[i].value = ${storageType(resultType)}(ret);\n  }\n}\n`;\n    }\n  };\n}\n\n/**\n * @returns a string that extracts the value of an AbstractFloat into an output\n *          destination\n * @param expr expression for an AbstractFloat value, if working with vectors or\n *             matrices, this string needs to include indexing into the\n *             container.\n * @param case_idx index in the case output array to assign the result\n * @param accessor string representing how access to the AF that needs to be\n *                 operated on.\n *                 For scalars this should be left as ''.\n *                 For vectors this will be an indexing operation,\n *                 i.e. '[i]'\n *                 For matrices this will double indexing operation,\n *                 i.e. '[c][r]'\n */\nfunction abstractFloatSnippet(expr: string, case_idx: number, accessor: string = ''): string {\n  // AbstractFloats are f64s under the hood. WebGPU does not support\n  // putting f64s in buffers, so the result needs to be split up into u32s\n  // and rebuilt in the test framework.\n  //\n  // Since there is no 64-bit data type that can be used as an element for a\n  // vector or a matrix in WGSL, the testing framework needs to pass the u32s\n  // via a struct with two u32s, and deconstruct vectors and matrices into\n  // arrays.\n  //\n  // This is complicated by the fact that user defined functions cannot\n  // take/return AbstractFloats, and AbstractFloats cannot be stored in\n  // variables, so the code cannot just inject a simple utility function\n  // at the top of the shader, instead this snippet needs to be inlined\n  // everywhere the test needs to return an AbstractFloat.\n  //\n  // select is used below, since ifs are not available during constant\n  // eval. This has the side effect of short-circuiting doesn't occur, so\n  // both sides of the select have to evaluate and be valid.\n  //\n  // This snippet implements FTZ for subnormals to bypass the need for\n  // complex subnormal specific logic.\n  //\n  // Expressions resulting in subnormals can still be reasonably tested,\n  // since this snippet will return 0 with the correct sign, which is\n  // always in the acceptance interval for a subnormal result, since an\n  // implementation may FTZ.\n  //\n  // Documentation for the snippet working with scalar results is included here\n  // in this code block, since shader length affects compilation time\n  // significantly on some backends. The code for vectors and matrices basically\n  // the same thing, with extra indexing operations.\n  //\n  // Snippet with documentation:\n  //   const kExponentBias = 1022;\n  //\n  //   // Detect if the value is zero or subnormal, so that FTZ behaviour\n  //   // can occur\n  //   const subnormal_or_zero : bool = (${expr} <= ${kValue.f64.positive.subnormal.max}) && (${expr} >= ${kValue.f64.negative.subnormal.min});\n  //\n  //   // MSB of the upper u32 is 1 if the value is negative, otherwise 0\n  //   // Extract the sign bit early, so that abs() can be used with\n  //   // frexp() so negative cases do not need to be handled\n  //   const sign_bit : u32 = select(0, 0x80000000, ${expr} < 0);\n  //\n  //   // Use frexp() to obtain the exponent and fractional parts, and\n  //   // then perform FTZ if needed\n  //   const f = frexp(abs(${expr}));\n  //   const f_fract = select(f.fract, 0, subnormal_or_zero);\n  //   const f_exp = select(f.exp, -kExponentBias, subnormal_or_zero);\n  //\n  //   // Adjust for the exponent bias and shift for storing in bits\n  //   // [20..31] of the upper u32\n  //   const exponent_bits : u32 = (f_exp + kExponentBias) << 20;\n  //\n  //   // Extract the portion of the mantissa that appears in upper u32 as\n  //   // a float for later use\n  //   const high_mantissa = ldexp(f_fract, 21);\n  //\n  //   // Extract the portion of the mantissa that appears in upper u32 as\n  //   // as bits. This value is masked, because normals will explicitly\n  //   // have the implicit leading 1 that should not be in the final\n  //   // result.\n  //   const high_mantissa_bits : u32 = u32(ldexp(f_fract, 21)) & 0x000fffff;\n  //\n  //   // Calculate the mantissa stored in the lower u32 as a float\n  //   const low_mantissa = f_fract - ldexp(floor(high_mantissa), -21);\n  //\n  //   // Convert the lower u32 mantissa to bits\n  //   const low_mantissa_bits = u32(ldexp(low_mantissa, 53));\n  //\n  //   outputs[${i}].value.high = sign_bit | exponent_bits | high_mantissa_bits;\n  //   outputs[${i}].value.low = low_mantissa_bits;\n  // prettier-ignore\n  return `  {\n    const kExponentBias = 1022;\n    const subnormal_or_zero : bool = (${expr}${accessor} <= ${kValue.f64.positive.subnormal.max}) && (${expr}${accessor} >= ${kValue.f64.negative.subnormal.min});\n    const sign_bit : u32 = select(0, 0x80000000, ${expr}${accessor} < 0);\n    const f = frexp(abs(${expr}${accessor}));\n    const f_fract = select(f.fract, 0, subnormal_or_zero);\n    const f_exp = select(f.exp, -kExponentBias, subnormal_or_zero);\n    const exponent_bits : u32 = (f_exp + kExponentBias) << 20;\n    const high_mantissa = ldexp(f_fract, 21);\n    const high_mantissa_bits : u32 = u32(ldexp(f_fract, 21)) & 0x000fffff;\n    const low_mantissa = f_fract - ldexp(floor(high_mantissa), -21);\n    const low_mantissa_bits = u32(ldexp(low_mantissa, 53));\n    outputs[${case_idx}].value${accessor}.high = sign_bit | exponent_bits | high_mantissa_bits;\n    outputs[${case_idx}].value${accessor}.low = low_mantissa_bits;\n  }`;\n}\n\n/** @returns a string for a specific case that has a AbstractFloat result */\nfunction abstractFloatCaseBody(expr: string, resultType: Type, i: number): string {\n  if (resultType instanceof ScalarType) {\n    return abstractFloatSnippet(expr, i);\n  }\n\n  if (resultType instanceof VectorType) {\n    return [...Array(resultType.width).keys()]\n      .map(idx => abstractFloatSnippet(expr, i, `[${idx}]`))\n      .join('  \\n');\n  }\n\n  if (resultType instanceof MatrixType) {\n    const cols = resultType.cols;\n    const rows = resultType.rows;\n    const results: String[] = [...Array(cols * rows)];\n\n    for (let c = 0; c < cols; c++) {\n      for (let r = 0; r < rows; r++) {\n        results[c * rows + r] = abstractFloatSnippet(expr, i, `[${c}][${r}]`);\n      }\n    }\n\n    return results.join('  \\n');\n  }\n\n  unreachable(`Results of type '${resultType}' not yet implemented`);\n}\n\n/**\n * @returns a ShaderBuilder that builds a test shader hands AbstractFloat results.\n * @param expressionBuilder an expression builder that will return AbstractFloats\n */\nexport function abstractFloatShaderBuilder(expressionBuilder: ExpressionBuilder): ShaderBuilder {\n  return (\n    parameterTypes: Array<Type>,\n    resultType: Type,\n    cases: Case[],\n    inputSource: InputSource\n  ) => {\n    assert(inputSource === 'const', `'abstract-float' results are only defined for const-eval`);\n    assert(\n      scalarTypeOf(resultType).kind === 'abstract-float',\n      `Expected resultType of 'abstract-float', received '${scalarTypeOf(resultType).kind}' instead`\n    );\n\n    const body = cases\n      .map((c, i) => {\n        const expr = `${expressionBuilder(map(c.input, v => v.wgsl()))}`;\n        return abstractFloatCaseBody(expr, resultType, i);\n      })\n      .join('\\n  ');\n\n    return `\n${wgslHeader(parameterTypes, resultType)}\n\n${wgslOutputs(resultType, cases.length)}\n\n@compute @workgroup_size(1)\nfn main() {\n${body}\n}`;\n  };\n}\n\n/**\n * @returns a string that extracts the value of an AbstractInt into an output\n *          destination\n * @param expr expression for an AbstractInt value, if working with vectors,\n *             this string needs to include indexing into the container.\n * @param case_idx index in the case output array to assign the result\n * @param accessor string representing how access to the AbstractInt that needs\n *                 to be operated on.\n *                 For scalars this should be left as ''.\n *                 For vectors this will be an indexing operation,\n *                 i.e. '[i]'\n */\nfunction abstractIntSnippet(expr: string, case_idx: number, accessor: string = ''): string {\n  // AbstractInts are i64s under the hood. WebGPU does not support\n  // putting i64s in buffers, or any 64-bit simple types, so the result needs to\n  // be split up into u32 bitfields\n  //\n  // Since there is no 64-bit data type that can be used as an element for a\n  // vector or a matrix in WGSL, the testing framework needs to pass the u32s\n  // via a struct with two u32s, and deconstruct vectors into arrays.\n  //\n  // This is complicated by the fact that user defined functions cannot\n  // take/return AbstractInts, and AbstractInts cannot be stored in\n  // variables, so the code cannot just inject a simple utility function\n  // at the top of the shader, instead this snippet needs to be inlined\n  // everywhere the test needs to return an AbstractInt.\n  return `  {\n    outputs[${case_idx}].value${accessor}.high = bitcast<u32>(i32(${expr}${accessor} >> 32)) & 0xFFFFFFFF;\n    const low_sign = (${expr}${accessor} & (1 << 31));\n    outputs[${case_idx}].value${accessor}.low = bitcast<u32>((${expr}${accessor} & 0x7FFFFFFF)) | low_sign;\n  }`;\n}\n\n/** @returns a string for a specific case that has a AbstractInt result */\nfunction abstractIntCaseBody(expr: string, resultType: Type, i: number): string {\n  if (resultType instanceof ScalarType) {\n    return abstractIntSnippet(expr, i);\n  }\n\n  if (resultType instanceof VectorType) {\n    return [...Array(resultType.width).keys()]\n      .map(idx => abstractIntSnippet(expr, i, `[${idx}]`))\n      .join('  \\n');\n  }\n\n  unreachable(`Results of type '${resultType}' not yet implemented`);\n}\n\n/**\n * @returns a ShaderBuilder that builds a test shader hands AbstractInt results.\n * @param expressionBuilder an expression builder that will return AbstractInts\n */\nexport function abstractIntShaderBuilder(expressionBuilder: ExpressionBuilder): ShaderBuilder {\n  return (\n    parameterTypes: Array<Type>,\n    resultType: Type,\n    cases: Case[],\n    inputSource: InputSource\n  ) => {\n    assert(inputSource === 'const', `'abstract-int' results are only defined for const-eval`);\n    assert(\n      scalarTypeOf(resultType).kind === 'abstract-int',\n      `Expected resultType of 'abstract-int', received '${scalarTypeOf(resultType).kind}' instead`\n    );\n\n    const body = cases\n      .map((c, i) => {\n        const expr = `${expressionBuilder(map(c.input, v => v.wgsl()))}`;\n        return abstractIntCaseBody(expr, resultType, i);\n      })\n      .join('\\n  ');\n\n    return `\n${wgslHeader(parameterTypes, resultType)}\n\n${wgslOutputs(resultType, cases.length)}\n\n@compute @workgroup_size(1)\nfn main() {\n${body}\n}`;\n  };\n}\n\n/**\n * Constructs and returns a GPUComputePipeline and GPUBindGroup for running a\n * batch of test cases. If a pre-created pipeline can be found in\n * `pipelineCache`, then this may be returned instead of creating a new\n * pipeline.\n * @param t the GPUTest\n * @param shaderBuilder the shader builder\n * @param parameterTypes the list of expression parameter types\n * @param resultType the return type for the expression overload\n * @param cases list of test cases that fit within the binding limits of the device\n * @param inputSource the source of the input values\n * @param outputBuffer the buffer that will hold the output values of the tests\n * @param pipelineCache the cache of compute pipelines, shared between batches\n */\nasync function buildPipeline(\n  t: GPUTest,\n  shaderBuilder: ShaderBuilder,\n  parameterTypes: Array<Type>,\n  resultType: Type,\n  cases: Case[],\n  inputSource: InputSource,\n  outputBuffer: GPUBuffer,\n  pipelineCache: PipelineCache\n): Promise<[GPUComputePipeline, GPUBindGroup]> {\n  cases.forEach(c => {\n    const inputTypes = c.input instanceof Array ? c.input.map(i => i.type) : [c.input.type];\n    if (!objectEquals(inputTypes, parameterTypes)) {\n      const input_str = `[${inputTypes.join(',')}]`;\n      const param_str = `[${parameterTypes.join(',')}]`;\n      throw new Error(\n        `case input types ${input_str} do not match provided runner parameter types ${param_str}`\n      );\n    }\n  });\n\n  const source = shaderBuilder(parameterTypes, resultType, cases, inputSource);\n\n  switch (inputSource) {\n    case 'const': {\n      // build the shader module\n      const module = t.device.createShaderModule({ code: source });\n\n      // build the pipeline\n      const pipeline = await t.device.createComputePipelineAsync({\n        layout: 'auto',\n        compute: { module, entryPoint: 'main' },\n      });\n\n      // build the bind group\n      const group = t.device.createBindGroup({\n        layout: pipeline.getBindGroupLayout(0),\n        entries: [{ binding: 0, resource: { buffer: outputBuffer } }],\n      });\n\n      return [pipeline, group];\n    }\n\n    case 'uniform':\n    case 'storage_r':\n    case 'storage_rw': {\n      // Input values come from a uniform or storage buffer\n\n      // size in bytes of the input buffer\n      const caseStride = structStride(parameterTypes, inputSource);\n      const inputSize = align(cases.length * caseStride, 4);\n\n      // Holds all the parameter values for all cases\n      const inputData = new Uint8Array(inputSize);\n\n      // Pack all the input parameter values into the inputData buffer\n      for (let caseIdx = 0; caseIdx < cases.length; caseIdx++) {\n        const offset = caseIdx * caseStride;\n        structLayout(parameterTypes, inputSource, m => {\n          const arg = cases[caseIdx].input;\n          if (arg instanceof Array) {\n            arg[m.index].copyTo(inputData, offset + m.offset);\n          } else {\n            arg.copyTo(inputData, offset + m.offset);\n          }\n        });\n      }\n\n      // build the compute pipeline, if the shader hasn't been compiled already.\n      const pipeline = getOrCreate(pipelineCache, source, () => {\n        // build the shader module\n        const module = t.device.createShaderModule({ code: source });\n\n        // build the pipeline\n        return t.device.createComputePipeline({\n          layout: 'auto',\n          compute: { module, entryPoint: 'main' },\n        });\n      });\n\n      // build the input buffer\n      const inputBuffer = t.makeBufferWithContents(\n        inputData,\n        GPUBufferUsage.COPY_SRC |\n          (inputSource === 'uniform' ? GPUBufferUsage.UNIFORM : GPUBufferUsage.STORAGE)\n      );\n\n      // build the bind group\n      const group = t.device.createBindGroup({\n        layout: pipeline.getBindGroupLayout(0),\n        entries: [\n          { binding: 0, resource: { buffer: outputBuffer } },\n          { binding: 1, resource: { buffer: inputBuffer } },\n        ],\n      });\n\n      return [pipeline, group];\n    }\n  }\n}\n\n/**\n * Packs a list of scalar test cases into a smaller list of vector cases.\n * Requires that all parameters of the expression overload are of a scalar type,\n * and the return type of the expression overload is also a scalar type.\n * If `cases.length` is not a multiple of `vectorWidth`, then the last scalar\n * test case value is repeated to fill the vector value.\n */\nfunction packScalarsToVector(\n  parameterTypes: Array<Type>,\n  resultType: Type,\n  cases: Case[],\n  vectorWidth: number\n): { cases: Case[]; parameterTypes: Array<Type>; resultType: Type } {\n  // Validate that the parameters and return type are all vectorizable\n  for (let i = 0; i < parameterTypes.length; i++) {\n    const ty = parameterTypes[i];\n    if (!(ty instanceof ScalarType)) {\n      throw new Error(\n        `packScalarsToVector() can only be used on scalar parameter types, but the ${i}'th parameter type is a ${ty}'`\n      );\n    }\n  }\n  if (!(resultType instanceof ScalarType)) {\n    throw new Error(\n      `packScalarsToVector() can only be used with a scalar return type, but the return type is a ${resultType}'`\n    );\n  }\n\n  const packedCases: Array<Case> = [];\n  const packedParameterTypes = parameterTypes.map(p => Type.vec(vectorWidth, p as ScalarType));\n  const packedResultType = Type.vec(vectorWidth, resultType);\n\n  const clampCaseIdx = (idx: number) => Math.min(idx, cases.length - 1);\n\n  let caseIdx = 0;\n  while (caseIdx < cases.length) {\n    // Construct the vectorized inputs from the scalar cases\n    const packedInputs = new Array<VectorValue>(parameterTypes.length);\n    for (let paramIdx = 0; paramIdx < parameterTypes.length; paramIdx++) {\n      const inputElements = new Array<ScalarValue>(vectorWidth);\n      for (let i = 0; i < vectorWidth; i++) {\n        const input = cases[clampCaseIdx(caseIdx + i)].input;\n        inputElements[i] = (input instanceof Array ? input[paramIdx] : input) as ScalarValue;\n      }\n      packedInputs[paramIdx] = new VectorValue(inputElements);\n    }\n\n    // Gather the comparators for the packed cases\n    const cmp_impls = new Array<ComparatorImpl>(vectorWidth);\n    for (let i = 0; i < vectorWidth; i++) {\n      cmp_impls[i] = toComparator(cases[clampCaseIdx(caseIdx + i)].expected).compare;\n    }\n    const comparators: Comparator = {\n      compare: (got: Value) => {\n        let matched = true;\n        const gElements = new Array<string>(vectorWidth);\n        const eElements = new Array<string>(vectorWidth);\n        for (let i = 0; i < vectorWidth; i++) {\n          const d = cmp_impls[i]((got as VectorValue).elements[i]);\n          matched = matched && d.matched;\n          gElements[i] = d.got;\n          eElements[i] = d.expected;\n        }\n        return {\n          matched,\n          got: `${packedResultType}(${gElements.join(', ')})`,\n          expected: `${packedResultType}(${eElements.join(', ')})`,\n        };\n      },\n      kind: 'packed',\n    };\n\n    // Append the new packed case\n    packedCases.push({ input: packedInputs, expected: comparators });\n    caseIdx += vectorWidth;\n  }\n\n  return {\n    cases: packedCases,\n    parameterTypes: packedParameterTypes,\n    resultType: packedResultType,\n  };\n}\n"],"mappings":";;GAAA,SAASA,gBAAgB,QAAQ,6CAA6C,CAC9E,SAASC,MAAM,EAAEC,YAAY,EAAEC,WAAW,QAAQ,iCAAiC;;AAGnF,SAASC,MAAM,QAAQ,4BAA4B;AACnD;EACEC,UAAU;;EAEVC,UAAU;EACVC,IAAI;EACJC,UAAU;;EAEVC,WAAW;EACXC,cAAc;EACdC,YAAY;EACZC,SAAS;EACTC,aAAa;AACR,6BAA6B;AACpC,SAASC,KAAK,QAAQ,uBAAuB;;;AAG7C,SAASC,YAAY,QAAQ,kBAAkB;;AAE/C;;;;;AAKkB;;AAElB;AACA,OAAO,MAAMC,eAA8B,GAAG,CAAC,OAAO,EAAE,SAAS,EAAE,WAAW,EAAE,YAAY,CAAC;;AAE7F;AACA,OAAO,MAAMC,oBAAmC,GAAG,CAAC,OAAO,CAAC;;AAE5D;AACA,OAAO,MAAMC,sBAAqC,GAAG,CAAC,SAAS,EAAE,WAAW,EAAE,YAAY,CAAC;;AAE3F;;;;;;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AACA,SAASC,kBAAkBA,CAACC,EAAQ,EAAEC,MAAmB,EAAuC;EAC9F,IAAID,EAAE,YAAYd,UAAU,EAAE;IAC5B,IAAIc,EAAE,CAACE,IAAI,KAAK,gBAAgB,IAAIF,EAAE,CAACE,IAAI,KAAK,cAAc,EAAE;MAC9D;MACA;MACA,OAAO,EAAEC,IAAI,EAAE,CAAC,EAAEC,SAAS,EAAE,CAAC,CAAC,CAAC;IAClC;IACA,OAAO,EAAED,IAAI,EAAEH,EAAE,CAACG,IAAI,EAAEC,SAAS,EAAEJ,EAAE,CAACI,SAAS,CAAC,CAAC;EACnD;;EAEA,IAAIJ,EAAE,YAAYZ,UAAU,EAAE;IAC5B,MAAMiB,GAAG,GAAGN,kBAAkB,CAACC,EAAE,CAACM,WAAW,EAAEL,MAAM,CAAC;IACtD,MAAMM,CAAC,GAAGP,EAAE,CAACQ,KAAK,KAAK,CAAC,GAAG,CAAC,GAAGR,EAAE,CAACQ,KAAK;IACvCH,GAAG,CAACF,IAAI,IAAII,CAAC;IACbF,GAAG,CAACD,SAAS,IAAIG,CAAC;IAClB,OAAOF,GAAG;EACZ;;EAEA,IAAIL,EAAE,YAAYf,UAAU,EAAE;IAC5B,MAAMoB,GAAG,GAAGN,kBAAkB,CAACC,EAAE,CAACM,WAAW,EAAEL,MAAM,CAAC;IACtD,MAAMM,CAAC,GAAGP,EAAE,CAACS,IAAI,KAAK,CAAC,GAAG,CAAC,GAAGT,EAAE,CAACS,IAAI;IACrCJ,GAAG,CAACF,IAAI,IAAII,CAAC,GAAGP,EAAE,CAACU,IAAI;IACvBL,GAAG,CAACD,SAAS,IAAIG,CAAC;IAClB,OAAOF,GAAG;EACZ;;EAEA,IAAIL,EAAE,YAAYR,SAAS,EAAE;IAC3B,MAAMa,GAAG,GAAGN,kBAAkB,CAACC,EAAE,CAACM,WAAW,EAAEL,MAAM,CAAC;IACtD,IAAIA,MAAM,KAAK,SAAS,EAAE;MACxBI,GAAG,CAACD,SAAS,GAAGV,KAAK,CAACW,GAAG,CAACD,SAAS,EAAE,EAAE,CAAC;IAC1C;IACAC,GAAG,CAACF,IAAI,IAAIH,EAAE,CAACW,KAAK;IACpB,OAAON,GAAG;EACZ;;EAEAtB,WAAW,CAAE,mBAAkBiB,EAAG,EAAC,CAAC;AACtC;;AAEA;AACA;AACA;AACA;AACA,SAASY,QAAQA,CAACZ,EAAQ,EAAEC,MAAmB,EAAU;EACvD,MAAMY,YAAY,GAAGd,kBAAkB,CAACC,EAAE,EAAEC,MAAM,CAAC;EACnD,OAAOP,KAAK,CAACmB,YAAY,CAACV,IAAI,EAAEU,YAAY,CAACT,SAAS,CAAC;AACzD;;AAEA;AACA;AACA;AACA;AACA,SAASU,YAAYA;AACnBC,OAAe;AACfd,MAAmB;AACnBe,QAMU;;;;;;;AAC2C;EACrD,IAAIC,MAAM,GAAG,CAAC;EACd,IAAIb,SAAS,GAAG,CAAC;EACjB,KAAK,IAAIc,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,OAAO,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;IACvC,MAAME,MAAM,GAAGL,OAAO,CAACG,CAAC,CAAC;IACzB,MAAML,YAAY,GAAGd,kBAAkB,CAACqB,MAAM,EAAEnB,MAAM,CAAC;IACvDgB,MAAM,GAAGvB,KAAK,CAACuB,MAAM,EAAEJ,YAAY,CAACT,SAAS,CAAC;IAC9C,IAAIY,QAAQ,EAAE;MACZA,QAAQ,CAAC;QACPK,KAAK,EAAEH,CAAC;QACRI,IAAI,EAAEF,MAAM;QACZjB,IAAI,EAAEU,YAAY,CAACV,IAAI;QACvBC,SAAS,EAAES,YAAY,CAACT,SAAS;QACjCa;MACF,CAAC,CAAC;IACJ;IACAA,MAAM,IAAIJ,YAAY,CAACV,IAAI;IAC3BC,SAAS,GAAGmB,IAAI,CAACC,GAAG,CAACpB,SAAS,EAAES,YAAY,CAACT,SAAS,CAAC;EACzD;;EAEA,IAAIH,MAAM,KAAK,SAAS,EAAE;IACxBG,SAAS,GAAGV,KAAK,CAACU,SAAS,EAAE,EAAE,CAAC;EAClC;;EAEA,MAAMD,IAAI,GAAGc,MAAM;EACnB,MAAMQ,MAAM,GAAG/B,KAAK,CAACS,IAAI,EAAEC,SAAS,CAAC;EACrC,OAAO,EAAED,IAAI,EAAEsB,MAAM,EAAErB,SAAS,CAAC,CAAC;AACpC;;AAEA;AACA,SAASsB,YAAYA,CAACX,OAAe,EAAEd,MAAmB,EAAU;EAClE,OAAOa,YAAY,CAACC,OAAO,EAAEd,MAAM,CAAC,CAACwB,MAAM;AAC7C;;AAEA;AACA,SAASE,WAAWA,CAACZ,OAAe,EAAEd,MAAmB,EAAE2B,UAAiC,EAAE;EAC5F,MAAMC,KAAe,GAAG,EAAE;EAC1B,MAAMC,MAAM,GAAGhB,YAAY,CAACC,OAAO,EAAEd,MAAM,EAAE,CAAA8B,CAAC,KAAI;IAChDF,KAAK,CAACG,IAAI,CAAE,WAAUD,CAAC,CAAC5B,IAAK,KAAIyB,UAAU,CAACC,KAAK,CAACV,MAAM,CAAE,MAAKY,CAAC,CAACT,IAAK,GAAE,CAAC;EAC3E,CAAC,CAAC;EACF,MAAMW,OAAO,GAAGH,MAAM,CAACL,MAAM,GAAGK,MAAM,CAAC3B,IAAI;EAC3C,IAAI8B,OAAO,GAAG,CAAC,EAAE;IACf;IACA;IACA,MAAMjC,EAAE,GAAG,CAACiC,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,KAAK,GAAG,KAAK;IAC9CJ,KAAK,CAACG,IAAI,CAAE,WAAUC,OAAQ,eAAcjC,EAAG,GAAE,CAAC;EACpD;EACA,OAAO6B,KAAK,CAACK,IAAI,CAAC,IAAI,CAAC;AACzB;;AAEA;AACA,SAASC,WAAWA,CAACnC,EAAQ,EAAQ;EACnC,IAAIA,EAAE,YAAYd,UAAU,EAAE;IAC5BL,MAAM,CAACmB,EAAE,CAACE,IAAI,KAAK,KAAK,EAAG,0CAAyC,CAAC;IACrErB,MAAM,CAACmB,EAAE,CAACE,IAAI,KAAK,cAAc,EAAG,0DAAyD,CAAC;IAC9FrB,MAAM;MACJmB,EAAE,CAACE,IAAI,KAAK,gBAAgB;MAC3B;IACH,CAAC;IACD,IAAIF,EAAE,CAACE,IAAI,KAAK,MAAM,EAAE;MACtB,OAAOf,IAAI,CAACiD,GAAG;IACjB;EACF;EACA,IAAIpC,EAAE,YAAYZ,UAAU,EAAE;IAC5B,OAAOD,IAAI,CAACkD,GAAG,CAACrC,EAAE,CAACQ,KAAK,EAAE2B,WAAW,CAACnC,EAAE,CAACM,WAAW,CAAe,CAAC;EACtE;EACA,OAAON,EAAE;AACX;;AAEA;AACA,SAASsC,WAAWA,CAACtC,EAAQ,EAAEuC,IAAY,EAAU;EACnD,IAAIvC,EAAE,YAAYd,UAAU,EAAE;IAC5BL,MAAM,CAACmB,EAAE,CAACE,IAAI,KAAK,cAAc,EAAG,sDAAqD,CAAC;IAC1FrB,MAAM,CAACmB,EAAE,CAACE,IAAI,KAAK,gBAAgB,EAAG,wDAAuD,CAAC;IAC9FrB,MAAM,CAACmB,EAAE,CAACE,IAAI,KAAK,KAAK,EAAG,2CAA0C,CAAC;IACtE,IAAIF,EAAE,CAACE,IAAI,KAAK,MAAM,EAAE;MACtB,OAAQ,GAAEqC,IAAK,QAAO;IACxB;EACF;EACA,IAAIvC,EAAE,YAAYZ,UAAU,EAAE;IAC5BP,MAAM;MACJmB,EAAE,CAACM,WAAW,CAACJ,IAAI,KAAK,cAAc;MACrC;IACH,CAAC;IACDrB,MAAM;MACJmB,EAAE,CAACM,WAAW,CAACJ,IAAI,KAAK,gBAAgB;MACvC;IACH,CAAC;IACDrB,MAAM,CAACmB,EAAE,CAACM,WAAW,CAACJ,IAAI,KAAK,KAAK,EAAG,2CAA0C,CAAC;IAClF,IAAIF,EAAE,CAACM,WAAW,CAACJ,IAAI,KAAK,MAAM,EAAE;MAClC,OAAQ,GAAEqC,IAAK,UAASvC,EAAE,CAACQ,KAAM,WAAU;IAC7C;EACF;EACA,OAAO+B,IAAI;AACb;;AAEA;AACA,SAASC,SAASA,CAACxC,EAAQ,EAAEuC,IAAY,EAAU;EACjD,IAAIvC,EAAE,YAAYd,UAAU,EAAE;IAC5BL,MAAM;MACJmB,EAAE,CAACE,IAAI,KAAK,cAAc;MACzB;IACH,CAAC;IACDrB,MAAM;MACJmB,EAAE,CAACE,IAAI,KAAK,gBAAgB;MAC3B;IACH,CAAC;IACDrB,MAAM,CAACmB,EAAE,CAACE,IAAI,KAAK,KAAK,EAAG,0CAAyC,CAAC;IACrE,IAAIF,EAAE,CAACE,IAAI,KAAK,MAAM,EAAE;MACtB,OAAQ,kBAAiBqC,IAAK,GAAE;IAClC;EACF;EACA,IAAIvC,EAAE,YAAYZ,UAAU,EAAE;IAC5BP,MAAM;MACJmB,EAAE,CAACM,WAAW,CAACJ,IAAI,KAAK,cAAc;MACrC;IACH,CAAC;IACDrB,MAAM;MACJmB,EAAE,CAACM,WAAW,CAACJ,IAAI,KAAK,gBAAgB;MACvC;IACH,CAAC;IACDrB,MAAM,CAACmB,EAAE,CAACM,WAAW,CAACJ,IAAI,KAAK,KAAK,EAAG,2CAA0C,CAAC;IAClF,IAAIF,EAAE,CAACM,WAAW,CAACJ,IAAI,KAAK,MAAM,EAAE;MAClC,OAAQ,aAAYF,EAAE,CAACQ,KAAM,iBAAgBR,EAAE,CAACQ,KAAM,cAAa+B,IAAK,GAAE;IAC5E;EACF;EACA,OAAOA,IAAI;AACb;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,WAAWA,CAAOC,GAAc,EAAEC,GAAM,EAAEC,MAAe,EAAE;EAClE,MAAMC,QAAQ,GAAGH,GAAG,CAACI,GAAG,CAACH,GAAG,CAAC;EAC7B,IAAIE,QAAQ,KAAKE,SAAS,EAAE;IAC1B,OAAOF,QAAQ;EACjB;EACA,MAAMG,KAAK,GAAGJ,MAAM,CAAC,CAAC;EACtBF,GAAG,CAACO,GAAG,CAACN,GAAG,EAAEK,KAAK,CAAC;EACnB,OAAOA,KAAK;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeE,GAAGA;AACvBC,CAAU;AACVC,aAA4B;AAC5BC,cAA2B;AAC3BC,UAAgB;AAChBC,GAAW,GAAG,EAAEC,WAAW,EAAE,WAAW,CAAC,CAAC;AAC1CC,KAAa;AACbC,UAAmB;AACnB;EACA;EACA,IAAIH,GAAG,CAACI,SAAS,KAAKZ,SAAS,EAAE;IAC/B,MAAMa,MAAM,GAAGC,mBAAmB,CAACR,cAAc,EAAEC,UAAU,EAAEG,KAAK,EAAEF,GAAG,CAACI,SAAS,CAAC;IACpFF,KAAK,GAAGG,MAAM,CAACH,KAAK;IACpBJ,cAAc,GAAGO,MAAM,CAACP,cAAc;IACtCC,UAAU,GAAGM,MAAM,CAACN,UAAU;EAChC;;EAEA;EACA;EACA;EACA,MAAMQ,aAAa,GAAI,YAAY;IACjC,IAAIJ,UAAU,EAAE;MACd,OAAOA,UAAU;IACnB;IACA,QAAQH,GAAG,CAACC,WAAW;MACrB,KAAK,OAAO;QACV;QACA;QACA;QACA,OAAO,EAAE;MACX,KAAK,SAAS;QACZ;QACA;QACA,OAAOjC,IAAI,CAACwC,KAAK;UACfxC,IAAI,CAACyC,GAAG,CAAC,IAAI,GAAG,CAAC,EAAEb,CAAC,CAACc,MAAM,CAACC,MAAM,CAACC,2BAA2B,CAAC;UAC7DzC,YAAY,CAAC2B,cAAc,EAAEE,GAAG,CAACC,WAAW;QAChD,CAAC;MACH,KAAK,WAAW;MAChB,KAAK,YAAY;QACf,OAAOjC,IAAI,CAACwC,KAAK;UACfZ,CAAC,CAACc,MAAM,CAACC,MAAM,CAACE,2BAA2B;UACzC1C,YAAY,CAAC2B,cAAc,EAAEE,GAAG,CAACC,WAAW;QAChD,CAAC;IACL;EACF,CAAC,CAAE,CAAC;;EAEJ;EACA,MAAMa,aAAa,GAAG,IAAIC,GAAG,CAA6B,CAAC;;EAE3D;EACA;EACA,MAAMC,kBAAkB,GAAG,CAAC;EAC5B,IAAIC,eAAe,GAAG,CAAC;EACvB,IAAIC,2BAAqD,GAAG1B,SAAS;EACrE,MAAM2B,qBAAqB,GAAGA,CAAA,KAAM;IAClCF,eAAe,IAAI,CAAC;IACpB;IACA;IACA,IAAIC,2BAA2B,EAAE;MAC/BA,2BAA2B,CAAC,CAAC;MAC7BA,2BAA2B,GAAG1B,SAAS;IACzC;EACF,CAAC;;EAED,MAAM4B,YAAY,GAAG,MAAAA,CAAOC,UAAkB,KAAK;IACjD,MAAMC,UAAU,GAAG,MAAMC,WAAW;MAClC3B,CAAC;MACDC,aAAa;MACbC,cAAc;MACdC,UAAU;MACVsB,UAAU;MACVrB,GAAG,CAACC,WAAW;MACfa;IACF,CAAC;IACDQ,UAAU,CAAC,CAAC;IACZ,KAAK1B,CAAC,CAAC4B,KAAK,CAACC,mBAAmB,CAAC,CAAC,CAACC,OAAO,CAACP,qBAAqB,CAAC;EACnE,CAAC;;EAED,MAAMQ,cAAc,GAAG,EAAE;;EAEzB,KAAK,IAAIhE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGuC,KAAK,CAACtC,MAAM,EAAED,CAAC,IAAI4C,aAAa,EAAE;IACpD,MAAMc,UAAU,GAAGnB,KAAK,CAAC0B,KAAK,CAACjE,CAAC,EAAEK,IAAI,CAACyC,GAAG,CAAC9C,CAAC,GAAG4C,aAAa,EAAEL,KAAK,CAACtC,MAAM,CAAC,CAAC;;IAE5E,IAAIqD,eAAe,GAAGD,kBAAkB,EAAE;MACxC,MAAM,IAAIa,OAAO,CAAO,CAAAC,OAAO,KAAI;QACjC;QACAxG,MAAM,CAAC4F,2BAA2B,KAAK1B,SAAS,CAAC;QACjD0B,2BAA2B,GAAGY,OAAO;MACvC,CAAC,CAAC;IACJ;IACAb,eAAe,IAAI,CAAC;;IAEpBU,cAAc,CAAClD,IAAI,CAAC2C,YAAY,CAACC,UAAU,CAAC,CAAC;EAC/C;;EAEA,MAAMQ,OAAO,CAACE,GAAG,CAACJ,cAAc,CAAC;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeJ,WAAWA;AACxB3B,CAAU;AACVC,aAA4B;AAC5BC,cAA2B;AAC3BC,UAAgB;AAChBG,KAAa;AACbD,WAAwB;AACxBa,aAA4B;AACP;EACrB;EACA,MAAMkB,YAAY,GAAG7D,YAAY,CAAC,CAAC4B,UAAU,CAAC,EAAE,YAAY,CAAC;EAC7D,MAAMkC,gBAAgB,GAAG9F,KAAK,CAAC+D,KAAK,CAACtC,MAAM,GAAGoE,YAAY,EAAE,CAAC,CAAC;EAC9D,MAAME,YAAY,GAAGtC,CAAC,CAACc,MAAM,CAACyB,YAAY,CAAC;IACzCvF,IAAI,EAAEqF,gBAAgB;IACtBG,KAAK,EAAEC,cAAc,CAACC,QAAQ,GAAGD,cAAc,CAACE,QAAQ,GAAGF,cAAc,CAACG;EAC5E,CAAC,CAAC;;EAEF,MAAM,CAACC,QAAQ,EAAEC,KAAK,CAAC,GAAG,MAAMC,aAAa;IAC3C/C,CAAC;IACDC,aAAa;IACbC,cAAc;IACdC,UAAU;IACVG,KAAK;IACLD,WAAW;IACXiC,YAAY;IACZpB;EACF,CAAC;;EAED,MAAM8B,OAAO,GAAGhD,CAAC,CAACc,MAAM,CAACmC,oBAAoB,CAAC,CAAC;EAC/C,MAAMC,IAAI,GAAGF,OAAO,CAACG,gBAAgB,CAAC,CAAC;EACvCD,IAAI,CAACE,WAAW,CAACP,QAAQ,CAAC;EAC1BK,IAAI,CAACG,YAAY,CAAC,CAAC,EAAEP,KAAK,CAAC;EAC3BI,IAAI,CAACI,kBAAkB,CAAC,CAAC,CAAC;EAC1BJ,IAAI,CAACK,GAAG,CAAC,CAAC;;EAEV;EACA9H,gBAAgB,CAAC+H,qBAAqB,CAAC,CAAC;;EAExCxD,CAAC,CAAC4B,KAAK,CAAC6B,MAAM,CAAC,CAACT,OAAO,CAACU,MAAM,CAAC,CAAC,CAAC,CAAC;;EAElC;EACA,OAAO,MAAM;IACX,MAAMC,gBAAgB,GAAGA,CAACC,UAAsB,KAAK;MACnD;MACA,MAAMC,OAAO,GAAG,IAAIC,KAAK,CAAQxD,KAAK,CAACtC,MAAM,CAAC;MAC9C,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGuC,KAAK,CAACtC,MAAM,EAAED,CAAC,EAAE,EAAE;QACrC8F,OAAO,CAAC9F,CAAC,CAAC,GAAGoC,UAAU,CAAC4D,IAAI,CAACH,UAAU,EAAE7F,CAAC,GAAGqE,YAAY,CAAC;MAC5D;;MAEA;MACA,MAAM4B,IAAc,GAAG,EAAE;;MAEzB;MACA,KAAK,IAAIC,OAAO,GAAG,CAAC,EAAEA,OAAO,GAAG3D,KAAK,CAACtC,MAAM,EAAEiG,OAAO,EAAE,EAAE;QACvD,MAAMC,CAAC,GAAG5D,KAAK,CAAC2D,OAAO,CAAC;QACxB,MAAME,GAAG,GAAGN,OAAO,CAACI,OAAO,CAAC;QAC5B,MAAMG,GAAG,GAAG5H,YAAY,CAAC0H,CAAC,CAACG,QAAQ,CAAC,CAACC,OAAO,CAACH,GAAG,CAAC;QACjD,IAAI,CAACC,GAAG,CAACG,OAAO,EAAE;UAChBP,IAAI,CAACnF,IAAI,CAAE,IAAGqF,CAAC,CAACM,KAAK,YAAYV,KAAK,GAAGI,CAAC,CAACM,KAAK,CAACzF,IAAI,CAAC,IAAI,CAAC,GAAGmF,CAAC,CAACM,KAAM;AAChF,gBAAgBJ,GAAG,CAACD,GAAI;AACxB,gBAAgBC,GAAG,CAACC,QAAS,EAAC,CAAC;QACvB;MACF;;MAEA,OAAOL,IAAI,CAAChG,MAAM,GAAG,CAAC,GAAG,IAAIyG,KAAK,CAACT,IAAI,CAACjF,IAAI,CAAC,MAAM,CAAC,CAAC,GAAGa,SAAS;IACnE,CAAC;;IAED;IACAnE,gBAAgB,CAAC+H,qBAAqB,CAAC,CAAC;;IAExCxD,CAAC,CAAC0E,8BAA8B,CAACpC,YAAY,EAAEqB,gBAAgB,EAAE;MAC/DxF,IAAI,EAAEwG,UAAU;MAChBC,WAAW,EAAEvC;IACf,CAAC,CAAC;EACJ,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS9C,GAAGA,CAAOsF,CAAmB,EAAEC,EAAmC,EAAO;EAChF,IAAID,CAAC,YAAYf,KAAK,EAAE;IACtB,OAAOe,CAAC,CAACtF,GAAG,CAACuF,EAAE,CAAC;EAClB;EACA,OAAO,CAACA,EAAE,CAACD,CAAC,EAAE,CAAC,CAAC,CAAC;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAQA;AACA;AACA;AACA,SAASE,WAAWA,CAAC5E,UAAgB,EAAE3C,KAAa,EAAU;EAC5D,IAAIwH,aAAa,GAAGpF,SAAS;EAC7B;EACExD,YAAY,CAAC+D,UAAU,CAAC,CAACpD,IAAI,KAAK,gBAAgB;EAClDX,YAAY,CAAC+D,UAAU,CAAC,CAACpD,IAAI,KAAK,cAAc;EAChD;IACAiI,aAAa,GAAI;AACrB;AACA,UAAUvH,QAAQ,CAAC0C,UAAU,EAAE,YAAY,CAAE,aAAYnB,WAAW,CAACmB,UAAU,CAAE;AACjF,GAAG;EACD,CAAC,MAAM;IACL,IAAIA,UAAU,YAAYpE,UAAU,EAAE;MACpCiJ,aAAa,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA,UAAUvH,QAAQ,CAAC0C,UAAU,EAAE,YAAY,CAAE;AAC7C,GAAG;IACC;IACA,IAAIA,UAAU,YAAYlE,UAAU,EAAE;MACpC,MAAMgJ,GAAG,GAAG9E,UAAU,CAAC9C,KAAK;MAC5B2H,aAAa,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA,UAAUvH,QAAQ,CAAC0C,UAAU,EAAE,YAAY,CAAE,sBAAqB8E,GAAI;AACtE,GAAG;IACC;;IAEA,IAAI9E,UAAU,YAAYrE,UAAU,EAAE;MACpC,MAAMyB,IAAI,GAAG4C,UAAU,CAAC5C,IAAI;MAC5B,MAAMD,IAAI,GAAG6C,UAAU,CAAC7C,IAAI,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;MAC5C0H,aAAa,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA,WAAWvH,QAAQ,CAAC0C,UAAU,EAAE,YAAY,CAAE,4BAA2B7C,IAAK,MAAKC,IAAK;AACxF,GAAG;IACC;;IAEA7B,MAAM,CAACsJ,aAAa,KAAKpF,SAAS,EAAG,sCAAqCO,UAAW,GAAE,CAAC;EAC1F;;EAEA,OAAQ,GAAE6E,aAAc;AAC1B,yEAAyExH,KAAM;AAC/E,CAAC;AACD;;AAEA;AACA;AACA;AACA,SAAS0H,eAAeA;AACtBhF,cAA2B;AAC3BC,UAAgB;AAChBG,KAAa;AACb6E,iBAAoC;AAC5B;EACR,OAAQ;AACV;AACA,IAAI7E,KAAK,CAACf,GAAG,CAAC,CAAA2E,CAAC,KAAIiB,iBAAiB,CAAC5F,GAAG,CAAC2E,CAAC,CAACM,KAAK,EAAE,CAAAK,CAAC,KAAIA,CAAC,CAACO,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAACrG,IAAI,CAAC,OAAO,CAAE;AACjF,GAAG;AACH;;AAEA;AACA;AACA;AACA,SAASsG,YAAYA,CAAChF,WAAwB,EAAE7C,KAAa,EAAE;EAC7D,QAAQ6C,WAAW;IACjB,KAAK,WAAW;MACd,OAAQ,kEAAiE7C,KAAM,IAAG;IACpF,KAAK,YAAY;MACf,OAAQ,wEAAuEA,KAAM,IAAG;IAC1F,KAAK,SAAS;MACZ,OAAQ,4DAA2DA,KAAM,IAAG;EAChF;EACA,MAAM,IAAIiH,KAAK,CAAE,eAAcpE,WAAY,4BAA2B,CAAC;AACzE;;AAEA;AACA;AACA;AACA;AACA,SAASiF,UAAUA,CAACpF,cAA2B,EAAEC,UAAgB,EAAE;EACjE,MAAMoF,OAAO;EACXnJ,YAAY,CAAC+D,UAAU,CAAC,CAACpD,IAAI,KAAK,KAAK;EACvCmD,cAAc,CAACsF,IAAI,CAAC,CAAC3I,EAAQ,KAAKT,YAAY,CAACS,EAAE,CAAC,CAACE,IAAI,KAAK,KAAK,CAAC;EACpE,MAAM0I,MAAM,GAAGF,OAAO,GAAG,eAAe,GAAG,EAAE;EAC7C,OAAOE,MAAM;AACf;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,SAASC,yBAAyBA;AAChCP,iBAAoC;AACpCjF,cAA2B;AAC3BC,UAAgB;AAChBG,KAAa;AACbD,WAAwB;AAChB;EACR3E,MAAM;IACJU,YAAY,CAAC+D,UAAU,CAAC,CAACpD,IAAI,KAAK,cAAc;IAC/C;EACH,CAAC;EACDrB,MAAM;IACJU,YAAY,CAAC+D,UAAU,CAAC,CAACpD,IAAI,KAAK,gBAAgB;IACjD;EACH,CAAC;EACD,IAAIsD,WAAW,KAAK,OAAO,EAAE;IAC3B;IACA;IACA;IACA,IAAIsF,IAAI,GAAG,EAAE;IACb,IAAIzF,cAAc,CAACsF,IAAI,CAAC,CAAA3I,EAAE,KAAIV,cAAc,CAACG,aAAa,CAACO,EAAE,CAAC,CAAC,CAAC,EAAE;MAChE;MACA;MACA8I,IAAI,GAAGrF,KAAK;MACTf,GAAG;QACF,CAAC2E,CAAC,EAAEnG,CAAC;QACF,aAAYA,CAAE,aAAYsB,SAAS;UAClCc,UAAU;UACVgF,iBAAiB,CAAC5F,GAAG,CAAC2E,CAAC,CAACM,KAAK,EAAE,CAAAK,CAAC,KAAIA,CAAC,CAACO,IAAI,CAAC,CAAC,CAAC;QAC/C,CAAE;MACN,CAAC;MACArG,IAAI,CAAC,MAAM,CAAC;IACjB,CAAC,MAAM,IAAItD,gBAAgB,CAACmK,oBAAoB,EAAE;MAChDD,IAAI,GAAGrF,KAAK;MACTf,GAAG,CAAC,CAACsG,CAAC,EAAE9H,CAAC,KAAK;QACb,MAAM8B,KAAK,GAAI,UAAS9B,CAAE,GAAE;QAC5B,OAAQ,aAAYA,CAAE,aAAYsB,SAAS,CAACc,UAAU,EAAEN,KAAK,CAAE,GAAE;MACnE,CAAC,CAAC;MACDd,IAAI,CAAC,MAAM,CAAC;IACjB,CAAC,MAAM;MACL4G,IAAI,GAAI;AACd,yBAAyBrF,KAAK,CAACtC,MAAO;AACtC,yBAAyBqB,SAAS,CAACc,UAAU,EAAG,WAAU,CAAE;AAC5D,IAAI;IACA;;IAEA;IACA,IAAI2F,WAAW,GAAG,EAAE;IACpB,IAAI,CAAC5F,cAAc,CAACsF,IAAI,CAACrJ,cAAc,CAAC,EAAE;MACxC2J,WAAW,GAAGZ,eAAe,CAAChF,cAAc,EAAEC,UAAU,EAAEG,KAAK,EAAE6E,iBAAiB,CAAC;IACrF;;IAEA,OAAQ;AACZ,EAAEJ,WAAW,CAAC5E,UAAU,EAAEG,KAAK,CAACtC,MAAM,CAAE;AACxC;AACA,EAAE8H,WAAY;AACd;AACA;AACA;AACA,EAAEH,IAAK;AACP,EAAE;EACA,CAAC,MAAM;IACL;IACA;IACA;;IAEA;IACA,MAAMI,SAAS,GAAGA,CAAClJ,EAAQ,EAAEkB,CAAS,KAAKoB,WAAW,CAACtC,EAAE,EAAG,kBAAiBkB,CAAE,EAAC,CAAC;;IAEjF;IACA,MAAMqB,IAAI,GAAGC,SAAS,CAACc,UAAU,EAAEgF,iBAAiB,CAACjF,cAAc,CAACX,GAAG,CAACwG,SAAS,CAAC,CAAC,CAAC;;IAEpF,OAAQ;AACZ;AACA,EAAEvH,WAAW,CAAC0B,cAAc,CAACX,GAAG,CAACP,WAAW,CAAC,EAAEqB,WAAW,EAAE,CAAAtC,CAAC,KAAK,QAAOA,CAAE,EAAC,CAAE;AAC9E;AACA;AACA,EAAEgH,WAAW,CAAC5E,UAAU,EAAEG,KAAK,CAACtC,MAAM,CAAE;AACxC;AACA,EAAEqH,YAAY,CAAChF,WAAW,EAAEC,KAAK,CAACtC,MAAM,CAAE;AAC1C;AACA;AACA;AACA,wBAAwBsC,KAAK,CAACtC,MAAO;AACrC,yBAAyBoB,IAAK;AAC9B;AACA;AACA,CAAC;EACC;AACF;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAAS4G,sBAAsBA,CAACb,iBAAoC,EAAiB;EAC1F,OAAO;EACLjF,cAA2B;EAC3BC,UAAgB;EAChBG,KAAa;EACbD,WAAwB;EACrB;IACH,OAAQ;AACZ,EAAEiF,UAAU,CAACpF,cAAc,EAAEC,UAAU,CAAE;AACzC;AACA,EAAEuF,yBAAyB,CAACP,iBAAiB,EAAEjF,cAAc,EAAEC,UAAU,EAAEG,KAAK,EAAED,WAAW,CAAE,EAAC;EAC9F,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAS4F,wCAAwCA;AACtDd,iBAAoC;AACpCe,cAAsB;AACP;EACf,OAAO;EACLhG,cAA2B;EAC3BC,UAAgB;EAChBG,KAAa;EACbD,WAAwB;EACrB;IACH,OAAQ;AACZ,EAAEiF,UAAU,CAACpF,cAAc,EAAEC,UAAU,CAAE;AACzC;AACA,EAAE+F,cAAe;AACjB;AACA,EAAER,yBAAyB,CAACP,iBAAiB,EAAEjF,cAAc,EAAEC,UAAU,EAAEG,KAAK,EAAED,WAAW,CAAE,EAAC;EAC9F,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAAS8F,yBAAyBA,CAACC,EAAU,EAAiB;EACnE,OAAO;EACLlG,cAA2B;EAC3BC,UAAgB;EAChBG,KAAa;EACbD,WAAwB;EACrB;IACH;IACA;IACA;IACA,IAAIH,cAAc,CAAClC,MAAM,KAAK,CAAC,EAAE;MAC/B,MAAM,IAAIyG,KAAK,CAAE,oEAAmE,CAAC;IACvF;IACA,MAAM4B,OAAO,GAAGnG,cAAc,CAAC,CAAC,CAAC;IACjC,MAAMoG,OAAO,GAAGpG,cAAc,CAAC,CAAC,CAAC;IACjC,IAAI,CAACvE,YAAY,CAAC0K,OAAO,EAAElG,UAAU,CAAC,EAAE;MACtC,MAAM,IAAIsE,KAAK;QACZ,4CAA2CtE,UAAW,kCAAiCkG,OAAQ;MAClG,CAAC;IACH;IACA,IAAIhG,WAAW,KAAK,OAAO,EAAE;MAC3B;MACA;MACA;MACA,IAAIsF,IAAI,GAAG,EAAE;MACb,IAAIlK,gBAAgB,CAACmK,oBAAoB,EAAE;QACzCD,IAAI,GAAGrF,KAAK;QACTf,GAAG,CAAC,CAACsG,CAAC,EAAE9H,CAAC,KAAK;UACb,OAAQ;AACpB,YAAYA,CAAE,UAASA,CAAE;AACzB,QAAQA,CAAE,IAAGqI,EAAG,QAAOrI,CAAE;AACzB,YAAYA,CAAE,aAAYiB,WAAW,CAACmB,UAAU,CAAE,QAAOpC,CAAE,IAAG;QACpD,CAAC,CAAC;QACDgB,IAAI,CAAC,MAAM,CAAC;MACjB,CAAC,MAAM;QACL4G,IAAI,GAAI;AAChB,yBAAyBrF,KAAK,CAACtC,MAAO;AACtC;AACA,UAAUoI,EAAG;AACb,yBAAyBpH,WAAW,CAACmB,UAAU,CAAE;AACjD,IAAI;MACE;;MAEA,MAAMoG,MAAM,GAAGjG,KAAK,CAACf,GAAG,CAAC,CAAA2E,CAAC,KAAKA,CAAC,CAACM,KAAK,CAAajF,GAAG,CAAC,CAAAsF,CAAC,KAAIA,CAAC,CAACO,IAAI,CAAC,CAAC,CAAC,CAAC;;MAEtE,OAAQ;AACd,EAAEE,UAAU,CAACpF,cAAc,EAAEC,UAAU,CAAE;AACzC,EAAE4E,WAAW,CAAC5E,UAAU,EAAEG,KAAK,CAACtC,MAAM,CAAE;AACxC;AACA;AACA,EAAEuI,MAAM,CAAChH,GAAG,CAAC,CAAA2E,CAAC,KAAK,GAAEA,CAAC,CAAC,CAAC,CAAE,EAAC,CAAC,CAACnF,IAAI,CAAC,OAAO,CAAE;AAC3C;AACA;AACA,EAAEwH,MAAM,CAAChH,GAAG,CAAC,CAAA2E,CAAC,KAAK,GAAEA,CAAC,CAAC,CAAC,CAAE,EAAC,CAAC,CAACnF,IAAI,CAAC,OAAO,CAAE;AAC3C;AACA;AACA;AACA;AACA,EAAE4G,IAAK;AACP,EAAE;IACE,CAAC,MAAM;MACL;MACA;MACA;MACA,OAAQ;AACd,EAAEL,UAAU,CAACpF,cAAc,EAAEC,UAAU,CAAE;AACzC,EAAE4E,WAAW,CAAC5E,UAAU,EAAEG,KAAK,CAACtC,MAAM,CAAE;AACxC;AACA;AACA,EAAEQ,WAAW,CAAC,CAAC6H,OAAO,EAAEC,OAAO,CAAC,CAAC/G,GAAG,CAACP,WAAW,CAAC,EAAEqB,WAAW,EAAE,CAAAtC,CAAC,KAAI,CAAC,KAAK,EAAE,KAAK,CAAC,CAACA,CAAC,CAAC,CAAE;AACxF;AACA;AACA,EAAEsH,YAAY,CAAChF,WAAW,EAAEC,KAAK,CAACtC,MAAM,CAAE;AAC1C;AACA;AACA;AACA,wBAAwBsC,KAAK,CAACtC,MAAO;AACrC,gBAAgBqI,OAAQ;AACxB,UAAUD,EAAG,IAAGE,OAAQ;AACxB,yBAAyBtH,WAAW,CAACmB,UAAU,CAAE;AACjD;AACA;AACA,CAAC;IACG;EACF,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASqG,oBAAoBA,CAACpH,IAAY,EAAEqH,QAAgB,EAAEC,QAAgB,GAAG,EAAE,EAAU;EAC3F;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,OAAQ;AACV;AACA,wCAAwCtH,IAAK,GAAEsH,QAAS,OAAM7K,MAAM,CAAC8K,GAAG,CAACC,QAAQ,CAACC,SAAS,CAACxI,GAAI,SAAQe,IAAK,GAAEsH,QAAS,OAAM7K,MAAM,CAAC8K,GAAG,CAACG,QAAQ,CAACD,SAAS,CAAChG,G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"}