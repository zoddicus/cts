{"version":3,"file":"textureNumLayers.spec.js","names":["description","makeTestGroup","GPUTest","g","test","specURL","desc","params","u","combine","beginSubcases","unimplemented"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/textureNumLayers.spec.ts"],"sourcesContent":["export const description = `\nExecution tests for the 'textureNumLayers' builtin function\n\nReturns the number of layers (elements) of an array texture.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('sampled')\n  .specURL('https://www.w3.org/TR/WGSL/#texturenumlayers')\n  .desc(\n    `\nT, a sampled type.\n\nfn textureNumLayers(t: texture_2d_array<T>) -> u32\nfn textureNumLayers(t: texture_cube_array<T>) -> u32\n\nParameters\n * t The sampled array texture.\n`\n  )\n  .params(u =>\n    u\n      .combine('texture_type', ['texture_2d_array', 'texture_cube_array'] as const)\n      .beginSubcases()\n      .combine('sampled_type', ['f32-only', 'i32', 'u32'] as const)\n  )\n  .unimplemented();\n\ng.test('arrayed')\n  .specURL('https://www.w3.org/TR/WGSL/#texturenumlayers')\n  .desc(\n    `\nfn textureNumLayers(t: texture_depth_2d_array) -> u32\nfn textureNumLayers(t: texture_depth_cube_array) -> u32\n\nParameters\n * t The depth array texture.\n`\n  )\n  .params(u =>\n    u.combine('texture_type', ['texture_depth_2d_array', 'texture_depth_cube_array'] as const)\n  )\n  .unimplemented();\n\ng.test('storage')\n  .specURL('https://www.w3.org/TR/WGSL/#texturenumlayers')\n  .desc(\n    `\nF: rgba8unorm\n   rgba8snorm\n   rgba8uint\n   rgba8sint\n   rgba16uint\n   rgba16sint\n   rgba16float\n   r32uint\n   r32sint\n   r32float\n   rg32uint\n   rg32sint\n   rg32float\n   rgba32uint\n   rgba32sint\n   rgba32float\nA: read, write, read_write\n\nfn textureNumLayers(t: texture_storage_2d_array<F,A>) -> u32\n\nParameters\n * t The sampled storage array texture.\n`\n  )\n  .params(u =>\n    u\n      .beginSubcases()\n      .combine('texel_format', [\n        'rgba8unorm',\n        'rgba8snorm',\n        'rgba8uint',\n        'rgba8sint',\n        'rgba16uint',\n        'rgba16sint',\n        'rgba16float',\n        'r32uint',\n        'r32sint',\n        'r32float',\n        'rg32uint',\n        'rg32sint',\n        'rg32float',\n        'rgba32uint',\n        'rgba32sint',\n        'rgba32float',\n      ] as const)\n      .combine('access_mode', ['read', 'write', 'read_write'] as const)\n  )\n  .unimplemented();\n"],"mappings":";AAAA;AAAA,GAAA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA,CAAC,CAED,SAASC,aAAa,QAAQ,kDAAkD;AAChF,SAASC,OAAO,QAAQ,4BAA4B;;AAEpD,OAAO,MAAMC,CAAC,GAAGF,aAAa,CAACC,OAAO,CAAC;;AAEvCC,CAAC,CAACC,IAAI,CAAC,SAAS,CAAC;AACdC,OAAO,CAAC,8CAA8C,CAAC;AACvDC,IAAI;AACF;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CACE;;AACAC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,cAAc,EAAE,CAAC,kBAAkB,EAAE,oBAAoB,CAAC,CAAU;AAC5EC,aAAa,EAAE;AACfD,OAAO,CAAC,cAAc,EAAE,CAAC,UAAU,EAAE,KAAK,EAAE,KAAK,CAAC,CAAU,CAChE;;AACAE,aAAa,EAAE;;AAElBR,CAAC,CAACC,IAAI,CAAC,SAAS,CAAC;AACdC,OAAO,CAAC,8CAA8C,CAAC;AACvDC,IAAI;AACF;AACL;AACA;AACA;AACA;AACA;AACA,CAAC,CACE;;AACAC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAO,CAAC,cAAc,EAAE,CAAC,wBAAwB,EAAE,0BAA0B,CAAC,CAAU,CAC3F;;AACAE,aAAa,EAAE;;AAElBR,CAAC,CAACC,IAAI,CAAC,SAAS,CAAC;AACdC,OAAO,CAAC,8CAA8C,CAAC;AACvDC,IAAI;AACF;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CACE;;AACAC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEE,aAAa,EAAE;AACfD,OAAO,CAAC,cAAc,EAAE;AACvB,YAAY;AACZ,YAAY;AACZ,WAAW;AACX,WAAW;AACX,YAAY;AACZ,YAAY;AACZ,aAAa;AACb,SAAS;AACT,SAAS;AACT,UAAU;AACV,UAAU;AACV,UAAU;AACV,WAAW;AACX,YAAY;AACZ,YAAY;AACZ,aAAa,CACd,CAAU;;AACVA,OAAO,CAAC,aAAa,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,YAAY,CAAC,CAAU,CACpE;;AACAE,aAAa,EAAE"}