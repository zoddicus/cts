{"version":3,"file":"textureNumLayers.spec.js","names":["description","makeTestGroup","kTextureFormatInfo","TexelFormats","kSampleTypeInfo","WGSLTextureQueryTest","kNumLayers","getLayerSettingsAndExpected","view_type","isCubeArray","divisor","baseArrayLayer","arrayLayerCount","expected","g","test","specURL","desc","params","u","combine","beginSubcases","beforeAllSubcases","t","skipIf","isCompatibility","view","texture_type","fn","sampled_type","format","texture","createTextureTracked","usage","GPUTextureUsage","TEXTURE_BINDING","size","code","createView","dimension","executeAndExpectResult","combineWithParams","filter","access_mode","color","readWriteStorage","skipIfTextureFormatNotUsableAsStorageTexture","STORAGE_BINDING"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/textureNumLayers.spec.ts"],"sourcesContent":["export const description = `\nExecution tests for the 'textureNumLayers' builtin function\n\nReturns the number of layers (elements) of an array texture.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { kTextureFormatInfo } from '../../../../../format_info.js';\nimport { TexelFormats } from '../../../../types.js';\n\nimport { kSampleTypeInfo, WGSLTextureQueryTest } from './texture_utils.js';\n\nconst kNumLayers = 36;\n\nfunction getLayerSettingsAndExpected({\n  view_type,\n  isCubeArray,\n}: {\n  view_type: 'full' | 'partial';\n  isCubeArray?: boolean;\n}) {\n  const divisor = isCubeArray ? 6 : 1;\n  return view_type === 'partial'\n    ? {\n        baseArrayLayer: 11,\n        arrayLayerCount: 6,\n        expected: [6 / divisor],\n      }\n    : {\n        baseArrayLayer: 0,\n        arrayLayerCount: kNumLayers,\n        expected: [kNumLayers / divisor],\n      };\n}\n\nexport const g = makeTestGroup(WGSLTextureQueryTest);\n\ng.test('sampled')\n  .specURL('https://www.w3.org/TR/WGSL/#texturenumlayers')\n  .desc(\n    `\nT, a sampled type.\n\nfn textureNumLayers(t: texture_2d_array<T>) -> u32\nfn textureNumLayers(t: texture_cube_array<T>) -> u32\n\nParameters\n * t The sampled array texture.\n`\n  )\n  .params(u =>\n    u\n      .combine('texture_type', ['texture_2d_array', 'texture_cube_array'] as const)\n      .beginSubcases()\n      .combine('sampled_type', ['f32', 'i32', 'u32'] as const)\n      .combine('view_type', ['full', 'partial'] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.skipIf(\n      t.isCompatibility && t.params.view === 'partial',\n      'compatibility mode does not support partial layer views'\n    );\n    t.skipIf(\n      t.isCompatibility && t.params.texture_type === 'texture_cube_array',\n      'compatibility mode does not support cube arrays'\n    );\n  })\n  .fn(t => {\n    const { texture_type, sampled_type, view_type } = t.params;\n    const { format } = kSampleTypeInfo[sampled_type];\n\n    const texture = t.createTextureTracked({\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n      size: [1, 1, kNumLayers],\n    });\n\n    const code = `\n@group(0) @binding(0) var t: ${texture_type}<${sampled_type}>;\n@group(0) @binding(1) var<storage, read_write> result: u32;\n@compute @workgroup_size(1) fn cs() {\n  result = textureNumLayers(t);\n}\n    `;\n\n    const { baseArrayLayer, arrayLayerCount, expected } = getLayerSettingsAndExpected({\n      view_type,\n      isCubeArray: texture_type === 'texture_cube_array',\n    });\n    const view = texture.createView({\n      dimension: texture_type === 'texture_2d_array' ? '2d-array' : 'cube-array',\n      baseArrayLayer,\n      arrayLayerCount,\n    });\n\n    t.executeAndExpectResult(code, view, expected);\n  });\n\ng.test('arrayed')\n  .specURL('https://www.w3.org/TR/WGSL/#texturenumlayers')\n  .desc(\n    `\nfn textureNumLayers(t: texture_depth_2d_array) -> u32\nfn textureNumLayers(t: texture_depth_cube_array) -> u32\n\nParameters\n * t The depth array texture.\n`\n  )\n  .params(u =>\n    u\n      .combine('texture_type', ['texture_depth_2d_array', 'texture_depth_cube_array'] as const)\n      .beginSubcases()\n      .combine('view_type', ['full', 'partial'] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.skipIf(\n      t.isCompatibility && t.params.view === 'partial',\n      'compatibility mode does not support partial layer views'\n    );\n    t.skipIf(\n      t.isCompatibility && t.params.texture_type === 'texture_depth_cube_array',\n      'compatibility mode does not support cube arrays'\n    );\n  })\n  .fn(t => {\n    const { texture_type, view_type } = t.params;\n\n    const texture = t.createTextureTracked({\n      format: 'depth32float',\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n      size: [1, 1, kNumLayers],\n    });\n\n    const code = `\n@group(0) @binding(0) var t: ${texture_type};\n@group(0) @binding(1) var<storage, read_write> result: u32;\n@compute @workgroup_size(1) fn cs() {\n  result = textureNumLayers(t);\n}\n    `;\n\n    const { baseArrayLayer, arrayLayerCount, expected } = getLayerSettingsAndExpected({\n      view_type,\n      isCubeArray: texture_type === 'texture_depth_cube_array',\n    });\n    const view = texture.createView({\n      dimension: texture_type === 'texture_depth_2d_array' ? '2d-array' : 'cube-array',\n      baseArrayLayer,\n      arrayLayerCount,\n    });\n\n    t.executeAndExpectResult(code, view, expected);\n  });\n\ng.test('storage')\n  .specURL('https://www.w3.org/TR/WGSL/#texturenumlayers')\n  .desc(\n    `\nF: rgba8unorm\n   rgba8snorm\n   rgba8uint\n   rgba8sint\n   rgba16uint\n   rgba16sint\n   rgba16float\n   r32uint\n   r32sint\n   r32float\n   rg32uint\n   rg32sint\n   rg32float\n   rgba32uint\n   rgba32sint\n   rgba32float\nA: read, write, read_write\n\nfn textureNumLayers(t: texture_storage_2d_array<F,A>) -> u32\n\nParameters\n * t The sampled storage array texture.\n`\n  )\n  .params(u =>\n    u\n      .combineWithParams(TexelFormats)\n      .beginSubcases()\n      .combine('access_mode', ['read', 'write', 'read_write'] as const)\n      .filter(\n        t => t.access_mode !== 'read_write' || kTextureFormatInfo[t.format].color?.readWriteStorage\n      )\n      .combine('view_type', ['full', 'partial'] as const)\n  )\n  .beforeAllSubcases(t => t.skipIfTextureFormatNotUsableAsStorageTexture(t.params.format))\n  .fn(t => {\n    const { format, access_mode, view_type } = t.params;\n\n    const texture = t.createTextureTracked({\n      format,\n      usage: GPUTextureUsage.STORAGE_BINDING,\n      size: [1, 1, kNumLayers],\n    });\n\n    const code = `\n@group(0) @binding(0) var t: texture_storage_2d_array<${format}, ${access_mode}>;\n@group(0) @binding(1) var<storage, read_write> result: u32;\n@compute @workgroup_size(1) fn cs() {\n  result = textureNumLayers(t);\n}\n    `;\n\n    const { baseArrayLayer, arrayLayerCount, expected } = getLayerSettingsAndExpected({\n      view_type,\n    });\n    const view = texture.createView({\n      dimension: '2d-array',\n      baseArrayLayer,\n      arrayLayerCount,\n    });\n\n    t.executeAndExpectResult(code, view, expected);\n  });\n"],"mappings":"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"}