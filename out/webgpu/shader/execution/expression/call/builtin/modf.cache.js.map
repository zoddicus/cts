{"version":3,"file":"modf.cache.js","names":["toVector","FP","makeCaseCache","makeScalarCaseFract","kind","n","fp","quantize","result","modfInterval","fract","input","scalarBuilder","expected","makeScalarCaseWhole","whole","makeVectorCaseFract","v","map","fs","e","makeVectorCaseWhole","ws","scalar_cases","flatMap","portion","makeCase","scalarRange","bind","reduce","a","b","vec_cases","vectorRange","d"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/modf.cache.ts"],"sourcesContent":["import { toVector } from '../../../../../util/conversion.js';\nimport { FP, FPKind } from '../../../../../util/floating_point.js';\nimport { Case } from '../../case.js';\nimport { makeCaseCache } from '../../case_cache.js';\n\n/** @returns a fract Case for a scalar vector input */\nfunction makeScalarCaseFract(kind: FPKind, n: number): Case {\n  const fp = FP[kind];\n  n = fp.quantize(n);\n  const result = fp.modfInterval(n).fract;\n\n  return { input: fp.scalarBuilder(n), expected: result };\n}\n\n/** @returns a whole Case for a scalar vector input */\nfunction makeScalarCaseWhole(kind: FPKind, n: number): Case {\n  const fp = FP[kind];\n  n = fp.quantize(n);\n  const result = fp.modfInterval(n).whole;\n\n  return { input: fp.scalarBuilder(n), expected: result };\n}\n\n/** @returns a fract Case for a given vector input */\nfunction makeVectorCaseFract(kind: FPKind, v: readonly number[]): Case {\n  const fp = FP[kind];\n  v = v.map(fp.quantize);\n  const fs = v.map(e => {\n    return fp.modfInterval(e).fract;\n  });\n\n  return { input: toVector(v, fp.scalarBuilder), expected: fs };\n}\n\n/** @returns a whole Case for a given vector input */\nfunction makeVectorCaseWhole(kind: FPKind, v: readonly number[]): Case {\n  const fp = FP[kind];\n  v = v.map(fp.quantize);\n  const ws = v.map(e => {\n    return fp.modfInterval(e).whole;\n  });\n\n  return { input: toVector(v, fp.scalarBuilder), expected: ws };\n}\n\n// Cases: [f32|f16|abstract]_[fract|whole]\nconst scalar_cases = (['f32', 'f16', 'abstract'] as const)\n  .flatMap(kind =>\n    (['whole', 'fract'] as const).map(portion => ({\n      [`${kind}_${portion}`]: () => {\n        const makeCase = portion === 'whole' ? makeScalarCaseWhole : makeScalarCaseFract;\n        return FP[kind].scalarRange().map(makeCase.bind(null, kind));\n      },\n    }))\n  )\n  .reduce((a, b) => ({ ...a, ...b }), {});\n\n// Cases: [f32|f16|abstract]_vecN_[fract|whole]\nconst vec_cases = (['f32', 'f16', 'abstract'] as const)\n  .flatMap(kind =>\n    ([2, 3, 4] as const).flatMap(n =>\n      (['whole', 'fract'] as const).map(portion => ({\n        [`${kind}_vec${n}_${portion}`]: () => {\n          const makeCase = portion === 'whole' ? makeVectorCaseWhole : makeVectorCaseFract;\n          return FP[kind].vectorRange(n).map(makeCase.bind(null, kind));\n        },\n      }))\n    )\n  )\n  .reduce((a, b) => ({ ...a, ...b }), {});\n\nexport const d = makeCaseCache('modf', {\n  ...scalar_cases,\n  ...vec_cases,\n});\n"],"mappings":"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"}