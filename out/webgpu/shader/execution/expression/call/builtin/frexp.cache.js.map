{"version":3,"file":"frexp.cache.js","names":["skipUndefined","i32","toVector","abstractInt","FP","frexp","makeCaseCache","makeCaseFract","v","trait","fp","toInput","toOutput","Array","n","scalarBuilder","map","quantize","some","e","isSubnormal","input","expected","undefined","fs","fract","makeCaseExp","BigInt","exp","vec_cases","flatMap","dim","portion","vectorRange","reduce","a","b","scalar_cases","scalarRange","d"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/frexp.cache.ts"],"sourcesContent":["import { skipUndefined } from '../../../../../util/compare.js';\nimport {\n  ScalarValue,\n  VectorValue,\n  i32,\n  toVector,\n  abstractInt,\n} from '../../../../../util/conversion.js';\nimport { FP } from '../../../../../util/floating_point.js';\nimport { frexp } from '../../../../../util/math.js';\nimport { Case } from '../../case.js';\nimport { makeCaseCache } from '../../case_cache.js';\n\n/* @returns a fract Case for a given scalar or vector input */\nfunction makeCaseFract(v: number | readonly number[], trait: 'f32' | 'f16' | 'abstract'): Case {\n  const fp = FP[trait];\n  let toInput: (n: readonly number[]) => ScalarValue | VectorValue;\n  let toOutput: (n: readonly number[]) => ScalarValue | VectorValue;\n  if (v instanceof Array) {\n    // Input is vector\n    toInput = (n: readonly number[]) => toVector(n, fp.scalarBuilder);\n    toOutput = (n: readonly number[]) => toVector(n, fp.scalarBuilder);\n  } else {\n    // Input is scalar, also wrap it in an array.\n    v = [v];\n    toInput = (n: readonly number[]) => fp.scalarBuilder(n[0]);\n    toOutput = (n: readonly number[]) => fp.scalarBuilder(n[0]);\n  }\n\n  v = v.map(fp.quantize);\n  if (v.some(e => e !== 0 && fp.isSubnormal(e))) {\n    return { input: toInput(v), expected: skipUndefined(undefined) };\n  }\n\n  const fs = v.map(e => {\n    return frexp(e, trait !== 'abstract' ? trait : 'f64').fract;\n  });\n\n  return { input: toInput(v), expected: toOutput(fs) };\n}\n\n/* @returns an exp Case for a given scalar or vector input */\nfunction makeCaseExp(v: number | readonly number[], trait: 'f32' | 'f16' | 'abstract'): Case {\n  const fp = FP[trait];\n  let toInput: (n: readonly number[]) => ScalarValue | VectorValue;\n  let toOutput: (n: readonly number[]) => ScalarValue | VectorValue;\n  if (v instanceof Array) {\n    // Input is vector\n    toInput = (n: readonly number[]) => toVector(n, fp.scalarBuilder);\n    toOutput = (n: readonly number[]) =>\n      toVector(n, trait !== 'abstract' ? i32 : (n: number) => abstractInt(BigInt(n)));\n  } else {\n    // Input is scalar, also wrap it in an array.\n    v = [v];\n    toInput = (n: readonly number[]) => fp.scalarBuilder(n[0]);\n    toOutput = (n: readonly number[]) =>\n      trait !== 'abstract' ? i32(n[0]) : abstractInt(BigInt(n[0]));\n  }\n\n  v = v.map(fp.quantize);\n  if (v.some(e => e !== 0 && fp.isSubnormal(e))) {\n    return { input: toInput(v), expected: skipUndefined(undefined) };\n  }\n\n  const fs = v.map(e => {\n    return frexp(e, trait !== 'abstract' ? trait : 'f64').exp;\n  });\n\n  return { input: toInput(v), expected: toOutput(fs) };\n}\n\n// Cases: [f32|f16]_vecN_[exp|whole]\nconst vec_cases = (['f32', 'f16', 'abstract'] as const)\n  .flatMap(trait =>\n    ([2, 3, 4] as const).flatMap(dim =>\n      (['exp', 'fract'] as const).map(portion => ({\n        [`${trait}_vec${dim}_${portion}`]: () => {\n          return FP[trait]\n            .vectorRange(dim)\n            .map(v => (portion === 'exp' ? makeCaseExp(v, trait) : makeCaseFract(v, trait)));\n        },\n      }))\n    )\n  )\n  .reduce((a, b) => ({ ...a, ...b }), {});\n\n// Cases: [f32|f16]_[exp|whole]\nconst scalar_cases = (['f32', 'f16', 'abstract'] as const)\n  .flatMap(trait =>\n    (['exp', 'fract'] as const).map(portion => ({\n      [`${trait}_${portion}`]: () => {\n        return FP[trait]\n          .scalarRange()\n          .map(v => (portion === 'exp' ? makeCaseExp(v, trait) : makeCaseFract(v, trait)));\n      },\n    }))\n  )\n  .reduce((a, b) => ({ ...a, ...b }), {});\n\nexport const d = makeCaseCache('frexp', {\n  ...scalar_cases,\n  ...vec_cases,\n});\n"],"mappings":"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"}