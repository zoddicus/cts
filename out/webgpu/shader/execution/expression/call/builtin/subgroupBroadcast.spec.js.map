{"version":3,"file":"subgroupBroadcast.spec.js","names":["description","makeTestGroup","keysOf","objectsToRecord","iterRange","GPUTest","kConcreteNumericScalarsAndVectors","Type","VectorType","elementTypeOf","g","kDataTypes","kWGSizes","test","desc","params","u","combine","filter","t","type","beginSubcases","beforeAllSubcases","features","requiresF16","push","selectDeviceOrSkipTestCase","fn","enables","wgThreads","wgSize","maxComputeInvocationsPerWorkgroup","maxComputeWorkgroupSizeX","maxComputeWorkgroupSizeY","maxComputeWorkgroupSizeZ","device","limits","skipIf","outputType","u32","width","updates","i","wgsl","toString","id","sizeBuffer","makeBufferWithContents","Uint32Array","GPUBufferUsage","COPY_SRC","COPY_DST","STORAGE","trackForCleanup","outputNumInts","outputBuffer","x","pipeline","createComputePipeline","layout","compute","module","createShaderModule","code","entryPoint","bg","createBindGroup","getBindGroupLayout","entries","binding","resource","buffer","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","queue","submit","finish","sizeReadback","readGPUBufferRangeTyped","srcByteOffset","typedLength","method","subgroupSize","data","expect","Array","fill","numFullSubgroups","Math","floor","partialSize","numSubgroups","ceil","expectGPUBufferValuesEqual","inputId","values","inputBuffer","unimplemented"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/subgroupBroadcast.spec.ts"],"sourcesContent":["export const description = `\nExecution tests for subgroupBroadcast\n\nNote: There is a lack of portability for non-uniform execution so these tests\nrestrict themselves to uniform control flow.\nNote: There is no guaranteed mapping between subgroup_invocation_id and\nlocal_invocation_index. Tests should avoid assuming there is.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport { iterRange } from '../../../../../../common/util/util.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport {\n  kConcreteNumericScalarsAndVectors,\n  Type,\n  VectorType,\n  elementTypeOf,\n} from '../../../../../util/conversion.js';\n\nexport const g = makeTestGroup(GPUTest);\n\nconst kDataTypes = objectsToRecord(kConcreteNumericScalarsAndVectors);\n\nconst kWGSizes = [\n  [4, 1, 1],\n  [8, 1, 1],\n  [16, 1, 1],\n  [32, 1, 1],\n  [64, 1, 1],\n  [128, 1, 1],\n  [256, 1, 1],\n  [1, 4, 1],\n  [1, 8, 1],\n  [1, 16, 1],\n  [1, 32, 1],\n  [1, 64, 1],\n  [1, 128, 1],\n  [1, 256, 1],\n  [1, 1, 4],\n  [1, 1, 8],\n  [1, 1, 16],\n  [1, 1, 32],\n  [1, 1, 64],\n  [3, 3, 3],\n  [4, 4, 4],\n  [16, 16, 1],\n  [16, 1, 16],\n  [1, 16, 16],\n  [15, 3, 3],\n  [3, 15, 3],\n  [3, 3, 15],\n] as const;\n\ng.test('data_types')\n  .desc('Tests broadcast of data types')\n  .params(u =>\n    u\n      .combine('type', keysOf(kDataTypes))\n      .filter(t => {\n        // Skip vec3h for simplicity\n        const type = kDataTypes[t.type];\n        return type !== Type['vec3h'];\n      })\n      .beginSubcases()\n      .combine('id', [0, 1, 2, 3] as const)\n      .combine('wgSize', kWGSizes)\n  )\n  .beforeAllSubcases(t => {\n    const features: GPUFeatureName[] = ['subgroups' as GPUFeatureName];\n    const type = kDataTypes[t.params.type];\n    if (type.requiresF16()) {\n      features.push('shader-f16');\n      features.push('subgroups-f16' as GPUFeatureName);\n    }\n    t.selectDeviceOrSkipTestCase(features);\n  })\n  .fn(async t => {\n    const type = kDataTypes[t.params.type];\n    let enables = 'enable subgroups;\\n';\n    if (type.requiresF16()) {\n      enables += 'enable f16;\\nenable subgroups_f16;\\n';\n    }\n\n    // Compatibility mode has lower workgroup limits.\n    const wgThreads = t.params.wgSize[0] * t.params.wgSize[1] * t.params.wgSize[2];\n    const {\n      maxComputeInvocationsPerWorkgroup,\n      maxComputeWorkgroupSizeX,\n      maxComputeWorkgroupSizeY,\n      maxComputeWorkgroupSizeZ,\n    } = t.device.limits;\n    t.skipIf(\n      maxComputeInvocationsPerWorkgroup < wgThreads ||\n        maxComputeWorkgroupSizeX < t.params.wgSize[0] ||\n        maxComputeWorkgroupSizeY < t.params.wgSize[1] ||\n        maxComputeWorkgroupSizeZ < t.params.wgSize[2],\n      'Workgroup size too large'\n    );\n\n    let outputType: Type = Type.u32;\n    if (type instanceof VectorType) {\n      outputType = Type['vec'](type.width, outputType);\n    }\n\n    let updates = `_ = atomicAdd(&output[b], 1);`;\n    if (type instanceof VectorType) {\n      updates = ``;\n      for (let i = 0; i < type.width; i++) {\n        updates += `_ = atomicAdd(&output[b[${i}]], 1);\\n`;\n      }\n    }\n\n    // This test should be expanded to cover large input values for each type instead of just conversions to u32.\n    const wgsl = `\n${enables}\n\n@group(0) @binding(0)\nvar<storage, read_write> size : u32;\n\n@group(0) @binding(1)\nvar<storage, read_write> output : array<atomic<u32>>;\n\n@compute @workgroup_size(${t.params.wgSize[0]}, ${t.params.wgSize[1]}, ${t.params.wgSize[2]})\nfn main(@builtin(local_invocation_index) lid : u32,\n        @builtin(subgroup_invocation_id) id : u32,\n        @builtin(subgroup_size) subgroupSize : u32) {\n  let scalar = ${elementTypeOf(type).toString()}(id);\n  let v = ${type.toString()}(scalar);\n  let b = ${outputType.toString()}(subgroupBroadcast(v, ${t.params.id}));\n  ${updates}\n  if (lid == 0) {\n    size = subgroupSize;\n  }\n}`;\n\n    const sizeBuffer = t.makeBufferWithContents(\n      new Uint32Array([0]),\n      GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST | GPUBufferUsage.STORAGE\n    );\n    t.trackForCleanup(sizeBuffer);\n\n    const outputNumInts = wgThreads;\n    const outputBuffer = t.makeBufferWithContents(\n      new Uint32Array([...iterRange(outputNumInts, x => 0)]),\n      GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST | GPUBufferUsage.STORAGE\n    );\n    t.trackForCleanup(outputBuffer);\n\n    const pipeline = t.device.createComputePipeline({\n      layout: 'auto',\n      compute: {\n        module: t.device.createShaderModule({\n          code: wgsl,\n        }),\n        entryPoint: 'main',\n      },\n    });\n    const bg = t.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [\n        {\n          binding: 0,\n          resource: {\n            buffer: sizeBuffer,\n          },\n        },\n        {\n          binding: 1,\n          resource: {\n            buffer: outputBuffer,\n          },\n        },\n      ],\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginComputePass();\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bg);\n    pass.dispatchWorkgroups(1, 1, 1);\n    pass.end();\n    t.queue.submit([encoder.finish()]);\n\n    const sizeReadback = await t.readGPUBufferRangeTyped(sizeBuffer, {\n      srcByteOffset: 0,\n      type: Uint32Array,\n      typedLength: 1,\n      method: 'copy',\n    });\n    const subgroupSize = sizeReadback.data[0];\n\n    let width = 1;\n    if (type instanceof VectorType) {\n      width = type.width;\n    }\n\n    const expect = Array(wgThreads);\n    expect.fill(0);\n\n    const numFullSubgroups = Math.floor(wgThreads / subgroupSize);\n    const partialSize = wgThreads % subgroupSize;\n    const numSubgroups = Math.ceil(wgThreads / subgroupSize);\n    for (let i = 0; i < numSubgroups; i++) {\n      if (i < numFullSubgroups) {\n        expect[t.params.id] += width * subgroupSize;\n      } else {\n        expect[t.params.id] += width * partialSize;\n      }\n    }\n    t.expectGPUBufferValuesEqual(outputBuffer, new Uint32Array(expect));\n  });\n\ng.test('workgroup_uniform_load')\n  .desc('Tests a workgroup uniform load equivalent')\n  .params(u =>\n    u\n      .combine('wgSize', kWGSizes)\n      .beginSubcases()\n      .combine('inputId', [1, 2, 3] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('subgroups' as GPUFeatureName);\n  })\n  .fn(t => {\n    // Compatibility mode has lower workgroup limits.\n    const wgThreads = t.params.wgSize[0] * t.params.wgSize[1] * t.params.wgSize[2];\n    const {\n      maxComputeInvocationsPerWorkgroup,\n      maxComputeWorkgroupSizeX,\n      maxComputeWorkgroupSizeY,\n      maxComputeWorkgroupSizeZ,\n    } = t.device.limits;\n    t.skipIf(\n      maxComputeInvocationsPerWorkgroup < wgThreads ||\n        maxComputeWorkgroupSizeX < t.params.wgSize[0] ||\n        maxComputeWorkgroupSizeY < t.params.wgSize[1] ||\n        maxComputeWorkgroupSizeZ < t.params.wgSize[2],\n      'Workgroup size too large'\n    );\n\n    const wgsl = `\nenable subgroups;\n\nvar<workgroup> wgmem : u32;\n\n@group(0) @binding(0)\nvar<storage, read> inputs : array<u32>;\n\n@group(0) @binding(1)\nvar<storage, read_write> output : array<u32>;\n\n@compute @workgroup_size(${t.params.wgSize[0]}, ${t.params.wgSize[1]}, ${t.params.wgSize[2]})\nfn main(@builtin(subgroup_invocation_id) id : u32,\n        @builtin(local_invocation_index) lid : u32) {\n  if (lid == ${t.params.inputId}) {\n    wgmem = inputs[lid];\n  }\n  workgroupBarrier();\n  var v = 0u;\n  if (id == 0) {\n    v = wgmem;\n  }\n  v = subgroupBroadcast(v, 0);\n  output[lid] = v;\n}`;\n\n    const values = [1, 13, 33, 125];\n    const inputBuffer = t.makeBufferWithContents(\n      new Uint32Array(values),\n      GPUBufferUsage.COPY_SRC | GPUBufferUsage.STORAGE\n    );\n    t.trackForCleanup(inputBuffer);\n\n    const outputBuffer = t.makeBufferWithContents(\n      new Uint32Array([...iterRange(wgThreads, x => 0)]),\n      GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST | GPUBufferUsage.STORAGE\n    );\n    t.trackForCleanup(outputBuffer);\n\n    const pipeline = t.device.createComputePipeline({\n      layout: 'auto',\n      compute: {\n        module: t.device.createShaderModule({\n          code: wgsl,\n        }),\n        entryPoint: 'main',\n      },\n    });\n    const bg = t.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [\n        {\n          binding: 0,\n          resource: {\n            buffer: inputBuffer,\n          },\n        },\n        {\n          binding: 1,\n          resource: {\n            buffer: outputBuffer,\n          },\n        },\n      ],\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginComputePass();\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bg);\n    pass.dispatchWorkgroups(1, 1, 1);\n    pass.end();\n    t.queue.submit([encoder.finish()]);\n\n    const expect = Array(wgThreads);\n    expect.fill(values[t.params.inputId]);\n    t.expectGPUBufferValuesEqual(outputBuffer, new Uint32Array(expect));\n  });\n\ng.test('fragment').unimplemented();\n"],"mappings":"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"}