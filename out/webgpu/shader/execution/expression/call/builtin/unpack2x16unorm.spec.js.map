{"version":3,"file":"unpack2x16unorm.spec.js","names":["description","makeTestGroup","GPUTest","TypeF32","TypeU32","TypeVec","FP","fullU32Range","makeCaseCache","allInputSources","run","builtin","g","d","u32_const","f32","generateU32ToIntervalCases","unpack2x16unormInterval","u32_non_const","test","specURL","desc","params","u","combine","fn","t","cases","get","inputSource"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/unpack2x16unorm.spec.ts"],"sourcesContent":["export const description = `\nDecomposes a 32-bit value into two 16-bit chunks, then reinterprets each chunk\nas an unsigned normalized floating point value.\nComponent i of the result is v ÷ 65535, where v is the interpretation of bits\n16×i through 16×i+15 of e as an unsigned integer.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { TypeF32, TypeU32, TypeVec } from '../../../../../util/conversion.js';\nimport { FP } from '../../../../../util/floating_point.js';\nimport { fullU32Range } from '../../../../../util/math.js';\nimport { makeCaseCache } from '../../case_cache.js';\nimport { allInputSources, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\nexport const d = makeCaseCache('unpack2x16unorm', {\n  u32_const: () => {\n    return FP.f32.generateU32ToIntervalCases(\n      fullU32Range(),\n      'finite',\n      FP.f32.unpack2x16unormInterval\n    );\n  },\n  u32_non_const: () => {\n    return FP.f32.generateU32ToIntervalCases(\n      fullU32Range(),\n      'unfiltered',\n      FP.f32.unpack2x16unormInterval\n    );\n  },\n});\n\ng.test('unpack')\n  .specURL('https://www.w3.org/TR/WGSL/#unpack-builtin-functions')\n  .desc(\n    `\n@const fn unpack2x16unorm(e: u32) -> vec2<f32>\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases = await d.get(t.params.inputSource === 'const' ? 'u32_const' : 'u32_non_const');\n    await run(t, builtin('unpack2x16unorm'), [TypeU32], TypeVec(2, TypeF32), t.params, cases);\n  });\n"],"mappings":";AAAA;AAAA,GAAA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA,CAAC,CAED,SAASC,aAAa,QAAQ,kDAAkD;AAChF,SAASC,OAAO,QAAQ,4BAA4B;AACpD,SAASC,OAAO,EAAEC,OAAO,EAAEC,OAAO,QAAQ,mCAAmC;AAC7E,SAASC,EAAE,QAAQ,uCAAuC;AAC1D,SAASC,YAAY,QAAQ,6BAA6B;AAC1D,SAASC,aAAa,QAAQ,qBAAqB;AACnD,SAASC,eAAe,EAAEC,GAAG,QAAQ,qBAAqB;;AAE1D,SAASC,OAAO,QAAQ,cAAc;;AAEtC,OAAO,MAAMC,CAAC,GAAGX,aAAa,CAACC,OAAO,CAAC;;AAEvC,OAAO,MAAMW,CAAC,GAAGL,aAAa,CAAC,iBAAiB,EAAE;EAChDM,SAAS,EAAE,MAAM;IACf,OAAOR,EAAE,CAACS,GAAG,CAACC,0BAA0B;IACtCT,YAAY,EAAE;IACd,QAAQ;IACRD,EAAE,CAACS,GAAG,CAACE,uBAAuB,CAC/B;;EACH,CAAC;EACDC,aAAa,EAAE,MAAM;IACnB,OAAOZ,EAAE,CAACS,GAAG,CAACC,0BAA0B;IACtCT,YAAY,EAAE;IACd,YAAY;IACZD,EAAE,CAACS,GAAG,CAACE,uBAAuB,CAC/B;;EACH;AACF,CAAC,CAAC;;AAEFL,CAAC,CAACO,IAAI,CAAC,QAAQ,CAAC;AACbC,OAAO,CAAC,sDAAsD,CAAC;AAC/DC,IAAI;AACF;AACL;AACA,CAAC,CACE;;AACAC,MAAM,CAAC,CAAAC,CAAC,KAAIA,CAAC,CAACC,OAAO,CAAC,aAAa,EAAEf,eAAe,CAAC,CAAC;AACtDgB,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,MAAMC,KAAK,GAAG,MAAMd,CAAC,CAACe,GAAG,CAACF,CAAC,CAACJ,MAAM,CAACO,WAAW,KAAK,OAAO,GAAG,WAAW,GAAG,eAAe,CAAC;EAC3F,MAAMnB,GAAG,CAACgB,CAAC,EAAEf,OAAO,CAAC,iBAAiB,CAAC,EAAE,CAACP,OAAO,CAAC,EAAEC,OAAO,CAAC,CAAC,EAAEF,OAAO,CAAC,EAAEuB,CAAC,CAACJ,MAAM,EAAEK,KAAK,CAAC;AAC3F,CAAC,CAAC"}