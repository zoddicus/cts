{"version":3,"file":"textureLoad.spec.js","names":["description","makeTestGroup","canUseAsRenderTarget","isCompressedFloatTextureFormat","isDepthTextureFormat","isEncodableTextureFormat","isMultisampledTextureFormat","isStencilTextureFormat","kCompressedTextureFormats","kDepthStencilFormats","kEncodableTextureFormats","kTextureFormatInfo","textureDimensionAndFormatCompatible","GPUTest","maxMipLevelCount","virtualMipSize","TexelFormats","checkCallResults","chooseTextureSize","createTextureWithRandomDataAndGetTexels","doTextureCalls","appendComponentTypeForFormatToTextureType","kSamplePointMethods","kShortShaderStages","generateTextureBuiltinInputs1D","generateTextureBuiltinInputs2D","generateTextureBuiltinInputs3D","createVideoFrameWithRandomDataAndGetTexels","kTestableColorFormats","normalizedCoordToTexelLoadTestCoord","descriptor","mipLevel","coordType","v","size","dimension","map","i","t","Math","abs","round","g","test","specURL","desc","params","u","combine","filter","format","blockHeight","beginSubcases","beforeAllSubcases","skipIfTextureFormatNotSupported","selectDeviceForTextureFormatOrSkipTestCase","fn","stage","C","L","samplePoints","width","minSize","minBlocks","usage","GPUTextureUsage","COPY_DST","TEXTURE_BINDING","texels","texture","calls","method","num","mipLevelCount","type","hashInputs","coords","builtin","levelType","textureType","viewDescriptor","sampler","undefined","results","res","expectOK","viewDimension","texture_type","skipIfTextureLoadNotSupportedForTextureType","S","sampleCount","RENDER_ATTACHMENT","sampleIndex","sampleIndexType","skipIf","VideoFrame","videoFrame","device","importExternalTexture","source","close","combineWithParams","A","arrayIndex","depthOrArrayLayers","arrayIndexType","hasLanguageFeature","selectDeviceOrSkipTestCase","skipIfTextureFormatNotUsableAsStorageTexture","STORAGE_BINDING"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/textureLoad.spec.ts"],"sourcesContent":["export const description = `\nExecution tests for the 'textureLoad' builtin function\n\nReads a single texel from a texture without sampling or filtering.\n\nReturns the unfiltered texel data.\n\nAn out of bounds access occurs if:\n * any element of coords is outside the range [0, textureDimensions(t, level)) for the corresponding element, or\n * array_index is outside the range [0, textureNumLayers(t)), or\n * level is outside the range [0, textureNumLevels(t))\n\nIf an out of bounds access occurs, the built-in function returns one of:\n * The data for some texel within bounds of the texture\n * A vector (0,0,0,0) or (0,0,0,1) of the appropriate type for non-depth textures\n * 0.0 for depth textures\n\nTODO: Test textureLoad with depth textures as texture_2d, etc...\nTODO: Test textureLoad with multisampled stencil8 format\nTODO: Test un-encodable formats.\nTODO: Test stencil8 format.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport {\n  canUseAsRenderTarget,\n  isCompressedFloatTextureFormat,\n  isDepthTextureFormat,\n  isEncodableTextureFormat,\n  isMultisampledTextureFormat,\n  isStencilTextureFormat,\n  kCompressedTextureFormats,\n  kDepthStencilFormats,\n  kEncodableTextureFormats,\n  kTextureFormatInfo,\n  textureDimensionAndFormatCompatible,\n} from '../../../../../format_info.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { maxMipLevelCount, virtualMipSize } from '../../../../../util/texture/base.js';\nimport { TexelFormats } from '../../../../types.js';\n\nimport {\n  TextureCall,\n  checkCallResults,\n  chooseTextureSize,\n  createTextureWithRandomDataAndGetTexels,\n  doTextureCalls,\n  appendComponentTypeForFormatToTextureType,\n  vec1,\n  vec2,\n  vec3,\n  kSamplePointMethods,\n  kShortShaderStages,\n  generateTextureBuiltinInputs1D,\n  generateTextureBuiltinInputs2D,\n  generateTextureBuiltinInputs3D,\n  Dimensionality,\n  createVideoFrameWithRandomDataAndGetTexels,\n} from './texture_utils.js';\n\nconst kTestableColorFormats = [...kEncodableTextureFormats, ...kCompressedTextureFormats] as const;\n\nexport function normalizedCoordToTexelLoadTestCoord<T extends Dimensionality>(\n  descriptor: GPUTextureDescriptor,\n  mipLevel: number,\n  coordType: 'i32' | 'u32',\n  v: T\n): T {\n  const size = virtualMipSize(descriptor.dimension ?? '2d', descriptor.size, mipLevel);\n  return v.map((v, i) => {\n    const t = v * size[i];\n    return coordType === 'u32' ? Math.abs(Math.round(t)) : Math.round(t);\n  }) as T;\n}\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('sampled_1d')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureLoad(t: texture_1d<T>, coords: C, level: C) -> vec4<T>\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate\n * level: The mip level, with level 0 containing a full size version of the texture\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combine('format', kTestableColorFormats)\n      .filter(t => textureDimensionAndFormatCompatible('1d', t.format))\n      // 1d textures can't have a height !== 1\n      .filter(t => kTextureFormatInfo[t.format].blockHeight === 1)\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('L', ['i32', 'u32'] as const)\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n    t.selectDeviceForTextureFormatOrSkipTestCase(t.params.format);\n  })\n  .fn(async t => {\n    const { format, stage, C, L, samplePoints } = t.params;\n\n    // We want at least 4 blocks or something wide enough for 3 mip levels.\n    const [width] = chooseTextureSize({ minSize: 8, minBlocks: 4, format });\n    const size = [width, 1];\n\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      dimension: '1d',\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n\n    const calls: TextureCall<vec1>[] = generateTextureBuiltinInputs1D(50, {\n      method: samplePoints,\n      descriptor,\n      mipLevel: { num: texture.mipLevelCount, type: L },\n      hashInputs: [stage, format, samplePoints, C, L],\n    }).map(({ coords, mipLevel }, i) => {\n      return {\n        builtin: 'textureLoad',\n        coordType: C === 'i32' ? 'i' : 'u',\n        levelType: L === 'i32' ? 'i' : 'u',\n        mipLevel,\n        coords: normalizedCoordToTexelLoadTestCoord(descriptor, mipLevel, C, coords),\n      };\n    });\n\n    const textureType = appendComponentTypeForFormatToTextureType('texture_1d', texture.format);\n    const viewDescriptor = {};\n    const sampler = undefined;\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n\ng.test('sampled_2d')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\nL is i32 or u32\n\nfn textureLoad(t: texture_2d<T>, coords: vec2<C>, level: L) -> vec4<T>\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate\n * level: The mip level, with level 0 containing a full size version of the texture\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combine('format', kTestableColorFormats)\n      .filter(t => !isCompressedFloatTextureFormat(t.format))\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('L', ['i32', 'u32'] as const)\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n    t.selectDeviceForTextureFormatOrSkipTestCase(t.params.format);\n  })\n  .fn(async t => {\n    const { format, stage, samplePoints, C, L } = t.params;\n\n    // We want at least 4 blocks or something wide enough for 3 mip levels.\n    const size = chooseTextureSize({ minSize: 8, minBlocks: 4, format });\n\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n      mipLevelCount: maxMipLevelCount({ size }),\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n\n    const calls: TextureCall<vec2>[] = generateTextureBuiltinInputs2D(50, {\n      method: samplePoints,\n      descriptor,\n      hashInputs: [stage, format, samplePoints, C, L],\n    }).map(({ coords, mipLevel }) => {\n      return {\n        builtin: 'textureLoad',\n        coordType: C === 'i32' ? 'i' : 'u',\n        levelType: L === 'i32' ? 'i' : 'u',\n        mipLevel,\n        coords: normalizedCoordToTexelLoadTestCoord(descriptor, mipLevel, C, coords),\n      };\n    });\n\n    const textureType = appendComponentTypeForFormatToTextureType('texture_2d', texture.format);\n    const viewDescriptor = {};\n    const sampler = undefined;\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n\ng.test('sampled_3d')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureLoad(t: texture_3d<T>, coords: vec3<C>, level: C) -> vec4<T>\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate\n * level: The mip level, with level 0 containing a full size version of the texture\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combine('format', kTestableColorFormats)\n      .filter(t => textureDimensionAndFormatCompatible('3d', t.format))\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('L', ['i32', 'u32'] as const)\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n    t.selectDeviceForTextureFormatOrSkipTestCase(t.params.format);\n  })\n  .fn(async t => {\n    const { format, stage, samplePoints, C, L } = t.params;\n\n    // We want at least 4 blocks or something wide enough for 3 mip levels.\n    const size = chooseTextureSize({ minSize: 8, minBlocks: 4, format, viewDimension: '3d' });\n\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      dimension: '3d',\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n      mipLevelCount: maxMipLevelCount({ size }),\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n\n    const calls: TextureCall<vec3>[] = generateTextureBuiltinInputs3D(50, {\n      method: samplePoints,\n      descriptor,\n      mipLevel: { num: texture.mipLevelCount, type: L },\n      hashInputs: [stage, format, samplePoints, C, L],\n    }).map(({ coords, mipLevel }) => {\n      return {\n        builtin: 'textureLoad',\n        coordType: C === 'i32' ? 'i' : 'u',\n        levelType: L === 'i32' ? 'i' : 'u',\n        mipLevel,\n        coords: normalizedCoordToTexelLoadTestCoord(descriptor, mipLevel, C, coords),\n      };\n    });\n\n    const textureType = appendComponentTypeForFormatToTextureType('texture_3d', texture.format);\n    const viewDescriptor = {};\n    const sampler = undefined;\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n\ng.test('multisampled')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\nS is i32 or u32\n\nfn textureLoad(t: texture_multisampled_2d<T>, coords: vec2<C>, sample_index: S)-> vec4<T>\nfn textureLoad(t: texture_depth_multisampled_2d, coords: vec2<C>, sample_index: S)-> f32\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate\n * sample_index: The 0-based sample index of the multisampled texture\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combine('texture_type', [\n        'texture_multisampled_2d',\n        'texture_depth_multisampled_2d',\n      ] as const)\n      .combine('format', kTestableColorFormats)\n      .filter(t => isMultisampledTextureFormat(t.format))\n      .filter(t => !isStencilTextureFormat(t.format))\n      // Filter out texture_depth_multisampled_2d with non-depth formats\n      .filter(\n        t =>\n          !(t.texture_type === 'texture_depth_multisampled_2d' && !isDepthTextureFormat(t.format))\n      )\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('S', ['i32', 'u32'] as const)\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n    t.skipIfTextureLoadNotSupportedForTextureType(t.params.texture_type);\n    t.selectDeviceForTextureFormatOrSkipTestCase(t.params.format);\n  })\n  .fn(async t => {\n    const { texture_type, format, stage, samplePoints, C, S } = t.params;\n\n    const sampleCount = 4;\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size: [8, 8],\n      usage:\n        GPUTextureUsage.COPY_DST |\n        GPUTextureUsage.TEXTURE_BINDING |\n        GPUTextureUsage.RENDER_ATTACHMENT,\n      sampleCount,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n\n    const calls: TextureCall<vec2>[] = generateTextureBuiltinInputs2D(50, {\n      method: samplePoints,\n      descriptor,\n      sampleIndex: { num: texture.sampleCount, type: S },\n      hashInputs: [stage, format, samplePoints, C, S],\n    }).map(({ coords, sampleIndex }) => {\n      return {\n        builtin: 'textureLoad',\n        coordType: C === 'i32' ? 'i' : 'u',\n        sampleIndexType: S === 'i32' ? 'i' : 'u',\n        sampleIndex,\n        coords: normalizedCoordToTexelLoadTestCoord(descriptor, 0, C, coords),\n      };\n    });\n\n    const textureType = appendComponentTypeForFormatToTextureType(texture_type, texture.format);\n    const viewDescriptor = {};\n    const sampler = undefined;\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n\ng.test('depth')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureLoad(t: texture_depth_2d, coords: vec2<C>, level: L) -> f32\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate\n * level: The mip level, with level 0 containing a full size version of the texture\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combine('format', kDepthStencilFormats)\n      // filter out stencil only formats\n      .filter(t => isDepthTextureFormat(t.format))\n      // MAINTENANCE_TODO: Remove when support for depth24plus, depth24plus-stencil8, and depth32float-stencil8 is added.\n      .filter(t => isEncodableTextureFormat(t.format))\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('L', ['i32', 'u32'] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.skipIfTextureLoadNotSupportedForTextureType('texture_depth_2d');\n  })\n  .fn(async t => {\n    const { format, stage, samplePoints, C, L } = t.params;\n\n    // We want at least 4 blocks or something wide enough for 3 mip levels.\n    const size = chooseTextureSize({ minSize: 8, minBlocks: 4, format });\n\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n      mipLevelCount: maxMipLevelCount({ size }),\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n\n    const calls: TextureCall<vec2>[] = generateTextureBuiltinInputs2D(50, {\n      method: samplePoints,\n      descriptor,\n      mipLevel: { num: texture.mipLevelCount, type: L },\n      hashInputs: [stage, format, samplePoints, C, L],\n    }).map(({ coords, mipLevel }) => {\n      return {\n        builtin: 'textureLoad',\n        coordType: C === 'i32' ? 'i' : 'u',\n        levelType: L === 'i32' ? 'i' : 'u',\n        mipLevel,\n        coords: normalizedCoordToTexelLoadTestCoord(descriptor, mipLevel, C, coords),\n      };\n    });\n    const textureType = 'texture_depth_2d';\n    const viewDescriptor = {};\n    const sampler = undefined;\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n\ng.test('external')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureLoad(t: texture_external, coords: vec2<C>) -> vec4<f32>\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate.\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('L', ['i32', 'u32'] as const)\n  )\n  .beforeAllSubcases(t =>\n    t.skipIf(typeof VideoFrame === 'undefined', 'VideoFrames are not supported')\n  )\n  .fn(async t => {\n    const { stage, samplePoints, C, L } = t.params;\n\n    const size = [8, 8, 1];\n\n    // Note: external texture doesn't use this descriptor.\n    // It's used to pass to the softwareTextureRead functions.\n    const descriptor: GPUTextureDescriptor = {\n      format: 'rgba8unorm',\n      size,\n      usage: GPUTextureUsage.COPY_DST,\n    };\n\n    const { texels, videoFrame } = createVideoFrameWithRandomDataAndGetTexels(descriptor.size);\n    const texture = t.device.importExternalTexture({ source: videoFrame });\n\n    const calls: TextureCall<vec2>[] = generateTextureBuiltinInputs2D(50, {\n      method: samplePoints,\n      descriptor,\n      hashInputs: [samplePoints, C, L],\n    }).map(({ coords }) => {\n      return {\n        builtin: 'textureLoad',\n        coordType: C === 'i32' ? 'i' : 'u',\n        coords: normalizedCoordToTexelLoadTestCoord(descriptor, 0, C, coords),\n      };\n    });\n\n    const textureType = 'texture_external';\n    const viewDescriptor = {};\n    const sampler = undefined;\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage\n    );\n    t.expectOK(res);\n    videoFrame.close();\n  });\n\ng.test('arrayed')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureLoad(t: texture_2d_array<T>, coords: vec2<C>, array_index: A, level: L) -> vec4<T>\nfn textureLoad(t: texture_depth_2d_array, coords: vec2<C>, array_index: A, level: L) -> f32\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate\n * array_index: The 0-based texture array index\n * level: The mip level, with level 0 containing a full size version of the texture\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combine('format', kTestableColorFormats)\n      // MAINTENANCE_TODO: Update createTextureFromTexelViews to support stencil8 and remove this filter.\n      .filter(t => t.format !== 'stencil8' && !isCompressedFloatTextureFormat(t.format))\n      .combine('texture_type', ['texture_2d_array', 'texture_depth_2d_array'] as const)\n      .filter(\n        t => !(t.texture_type === 'texture_depth_2d_array' && !isDepthTextureFormat(t.format))\n      )\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combineWithParams([\n        { C: 'i32', A: 'u32', L: 'u32' },\n        { C: 'u32', A: 'u32', L: 'u32' },\n        { C: 'u32', A: 'i32', L: 'u32' },\n        { C: 'u32', A: 'u32', L: 'i32' },\n      ] as const)\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    t.skipIfTextureFormatNotSupported(format);\n    t.skipIfTextureLoadNotSupportedForTextureType(t.params.texture_type);\n    t.selectDeviceForTextureFormatOrSkipTestCase(t.params.format);\n  })\n  .fn(async t => {\n    const { texture_type, format, stage, samplePoints, C, A, L } = t.params;\n\n    // We want at least 4 blocks or something wide enough for 3 mip levels.\n    const size = chooseTextureSize({ minSize: 8, minBlocks: 4, format, viewDimension: '3d' });\n\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size,\n      usage:\n        GPUTextureUsage.COPY_DST |\n        GPUTextureUsage.TEXTURE_BINDING |\n        (canUseAsRenderTarget(format) ? GPUTextureUsage.RENDER_ATTACHMENT : 0),\n      mipLevelCount: maxMipLevelCount({ size }),\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n\n    const calls: TextureCall<vec2>[] = generateTextureBuiltinInputs2D(50, {\n      method: samplePoints,\n      descriptor,\n      mipLevel: { num: texture.mipLevelCount, type: L },\n      arrayIndex: { num: texture.depthOrArrayLayers, type: A },\n      hashInputs: [stage, format, samplePoints, C, L, A],\n    }).map(({ coords, mipLevel, arrayIndex }) => {\n      return {\n        builtin: 'textureLoad',\n        coordType: C === 'i32' ? 'i' : 'u',\n        levelType: L === 'i32' ? 'i' : 'u',\n        arrayIndexType: A === 'i32' ? 'i' : 'u',\n        arrayIndex,\n        mipLevel,\n        coords: normalizedCoordToTexelLoadTestCoord(descriptor, mipLevel, C, coords),\n      };\n    });\n    const textureType = appendComponentTypeForFormatToTextureType(texture_type, texture.format);\n    const viewDescriptor = {};\n    const sampler = undefined;\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n\ng.test('storage_textures_1d')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureLoad(t: texture_storage_1d<format, read>, coords: C) -> vec4<f32>\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combineWithParams([...TexelFormats, { format: 'bgra8unorm' }] as const)\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('C', ['i32', 'u32'] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.skipIf(!t.hasLanguageFeature('readonly_and_readwrite_storage_textures'));\n    if (t.params.format === 'bgra8unorm') {\n      t.selectDeviceOrSkipTestCase('bgra8unorm-storage');\n    } else {\n      t.skipIfTextureFormatNotUsableAsStorageTexture(t.params.format as GPUTextureFormat);\n    }\n  })\n  .fn(async t => {\n    const { format, stage, samplePoints, C } = t.params;\n\n    // We want at least 3 blocks or something wide enough for 3 mip levels.\n    const [width] = chooseTextureSize({ minSize: 8, minBlocks: 4, format });\n    const size = [width, 1];\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.STORAGE_BINDING,\n      dimension: '1d',\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n\n    const calls: TextureCall<vec1>[] = generateTextureBuiltinInputs1D(50, {\n      method: samplePoints,\n      descriptor,\n      hashInputs: [stage, format, samplePoints, C],\n    }).map(({ coords }) => {\n      return {\n        builtin: 'textureLoad',\n        coordType: C === 'i32' ? 'i' : 'u',\n        coords: normalizedCoordToTexelLoadTestCoord(descriptor, 0, C, coords),\n      };\n    });\n    const textureType = `texture_storage_1d<${format}, read>`;\n    const viewDescriptor = {};\n    const sampler = undefined;\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n\ng.test('storage_textures_2d')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureLoad(t: texture_storage_2d<format, read>, coords: vec2<C>) -> vec4<f32>\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combineWithParams([...TexelFormats, { format: 'bgra8unorm' }] as const)\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('C', ['i32', 'u32'] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.skipIf(!t.hasLanguageFeature('readonly_and_readwrite_storage_textures'));\n    if (t.params.format === 'bgra8unorm') {\n      t.selectDeviceOrSkipTestCase('bgra8unorm-storage');\n    } else {\n      t.skipIfTextureFormatNotUsableAsStorageTexture(t.params.format as GPUTextureFormat);\n    }\n  })\n  .fn(async t => {\n    const { format, stage, samplePoints, C } = t.params;\n\n    // We want at least 3 blocks or something wide enough for 3 mip levels.\n    const size = chooseTextureSize({ minSize: 8, minBlocks: 3, format });\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.STORAGE_BINDING,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n\n    const calls: TextureCall<vec2>[] = generateTextureBuiltinInputs2D(50, {\n      method: samplePoints,\n      descriptor,\n      hashInputs: [stage, format, samplePoints, C],\n    }).map(({ coords }) => {\n      return {\n        builtin: 'textureLoad',\n        coordType: C === 'i32' ? 'i' : 'u',\n        coords: normalizedCoordToTexelLoadTestCoord(descriptor, 0, C, coords),\n      };\n    });\n    const textureType = `texture_storage_2d<${format}, read>`;\n    const viewDescriptor = {};\n    const sampler = undefined;\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n\ng.test('storage_textures_2d_array')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\nA is i32 or u32\n\nfn textureLoad(t: texture_storage_2d<format, read>, coords: vec2<C>, array_index: A) -> vec4<f32>\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate\n * array_index: The 0-based texture array index\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combineWithParams([...TexelFormats, { format: 'bgra8unorm' }] as const)\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('A', ['i32', 'u32'] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.skipIf(!t.hasLanguageFeature('readonly_and_readwrite_storage_textures'));\n    if (t.params.format === 'bgra8unorm') {\n      t.selectDeviceOrSkipTestCase('bgra8unorm-storage');\n    } else {\n      t.skipIfTextureFormatNotUsableAsStorageTexture(t.params.format as GPUTextureFormat);\n    }\n  })\n  .fn(async t => {\n    const { format, stage, samplePoints, C, A } = t.params;\n\n    // We want at least 3 blocks or something wide enough for 3 mip levels.\n    const size = chooseTextureSize({ minSize: 8, minBlocks: 4, format, viewDimension: '3d' });\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.STORAGE_BINDING,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n\n    const calls: TextureCall<vec2>[] = generateTextureBuiltinInputs2D(50, {\n      method: samplePoints,\n      descriptor,\n      arrayIndex: { num: texture.depthOrArrayLayers, type: A },\n      hashInputs: [stage, format, samplePoints, C, A],\n    }).map(({ coords, arrayIndex }) => {\n      return {\n        builtin: 'textureLoad',\n        coordType: C === 'i32' ? 'i' : 'u',\n        coords: normalizedCoordToTexelLoadTestCoord(descriptor, 0, C, coords),\n        arrayIndexType: A === 'i32' ? 'i' : 'u',\n        arrayIndex,\n      };\n    });\n    const textureType = `texture_storage_2d_array<${format}, read>`;\n    const viewDescriptor: GPUTextureViewDescriptor = {\n      dimension: '2d-array',\n    };\n    const sampler = undefined;\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n\ng.test('storage_textures_3d')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureLoad(t: texture_storage_2d<format, read>, coords: vec3<C>) -> vec4<f32>\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShortShaderStages)\n      .combineWithParams([...TexelFormats, { format: 'bgra8unorm' }] as const)\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('C', ['i32', 'u32'] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.skipIf(!t.hasLanguageFeature('readonly_and_readwrite_storage_textures'));\n    if (t.params.format === 'bgra8unorm') {\n      t.selectDeviceOrSkipTestCase('bgra8unorm-storage');\n    } else {\n      t.skipIfTextureFormatNotUsableAsStorageTexture(t.params.format as GPUTextureFormat);\n    }\n  })\n  .fn(async t => {\n    const { format, stage, samplePoints, C } = t.params;\n\n    // We want at least 3 blocks or something wide enough for 3 mip levels.\n    const size = chooseTextureSize({ minSize: 8, minBlocks: 4, format, viewDimension: '3d' });\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.STORAGE_BINDING,\n      dimension: '3d',\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n\n    const calls: TextureCall<vec3>[] = generateTextureBuiltinInputs3D(50, {\n      method: samplePoints,\n      descriptor,\n      hashInputs: [stage, format, samplePoints, C],\n    }).map(({ coords }) => {\n      return {\n        builtin: 'textureLoad',\n        coordType: C === 'i32' ? 'i' : 'u',\n        coords: normalizedCoordToTexelLoadTestCoord(descriptor, 0, C, coords),\n      };\n    });\n    const textureType = `texture_storage_3d<${format}, read>`;\n    const viewDescriptor = {};\n    const sampler = undefined;\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage,\n      texture\n    );\n    t.expectOK(res);\n  });\n"],"mappings":"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"}