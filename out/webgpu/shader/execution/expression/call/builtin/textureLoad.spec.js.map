{"version":3,"file":"textureLoad.spec.js","names":["description","makeTestGroup","GPUTest","generateCoordBoundaries","g","test","specURL","desc","params","u","combine","unimplemented","beginSubcases","paramsSubcasesOnly"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/textureLoad.spec.ts"],"sourcesContent":["export const description = `\nExecution tests for the 'textureLoad' builtin function\n\nReads a single texel from a texture without sampling or filtering.\n\nReturns the unfiltered texel data.\n\nAn out of bounds access occurs if:\n * any element of coords is outside the range [0, textureDimensions(t, level)) for the corresponding element, or\n * array_index is outside the range [0, textureNumLayers(t)), or\n * level is outside the range [0, textureNumLevels(t))\n\nIf an out of bounds access occurs, the built-in function returns one of:\n * The data for some texel within bounds of the texture\n * A vector (0,0,0,0) or (0,0,0,1) of the appropriate type for non-depth textures\n * 0.0 for depth textures\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\n\nimport { generateCoordBoundaries } from './utils.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('sampled_1d')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureLoad(t: texture_1d<T>, coords: C, level: C) -> vec4<T>\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate\n * level: The mip level, with level 0 containing a full size version of the texture\n`\n  )\n  .params(u =>\n    u\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('coords', generateCoordBoundaries(1))\n      .combine('level', [-1, 0, `numlevels-1`, `numlevels`] as const)\n  )\n  .unimplemented();\n\ng.test('sampled_2d')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureLoad(t: texture_2d<T>, coords: vec2<C>, level: C) -> vec4<T>\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate\n * level: The mip level, with level 0 containing a full size version of the texture\n`\n  )\n  .params(u =>\n    u\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('coords', generateCoordBoundaries(2))\n      .combine('level', [-1, 0, `numlevels-1`, `numlevels`] as const)\n  )\n  .unimplemented();\n\ng.test('sampled_3d')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureLoad(t: texture_3d<T>, coords: vec3<C>, level: C) -> vec4<T>\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate\n * level: The mip level, with level 0 containing a full size version of the texture\n`\n  )\n  .params(u =>\n    u\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('coords', generateCoordBoundaries(3))\n      .combine('level', [-1, 0, `numlevels-1`, `numlevels`] as const)\n  )\n  .unimplemented();\n\ng.test('multisampled')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureLoad(t: texture_multisampled_2d<T>, coords: vec2<C>, sample_index: C)-> vec4<T>\nfn textureLoad(t: texture_depth_multisampled_2d, coords: vec2<C>, sample_index: C)-> f32\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate\n * sample_index: The 0-based sample index of the multisampled texture\n`\n  )\n  .params(u =>\n    u\n      .combine('texture_type', [\n        'texture_multisampled_2d',\n        'texture_depth_multisampled_2d',\n      ] as const)\n      .beginSubcases()\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('coords', generateCoordBoundaries(2))\n      .combine('sample_index', [-1, 0, `sampleCount-1`, `sampleCount`] as const)\n  )\n  .unimplemented();\n\ng.test('depth')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureLoad(t: texture_depth_2d, coords: vec2<C>, level: C) -> f32\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate\n * level: The mip level, with level 0 containing a full size version of the texture\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('coords', generateCoordBoundaries(2))\n      .combine('level', [-1, 0, `numlevels-1`, `numlevels`] as const)\n  )\n  .unimplemented();\n\ng.test('external')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureLoad(t: texture_external, coords: vec2<C>) -> vec4<f32>\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u.combine('C', ['i32', 'u32'] as const).combine('coords', generateCoordBoundaries(2))\n  )\n  .unimplemented();\n\ng.test('arrayed')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureLoad(t: texture_2d_array<T>, coords: vec2<C>, array_index: C, level: C) -> vec4<T>\nfn textureLoad(t: texture_depth_2d_array, coords: vec2<C>, array_index: C, level: C) -> f32\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate\n * array_index: The 0-based texture array index\n * level: The mip level, with level 0 containing a full size version of the texture\n`\n  )\n  .params(u =>\n    u\n      .combine('texture_type', ['texture_2d_array', 'texture_depth_2d_array'] as const)\n      .beginSubcases()\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('coords', generateCoordBoundaries(2))\n      .combine('array_index', [-1, 0, `numlayers-1`, `numlayers`] as const)\n      .combine('level', [-1, 0, `numlevels-1`, `numlevels`] as const)\n  )\n  .unimplemented();\n"],"mappings":"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"}