{"version":3,"file":"texture_utils.js","names":["keysOf","assert","range","unreachable","isCompressedTextureFormat","kEncodableTextureFormats","kTextureFormatInfo","float32ToUint32","align","clamp","dotProduct","hashU32","lcm","lerp","quantizeToF32","effectiveViewDimensionForDimension","physicalMipSizeFromTexture","virtualMipSize","kTexelRepresentationInfo","TexelView","createTextureFromTexelViews","reifyExtent3D","getLimitValue","v","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","getValueBetweenMinAndMaxTexelValueInclusive","rep","normalized","numericRange","min","max","getTexelViewFormatForTextureFormat","format","endsWith","createRandomTexelView","info","generator","coords","texel","component","componentOrder","rnd","x","y","z","charCodeAt","quantize","fromTexelsAsColors","createRandomTexelViewMipmap","mipLevelCount","dimension","i","size","kTextureCallArgNames","toArray","Array","repl","bitsToNumber","unpackBits","Uint8Array","pack","encode","apply","a","b","op","length","map","getUnusedCubeCornerSampleIndex","textureSize","u","add","softwareTextureReadMipLevel","call","texture","sampler","mipLevel","texels","descriptor","addressMode","addressModeU","addressModeV","addressModeW","load","at","color","Math","floor","isCube","viewDescriptor","builtin","convertCubeCoordToNormalized3DTextureCoord","offset","undefined","samples","filter","minFilter","p0","p1","p1W","p0W","push","weight","ndx","p","w","round","out","ss","sample","c","wrapFaceCoordToCubeFaceAtEdgeBoundaries","applyAddressModesToCoords","softwareTextureRead","ddx","ddy","texSize","width","height","scaledDdx","scaledDdy","dotDDX","dotDDY","deltaMax","log2","maxLevel","mipmapFilter","clampedMipLevel","baseMipLevel","nextMipLevel","ceil","t0","t1","mix","values","checkCallResults","device","textureType","calls","results","errs","maxFractionalDiff","getMaxFractionalDiffForTextureFormat","callIdx","got","expect","gULP","bitsToULPFromZero","numberToBits","eULP","g","e","absDiff","abs","ulpDiff","relDiff","desc","describeTextureCall","toFixed","expectedSamplePoints","identifySamplePoints","Promise","resolve","gotSamplePoints","gpuTexture","result","doTextureCalls","destroy","layoutTwoColumns","join","Error","softwareRasterize","targetSize","options","uvwStart","screenSpaceUMult","screenSpaceVMult","expData","Float32Array","fragY","fragX","coordType","rgba","R","G","B","A","asRgba32Float","set","fromTextureDataByReference","buffer","bytesPerRow","rowsPerImage","subrectOrigin","subrectSize","drawTexture","t","samplerDesc","renderTarget","createTexture","usage","GPUTextureUsage","COPY_SRC","RENDER_ATTACHMENT","trackForCleanup","uMult","vMult","offsetWGSL","code","shaderModule","createShaderModule","pipeline","createRenderPipeline","layout","vertex","module","fragment","targets","primitive","topology","createSampler","bindGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","createView","encoder","createCommandEncoder","renderPass","beginRenderPass","colorAttachments","view","loadOp","storeOp","setPipeline","setBindGroup","draw","end","queue","submit","finish","includes","checkTextureMatchesExpectedTexelView","actualTexture","expectedTexelView","expectTexelViewComparisonIsOkInTexture","putDataInTextureThenDrawAndCheckResultsComparedToSoftwareRasterizer","createTextureWithRandomDataAndGetTexels","sumOfCharCodesOfString","s","String","split","reduce","sum","makeAstcBlockFiller","bytesPerBlock","bytes","data","hashBase","makeRandomBytesBlockFiller","getBlockFiller","startsWith","fillTextureWithRandomData","depthOrArrayLayers","fillBlock","blocksAcross","blockWidth","blocksDown","blockHeight","bytesNeeded","writeTexture","s_readTextureToRGBA32DeviceToPipeline","WeakMap","getEffectiveViewDimension","textureBindingViewDimension","readTextureToTexelViews","viewDimensionToPipelineMap","get","Map","viewDimension","textureWGSL","loadWGSL","createComputePipeline","compute","readBuffers","uniformValues","Uint32Array","uniformBuffer","createBuffer","byteLength","GPUBufferUsage","UNIFORM","COPY_DST","writeBuffer","storageBuffer","STORAGE","readBuffer","MAP_READ","pass","beginComputePass","dispatchWorkgroups","copyBufferToBuffer","texelViews","mapAsync","GPUMapMode","READ","getMappedRange","slice","unmap","coord","kFaceNames","run","numTexels","texelsPerRow","texelsPerSlice","sampledTexelWeights","unclassifiedStack","Set","unclassified","pop","setA","setB","keys","forEach","isCandidate","has","some","letter","idx","fromCharCode","orderedTexelIndices","lines","line","toString","padEnd","texelIdx","pad2","n","padStart","weights","columnA","columnB","widthA","l","repeat","chooseTextureSize","minSize","minBlocks","kSamplePointMethods","kCubeSamplePointMethods","generateSamplePointsImpl","makeValue","nearest","args","method","textureWidth","textureHeight","textureDepthOrArrayLayers","r","radius","loops","f","PI","cos","sin","kSubdivisionsPerTexel","q","v1","v2","generateSamplePoints1D","generateSamplePoints2D","generateSamplePoints3D","kFaceUVMatrices","transformMat3","m","normalize","sqrt","uvw","layer","absR","negX","negY","negZ","convertNormalized3DTexCoordToCubeCoord","uvLayer","faceLayer","kFaceConversions","faceCoord","u+t","u-t","v+t","v-t","t-v","1+u","1+v","-v-1","t-u-1","t-v-1","2t-u-1","2t-v-1","kFaceConversionEnums","kFaceToFaceRemap","to","getFaceWrapIndex","applyFaceWrap","generateSamplePointsCube","face","theta","phi","sinTheta","cosTheta","sinPhi","cosPhi","ux","uy","uz","halfTexel","quantizedUVW","wgslTypeFor","type","isArray","wgslExpr","binKey","name","value","buildBinnedCalls","fields","prototype","bitcastToU32","expr","binCalls","bins","key","binIdx","s_deviceToPipelines","structs","body","dataFields","callCount","binned","dataBuffer","rtWidth","pipelines","gpuSampler","resultBuffer","copyTextureToBuffer","outIdx","bin"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/texture_utils.ts"],"sourcesContent":["import { keysOf } from '../../../../../../common/util/data_tables.js';\nimport { assert, range, unreachable } from '../../../../../../common/util/util.js';\nimport {\n  EncodableTextureFormat,\n  isCompressedTextureFormat,\n  kEncodableTextureFormats,\n  kTextureFormatInfo,\n} from '../../../../../format_info.js';\nimport { GPUTest, TextureTestMixinType } from '../../../../../gpu_test.js';\nimport { float32ToUint32 } from '../../../../../util/conversion.js';\nimport {\n  align,\n  clamp,\n  dotProduct,\n  hashU32,\n  lcm,\n  lerp,\n  quantizeToF32,\n} from '../../../../../util/math.js';\nimport {\n  effectiveViewDimensionForDimension,\n  physicalMipSizeFromTexture,\n  virtualMipSize,\n} from '../../../../../util/texture/base.js';\nimport {\n  kTexelRepresentationInfo,\n  PerTexelComponent,\n  TexelRepresentationInfo,\n} from '../../../../../util/texture/texel_data.js';\nimport { TexelView } from '../../../../../util/texture/texel_view.js';\nimport { createTextureFromTexelViews } from '../../../../../util/texture.js';\nimport { reifyExtent3D } from '../../../../../util/unions.js';\n\nfunction getLimitValue(v: number) {\n  switch (v) {\n    case Number.POSITIVE_INFINITY:\n      return 1000;\n    case Number.NEGATIVE_INFINITY:\n      return -1000;\n    default:\n      return v;\n  }\n}\n\nfunction getValueBetweenMinAndMaxTexelValueInclusive(\n  rep: TexelRepresentationInfo,\n  normalized: number\n) {\n  return lerp(\n    getLimitValue(rep.numericRange!.min),\n    getLimitValue(rep.numericRange!.max),\n    normalized\n  );\n}\n\n/**\n * We need the software rendering to do the same interpolation as the hardware\n * rendered so for -srgb formats we set the TexelView to an -srgb format as\n * TexelView handles this case. Note: It might be nice to add rgba32float-srgb\n * or something similar to TexelView.\n */\nexport function getTexelViewFormatForTextureFormat(format: GPUTextureFormat) {\n  return format.endsWith('-srgb') ? 'rgba8unorm-srgb' : 'rgba32float';\n}\n\n/**\n * Creates a TexelView filled with random values.\n */\nexport function createRandomTexelView(info: {\n  format: GPUTextureFormat;\n  size: GPUExtent3D;\n}): TexelView {\n  const rep = kTexelRepresentationInfo[info.format as EncodableTextureFormat];\n  const generator = (coords: Required<GPUOrigin3DDict>): Readonly<PerTexelComponent<number>> => {\n    const texel: PerTexelComponent<number> = {};\n    for (const component of rep.componentOrder) {\n      const rnd = hashU32(coords.x, coords.y, coords.z, component.charCodeAt(0));\n      const normalized = clamp(rnd / 0xffffffff, { min: 0, max: 1 });\n      texel[component] = getValueBetweenMinAndMaxTexelValueInclusive(rep, normalized);\n    }\n    return quantize(texel, rep);\n  };\n  return TexelView.fromTexelsAsColors(info.format as EncodableTextureFormat, generator);\n}\n\n/**\n * Creates a mip chain of TexelViews filled with random values\n */\nexport function createRandomTexelViewMipmap(info: {\n  format: GPUTextureFormat;\n  size: GPUExtent3D;\n  mipLevelCount?: number;\n  dimension?: GPUTextureDimension;\n}): TexelView[] {\n  const mipLevelCount = info.mipLevelCount ?? 1;\n  const dimension = info.dimension ?? '2d';\n  return range(mipLevelCount, i =>\n    createRandomTexelView({\n      format: info.format,\n      size: virtualMipSize(dimension, info.size, i),\n    })\n  );\n}\n\nexport type vec1 = [number]; // Because it's easy to deal with if these types are all array of number\nexport type vec2 = [number, number];\nexport type vec3 = [number, number, number];\nexport type vec4 = [number, number, number, number];\nexport type Dimensionality = vec1 | vec2 | vec3;\n\ntype TextureCallArgKeys = keyof TextureCallArgs<vec1>;\nconst kTextureCallArgNames: TextureCallArgKeys[] = [\n  'coords',\n  'mipLevel',\n  'arrayIndex',\n  'ddx',\n  'ddy',\n  'offset',\n];\n\nexport interface TextureCallArgs<T extends Dimensionality> {\n  coords?: T;\n  mipLevel?: number;\n  arrayIndex?: number;\n  ddx?: T;\n  ddy?: T;\n  offset?: T;\n}\n\nexport interface TextureCall<T extends Dimensionality> extends TextureCallArgs<T> {\n  builtin: 'textureSample' | 'textureLoad';\n  coordType: 'f';\n}\n\nfunction toArray(coords: Dimensionality): number[] {\n  if (coords instanceof Array) {\n    return coords;\n  }\n  return [coords];\n}\n\nfunction quantize(texel: PerTexelComponent<number>, repl: TexelRepresentationInfo) {\n  return repl.bitsToNumber(repl.unpackBits(new Uint8Array(repl.pack(repl.encode(texel)))));\n}\n\nfunction apply(a: number[], b: number[], op: (x: number, y: number) => number) {\n  assert(a.length === b.length, `apply(${a}, ${b}): arrays must have same length`);\n  return a.map((v, i) => op(v, b[i]));\n}\n\n/**\n * At the corner of a cubemap we need to sample just 3 texels, not 4.\n * The texels are in\n *\n *   0:  (u,v)\n *   1:  (u + 1, v)\n *   2:  (u, v + 1)\n *   3:  (u + 1, v + 1)\n *\n * We pass in the original 2d (converted from cubemap) texture coordinate.\n * If it's within half a pixel of the edge in both directions then it's\n * a corner so we return the index of the one texel that's not needed.\n * Otherwise we return -1.\n */\nfunction getUnusedCubeCornerSampleIndex(textureSize: number, coords: vec3) {\n  const u = coords[0] * textureSize;\n  const v = coords[1] * textureSize;\n  if (v < 0.5) {\n    if (u < 0.5) {\n      return 0;\n    } else if (u >= textureSize - 0.5) {\n      return 1;\n    }\n  } else if (v >= textureSize - 0.5) {\n    if (u < 0.5) {\n      return 2;\n    } else if (u >= textureSize - 0.5) {\n      return 3;\n    }\n  }\n  return -1;\n}\n\nconst add = (a: number[], b: number[]) => apply(a, b, (x, y) => x + y);\n\nexport interface Texture {\n  texels: TexelView[];\n  descriptor: GPUTextureDescriptor;\n  viewDescriptor: GPUTextureViewDescriptor;\n}\n\n/**\n * Returns the expect value for a WGSL builtin texture function for a single\n * mip level\n */\nexport function softwareTextureReadMipLevel<T extends Dimensionality>(\n  call: TextureCall<T>,\n  texture: Texture,\n  sampler: GPUSamplerDescriptor,\n  mipLevel: number\n): PerTexelComponent<number> {\n  const rep = kTexelRepresentationInfo[texture.texels[mipLevel].format];\n  const textureSize = virtualMipSize(\n    texture.descriptor.dimension || '2d',\n    texture.descriptor.size,\n    mipLevel\n  );\n  const addressMode = [\n    sampler.addressModeU ?? 'clamp-to-edge',\n    sampler.addressModeV ?? 'clamp-to-edge',\n    sampler.addressModeW ?? 'clamp-to-edge',\n  ];\n\n  const load = (at: number[]) =>\n    texture.texels[mipLevel].color({\n      x: Math.floor(at[0]),\n      y: Math.floor(at[1] ?? 0),\n      z: Math.floor(at[2] ?? 0),\n    });\n\n  const isCube = texture.viewDescriptor.dimension === 'cube';\n\n  switch (call.builtin) {\n    case 'textureSample': {\n      let coords = toArray(call.coords!);\n\n      if (isCube) {\n        coords = convertCubeCoordToNormalized3DTextureCoord(coords as vec3);\n      }\n\n      // convert normalized to absolute texel coordinate\n      // ┌───┬───┬───┬───┐\n      // │ a │   │   │   │  norm: a = 1/8, b = 7/8\n      // ├───┼───┼───┼───┤   abs: a = 0,   b = 3\n      // │   │   │   │   │\n      // ├───┼───┼───┼───┤\n      // │   │   │   │   │\n      // ├───┼───┼───┼───┤\n      // │   │   │   │ b │\n      // └───┴───┴───┴───┘\n      let at = coords.map((v, i) => v * textureSize[i] - 0.5);\n\n      // Apply offset in whole texel units\n      // This means the offset is added at each mip level in texels. There's no\n      // scaling for each level.\n      if (call.offset !== undefined) {\n        at = add(at, toArray(call.offset));\n      }\n\n      const samples: { at: number[]; weight: number }[] = [];\n\n      const filter = sampler.minFilter;\n      switch (filter) {\n        case 'linear': {\n          // 'p0' is the lower texel for 'at'\n          const p0 = at.map(v => Math.floor(v));\n          // 'p1' is the higher texel for 'at'\n          // If it's cube then don't advance Z.\n          const p1 = p0.map((v, i) => v + (isCube ? (i === 2 ? 0 : 1) : 1));\n\n          // interpolation weights for p0 and p1\n          const p1W = at.map((v, i) => v - p0[i]);\n          const p0W = p1W.map(v => 1 - v);\n\n          switch (coords.length) {\n            case 1:\n              samples.push({ at: p0, weight: p0W[0] });\n              samples.push({ at: p1, weight: p1W[0] });\n              break;\n            case 2: {\n              samples.push({ at: p0, weight: p0W[0] * p0W[1] });\n              samples.push({ at: [p1[0], p0[1]], weight: p1W[0] * p0W[1] });\n              samples.push({ at: [p0[0], p1[1]], weight: p0W[0] * p1W[1] });\n              samples.push({ at: p1, weight: p1W[0] * p1W[1] });\n              break;\n            }\n            case 3: {\n              // cube sampling, here in the software renderer, is the same\n              // as 2d sampling. We'll sample at most 4 texels. The weights are\n              // the same as if it was just one plane. If the points fall outside\n              // the slice they'll be wrapped by wrapFaceCoordToCubeFaceAtEdgeBoundaries\n              // below.\n              if (isCube) {\n                samples.push({ at: p0, weight: p0W[0] * p0W[1] });\n                samples.push({ at: [p1[0], p0[1], p0[2]], weight: p1W[0] * p0W[1] });\n                samples.push({ at: [p0[0], p1[1], p0[2]], weight: p0W[0] * p1W[1] });\n                samples.push({ at: p1, weight: p1W[0] * p1W[1] });\n                const ndx = getUnusedCubeCornerSampleIndex(textureSize[0], coords as vec3);\n                if (ndx >= 0) {\n                  // # Issues with corners of cubemaps\n                  //\n                  // note: I tried multiple things here\n                  //\n                  // 1. distribute 1/3 of the weight of the removed sample to each of the remaining samples\n                  // 2. distribute 1/2 of the weight of the removed sample to the 2 samples that are not the \"main\" sample.\n                  // 3. normalize the weights of the remaining 3 samples.\n                  //\n                  // none of them matched the M1 in all cases. Checking the dEQP I found this comment\n                  //\n                  // > If any of samples is out of both edges, implementations can do pretty much anything according to spec.\n                  // https://github.com/KhronosGroup/VK-GL-CTS/blob/d2d6aa65607383bb29c8398fe6562c6b08b4de57/framework/common/tcuTexCompareVerifier.cpp#L882\n                  //\n                  // If I understand this correctly it matches the OpenGL ES 3.1 spec it says\n                  // it's implementation defined.\n                  //\n                  // > OpenGL ES 3.1 section 8.12.1 Seamless Cubemap Filtering\n                  // >\n                  // > -  If a texture sample location would lie in the texture\n                  // >    border in both u and v (in one of the corners of the\n                  // >    cube), there is no unique neighboring face from which to\n                  // >    extract one texel. The recommended method to generate this\n                  // >    texel is to average the values of the three available\n                  // >    samples. However, implementations are free to construct\n                  // >    this fourth texel in another way, so long as, when the\n                  // >    three available samples have the same value, this texel\n                  // >    also has that value.\n                  //\n                  // I'm not sure what \"average the values of the three available samples\"\n                  // means. To me that would be (a+b+c)/3 or in other words, set all the\n                  // weights to 0.33333 but that's not what the M1 is doing.\n                  unreachable('corners of cubemaps are not testable');\n                }\n              } else {\n                const p = [p0, p1];\n                const w = [p0W, p1W];\n                for (let z = 0; z < 2; ++z) {\n                  for (let y = 0; y < 2; ++y) {\n                    for (let x = 0; x < 2; ++x) {\n                      samples.push({\n                        at: [p[x][0], p[y][1], p[z][2]],\n                        weight: w[x][0] * w[y][1] * w[z][2],\n                      });\n                    }\n                  }\n                }\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case 'nearest': {\n          const p = at.map(v => Math.round(quantizeToF32(v)));\n          samples.push({ at: p, weight: 1 });\n          break;\n        }\n        default:\n          unreachable();\n      }\n\n      const out: PerTexelComponent<number> = {};\n      const ss = [];\n      for (const sample of samples) {\n        const c = isCube\n          ? wrapFaceCoordToCubeFaceAtEdgeBoundaries(textureSize[0], sample.at as vec3)\n          : applyAddressModesToCoords(addressMode, textureSize, sample.at);\n        const v = load(c);\n        ss.push(v);\n        for (const component of rep.componentOrder) {\n          out[component] = (out[component] ?? 0) + v[component]! * sample.weight;\n        }\n      }\n\n      return out;\n    }\n    case 'textureLoad': {\n      return load(toArray(call.coords!));\n    }\n  }\n}\n\n/**\n * The software version of a texture builtin (eg: textureSample)\n * Note that this is not a complete implementation. Rather it's only\n * what's needed to generate the correct expected value for the tests.\n */\nexport function softwareTextureRead<T extends Dimensionality>(\n  call: TextureCall<T>,\n  texture: Texture,\n  sampler: GPUSamplerDescriptor\n): PerTexelComponent<number> {\n  assert(call.ddx !== undefined);\n  assert(call.ddy !== undefined);\n  const rep = kTexelRepresentationInfo[texture.texels[0].format];\n  const texSize = reifyExtent3D(texture.descriptor.size);\n  const textureSize = [texSize.width, texSize.height];\n\n  // ddx and ddy are the values that would be passed to textureSampleGrad\n  // If we're emulating textureSample then they're the computed derivatives\n  // such that if we passed them to textureSampleGrad they'd produce the\n  // same result.\n  const ddx: readonly number[] = typeof call.ddx === 'number' ? [call.ddx] : call.ddx;\n  const ddy: readonly number[] = typeof call.ddy === 'number' ? [call.ddy] : call.ddy;\n\n  // Compute the mip level the same way textureSampleGrad does\n  const scaledDdx = ddx.map((v, i) => v * textureSize[i]);\n  const scaledDdy = ddy.map((v, i) => v * textureSize[i]);\n  const dotDDX = dotProduct(scaledDdx, scaledDdx);\n  const dotDDY = dotProduct(scaledDdy, scaledDdy);\n  const deltaMax = Math.max(dotDDX, dotDDY);\n  // MAINTENANCE_TODO: handle texture view baseMipLevel and mipLevelCount?\n  const mipLevel = 0.5 * Math.log2(deltaMax);\n\n  const mipLevelCount = texture.texels.length;\n  const maxLevel = mipLevelCount - 1;\n\n  switch (sampler.mipmapFilter) {\n    case 'linear': {\n      const clampedMipLevel = clamp(mipLevel, { min: 0, max: maxLevel });\n      const baseMipLevel = Math.floor(clampedMipLevel);\n      const nextMipLevel = Math.ceil(clampedMipLevel);\n      const t0 = softwareTextureReadMipLevel<T>(call, texture, sampler, baseMipLevel);\n      const t1 = softwareTextureReadMipLevel<T>(call, texture, sampler, nextMipLevel);\n      const mix = mipLevel % 1;\n      const values = [\n        { v: t0, weight: 1 - mix },\n        { v: t1, weight: mix },\n      ];\n      const out: PerTexelComponent<number> = {};\n      for (const { v, weight } of values) {\n        for (const component of rep.componentOrder) {\n          out[component] = (out[component] ?? 0) + v[component]! * weight;\n        }\n      }\n      return out;\n    }\n    default: {\n      const baseMipLevel = Math.floor(\n        clamp(mipLevel + 0.5, { min: 0, max: texture.texels.length - 1 })\n      );\n      return softwareTextureReadMipLevel<T>(call, texture, sampler, baseMipLevel);\n    }\n  }\n}\n\nexport type TextureTestOptions = {\n  ddx?: number; // the derivative we want at sample time\n  ddy?: number;\n  uvwStart?: readonly [number, number]; // the starting uv value (these are used make the coordinates negative as it uncovered issues on some hardware)\n  offset?: readonly [number, number]; // a constant offset\n};\n\n/**\n * Checks the result of each call matches the expected result.\n */\nexport async function checkCallResults<T extends Dimensionality>(\n  device: GPUDevice,\n  texture: Texture,\n  textureType: string,\n  sampler: GPUSamplerDescriptor,\n  calls: TextureCall<T>[],\n  results: PerTexelComponent<number>[]\n) {\n  const errs: string[] = [];\n  const rep = kTexelRepresentationInfo[texture.texels[0].format];\n  const maxFractionalDiff = getMaxFractionalDiffForTextureFormat(texture.descriptor.format);\n  for (let callIdx = 0; callIdx < calls.length; callIdx++) {\n    const call = calls[callIdx];\n    const got = results[callIdx];\n    const expect = softwareTextureReadMipLevel(call, texture, sampler, 0);\n\n    const gULP = rep.bitsToULPFromZero(rep.numberToBits(got));\n    const eULP = rep.bitsToULPFromZero(rep.numberToBits(expect));\n    for (const component of rep.componentOrder) {\n      const g = got[component]!;\n      const e = expect[component]!;\n      const absDiff = Math.abs(g - e);\n      const ulpDiff = Math.abs(gULP[component]! - eULP[component]!);\n      const relDiff = absDiff / Math.max(Math.abs(g), Math.abs(e));\n      if (ulpDiff > 3 && absDiff > maxFractionalDiff) {\n        const desc = describeTextureCall(call);\n        errs.push(`component was not as expected:\n      call: ${desc}  // #${callIdx}\n component: ${component}\n       got: ${g}\n  expected: ${e}\n  abs diff: ${absDiff.toFixed(4)}\n  rel diff: ${(relDiff * 100).toFixed(2)}%\n  ulp diff: ${ulpDiff}\n  sample points:\n`);\n        const expectedSamplePoints = [\n          'expected:',\n          ...(await identifySamplePoints(texture, (texels: TexelView) => {\n            return Promise.resolve(\n              softwareTextureReadMipLevel(\n                call,\n                {\n                  texels: [texels],\n                  descriptor: texture.descriptor,\n                  viewDescriptor: texture.viewDescriptor,\n                },\n                sampler,\n                0\n              )\n            );\n          })),\n        ];\n        const gotSamplePoints = [\n          'got:',\n          ...(await identifySamplePoints(texture, async (texels: TexelView) => {\n            const gpuTexture = createTextureFromTexelViews(device, [texels], texture.descriptor);\n            const result = (\n              await doTextureCalls(\n                device,\n                gpuTexture,\n                texture.viewDescriptor,\n                textureType,\n                sampler,\n                [call]\n              )\n            )[0];\n            gpuTexture.destroy();\n            return result;\n          })),\n        ];\n        errs.push(layoutTwoColumns(expectedSamplePoints, gotSamplePoints).join('\\n'));\n        errs.push('', '');\n      }\n    }\n  }\n\n  return errs.length > 0 ? new Error(errs.join('\\n')) : undefined;\n}\n\n/**\n * \"Renders a quad\" to a TexelView with the given parameters,\n * sampling from the given Texture.\n */\nexport function softwareRasterize<T extends Dimensionality>(\n  texture: Texture,\n  sampler: GPUSamplerDescriptor,\n  targetSize: [number, number],\n  options: TextureTestOptions\n) {\n  const [width, height] = targetSize;\n  const { ddx = 1, ddy = 1, uvwStart = [0, 0] } = options;\n  const format = 'rgba32float';\n\n  const textureSize = reifyExtent3D(texture.descriptor.size);\n\n  // MAINTENANCE_TODO: Consider passing these in as a similar computation\n  // happens in putDataInTextureThenDrawAndCheckResultsComparedToSoftwareRasterizer.\n  // The issue is there, the calculation is \"what do we need to multiply the unitQuad\n  // by to get the derivatives we want\". The calculation here is \"what coordinate\n  // will we get for a given frag coordinate\". It turns out to be the same calculation\n  // but needs rephrasing them so they are more obviously the same would help\n  // consolidate them into one calculation.\n  const screenSpaceUMult = (ddx * width) / textureSize.width;\n  const screenSpaceVMult = (ddy * height) / textureSize.height;\n\n  const rep = kTexelRepresentationInfo[format];\n\n  const expData = new Float32Array(width * height * 4);\n  for (let y = 0; y < height; ++y) {\n    const fragY = height - y - 1 + 0.5;\n    for (let x = 0; x < width; ++x) {\n      const fragX = x + 0.5;\n      // This code calculates the same value that will be passed to\n      // `textureSample` in the fragment shader for a given frag coord (see the\n      // WGSL code which uses the same formula, but using interpolation). That\n      // shader renders a clip space quad and includes a inter-stage \"uv\"\n      // coordinates that start with a unit quad (0,0) to (1,1) and is\n      // multiplied by ddx,ddy and as added in uStart and vStart\n      //\n      // uv = unitQuad * vec2(ddx, ddy) + vec2(vStart, uStart);\n      //\n      // softwareTextureRead<T> simulates a single call to `textureSample` so\n      // here we're computing the `uv` value that will be passed for a\n      // particular fragment coordinate. fragX / width, fragY / height provides\n      // the unitQuad value.\n      //\n      // ddx and ddy in this case are the derivative values we want to test. We\n      // pass those into the softwareTextureRead<T> as they would normally be\n      // derived from the change in coord.\n      const coords = [\n        (fragX / width) * screenSpaceUMult + uvwStart[0],\n        (fragY / height) * screenSpaceVMult + uvwStart[1],\n      ] as T;\n      const call: TextureCall<T> = {\n        builtin: 'textureSample',\n        coordType: 'f',\n        coords,\n        ddx: [ddx / textureSize.width, 0] as T,\n        ddy: [0, ddy / textureSize.height] as T,\n        offset: options.offset as T,\n      };\n      const sample = softwareTextureRead<T>(call, texture, sampler);\n      const rgba = { R: 0, G: 0, B: 0, A: 1, ...sample };\n      const asRgba32Float = new Float32Array(rep.pack(rgba));\n      expData.set(asRgba32Float, (y * width + x) * 4);\n    }\n  }\n\n  return TexelView.fromTextureDataByReference(format, new Uint8Array(expData.buffer), {\n    bytesPerRow: width * 4 * 4,\n    rowsPerImage: height,\n    subrectOrigin: [0, 0, 0],\n    subrectSize: targetSize,\n  });\n}\n\n/**\n * Render textured quad to an rgba32float texture.\n */\nexport function drawTexture(\n  t: GPUTest & TextureTestMixinType,\n  texture: GPUTexture,\n  samplerDesc: GPUSamplerDescriptor,\n  options: TextureTestOptions\n) {\n  const device = t.device;\n  const { ddx = 1, ddy = 1, uvwStart = [0, 0, 0], offset } = options;\n\n  const format = 'rgba32float';\n  const renderTarget = device.createTexture({\n    format,\n    size: [32, 32],\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n  });\n  t.trackForCleanup(renderTarget);\n\n  // Compute the amount we need to multiply the unitQuad by get the\n  // derivatives we want.\n  const uMult = (ddx * renderTarget.width) / texture.width;\n  const vMult = (ddy * renderTarget.height) / texture.height;\n\n  const offsetWGSL = offset ? `, vec2i(${offset[0]},${offset[1]})` : '';\n\n  const code = `\nstruct InOut {\n  @builtin(position) pos: vec4f,\n  @location(0) uv: vec2f,\n};\n\n@vertex fn vs(@builtin(vertex_index) vertex_index : u32) -> InOut {\n  let positions = array(\n    vec2f(-1,  1), vec2f( 1,  1),\n    vec2f(-1, -1), vec2f( 1, -1),\n  );\n  let pos = positions[vertex_index];\n  return InOut(\n    vec4f(pos, 0, 1),\n    (pos * 0.5 + 0.5) * vec2f(${uMult}, ${vMult}) + vec2f(${uvwStart[0]}, ${uvwStart[1]}),\n  );\n}\n\n@group(0) @binding(0) var          T    : texture_2d<f32>;\n@group(0) @binding(1) var          S    : sampler;\n\n@fragment fn fs(v: InOut) -> @location(0) vec4f {\n  return textureSample(T, S, v.uv${offsetWGSL});\n}\n`;\n\n  const shaderModule = device.createShaderModule({ code });\n\n  const pipeline = device.createRenderPipeline({\n    layout: 'auto',\n    vertex: { module: shaderModule },\n    fragment: {\n      module: shaderModule,\n      targets: [{ format }],\n    },\n    primitive: { topology: 'triangle-strip' },\n  });\n\n  const sampler = device.createSampler(samplerDesc);\n\n  const bindGroup = device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [\n      { binding: 0, resource: texture.createView() },\n      { binding: 1, resource: sampler },\n    ],\n  });\n\n  const encoder = device.createCommandEncoder();\n\n  const renderPass = encoder.beginRenderPass({\n    colorAttachments: [{ view: renderTarget.createView(), loadOp: 'clear', storeOp: 'store' }],\n  });\n\n  renderPass.setPipeline(pipeline);\n  renderPass.setBindGroup(0, bindGroup);\n  renderPass.draw(4);\n  renderPass.end();\n  device.queue.submit([encoder.finish()]);\n\n  return renderTarget;\n}\n\nfunction getMaxFractionalDiffForTextureFormat(format: GPUTextureFormat) {\n  // Note: I'm not sure what we should do here. My assumption is, given texels\n  // have random values, the difference between 2 texels can be very large. In\n  // the current version, for a float texture they can be +/- 1000 difference.\n  // Sampling is very GPU dependent. So if one pixel gets a random value of\n  // -1000 and the neighboring pixel gets +1000 then any slight variation in how\n  // sampling is applied will generate a large difference when interpolating\n  // between -1000 and +1000.\n  //\n  // We could make some entry for every format but for now I just put the\n  // tolerances here based on format texture suffix.\n  //\n  // It's possible the math in the software rasterizer is just bad but the\n  // results certainly seem close.\n  //\n  // These tolerances started from the OpenGL ES dEQP tests.\n  // Those tests always render to an rgba8unorm texture. The shaders do effectively\n  //\n  //   result = textureSample(...) * scale + bias\n  //\n  // to get the results in a 0.0 to 1.0 range. After reading the values back they\n  // expand them to their original ranges with\n  //\n  //   value = (result - bias) / scale;\n  //\n  // Tolerances from dEQP\n  // --------------------\n  // 8unorm: 3.9 / 255\n  // 8snorm: 7.9 / 128\n  // 2unorm: 7.9 / 512\n  // ufloat: 156.249\n  //  float: 31.2498\n  //\n  // The numbers below have been set empirically to get the tests to pass on all\n  // devices. The devices with the most divergence from the calculated expected\n  // values are MacOS Intel and AMD.\n  //\n  // MAINTENANCE_TODO: Double check the software rendering math and lower these\n  // tolerances if possible.\n\n  if (format.includes('8unorm')) {\n    return 7 / 255;\n  } else if (format.includes('2unorm')) {\n    return 9 / 512;\n  } else if (format.includes('unorm')) {\n    return 7 / 255;\n  } else if (format.includes('8snorm')) {\n    return 7.9 / 128;\n  } else if (format.includes('snorm')) {\n    return 7.9 / 128;\n  } else if (format.endsWith('ufloat')) {\n    return 156.249;\n  } else if (format.endsWith('float')) {\n    return 44;\n  } else {\n    unreachable();\n  }\n}\n\nexport function checkTextureMatchesExpectedTexelView(\n  t: GPUTest & TextureTestMixinType,\n  format: GPUTextureFormat,\n  actualTexture: GPUTexture,\n  expectedTexelView: TexelView\n) {\n  const maxFractionalDiff = getMaxFractionalDiffForTextureFormat(format);\n  t.expectTexelViewComparisonIsOkInTexture(\n    { texture: actualTexture },\n    expectedTexelView,\n    [actualTexture.width, actualTexture.height],\n    { maxFractionalDiff }\n  );\n}\n\n/**\n * Puts data in a texture. Renders a quad to a rgba32float. Then \"software renders\"\n * to a TexelView the expected result and compares the rendered texture to the\n * expected TexelView.\n */\nexport async function putDataInTextureThenDrawAndCheckResultsComparedToSoftwareRasterizer<\n  T extends Dimensionality,\n>(\n  t: GPUTest & TextureTestMixinType,\n  descriptor: GPUTextureDescriptor,\n  viewDescriptor: GPUTextureViewDescriptor,\n  samplerDesc: GPUSamplerDescriptor,\n  options: TextureTestOptions\n) {\n  const { texture, texels } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n\n  const actualTexture = drawTexture(t, texture, samplerDesc, options);\n  const expectedTexelView = softwareRasterize<T>(\n    { descriptor, texels, viewDescriptor },\n    samplerDesc,\n    [actualTexture.width, actualTexture.height],\n    options\n  );\n\n  checkTextureMatchesExpectedTexelView(t, texture.format, actualTexture, expectedTexelView);\n}\n\nconst sumOfCharCodesOfString = (s: unknown) =>\n  String(s)\n    .split('')\n    .reduce((sum, c) => sum + c.charCodeAt(0), 0);\n\n/**\n * Makes a function that fills a block portion of a Uint8Array with random valid data\n * for an astc block.\n *\n * The astc format is fairly complicated. For now we do the simplest thing.\n * which is to set the block as a \"void-extent\" block (a solid color).\n * This makes our test have far less precision.\n *\n * MAINTENANCE_TODO: generate other types of astc blocks. One option would\n * be to randomly select from set of pre-made blocks.\n *\n * See Spec:\n * https://registry.khronos.org/OpenGL/extensions/KHR/KHR_texture_compression_astc_hdr.txt\n */\nfunction makeAstcBlockFiller(format: GPUTextureFormat) {\n  const info = kTextureFormatInfo[format];\n  const bytesPerBlock = info.color!.bytes;\n  return (data: Uint8Array, offset: number, hashBase: number) => {\n    // set the block to be a void-extent block\n    data.set(\n      [\n        0b1111_1100, // 0\n        0b1111_1101, // 1\n        0b1111_1111, // 2\n        0b1111_1111, // 3\n        0b1111_1111, // 4\n        0b1111_1111, // 5\n        0b1111_1111, // 6\n        0b1111_1111, // 7\n      ],\n      offset\n    );\n    // fill the rest of the block with random data\n    const end = offset + bytesPerBlock;\n    for (let i = offset + 8; i < end; ++i) {\n      data[i] = hashU32(hashBase, i);\n    }\n  };\n}\n\n/**\n * Makes a function that fills a block portion of a Uint8Array with random bytes.\n */\nfunction makeRandomBytesBlockFiller(format: GPUTextureFormat) {\n  const info = kTextureFormatInfo[format];\n  const bytesPerBlock = info.color!.bytes;\n  return (data: Uint8Array, offset: number, hashBase: number) => {\n    const end = offset + bytesPerBlock;\n    for (let i = offset; i < end; ++i) {\n      data[i] = hashU32(hashBase, i);\n    }\n  };\n}\n\nfunction getBlockFiller(format: GPUTextureFormat) {\n  if (format.startsWith('astc')) {\n    return makeAstcBlockFiller(format);\n  } else {\n    return makeRandomBytesBlockFiller(format);\n  }\n}\n\n/**\n * Fills a texture with random data.\n */\nexport function fillTextureWithRandomData(device: GPUDevice, texture: GPUTexture) {\n  const info = kTextureFormatInfo[texture.format];\n  const hashBase =\n    sumOfCharCodesOfString(texture.format) +\n    sumOfCharCodesOfString(texture.dimension) +\n    texture.width +\n    texture.height +\n    texture.depthOrArrayLayers +\n    texture.mipLevelCount;\n  const bytesPerBlock = info.color!.bytes;\n  const fillBlock = getBlockFiller(texture.format);\n  for (let mipLevel = 0; mipLevel < texture.mipLevelCount; ++mipLevel) {\n    const size = physicalMipSizeFromTexture(texture, mipLevel);\n    const blocksAcross = Math.ceil(size[0] / info.blockWidth);\n    const blocksDown = Math.ceil(size[1] / info.blockHeight);\n    const bytesPerRow = blocksAcross * bytesPerBlock;\n    const bytesNeeded = bytesPerRow * blocksDown * size[2];\n    const data = new Uint8Array(bytesNeeded);\n    for (let offset = 0; offset < bytesNeeded; offset += bytesPerBlock) {\n      fillBlock(data, offset, hashBase);\n    }\n    device.queue.writeTexture(\n      { texture, mipLevel },\n      data,\n      { bytesPerRow, rowsPerImage: blocksDown },\n      size\n    );\n  }\n}\n\nconst s_readTextureToRGBA32DeviceToPipeline = new WeakMap<\n  GPUDevice,\n  Map<GPUTextureViewDimension, GPUComputePipeline>\n>();\n\n// MAINTENANCE_TODO: remove cast once textureBindingViewDimension is added to IDL\nfunction getEffectiveViewDimension(\n  t: GPUTest,\n  descriptor: GPUTextureDescriptor\n): GPUTextureViewDimension {\n  const { textureBindingViewDimension } = descriptor as unknown as {\n    textureBindingViewDimension?: GPUTextureViewDimension;\n  };\n  const size = reifyExtent3D(descriptor.size);\n  return effectiveViewDimensionForDimension(\n    textureBindingViewDimension,\n    descriptor.dimension,\n    size.depthOrArrayLayers\n  );\n}\n\nexport async function readTextureToTexelViews(\n  t: GPUTest,\n  texture: GPUTexture,\n  descriptor: GPUTextureDescriptor,\n  format: EncodableTextureFormat\n) {\n  const device = t.device;\n  const viewDimensionToPipelineMap =\n    s_readTextureToRGBA32DeviceToPipeline.get(device) ??\n    new Map<GPUTextureViewDimension, GPUComputePipeline>();\n  s_readTextureToRGBA32DeviceToPipeline.set(device, viewDimensionToPipelineMap);\n\n  const viewDimension = getEffectiveViewDimension(t, descriptor);\n  let pipeline = viewDimensionToPipelineMap.get(viewDimension);\n  if (!pipeline) {\n    let textureWGSL;\n    let loadWGSL;\n    switch (viewDimension) {\n      case '2d':\n        textureWGSL = 'texture_2d<f32>';\n        loadWGSL = 'textureLoad(tex, global_invocation_id.xy, mipLevel)';\n        break;\n      case 'cube-array': // cube-array doesn't exist in compat so we can just use 2d_array for this\n      case '2d-array':\n        textureWGSL = 'texture_2d_array<f32>';\n        loadWGSL = `\n          textureLoad(\n              tex,\n              global_invocation_id.xy,\n              global_invocation_id.z,\n              mipLevel)`;\n        break;\n      case '3d':\n        textureWGSL = 'texture_3d<f32>';\n        loadWGSL = 'textureLoad(tex, global_invocation_id.xyz, mipLevel)';\n        break;\n      case 'cube':\n        textureWGSL = 'texture_cube<f32>';\n        loadWGSL = `\n          textureLoadCubeAs2DArray(tex, global_invocation_id.xy, global_invocation_id.z, mipLevel);\n        `;\n        break;\n      default:\n        unreachable(`unsupported view: ${viewDimension}`);\n    }\n    const module = device.createShaderModule({\n      code: `\n        const faceMat = array(\n          mat3x3f( 0,  0,  -2,  0, -2,   0,  1,  1,   1),   // pos-x\n          mat3x3f( 0,  0,   2,  0, -2,   0, -1,  1,  -1),   // neg-x\n          mat3x3f( 2,  0,   0,  0,  0,   2, -1,  1,  -1),   // pos-y\n          mat3x3f( 2,  0,   0,  0,  0,  -2, -1, -1,   1),   // neg-y\n          mat3x3f( 2,  0,   0,  0, -2,   0, -1,  1,   1),   // pos-z\n          mat3x3f(-2,  0,   0,  0, -2,   0,  1,  1,  -1));  // neg-z\n\n        // needed for compat mode.\n        fn textureLoadCubeAs2DArray(tex: texture_cube<f32>, coord: vec2u, layer: u32, mipLevel: u32) -> vec4f {\n          // convert texel coord normalized coord\n          let size = textureDimensions(tex, mipLevel);\n          let uv = (vec2f(coord) + 0.5) / vec2f(size.xy);\n\n          // convert uv + layer into cube coord\n          let cubeCoord = faceMat[layer] * vec3f(uv, 1.0);\n\n          return textureSampleLevel(tex, smp, cubeCoord, f32(mipLevel));\n        }\n\n        @group(0) @binding(0) var<uniform> mipLevel: u32;\n        @group(0) @binding(1) var tex: ${textureWGSL};\n        @group(0) @binding(2) var smp: sampler;\n        @group(0) @binding(3) var<storage, read_write> data: array<vec4f>;\n\n        @compute @workgroup_size(1) fn cs(\n          @builtin(global_invocation_id) global_invocation_id : vec3<u32>) {\n          _ = smp;\n          let size = textureDimensions(tex, mipLevel);\n          let ndx = global_invocation_id.z * size.x * size.y +\n                    global_invocation_id.y * size.x +\n                    global_invocation_id.x;\n          data[ndx] = ${loadWGSL};\n        }\n      `,\n    });\n    pipeline = device.createComputePipeline({ layout: 'auto', compute: { module } });\n    viewDimensionToPipelineMap.set(viewDimension, pipeline);\n  }\n\n  const encoder = device.createCommandEncoder();\n\n  const readBuffers = [];\n  for (let mipLevel = 0; mipLevel < texture.mipLevelCount; ++mipLevel) {\n    const size = virtualMipSize(texture.dimension, texture, mipLevel);\n\n    const uniformValues = new Uint32Array([mipLevel, 0, 0, 0]); // min size is 16 bytes\n    const uniformBuffer = device.createBuffer({\n      size: uniformValues.byteLength,\n      usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n    });\n    t.trackForCleanup(uniformBuffer);\n    device.queue.writeBuffer(uniformBuffer, 0, uniformValues);\n\n    const storageBuffer = device.createBuffer({\n      size: size[0] * size[1] * size[2] * 4 * 4, // rgba32float\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n    });\n    t.trackForCleanup(storageBuffer);\n\n    const readBuffer = device.createBuffer({\n      size: storageBuffer.size,\n      usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\n    });\n    t.trackForCleanup(readBuffer);\n    readBuffers.push({ size, readBuffer });\n\n    const sampler = device.createSampler();\n\n    const bindGroup = device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [\n        { binding: 0, resource: { buffer: uniformBuffer } },\n        { binding: 1, resource: texture.createView({ dimension: viewDimension }) },\n        { binding: 2, resource: sampler },\n        { binding: 3, resource: { buffer: storageBuffer } },\n      ],\n    });\n\n    const pass = encoder.beginComputePass();\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bindGroup);\n    pass.dispatchWorkgroups(...size);\n    pass.end();\n    encoder.copyBufferToBuffer(storageBuffer, 0, readBuffer, 0, readBuffer.size);\n  }\n\n  device.queue.submit([encoder.finish()]);\n\n  const texelViews: TexelView[] = [];\n\n  for (const { readBuffer, size } of readBuffers) {\n    await readBuffer.mapAsync(GPUMapMode.READ);\n\n    // need a copy of the data since unmapping will nullify the typedarray view.\n    const data = new Float32Array(readBuffer.getMappedRange()).slice();\n    readBuffer.unmap();\n\n    texelViews.push(\n      TexelView.fromTexelsAsColors(format, coord => {\n        const offset = (coord.z * size[0] * size[1] + coord.y * size[0] + coord.x) * 4;\n        return {\n          R: data[offset + 0],\n          G: data[offset + 1],\n          B: data[offset + 2],\n          A: data[offset + 3],\n        };\n      })\n    );\n  }\n\n  return texelViews;\n}\n\n/**\n * Fills a texture with random data and returns that data as\n * an array of TexelView.\n *\n * For compressed textures the texture is filled with random bytes\n * and then read back from the GPU by sampling so the GPU decompressed\n * the texture.\n *\n * For uncompressed textures the TexelViews are generated and then\n * copied to the texture.\n */\nexport async function createTextureWithRandomDataAndGetTexels(\n  t: GPUTest,\n  descriptor: GPUTextureDescriptor\n) {\n  if (isCompressedTextureFormat(descriptor.format)) {\n    const texture = t.device.createTexture(descriptor);\n    t.trackForCleanup(texture);\n\n    fillTextureWithRandomData(t.device, texture);\n    const texels = await readTextureToTexelViews(\n      t,\n      texture,\n      descriptor,\n      getTexelViewFormatForTextureFormat(texture.format)\n    );\n    return { texture, texels };\n  } else {\n    const texels = createRandomTexelViewMipmap(descriptor);\n    const texture = createTextureFromTexelViews(t.device, texels, descriptor);\n    return { texture, texels };\n  }\n}\n\nconst kFaceNames = ['+x', '-x', '+y', '-y', '+z', '-z'] as const;\n\n/**\n * Generates a text art grid showing which texels were sampled\n * followed by a list of the samples and the weights used for each\n * component.\n *\n * It works by making an index for every pixel in the texture. Then,\n * for each index it generates texture data using TexelView.fromTexelsAsColor\n * with a single [1, 1, 1, 1] texel at the texel for the current index.\n *\n * In then calls 'run' which renders a single `call`. `run` uses either\n * the software renderer or WebGPU. The result ends up being the weights\n * used when sampling that pixel. 0 = that texel was not sampled. > 0 =\n * it was sampled.\n *\n * This lets you see if the weights from the software renderer match the\n * weights from WebGPU.\n *\n * Example:\n *\n *     0   1   2   3   4   5   6   7\n *   ┌───┬───┬───┬───┬───┬───┬───┬───┐\n * 0 │   │   │   │   │   │   │   │   │\n *   ├───┼───┼───┼───┼───┼───┼───┼───┤\n * 1 │   │   │   │   │   │   │   │ a │\n *   ├───┼───┼───┼───┼───┼───┼───┼───┤\n * 2 │   │   │   │   │   │   │   │ b │\n *   ├───┼───┼───┼───┼───┼───┼───┼───┤\n * 3 │   │   │   │   │   │   │   │   │\n *   ├───┼───┼───┼───┼───┼───┼───┼───┤\n * 4 │   │   │   │   │   │   │   │   │\n *   ├───┼───┼───┼───┼───┼───┼───┼───┤\n * 5 │   │   │   │   │   │   │   │   │\n *   ├───┼───┼───┼───┼───┼───┼───┼───┤\n * 6 │   │   │   │   │   │   │   │   │\n *   ├───┼───┼───┼───┼───┼───┼───┼───┤\n * 7 │   │   │   │   │   │   │   │   │\n *   └───┴───┴───┴───┴───┴───┴───┴───┘\n * a: at: [7, 1], weights: [R: 0.75000]\n * b: at: [7, 2], weights: [R: 0.25000]\n */\nasync function identifySamplePoints(\n  texture: Texture,\n  run: (texels: TexelView) => Promise<PerTexelComponent<number>>\n) {\n  const info = texture.descriptor;\n  const isCube = texture.viewDescriptor.dimension === 'cube';\n  const textureSize = reifyExtent3D(info.size);\n  const numTexels = textureSize.width * textureSize.height * textureSize.height;\n  const texelsPerRow = textureSize.width;\n  const texelsPerSlice = textureSize.width * textureSize.height;\n  // This isn't perfect. We already know there was an error. We're just\n  // generating info so it seems okay it's not perfect. This format will\n  // be used to generate weights by drawing with a texture of this format\n  // with a specific pixel set to [1, 1, 1, 1]. As such, if the result\n  // is > 0 then that pixel was sampled and the results are the weights.\n  //\n  // Ideally, this texture with a single pixel set to [1, 1, 1, 1] would\n  // be the same format we were originally testing, the one we already\n  // detected an error for. This way, whatever subtle issues there are\n  // from that format will affect the weight values we're computing. But,\n  // if that format is not encodable, for example if it's a compressed\n  // texture format, then we have no way to build a texture so we use\n  // rgba8unorm instead.\n  const format = (\n    kEncodableTextureFormats.includes(info.format as EncodableTextureFormat)\n      ? info.format\n      : 'rgba8unorm'\n  ) as EncodableTextureFormat;\n  const rep = kTexelRepresentationInfo[format];\n\n  // Identify all the texels that are sampled, and their weights.\n  const sampledTexelWeights = new Map<number, PerTexelComponent<number>>();\n  const unclassifiedStack = [new Set<number>(range(numTexels, v => v))];\n  while (unclassifiedStack.length > 0) {\n    // Pop the an unclassified texels stack\n    const unclassified = unclassifiedStack.pop()!;\n\n    // Split unclassified texels evenly into two new sets\n    const setA = new Set<number>();\n    const setB = new Set<number>();\n    [...unclassified.keys()].forEach((t, i) => ((i & 1) === 0 ? setA : setB).add(t));\n\n    // Push setB to the unclassified texels stack\n    if (setB.size > 0) {\n      unclassifiedStack.push(setB);\n    }\n\n    // See if any of the texels in setA were sampled.\n    const results = await run(\n      TexelView.fromTexelsAsColors(\n        format,\n        (coords: Required<GPUOrigin3DDict>): Readonly<PerTexelComponent<number>> => {\n          const isCandidate = setA.has(\n            coords.x + coords.y * texelsPerRow + coords.z * texelsPerSlice\n          );\n          const texel: PerTexelComponent<number> = {};\n          for (const component of rep.componentOrder) {\n            texel[component] = isCandidate ? 1 : 0;\n          }\n          return texel;\n        }\n      )\n    );\n    if (rep.componentOrder.some(c => results[c] !== 0)) {\n      // One or more texels of setA were sampled.\n      if (setA.size === 1) {\n        // We identified a specific texel was sampled.\n        // As there was only one texel in the set, results holds the sampling weights.\n        setA.forEach(texel => sampledTexelWeights.set(texel, results));\n      } else {\n        // More than one texel in the set. Needs splitting.\n        unclassifiedStack.push(setA);\n      }\n    }\n  }\n\n  // ┌───┬───┬───┬───┐\n  // │ a │   │   │   │\n  // ├───┼───┼───┼───┤\n  // │   │   │   │   │\n  // ├───┼───┼───┼───┤\n  // │   │   │   │   │\n  // ├───┼───┼───┼───┤\n  // │   │   │   │ b │\n  // └───┴───┴───┴───┘\n  const letter = (idx: number) => String.fromCharCode(97 + idx); // 97: 'a'\n  const orderedTexelIndices: number[] = [];\n  const lines: string[] = [];\n  for (let z = 0; z < textureSize.depthOrArrayLayers; ++z) {\n    lines.push(`slice: ${z}${isCube ? ` (${kFaceNames[z]})` : ''}`);\n    {\n      let line = '  ';\n      for (let x = 0; x < textureSize.width; x++) {\n        line += `  ${x.toString().padEnd(2)}`;\n      }\n      lines.push(line);\n    }\n    {\n      let line = '  ┌';\n      for (let x = 0; x < textureSize.width; x++) {\n        line += x === textureSize.width - 1 ? '───┐' : '───┬';\n      }\n      lines.push(line);\n    }\n    for (let y = 0; y < textureSize.height; y++) {\n      {\n        let line = `${y.toString().padEnd(2)}│`;\n        for (let x = 0; x < textureSize.width; x++) {\n          const texelIdx = x + y * texelsPerRow + z * texelsPerSlice;\n          const weight = sampledTexelWeights.get(texelIdx);\n          if (weight !== undefined) {\n            line += ` ${letter(orderedTexelIndices.length)} │`;\n            orderedTexelIndices.push(texelIdx);\n          } else {\n            line += '   │';\n          }\n        }\n        lines.push(line);\n      }\n      if (y < textureSize.height - 1) {\n        let line = '  ├';\n        for (let x = 0; x < textureSize.width; x++) {\n          line += x === textureSize.width - 1 ? '───┤' : '───┼';\n        }\n        lines.push(line);\n      }\n    }\n    {\n      let line = '  └';\n      for (let x = 0; x < textureSize.width; x++) {\n        line += x === textureSize.width - 1 ? '───┘' : '───┴';\n      }\n      lines.push(line);\n    }\n  }\n\n  const pad2 = (n: number) => n.toString().padStart(2);\n  orderedTexelIndices.forEach((texelIdx, i) => {\n    const weights = sampledTexelWeights.get(texelIdx)!;\n    const z = Math.floor(texelIdx / texelsPerSlice);\n    const y = Math.floor((texelIdx % texelsPerSlice) / texelsPerRow);\n    const x = texelIdx % texelsPerRow;\n    const w = rep.componentOrder.map(c => `${c}: ${weights[c]?.toFixed(5)}`).join(', ');\n    lines.push(`${letter(i)}: at: [${pad2(x)}, ${pad2(y)}, ${pad2(z)}], weights: [${w}]`);\n  });\n  return lines;\n}\n\nfunction layoutTwoColumns(columnA: string[], columnB: string[]) {\n  const widthA = Math.max(...columnA.map(l => l.length));\n  const lines = Math.max(columnA.length, columnB.length);\n  const out: string[] = new Array<string>(lines);\n  for (let line = 0; line < lines; line++) {\n    const a = columnA[line] ?? '';\n    const b = columnB[line] ?? '';\n    out[line] = `${a}${' '.repeat(widthA - a.length)} | ${b}`;\n  }\n  return out;\n}\n\n/**\n * Choose a texture size based on the given parameters.\n * The size will be in a multiple of blocks. If it's a cube\n * map the size will so be square.\n */\nexport function chooseTextureSize({\n  minSize,\n  minBlocks,\n  format,\n  viewDimension,\n}: {\n  minSize: number;\n  minBlocks: number;\n  format: GPUTextureFormat;\n  viewDimension?: GPUTextureViewDimension;\n}) {\n  const { blockWidth, blockHeight } = kTextureFormatInfo[format];\n  const width = align(Math.max(minSize, blockWidth * minBlocks), blockWidth);\n  const height = align(Math.max(minSize, blockHeight * minBlocks), blockHeight);\n  if (viewDimension === 'cube') {\n    const size = lcm(width, height);\n    return [size, size];\n  }\n  return [width, height];\n}\n\nexport const kSamplePointMethods = ['texel-centre', 'spiral'] as const;\nexport type SamplePointMethods = (typeof kSamplePointMethods)[number];\n\nexport const kCubeSamplePointMethods = ['cube-edges', 'texel-centre', 'spiral'] as const;\nexport type CubeSamplePointMethods = (typeof kSamplePointMethods)[number];\n\n/**\n * Generates an array of coordinates at which to sample a texture.\n */\nfunction generateSamplePointsImpl<T extends Dimensionality>(\n  makeValue: (x: number, y: number, z: number) => T,\n  n: number,\n  nearest: boolean,\n  args:\n    | {\n        method: 'texel-centre';\n        textureWidth: number;\n        textureHeight: number;\n        textureDepthOrArrayLayers?: number;\n      }\n    | {\n        method: 'spiral';\n        radius?: number;\n        loops?: number;\n        textureWidth: number;\n        textureHeight: number;\n        textureDepthOrArrayLayers?: number;\n      }\n) {\n  const { method, textureWidth, textureHeight, textureDepthOrArrayLayers = 1 } = args;\n  const out: T[] = [];\n  switch (method) {\n    case 'texel-centre': {\n      for (let i = 0; i < n; i++) {\n        const r = hashU32(i);\n        const x = Math.floor(lerp(0, textureWidth - 1, (r & 0xff) / 0xff)) + 0.5;\n        const y = Math.floor(lerp(0, textureHeight - 1, ((r >> 8) & 0xff) / 0xff)) + 0.5;\n        const z =\n          Math.floor(lerp(0, textureDepthOrArrayLayers - 1, ((r >> 16) & 0xff) / 0xff)) + 0.5;\n        out.push(makeValue(x / textureWidth, y / textureHeight, z / textureDepthOrArrayLayers));\n      }\n      break;\n    }\n    case 'spiral': {\n      const { radius = 1.5, loops = 2 } = args;\n      for (let i = 0; i < n; i++) {\n        const f = i / (Math.max(n, 2) - 1);\n        const r = radius * f;\n        const a = loops * 2 * Math.PI * f;\n        out.push(makeValue(0.5 + r * Math.cos(a), 0.5 + r * Math.sin(a), 0));\n      }\n      break;\n    }\n  }\n\n  // Samplers across devices use different methods to interpolate.\n  // Quantizing the texture coordinates seems to hit coords that produce\n  // comparable results to our computed results.\n  // Note: This value works with 8x8 textures. Other sizes have not been tested.\n  // Values that worked for reference:\n  // Win 11, NVidia 2070 Super: 16\n  // Linux, AMD Radeon Pro WX 3200: 256\n  // MacOS, M1 Mac: 256\n  const kSubdivisionsPerTexel = 4;\n  const q = [\n    textureWidth * kSubdivisionsPerTexel,\n    textureHeight * kSubdivisionsPerTexel,\n    textureDepthOrArrayLayers * kSubdivisionsPerTexel,\n  ];\n  return out.map(\n    c =>\n      c.map((v, i) => {\n        // Quantize to kSubdivisionsPerPixel\n        const v1 = Math.floor(v * q[i]);\n        // If it's nearest and we're on the edge of a texel then move us off the edge\n        // since the edge could choose one texel or another in nearest mode\n        const v2 = nearest && v1 % kSubdivisionsPerTexel === 0 ? v1 + 1 : v1;\n        // Convert back to texture coords\n        return v2 / q[i];\n      }) as T\n  );\n}\n\n// Removes the first element from an array of types\ntype FilterFirstElement<T extends unknown[]> = T extends [unknown, ...infer R] ? R : [];\n\ntype GenerateSamplePointsImplArgs = FilterFirstElement<Parameters<typeof generateSamplePointsImpl>>;\n\nexport function generateSamplePoints1D(...args: GenerateSamplePointsImplArgs) {\n  return generateSamplePointsImpl<vec1>((x: number) => [x], ...args);\n}\n\nexport function generateSamplePoints2D(...args: GenerateSamplePointsImplArgs) {\n  return generateSamplePointsImpl<vec2>((x: number, y: number) => [x, y], ...args);\n}\n\nexport function generateSamplePoints3D(...args: GenerateSamplePointsImplArgs) {\n  return generateSamplePointsImpl<vec3>((x: number, y: number, z: number) => [x, y, z], ...args);\n}\n\ntype mat3 =\n  /* prettier-ignore */ [\n  number, number, number,\n  number, number, number,\n  number, number, number,\n];\n\nconst kFaceUVMatrices: mat3[] =\n  /* prettier-ignore */ [\n  [ 0,  0,  -2,  0, -2,   0,  1,  1,   1],   // pos-x\n  [ 0,  0,   2,  0, -2,   0, -1,  1,  -1],   // neg-x\n  [ 2,  0,   0,  0,  0,   2, -1,  1,  -1],   // pos-y\n  [ 2,  0,   0,  0,  0,  -2, -1, -1,   1],   // neg-y\n  [ 2,  0,   0,  0, -2,   0, -1,  1,   1],   // pos-z\n  [-2,  0,   0,  0, -2,   0,  1,  1,  -1],   // neg-z\n];\n\n/** multiply a vec3 by mat3 */\nfunction transformMat3(v: vec3, m: mat3): vec3 {\n  const x = v[0];\n  const y = v[1];\n  const z = v[2];\n\n  return [\n    x * m[0] + y * m[3] + z * m[6],\n    x * m[1] + y * m[4] + z * m[7],\n    x * m[2] + y * m[5] + z * m[8],\n  ];\n}\n\n/** normalize a vec3 */\nfunction normalize(v: vec3): vec3 {\n  const length = Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);\n  assert(length > 0);\n  return v.map(v => v / length) as vec3;\n}\n\n/**\n * Converts a cube map coordinate to a uv coordinate (0 to 1) and layer (0.5/6.0 to 5.5/6.0).\n * Also returns the length of the original coordinate.\n */\nfunction convertCubeCoordToNormalized3DTextureCoord(v: vec3): vec3 {\n  let uvw;\n  let layer;\n  // normalize the coord.\n  // MAINTENANCE_TODO: handle(0, 0, 0)\n  const r = normalize(v);\n  const absR = r.map(v => Math.abs(v));\n  if (absR[0] > absR[1] && absR[0] > absR[2]) {\n    // x major\n    const negX = r[0] < 0.0 ? 1 : 0;\n    uvw = [negX ? r[2] : -r[2], -r[1], absR[0]];\n    layer = negX;\n  } else if (absR[1] > absR[2]) {\n    // y major\n    const negY = r[1] < 0.0 ? 1 : 0;\n    uvw = [r[0], negY ? -r[2] : r[2], absR[1]];\n    layer = 2 + negY;\n  } else {\n    // z major\n    const negZ = r[2] < 0.0 ? 1 : 0;\n    uvw = [negZ ? -r[0] : r[0], -r[1], absR[2]];\n    layer = 4 + negZ;\n  }\n  return [(uvw[0] / uvw[2] + 1) * 0.5, (uvw[1] / uvw[2] + 1) * 0.5, (layer + 0.5) / 6];\n}\n\n/**\n * Convert a 3d texcoord into a cube map coordinate.\n */\nfunction convertNormalized3DTexCoordToCubeCoord(uvLayer: vec3) {\n  const [u, v, faceLayer] = uvLayer;\n  return normalize(transformMat3([u, v, 1], kFaceUVMatrices[Math.min(5, faceLayer * 6) | 0]));\n}\n\n/**\n * We have a face texture in texels coord where U/V choose a texel and W chooses the face.\n * If U/V are outside the size of the texture then, when normalized and converted\n * to a cube map coordinate, they'll end up pointing to a different face.\n *\n * addressMode is effectively ignored for cube\n *\n *             +-----------+\n *             |0->u       |\n *             |↓          |\n *             |v   +y     |\n *             |    (2)    |\n *             |           |\n * +-----------+-----------+-----------+-----------+\n * |0->u       |0->u       |0->u       |0->u       |\n * |↓          |↓          |↓          |↓          |\n * |v   -x     |v   +z     |v   +x     |v   -z     |\n * |    (1)    |    (4)    |    (0)    |    (5)    |\n * |           |           |           |           |\n * +-----------+-----------+-----------+-----------+\n *             |0->u       |\n *             |↓          |\n *             |v   -y     |\n *             |    (3)    |\n *             |           |\n *             +-----------+\n */\nconst kFaceConversions = {\n  u: (textureSize: number, faceCoord: vec3) => faceCoord[0],\n  v: (textureSize: number, faceCoord: vec3) => faceCoord[1],\n  'u+t': (textureSize: number, faceCoord: vec3) => faceCoord[0] + textureSize,\n  'u-t': (textureSize: number, faceCoord: vec3) => faceCoord[0] - textureSize,\n  'v+t': (textureSize: number, faceCoord: vec3) => faceCoord[1] + textureSize,\n  'v-t': (textureSize: number, faceCoord: vec3) => faceCoord[1] - textureSize,\n  't-v': (textureSize: number, faceCoord: vec3) => textureSize - faceCoord[1],\n  '1+u': (textureSize: number, faceCoord: vec3) => 1 + faceCoord[0],\n  '1+v': (textureSize: number, faceCoord: vec3) => 1 + faceCoord[1],\n  '-v-1': (textureSize: number, faceCoord: vec3) => -faceCoord[1] - 1,\n  't-u-1': (textureSize: number, faceCoord: vec3) => textureSize - faceCoord[0] - 1,\n  't-v-1': (textureSize: number, faceCoord: vec3) => textureSize - faceCoord[1] - 1,\n  '2t-u-1': (textureSize: number, faceCoord: vec3) => textureSize * 2 - faceCoord[0] - 1,\n  '2t-v-1': (textureSize: number, faceCoord: vec3) => textureSize * 2 - faceCoord[1] - 1,\n} as const;\nconst kFaceConversionEnums = keysOf(kFaceConversions);\ntype FaceCoordConversion = (typeof kFaceConversionEnums)[number];\n\n// For Each face\n//   face to go if u < 0\n//   face to go if u >= textureSize\n//   face to go if v < 0\n//   face to go if v >= textureSize\nconst kFaceToFaceRemap: { to: number; u: FaceCoordConversion; v: FaceCoordConversion }[][] = [\n  // 0\n  [\n    /* -u */ { to: 4, u: 'u+t', v: 'v' },\n    /* +u */ { to: 5, u: 'u-t', v: 'v' },\n    /* -v */ { to: 2, u: 'v+t', v: 't-u-1' },\n    /* +v */ { to: 3, u: '2t-v-1', v: 'u' },\n  ],\n  // 1\n  [\n    /* -u */ { to: 5, u: 'u+t', v: 'v' },\n    /* +u */ { to: 4, u: 'u-t', v: 'v' },\n    /* -v */ { to: 2, u: '-v-1', v: 'u' }, // -1->0, -2->1  -3->2\n    /* +v */ { to: 3, u: 't-v', v: 't-u-1' },\n  ],\n  // 2\n  [\n    /* -u */ { to: 1, u: 'v', v: '1+u' },\n    /* +u */ { to: 0, u: 't-v-1', v: 'u-t' },\n    /* -v */ { to: 5, u: 't-u-1', v: 't-v-1' },\n    /* +v */ { to: 4, u: 'u', v: 'v-t' },\n  ],\n  // 3\n  [\n    /* -u */ { to: 1, u: 't-v-1', v: 'u+t' },\n    /* +u */ { to: 0, u: 'v', v: '2t-u-1' },\n    /* -v */ { to: 4, u: 'u', v: 'v+t' },\n    /* +v */ { to: 5, u: 't-u-1', v: '2t-v-1' },\n  ],\n  // 4\n  [\n    /* -u */ { to: 1, u: 'u+t', v: 'v' },\n    /* +u */ { to: 0, u: 'u-t', v: 'v' },\n    /* -v */ { to: 2, u: 'u', v: 'v+t' },\n    /* +v */ { to: 3, u: 'u', v: 'v-t' },\n  ],\n  // 5\n  [\n    /* -u */ { to: 0, u: 'u+t', v: 'v' },\n    /* +u */ { to: 1, u: 'u-t', v: 'v' },\n    /* -v */ { to: 2, u: 't-u-1', v: '1+v' },\n    /* +v */ { to: 3, u: 't-u-1', v: '2t-v-1' },\n  ],\n];\n\nfunction getFaceWrapIndex(textureSize: number, faceCoord: vec3) {\n  if (faceCoord[0] < 0) {\n    return 0;\n  }\n  if (faceCoord[0] >= textureSize) {\n    return 1;\n  }\n  if (faceCoord[1] < 0) {\n    return 2;\n  }\n  if (faceCoord[1] >= textureSize) {\n    return 3;\n  }\n  return -1;\n}\n\nfunction applyFaceWrap(textureSize: number, faceCoord: vec3): vec3 {\n  const ndx = getFaceWrapIndex(textureSize, faceCoord);\n  if (ndx < 0) {\n    return faceCoord;\n  }\n  const { to, u, v } = kFaceToFaceRemap[faceCoord[2]][ndx];\n  return [\n    kFaceConversions[u](textureSize, faceCoord),\n    kFaceConversions[v](textureSize, faceCoord),\n    to,\n  ];\n}\n\nfunction wrapFaceCoordToCubeFaceAtEdgeBoundaries(textureSize: number, faceCoord: vec3) {\n  // If we're off both edges we need to wrap twice, once for each edge.\n  faceCoord = applyFaceWrap(textureSize, faceCoord);\n  faceCoord = applyFaceWrap(textureSize, faceCoord);\n  return faceCoord;\n}\n\nfunction applyAddressModesToCoords(\n  addressMode: GPUAddressMode[],\n  textureSize: number[],\n  coord: number[]\n) {\n  return coord.map((v, i) => {\n    switch (addressMode[i]) {\n      case 'clamp-to-edge':\n        return clamp(v, { min: 0, max: textureSize[i] - 1 });\n      case 'mirror-repeat': {\n        const n = Math.floor(v / textureSize[i]);\n        v = v - n * textureSize[i];\n        return (n & 1) !== 0 ? textureSize[i] - v - 1 : v;\n      }\n      case 'repeat':\n        return v - Math.floor(v / textureSize[i]) * textureSize[i];\n      default:\n        unreachable();\n    }\n  });\n}\n\n/**\n * Generates an array of coordinates at which to sample a texture for a cubemap\n */\nexport function generateSamplePointsCube(\n  n: number,\n  nearest: boolean,\n  args:\n    | {\n        method: 'texel-centre';\n        textureWidth: number;\n        textureDepthOrArrayLayers?: number;\n      }\n    | {\n        method: 'spiral';\n        radius?: number;\n        loops?: number;\n        textureWidth: number;\n        textureDepthOrArrayLayers?: number;\n      }\n    | {\n        method: 'cube-edges';\n        textureWidth: number;\n        textureDepthOrArrayLayers?: number;\n      }\n) {\n  const { method, textureWidth } = args;\n  const out: vec3[] = [];\n  switch (method) {\n    case 'texel-centre': {\n      for (let i = 0; i < n; i++) {\n        const r = hashU32(i);\n        const u = (Math.floor(lerp(0, textureWidth - 1, (r & 0xff) / 0xff)) + 0.5) / textureWidth;\n        const v =\n          (Math.floor(lerp(0, textureWidth - 1, ((r >> 8) & 0xff) / 0xff)) + 0.5) / textureWidth;\n        const face = Math.floor(lerp(0, 6, ((r >> 16) & 0xff) / 0x100));\n        out.push(convertNormalized3DTexCoordToCubeCoord([u, v, face]));\n      }\n      break;\n    }\n    case 'spiral': {\n      const { radius = 1.5, loops = 2 } = args;\n      for (let i = 0; i < n; i++) {\n        const f = (i + 1) / (Math.max(n, 2) - 1);\n        const r = radius * f;\n        const theta = loops * 2 * Math.PI * f;\n        const phi = loops * 1.3 * Math.PI * f;\n        const sinTheta = Math.sin(theta);\n        const cosTheta = Math.cos(theta);\n        const sinPhi = Math.sin(phi);\n        const cosPhi = Math.cos(phi);\n        const ux = cosTheta * sinPhi;\n        const uy = cosPhi;\n        const uz = sinTheta * sinPhi;\n        out.push([ux * r, uy * r, uz * r]);\n      }\n      break;\n    }\n    case 'cube-edges': {\n      /* prettier-ignore */\n      out.push(\n        // between edges\n        [-1.01, -1.02,  0],\n        [ 1.01, -1.02,  0],\n        [-1.01,  1.02,  0],\n        [ 1.01,  1.02,  0],\n\n        [-1.01,  0, -1.02],\n        [ 1.01,  0, -1.02],\n        [-1.01,  0,  1.02],\n        [ 1.01,  0,  1.02],\n\n        [-1.01, -1.02,  0],\n        [ 1.01, -1.02,  0],\n        [-1.01,  1.02,  0],\n        [ 1.01,  1.02,  0],\n\n        // corners (see comment \"Issues with corners of cubemaps\")\n        // for why these are commented out.\n        // [-1.01, -1.02, -1.03],\n        // [ 1.01, -1.02, -1.03],\n        // [-1.01,  1.02, -1.03],\n        // [ 1.01,  1.02, -1.03],\n        // [-1.01, -1.02,  1.03],\n        // [ 1.01, -1.02,  1.03],\n        // [-1.01,  1.02,  1.03],\n        // [ 1.01,  1.02,  1.03],\n      );\n      break;\n    }\n  }\n\n  // Samplers across devices use different methods to interpolate.\n  // Quantizing the texture coordinates seems to hit coords that produce\n  // comparable results to our computed results.\n  // Note: This value works with 8x8 textures. Other sizes have not been tested.\n  // Values that worked for reference:\n  // Win 11, NVidia 2070 Super: 16\n  // Linux, AMD Radeon Pro WX 3200: 256\n  // MacOS, M1 Mac: 256\n  const kSubdivisionsPerTexel = 4;\n  const q = [\n    textureWidth * kSubdivisionsPerTexel,\n    textureWidth * kSubdivisionsPerTexel,\n    6 * kSubdivisionsPerTexel,\n  ];\n  return out.map(c => {\n    const uvw = convertCubeCoordToNormalized3DTextureCoord(c);\n\n    // If this is a corner, move to in so it's not\n    // (see comment \"Issues with corners of cubemaps\")\n    const ndx = getUnusedCubeCornerSampleIndex(textureWidth, uvw);\n    if (ndx >= 0) {\n      const halfTexel = 0.5 / textureWidth;\n      uvw[0] = clamp(uvw[0], { min: halfTexel, max: 1 - halfTexel });\n    }\n\n    const quantizedUVW = uvw.map((v, i) => {\n      // Quantize to kSubdivisionsPerPixel\n      const v1 = Math.floor(v * q[i]);\n      // If it's nearest and we're on the edge of a texel then move us off the edge\n      // since the edge could choose one texel or another in nearest mode\n      const v2 = nearest && v1 % kSubdivisionsPerTexel === 0 ? v1 + 1 : v1;\n      // Convert back to texture coords\n      return v2 / q[i];\n    }) as vec3;\n    return convertNormalized3DTexCoordToCubeCoord(quantizedUVW);\n  });\n}\n\nfunction wgslTypeFor(data: number | Dimensionality, type: 'f' | 'i' | 'u'): string {\n  if (Array.isArray(data)) {\n    switch (data.length) {\n      case 1:\n        return `${type}32`;\n      case 2:\n        return `vec2${type}`;\n      case 3:\n        return `vec3${type}`;\n      default:\n        unreachable();\n    }\n  }\n  return `${type}32`;\n}\n\nfunction wgslExpr(data: number | vec1 | vec2 | vec3 | vec4): string {\n  if (Array.isArray(data)) {\n    switch (data.length) {\n      case 1:\n        return data[0].toString();\n      case 2:\n        return `vec2(${data.map(v => v.toString()).join(', ')})`;\n      case 3:\n        return `vec3(${data.map(v => v.toString()).join(', ')})`;\n      default:\n        unreachable();\n    }\n  }\n  return data.toString();\n}\n\nfunction binKey<T extends Dimensionality>(call: TextureCall<T>): string {\n  const keys: string[] = [];\n  for (const name of kTextureCallArgNames) {\n    const value = call[name];\n    if (value !== undefined) {\n      if (name === 'offset') {\n        // offset must be a constant expression\n        keys.push(`${name}: ${wgslExpr(value)}`);\n      } else {\n        keys.push(`${name}: ${wgslTypeFor(value, call.coordType)}`);\n      }\n    }\n  }\n  return `${call.builtin}(${keys.join(', ')})`;\n}\n\nfunction buildBinnedCalls<T extends Dimensionality>(calls: TextureCall<T>[]) {\n  const args: string[] = ['T']; // All texture builtins take the texture as the first argument\n  const fields: string[] = [];\n  const data: number[] = [];\n\n  const prototype = calls[0];\n  if (prototype.builtin.startsWith('textureSample')) {\n    // textureSample*() builtins take a sampler as the second argument\n    args.push('S');\n  }\n\n  for (const name of kTextureCallArgNames) {\n    const value = prototype[name];\n    if (value !== undefined) {\n      if (name === 'offset') {\n        args.push(`/* offset */ ${wgslExpr(value)}`);\n      } else {\n        args.push(`args.${name}`);\n        fields.push(`@align(16) ${name} : ${wgslTypeFor(value, prototype.coordType)}`);\n      }\n    }\n  }\n\n  for (const call of calls) {\n    for (const name of kTextureCallArgNames) {\n      const value = call[name];\n      assert(\n        (prototype[name] === undefined) === (value === undefined),\n        'texture calls are not binned correctly'\n      );\n      if (value !== undefined && name !== 'offset') {\n        const bitcastToU32 = (value: number) => {\n          if (calls[0].coordType === 'f') {\n            return float32ToUint32(value);\n          }\n          return value;\n        };\n        if (value instanceof Array) {\n          for (const c of value) {\n            data.push(bitcastToU32(c));\n          }\n        } else {\n          data.push(bitcastToU32(value));\n        }\n        // All fields are aligned to 16 bytes.\n        while ((data.length & 3) !== 0) {\n          data.push(0);\n        }\n      }\n    }\n  }\n\n  const expr = `${prototype.builtin}(${args.join(', ')})`;\n\n  return { expr, fields, data };\n}\n\nfunction binCalls<T extends Dimensionality>(calls: TextureCall<T>[]): number[][] {\n  const map = new Map<string, number>(); // key to bin index\n  const bins: number[][] = [];\n  calls.forEach((call, callIdx) => {\n    const key = binKey(call);\n    const binIdx = map.get(key);\n    if (binIdx === undefined) {\n      map.set(key, bins.length);\n      bins.push([callIdx]);\n    } else {\n      bins[binIdx].push(callIdx);\n    }\n  });\n  return bins;\n}\n\nexport function describeTextureCall<T extends Dimensionality>(call: TextureCall<T>): string {\n  const args: string[] = ['texture: T'];\n  if (call.builtin.startsWith('textureSample')) {\n    args.push('sampler: S');\n  }\n  for (const name of kTextureCallArgNames) {\n    const value = call[name];\n    if (value !== undefined) {\n      args.push(`${name}: ${wgslExpr(value)}`);\n    }\n  }\n  return `${call.builtin}(${args.join(', ')})`;\n}\n\nconst s_deviceToPipelines = new WeakMap<GPUDevice, Map<string, GPURenderPipeline>>();\n\n/**\n * Given a list of \"calls\", each one of which has a texture coordinate,\n * generates a fragment shader that uses the fragment position as an index\n * (position.y * 256 + position.x) That index is then used to look up a\n * coordinate from a storage buffer which is used to call the WGSL texture\n * function to read/sample the texture, and then write to an rgba32float\n * texture.  We then read the rgba32float texture for the per \"call\" results.\n *\n * Calls are \"binned\" by call parameters. Each bin has its own structure and\n * field in the storage buffer. This allows the calls to be non-homogenous and\n * each have their own data type for coordinates.\n */\nexport async function doTextureCalls<T extends Dimensionality>(\n  device: GPUDevice,\n  gpuTexture: GPUTexture,\n  viewDescriptor: GPUTextureViewDescriptor,\n  textureType: string,\n  sampler: GPUSamplerDescriptor,\n  calls: TextureCall<T>[]\n) {\n  let structs = '';\n  let body = '';\n  let dataFields = '';\n  const data: number[] = [];\n  let callCount = 0;\n  const binned = binCalls(calls);\n  binned.forEach((binCalls, binIdx) => {\n    const b = buildBinnedCalls(binCalls.map(callIdx => calls[callIdx]));\n    structs += `struct Args${binIdx} {\n  ${b.fields.join(',  \\n')}\n}\n`;\n    dataFields += `  args${binIdx} : array<Args${binIdx}, ${binCalls.length}>,\n`;\n    body += `\n  {\n    let is_active = (frag_idx >= ${callCount}) & (frag_idx < ${callCount + binCalls.length});\n    let args = data.args${binIdx}[frag_idx - ${callCount}];\n    let call = ${b.expr};\n    result = select(result, call, is_active);\n  }\n`;\n    callCount += binCalls.length;\n    data.push(...b.data);\n  });\n\n  const dataBuffer = device.createBuffer({\n    size: data.length * 4,\n    usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.STORAGE,\n  });\n  device.queue.writeBuffer(dataBuffer, 0, new Uint32Array(data));\n\n  const rtWidth = 256;\n  const renderTarget = device.createTexture({\n    format: 'rgba32float',\n    size: { width: rtWidth, height: Math.ceil(calls.length / rtWidth) },\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n  });\n\n  const code = `\n${structs}\n\nstruct Data {\n${dataFields}\n}\n\n@vertex\nfn vs_main(@builtin(vertex_index) vertex_index : u32) -> @builtin(position) vec4f {\n  let positions = array(\n    vec4f(-1,  1, 0, 1), vec4f( 1,  1, 0, 1),\n    vec4f(-1, -1, 0, 1), vec4f( 1, -1, 0, 1),\n  );\n  return positions[vertex_index];\n}\n\n@group(0) @binding(0) var          T    : ${textureType};\n@group(0) @binding(1) var          S    : sampler;\n@group(0) @binding(2) var<storage> data : Data;\n\n@fragment\nfn fs_main(@builtin(position) frag_pos : vec4f) -> @location(0) vec4f {\n  let frag_idx = u32(frag_pos.x) + u32(frag_pos.y) * ${renderTarget.width};\n  var result : vec4f;\n${body}\n  return result;\n}\n`;\n\n  const pipelines = s_deviceToPipelines.get(device) ?? new Map<string, GPURenderPipeline>();\n  s_deviceToPipelines.set(device, pipelines);\n\n  let pipeline = pipelines.get(code);\n  if (!pipeline) {\n    const shaderModule = device.createShaderModule({ code });\n\n    pipeline = device.createRenderPipeline({\n      layout: 'auto',\n      vertex: { module: shaderModule },\n      fragment: {\n        module: shaderModule,\n        targets: [{ format: renderTarget.format }],\n      },\n      primitive: { topology: 'triangle-strip' },\n    });\n\n    pipelines.set(code, pipeline);\n  }\n\n  const gpuSampler = device.createSampler(sampler);\n\n  const bindGroup = device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [\n      { binding: 0, resource: gpuTexture.createView(viewDescriptor) },\n      { binding: 1, resource: gpuSampler },\n      { binding: 2, resource: { buffer: dataBuffer } },\n    ],\n  });\n\n  const bytesPerRow = align(16 * renderTarget.width, 256);\n  const resultBuffer = device.createBuffer({\n    size: renderTarget.height * bytesPerRow,\n    usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ,\n  });\n  const encoder = device.createCommandEncoder();\n\n  const renderPass = encoder.beginRenderPass({\n    colorAttachments: [\n      {\n        view: renderTarget.createView(),\n        loadOp: 'clear',\n        storeOp: 'store',\n      },\n    ],\n  });\n\n  renderPass.setPipeline(pipeline);\n  renderPass.setBindGroup(0, bindGroup);\n  renderPass.draw(4);\n  renderPass.end();\n  encoder.copyTextureToBuffer(\n    { texture: renderTarget },\n    { buffer: resultBuffer, bytesPerRow },\n    { width: renderTarget.width, height: renderTarget.height }\n  );\n  device.queue.submit([encoder.finish()]);\n\n  await resultBuffer.mapAsync(GPUMapMode.READ);\n\n  const view = TexelView.fromTextureDataByReference(\n    renderTarget.format as EncodableTextureFormat,\n    new Uint8Array(resultBuffer.getMappedRange()),\n    {\n      bytesPerRow,\n      rowsPerImage: renderTarget.height,\n      subrectOrigin: [0, 0, 0],\n      subrectSize: [renderTarget.width, renderTarget.height],\n    }\n  );\n\n  let outIdx = 0;\n  const out = new Array<PerTexelComponent<number>>(calls.length);\n  for (const bin of binned) {\n    for (const callIdx of bin) {\n      const x = outIdx % rtWidth;\n      const y = Math.floor(outIdx / rtWidth);\n      out[callIdx] = view.color({ x, y, z: 0 });\n      outIdx++;\n    }\n  }\n\n  renderTarget.destroy();\n  resultBuffer.destroy();\n\n  return out;\n}\n"],"mappings":"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"}