{"version":3,"file":"texture_utils.js","names":["keysOf","assert","range","unreachable","isCompressedFloatTextureFormat","isCompressedTextureFormat","isDepthOrStencilTextureFormat","kEncodableTextureFormats","kTextureFormatInfo","GPUTest","align","clamp","dotProduct","hashU32","lcm","lerp","quantizeToF32","effectiveViewDimensionForDimension","physicalMipSizeFromTexture","reifyTextureDescriptor","virtualMipSize","kTexelRepresentationInfo","TexelComponent","TexelView","createTextureFromTexelViews","reifyExtent3D","kSampleTypeInfo","f32","format","i32","u32","getTextureTypeForTextureViewDimension","viewDimension","isPotentiallyFilterableAndFillable","type","color","canPotentiallyFilter","isFillable","endsWith","skipIfTextureFormatNotSupportedNotAvailableOrNotFilterable","t","skipIfTextureFormatNotSupported","info","selectDeviceOrSkipTestCase","selectDeviceForTextureFormatOrSkipTestCase","kMipGradientSteps","s_deviceToMipGradientValues","WeakMap","initMipGradientValuesForDevice","device","weights","get","module","createShaderModule","code","pipeline","createComputePipeline","layout","compute","texture","createTextureTracked","size","usage","GPUTextureUsage","TEXTURE_BINDING","COPY_DST","mipLevelCount","queue","writeTexture","mipLevel","Uint8Array","bytesPerRow","sampler","createSampler","minFilter","magFilter","mipmapFilter","storageBuffer","createBufferTracked","GPUBufferUsage","STORAGE","COPY_SRC","resultBuffer","MAP_READ","bindGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","createView","buffer","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","copyBufferToBuffer","submit","finish","mapAsync","GPUMapMode","READ","Array","from","Float32Array","getMappedRange","unmap","destroy","Math","abs","i","set","getWeightForMipLevel","steps","length","w","lowerNdx","floor","upperNdx","ceil","mix","WGSLTextureQueryTest","executeAndExpectResult","view","expected","e","Uint32Array","expectGPUBufferValuesEqual","WGSLTextureSampleTest","init","getLimitValue","v","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","getValueBetweenMinAndMaxTexelValueInclusive","rep","component","normalized","numericRange","perComponentRanges","perComponentRange","min","max","getTexelViewFormatForTextureFormat","kTextureTypeInfo","depth","componentType","resultType","resultFormat","float","sint","uint","getTextureFormatTypeInfo","stencil","appendComponentTypeForFormatToTextureType","base","includes","createRandomTexelView","generator","coords","texel","componentOrder","rnd","x","y","z","sampleIndex","charCodeAt","width","height","depthOrArrayLayers","quantize","fromTexelsAsColors","createRandomTexelViewMipmap","dimension","kTextureCallArgNames","s_u32","s_f32","s_i32","Int32Array","kBitCastFunctions","f","u","getCallArgType","call","argName","coordType","levelType","undefined","arrayIndexType","sampleIndexType","toArray","repl","bitsToNumber","unpackBits","pack","encode","apply","a","b","op","map","getUnusedCubeCornerSampleIndex","textureSize","add","convertPerTexelComponentToResultFormat","src","out","R","G","B","A","convertResultFormatToTexelViewFormat","zeroValuePerTexelComponent","components","softwareTextureReadMipLevel","texels","descriptor","addressMode","builtin","addressModeU","addressModeV","addressModeW","isCube","viewDescriptor","arrayIndexMult","numLayers","textureSizeForCube","load","at","zFromArrayIndex","arrayIndex","convertCubeCoordToNormalized3DTextureCoord","offset","samples","filter","p0","p1","p1W","p0W","push","weight","ndx","p","round","ss","sample","c","wrapFaceCoordToCubeFaceAtEdgeBoundaries","applyAddressModesToCoords","isOutOfBoundsCall","softwareTextureReadLevel","maxLevel","clampedMipLevel","baseMipLevel","nextMipLevel","t0","t1","values","kRGBAComponents","softwareTextureRead","ddx","ddy","texSize","scaledDdx","scaledDdy","dotDDX","dotDDY","deltaMax","log2","desc","sampleCount","isValidOutOfBoundsValue","gotRGBA","maxFractionalDiff","mipTexels","rgba","texelsApproximatelyEqual","okBecauseOutOfBounds","kRComponent","expectRGBA","got","expect","gULP","bitsToULPFromZero","numberToBits","eULP","rgbaComponentsToCheck","g","absDiff","ulpDiff","checkCallResults","textureType","calls","results","errs","getMaxFractionalDiffForTextureFormat","callIdx","relDiff","describeTextureCall","toFixed","expectedSamplePoints","identifySamplePoints","Promise","resolve","gotSamplePoints","gpuTexture","result","doTextureCalls","layoutTwoColumns","join","Error","softwareRasterize","targetSize","options","uvwStart","screenSpaceUMult","screenSpaceVMult","expData","fragY","fragX","asRgba32Float","fromTextureDataByReference","rowsPerImage","subrectOrigin","subrectSize","drawTexture","samplerDesc","renderTarget","RENDER_ATTACHMENT","uMult","vMult","offsetWGSL","shaderModule","createRenderPipeline","vertex","fragment","targets","primitive","topology","renderPass","beginRenderPass","colorAttachments","loadOp","storeOp","draw","checkTextureMatchesExpectedTexelView","actualTexture","expectedTexelView","expectTexelViewComparisonIsOkInTexture","putDataInTextureThenDrawAndCheckResultsComparedToSoftwareRasterizer","createTextureWithRandomDataAndGetTexels","sumOfCharCodesOfString","s","String","split","reduce","sum","makeAstcBlockFiller","bytesPerBlock","bytes","data","hashBase","makeRandomBytesBlockFiller","getBlockFiller","startsWith","fillTextureWithRandomData","fillBlock","blocksAcross","blockWidth","blocksDown","blockHeight","bytesNeeded","s_readTextureToRGBA32DeviceToPipeline","getEffectiveViewDimension","textureBindingViewDimension","readTextureToTexelViews","viewDimensionToPipelineMap","Map","id","textureWGSL","loadWGSL","dimensionWGSL","readBuffers","uniformValues","uniformBuffer","byteLength","UNIFORM","writeBuffer","readBuffer","texelViews","slice","coord","valueIfAllComponentsAreEqual","Set","next","value","createVideoFrameWithRandomDataAndGetTexels","imageData","ImageData","asU32","canvas","OffscreenCanvas","ctx","getContext","putImageData","videoFrame","VideoFrame","timestamp","alpha","kFaceNames","run","mipLevelSize","numTexelsPerLevel","numTexelsOfPrecedingLevels","total","num","numTexels","sampledTexelWeights","unclassifiedStack","unclassified","pop","setA","setB","keys","forEach","texelsPerSlice","texelsPerRow","texelId","isCandidate","has","some","getMipLevelFromTexelId","levels","level","layer","layerEntries","xyId","lines","letter","idx","fromCodePoint","idCount","orderedTexelIndices","line","toString","padEnd","texelIdx","pad2","n","padStart","fix5","singleWeight","columnA","columnB","widthA","l","repeat","getDepthOrArrayLayersForViewDimension","chooseTextureSize","minSize","minBlocks","kSamplePointMethods","kCubeSamplePointMethods","generateTextureBuiltinInputsImpl","makeValue","args","method","r","radius","loops","PI","cos","sin","_hashInputs","hashInputs","makeRangeValue","number","makeIntHashValue","kSubdivisionsPerTexel","nearest","quantizeMipLevel","mipSize","q","v1","v2","_","j","kMipEpsilon","intMip","fractionalMip","generateTextureBuiltinInputs1D","generateTextureBuiltinInputs2D","generateTextureBuiltinInputs3D","kFaceUVMatrices","transformMat3","m","normalize","sqrt","uvw","absR","negX","negY","negZ","convertNormalized3DTexCoordToCubeCoord","uvLayer","faceLayer","kFaceConversions","faceCoord","u+t","u-t","v+t","v-t","t-v","1+u","1+v","-v-1","t-u-1","t-v-1","2t-u-1","2t-v-1","kFaceConversionEnums","kFaceToFaceRemap","to","getFaceWrapIndex","applyFaceWrap","faceCoord1","faceCoord2","generateSamplePointsCube","textureWidth","face","theta","phi","sinTheta","cosTheta","sinPhi","cosPhi","ux","uy","uz","halfTexel","quantizedUVW","wgslTypeFor","isArray","wgslExpr","wgslExprFor","binKey","name","buildBinnedCalls","fields","prototype","bitcastToU32","expr","binCalls","bins","key","binIdx","s_deviceToPipelines","structs","body","dataFields","callCount","binned","dataBuffer","GPUExternalTexture","returnType","rtWidth","pipelines","createRenderPipelineAsync","gpuSampler","copyTextureToBuffer","outIdx","bin"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/texture_utils.ts"],"sourcesContent":["import { keysOf } from '../../../../../../common/util/data_tables.js';\nimport { assert, range, unreachable } from '../../../../../../common/util/util.js';\nimport {\n  EncodableTextureFormat,\n  isCompressedFloatTextureFormat,\n  isCompressedTextureFormat,\n  isDepthOrStencilTextureFormat,\n  kEncodableTextureFormats,\n  kTextureFormatInfo,\n} from '../../../../../format_info.js';\nimport {\n  GPUTest,\n  GPUTestSubcaseBatchState,\n  TextureTestMixinType,\n} from '../../../../../gpu_test.js';\nimport {\n  align,\n  clamp,\n  dotProduct,\n  hashU32,\n  lcm,\n  lerp,\n  quantizeToF32,\n} from '../../../../../util/math.js';\nimport {\n  effectiveViewDimensionForDimension,\n  physicalMipSizeFromTexture,\n  reifyTextureDescriptor,\n  SampleCoord,\n  virtualMipSize,\n} from '../../../../../util/texture/base.js';\nimport {\n  kTexelRepresentationInfo,\n  NumericRange,\n  PerComponentNumericRange,\n  PerTexelComponent,\n  TexelComponent,\n  TexelRepresentationInfo,\n} from '../../../../../util/texture/texel_data.js';\nimport { TexelView } from '../../../../../util/texture/texel_view.js';\nimport { createTextureFromTexelViews } from '../../../../../util/texture.js';\nimport { reifyExtent3D } from '../../../../../util/unions.js';\n\nexport type SampledType = 'f32' | 'i32' | 'u32';\n\nexport const kSampleTypeInfo = {\n  f32: {\n    format: 'rgba8unorm',\n  },\n  i32: {\n    format: 'rgba8sint',\n  },\n  u32: {\n    format: 'rgba8uint',\n  },\n} as const;\n\n/**\n * Return the texture type for a given view dimension\n */\nexport function getTextureTypeForTextureViewDimension(viewDimension: GPUTextureViewDimension) {\n  switch (viewDimension) {\n    case '1d':\n      return 'texture_1d<f32>';\n    case '2d':\n      return 'texture_2d<f32>';\n    case '2d-array':\n      return 'texture_2d_array<f32>';\n    case '3d':\n      return 'texture_3d<f32>';\n    case 'cube':\n      return 'texture_cube<f32>';\n    case 'cube-array':\n      return 'texture_cube_array<f32>';\n    default:\n      unreachable();\n  }\n}\n\n/**\n * Returns if a texture format can potentially be filtered and can be filled with random data.\n */\nexport function isPotentiallyFilterableAndFillable(format: GPUTextureFormat) {\n  const type = kTextureFormatInfo[format].color?.type;\n  const canPotentiallyFilter = type === 'float' || type === 'unfilterable-float';\n  // We can't easily put random bytes into compressed textures if they are float formats\n  // since we want the range to be +/- 1000 and not +/- infinity or NaN.\n  const isFillable = !isCompressedTextureFormat(format) || !format.endsWith('float');\n  return canPotentiallyFilter && isFillable;\n}\n\n/**\n * skips the test if the texture format is not supported or not available or not filterable.\n */\nexport function skipIfTextureFormatNotSupportedNotAvailableOrNotFilterable(\n  t: GPUTestSubcaseBatchState,\n  format: GPUTextureFormat\n) {\n  t.skipIfTextureFormatNotSupported(format);\n  const info = kTextureFormatInfo[format];\n  if (info.color?.type === 'unfilterable-float') {\n    t.selectDeviceOrSkipTestCase('float32-filterable');\n  } else {\n    t.selectDeviceForTextureFormatOrSkipTestCase(format);\n  }\n}\n\n/**\n * Gets the mip gradient values for the current device.\n * The issue is, different GPUs have different ways of mixing between mip levels.\n * For most GPUs it's linear but for AMD GPUs on Mac in particular, it's something\n * else (which AFAICT is against all the specs).\n *\n * We seemingly have 3 options:\n *\n * 1. Increase the tolerances of tests so they pass on AMD.\n * 2. Mark AMD as failing\n * 3. Try to figure out how the GPU converts mip levels into weights\n *\n * We're doing 3.\n *\n * There's an assumption that the gradient will be the same for all formats\n * and usages.\n */\nconst kMipGradientSteps = 16;\nconst s_deviceToMipGradientValues = new WeakMap<GPUDevice, number[]>();\nasync function initMipGradientValuesForDevice(t: GPUTest) {\n  const { device } = t;\n  const weights = s_deviceToMipGradientValues.get(device);\n  if (!weights) {\n    const module = device.createShaderModule({\n      code: `\n        @group(0) @binding(0) var tex: texture_2d<f32>;\n        @group(0) @binding(1) var smp: sampler;\n        @group(0) @binding(2) var<storage, read_write> result: array<f32>;\n\n        @compute @workgroup_size(1) fn cs(@builtin(global_invocation_id) id: vec3u) {\n          let mipLevel = f32(id.x) / ${kMipGradientSteps};\n          result[id.x] = textureSampleLevel(tex, smp, vec2f(0.5), mipLevel).r;\n        }\n      `,\n    });\n\n    const pipeline = device.createComputePipeline({\n      layout: 'auto',\n      compute: { module },\n    });\n\n    const texture = t.createTextureTracked({\n      size: [2, 2, 1],\n      format: 'r8unorm',\n      usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST,\n      mipLevelCount: 2,\n    });\n\n    device.queue.writeTexture(\n      { texture, mipLevel: 1 },\n      new Uint8Array([255]),\n      { bytesPerRow: 1 },\n      [1, 1]\n    );\n\n    const sampler = device.createSampler({\n      minFilter: 'linear',\n      magFilter: 'linear',\n      mipmapFilter: 'linear',\n    });\n\n    const storageBuffer = t.createBufferTracked({\n      size: 4 * (kMipGradientSteps + 1),\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n    });\n\n    const resultBuffer = t.createBufferTracked({\n      size: storageBuffer.size,\n      usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ,\n    });\n\n    const bindGroup = device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [\n        { binding: 0, resource: texture.createView() },\n        { binding: 1, resource: sampler },\n        { binding: 2, resource: { buffer: storageBuffer } },\n      ],\n    });\n\n    const encoder = device.createCommandEncoder();\n    const pass = encoder.beginComputePass();\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bindGroup);\n    pass.dispatchWorkgroups(kMipGradientSteps + 1);\n    pass.end();\n    encoder.copyBufferToBuffer(storageBuffer, 0, resultBuffer, 0, resultBuffer.size);\n    device.queue.submit([encoder.finish()]);\n\n    await resultBuffer.mapAsync(GPUMapMode.READ);\n    const weights = Array.from(new Float32Array(resultBuffer.getMappedRange()));\n    resultBuffer.unmap();\n\n    texture.destroy();\n    storageBuffer.destroy();\n    resultBuffer.destroy();\n\n    // Validate the weights\n    assert(weights[0] === 0, 'weight 0 is 0');\n    assert(weights[kMipGradientSteps] === 1, 'top weight is 1');\n    assert(\n      Math.abs(weights[kMipGradientSteps / 2] - 0.5) < 0.0001,\n      'middle weight is approximately 0.5'\n    );\n\n    // Note: for 16 steps, these are the AMD weights\n    //\n    //                 standard\n    // step  mipLevel    gpu        AMD\n    // ----  --------  --------  ----------\n    //  0:   0         0           1\n    //  1:   0.0625    0.0625      0\n    //  2:   0.125     0.125       0.03125\n    //  3:   0.1875    0.1875      0.109375\n    //  4:   0.25      0.25        0.1875\n    //  5:   0.3125    0.3125      0.265625\n    //  6:   0.375     0.375       0.34375\n    //  7:   0.4375    0.4375      0.421875\n    //  8:   0.5       0.5         0.5\n    //  9:   0.5625    0.5625      0.578125\n    // 10:   0.625     0.625       0.65625\n    // 11:   0.6875    0.6875      0.734375\n    // 12:   0.75      0.75        0.8125\n    // 13:   0.8125    0.8125      0.890625\n    // 14:   0.875     0.875       0.96875\n    // 15:   0.9375    0.9375      1\n    // 16:   1         1           1\n    //\n    // notice step 1 is 0 and step 15 is 1.\n    // so we only check the 1 through 14.\n    for (let i = 1; i < kMipGradientSteps - 1; ++i) {\n      assert(weights[i] < weights[i + 1]);\n    }\n\n    s_deviceToMipGradientValues.set(device, weights);\n  }\n}\n\nfunction getWeightForMipLevel(t: GPUTest, mipLevelCount: number, mipLevel: number) {\n  if (mipLevel < 0 || mipLevel >= mipLevelCount) {\n    return 1;\n  }\n  // linear interpolate between weights\n  const weights = s_deviceToMipGradientValues.get(t.device);\n  assert(\n    !!weights,\n    'you must use WGSLTextureSampleTest or call initializeDeviceMipWeights before calling this function'\n  );\n  const steps = weights.length - 1;\n  const w = (mipLevel % 1) * steps;\n  const lowerNdx = Math.floor(w);\n  const upperNdx = Math.ceil(w);\n  const mix = w % 1;\n  return lerp(weights[lowerNdx], weights[upperNdx], mix);\n}\n\n/**\n * Used for textureDimension, textureNumLevels, textureNumLayers\n */\nexport class WGSLTextureQueryTest extends GPUTest {\n  executeAndExpectResult(code: string, view: GPUTextureView, expected: number[]) {\n    const { device } = this;\n    const module = device.createShaderModule({ code });\n    const pipeline = device.createComputePipeline({\n      layout: 'auto',\n      compute: {\n        module,\n      },\n    });\n\n    const resultBuffer = this.createBufferTracked({\n      size: 16,\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n    });\n\n    const bindGroup = device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [\n        { binding: 0, resource: view },\n        { binding: 1, resource: { buffer: resultBuffer } },\n      ],\n    });\n\n    const encoder = device.createCommandEncoder();\n    const pass = encoder.beginComputePass();\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bindGroup);\n    pass.dispatchWorkgroups(1);\n    pass.end();\n    device.queue.submit([encoder.finish()]);\n\n    const e = new Uint32Array(4);\n    e.set(expected);\n    this.expectGPUBufferValuesEqual(resultBuffer, e);\n  }\n}\n\n/**\n * Used for textureSampleXXX\n */\nexport class WGSLTextureSampleTest extends GPUTest {\n  override async init(): Promise<void> {\n    await super.init();\n    await initMipGradientValuesForDevice(this);\n  }\n}\n\n/**\n * Used to specify a range from [0, num)\n * The type is used to determine if values should be integers and if they can be negative.\n */\nexport type RangeDef = {\n  num: number;\n  type: 'f32' | 'i32' | 'u32';\n};\n\nfunction getLimitValue(v: number) {\n  switch (v) {\n    case Number.POSITIVE_INFINITY:\n      return 1000;\n    case Number.NEGATIVE_INFINITY:\n      return -1000;\n    default:\n      return v;\n  }\n}\n\nfunction getValueBetweenMinAndMaxTexelValueInclusive(\n  rep: TexelRepresentationInfo,\n  component: TexelComponent,\n  normalized: number\n) {\n  assert(!!rep.numericRange);\n  const perComponentRanges = rep.numericRange as PerComponentNumericRange;\n  const perComponentRange = perComponentRanges[component];\n  const range = rep.numericRange as NumericRange;\n  const { min, max } = perComponentRange ? perComponentRange : range;\n  return lerp(getLimitValue(min), getLimitValue(max), normalized);\n}\n\n/**\n * We need the software rendering to do the same interpolation as the hardware\n * rendered so for -srgb formats we set the TexelView to an -srgb format as\n * TexelView handles this case. Note: It might be nice to add rgba32float-srgb\n * or something similar to TexelView.\n */\nexport function getTexelViewFormatForTextureFormat(format: GPUTextureFormat) {\n  return format.endsWith('-srgb') ? 'rgba8unorm-srgb' : 'rgba32float';\n}\n\nconst kTextureTypeInfo = {\n  depth: {\n    componentType: 'f32',\n    resultType: 'vec4f',\n    resultFormat: 'rgba32float',\n  },\n  float: {\n    componentType: 'f32',\n    resultType: 'vec4f',\n    resultFormat: 'rgba32float',\n  },\n  'unfilterable-float': {\n    componentType: 'f32',\n    resultType: 'vec4f',\n    resultFormat: 'rgba32float',\n  },\n  sint: {\n    componentType: 'i32',\n    resultType: 'vec4i',\n    resultFormat: 'rgba32sint',\n  },\n  uint: {\n    componentType: 'u32',\n    resultType: 'vec4u',\n    resultFormat: 'rgba32uint',\n  },\n} as const;\n\nfunction getTextureFormatTypeInfo(format: GPUTextureFormat) {\n  const info = kTextureFormatInfo[format];\n  const type = info.color?.type ?? info.depth?.type ?? info.stencil?.type;\n  assert(!!type);\n  return kTextureTypeInfo[type];\n}\n\n/**\n * given a texture type 'base', returns the base with the correct component for the given texture format.\n * eg: `getTextureType('texture_2d', someUnsignedIntTextureFormat)` -> `texture_2d<u32>`\n */\nexport function appendComponentTypeForFormatToTextureType(base: string, format: GPUTextureFormat) {\n  return base.includes('depth')\n    ? base\n    : `${base}<${getTextureFormatTypeInfo(format).componentType}>`;\n}\n\n/**\n * Creates a TexelView filled with random values.\n */\nexport function createRandomTexelView(info: {\n  format: GPUTextureFormat;\n  size: GPUExtent3D;\n  mipLevel: number;\n}): TexelView {\n  const rep = kTexelRepresentationInfo[info.format as EncodableTextureFormat];\n  const size = reifyExtent3D(info.size);\n  const generator = (coords: SampleCoord): Readonly<PerTexelComponent<number>> => {\n    const texel: PerTexelComponent<number> = {};\n    for (const component of rep.componentOrder) {\n      const rnd = hashU32(\n        coords.x,\n        coords.y,\n        coords.z,\n        coords.sampleIndex ?? 0,\n        component.charCodeAt(0),\n        info.mipLevel,\n        size.width,\n        size.height,\n        size.depthOrArrayLayers\n      );\n      const normalized = clamp(rnd / 0xffffffff, { min: 0, max: 1 });\n      texel[component] = getValueBetweenMinAndMaxTexelValueInclusive(rep, component, normalized);\n    }\n    return quantize(texel, rep);\n  };\n  return TexelView.fromTexelsAsColors(info.format as EncodableTextureFormat, generator);\n}\n\n/**\n * Creates a mip chain of TexelViews filled with random values\n */\nexport function createRandomTexelViewMipmap(info: {\n  format: GPUTextureFormat;\n  size: GPUExtent3D;\n  mipLevelCount?: number;\n  dimension?: GPUTextureDimension;\n}): TexelView[] {\n  const mipLevelCount = info.mipLevelCount ?? 1;\n  const dimension = info.dimension ?? '2d';\n  return range(mipLevelCount, i =>\n    createRandomTexelView({\n      format: info.format,\n      size: virtualMipSize(dimension, info.size, i),\n      mipLevel: i,\n    })\n  );\n}\n\nexport type vec1 = [number]; // Because it's easy to deal with if these types are all array of number\nexport type vec2 = [number, number];\nexport type vec3 = [number, number, number];\nexport type vec4 = [number, number, number, number];\nexport type Dimensionality = vec1 | vec2 | vec3;\n\ntype TextureCallArgKeys = keyof TextureCallArgs<vec1>;\nconst kTextureCallArgNames: readonly TextureCallArgKeys[] = [\n  'coords',\n  'arrayIndex',\n  'sampleIndex',\n  'mipLevel',\n  'ddx',\n  'ddy',\n  'offset',\n] as const;\n\nexport interface TextureCallArgs<T extends Dimensionality> {\n  coords?: T;\n  mipLevel?: number;\n  arrayIndex?: number;\n  sampleIndex?: number;\n  ddx?: T;\n  ddy?: T;\n  offset?: T;\n}\n\nexport interface TextureCall<T extends Dimensionality> extends TextureCallArgs<T> {\n  builtin: 'textureLoad' | 'textureSample' | 'textureSampleBaseClampToEdge' | 'textureSampleLevel';\n  coordType: 'f' | 'i' | 'u';\n  levelType?: 'i' | 'u' | 'f';\n  arrayIndexType?: 'i' | 'u';\n  sampleIndexType?: 'i' | 'u';\n}\n\nconst s_u32 = new Uint32Array(1);\nconst s_f32 = new Float32Array(s_u32.buffer);\nconst s_i32 = new Int32Array(s_u32.buffer);\n\nconst kBitCastFunctions = {\n  f: (v: number) => {\n    s_f32[0] = v;\n    return s_u32[0];\n  },\n  i: (v: number) => {\n    s_i32[0] = v;\n    assert(s_i32[0] === v, 'check we are not casting non-int or out-of-range value');\n    return s_u32[0];\n  },\n  u: (v: number) => {\n    s_u32[0] = v;\n    assert(s_u32[0] === v, 'check we are not casting non-uint or out-of-range value');\n    return s_u32[0];\n  },\n};\n\nfunction getCallArgType<T extends Dimensionality>(\n  call: TextureCall<T>,\n  argName: (typeof kTextureCallArgNames)[number]\n) {\n  switch (argName) {\n    case 'coords':\n      return call.coordType;\n    case 'mipLevel':\n      assert(call.levelType !== undefined);\n      return call.levelType;\n    case 'arrayIndex':\n      assert(call.arrayIndexType !== undefined);\n      return call.arrayIndexType;\n    case 'sampleIndex':\n      assert(call.sampleIndexType !== undefined);\n      return call.sampleIndexType;\n    case 'ddx':\n    case 'ddy':\n      return 'f';\n    default:\n      unreachable();\n  }\n}\n\nfunction toArray(coords: Dimensionality): number[] {\n  if (coords instanceof Array) {\n    return coords;\n  }\n  return [coords];\n}\n\nfunction quantize(texel: PerTexelComponent<number>, repl: TexelRepresentationInfo) {\n  return repl.bitsToNumber(repl.unpackBits(new Uint8Array(repl.pack(repl.encode(texel)))));\n}\n\nfunction apply(a: number[], b: number[], op: (x: number, y: number) => number) {\n  assert(a.length === b.length, `apply(${a}, ${b}): arrays must have same length`);\n  return a.map((v, i) => op(v, b[i]));\n}\n\n/**\n * At the corner of a cubemap we need to sample just 3 texels, not 4.\n * The texels are in\n *\n *   0:  (u,v)\n *   1:  (u + 1, v)\n *   2:  (u, v + 1)\n *   3:  (u + 1, v + 1)\n *\n * We pass in the original 2d (converted from cubemap) texture coordinate.\n * If it's within half a pixel of the edge in both directions then it's\n * a corner so we return the index of the one texel that's not needed.\n * Otherwise we return -1.\n */\nfunction getUnusedCubeCornerSampleIndex(textureSize: number, coords: vec3) {\n  const u = coords[0] * textureSize;\n  const v = coords[1] * textureSize;\n  if (v < 0.5) {\n    if (u < 0.5) {\n      return 0;\n    } else if (u >= textureSize - 0.5) {\n      return 1;\n    }\n  } else if (v >= textureSize - 0.5) {\n    if (u < 0.5) {\n      return 2;\n    } else if (u >= textureSize - 0.5) {\n      return 3;\n    }\n  }\n  return -1;\n}\n\nconst add = (a: number[], b: number[]) => apply(a, b, (x, y) => x + y);\n\nexport interface Texture {\n  texels: TexelView[];\n  descriptor: GPUTextureDescriptor;\n  viewDescriptor: GPUTextureViewDescriptor;\n}\n\n/**\n * Converts the src texel representation to an RGBA representation.\n */\nfunction convertPerTexelComponentToResultFormat(\n  src: PerTexelComponent<number>,\n  format: EncodableTextureFormat\n): PerTexelComponent<number> {\n  const rep = kTexelRepresentationInfo[format];\n  const out: PerTexelComponent<number> = { R: 0, G: 0, B: 0, A: 1 };\n  for (const component of rep.componentOrder) {\n    switch (component) {\n      case 'Stencil':\n      case 'Depth':\n        out.R = src[component];\n        break;\n      default:\n        assert(out[component] !== undefined); // checks that component = R, G, B or A\n        out[component] = src[component];\n    }\n  }\n  return out;\n}\n\n/**\n * Convert RGBA result format to texel view format of src texture.\n * Effectively this converts something like { R: 0.1, G: 0, B: 0, A: 1 }\n * to { Depth: 0.1 }\n */\nfunction convertResultFormatToTexelViewFormat(\n  src: PerTexelComponent<number>,\n  format: EncodableTextureFormat\n): PerTexelComponent<number> {\n  const rep = kTexelRepresentationInfo[format];\n  const out: PerTexelComponent<number> = {};\n  for (const component of rep.componentOrder) {\n    out[component] = src[component] ?? src.R;\n  }\n  return out;\n}\n\nfunction zeroValuePerTexelComponent(components: TexelComponent[]) {\n  const out: PerTexelComponent<number> = {};\n  for (const component of components) {\n    out[component] = 0;\n  }\n  return out;\n}\n\n/**\n * Returns the expect value for a WGSL builtin texture function for a single\n * mip level\n */\nexport function softwareTextureReadMipLevel<T extends Dimensionality>(\n  call: TextureCall<T>,\n  texture: Texture,\n  sampler: GPUSamplerDescriptor | undefined,\n  mipLevel: number\n): PerTexelComponent<number> {\n  assert(mipLevel % 1 === 0);\n  const { format } = texture.texels[0];\n  const rep = kTexelRepresentationInfo[format];\n  const textureSize = virtualMipSize(\n    texture.descriptor.dimension || '2d',\n    texture.descriptor.size,\n    mipLevel\n  );\n  const addressMode: GPUAddressMode[] =\n    call.builtin === 'textureSampleBaseClampToEdge'\n      ? ['clamp-to-edge', 'clamp-to-edge', 'clamp-to-edge']\n      : [\n          sampler?.addressModeU ?? 'clamp-to-edge',\n          sampler?.addressModeV ?? 'clamp-to-edge',\n          sampler?.addressModeW ?? 'clamp-to-edge',\n        ];\n\n  const isCube =\n    texture.viewDescriptor.dimension === 'cube' ||\n    texture.viewDescriptor.dimension === 'cube-array';\n\n  const arrayIndexMult = isCube ? 6 : 1;\n  const numLayers = textureSize[2] / arrayIndexMult;\n  assert(numLayers % 1 === 0);\n  const textureSizeForCube = [textureSize[0], textureSize[1], 6];\n\n  const load = (at: number[]) => {\n    const zFromArrayIndex =\n      call.arrayIndex !== undefined\n        ? clamp(call.arrayIndex, { min: 0, max: numLayers - 1 }) * arrayIndexMult\n        : 0;\n    return texture.texels[mipLevel].color({\n      x: Math.floor(at[0]),\n      y: Math.floor(at[1] ?? 0),\n      z: Math.floor(at[2] ?? 0) + zFromArrayIndex,\n      sampleIndex: call.sampleIndex,\n    });\n  };\n\n  switch (call.builtin) {\n    case 'textureSample':\n    case 'textureSampleBaseClampToEdge':\n    case 'textureSampleLevel': {\n      let coords = toArray(call.coords!);\n\n      if (isCube) {\n        coords = convertCubeCoordToNormalized3DTextureCoord(coords as vec3);\n      }\n\n      // convert normalized to absolute texel coordinate\n      // ┌───┬───┬───┬───┐\n      // │ a │   │   │   │  norm: a = 1/8, b = 7/8\n      // ├───┼───┼───┼───┤   abs: a = 0,   b = 3\n      // │   │   │   │   │\n      // ├───┼───┼───┼───┤\n      // │   │   │   │   │\n      // ├───┼───┼───┼───┤\n      // │   │   │   │ b │\n      // └───┴───┴───┴───┘\n      let at = coords.map((v, i) => v * (isCube ? textureSizeForCube : textureSize)[i] - 0.5);\n\n      // Apply offset in whole texel units\n      // This means the offset is added at each mip level in texels. There's no\n      // scaling for each level.\n      if (call.offset !== undefined) {\n        at = add(at, toArray(call.offset));\n      }\n\n      const samples: { at: number[]; weight: number }[] = [];\n\n      const filter = sampler?.minFilter ?? 'nearest';\n      switch (filter) {\n        case 'linear': {\n          // 'p0' is the lower texel for 'at'\n          const p0 = at.map(v => Math.floor(v));\n          // 'p1' is the higher texel for 'at'\n          // If it's cube then don't advance Z.\n          const p1 = p0.map((v, i) => v + (isCube ? (i === 2 ? 0 : 1) : 1));\n\n          // interpolation weights for p0 and p1\n          const p1W = at.map((v, i) => v - p0[i]);\n          const p0W = p1W.map(v => 1 - v);\n\n          switch (coords.length) {\n            case 1:\n              samples.push({ at: p0, weight: p0W[0] });\n              samples.push({ at: p1, weight: p1W[0] });\n              break;\n            case 2: {\n              samples.push({ at: p0, weight: p0W[0] * p0W[1] });\n              samples.push({ at: [p1[0], p0[1]], weight: p1W[0] * p0W[1] });\n              samples.push({ at: [p0[0], p1[1]], weight: p0W[0] * p1W[1] });\n              samples.push({ at: p1, weight: p1W[0] * p1W[1] });\n              break;\n            }\n            case 3: {\n              // cube sampling, here in the software renderer, is the same\n              // as 2d sampling. We'll sample at most 4 texels. The weights are\n              // the same as if it was just one plane. If the points fall outside\n              // the slice they'll be wrapped by wrapFaceCoordToCubeFaceAtEdgeBoundaries\n              // below.\n              if (isCube) {\n                samples.push({ at: p0, weight: p0W[0] * p0W[1] });\n                samples.push({ at: [p1[0], p0[1], p0[2]], weight: p1W[0] * p0W[1] });\n                samples.push({ at: [p0[0], p1[1], p0[2]], weight: p0W[0] * p1W[1] });\n                samples.push({ at: p1, weight: p1W[0] * p1W[1] });\n                const ndx = getUnusedCubeCornerSampleIndex(textureSize[0], coords as vec3);\n                if (ndx >= 0) {\n                  // # Issues with corners of cubemaps\n                  //\n                  // note: I tried multiple things here\n                  //\n                  // 1. distribute 1/3 of the weight of the removed sample to each of the remaining samples\n                  // 2. distribute 1/2 of the weight of the removed sample to the 2 samples that are not the \"main\" sample.\n                  // 3. normalize the weights of the remaining 3 samples.\n                  //\n                  // none of them matched the M1 in all cases. Checking the dEQP I found this comment\n                  //\n                  // > If any of samples is out of both edges, implementations can do pretty much anything according to spec.\n                  // https://github.com/KhronosGroup/VK-GL-CTS/blob/d2d6aa65607383bb29c8398fe6562c6b08b4de57/framework/common/tcuTexCompareVerifier.cpp#L882\n                  //\n                  // If I understand this correctly it matches the OpenGL ES 3.1 spec it says\n                  // it's implementation defined.\n                  //\n                  // > OpenGL ES 3.1 section 8.12.1 Seamless Cubemap Filtering\n                  // >\n                  // > -  If a texture sample location would lie in the texture\n                  // >    border in both u and v (in one of the corners of the\n                  // >    cube), there is no unique neighboring face from which to\n                  // >    extract one texel. The recommended method to generate this\n                  // >    texel is to average the values of the three available\n                  // >    samples. However, implementations are free to construct\n                  // >    this fourth texel in another way, so long as, when the\n                  // >    three available samples have the same value, this texel\n                  // >    also has that value.\n                  //\n                  // I'm not sure what \"average the values of the three available samples\"\n                  // means. To me that would be (a+b+c)/3 or in other words, set all the\n                  // weights to 0.33333 but that's not what the M1 is doing.\n                  unreachable('corners of cubemaps are not testable');\n                }\n              } else {\n                const p = [p0, p1];\n                const w = [p0W, p1W];\n                for (let z = 0; z < 2; ++z) {\n                  for (let y = 0; y < 2; ++y) {\n                    for (let x = 0; x < 2; ++x) {\n                      samples.push({\n                        at: [p[x][0], p[y][1], p[z][2]],\n                        weight: w[x][0] * w[y][1] * w[z][2],\n                      });\n                    }\n                  }\n                }\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case 'nearest': {\n          const p = at.map(v => Math.round(quantizeToF32(v)));\n          samples.push({ at: p, weight: 1 });\n          break;\n        }\n        default:\n          unreachable();\n      }\n\n      const out: PerTexelComponent<number> = {};\n      const ss = [];\n      for (const sample of samples) {\n        const c = isCube\n          ? wrapFaceCoordToCubeFaceAtEdgeBoundaries(textureSize[0], sample.at as vec3)\n          : applyAddressModesToCoords(addressMode, textureSize, sample.at);\n        const v = load(c);\n        ss.push(v);\n        for (const component of rep.componentOrder) {\n          out[component] = (out[component] ?? 0) + v[component]! * sample.weight;\n        }\n      }\n\n      return convertPerTexelComponentToResultFormat(out, format);\n    }\n    case 'textureLoad': {\n      const out: PerTexelComponent<number> = isOutOfBoundsCall(texture, call)\n        ? zeroValuePerTexelComponent(rep.componentOrder)\n        : load(call.coords!);\n      return convertPerTexelComponentToResultFormat(out, format);\n    }\n    default:\n      unreachable();\n  }\n}\n\n/**\n * Reads a texture, optionally sampling between 2 mipLevels\n */\nexport function softwareTextureReadLevel<T extends Dimensionality>(\n  t: GPUTest,\n  call: TextureCall<T>,\n  texture: Texture,\n  sampler: GPUSamplerDescriptor | undefined,\n  mipLevel: number\n): PerTexelComponent<number> {\n  const mipLevelCount = texture.texels.length;\n  const maxLevel = mipLevelCount - 1;\n\n  if (!sampler) {\n    return softwareTextureReadMipLevel<T>(call, texture, sampler, mipLevel);\n  }\n\n  switch (sampler.mipmapFilter) {\n    case 'linear': {\n      const clampedMipLevel = clamp(mipLevel, { min: 0, max: maxLevel });\n      const baseMipLevel = Math.floor(clampedMipLevel);\n      const nextMipLevel = Math.ceil(clampedMipLevel);\n      const t0 = softwareTextureReadMipLevel<T>(call, texture, sampler, baseMipLevel);\n      const t1 = softwareTextureReadMipLevel<T>(call, texture, sampler, nextMipLevel);\n      const mix = getWeightForMipLevel(t, mipLevelCount, mipLevel);\n      const values = [\n        { v: t0, weight: 1 - mix },\n        { v: t1, weight: mix },\n      ];\n      const out: PerTexelComponent<number> = {};\n      for (const { v, weight } of values) {\n        for (const component of kRGBAComponents) {\n          out[component] = (out[component] ?? 0) + v[component]! * weight;\n        }\n      }\n      return out;\n    }\n    default: {\n      const baseMipLevel = Math.floor(\n        clamp(mipLevel + 0.5, { min: 0, max: texture.texels.length - 1 })\n      );\n      return softwareTextureReadMipLevel<T>(call, texture, sampler, baseMipLevel);\n    }\n  }\n}\n\n/**\n * The software version of a texture builtin (eg: textureSample)\n * Note that this is not a complete implementation. Rather it's only\n * what's needed to generate the correct expected value for the tests.\n */\nexport function softwareTextureRead<T extends Dimensionality>(\n  t: GPUTest,\n  call: TextureCall<T>,\n  texture: Texture,\n  sampler: GPUSamplerDescriptor\n): PerTexelComponent<number> {\n  assert(call.ddx !== undefined);\n  assert(call.ddy !== undefined);\n  const texSize = reifyExtent3D(texture.descriptor.size);\n  const textureSize = [texSize.width, texSize.height];\n\n  // ddx and ddy are the values that would be passed to textureSampleGrad\n  // If we're emulating textureSample then they're the computed derivatives\n  // such that if we passed them to textureSampleGrad they'd produce the\n  // same result.\n  const ddx: readonly number[] = typeof call.ddx === 'number' ? [call.ddx] : call.ddx;\n  const ddy: readonly number[] = typeof call.ddy === 'number' ? [call.ddy] : call.ddy;\n\n  // Compute the mip level the same way textureSampleGrad does\n  const scaledDdx = ddx.map((v, i) => v * textureSize[i]);\n  const scaledDdy = ddy.map((v, i) => v * textureSize[i]);\n  const dotDDX = dotProduct(scaledDdx, scaledDdx);\n  const dotDDY = dotProduct(scaledDdy, scaledDdy);\n  const deltaMax = Math.max(dotDDX, dotDDY);\n  // MAINTENANCE_TODO: handle texture view baseMipLevel and mipLevelCount?\n  const mipLevel = 0.5 * Math.log2(deltaMax);\n  return softwareTextureReadLevel(t, call, texture, sampler, mipLevel);\n}\n\nexport type TextureTestOptions = {\n  ddx?: number; // the derivative we want at sample time\n  ddy?: number;\n  uvwStart?: readonly [number, number]; // the starting uv value (these are used make the coordinates negative as it uncovered issues on some hardware)\n  offset?: readonly [number, number]; // a constant offset\n};\n\n/**\n * out of bounds is defined as any of the following being true\n *\n * * coords is outside the range [0, textureDimensions(t, level))\n * * array_index is outside the range [0, textureNumLayers(t))\n * * level is outside the range [0, textureNumLevels(t))\n * * sample_index is outside the range [0, textureNumSamples(s))\n */\nfunction isOutOfBoundsCall<T extends Dimensionality>(texture: Texture, call: TextureCall<T>) {\n  assert(call.coords !== undefined);\n\n  const desc = reifyTextureDescriptor(texture.descriptor);\n  const { coords, mipLevel, arrayIndex, sampleIndex } = call;\n\n  if (mipLevel !== undefined && (mipLevel < 0 || mipLevel >= desc.mipLevelCount)) {\n    return true;\n  }\n\n  const size = virtualMipSize(\n    texture.descriptor.dimension || '2d',\n    texture.descriptor.size,\n    mipLevel ?? 0\n  );\n\n  for (let i = 0; i < coords.length; ++i) {\n    const v = coords[i];\n    if (v < 0 || v >= size[i]) {\n      return true;\n    }\n  }\n\n  if (arrayIndex !== undefined) {\n    const size = reifyExtent3D(desc.size);\n    if (arrayIndex < 0 || arrayIndex >= size.depthOrArrayLayers) {\n      return true;\n    }\n  }\n\n  if (sampleIndex !== undefined) {\n    if (sampleIndex < 0 || sampleIndex >= desc.sampleCount) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction isValidOutOfBoundsValue(\n  texture: Texture,\n  gotRGBA: PerTexelComponent<number>,\n  maxFractionalDiff: number\n) {\n  // For a texture builtin with no sampler (eg textureLoad),\n  // any out of bounds access is allowed to return one of:\n  //\n  // * the value of any texel in the texture\n  // * 0,0,0,0 or 0,0,0,1 if not a depth texture\n  // * 0 if a depth texture\n  if (texture.descriptor.format.includes('depth')) {\n    if (gotRGBA.R === 0) {\n      return true;\n    }\n  } else {\n    if (\n      gotRGBA.R === 0 &&\n      gotRGBA.B === 0 &&\n      gotRGBA.G === 0 &&\n      (gotRGBA.A === 0 || gotRGBA.A === 1)\n    ) {\n      return true;\n    }\n  }\n\n  // Can be any texel value\n  for (let mipLevel = 0; mipLevel < texture.texels.length; ++mipLevel) {\n    const mipTexels = texture.texels[mipLevel];\n    const size = virtualMipSize(\n      texture.descriptor.dimension || '2d',\n      texture.descriptor.size,\n      mipLevel\n    );\n    const sampleCount = texture.descriptor.sampleCount ?? 1;\n    for (let z = 0; z < size[2]; ++z) {\n      for (let y = 0; y < size[1]; ++y) {\n        for (let x = 0; x < size[0]; ++x) {\n          for (let sampleIndex = 0; sampleIndex < sampleCount; ++sampleIndex) {\n            const texel = mipTexels.color({ x, y, z, sampleIndex });\n            const rgba = convertPerTexelComponentToResultFormat(texel, mipTexels.format);\n            if (texelsApproximatelyEqual(gotRGBA, rgba, mipTexels.format, maxFractionalDiff)) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return false;\n}\n\n/**\n * For a texture builtin with no sampler (eg textureLoad),\n * any out of bounds access is allowed to return one of:\n *\n * * the value of any texel in the texture\n * * 0,0,0,0 or 0,0,0,1 if not a depth texture\n * * 0 if a depth texture\n */\nfunction okBecauseOutOfBounds<T extends Dimensionality>(\n  texture: Texture,\n  call: TextureCall<T>,\n  gotRGBA: PerTexelComponent<number>,\n  maxFractionalDiff: number\n) {\n  if (!isOutOfBoundsCall(texture, call)) {\n    return false;\n  }\n\n  return isValidOutOfBoundsValue(texture, gotRGBA, maxFractionalDiff);\n}\n\nconst kRGBAComponents = [\n  TexelComponent.R,\n  TexelComponent.G,\n  TexelComponent.B,\n  TexelComponent.A,\n] as const;\n\nconst kRComponent = [TexelComponent.R] as const;\n\nfunction texelsApproximatelyEqual(\n  gotRGBA: PerTexelComponent<number>,\n  expectRGBA: PerTexelComponent<number>,\n  format: EncodableTextureFormat,\n  maxFractionalDiff: number\n) {\n  const rep = kTexelRepresentationInfo[format];\n  const got = convertResultFormatToTexelViewFormat(gotRGBA, format);\n  const expect = convertResultFormatToTexelViewFormat(expectRGBA, format);\n  const gULP = convertPerTexelComponentToResultFormat(\n    rep.bitsToULPFromZero(rep.numberToBits(got)),\n    format\n  );\n  const eULP = convertPerTexelComponentToResultFormat(\n    rep.bitsToULPFromZero(rep.numberToBits(expect)),\n    format\n  );\n\n  const rgbaComponentsToCheck = isDepthOrStencilTextureFormat(format)\n    ? kRComponent\n    : kRGBAComponents;\n\n  for (const component of rgbaComponentsToCheck) {\n    const g = gotRGBA[component]!;\n    const e = expectRGBA[component]!;\n    const absDiff = Math.abs(g - e);\n    const ulpDiff = Math.abs(gULP[component]! - eULP[component]!);\n    if (ulpDiff > 3 && absDiff > maxFractionalDiff) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Checks the result of each call matches the expected result.\n */\nexport async function checkCallResults<T extends Dimensionality>(\n  t: GPUTest,\n  texture: Texture,\n  textureType: string,\n  sampler: GPUSamplerDescriptor | undefined,\n  calls: TextureCall<T>[],\n  results: PerTexelComponent<number>[]\n) {\n  const errs: string[] = [];\n  const format = texture.texels[0].format;\n  const rep = kTexelRepresentationInfo[format];\n  const size = reifyExtent3D(texture.descriptor.size);\n  const maxFractionalDiff =\n    sampler?.minFilter === 'linear' ||\n    sampler?.magFilter === 'linear' ||\n    sampler?.mipmapFilter === 'linear'\n      ? getMaxFractionalDiffForTextureFormat(texture.descriptor.format)\n      : 0;\n\n  for (let callIdx = 0; callIdx < calls.length && errs.length === 0; callIdx++) {\n    const call = calls[callIdx];\n    const gotRGBA = results[callIdx];\n    const expectRGBA = softwareTextureReadLevel(t, call, texture, sampler, call.mipLevel ?? 0);\n\n    if (texelsApproximatelyEqual(gotRGBA, expectRGBA, format, maxFractionalDiff)) {\n      continue;\n    }\n\n    if (!sampler && okBecauseOutOfBounds(texture, call, gotRGBA, maxFractionalDiff)) {\n      continue;\n    }\n\n    const got = convertResultFormatToTexelViewFormat(gotRGBA, format);\n    const expect = convertResultFormatToTexelViewFormat(expectRGBA, format);\n    const gULP = rep.bitsToULPFromZero(rep.numberToBits(got));\n    const eULP = rep.bitsToULPFromZero(rep.numberToBits(expect));\n    for (const component of rep.componentOrder) {\n      const g = got[component]!;\n      const e = expect[component]!;\n      const absDiff = Math.abs(g - e);\n      const ulpDiff = Math.abs(gULP[component]! - eULP[component]!);\n      const relDiff = absDiff / Math.max(Math.abs(g), Math.abs(e));\n      if (ulpDiff > 3 && absDiff > maxFractionalDiff) {\n        const desc = describeTextureCall(call);\n        errs.push(`component was not as expected:\n      size: [${size.width}, ${size.height}, ${size.depthOrArrayLayers}]\n  mipCount: ${texture.descriptor.mipLevelCount ?? 1}\n      call: ${desc}  // #${callIdx}\n component: ${component}\n       got: ${g}\n  expected: ${e}\n  abs diff: ${absDiff.toFixed(4)}\n  rel diff: ${(relDiff * 100).toFixed(2)}%\n  ulp diff: ${ulpDiff}\n`);\n        if (sampler) {\n          const expectedSamplePoints = [\n            'expected:',\n            ...(await identifySamplePoints(texture, (texels: TexelView[]) => {\n              return Promise.resolve(\n                softwareTextureReadLevel(\n                  t,\n                  call,\n                  {\n                    texels,\n                    descriptor: texture.descriptor,\n                    viewDescriptor: texture.viewDescriptor,\n                  },\n                  sampler,\n                  call.mipLevel ?? 0\n                )\n              );\n            })),\n          ];\n          const gotSamplePoints = [\n            'got:',\n            ...(await identifySamplePoints(texture, async (texels: TexelView[]) => {\n              const gpuTexture = createTextureFromTexelViews(t, texels, texture.descriptor);\n              const result = (\n                await doTextureCalls(t, gpuTexture, texture.viewDescriptor, textureType, sampler, [\n                  call,\n                ])\n              )[0];\n              gpuTexture.destroy();\n              return result;\n            })),\n          ];\n          errs.push('  sample points:');\n          errs.push(layoutTwoColumns(expectedSamplePoints, gotSamplePoints).join('\\n'));\n          errs.push('', '');\n        }\n      }\n    }\n  }\n\n  return errs.length > 0 ? new Error(errs.join('\\n')) : undefined;\n}\n\n/**\n * \"Renders a quad\" to a TexelView with the given parameters,\n * sampling from the given Texture.\n */\nexport function softwareRasterize<T extends Dimensionality>(\n  t: GPUTest,\n  texture: Texture,\n  sampler: GPUSamplerDescriptor,\n  targetSize: [number, number],\n  options: TextureTestOptions\n) {\n  const [width, height] = targetSize;\n  const { ddx = 1, ddy = 1, uvwStart = [0, 0] } = options;\n  const format = 'rgba32float';\n\n  const textureSize = reifyExtent3D(texture.descriptor.size);\n\n  // MAINTENANCE_TODO: Consider passing these in as a similar computation\n  // happens in putDataInTextureThenDrawAndCheckResultsComparedToSoftwareRasterizer.\n  // The issue is there, the calculation is \"what do we need to multiply the unitQuad\n  // by to get the derivatives we want\". The calculation here is \"what coordinate\n  // will we get for a given frag coordinate\". It turns out to be the same calculation\n  // but needs rephrasing them so they are more obviously the same would help\n  // consolidate them into one calculation.\n  const screenSpaceUMult = (ddx * width) / textureSize.width;\n  const screenSpaceVMult = (ddy * height) / textureSize.height;\n\n  const rep = kTexelRepresentationInfo[format];\n\n  const expData = new Float32Array(width * height * 4);\n  for (let y = 0; y < height; ++y) {\n    const fragY = height - y - 1 + 0.5;\n    for (let x = 0; x < width; ++x) {\n      const fragX = x + 0.5;\n      // This code calculates the same value that will be passed to\n      // `textureSample` in the fragment shader for a given frag coord (see the\n      // WGSL code which uses the same formula, but using interpolation). That\n      // shader renders a clip space quad and includes a inter-stage \"uv\"\n      // coordinates that start with a unit quad (0,0) to (1,1) and is\n      // multiplied by ddx,ddy and as added in uStart and vStart\n      //\n      // uv = unitQuad * vec2(ddx, ddy) + vec2(vStart, uStart);\n      //\n      // softwareTextureRead<T> simulates a single call to `textureSample` so\n      // here we're computing the `uv` value that will be passed for a\n      // particular fragment coordinate. fragX / width, fragY / height provides\n      // the unitQuad value.\n      //\n      // ddx and ddy in this case are the derivative values we want to test. We\n      // pass those into the softwareTextureRead<T> as they would normally be\n      // derived from the change in coord.\n      const coords = [\n        (fragX / width) * screenSpaceUMult + uvwStart[0],\n        (fragY / height) * screenSpaceVMult + uvwStart[1],\n      ] as T;\n      const call: TextureCall<T> = {\n        builtin: 'textureSample',\n        coordType: 'f',\n        coords,\n        ddx: [ddx / textureSize.width, 0] as T,\n        ddy: [0, ddy / textureSize.height] as T,\n        offset: options.offset as T,\n      };\n      const sample = softwareTextureRead<T>(t, call, texture, sampler);\n      const rgba = { R: 0, G: 0, B: 0, A: 1, ...sample };\n      const asRgba32Float = new Float32Array(rep.pack(rgba));\n      expData.set(asRgba32Float, (y * width + x) * 4);\n    }\n  }\n\n  return TexelView.fromTextureDataByReference(format, new Uint8Array(expData.buffer), {\n    bytesPerRow: width * 4 * 4,\n    rowsPerImage: height,\n    subrectOrigin: [0, 0, 0],\n    subrectSize: targetSize,\n  });\n}\n\n/**\n * Render textured quad to an rgba32float texture.\n */\nexport function drawTexture(\n  t: GPUTest & TextureTestMixinType,\n  texture: GPUTexture,\n  samplerDesc: GPUSamplerDescriptor,\n  options: TextureTestOptions\n) {\n  const device = t.device;\n  const { ddx = 1, ddy = 1, uvwStart = [0, 0, 0], offset } = options;\n\n  const format = 'rgba32float';\n  const renderTarget = t.createTextureTracked({\n    format,\n    size: [32, 32],\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n  });\n\n  // Compute the amount we need to multiply the unitQuad by get the\n  // derivatives we want.\n  const uMult = (ddx * renderTarget.width) / texture.width;\n  const vMult = (ddy * renderTarget.height) / texture.height;\n\n  const offsetWGSL = offset ? `, vec2i(${offset[0]},${offset[1]})` : '';\n\n  const code = `\nstruct InOut {\n  @builtin(position) pos: vec4f,\n  @location(0) uv: vec2f,\n};\n\n@vertex fn vs(@builtin(vertex_index) vertex_index : u32) -> InOut {\n  let positions = array(\n    vec2f(-1,  1), vec2f( 1,  1),\n    vec2f(-1, -1), vec2f( 1, -1),\n  );\n  let pos = positions[vertex_index];\n  return InOut(\n    vec4f(pos, 0, 1),\n    (pos * 0.5 + 0.5) * vec2f(${uMult}, ${vMult}) + vec2f(${uvwStart[0]}, ${uvwStart[1]}),\n  );\n}\n\n@group(0) @binding(0) var          T    : texture_2d<f32>;\n@group(0) @binding(1) var          S    : sampler;\n\n@fragment fn fs(v: InOut) -> @location(0) vec4f {\n  return textureSample(T, S, v.uv${offsetWGSL});\n}\n`;\n\n  const shaderModule = device.createShaderModule({ code });\n\n  const pipeline = device.createRenderPipeline({\n    layout: 'auto',\n    vertex: { module: shaderModule },\n    fragment: {\n      module: shaderModule,\n      targets: [{ format }],\n    },\n    primitive: { topology: 'triangle-strip' },\n  });\n\n  const sampler = device.createSampler(samplerDesc);\n\n  const bindGroup = device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [\n      { binding: 0, resource: texture.createView() },\n      { binding: 1, resource: sampler },\n    ],\n  });\n\n  const encoder = device.createCommandEncoder();\n\n  const renderPass = encoder.beginRenderPass({\n    colorAttachments: [{ view: renderTarget.createView(), loadOp: 'clear', storeOp: 'store' }],\n  });\n\n  renderPass.setPipeline(pipeline);\n  renderPass.setBindGroup(0, bindGroup);\n  renderPass.draw(4);\n  renderPass.end();\n  device.queue.submit([encoder.finish()]);\n\n  return renderTarget;\n}\n\nfunction getMaxFractionalDiffForTextureFormat(format: GPUTextureFormat) {\n  // Note: I'm not sure what we should do here. My assumption is, given texels\n  // have random values, the difference between 2 texels can be very large. In\n  // the current version, for a float texture they can be +/- 1000 difference.\n  // Sampling is very GPU dependent. So if one pixel gets a random value of\n  // -1000 and the neighboring pixel gets +1000 then any slight variation in how\n  // sampling is applied will generate a large difference when interpolating\n  // between -1000 and +1000.\n  //\n  // We could make some entry for every format but for now I just put the\n  // tolerances here based on format texture suffix.\n  //\n  // It's possible the math in the software rasterizer is just bad but the\n  // results certainly seem close.\n  //\n  // These tolerances started from the OpenGL ES dEQP tests.\n  // Those tests always render to an rgba8unorm texture. The shaders do effectively\n  //\n  //   result = textureSample(...) * scale + bias\n  //\n  // to get the results in a 0.0 to 1.0 range. After reading the values back they\n  // expand them to their original ranges with\n  //\n  //   value = (result - bias) / scale;\n  //\n  // Tolerances from dEQP\n  // --------------------\n  // 8unorm: 3.9 / 255\n  // 8snorm: 7.9 / 128\n  // 2unorm: 7.9 / 512\n  // ufloat: 156.249\n  //  float: 31.2498\n  //\n  // The numbers below have been set empirically to get the tests to pass on all\n  // devices. The devices with the most divergence from the calculated expected\n  // values are MacOS Intel and AMD.\n  //\n  // MAINTENANCE_TODO: Double check the software rendering math and lower these\n  // tolerances if possible.\n\n  if (format.includes('depth')) {\n    return 3 / 65536;\n  } else if (format.includes('8unorm')) {\n    return 7 / 255;\n  } else if (format.includes('2unorm')) {\n    return 9 / 512;\n  } else if (format.includes('unorm')) {\n    return 7 / 255;\n  } else if (format.includes('8snorm')) {\n    return 7.9 / 128;\n  } else if (format.includes('snorm')) {\n    return 7.9 / 128;\n  } else if (format.endsWith('ufloat')) {\n    return 156.249;\n  } else if (format.endsWith('float')) {\n    return 44;\n  } else {\n    // It's likely an integer format. In any case, zero tolerance is passable.\n    return 0;\n  }\n}\n\nexport function checkTextureMatchesExpectedTexelView(\n  t: GPUTest & TextureTestMixinType,\n  format: GPUTextureFormat,\n  actualTexture: GPUTexture,\n  expectedTexelView: TexelView\n) {\n  const maxFractionalDiff = getMaxFractionalDiffForTextureFormat(format);\n  t.expectTexelViewComparisonIsOkInTexture(\n    { texture: actualTexture },\n    expectedTexelView,\n    [actualTexture.width, actualTexture.height],\n    { maxFractionalDiff }\n  );\n}\n\n/**\n * Puts data in a texture. Renders a quad to a rgba32float. Then \"software renders\"\n * to a TexelView the expected result and compares the rendered texture to the\n * expected TexelView.\n */\nexport async function putDataInTextureThenDrawAndCheckResultsComparedToSoftwareRasterizer<\n  T extends Dimensionality,\n>(\n  t: GPUTest & TextureTestMixinType,\n  descriptor: GPUTextureDescriptor,\n  viewDescriptor: GPUTextureViewDescriptor,\n  samplerDesc: GPUSamplerDescriptor,\n  options: TextureTestOptions\n) {\n  const { texture, texels } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n\n  const actualTexture = drawTexture(t, texture, samplerDesc, options);\n  const expectedTexelView = softwareRasterize<T>(\n    t,\n    { descriptor, texels, viewDescriptor },\n    samplerDesc,\n    [actualTexture.width, actualTexture.height],\n    options\n  );\n\n  checkTextureMatchesExpectedTexelView(t, texture.format, actualTexture, expectedTexelView);\n}\n\nconst sumOfCharCodesOfString = (s: unknown) =>\n  String(s)\n    .split('')\n    .reduce((sum, c) => sum + c.charCodeAt(0), 0);\n\n/**\n * Makes a function that fills a block portion of a Uint8Array with random valid data\n * for an astc block.\n *\n * The astc format is fairly complicated. For now we do the simplest thing.\n * which is to set the block as a \"void-extent\" block (a solid color).\n * This makes our test have far less precision.\n *\n * MAINTENANCE_TODO: generate other types of astc blocks. One option would\n * be to randomly select from set of pre-made blocks.\n *\n * See Spec:\n * https://registry.khronos.org/OpenGL/extensions/KHR/KHR_texture_compression_astc_hdr.txt\n */\nfunction makeAstcBlockFiller(format: GPUTextureFormat) {\n  const info = kTextureFormatInfo[format];\n  const bytesPerBlock = info.color!.bytes;\n  return (data: Uint8Array, offset: number, hashBase: number) => {\n    // set the block to be a void-extent block\n    data.set(\n      [\n        0b1111_1100, // 0\n        0b1111_1101, // 1\n        0b1111_1111, // 2\n        0b1111_1111, // 3\n        0b1111_1111, // 4\n        0b1111_1111, // 5\n        0b1111_1111, // 6\n        0b1111_1111, // 7\n      ],\n      offset\n    );\n    // fill the rest of the block with random data\n    const end = offset + bytesPerBlock;\n    for (let i = offset + 8; i < end; ++i) {\n      data[i] = hashU32(hashBase, i);\n    }\n  };\n}\n\n/**\n * Makes a function that fills a block portion of a Uint8Array with random bytes.\n */\nfunction makeRandomBytesBlockFiller(format: GPUTextureFormat) {\n  const info = kTextureFormatInfo[format];\n  const bytesPerBlock = info.color!.bytes;\n  return (data: Uint8Array, offset: number, hashBase: number) => {\n    const end = offset + bytesPerBlock;\n    for (let i = offset; i < end; ++i) {\n      data[i] = hashU32(hashBase, i);\n    }\n  };\n}\n\nfunction getBlockFiller(format: GPUTextureFormat) {\n  if (format.startsWith('astc')) {\n    return makeAstcBlockFiller(format);\n  } else {\n    return makeRandomBytesBlockFiller(format);\n  }\n}\n\n/**\n * Fills a texture with random data.\n */\nexport function fillTextureWithRandomData(device: GPUDevice, texture: GPUTexture) {\n  assert(!isCompressedFloatTextureFormat(texture.format));\n  const info = kTextureFormatInfo[texture.format];\n  const hashBase =\n    sumOfCharCodesOfString(texture.format) +\n    sumOfCharCodesOfString(texture.dimension) +\n    texture.width +\n    texture.height +\n    texture.depthOrArrayLayers +\n    texture.mipLevelCount;\n  const bytesPerBlock = info.color!.bytes;\n  const fillBlock = getBlockFiller(texture.format);\n  for (let mipLevel = 0; mipLevel < texture.mipLevelCount; ++mipLevel) {\n    const size = physicalMipSizeFromTexture(texture, mipLevel);\n    const blocksAcross = Math.ceil(size[0] / info.blockWidth);\n    const blocksDown = Math.ceil(size[1] / info.blockHeight);\n    const bytesPerRow = blocksAcross * bytesPerBlock;\n    const bytesNeeded = bytesPerRow * blocksDown * size[2];\n    const data = new Uint8Array(bytesNeeded);\n    for (let offset = 0; offset < bytesNeeded; offset += bytesPerBlock) {\n      fillBlock(data, offset, hashBase);\n    }\n    device.queue.writeTexture(\n      { texture, mipLevel },\n      data,\n      { bytesPerRow, rowsPerImage: blocksDown },\n      size\n    );\n  }\n}\n\nconst s_readTextureToRGBA32DeviceToPipeline = new WeakMap<\n  GPUDevice,\n  Map<string, GPUComputePipeline>\n>();\n\n// MAINTENANCE_TODO: remove cast once textureBindingViewDimension is added to IDL\nfunction getEffectiveViewDimension(\n  t: GPUTest,\n  descriptor: GPUTextureDescriptor\n): GPUTextureViewDimension {\n  const { textureBindingViewDimension } = descriptor as unknown as {\n    textureBindingViewDimension?: GPUTextureViewDimension;\n  };\n  const size = reifyExtent3D(descriptor.size);\n  return effectiveViewDimensionForDimension(\n    textureBindingViewDimension,\n    descriptor.dimension,\n    size.depthOrArrayLayers\n  );\n}\n\nexport async function readTextureToTexelViews(\n  t: GPUTest,\n  texture: GPUTexture,\n  descriptor: GPUTextureDescriptor,\n  format: EncodableTextureFormat\n) {\n  const device = t.device;\n  const viewDimensionToPipelineMap =\n    s_readTextureToRGBA32DeviceToPipeline.get(device) ??\n    new Map<GPUTextureViewDimension, GPUComputePipeline>();\n  s_readTextureToRGBA32DeviceToPipeline.set(device, viewDimensionToPipelineMap);\n\n  const viewDimension = getEffectiveViewDimension(t, descriptor);\n  const id = `${viewDimension}:${texture.sampleCount}`;\n  let pipeline = viewDimensionToPipelineMap.get(id);\n  if (!pipeline) {\n    let textureWGSL;\n    let loadWGSL;\n    let dimensionWGSL = 'textureDimensions(tex, uni.mipLevel)';\n    switch (viewDimension) {\n      case '2d':\n        if (texture.sampleCount > 1) {\n          textureWGSL = 'texture_multisampled_2d<f32>';\n          loadWGSL = 'textureLoad(tex, coord.xy, sampleIndex)';\n          dimensionWGSL = 'textureDimensions(tex)';\n        } else {\n          textureWGSL = 'texture_2d<f32>';\n          loadWGSL = 'textureLoad(tex, coord.xy, mipLevel)';\n        }\n        break;\n      case 'cube-array': // cube-array doesn't exist in compat so we can just use 2d_array for this\n      case '2d-array':\n        textureWGSL = 'texture_2d_array<f32>';\n        loadWGSL = `\n          textureLoad(\n              tex,\n              coord.xy,\n              coord.z,\n              mipLevel)`;\n        break;\n      case '3d':\n        textureWGSL = 'texture_3d<f32>';\n        loadWGSL = 'textureLoad(tex, coord.xyz, mipLevel)';\n        break;\n      case 'cube':\n        textureWGSL = 'texture_cube<f32>';\n        loadWGSL = `\n          textureLoadCubeAs2DArray(tex, coord.xy, coord.z, mipLevel);\n        `;\n        break;\n      default:\n        unreachable(`unsupported view: ${viewDimension}`);\n    }\n    const module = device.createShaderModule({\n      code: `\n        const faceMat = array(\n          mat3x3f( 0,  0,  -2,  0, -2,   0,  1,  1,   1),   // pos-x\n          mat3x3f( 0,  0,   2,  0, -2,   0, -1,  1,  -1),   // neg-x\n          mat3x3f( 2,  0,   0,  0,  0,   2, -1,  1,  -1),   // pos-y\n          mat3x3f( 2,  0,   0,  0,  0,  -2, -1, -1,   1),   // neg-y\n          mat3x3f( 2,  0,   0,  0, -2,   0, -1,  1,   1),   // pos-z\n          mat3x3f(-2,  0,   0,  0, -2,   0,  1,  1,  -1));  // neg-z\n\n        // needed for compat mode.\n        fn textureLoadCubeAs2DArray(tex: texture_cube<f32>, coord: vec2u, layer: u32, mipLevel: u32) -> vec4f {\n          // convert texel coord normalized coord\n          let size = textureDimensions(tex, mipLevel);\n          let uv = (vec2f(coord) + 0.5) / vec2f(size.xy);\n\n          // convert uv + layer into cube coord\n          let cubeCoord = faceMat[layer] * vec3f(uv, 1.0);\n\n          return textureSampleLevel(tex, smp, cubeCoord, f32(mipLevel));\n        }\n\n        struct Uniforms {\n          mipLevel: u32,\n          sampleCount: u32,\n        };\n\n        @group(0) @binding(0) var<uniform> uni: Uniforms;\n        @group(0) @binding(1) var tex: ${textureWGSL};\n        @group(0) @binding(2) var smp: sampler;\n        @group(0) @binding(3) var<storage, read_write> data: array<vec4f>;\n\n        @compute @workgroup_size(1) fn cs(\n          @builtin(global_invocation_id) global_invocation_id : vec3<u32>) {\n          _ = smp;\n          let size = ${dimensionWGSL};\n          let ndx = global_invocation_id.z * size.x * size.y * uni.sampleCount +\n                    global_invocation_id.y * size.x * uni.sampleCount +\n                    global_invocation_id.x;\n          let coord = vec3u(global_invocation_id.x / uni.sampleCount, global_invocation_id.yz);\n          let sampleIndex = global_invocation_id.x % uni.sampleCount;\n          let mipLevel = uni.mipLevel;\n          data[ndx] = ${loadWGSL};\n        }\n      `,\n    });\n    pipeline = device.createComputePipeline({ layout: 'auto', compute: { module } });\n    viewDimensionToPipelineMap.set(id, pipeline);\n  }\n\n  const encoder = device.createCommandEncoder();\n\n  const readBuffers = [];\n  for (let mipLevel = 0; mipLevel < texture.mipLevelCount; ++mipLevel) {\n    const size = virtualMipSize(texture.dimension, texture, mipLevel);\n\n    const uniformValues = new Uint32Array([mipLevel, texture.sampleCount, 0, 0]); // min size is 16 bytes\n    const uniformBuffer = t.createBufferTracked({\n      size: uniformValues.byteLength,\n      usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n    });\n    device.queue.writeBuffer(uniformBuffer, 0, uniformValues);\n\n    const storageBuffer = t.createBufferTracked({\n      size: size[0] * size[1] * size[2] * 4 * 4 * texture.sampleCount, // rgba32float\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n    });\n\n    const readBuffer = t.createBufferTracked({\n      size: storageBuffer.size,\n      usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\n    });\n    readBuffers.push({ size, readBuffer });\n\n    const sampler = device.createSampler();\n\n    const bindGroup = device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [\n        { binding: 0, resource: { buffer: uniformBuffer } },\n        { binding: 1, resource: texture.createView({ dimension: viewDimension }) },\n        { binding: 2, resource: sampler },\n        { binding: 3, resource: { buffer: storageBuffer } },\n      ],\n    });\n\n    const pass = encoder.beginComputePass();\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bindGroup);\n    pass.dispatchWorkgroups(size[0] * texture.sampleCount, size[1], size[2]);\n    pass.end();\n    encoder.copyBufferToBuffer(storageBuffer, 0, readBuffer, 0, readBuffer.size);\n  }\n\n  device.queue.submit([encoder.finish()]);\n\n  const texelViews: TexelView[] = [];\n\n  for (const { readBuffer, size } of readBuffers) {\n    await readBuffer.mapAsync(GPUMapMode.READ);\n\n    // need a copy of the data since unmapping will nullify the typedarray view.\n    const data = new Float32Array(readBuffer.getMappedRange()).slice();\n    readBuffer.unmap();\n\n    const { sampleCount } = texture;\n    texelViews.push(\n      TexelView.fromTexelsAsColors(format, coord => {\n        const offset =\n          ((coord.z * size[0] * size[1] + coord.y * size[0] + coord.x) * sampleCount +\n            (coord.sampleIndex ?? 0)) *\n          4;\n        return {\n          R: data[offset + 0],\n          G: data[offset + 1],\n          B: data[offset + 2],\n          A: data[offset + 3],\n        };\n      })\n    );\n  }\n\n  return texelViews;\n}\n\n/**\n * Fills a texture with random data and returns that data as\n * an array of TexelView.\n *\n * For compressed textures the texture is filled with random bytes\n * and then read back from the GPU by sampling so the GPU decompressed\n * the texture.\n *\n * For uncompressed textures the TexelViews are generated and then\n * copied to the texture.\n */\nexport async function createTextureWithRandomDataAndGetTexels(\n  t: GPUTest,\n  descriptor: GPUTextureDescriptor\n) {\n  if (isCompressedTextureFormat(descriptor.format)) {\n    const texture = t.createTextureTracked(descriptor);\n\n    fillTextureWithRandomData(t.device, texture);\n    const texels = await readTextureToTexelViews(\n      t,\n      texture,\n      descriptor,\n      getTexelViewFormatForTextureFormat(texture.format)\n    );\n    return { texture, texels };\n  } else {\n    const texels = createRandomTexelViewMipmap(descriptor);\n    const texture = createTextureFromTexelViews(t, texels, descriptor);\n    return { texture, texels };\n  }\n}\n\nfunction valueIfAllComponentsAreEqual(\n  c: PerTexelComponent<number>,\n  componentOrder: TexelComponent[]\n) {\n  const s = new Set(componentOrder.map(component => c[component]!));\n  return s.size === 1 ? s.values().next().value : undefined;\n}\n\n/**\n * Creates a VideoFrame with random data and a TexelView with the same data.\n */\nexport function createVideoFrameWithRandomDataAndGetTexels(textureSize: GPUExtent3D) {\n  const size = reifyExtent3D(textureSize);\n  assert(size.depthOrArrayLayers === 1);\n\n  // Fill ImageData with random values.\n  const imageData = new ImageData(size.width, size.height);\n  const data = imageData.data;\n  const asU32 = new Uint32Array(data.buffer);\n  for (let i = 0; i < asU32.length; ++i) {\n    asU32[i] = hashU32(i);\n  }\n\n  // Put the ImageData into a canvas and make a VideoFrame\n  const canvas = new OffscreenCanvas(size.width, size.height);\n  const ctx = canvas.getContext('2d')!;\n  ctx.putImageData(imageData, 0, 0);\n  const videoFrame = new VideoFrame(canvas, { timestamp: 0 });\n\n  // Premultiply the ImageData\n  for (let i = 0; i < data.length; i += 4) {\n    const alpha = data[i + 3] / 255;\n    data[i + 0] = data[i + 0] * alpha;\n    data[i + 1] = data[i + 1] * alpha;\n    data[i + 2] = data[i + 2] * alpha;\n  }\n\n  // Create a TexelView from the premultiplied ImageData\n  const texels = [\n    TexelView.fromTextureDataByReference('rgba8unorm', data, {\n      bytesPerRow: size.width * 4,\n      rowsPerImage: size.height,\n      subrectOrigin: [0, 0, 0],\n      subrectSize: size,\n    }),\n  ];\n\n  return { videoFrame, texels };\n}\n\nconst kFaceNames = ['+x', '-x', '+y', '-y', '+z', '-z'] as const;\n\n/**\n * Generates a text art grid showing which texels were sampled\n * followed by a list of the samples and the weights used for each\n * component.\n *\n * It works by making a set of indices for every texel in the texture.\n * It splits the set into 2. It picks one set and generates texture data\n * using TexelView.fromTexelsAsColor with [1, 1, 1, 1] texels for members\n * of the current set.\n *\n * In then calls 'run' which renders a single `call`. `run` uses either\n * the software renderer or WebGPU. It then checks the results. If the\n * result is zero, all texels in the current had no influence when sampling\n * and can be discarded.\n *\n * If the result is > 0 then, if the set has more than one member, the\n * set is split and added to the list to sets to test. If the set only\n * had one member then the result is the weight used when sampling that texel.\n *\n * This lets you see if the weights from the software renderer match the\n * weights from WebGPU.\n *\n * Example:\n *\n *     0   1   2   3   4   5   6   7\n *   ┌───┬───┬───┬───┬───┬───┬───┬───┐\n * 0 │   │   │   │   │   │   │   │   │\n *   ├───┼───┼───┼───┼───┼───┼───┼───┤\n * 1 │   │   │   │   │   │   │   │ a │\n *   ├───┼───┼───┼───┼───┼───┼───┼───┤\n * 2 │   │   │   │   │   │   │   │ b │\n *   ├───┼───┼───┼───┼───┼───┼───┼───┤\n * 3 │   │   │   │   │   │   │   │   │\n *   ├───┼───┼───┼───┼───┼───┼───┼───┤\n * 4 │   │   │   │   │   │   │   │   │\n *   ├───┼───┼───┼───┼───┼───┼───┼───┤\n * 5 │   │   │   │   │   │   │   │   │\n *   ├───┼───┼───┼───┼───┼───┼───┼───┤\n * 6 │   │   │   │   │   │   │   │   │\n *   ├───┼───┼───┼───┼───┼───┼───┼───┤\n * 7 │   │   │   │   │   │   │   │   │\n *   └───┴───┴───┴───┴───┴───┴───┴───┘\n * a: at: [7, 1], weights: [R: 0.75000]\n * b: at: [7, 2], weights: [R: 0.25000]\n */\nasync function identifySamplePoints(\n  texture: Texture,\n  run: (texels: TexelView[]) => Promise<PerTexelComponent<number>>\n) {\n  const info = texture.descriptor;\n  const isCube = texture.viewDescriptor.dimension === 'cube';\n  const mipLevelCount = texture.descriptor.mipLevelCount ?? 1;\n  const mipLevelSize = range(mipLevelCount, mipLevel =>\n    virtualMipSize(texture.descriptor.dimension ?? '2d', texture.descriptor.size, mipLevel)\n  );\n  const numTexelsPerLevel = mipLevelSize.map(size => size.reduce((s, v) => s * v));\n  const numTexelsOfPrecedingLevels = (() => {\n    let total = 0;\n    return numTexelsPerLevel.map(v => {\n      const num = total;\n      total += v;\n      return num;\n    });\n  })();\n  const numTexels = numTexelsPerLevel.reduce((sum, v) => sum + v);\n\n  // This isn't perfect. We already know there was an error. We're just\n  // generating info so it seems okay it's not perfect. This format will\n  // be used to generate weights by drawing with a texture of this format\n  // with a specific pixel set to [1, 1, 1, 1]. As such, if the result\n  // is > 0 then that pixel was sampled and the results are the weights.\n  //\n  // Ideally, this texture with a single pixel set to [1, 1, 1, 1] would\n  // be the same format we were originally testing, the one we already\n  // detected an error for. This way, whatever subtle issues there are\n  // from that format will affect the weight values we're computing. But,\n  // if that format is not encodable, for example if it's a compressed\n  // texture format, then we have no way to build a texture so we use\n  // rgba8unorm instead.\n  const format = (\n    kEncodableTextureFormats.includes(info.format as EncodableTextureFormat)\n      ? info.format\n      : 'rgba8unorm'\n  ) as EncodableTextureFormat;\n  const rep = kTexelRepresentationInfo[format];\n\n  // Identify all the texels that are sampled, and their weights.\n  const sampledTexelWeights = new Map<number, PerTexelComponent<number>>();\n  const unclassifiedStack = [new Set<number>(range(numTexels, v => v))];\n  while (unclassifiedStack.length > 0) {\n    // Pop the an unclassified texels stack\n    const unclassified = unclassifiedStack.pop()!;\n\n    // Split unclassified texels evenly into two new sets\n    const setA = new Set<number>();\n    const setB = new Set<number>();\n    [...unclassified.keys()].forEach((t, i) => ((i & 1) === 0 ? setA : setB).add(t));\n\n    // Push setB to the unclassified texels stack\n    if (setB.size > 0) {\n      unclassifiedStack.push(setB);\n    }\n\n    // See if any of the texels in setA were sampled.\n    const results = convertResultFormatToTexelViewFormat(\n      await run(\n        range(mipLevelCount, mipLevel =>\n          TexelView.fromTexelsAsColors(\n            format,\n            (coords: Required<GPUOrigin3DDict>): Readonly<PerTexelComponent<number>> => {\n              const size = mipLevelSize[mipLevel];\n              const texelsPerSlice = size[0] * size[1];\n              const texelsPerRow = size[0];\n              const texelId =\n                numTexelsOfPrecedingLevels[mipLevel] +\n                coords.x +\n                coords.y * texelsPerRow +\n                coords.z * texelsPerSlice;\n              const isCandidate = setA.has(texelId);\n              const texel: PerTexelComponent<number> = {};\n              for (const component of rep.componentOrder) {\n                texel[component] = isCandidate ? 1 : 0;\n              }\n              return texel;\n            }\n          )\n        )\n      ),\n      format\n    );\n    if (rep.componentOrder.some(c => results[c] !== 0)) {\n      // One or more texels of setA were sampled.\n      if (setA.size === 1) {\n        // We identified a specific texel was sampled.\n        // As there was only one texel in the set, results holds the sampling weights.\n        setA.forEach(texel => sampledTexelWeights.set(texel, results));\n      } else {\n        // More than one texel in the set. Needs splitting.\n        unclassifiedStack.push(setA);\n      }\n    }\n  }\n\n  const getMipLevelFromTexelId = (texelId: number) => {\n    for (let mipLevel = mipLevelCount - 1; mipLevel > 0; --mipLevel) {\n      if (texelId - numTexelsOfPrecedingLevels[mipLevel] >= 0) {\n        return mipLevel;\n      }\n    }\n    return 0;\n  };\n\n  // separate the sampledTexelWeights by mipLevel, then by layer, within a layer the texelId only includes x and y\n  const levels: Map<number, PerTexelComponent<number>>[][] = [];\n  for (const [texelId, weight] of sampledTexelWeights.entries()) {\n    const mipLevel = getMipLevelFromTexelId(texelId);\n    const level = levels[mipLevel] ?? [];\n    levels[mipLevel] = level;\n    const size = mipLevelSize[mipLevel];\n    const texelsPerSlice = size[0] * size[1];\n    const id = texelId - numTexelsOfPrecedingLevels[mipLevel];\n    const layer = Math.floor(id / texelsPerSlice);\n    const layerEntries = level[layer] ?? new Map();\n    level[layer] = layerEntries;\n    const xyId = id - layer * texelsPerSlice;\n    layerEntries.set(xyId, weight);\n  }\n\n  // ┌───┬───┬───┬───┐\n  // │ a │   │   │   │\n  // ├───┼───┼───┼───┤\n  // │   │   │   │   │\n  // ├───┼───┼───┼───┤\n  // │   │   │   │   │\n  // ├───┼───┼───┼───┤\n  // │   │   │   │ b │\n  // └───┴───┴───┴───┘\n  const lines: string[] = [];\n  const letter = (idx: number) => String.fromCodePoint(idx < 30 ? 97 + idx : idx + 9600 - 30); // 97: 'a'\n  let idCount = 0;\n\n  for (let mipLevel = 0; mipLevel < mipLevelCount; ++mipLevel) {\n    const level = levels[mipLevel];\n    if (!level) {\n      continue;\n    }\n\n    const [width, height, depthOrArrayLayers] = mipLevelSize[mipLevel];\n    const texelsPerRow = width;\n\n    for (let layer = 0; layer < depthOrArrayLayers; ++layer) {\n      const layerEntries = level[layer];\n      if (!layerEntries) {\n        continue;\n      }\n\n      const orderedTexelIndices: number[] = [];\n      lines.push('');\n      lines.push(`layer: ${layer}${isCube ? ` (${kFaceNames[layer]})` : ''}`);\n\n      {\n        let line = '  ';\n        for (let x = 0; x < width; x++) {\n          line += `  ${x.toString().padEnd(2)}`;\n        }\n        lines.push(line);\n      }\n      {\n        let line = '  ┌';\n        for (let x = 0; x < width; x++) {\n          line += x === width - 1 ? '───┐' : '───┬';\n        }\n        lines.push(line);\n      }\n      for (let y = 0; y < height; y++) {\n        {\n          let line = `${y.toString().padEnd(2)}│`;\n          for (let x = 0; x < width; x++) {\n            const texelIdx = x + y * texelsPerRow;\n            const weight = layerEntries.get(texelIdx);\n            if (weight !== undefined) {\n              line += ` ${letter(idCount + orderedTexelIndices.length)} │`;\n              orderedTexelIndices.push(texelIdx);\n            } else {\n              line += '   │';\n            }\n          }\n          lines.push(line);\n        }\n        if (y < height - 1) {\n          let line = '  ├';\n          for (let x = 0; x < width; x++) {\n            line += x === width - 1 ? '───┤' : '───┼';\n          }\n          lines.push(line);\n        }\n      }\n      {\n        let line = '  └';\n        for (let x = 0; x < width; x++) {\n          line += x === width - 1 ? '───┘' : '───┴';\n        }\n        lines.push(line);\n      }\n\n      const pad2 = (n: number) => n.toString().padStart(2);\n      const fix5 = (n: number) => n.toFixed(5);\n      orderedTexelIndices.forEach((texelIdx, i) => {\n        const weights = layerEntries.get(texelIdx)!;\n        const y = Math.floor(texelIdx / texelsPerRow);\n        const x = texelIdx % texelsPerRow;\n        const singleWeight = valueIfAllComponentsAreEqual(weights, rep.componentOrder);\n        const w =\n          singleWeight !== undefined\n            ? `weight: ${fix5(singleWeight)}`\n            : `weights: [${rep.componentOrder.map(c => `${c}: ${fix5(weights[c]!)}`).join(', ')}]`;\n        const coord = `${pad2(x)}, ${pad2(y)}, ${pad2(layer)}`;\n        lines.push(`${letter(idCount + i)}: mip(${mipLevel}) at: [${coord}], ${w}`);\n      });\n      idCount += orderedTexelIndices.length;\n    }\n  }\n\n  return lines;\n}\n\nfunction layoutTwoColumns(columnA: string[], columnB: string[]) {\n  const widthA = Math.max(...columnA.map(l => l.length));\n  const lines = Math.max(columnA.length, columnB.length);\n  const out: string[] = new Array<string>(lines);\n  for (let line = 0; line < lines; line++) {\n    const a = columnA[line] ?? '';\n    const b = columnB[line] ?? '';\n    out[line] = `${a}${' '.repeat(widthA - a.length)} | ${b}`;\n  }\n  return out;\n}\n\n/**\n * Returns the number of layers ot test for a given view dimension\n */\nexport function getDepthOrArrayLayersForViewDimension(viewDimension?: GPUTextureViewDimension) {\n  switch (viewDimension) {\n    case undefined:\n    case '2d':\n      return 1;\n    case '3d':\n      return 8;\n    case 'cube':\n      return 6;\n    default:\n      unreachable();\n  }\n}\n\n/**\n * Choose a texture size based on the given parameters.\n * The size will be in a multiple of blocks. If it's a cube\n * map the size will so be square.\n */\nexport function chooseTextureSize({\n  minSize,\n  minBlocks,\n  format,\n  viewDimension,\n}: {\n  minSize: number;\n  minBlocks: number;\n  format: GPUTextureFormat;\n  viewDimension?: GPUTextureViewDimension;\n}) {\n  const { blockWidth, blockHeight } = kTextureFormatInfo[format];\n  const width = align(Math.max(minSize, blockWidth * minBlocks), blockWidth);\n  const height = align(Math.max(minSize, blockHeight * minBlocks), blockHeight);\n  if (viewDimension === 'cube' || viewDimension === 'cube-array') {\n    const size = lcm(width, height);\n    return [size, size, viewDimension === 'cube-array' ? 24 : 6];\n  }\n  const depthOrArrayLayers = getDepthOrArrayLayersForViewDimension(viewDimension);\n  return [width, height, depthOrArrayLayers];\n}\n\nexport const kSamplePointMethods = ['texel-centre', 'spiral'] as const;\nexport type SamplePointMethods = (typeof kSamplePointMethods)[number];\n\nexport const kCubeSamplePointMethods = ['cube-edges', 'texel-centre', 'spiral'] as const;\nexport type CubeSamplePointMethods = (typeof kSamplePointMethods)[number];\n\ntype TextureBuiltinInputArgs = {\n  descriptor: GPUTextureDescriptor;\n  sampler?: GPUSamplerDescriptor;\n  mipLevel?: RangeDef;\n  sampleIndex?: RangeDef;\n  arrayIndex?: RangeDef;\n  offset?: boolean;\n  hashInputs: (number | string | boolean)[];\n};\n\n/**\n * Generates an array of coordinates at which to sample a texture.\n */\nfunction generateTextureBuiltinInputsImpl<T extends Dimensionality>(\n  makeValue: (x: number, y: number, z: number) => T,\n  n: number,\n  args:\n    | (TextureBuiltinInputArgs & {\n        method: 'texel-centre';\n      })\n    | (TextureBuiltinInputArgs & {\n        method: 'spiral';\n        radius?: number;\n        loops?: number;\n      })\n): { coords: T; mipLevel: number; sampleIndex?: number; arrayIndex?: number; offset?: T }[] {\n  const { method, descriptor } = args;\n  const dimension = descriptor.dimension ?? '2d';\n  const mipLevelCount = descriptor.mipLevelCount ?? 1;\n  const size = virtualMipSize(dimension, descriptor.size, 0);\n  const coords: T[] = [];\n  switch (method) {\n    case 'texel-centre': {\n      for (let i = 0; i < n; i++) {\n        const r = hashU32(i);\n        const x = Math.floor(lerp(0, size[0] - 1, (r & 0xff) / 0xff)) + 0.5;\n        const y = Math.floor(lerp(0, size[1] - 1, ((r >> 8) & 0xff) / 0xff)) + 0.5;\n        const z = Math.floor(lerp(0, size[2] - 1, ((r >> 16) & 0xff) / 0xff)) + 0.5;\n        coords.push(makeValue(x / size[0], y / size[1], z / size[2]));\n      }\n      break;\n    }\n    case 'spiral': {\n      const { radius = 1.5, loops = 2 } = args;\n      for (let i = 0; i < n; i++) {\n        const f = i / (Math.max(n, 2) - 1);\n        const r = radius * f;\n        const a = loops * 2 * Math.PI * f;\n        coords.push(makeValue(0.5 + r * Math.cos(a), 0.5 + r * Math.sin(a), 0));\n      }\n      break;\n    }\n  }\n\n  const _hashInputs = args.hashInputs.map(v =>\n    typeof v === 'string' ? sumOfCharCodesOfString(v) : typeof v === 'boolean' ? (v ? 1 : 0) : v\n  );\n  const makeRangeValue = ({ num, type }: RangeDef, ...hashInputs: number[]) => {\n    const range = num + type === 'u32' ? 1 : 2;\n    const number =\n      (hashU32(..._hashInputs, ...hashInputs) / 0x1_0000_0000) * range - (type === 'u32' ? 0 : 1);\n    return type === 'f32' ? number : Math.floor(number);\n  };\n  const makeIntHashValue = (min: number, max: number, ...hashInputs: number[]) => {\n    const range = max - min;\n    return min + Math.floor((hashU32(..._hashInputs, ...hashInputs) / 0x1_0000_0000) * range);\n  };\n\n  // Samplers across devices use different methods to interpolate.\n  // Quantizing the texture coordinates seems to hit coords that produce\n  // comparable results to our computed results.\n  // Note: This value works with 8x8 textures. Other sizes have not been tested.\n  // Values that worked for reference:\n  // Win 11, NVidia 2070 Super: 16\n  // Linux, AMD Radeon Pro WX 3200: 256\n  // MacOS, M1 Mac: 256\n  const kSubdivisionsPerTexel = 4;\n  const nearest = !args.sampler || args.sampler.minFilter === 'nearest';\n  return coords.map((c, i) => {\n    const mipLevel = args.mipLevel\n      ? quantizeMipLevel(makeRangeValue(args.mipLevel, i), args.sampler?.mipmapFilter ?? 'nearest')\n      : 0;\n    const clampedMipLevel = clamp(mipLevel, { min: 0, max: mipLevelCount - 1 });\n    const mipSize = virtualMipSize(dimension, size, clampedMipLevel);\n    const q = mipSize.map(v => v * kSubdivisionsPerTexel);\n\n    const coords = c.map((v, i) => {\n      // Quantize to kSubdivisionsPerPixel\n      const v1 = Math.floor(v * q[i]);\n      // If it's nearest and we're on the edge of a texel then move us off the edge\n      // since the edge could choose one texel or another in nearest mode\n      const v2 = nearest && v1 % kSubdivisionsPerTexel === 0 ? v1 + 1 : v1;\n      // Convert back to texture coords\n      return v2 / q[i];\n    }) as T;\n\n    return {\n      coords,\n      mipLevel,\n      sampleIndex: args.sampleIndex ? makeRangeValue(args.sampleIndex, i, 1) : undefined,\n      arrayIndex: args.arrayIndex ? makeRangeValue(args.arrayIndex, i, 2) : undefined,\n      offset: args.offset\n        ? (coords.map((_, j) => makeIntHashValue(-8, 8, i, 3 + j)) as T)\n        : undefined,\n    };\n  });\n}\n\nconst kMipEpsilon = 0.02;\nfunction quantizeMipLevel(mipLevel: number, mipmapFilter: GPUFilterMode) {\n  if (mipmapFilter === 'linear') {\n    return mipLevel;\n  }\n  const intMip = Math.floor(mipLevel);\n  const fractionalMip = mipLevel - intMip;\n  if (fractionalMip < 0.5 - kMipEpsilon || fractionalMip > 0.5 + kMipEpsilon) {\n    return mipLevel;\n  } else {\n    return intMip + 0.5 + (fractionalMip < 0.5 ? -kMipEpsilon : +kMipEpsilon);\n  }\n}\n\n// Removes the first element from an array of types\ntype FilterFirstElement<T extends unknown[]> = T extends [unknown, ...infer R] ? R : [];\n\ntype GenerateTextureBuiltinInputsImplArgs = FilterFirstElement<\n  Parameters<typeof generateTextureBuiltinInputsImpl>\n>;\n\nexport function generateTextureBuiltinInputs1D(...args: GenerateTextureBuiltinInputsImplArgs) {\n  return generateTextureBuiltinInputsImpl<vec1>((x: number) => [x], ...args);\n}\n\nexport function generateTextureBuiltinInputs2D(...args: GenerateTextureBuiltinInputsImplArgs) {\n  return generateTextureBuiltinInputsImpl<vec2>((x: number, y: number) => [x, y], ...args);\n}\n\nexport function generateTextureBuiltinInputs3D(...args: GenerateTextureBuiltinInputsImplArgs) {\n  return generateTextureBuiltinInputsImpl<vec3>(\n    (x: number, y: number, z: number) => [x, y, z],\n    ...args\n  );\n}\n\ntype mat3 =\n  /* prettier-ignore */ [\n  number, number, number,\n  number, number, number,\n  number, number, number,\n];\n\nconst kFaceUVMatrices: mat3[] =\n  /* prettier-ignore */ [\n  [ 0,  0,  -2,  0, -2,   0,  1,  1,   1],   // pos-x\n  [ 0,  0,   2,  0, -2,   0, -1,  1,  -1],   // neg-x\n  [ 2,  0,   0,  0,  0,   2, -1,  1,  -1],   // pos-y\n  [ 2,  0,   0,  0,  0,  -2, -1, -1,   1],   // neg-y\n  [ 2,  0,   0,  0, -2,   0, -1,  1,   1],   // pos-z\n  [-2,  0,   0,  0, -2,   0,  1,  1,  -1],   // neg-z\n];\n\n/** multiply a vec3 by mat3 */\nfunction transformMat3(v: vec3, m: mat3): vec3 {\n  const x = v[0];\n  const y = v[1];\n  const z = v[2];\n\n  return [\n    x * m[0] + y * m[3] + z * m[6],\n    x * m[1] + y * m[4] + z * m[7],\n    x * m[2] + y * m[5] + z * m[8],\n  ];\n}\n\n/** normalize a vec3 */\nfunction normalize(v: vec3): vec3 {\n  const length = Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);\n  assert(length > 0);\n  return v.map(v => v / length) as vec3;\n}\n\n/**\n * Converts a cube map coordinate to a uv coordinate (0 to 1) and layer (0.5/6.0 to 5.5/6.0).\n */\nexport function convertCubeCoordToNormalized3DTextureCoord(v: vec3): vec3 {\n  let uvw;\n  let layer;\n  // normalize the coord.\n  // MAINTENANCE_TODO: handle(0, 0, 0)\n  const r = normalize(v);\n  const absR = r.map(v => Math.abs(v));\n  if (absR[0] > absR[1] && absR[0] > absR[2]) {\n    // x major\n    const negX = r[0] < 0.0 ? 1 : 0;\n    uvw = [negX ? r[2] : -r[2], -r[1], absR[0]];\n    layer = negX;\n  } else if (absR[1] > absR[2]) {\n    // y major\n    const negY = r[1] < 0.0 ? 1 : 0;\n    uvw = [r[0], negY ? -r[2] : r[2], absR[1]];\n    layer = 2 + negY;\n  } else {\n    // z major\n    const negZ = r[2] < 0.0 ? 1 : 0;\n    uvw = [negZ ? -r[0] : r[0], -r[1], absR[2]];\n    layer = 4 + negZ;\n  }\n  return [(uvw[0] / uvw[2] + 1) * 0.5, (uvw[1] / uvw[2] + 1) * 0.5, (layer + 0.5) / 6];\n}\n\n/**\n * Convert a 3d texcoord into a cube map coordinate.\n */\nexport function convertNormalized3DTexCoordToCubeCoord(uvLayer: vec3) {\n  const [u, v, faceLayer] = uvLayer;\n  return normalize(transformMat3([u, v, 1], kFaceUVMatrices[Math.min(5, faceLayer * 6) | 0]));\n}\n\n/**\n * We have a face texture in texels coord where U/V choose a texel and W chooses the face.\n * If U/V are outside the size of the texture then, when normalized and converted\n * to a cube map coordinate, they'll end up pointing to a different face.\n *\n * addressMode is effectively ignored for cube\n *\n *             +-----------+\n *             |0->u       |\n *             |↓          |\n *             |v   +y     |\n *             |    (2)    |\n *             |           |\n * +-----------+-----------+-----------+-----------+\n * |0->u       |0->u       |0->u       |0->u       |\n * |↓          |↓          |↓          |↓          |\n * |v   -x     |v   +z     |v   +x     |v   -z     |\n * |    (1)    |    (4)    |    (0)    |    (5)    |\n * |           |           |           |           |\n * +-----------+-----------+-----------+-----------+\n *             |0->u       |\n *             |↓          |\n *             |v   -y     |\n *             |    (3)    |\n *             |           |\n *             +-----------+\n */\nconst kFaceConversions = {\n  u: (textureSize: number, faceCoord: vec3) => faceCoord[0],\n  v: (textureSize: number, faceCoord: vec3) => faceCoord[1],\n  'u+t': (textureSize: number, faceCoord: vec3) => faceCoord[0] + textureSize,\n  'u-t': (textureSize: number, faceCoord: vec3) => faceCoord[0] - textureSize,\n  'v+t': (textureSize: number, faceCoord: vec3) => faceCoord[1] + textureSize,\n  'v-t': (textureSize: number, faceCoord: vec3) => faceCoord[1] - textureSize,\n  't-v': (textureSize: number, faceCoord: vec3) => textureSize - faceCoord[1],\n  '1+u': (textureSize: number, faceCoord: vec3) => 1 + faceCoord[0],\n  '1+v': (textureSize: number, faceCoord: vec3) => 1 + faceCoord[1],\n  '-v-1': (textureSize: number, faceCoord: vec3) => -faceCoord[1] - 1,\n  't-u-1': (textureSize: number, faceCoord: vec3) => textureSize - faceCoord[0] - 1,\n  't-v-1': (textureSize: number, faceCoord: vec3) => textureSize - faceCoord[1] - 1,\n  '2t-u-1': (textureSize: number, faceCoord: vec3) => textureSize * 2 - faceCoord[0] - 1,\n  '2t-v-1': (textureSize: number, faceCoord: vec3) => textureSize * 2 - faceCoord[1] - 1,\n} as const;\nconst kFaceConversionEnums = keysOf(kFaceConversions);\ntype FaceCoordConversion = (typeof kFaceConversionEnums)[number];\n\n// For Each face\n//   face to go if u < 0\n//   face to go if u >= textureSize\n//   face to go if v < 0\n//   face to go if v >= textureSize\nconst kFaceToFaceRemap: { to: number; u: FaceCoordConversion; v: FaceCoordConversion }[][] = [\n  // 0\n  [\n    /* -u */ { to: 4, u: 'u+t', v: 'v' },\n    /* +u */ { to: 5, u: 'u-t', v: 'v' },\n    /* -v */ { to: 2, u: 'v+t', v: 't-u-1' },\n    /* +v */ { to: 3, u: '2t-v-1', v: 'u' },\n  ],\n  // 1\n  [\n    /* -u */ { to: 5, u: 'u+t', v: 'v' },\n    /* +u */ { to: 4, u: 'u-t', v: 'v' },\n    /* -v */ { to: 2, u: '-v-1', v: 'u' }, // -1->0, -2->1  -3->2\n    /* +v */ { to: 3, u: 't-v', v: 't-u-1' },\n  ],\n  // 2\n  [\n    /* -u */ { to: 1, u: 'v', v: '1+u' },\n    /* +u */ { to: 0, u: 't-v-1', v: 'u-t' },\n    /* -v */ { to: 5, u: 't-u-1', v: '-v-1' },\n    /* +v */ { to: 4, u: 'u', v: 'v-t' },\n  ],\n  // 3\n  [\n    /* -u */ { to: 1, u: 't-v-1', v: 'u+t' },\n    /* +u */ { to: 0, u: 'v', v: '2t-u-1' },\n    /* -v */ { to: 4, u: 'u', v: 'v+t' },\n    /* +v */ { to: 5, u: 't-u-1', v: '2t-v-1' },\n  ],\n  // 4\n  [\n    /* -u */ { to: 1, u: 'u+t', v: 'v' },\n    /* +u */ { to: 0, u: 'u-t', v: 'v' },\n    /* -v */ { to: 2, u: 'u', v: 'v+t' },\n    /* +v */ { to: 3, u: 'u', v: 'v-t' },\n  ],\n  // 5\n  [\n    /* -u */ { to: 0, u: 'u+t', v: 'v' },\n    /* +u */ { to: 1, u: 'u-t', v: 'v' },\n    /* -v */ { to: 2, u: 't-u-1', v: '1+v' },\n    /* +v */ { to: 3, u: 't-u-1', v: '2t-v-1' },\n  ],\n];\n\nfunction getFaceWrapIndex(textureSize: number, faceCoord: vec3) {\n  if (faceCoord[0] < 0) {\n    return 0;\n  }\n  if (faceCoord[0] >= textureSize) {\n    return 1;\n  }\n  if (faceCoord[1] < 0) {\n    return 2;\n  }\n  if (faceCoord[1] >= textureSize) {\n    return 3;\n  }\n  return -1;\n}\n\nfunction applyFaceWrap(textureSize: number, faceCoord: vec3): vec3 {\n  const ndx = getFaceWrapIndex(textureSize, faceCoord);\n  if (ndx < 0) {\n    return faceCoord;\n  }\n  const { to, u, v } = kFaceToFaceRemap[faceCoord[2]][ndx];\n  return [\n    kFaceConversions[u](textureSize, faceCoord),\n    kFaceConversions[v](textureSize, faceCoord),\n    to,\n  ];\n}\n\nfunction wrapFaceCoordToCubeFaceAtEdgeBoundaries(textureSize: number, faceCoord: vec3) {\n  // If we're off both edges we need to wrap twice, once for each edge.\n  const faceCoord1 = applyFaceWrap(textureSize, faceCoord);\n  const faceCoord2 = applyFaceWrap(textureSize, faceCoord1);\n  return faceCoord2;\n}\n\nfunction applyAddressModesToCoords(\n  addressMode: GPUAddressMode[],\n  textureSize: number[],\n  coord: number[]\n) {\n  return coord.map((v, i) => {\n    switch (addressMode[i]) {\n      case 'clamp-to-edge':\n        return clamp(v, { min: 0, max: textureSize[i] - 1 });\n      case 'mirror-repeat': {\n        const n = Math.floor(v / textureSize[i]);\n        v = v - n * textureSize[i];\n        return (n & 1) !== 0 ? textureSize[i] - v - 1 : v;\n      }\n      case 'repeat':\n        return v - Math.floor(v / textureSize[i]) * textureSize[i];\n      default:\n        unreachable();\n    }\n  });\n}\n\n/**\n * Generates an array of coordinates at which to sample a texture for a cubemap\n */\nexport function generateSamplePointsCube(\n  n: number,\n  args:\n    | (TextureBuiltinInputArgs & {\n        method: 'texel-centre';\n      })\n    | (TextureBuiltinInputArgs & {\n        method: 'spiral';\n        radius?: number;\n        loops?: number;\n      })\n    | (TextureBuiltinInputArgs & {\n        method: 'cube-edges';\n      })\n): {\n  coords: vec3;\n  mipLevel: number;\n  arrayIndex?: number;\n  offset?: undefined;\n}[] {\n  const { method, descriptor } = args;\n  const mipLevelCount = descriptor.mipLevelCount ?? 1;\n  const size = virtualMipSize('2d', descriptor.size, 0);\n  const textureWidth = size[0];\n  const coords: vec3[] = [];\n  switch (method) {\n    case 'texel-centre': {\n      for (let i = 0; i < n; i++) {\n        const r = hashU32(i);\n        const u = (Math.floor(lerp(0, textureWidth - 1, (r & 0xff) / 0xff)) + 0.5) / textureWidth;\n        const v =\n          (Math.floor(lerp(0, textureWidth - 1, ((r >> 8) & 0xff) / 0xff)) + 0.5) / textureWidth;\n        const face = Math.floor(lerp(0, 6, ((r >> 16) & 0xff) / 0x100));\n        coords.push(convertNormalized3DTexCoordToCubeCoord([u, v, face]));\n      }\n      break;\n    }\n    case 'spiral': {\n      const { radius = 1.5, loops = 2 } = args;\n      for (let i = 0; i < n; i++) {\n        const f = (i + 1) / (Math.max(n, 2) - 1);\n        const r = radius * f;\n        const theta = loops * 2 * Math.PI * f;\n        const phi = loops * 1.3 * Math.PI * f;\n        const sinTheta = Math.sin(theta);\n        const cosTheta = Math.cos(theta);\n        const sinPhi = Math.sin(phi);\n        const cosPhi = Math.cos(phi);\n        const ux = cosTheta * sinPhi;\n        const uy = cosPhi;\n        const uz = sinTheta * sinPhi;\n        coords.push([ux * r, uy * r, uz * r]);\n      }\n      break;\n    }\n    case 'cube-edges': {\n      /* prettier-ignore */\n      coords.push(\n        // between edges\n        [-1.01, -1.02,  0],\n        [ 1.01, -1.02,  0],\n        [-1.01,  1.02,  0],\n        [ 1.01,  1.02,  0],\n\n        [-1.01,  0, -1.02],\n        [ 1.01,  0, -1.02],\n        [-1.01,  0,  1.02],\n        [ 1.01,  0,  1.02],\n\n        [-1.01, -1.02,  0],\n        [ 1.01, -1.02,  0],\n        [-1.01,  1.02,  0],\n        [ 1.01,  1.02,  0],\n\n        // corners (see comment \"Issues with corners of cubemaps\")\n        // for why these are commented out.\n        // [-1.01, -1.02, -1.03],\n        // [ 1.01, -1.02, -1.03],\n        // [-1.01,  1.02, -1.03],\n        // [ 1.01,  1.02, -1.03],\n        // [-1.01, -1.02,  1.03],\n        // [ 1.01, -1.02,  1.03],\n        // [-1.01,  1.02,  1.03],\n        // [ 1.01,  1.02,  1.03],\n      );\n      break;\n    }\n  }\n\n  const _hashInputs = args.hashInputs.map(v =>\n    typeof v === 'string' ? sumOfCharCodesOfString(v) : typeof v === 'boolean' ? (v ? 1 : 0) : v\n  );\n  const makeRangeValue = ({ num, type }: RangeDef, ...hashInputs: number[]) => {\n    const range = num + type === 'u32' ? 1 : 2;\n    const number =\n      (hashU32(..._hashInputs, ...hashInputs) / 0x1_0000_0000) * range - (type === 'u32' ? 0 : 1);\n    return type === 'f32' ? number : Math.floor(number);\n  };\n\n  // Samplers across devices use different methods to interpolate.\n  // Quantizing the texture coordinates seems to hit coords that produce\n  // comparable results to our computed results.\n  // Note: This value works with 8x8 textures. Other sizes have not been tested.\n  // Values that worked for reference:\n  // Win 11, NVidia 2070 Super: 16\n  // Linux, AMD Radeon Pro WX 3200: 256\n  // MacOS, M1 Mac: 256\n  const kSubdivisionsPerTexel = 4;\n  const nearest = !args.sampler || args.sampler.minFilter === 'nearest';\n  return coords.map((c, i) => {\n    const mipLevel = args.mipLevel ? makeRangeValue(args.mipLevel, i) : 0;\n    const clampedMipLevel = clamp(mipLevel, { min: 0, max: mipLevelCount - 1 });\n    const mipSize = virtualMipSize('2d', size, clampedMipLevel);\n    const q = [\n      mipSize[0] * kSubdivisionsPerTexel,\n      mipSize[0] * kSubdivisionsPerTexel,\n      6 * kSubdivisionsPerTexel,\n    ];\n\n    const uvw = convertCubeCoordToNormalized3DTextureCoord(c);\n\n    // If this is a corner, move to in so it's not\n    // (see comment \"Issues with corners of cubemaps\")\n    const ndx = getUnusedCubeCornerSampleIndex(mipSize[0], uvw);\n    if (ndx >= 0) {\n      const halfTexel = 0.5 / mipSize[0];\n      uvw[0] = clamp(uvw[0], { min: halfTexel, max: 1 - halfTexel });\n    }\n\n    const quantizedUVW = uvw.map((v, i) => {\n      // Quantize to kSubdivisionsPerPixel\n      const v1 = Math.floor(v * q[i]);\n      // If it's nearest and we're on the edge of a texel then move us off the edge\n      // since the edge could choose one texel or another in nearest mode\n      const v2 = nearest && v1 % kSubdivisionsPerTexel === 0 ? v1 + 1 : v1;\n      // Convert back to texture coords\n      return v2 / q[i];\n    }) as vec3;\n    const coords = convertNormalized3DTexCoordToCubeCoord(quantizedUVW);\n    return {\n      coords,\n      mipLevel,\n      arrayIndex: args.arrayIndex ? makeRangeValue(args.arrayIndex, i, 2) : undefined,\n    };\n  });\n}\n\nfunction wgslTypeFor(data: number | Dimensionality, type: 'f' | 'i' | 'u'): string {\n  if (Array.isArray(data)) {\n    switch (data.length) {\n      case 1:\n        return `${type}32`;\n      case 2:\n        return `vec2${type}`;\n      case 3:\n        return `vec3${type}`;\n      default:\n        unreachable();\n    }\n  }\n  return `${type}32`;\n}\n\nfunction wgslExpr(data: number | vec1 | vec2 | vec3 | vec4): string {\n  if (Array.isArray(data)) {\n    switch (data.length) {\n      case 1:\n        return data[0].toString();\n      case 2:\n        return `vec2(${data.map(v => v.toString()).join(', ')})`;\n      case 3:\n        return `vec3(${data.map(v => v.toString()).join(', ')})`;\n      default:\n        unreachable();\n    }\n  }\n  return data.toString();\n}\n\nfunction wgslExprFor(data: number | vec1 | vec2 | vec3 | vec4, type: 'f' | 'i' | 'u'): string {\n  if (Array.isArray(data)) {\n    switch (data.length) {\n      case 1:\n        return `${type}(${data[0].toString()})`;\n      case 2:\n        return `vec2${type}(${data.map(v => v.toString()).join(', ')})`;\n      case 3:\n        return `vec3${type}(${data.map(v => v.toString()).join(', ')})`;\n      default:\n        unreachable();\n    }\n  }\n  return `${type}32(${data.toString()})`;\n}\n\nfunction binKey<T extends Dimensionality>(call: TextureCall<T>): string {\n  const keys: string[] = [];\n  for (const name of kTextureCallArgNames) {\n    const value = call[name];\n    if (value !== undefined) {\n      if (name === 'offset') {\n        // offset must be a constant expression\n        keys.push(`${name}: ${wgslExpr(value)}`);\n      } else {\n        keys.push(`${name}: ${wgslTypeFor(value, call.coordType)}`);\n      }\n    }\n  }\n  return `${call.builtin}(${keys.join(', ')})`;\n}\n\nfunction buildBinnedCalls<T extends Dimensionality>(calls: TextureCall<T>[]) {\n  const args: string[] = ['T']; // All texture builtins take the texture as the first argument\n  const fields: string[] = [];\n  const data: number[] = [];\n\n  const prototype = calls[0];\n  if (prototype.builtin.startsWith('textureSample')) {\n    // textureSample*() builtins take a sampler as the second argument\n    args.push('S');\n  }\n\n  for (const name of kTextureCallArgNames) {\n    const value = prototype[name];\n    if (value !== undefined) {\n      if (name === 'offset') {\n        args.push(`/* offset */ ${wgslExpr(value)}`);\n      } else {\n        const type =\n          name === 'mipLevel'\n            ? prototype.levelType!\n            : name === 'arrayIndex'\n            ? prototype.arrayIndexType!\n            : name === 'sampleIndex'\n            ? prototype.sampleIndexType!\n            : prototype.coordType;\n        args.push(`args.${name}`);\n        fields.push(`@align(16) ${name} : ${wgslTypeFor(value, type)}`);\n      }\n    }\n  }\n\n  for (const call of calls) {\n    for (const name of kTextureCallArgNames) {\n      const value = call[name];\n      assert(\n        (prototype[name] === undefined) === (value === undefined),\n        'texture calls are not binned correctly'\n      );\n      if (value !== undefined && name !== 'offset') {\n        const type = getCallArgType<T>(call, name);\n        const bitcastToU32 = kBitCastFunctions[type];\n        if (value instanceof Array) {\n          for (const c of value) {\n            data.push(bitcastToU32(c));\n          }\n        } else {\n          data.push(bitcastToU32(value));\n        }\n        // All fields are aligned to 16 bytes.\n        while ((data.length & 3) !== 0) {\n          data.push(0);\n        }\n      }\n    }\n  }\n\n  const expr = `${prototype.builtin}(${args.join(', ')})`;\n\n  return { expr, fields, data };\n}\n\nfunction binCalls<T extends Dimensionality>(calls: TextureCall<T>[]): number[][] {\n  const map = new Map<string, number>(); // key to bin index\n  const bins: number[][] = [];\n  calls.forEach((call, callIdx) => {\n    const key = binKey(call);\n    const binIdx = map.get(key);\n    if (binIdx === undefined) {\n      map.set(key, bins.length);\n      bins.push([callIdx]);\n    } else {\n      bins[binIdx].push(callIdx);\n    }\n  });\n  return bins;\n}\n\nexport function describeTextureCall<T extends Dimensionality>(call: TextureCall<T>): string {\n  const args: string[] = ['texture: T'];\n  if (call.builtin.startsWith('textureSample')) {\n    args.push('sampler: S');\n  }\n  for (const name of kTextureCallArgNames) {\n    const value = call[name];\n    if (value !== undefined) {\n      if (name === 'coords') {\n        args.push(`${name}: ${wgslExprFor(value, call.coordType)}`);\n      } else if (name === 'mipLevel') {\n        args.push(`${name}: ${wgslExprFor(value, call.levelType!)}`);\n      } else if (name === 'arrayIndex') {\n        args.push(`${name}: ${wgslExprFor(value, call.arrayIndexType!)}`);\n      } else if (name === 'sampleIndex') {\n        args.push(`${name}: ${wgslExprFor(value, call.sampleIndexType!)}`);\n      } else {\n        args.push(`${name}: ${wgslExpr(value)}`);\n      }\n    }\n  }\n  return `${call.builtin}(${args.join(', ')})`;\n}\n\nconst s_deviceToPipelines = new WeakMap<GPUDevice, Map<string, GPURenderPipeline>>();\n\n/**\n * Given a list of \"calls\", each one of which has a texture coordinate,\n * generates a fragment shader that uses the fragment position as an index\n * (position.y * 256 + position.x) That index is then used to look up a\n * coordinate from a storage buffer which is used to call the WGSL texture\n * function to read/sample the texture, and then write to an rgba32float\n * texture.  We then read the rgba32float texture for the per \"call\" results.\n *\n * Calls are \"binned\" by call parameters. Each bin has its own structure and\n * field in the storage buffer. This allows the calls to be non-homogenous and\n * each have their own data type for coordinates.\n */\nexport async function doTextureCalls<T extends Dimensionality>(\n  t: GPUTest,\n  gpuTexture: GPUTexture | GPUExternalTexture,\n  viewDescriptor: GPUTextureViewDescriptor,\n  textureType: string,\n  sampler: GPUSamplerDescriptor | undefined,\n  calls: TextureCall<T>[]\n) {\n  let structs = '';\n  let body = '';\n  let dataFields = '';\n  const data: number[] = [];\n  let callCount = 0;\n  const binned = binCalls(calls);\n  binned.forEach((binCalls, binIdx) => {\n    const b = buildBinnedCalls(binCalls.map(callIdx => calls[callIdx]));\n    structs += `struct Args${binIdx} {\n  ${b.fields.join(',  \\n')}\n}\n`;\n    dataFields += `  args${binIdx} : array<Args${binIdx}, ${binCalls.length}>,\n`;\n    body += `\n  {\n    let is_active = (frag_idx >= ${callCount}) & (frag_idx < ${callCount + binCalls.length});\n    let args = data.args${binIdx}[frag_idx - ${callCount}];\n    let call = ${b.expr};\n    result = select(result, call, is_active);\n  }\n`;\n    callCount += binCalls.length;\n    data.push(...b.data);\n  });\n\n  const dataBuffer = t.createBufferTracked({\n    size: data.length * 4,\n    usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.STORAGE,\n  });\n  t.device.queue.writeBuffer(dataBuffer, 0, new Uint32Array(data));\n\n  const { resultType, resultFormat, componentType } =\n    gpuTexture instanceof GPUExternalTexture\n      ? ({ resultType: 'vec4f', resultFormat: 'rgba32float', componentType: 'f32' } as const)\n      : textureType.includes('depth')\n      ? ({ resultType: 'f32', resultFormat: 'rgba32float', componentType: 'f32' } as const)\n      : getTextureFormatTypeInfo(gpuTexture.format);\n  const returnType = `vec4<${componentType}>`;\n\n  const rtWidth = 256;\n  const renderTarget = t.createTextureTracked({\n    format: resultFormat,\n    size: { width: rtWidth, height: Math.ceil(calls.length / rtWidth) },\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n  });\n\n  const code = `\n${structs}\n\nstruct Data {\n${dataFields}\n}\n\n@vertex\nfn vs_main(@builtin(vertex_index) vertex_index : u32) -> @builtin(position) vec4f {\n  let positions = array(\n    vec4f(-1,  1, 0, 1), vec4f( 1,  1, 0, 1),\n    vec4f(-1, -1, 0, 1), vec4f( 1, -1, 0, 1),\n  );\n  return positions[vertex_index];\n}\n\n@group(0) @binding(0) var          T    : ${textureType};\n${sampler ? '@group(0) @binding(1) var          S    : sampler' : ''};\n@group(0) @binding(2) var<storage> data : Data;\n\n@fragment\nfn fs_main(@builtin(position) frag_pos : vec4f) -> @location(0) ${returnType} {\n  let frag_idx = u32(frag_pos.x) + u32(frag_pos.y) * ${renderTarget.width};\n  var result : ${resultType};\n${body}\n  return ${returnType}(result);\n}\n`;\n\n  const pipelines = s_deviceToPipelines.get(t.device) ?? new Map<string, GPURenderPipeline>();\n  s_deviceToPipelines.set(t.device, pipelines);\n\n  const id = `${renderTarget.format}:${code}`;\n  let pipeline = pipelines.get(id);\n  if (!pipeline) {\n    const shaderModule = t.device.createShaderModule({ code });\n\n    pipeline = await t.device.createRenderPipelineAsync({\n      layout: 'auto',\n      vertex: { module: shaderModule },\n      fragment: {\n        module: shaderModule,\n        targets: [{ format: renderTarget.format }],\n      },\n      primitive: { topology: 'triangle-strip' },\n    });\n\n    pipelines.set(id, pipeline);\n  }\n\n  const gpuSampler = sampler ? t.device.createSampler(sampler) : undefined;\n\n  const bindGroup = t.device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [\n      {\n        binding: 0,\n        resource:\n          gpuTexture instanceof GPUExternalTexture\n            ? gpuTexture\n            : gpuTexture.createView(viewDescriptor),\n      },\n      ...(sampler ? [{ binding: 1, resource: gpuSampler! }] : []),\n      { binding: 2, resource: { buffer: dataBuffer } },\n    ],\n  });\n\n  const bytesPerRow = align(16 * renderTarget.width, 256);\n  const resultBuffer = t.createBufferTracked({\n    size: renderTarget.height * bytesPerRow,\n    usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ,\n  });\n  const encoder = t.device.createCommandEncoder();\n\n  const renderPass = encoder.beginRenderPass({\n    colorAttachments: [\n      {\n        view: renderTarget.createView(),\n        loadOp: 'clear',\n        storeOp: 'store',\n      },\n    ],\n  });\n\n  renderPass.setPipeline(pipeline);\n  renderPass.setBindGroup(0, bindGroup);\n  renderPass.draw(4);\n  renderPass.end();\n  encoder.copyTextureToBuffer(\n    { texture: renderTarget },\n    { buffer: resultBuffer, bytesPerRow },\n    { width: renderTarget.width, height: renderTarget.height }\n  );\n  t.device.queue.submit([encoder.finish()]);\n\n  await resultBuffer.mapAsync(GPUMapMode.READ);\n\n  const view = TexelView.fromTextureDataByReference(\n    renderTarget.format as EncodableTextureFormat,\n    new Uint8Array(resultBuffer.getMappedRange()),\n    {\n      bytesPerRow,\n      rowsPerImage: renderTarget.height,\n      subrectOrigin: [0, 0, 0],\n      subrectSize: [renderTarget.width, renderTarget.height],\n    }\n  );\n\n  let outIdx = 0;\n  const out = new Array<PerTexelComponent<number>>(calls.length);\n  for (const bin of binned) {\n    for (const callIdx of bin) {\n      const x = outIdx % rtWidth;\n      const y = Math.floor(outIdx / rtWidth);\n      out[callIdx] = view.color({ x, y, z: 0 });\n      outIdx++;\n    }\n  }\n\n  renderTarget.destroy();\n  resultBuffer.destroy();\n\n  return out;\n}\n"],"mappings":"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"}