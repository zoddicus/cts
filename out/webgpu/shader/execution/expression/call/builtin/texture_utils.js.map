{"version":3,"file":"texture_utils.js","names":["keysOf","assert","range","unreachable","Float16Array","is32Float","isCompressedFloatTextureFormat","isCompressedTextureFormat","isDepthOrStencilTextureFormat","isDepthTextureFormat","isEncodableTextureFormat","isSintOrUintFormat","isStencilTextureFormat","kEncodableTextureFormats","kTextureFormatInfo","GPUTest","align","clamp","dotProduct","hashU32","lcm","lerp","quantizeToF32","effectiveViewDimensionForDimension","physicalMipSize","physicalMipSizeFromTexture","reifyTextureDescriptor","virtualMipSize","kTexelRepresentationInfo","TexelComponent","TexelView","createTextureFromTexelViews","reifyExtent3D","kShortShaderStageToShaderStage","c","f","v","kShortShaderStages","kShortAddressModeToAddressMode","r","m","kShortAddressModes","kSampleTypeInfo","f32","format","i32","u32","isSupportedViewFormatCombo","viewDimension","getTextureTypeForTextureViewDimension","isUnencodableDepthFormat","skipIfNeedsFilteringAndIsUnfilterableOrSelectDevice","t","filter","features","Set","add","feature","skipIf","type","color","size","selectDeviceOrSkipTestCase","Array","from","skipIfNeedsFilteringAndIsUnfilterable","isFillable","endsWith","isPotentiallyFilterableAndFillable","info","depth","canPotentiallyFilter","result","skipIfTextureFormatNotSupportedNotAvailableOrNotFilterable","skipIfTextureFormatNotSupported","selectDeviceForTextureFormatOrSkipTestCase","builtinNeedsMipLevelWeights","builtin","unzip","array","num","arrays","forEach","i","push","makeGraph","width","height","data","Uint8Array","plot","norm","x","y","Math","floor","min","max","offset","plotValues","values","toString","conversion","lines","subarray","map","join","linear0to1OverN","n","graphWeights","weights","graph","length","validateWeights","stage","showWeights","padStart","kMipLevelWeightSteps","kMinPercentUniqueWeights","queryMipLevelMixWeightsForDevice","device","kNumWeightTypes","module","createShaderModule","code","texture","createTextureTracked","usage","GPUTextureUsage","TEXTURE_BINDING","COPY_DST","mipLevelCount","queue","writeTexture","mipLevel","bytesPerRow","sampler","createSampler","minFilter","magFilter","mipmapFilter","target","RENDER_ATTACHMENT","storageBuffer","createBufferTracked","GPUBufferUsage","STORAGE","COPY_SRC","resultBuffer","MAP_READ","createBindGroup","pipeline","layout","getBindGroupLayout","entries","binding","resource","createView","buffer","encoder","createCommandEncoder","createComputePipeline","compute","pass","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","createRenderPipeline","vertex","entryPoint","fragment","targets","beginRenderPass","colorAttachments","view","loadOp","storeOp","draw","copyBufferToBuffer","submit","finish","mapAsync","GPUMapMode","READ","Float32Array","getMappedRange","unmap","destroy","sampleLevelWeights","gradWeights","softwareMixToGPUMixGradWeights","generateSoftwareMixToGPUMixGradWeights","getIndexAndWeight","lo","hi","w0","w1","weight","bilinearFilter","ndx","v0","v1","gpuWeights","numSteps","depthOrArrayLayers","softwareWeights","u","g","computeMipLevelFromGradients","softwareMixToGPUMixMap","mix","mapSoftwareMipLevelToGPUMipLevel","baseLevel","softwareMix","gpuMix","getMixWeightByTypeForMipLevel","euclideanModulo","s_deviceToMipLevelWeightsPromise","WeakMap","s_deviceToMipLevelWeights","initMipLevelWeightsForDevice","stageWeightsP","get","set","weightsP","then","stageWeights","catch","e","weightType","steps","w","lowerNdx","upperNdx","ceil","getWeightForMipLevel","WGSLTextureQueryTest","executeAndExpectResult","viewDescriptor","expected","returnType","castWGSL","stageWGSL","wgsl","visibility","GPUShaderStage","COMPUTE","FRAGMENT","VERTEX","GPUExternalTexture","externalTexture","includes","storageTexture","access","dimension","sampleType","aspect","sampleCount","multisampled","bindGroupLayouts","createBindGroupLayout","hasDynamicOffset","minBindingSize","createPipelineLayout","bindGroup0","renderTarget","bindGroup1","setViewport","copyTextureToBuffer","Uint32Array","expectGPUBufferValuesEqual","WGSLTextureSampleTest","init","getLimitValue","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","getMinAndMaxTexelValueForComponent","rep","component","numericRange","perComponentRanges","perComponentRange","getTexelViewFormatForTextureFormat","kTextureTypeInfo","componentType","resultType","resultFormat","float","sint","uint","getTextureFormatTypeInfo","stencil","appendComponentTypeForFormatToTextureType","base","makeRandomDepthComparisonTexelGenerator","comparison","comparisonIsEqualOrNotEqual","fixedValues","encode","coords","texel","componentOrder","rnd","z","sampleIndex","charCodeAt","normalized","quantize","createRandomTexelViewViaColors","options","minMax","Object","fromEntries","generator","fromTexelsAsColors","createRandomTexelViewViaBytes","formatInfo","bytesPerBlock","bytes","blocksAcross","blockWidth","blocksDown","blockHeight","bytesNeeded","hashBase","sumOfCharCodesOfString","R","asFloat","asU32","fromTextureDataByReference","rowsPerImage","subrectOrigin","subrectSize","createRandomTexelView","canFillWithRandomTypedData","createRandomTexelViewMipmap","kTextureCallArgNames","isBuiltinComparison","isBuiltinGather","builtinNeedsSampler","startsWith","builtinNeedsDerivatives","isCubeViewDimension","isViewDimensionCubeOrCubeArray","s_u32","s_f32","s_i32","Int32Array","kBitCastFunctions","getCallArgType","call","argName","coordType","undefined","levelType","arrayIndexType","sampleIndexType","toArray","repl","bitsToNumber","unpackBits","pack","apply","a","b","op","getUnusedCubeCornerSampleIndex","textureSize","convertPerTexelComponentToResultFormat","src","out","G","B","A","convertToTexelViewFormat","Depth","Stencil","convertResultFormatToTexelViewFormat","zeroValuePerTexelComponent","components","kSamplerFns","never","ref","less","equal","less-equal","greater","not-equal","greater-equal","always","applyCompare","depthRef","compareFn","compare","softwareTextureReadMipLevel","texels","descriptor","addressMode","addressModeU","addressModeV","addressModeW","isCube","arrayIndexMult","numLayers","textureSizeForCube","load","at","zFromArrayIndex","arrayIndex","convertCubeCoordToNormalized3DTextureCoord","samples","p0","p1","p1W","p0W","describeTextureCall","p","round","componentNdx","kRGBAComponents","sample","wrapFaceCoordToCubeFaceAtEdgeBoundaries","applyAddressModesToCoords","postV","rgba","isOutOfBoundsCall","softwareTextureReadLevel","maxLevel","effectiveMipmapFilter","clampedMipLevel","baseMipLevel","nextMipLevel","t0","t1","ddx","ddy","texSize","scaledDdx","scaledDdy","dotDDX","dotDDY","deltaMax","log2","computeMipLevelFromGradientsForCall","softwareTextureReadGrad","bias","weightMipLevel","derivativeBaseForCall","isDDX","derivativeForCall","dd","derivativeMult","softwareTextureRead","newCall","desc","isValidOutOfBoundsValue","gotRGBA","maxFractionalDiff","mipTexels","texelsApproximatelyEqual","okBecauseOutOfBounds","kRComponent","gotFormat","expectRGBA","expectedFormat","got","expect","gULP","bitsToULPFromZero","numberToBits","eULP","rgbaComponentsToCheck","absDiff","abs","ulpDiff","getULPFromZeroForComponents","temp","comp","ulp","checkCallResults","textureType","calls","results","shortShaderStage","gpuTexture","haveComparisonCheckInfo","checkInfo","runner","gpuTexels","errs","getMaxFractionalDiffForTextureFormat","callIdx","callSpecificMaxFractionalDiff","bad","diffs","isNaN","maxAbs","relDiff","isFloatType","fix5","toFixed","fix5v","arr","rgbaToArray","coord","faceNdx","mipSize","slice","kFaceNames","biasStr","clampedBias","rec","debugging","debugCalls","debugCall","debugSampler","debugRunner","createTextureCallsRunner","readTextureToTexelViews","callForSamplePoints","useTexelFormatForGPUTexture","expectedSamplePoints","identifySamplePoints","Promise","resolve","gotSamplePoints","createTextureFromTexelViewsLocal","run","layoutTwoColumns","Error","s","String","split","reduce","sum","makeAstcBlockFiller","makeRandomBytesBlockFiller","getBlockFiller","fillTextureWithRandomData","fillBlock","s_readTextureToRGBA32DeviceToPipeline","getEffectiveViewDimension","textureBindingViewDimension","viewDimensionToPipelineMap","Map","id","textureWGSL","loadWGSL","dimensionWGSL","textureLoadCubeWGSL","bindGroupLayout","readBuffers","uniformValues","uniformBuffer","byteLength","UNIFORM","writeBuffer","readBuffer","getAspectForTexture","bindGroup","texelViews","Ctor","modifiedDescriptor","createTextureWithRandomDataAndGetTexels","d32Descriptor","tempTexels","valueIfAllComponentsAreEqual","next","value","createVideoFrameWithRandomDataAndGetTexels","imageData","ImageData","canvas","OffscreenCanvas","ctx","getContext","putImageData","videoFrame","VideoFrame","timestamp","alpha","callForSamples","originalCall","mipLevelSize","numTexelsPerLevel","numTexelsOfPrecedingLevels","total","numTexels","getMipLevelFromTexelId","texelId","getTexelCoordFromTexelId","texelsPerSlice","layer","xyId","convertResultAsAppropriate","sampledTexelWeights","unclassifiedStack","unclassified","pop","setA","setB","keys","texelsPerRow","isCandidate","has","some","levels","level","layerEntries","letter","idx","fromCodePoint","idCount","blockHChar","blockVChar","blockHCell","rangeCat","fn","orderedTexelIndices","unSampled","face","padEnd","line","colChar","texelIdx","pad2","pad3","formatValue","formatTexel","k","colorLines","compareLines","levelWeight","singleWeight","texelStr","compareTexel","columnA","columnB","widthA","l","repeat","getDepthOrArrayLayersForViewDimension","chooseTextureSize","minSize","minBlocks","blockLCM","largest","kSamplePointMethods","kCubeSamplePointMethods","generateTextureBuiltinInputsImpl","makeValue","args","method","radius","loops","PI","cos","sin","_hashInputs","hashInputs","makeRandValue","number","makeRangeValue","makeIntHashValueRepeatable","kSubdivisionsPerTexel","avoidEdgeCase","textureBuiltin","edgeRemainder","avoidTextureEdge","axis","textureDimensionUnits","inside","outside","numComponents","quantizeMipLevel","q","isTexelEdgeCase","v2","v3","makeGradient","hashInput","_","intPart","fractPart","makeDerivativeMult","mult","fill","pow","chooseMipLevel","innerLevelR","innerLevel","outerLevel","makeDerivativeMultForTextureSample","makeBiasAndDerivativeMult","derivativeBasedMipLevel","derivatives","grad","j","kMipEpsilon","intMip","fractionalMip","generateTextureBuiltinInputs1D","generateTextureBuiltinInputs2D","generateTextureBuiltinInputs3D","kFaceUVMatrices","transformMat3","normalize","sqrt","uvw","absR","negX","negY","negZ","convertNormalized3DTexCoordToCubeCoord","uvLayer","faceLayer","faceCoord","nc0","cc","nc1","fc","generateSamplePointsCube","textureWidth","theta","phi","sinTheta","cosTheta","sinPhi","cosPhi","ux","uy","uz","makeIntHashValue","halfTexel","quantizedUVW","isEdgeCase","units","wgslTypeFor","isArray","wgslExpr","wgslExprFor","binKey","name","buildBinnedCalls","fields","prototype","bitcastToU32","expr","binCalls","bins","key","binIdx","derivativeWGSL","s_deviceToPipelines","structs","body","dataFields","callCount","binned","dataBuffer","isCompare","samplerType","derivativeBaseWGSL","derivativeType","pipelines","isFiltering","JSON","stringify","bindGroupLayout0","bindGroupLayout1","gpuSampler","runViewDescriptor","outIdx","bin","doTextureCalls"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/texture_utils.ts"],"sourcesContent":["import { keysOf } from '../../../../../../common/util/data_tables.js';\nimport { assert, range, unreachable } from '../../../../../../common/util/util.js';\nimport { Float16Array } from '../../../../../../external/petamoriken/float16/float16.js';\nimport {\n  EncodableTextureFormat,\n  is32Float,\n  isCompressedFloatTextureFormat,\n  isCompressedTextureFormat,\n  isDepthOrStencilTextureFormat,\n  isDepthTextureFormat,\n  isEncodableTextureFormat,\n  isSintOrUintFormat,\n  isStencilTextureFormat,\n  kEncodableTextureFormats,\n  kTextureFormatInfo,\n} from '../../../../../format_info.js';\nimport { GPUTest, GPUTestSubcaseBatchState } from '../../../../../gpu_test.js';\nimport {\n  align,\n  clamp,\n  dotProduct,\n  hashU32,\n  lcm,\n  lerp,\n  quantizeToF32,\n} from '../../../../../util/math.js';\nimport {\n  effectiveViewDimensionForDimension,\n  physicalMipSize,\n  physicalMipSizeFromTexture,\n  reifyTextureDescriptor,\n  SampleCoord,\n  virtualMipSize,\n} from '../../../../../util/texture/base.js';\nimport {\n  kTexelRepresentationInfo,\n  NumericRange,\n  PerComponentNumericRange,\n  PerTexelComponent,\n  TexelComponent,\n  TexelRepresentationInfo,\n} from '../../../../../util/texture/texel_data.js';\nimport { PerPixelAtLevel, TexelView } from '../../../../../util/texture/texel_view.js';\nimport { createTextureFromTexelViews } from '../../../../../util/texture.js';\nimport { reifyExtent3D } from '../../../../../util/unions.js';\nimport { ShaderStage } from '../../../../validation/decl/util.js';\n\n// These are needed because the list of parameters was too long when converted to a filename.\nexport const kShortShaderStageToShaderStage = {\n  c: 'compute' as ShaderStage,\n  f: 'fragment' as ShaderStage,\n  v: 'vertex' as ShaderStage,\n} as const;\nexport const kShortShaderStages = keysOf(kShortShaderStageToShaderStage);\nexport type ShortShaderStage = (typeof kShortShaderStages)[number];\n\n// These are needed because the list of parameters was too long when converted to a filename.\nexport const kShortAddressModeToAddressMode: Record<string, GPUAddressMode> = {\n  c: 'clamp-to-edge',\n  r: 'repeat',\n  m: 'mirror-repeat',\n};\n\nexport const kShortAddressModes = keysOf(kShortAddressModeToAddressMode);\n\nexport const kSampleTypeInfo = {\n  f32: {\n    format: 'rgba8unorm',\n  },\n  i32: {\n    format: 'rgba8sint',\n  },\n  u32: {\n    format: 'rgba8uint',\n  },\n} as const;\n\n// MAINTENANCE_TODO: Stop excluding sliced compressed 3d formats.\nexport function isSupportedViewFormatCombo(\n  format: GPUTextureFormat,\n  viewDimension: GPUTextureViewDimension\n) {\n  return !(\n    (isCompressedTextureFormat(format) || isDepthOrStencilTextureFormat(format)) &&\n    (viewDimension === '3d' || viewDimension === '1d')\n  );\n}\n\n/**\n * Return the texture type for a given view dimension\n */\nexport function getTextureTypeForTextureViewDimension(viewDimension: GPUTextureViewDimension) {\n  switch (viewDimension) {\n    case '1d':\n      return 'texture_1d<f32>';\n    case '2d':\n      return 'texture_2d<f32>';\n    case '2d-array':\n      return 'texture_2d_array<f32>';\n    case '3d':\n      return 'texture_3d<f32>';\n    case 'cube':\n      return 'texture_cube<f32>';\n    case 'cube-array':\n      return 'texture_cube_array<f32>';\n    default:\n      unreachable();\n  }\n}\n\nconst isUnencodableDepthFormat = (format: GPUTextureFormat) =>\n  format === 'depth24plus' ||\n  format === 'depth24plus-stencil8' ||\n  format === 'depth32float-stencil8';\n\n/**\n * Skips a subcase if the filter === 'linear' and the format is type\n * 'unfilterable-float' and we cannot enable filtering.\n */\nexport function skipIfNeedsFilteringAndIsUnfilterableOrSelectDevice(\n  t: GPUTestSubcaseBatchState,\n  filter: GPUFilterMode,\n  format: GPUTextureFormat\n) {\n  const features = new Set<GPUFeatureName | undefined>();\n  features.add(kTextureFormatInfo[format].feature);\n\n  if (filter === 'linear') {\n    t.skipIf(isDepthTextureFormat(format), 'depth texture are unfilterable');\n\n    const type = kTextureFormatInfo[format].color?.type;\n    if (type === 'unfilterable-float') {\n      assert(is32Float(format));\n      features.add('float32-filterable');\n    }\n  }\n\n  if (features.size > 0) {\n    t.selectDeviceOrSkipTestCase(Array.from(features));\n  }\n}\n\n/**\n * Skips a test if filter === 'linear' and the format is not filterable\n */\nexport function skipIfNeedsFilteringAndIsUnfilterable(\n  t: GPUTest,\n  filter: GPUFilterMode,\n  format: GPUTextureFormat\n) {\n  if (filter === 'linear') {\n    t.skipIf(isDepthTextureFormat(format), 'depth textures are unfilterable');\n  }\n}\n\n/**\n * Returns if a texture format can be filled with random data.\n */\nexport function isFillable(format: GPUTextureFormat) {\n  // We can't easily put random bytes into compressed textures if they are float formats\n  // since we want the range to be +/- 1000 and not +/- infinity or NaN.\n  return !isCompressedTextureFormat(format) || !format.endsWith('float');\n}\n\n/**\n * Returns if a texture format can potentially be filtered and can be filled with random data.\n */\nexport function isPotentiallyFilterableAndFillable(format: GPUTextureFormat) {\n  const info = kTextureFormatInfo[format];\n  const type = info.color?.type ?? info.depth?.type;\n  const canPotentiallyFilter =\n    type === 'float' || type === 'unfilterable-float' || type === 'depth';\n  const result = canPotentiallyFilter && isFillable(format);\n  return result;\n}\n\n/**\n * skips the test if the texture format is not supported or not available or not filterable.\n */\nexport function skipIfTextureFormatNotSupportedNotAvailableOrNotFilterable(\n  t: GPUTestSubcaseBatchState,\n  format: GPUTextureFormat\n) {\n  t.skipIfTextureFormatNotSupported(format);\n  const info = kTextureFormatInfo[format];\n  if (info.color?.type === 'unfilterable-float') {\n    t.selectDeviceOrSkipTestCase('float32-filterable');\n  } else {\n    t.selectDeviceForTextureFormatOrSkipTestCase(format);\n  }\n}\n\nconst builtinNeedsMipLevelWeights = (builtin: TextureBuiltin) =>\n  builtin !== 'textureLoad' &&\n  builtin !== 'textureGather' &&\n  builtin !== 'textureGatherCompare' &&\n  builtin !== 'textureSampleBaseClampToEdge';\n\n/**\n * Splits in array into multiple arrays where every Nth value goes to a different array\n */\nfunction unzip<T>(array: T[], num: number) {\n  const arrays: T[][] = range(num, () => []);\n  array.forEach((v, i) => {\n    arrays[i % num].push(v);\n  });\n  return arrays;\n}\n\ntype MipWeights = {\n  sampleLevelWeights?: number[];\n  softwareMixToGPUMixGradWeights?: number[];\n};\ntype MipWeightType = keyof MipWeights;\n\nfunction makeGraph(width: number, height: number) {\n  const data = new Uint8Array(width * height);\n\n  return {\n    plot(norm: number, x: number, c: number) {\n      const y = clamp(Math.floor(norm * height), { min: 0, max: height - 1 });\n      const offset = (height - y - 1) * width + x;\n      data[offset] = c;\n    },\n    plotValues(values: Iterable<number>, c: number) {\n      let i = 0;\n      for (const v of values) {\n        this.plot(v, i, c);\n        ++i;\n      }\n    },\n    toString(conversion = ['.', 'e', 'A']) {\n      const lines = [];\n      for (let y = 0; y < height; ++y) {\n        const offset = y * width;\n        lines.push([...data.subarray(offset, offset + width)].map(v => conversion[v]).join(''));\n      }\n      return lines.join('\\n');\n    },\n  };\n}\n\nfunction* linear0to1OverN(n: number) {\n  for (let i = 0; i <= n; ++i) {\n    yield i / n;\n  }\n}\n\n/**\n * Generates an ascii graph of weights\n */\nexport function graphWeights(height: number, weights: number[]) {\n  const graph = makeGraph(weights.length, height);\n  graph.plotValues(linear0to1OverN(weights.length - 1), 1);\n  graph.plotValues(weights, 2);\n  return graph.toString();\n}\n\n/**\n * Validates the weights go from 0 to 1 in increasing order.\n */\nfunction validateWeights(stage: string, weights: number[]) {\n  const showWeights = () => `\n${weights.map((v, i) => `${i.toString().padStart(2)}: ${v}`).join('\\n')}\n\ne = expected\nA = actual\n${graphWeights(32, weights)}\n`;\n\n  // Validate the weights\n  assert(\n    weights[0] === 0,\n    `stage: ${stage}, weight 0 expected 0 but was ${weights[0]}\\n${showWeights()}`\n  );\n  assert(\n    weights[kMipLevelWeightSteps] === 1,\n    `stage: ${stage}, top weight expected 1 but was ${\n      weights[kMipLevelWeightSteps]\n    }\\n${showWeights()}`\n  );\n\n  // Test that we don't have a mostly flat set of weights.\n  // This is also some small guarantee that we actually read something.\n  // Note: Ideally every value is unique but 25% is about how many an Intel Mac\n  // returns in a compute stage.\n  const kMinPercentUniqueWeights = 25;\n  assert(\n    new Set(weights).size >= ((weights.length * kMinPercentUniqueWeights * 0.01) | 0),\n    `stage: ${stage}, expected at least ~${kMinPercentUniqueWeights}% unique weights\\n${showWeights()}`\n  );\n}\n\n/**\n * In an attempt to pass on more devices without lowering the tolerances\n * so low they are meaningless, we ask the hardware to tell us, for a given\n * gradient, level, what mix weights are being used.\n *\n * This is done by drawing instanced quads and using instance_index to\n * write out results into an array. We sample a 2x2 pixel texture with\n * 2 mip levels and set the 2nd mip level to white. This means the value\n * we get back represents the weight used to mix the 2 mip levels.\n *\n * Just as a record of some differences across GPUs\n *\n * level weights: mapping from the mip level\n * parameter of `textureSampleLevel` to\n * the mix weight used by the GPU\n *\n * +--------+--------+--------+--------+\n * |        |        | intel  | amd    |\n * |        |  m1    | gen-9  | rna-1  |\n * | level  |  mac   | mac    | mac    |\n * +--------+--------+--------+--------+\n * | 0.0000 | 0.0000 | 0.0000 | 0.0000 |\n * | 0.0313 | 0.0314 | 0.0313 | 0.0000 |\n * | 0.0625 | 0.0625 | 0.0625 | 0.0000 |\n * | 0.0938 | 0.0939 | 0.0938 | 0.0000 |\n * | 0.1250 | 0.1250 | 0.1250 | 0.0313 |\n * | 0.1563 | 0.1564 | 0.1563 | 0.0703 |\n * | 0.1875 | 0.1875 | 0.1875 | 0.1094 |\n * | 0.2188 | 0.2189 | 0.2188 | 0.1484 |\n * | 0.2500 | 0.2500 | 0.2500 | 0.1875 |\n * | 0.2813 | 0.2814 | 0.2813 | 0.2266 |\n * | 0.3125 | 0.3125 | 0.3125 | 0.2656 |\n * | 0.3438 | 0.3439 | 0.3438 | 0.3047 |\n * | 0.3750 | 0.3750 | 0.3750 | 0.3438 |\n * | 0.4063 | 0.4064 | 0.4063 | 0.3828 |\n * | 0.4375 | 0.4375 | 0.4375 | 0.4219 |\n * | 0.4688 | 0.4689 | 0.4688 | 0.4609 |\n * | 0.5000 | 0.5000 | 0.5000 | 0.5000 |\n * | 0.5313 | 0.5314 | 0.5313 | 0.5391 |\n * | 0.5625 | 0.5625 | 0.5625 | 0.5781 |\n * | 0.5938 | 0.5939 | 0.5938 | 0.6172 |\n * | 0.6250 | 0.6250 | 0.6250 | 0.6563 |\n * | 0.6563 | 0.6564 | 0.6563 | 0.6953 |\n * | 0.6875 | 0.6875 | 0.6875 | 0.7344 |\n * | 0.7188 | 0.7189 | 0.7188 | 0.7734 |\n * | 0.7500 | 0.7500 | 0.7500 | 0.8125 |\n * | 0.7813 | 0.7814 | 0.7813 | 0.8516 |\n * | 0.8125 | 0.8125 | 0.8125 | 0.8906 |\n * | 0.8438 | 0.8439 | 0.8438 | 0.9297 |\n * | 0.8750 | 0.8750 | 0.8750 | 0.9688 |\n * | 0.9063 | 0.9064 | 0.9063 | 1.0000 |\n * | 0.9375 | 0.9375 | 0.9375 | 1.0000 |\n * | 0.9688 | 0.9689 | 0.9688 | 1.0000 |\n * | 1.0000 | 1.0000 | 1.0000 | 1.0000 |\n * +--------+--------+--------+--------+\n *\n * grad weights: mapping from ddx value\n * passed into `textureSampleGrad` to\n * the mix weight used by the GPU\n *\n * +--------+--------+--------+--------+\n * |        |        | intel  | amd    |\n * |        |  m1    | gen-9  | rna-1  |\n * |  ddx   |  mac   | mac    | mac    |\n * +--------+--------+--------+--------+\n * | 0.5000 | 0.0000 | 0.0000 | 0.0000 |\n * | 0.5109 | 0.0390 | 0.0430 | 0.0000 |\n * | 0.5221 | 0.0821 | 0.0859 | 0.0000 |\n * | 0.5336 | 0.1211 | 0.1289 | 0.0352 |\n * | 0.5453 | 0.1600 | 0.1719 | 0.0898 |\n * | 0.5572 | 0.2032 | 0.2109 | 0.1328 |\n * | 0.5694 | 0.2422 | 0.2461 | 0.1797 |\n * | 0.5819 | 0.2814 | 0.2852 | 0.2305 |\n * | 0.5946 | 0.3203 | 0.3203 | 0.2773 |\n * | 0.6076 | 0.3554 | 0.3594 | 0.3164 |\n * | 0.6209 | 0.3868 | 0.3906 | 0.3633 |\n * | 0.6345 | 0.4218 | 0.4258 | 0.4063 |\n * | 0.6484 | 0.4532 | 0.4609 | 0.4492 |\n * | 0.6626 | 0.4882 | 0.4922 | 0.4883 |\n * | 0.6771 | 0.5196 | 0.5234 | 0.5273 |\n * | 0.6920 | 0.5507 | 0.5547 | 0.5664 |\n * | 0.7071 | 0.5860 | 0.5859 | 0.6055 |\n * | 0.7226 | 0.6132 | 0.6133 | 0.6406 |\n * | 0.7384 | 0.6407 | 0.6445 | 0.6797 |\n * | 0.7546 | 0.6679 | 0.6719 | 0.7148 |\n * | 0.7711 | 0.6953 | 0.6992 | 0.7461 |\n * | 0.7880 | 0.7225 | 0.7266 | 0.7813 |\n * | 0.8052 | 0.7500 | 0.7539 | 0.8164 |\n * | 0.8229 | 0.7814 | 0.7813 | 0.8516 |\n * | 0.8409 | 0.8086 | 0.8086 | 0.8828 |\n * | 0.8593 | 0.8321 | 0.8320 | 0.9141 |\n * | 0.8781 | 0.8554 | 0.8594 | 0.9492 |\n * | 0.8974 | 0.8789 | 0.8828 | 0.9766 |\n * | 0.9170 | 0.9025 | 0.9063 | 1.0000 |\n * | 0.9371 | 0.9297 | 0.9297 | 1.0000 |\n * | 0.9576 | 0.9532 | 0.9531 | 1.0000 |\n * | 0.9786 | 0.9765 | 0.9766 | 1.0000 |\n * | 1.0000 | 1.0000 | 1.0000 | 1.0000 |\n * +--------+--------+--------+--------+\n */\n\nexport async function queryMipLevelMixWeightsForDevice(t: GPUTest, stage: ShaderStage) {\n  const { device } = t;\n  const kNumWeightTypes = 2;\n  const module = device.createShaderModule({\n    code: `\n      @group(0) @binding(0) var tex: texture_2d<f32>;\n      @group(0) @binding(1) var smp: sampler;\n      @group(0) @binding(2) var<storage, read_write> result: array<f32>;\n\n      struct VSOutput {\n        @builtin(position) pos: vec4f,\n        @location(0) @interpolate(flat, either) ndx: u32,\n        @location(1) @interpolate(flat, either) result: vec4f,\n      };\n\n      fn getMixLevels(wNdx: u32) -> vec4f {\n        let mipLevel = f32(wNdx) / ${kMipLevelWeightSteps};\n        let size = textureDimensions(tex);\n        let g = mix(1.0, 2.0, mipLevel) / f32(size.x);\n        let ddx = vec2f(g, 0);\n        return vec4f(\n          textureSampleLevel(tex, smp, vec2f(0.5), mipLevel).r,\n          textureSampleGrad(tex, smp, vec2f(0.5), ddx, vec2f(0)).r,\n          0,\n          0);\n      }\n\n      fn recordMixLevels(wNdx: u32, r: vec4f) {\n        let ndx = wNdx * ${kNumWeightTypes};\n        for (var i: u32 = 0; i < ${kNumWeightTypes}; i++) {\n          result[ndx + i] = r[i];\n        }\n      }\n\n      fn getPosition(vNdx: u32) -> vec4f {\n        let pos = array(\n          vec2f(-1,  3),\n          vec2f( 3, -1),\n          vec2f(-1, -1),\n        );\n        let p = pos[vNdx];\n        return vec4f(p, 0, 1);\n      }\n\n      @vertex fn vs(@builtin(vertex_index) vNdx: u32, @builtin(instance_index) iNdx: u32) -> VSOutput {\n        return VSOutput(getPosition(vNdx), iNdx, vec4f(0));\n      }\n\n      @fragment fn fsRecord(v: VSOutput) -> @location(0) vec4f {\n        recordMixLevels(v.ndx, getMixLevels(v.ndx));\n        return vec4f(0);\n      }\n\n      @compute @workgroup_size(1) fn csRecord(@builtin(global_invocation_id) id: vec3u) {\n        recordMixLevels(id.x, getMixLevels(id.x));\n      }\n\n      @vertex fn vsRecord(@builtin(vertex_index) vNdx: u32, @builtin(instance_index) iNdx: u32) -> VSOutput {\n        return VSOutput(getPosition(vNdx), iNdx, getMixLevels(iNdx));\n      }\n\n      @fragment fn fsSaveVs(v: VSOutput) -> @location(0) vec4f {\n        recordMixLevels(v.ndx, v.result);\n        return vec4f(0);\n      }\n    `,\n  });\n\n  const texture = t.createTextureTracked({\n    size: [2, 2, 1],\n    format: 'r8unorm',\n    usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST,\n    mipLevelCount: 2,\n  });\n\n  device.queue.writeTexture(\n    { texture, mipLevel: 1 },\n    new Uint8Array([255]),\n    { bytesPerRow: 1 },\n    [1, 1]\n  );\n\n  const sampler = device.createSampler({\n    minFilter: 'linear',\n    magFilter: 'linear',\n    mipmapFilter: 'linear',\n  });\n\n  const target = t.createTextureTracked({\n    size: [1, 1],\n    format: 'rgba8unorm',\n    usage: GPUTextureUsage.RENDER_ATTACHMENT,\n  });\n\n  const storageBuffer = t.createBufferTracked({\n    size: 4 * (kMipLevelWeightSteps + 1) * kNumWeightTypes,\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n  });\n\n  const resultBuffer = t.createBufferTracked({\n    size: storageBuffer.size,\n    usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ,\n  });\n\n  const createBindGroup = (pipeline: GPUComputePipeline | GPURenderPipeline) =>\n    device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [\n        { binding: 0, resource: texture.createView() },\n        { binding: 1, resource: sampler },\n        { binding: 2, resource: { buffer: storageBuffer } },\n      ],\n    });\n\n  const encoder = device.createCommandEncoder();\n  switch (stage) {\n    case 'compute': {\n      const pipeline = device.createComputePipeline({\n        layout: 'auto',\n        compute: { module },\n      });\n      const pass = encoder.beginComputePass();\n      pass.setPipeline(pipeline);\n      pass.setBindGroup(0, createBindGroup(pipeline));\n      pass.dispatchWorkgroups(kMipLevelWeightSteps + 1);\n      pass.end();\n      break;\n    }\n    case 'fragment': {\n      const pipeline = device.createRenderPipeline({\n        layout: 'auto',\n        vertex: { module, entryPoint: 'vs' },\n        fragment: { module, entryPoint: 'fsRecord', targets: [{ format: 'rgba8unorm' }] },\n      });\n      const pass = encoder.beginRenderPass({\n        colorAttachments: [\n          {\n            view: target.createView(),\n            loadOp: 'clear',\n            storeOp: 'store',\n          },\n        ],\n      });\n      pass.setPipeline(pipeline);\n      pass.setBindGroup(0, createBindGroup(pipeline));\n      pass.draw(3, kMipLevelWeightSteps + 1);\n      pass.end();\n      break;\n    }\n    case 'vertex': {\n      const pipeline = device.createRenderPipeline({\n        layout: 'auto',\n        vertex: { module, entryPoint: 'vsRecord' },\n        fragment: { module, entryPoint: 'fsSaveVs', targets: [{ format: 'rgba8unorm' }] },\n      });\n      const pass = encoder.beginRenderPass({\n        colorAttachments: [\n          {\n            view: target.createView(),\n            loadOp: 'clear',\n            storeOp: 'store',\n          },\n        ],\n      });\n      pass.setPipeline(pipeline);\n      pass.setBindGroup(0, createBindGroup(pipeline));\n      pass.draw(3, kMipLevelWeightSteps + 1);\n      pass.end();\n      break;\n    }\n  }\n  encoder.copyBufferToBuffer(storageBuffer, 0, resultBuffer, 0, resultBuffer.size);\n  device.queue.submit([encoder.finish()]);\n\n  await resultBuffer.mapAsync(GPUMapMode.READ);\n  const result = Array.from(new Float32Array(resultBuffer.getMappedRange()));\n  resultBuffer.unmap();\n  resultBuffer.destroy();\n\n  const [sampleLevelWeights, gradWeights] = unzip(result, kNumWeightTypes);\n\n  validateWeights(stage, sampleLevelWeights);\n  validateWeights(stage, gradWeights);\n\n  texture.destroy();\n  storageBuffer.destroy();\n\n  return {\n    sampleLevelWeights,\n    softwareMixToGPUMixGradWeights: generateSoftwareMixToGPUMixGradWeights(gradWeights, texture),\n  };\n}\n\n// Given an array of ascending values and a value v, finds\n// which indices in the array v is between. Returns the lower\n// index and the mix weight between the 2 indices for v.\n//\n// In other words, if values = [10, 20, 30, 40, 50]\n//\n//    getIndexAndWeight(values, 38)  -> [2, 0.8]\n//\n// Example:\n//\n//    values = [10, 20, 30, 40, 50]\n//    v = 38\n//    [ndx, weight] = getIndexAndWeight(values, v);\n//    v2 = lerp(values[ndx], values[ndx + 1], weight);\n//    assert(v === v2)\nfunction getIndexAndWeight(values: readonly number[], v: number) {\n  assert(v >= values[0] && v <= values[values.length - 1]);\n  let lo = 0;\n  let hi = values.length - 1;\n  for (;;) {\n    const i = (lo + (hi - lo) / 2) | 0;\n    const w0 = values[i];\n    const w1 = values[i + 1];\n    if (lo === hi || (v >= w0 && v <= w1)) {\n      const weight = (v - w0) / (w1 - w0);\n      return [i, weight];\n    }\n    if (v < w0) {\n      hi = i;\n    } else {\n      lo = i + 1;\n    }\n  }\n}\n\n/**\n * Given a fractional number between 0 and values.length returns the value between\n * 2 values. Effectively lerp(values[ndx], values[ndx + 1], weight)\n */\nfunction bilinearFilter(values: readonly number[], ndx: number, weight: number) {\n  const v0 = values[ndx];\n  const v1 = values[ndx + 1] ?? 0;\n  assert(ndx < values.length - 1 || (ndx === values.length - 1 && weight === 0));\n  return lerp(v0, v1, weight);\n}\n\n/**\n * Generates an array of values that maps between the software renderer's gradient computed\n * mip level and the GPUs gradient computed mip level for mip level 0 to 1.\n */\nfunction generateSoftwareMixToGPUMixGradWeights(gpuWeights: number[], texture: GPUTexture) {\n  const numSteps = gpuWeights.length - 1;\n  const size = [texture.width, texture.height, texture.depthOrArrayLayers];\n  const softwareWeights = range(numSteps + 1, i => {\n    // u goes from 0 to 1\n    const u = i / numSteps;\n    const g = lerp(1, 2, u) / texture.width;\n    const mipLevel = computeMipLevelFromGradients([g], [0], size);\n    assert(mipLevel >= 0 && mipLevel <= 1);\n    return mipLevel;\n  });\n  const softwareMixToGPUMixMap = range(numSteps + 1, i => {\n    const mix = i / numSteps;\n    const [ndx, weight] = getIndexAndWeight(softwareWeights, mix);\n    return bilinearFilter(gpuWeights, ndx, weight);\n  });\n  return softwareMixToGPUMixMap;\n}\n\nfunction mapSoftwareMipLevelToGPUMipLevel(t: GPUTest, stage: ShaderStage, mipLevel: number) {\n  const baseLevel = Math.floor(mipLevel);\n  const softwareMix = mipLevel - baseLevel;\n  const gpuMix = getMixWeightByTypeForMipLevel(\n    t,\n    stage,\n    'softwareMixToGPUMixGradWeights',\n    softwareMix\n  );\n  return baseLevel + gpuMix;\n}\n\nconst euclideanModulo = (n: number, m: number) => ((n % m) + m) % m;\n\n/**\n * Gets the mip gradient values for the current device.\n * The issue is, different GPUs have different ways of mixing between mip levels.\n * For most GPUs it's linear but for AMD GPUs on Mac in particular, it's something\n * else (which AFAICT is against all the specs).\n *\n * We seemingly have 3 options:\n *\n * 1. Increase the tolerances of tests so they pass on AMD.\n * 2. Mark AMD as failing\n * 3. Try to figure out how the GPU converts mip levels into weights\n *\n * We're doing 3.\n *\n * There's an assumption that the gradient will be the same for all formats\n * and usages.\n *\n * Note: The code below has 2 maps. One device->Promise, the other device->weights\n * device->weights is meant to be used synchronously by other code so we don't\n * want to leave initMipGradientValuesForDevice until the weights have been read.\n * But, multiple subcases will run because this function is async. So, subcase 1\n * runs, hits this init code, this code waits for the weights. Then, subcase 2\n * runs and hits this init code. The weights will not be in the device->weights map\n * yet which is why we have the device->Promise map. This is so subcase 2 waits\n * for subcase 1's \"query the weights\" step. Otherwise, all subcases would do the\n * \"get the weights\" step separately.\n */\nconst kMipLevelWeightSteps = 64;\nconst s_deviceToMipLevelWeightsPromise = new WeakMap<\n  GPUDevice,\n  Record<ShaderStage, Promise<MipWeights>>\n>();\nconst s_deviceToMipLevelWeights = new WeakMap<GPUDevice, Record<ShaderStage, MipWeights>>();\n\nasync function initMipLevelWeightsForDevice(t: GPUTest, stage: ShaderStage) {\n  const { device } = t;\n  // Get the per stage promises (or make them)\n  const stageWeightsP =\n    s_deviceToMipLevelWeightsPromise.get(device) ??\n    ({} as Record<ShaderStage, Promise<MipWeights>>);\n  s_deviceToMipLevelWeightsPromise.set(device, stageWeightsP);\n\n  let weightsP = stageWeightsP[stage];\n  if (!weightsP) {\n    // There was no promise for this weight so request it\n    // and add a then clause so the first thing that will happen\n    // when the promise resolves is that we'll record the weights for\n    // that stage.\n    weightsP = queryMipLevelMixWeightsForDevice(t, stage);\n    weightsP\n      .then(weights => {\n        const stageWeights =\n          s_deviceToMipLevelWeights.get(device) ?? ({} as Record<ShaderStage, MipWeights>);\n        s_deviceToMipLevelWeights.set(device, stageWeights);\n        stageWeights[stage] = weights;\n      })\n      .catch(e => {\n        throw e;\n      });\n    stageWeightsP[stage] = weightsP;\n  }\n  return await weightsP;\n}\n\nfunction getMixWeightByTypeForMipLevel(\n  t: GPUTest,\n  stage: ShaderStage,\n  weightType: MipWeightType | 'identity',\n  mipLevel: number\n) {\n  if (weightType === 'identity') {\n    return euclideanModulo(mipLevel, 1);\n  }\n  // linear interpolate between weights\n  const weights = s_deviceToMipLevelWeights.get(t.device)![stage][weightType];\n  assert(\n    !!weights,\n    'you must use WGSLTextureSampleTest or call initializeDeviceMipWeights before calling this function'\n  );\n  const steps = weights.length - 1;\n  const w = euclideanModulo(mipLevel, 1) * steps;\n  const lowerNdx = Math.floor(w);\n  const upperNdx = Math.ceil(w);\n  const mix = w % 1;\n  return lerp(weights[lowerNdx], weights[upperNdx], mix);\n}\n\nfunction getWeightForMipLevel(\n  t: GPUTest,\n  stage: ShaderStage,\n  weightType: MipWeightType | 'identity',\n  mipLevelCount: number,\n  mipLevel: number\n) {\n  if (mipLevel < 0 || mipLevel >= mipLevelCount) {\n    return 1;\n  }\n  return getMixWeightByTypeForMipLevel(t, stage, weightType, mipLevel);\n}\n\n/**\n * Used for textureNumSamples, textureNumLevels, textureNumLayers, textureDimension\n */\nexport class WGSLTextureQueryTest extends GPUTest {\n  executeAndExpectResult(\n    stage: ShaderStage,\n    code: string,\n    texture: GPUTexture | GPUExternalTexture,\n    viewDescriptor: GPUTextureViewDescriptor | undefined,\n    expected: number[]\n  ) {\n    const { device } = this;\n    const returnType = `vec4<u32>`;\n    const castWGSL = `${returnType}(getValue()${range(4 - expected.length, () => ', 0').join('')})`;\n    const stageWGSL =\n      stage === 'vertex'\n        ? `\n// --------------------------- vertex stage shaders --------------------------------\n@vertex fn vsVertex(\n    @builtin(vertex_index) vertex_index : u32,\n    @builtin(instance_index) instance_index : u32) -> VOut {\n  let positions = array(vec2f(-1, 3), vec2f(3, -1), vec2f(-1, -1));\n  return VOut(vec4f(positions[vertex_index], 0, 1),\n              instance_index,\n              ${castWGSL});\n}\n\n@fragment fn fsVertex(v: VOut) -> @location(0) vec4u {\n  return bitcast<vec4u>(v.result);\n}\n`\n        : stage === 'fragment'\n        ? `\n// --------------------------- fragment stage shaders --------------------------------\n@vertex fn vsFragment(\n    @builtin(vertex_index) vertex_index : u32,\n    @builtin(instance_index) instance_index : u32) -> VOut {\n  let positions = array(vec2f(-1, 3), vec2f(3, -1), vec2f(-1, -1));\n  return VOut(vec4f(positions[vertex_index], 0, 1), instance_index, ${returnType}(0));\n}\n\n@fragment fn fsFragment(v: VOut) -> @location(0) vec4u {\n  return bitcast<vec4u>(${castWGSL});\n}\n`\n        : `\n// --------------------------- compute stage shaders --------------------------------\n@group(1) @binding(0) var<storage, read_write> results: array<${returnType}>;\n\n@compute @workgroup_size(1) fn csCompute(@builtin(global_invocation_id) id: vec3u) {\n  results[id.x] = ${castWGSL};\n}\n`;\n    const wgsl = `\n      ${code}\n\nstruct VOut {\n  @builtin(position) pos: vec4f,\n  @location(0) @interpolate(flat, either) ndx: u32,\n  @location(1) @interpolate(flat, either) result: ${returnType},\n};\n\n      ${stageWGSL}\n    `;\n    const module = device.createShaderModule({ code: wgsl });\n\n    const visibility =\n      stage === 'compute'\n        ? GPUShaderStage.COMPUTE\n        : stage === 'fragment'\n        ? GPUShaderStage.FRAGMENT\n        : GPUShaderStage.VERTEX;\n\n    const entries: GPUBindGroupLayoutEntry[] = [];\n    if (texture instanceof GPUExternalTexture) {\n      entries.push({\n        binding: 0,\n        visibility,\n        externalTexture: {},\n      });\n    } else if (code.includes('texture_storage')) {\n      entries.push({\n        binding: 0,\n        visibility,\n        storageTexture: {\n          access: code.includes(', read>')\n            ? 'read-only'\n            : code.includes(', write>')\n            ? 'write-only'\n            : 'read-write',\n          viewDimension: viewDescriptor?.dimension ?? '2d',\n          format: texture.format,\n        },\n      });\n    } else {\n      const sampleType =\n        viewDescriptor?.aspect === 'stencil-only'\n          ? 'uint'\n          : code.includes('texture_depth')\n          ? 'depth'\n          : isDepthTextureFormat(texture.format)\n          ? 'unfilterable-float'\n          : isStencilTextureFormat(texture.format)\n          ? 'uint'\n          : texture.sampleCount > 1 && kTextureFormatInfo[texture.format].color?.type === 'float'\n          ? 'unfilterable-float'\n          : kTextureFormatInfo[texture.format].color?.type ?? 'unfilterable-float';\n      entries.push({\n        binding: 0,\n        visibility,\n        texture: {\n          sampleType,\n          viewDimension: viewDescriptor?.dimension ?? '2d',\n          multisampled: texture.sampleCount > 1,\n        },\n      });\n    }\n\n    const bindGroupLayouts: GPUBindGroupLayout[] = [device.createBindGroupLayout({ entries })];\n\n    if (stage === 'compute') {\n      bindGroupLayouts.push(\n        device.createBindGroupLayout({\n          entries: [\n            {\n              binding: 0,\n              visibility: GPUShaderStage.COMPUTE,\n              buffer: {\n                type: 'storage',\n                hasDynamicOffset: false,\n                minBindingSize: 16,\n              },\n            },\n          ],\n        })\n      );\n    }\n\n    const layout = device.createPipelineLayout({\n      bindGroupLayouts,\n    });\n\n    let pipeline: GPUComputePipeline | GPURenderPipeline;\n\n    switch (stage) {\n      case 'compute':\n        pipeline = device.createComputePipeline({\n          layout,\n          compute: { module },\n        });\n        break;\n      case 'fragment':\n      case 'vertex':\n        pipeline = device.createRenderPipeline({\n          layout,\n          vertex: { module },\n          fragment: {\n            module,\n            targets: [{ format: 'rgba32uint' }],\n          },\n        });\n        break;\n    }\n\n    const bindGroup0 = device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [\n        {\n          binding: 0,\n          resource:\n            texture instanceof GPUExternalTexture ? texture : texture.createView(viewDescriptor),\n        },\n      ],\n    });\n\n    const renderTarget = this.createTextureTracked({\n      format: 'rgba32uint',\n      size: [expected.length, 1],\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const resultBuffer = this.createBufferTracked({\n      size: align(expected.length * 4, 256),\n      usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.COPY_SRC,\n    });\n\n    let storageBuffer: GPUBuffer | undefined;\n    const encoder = device.createCommandEncoder();\n\n    if (stage === 'compute') {\n      storageBuffer = this.createBufferTracked({\n        size: resultBuffer.size,\n        usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n      });\n\n      const bindGroup1 = device.createBindGroup({\n        layout: pipeline!.getBindGroupLayout(1),\n        entries: [{ binding: 0, resource: { buffer: storageBuffer } }],\n      });\n\n      const pass = encoder.beginComputePass();\n      pass.setPipeline(pipeline! as GPUComputePipeline);\n      pass.setBindGroup(0, bindGroup0);\n      pass.setBindGroup(1, bindGroup1);\n      pass.dispatchWorkgroups(expected.length);\n      pass.end();\n      encoder.copyBufferToBuffer(storageBuffer, 0, resultBuffer, 0, storageBuffer.size);\n    } else {\n      const pass = encoder.beginRenderPass({\n        colorAttachments: [\n          {\n            view: renderTarget.createView(),\n            loadOp: 'clear',\n            storeOp: 'store',\n          },\n        ],\n      });\n\n      pass.setPipeline(pipeline! as GPURenderPipeline);\n      pass.setBindGroup(0, bindGroup0);\n      for (let i = 0; i < expected.length; ++i) {\n        pass.setViewport(i, 0, 1, 1, 0, 1);\n        pass.draw(3, 1, 0, i);\n      }\n      pass.end();\n      encoder.copyTextureToBuffer(\n        { texture: renderTarget },\n        {\n          buffer: resultBuffer,\n          bytesPerRow: resultBuffer.size,\n        },\n        [renderTarget.width, 1]\n      );\n    }\n    this.device.queue.submit([encoder.finish()]);\n\n    const e = new Uint32Array(4);\n    e.set(expected);\n    this.expectGPUBufferValuesEqual(resultBuffer, e);\n  }\n}\n\n/**\n * Used for textureSampleXXX\n */\nexport class WGSLTextureSampleTest extends GPUTest {\n  override async init(): Promise<void> {\n    await super.init();\n  }\n}\n\n/**\n * Used to specify a range from [0, num)\n * The type is used to determine if values should be integers and if they can be negative.\n */\nexport type RangeDef = {\n  num: number;\n  type: 'f32' | 'i32' | 'u32';\n};\n\nfunction getLimitValue(v: number) {\n  switch (v) {\n    case Number.POSITIVE_INFINITY:\n      return 1000;\n    case Number.NEGATIVE_INFINITY:\n      return -1000;\n    default:\n      return v;\n  }\n}\n\nfunction getMinAndMaxTexelValueForComponent(\n  rep: TexelRepresentationInfo,\n  component: TexelComponent\n) {\n  assert(!!rep.numericRange);\n  const perComponentRanges = rep.numericRange as PerComponentNumericRange;\n  const perComponentRange = perComponentRanges[component];\n  const range = rep.numericRange as NumericRange;\n  const { min, max } = perComponentRange ? perComponentRange : range;\n  return { min: getLimitValue(min), max: getLimitValue(max) };\n}\n\n/**\n * We need the software rendering to do the same interpolation as the hardware\n * rendered so for -srgb formats we set the TexelView to an -srgb format as\n * TexelView handles this case. Note: It might be nice to add rgba32float-srgb\n * or something similar to TexelView.\n */\nexport function getTexelViewFormatForTextureFormat(format: GPUTextureFormat) {\n  if (format.endsWith('sint')) {\n    return 'rgba32sint';\n  } else if (format.endsWith('uint')) {\n    return 'rgba32uint';\n  }\n  return format.endsWith('-srgb') ? 'rgba8unorm-srgb' : 'rgba32float';\n}\n\nconst kTextureTypeInfo = {\n  depth: {\n    componentType: 'f32',\n    resultType: 'vec4f',\n    resultFormat: 'rgba32float',\n  },\n  float: {\n    componentType: 'f32',\n    resultType: 'vec4f',\n    resultFormat: 'rgba32float',\n  },\n  'unfilterable-float': {\n    componentType: 'f32',\n    resultType: 'vec4f',\n    resultFormat: 'rgba32float',\n  },\n  sint: {\n    componentType: 'i32',\n    resultType: 'vec4i',\n    resultFormat: 'rgba32sint',\n  },\n  uint: {\n    componentType: 'u32',\n    resultType: 'vec4u',\n    resultFormat: 'rgba32uint',\n  },\n} as const;\n\nfunction getTextureFormatTypeInfo(format: GPUTextureFormat) {\n  const info = kTextureFormatInfo[format];\n  const type = info.color?.type ?? info.depth?.type ?? info.stencil?.type;\n  assert(!!type);\n  return kTextureTypeInfo[type];\n}\n\n/**\n * given a texture type 'base', returns the base with the correct component for the given texture format.\n * eg: `getTextureType('texture_2d', someUnsignedIntTextureFormat)` -> `texture_2d<u32>`\n */\nexport function appendComponentTypeForFormatToTextureType(base: string, format: GPUTextureFormat) {\n  return base.includes('depth')\n    ? base\n    : `${base}<${getTextureFormatTypeInfo(format).componentType}>`;\n}\n\ntype RandomTextureOptions = {\n  generator: PerPixelAtLevel<PerTexelComponent<number>>;\n};\n\n/**\n * Make a generator for texels for depth comparison tests.\n */\nexport function makeRandomDepthComparisonTexelGenerator(\n  info: {\n    format: GPUTextureFormat;\n    size: GPUExtent3D;\n  },\n  comparison: GPUCompareFunction\n) {\n  const format = isUnencodableDepthFormat(info.format) ? 'depth32float' : info.format;\n  const rep = kTexelRepresentationInfo[format as EncodableTextureFormat];\n  const size = reifyExtent3D(info.size);\n\n  const comparisonIsEqualOrNotEqual = comparison === 'equal' || comparison === 'not-equal';\n\n  // for equal and not-equal we just want to test 0, 0.6, and 1\n  // for everything else we want 0 to 1\n  // Note: 0.6 is chosen because we'll never choose 0.6 as our depth reference\n  // value. (see generateTextureBuiltinInputsImpl and generateSamplePointsCube)\n  // The problem with comparing equal is other than 0.0 and 1.0, no other\n  // values are guaranteed to be equal.\n  const fixedValues = [0, 0.6, 1, 1];\n  const encode = comparisonIsEqualOrNotEqual\n    ? (norm: number) => fixedValues[(norm * (fixedValues.length - 1)) | 0]\n    : (norm: number) => norm;\n\n  return (coords: SampleCoord): Readonly<PerTexelComponent<number>> => {\n    const texel: PerTexelComponent<number> = {};\n    for (const component of rep.componentOrder) {\n      const rnd = hashU32(\n        coords.x,\n        coords.y,\n        coords.z,\n        coords.sampleIndex ?? 0,\n        component.charCodeAt(0),\n        size.width,\n        size.height,\n        size.depthOrArrayLayers\n      );\n      const normalized = clamp(rnd / 0xffffffff, { min: 0, max: 1 });\n      texel[component] = encode(normalized);\n    }\n    return quantize(texel, rep);\n  };\n}\n\nfunction createRandomTexelViewViaColors(\n  info: {\n    format: GPUTextureFormat;\n    size: GPUExtent3D;\n    mipLevel: number;\n  },\n  options?: RandomTextureOptions | undefined\n): TexelView {\n  const rep = kTexelRepresentationInfo[info.format as EncodableTextureFormat];\n  const size = reifyExtent3D(info.size);\n  const minMax = Object.fromEntries(\n    rep.componentOrder.map(component => [\n      component,\n      getMinAndMaxTexelValueForComponent(rep, component),\n    ])\n  );\n  const generator = (coords: SampleCoord): Readonly<PerTexelComponent<number>> => {\n    const texel: PerTexelComponent<number> = {};\n    for (const component of rep.componentOrder) {\n      const rnd = hashU32(\n        coords.x,\n        coords.y,\n        coords.z,\n        coords.sampleIndex ?? 0,\n        component.charCodeAt(0),\n        info.mipLevel,\n        size.width,\n        size.height,\n        size.depthOrArrayLayers\n      );\n      const normalized = clamp(rnd / 0xffffffff, { min: 0, max: 1 });\n      const { min, max } = minMax[component];\n      texel[component] = lerp(min, max, normalized);\n    }\n    return quantize(texel, rep);\n  };\n  return TexelView.fromTexelsAsColors(\n    info.format as EncodableTextureFormat,\n    options?.generator ?? generator\n  );\n}\n\nfunction createRandomTexelViewViaBytes(info: {\n  format: GPUTextureFormat;\n  size: GPUExtent3D;\n  mipLevel: number;\n  sampleCount: number;\n}): TexelView {\n  const { format } = info;\n  const formatInfo = kTextureFormatInfo[format];\n  const rep = kTexelRepresentationInfo[info.format as EncodableTextureFormat];\n  assert(!!rep);\n  const bytesPerBlock = (formatInfo.color?.bytes ?? formatInfo.stencil?.bytes)!;\n  assert(bytesPerBlock > 0);\n  const size = physicalMipSize(reifyExtent3D(info.size), info.format, '2d', 0);\n  const blocksAcross = Math.ceil(size.width / formatInfo.blockWidth);\n  const blocksDown = Math.ceil(size.height / formatInfo.blockHeight);\n  const bytesPerRow = blocksAcross * bytesPerBlock * info.sampleCount;\n  const bytesNeeded = bytesPerRow * blocksDown * size.depthOrArrayLayers;\n  const data = new Uint8Array(bytesNeeded);\n\n  const hashBase =\n    sumOfCharCodesOfString(info.format) +\n    size.width +\n    size.height +\n    size.depthOrArrayLayers +\n    info.mipLevel +\n    info.sampleCount;\n\n  if (info.format.includes('32float') || info.format.includes('16float')) {\n    const { min, max } = getMinAndMaxTexelValueForComponent(rep, TexelComponent.R);\n    const asFloat = info.format.includes('32float')\n      ? new Float32Array(data.buffer)\n      : new Float16Array(data.buffer);\n    for (let i = 0; i < asFloat.length; ++i) {\n      asFloat[i] = lerp(min, max, hashU32(hashBase + i) / 0xffff_ffff);\n    }\n  } else if (bytesNeeded % 4 === 0) {\n    const asU32 = new Uint32Array(data.buffer);\n    for (let i = 0; i < asU32.length; ++i) {\n      asU32[i] = hashU32(hashBase + i);\n    }\n  } else {\n    for (let i = 0; i < bytesNeeded; ++i) {\n      data[i] = hashU32(hashBase + i);\n    }\n  }\n\n  return TexelView.fromTextureDataByReference(info.format as EncodableTextureFormat, data, {\n    bytesPerRow,\n    rowsPerImage: size.height,\n    subrectOrigin: [0, 0, 0],\n    subrectSize: size,\n  });\n}\n\n/**\n * Creates a TexelView filled with random values.\n */\nfunction createRandomTexelView(\n  info: {\n    format: GPUTextureFormat;\n    size: GPUExtent3D;\n    mipLevel: number;\n    sampleCount: number;\n  },\n  options?: RandomTextureOptions | undefined\n): TexelView {\n  assert(!isCompressedTextureFormat(info.format));\n  const formatInfo = kTextureFormatInfo[info.format];\n  const type = formatInfo.color?.type ?? formatInfo.depth?.type ?? formatInfo.stencil?.type;\n  const canFillWithRandomTypedData =\n    !options &&\n    isEncodableTextureFormat(info.format) &&\n    ((info.format.includes('norm') && type !== 'depth') ||\n      info.format.includes('16float') ||\n      (info.format.includes('32float') && type !== 'depth') ||\n      type === 'sint' ||\n      type === 'uint');\n\n  return canFillWithRandomTypedData\n    ? createRandomTexelViewViaBytes(info)\n    : createRandomTexelViewViaColors(info, options);\n}\n\n/**\n * Creates a mip chain of TexelViews filled with random values\n */\nfunction createRandomTexelViewMipmap(\n  info: {\n    format: GPUTextureFormat;\n    size: GPUExtent3D;\n    mipLevelCount?: number;\n    dimension?: GPUTextureDimension;\n    sampleCount?: number;\n  },\n  options?: RandomTextureOptions | undefined\n): TexelView[] {\n  const mipLevelCount = info.mipLevelCount ?? 1;\n  const dimension = info.dimension ?? '2d';\n  return range(mipLevelCount, i =>\n    createRandomTexelView(\n      {\n        format: info.format,\n        size: virtualMipSize(dimension, info.size, i),\n        mipLevel: i,\n        sampleCount: info.sampleCount ?? 1,\n      },\n      options\n    )\n  );\n}\n\nexport type vec1 = [number]; // Because it's easy to deal with if these types are all array of number\nexport type vec2 = [number, number];\nexport type vec3 = [number, number, number];\nexport type vec4 = [number, number, number, number];\nexport type Dimensionality = vec1 | vec2 | vec3;\n\ntype TextureCallArgKeys = keyof TextureCallArgs<vec1>;\nconst kTextureCallArgNames: readonly TextureCallArgKeys[] = [\n  'component',\n  'coords',\n  'derivativeMult', // NOTE: derivativeMult not an argument but is used with coords for implicit derivatives.\n  'arrayIndex',\n  'bias',\n  'sampleIndex',\n  'mipLevel',\n  'ddx',\n  'ddy',\n  'depthRef',\n  'offset',\n] as const;\n\nexport interface TextureCallArgs<T extends Dimensionality> {\n  component?: number; // Used by textureGather\n  coords?: T; // The coord passed\n  derivativeMult?: T;\n  mipLevel?: number;\n  arrayIndex?: number;\n  bias?: number;\n  sampleIndex?: number;\n  depthRef?: number;\n  ddx?: T;\n  ddy?: T;\n  offset?: T;\n}\n\nexport type TextureBuiltin =\n  | 'textureGather'\n  | 'textureGatherCompare'\n  | 'textureLoad'\n  | 'textureSample'\n  | 'textureSampleBaseClampToEdge'\n  | 'textureSampleBias'\n  | 'textureSampleCompare'\n  | 'textureSampleCompareLevel'\n  | 'textureSampleGrad'\n  | 'textureSampleLevel';\n\nexport interface TextureCall<T extends Dimensionality> extends TextureCallArgs<T> {\n  builtin: TextureBuiltin;\n  coordType: 'f' | 'i' | 'u';\n  levelType?: 'i' | 'u' | 'f';\n  arrayIndexType?: 'i' | 'u';\n  sampleIndexType?: 'i' | 'u';\n  componentType?: 'i' | 'u';\n}\n\nconst isBuiltinComparison = (builtin: TextureBuiltin) =>\n  builtin === 'textureGatherCompare' ||\n  builtin === 'textureSampleCompare' ||\n  builtin === 'textureSampleCompareLevel';\nconst isBuiltinGather = (builtin: TextureBuiltin | undefined) =>\n  builtin === 'textureGather' || builtin === 'textureGatherCompare';\nconst builtinNeedsSampler = (builtin: TextureBuiltin) =>\n  builtin.startsWith('textureSample') || builtin.startsWith('textureGather');\nconst builtinNeedsDerivatives = (builtin: TextureBuiltin) =>\n  builtin === 'textureSample' ||\n  builtin === 'textureSampleBias' ||\n  builtin === 'textureSampleCompare';\n\nconst isCubeViewDimension = (viewDescriptor?: GPUTextureViewDescriptor) =>\n  viewDescriptor?.dimension === 'cube' || viewDescriptor?.dimension === 'cube-array';\n\nconst isViewDimensionCubeOrCubeArray = (viewDimension: GPUTextureViewDimension) =>\n  viewDimension === 'cube' || viewDimension === 'cube-array';\n\nconst s_u32 = new Uint32Array(1);\nconst s_f32 = new Float32Array(s_u32.buffer);\nconst s_i32 = new Int32Array(s_u32.buffer);\n\nconst kBitCastFunctions = {\n  f: (v: number) => {\n    s_f32[0] = v;\n    return s_u32[0];\n  },\n  i: (v: number) => {\n    s_i32[0] = v;\n    assert(s_i32[0] === v, 'check we are not casting non-int or out-of-range value');\n    return s_u32[0];\n  },\n  u: (v: number) => {\n    s_u32[0] = v;\n    assert(s_u32[0] === v, 'check we are not casting non-uint or out-of-range value');\n    return s_u32[0];\n  },\n};\n\nfunction getCallArgType<T extends Dimensionality>(\n  call: TextureCall<T>,\n  argName: (typeof kTextureCallArgNames)[number]\n) {\n  switch (argName) {\n    case 'coords':\n    case 'derivativeMult':\n      return call.coordType;\n    case 'component':\n      assert(call.componentType !== undefined);\n      return call.componentType;\n    case 'mipLevel':\n      assert(call.levelType !== undefined);\n      return call.levelType;\n    case 'arrayIndex':\n      assert(call.arrayIndexType !== undefined);\n      return call.arrayIndexType;\n    case 'sampleIndex':\n      assert(call.sampleIndexType !== undefined);\n      return call.sampleIndexType;\n    case 'bias':\n    case 'depthRef':\n    case 'ddx':\n    case 'ddy':\n      return 'f';\n    default:\n      unreachable();\n  }\n}\n\nfunction toArray(coords: Dimensionality): number[] {\n  if (coords instanceof Array) {\n    return coords;\n  }\n  return [coords];\n}\n\nfunction quantize(texel: PerTexelComponent<number>, repl: TexelRepresentationInfo) {\n  return repl.bitsToNumber(repl.unpackBits(new Uint8Array(repl.pack(repl.encode(texel)))));\n}\n\nfunction apply(a: number[], b: number[], op: (x: number, y: number) => number) {\n  assert(a.length === b.length, `apply(${a}, ${b}): arrays must have same length`);\n  return a.map((v, i) => op(v, b[i]));\n}\n\n/**\n * At the corner of a cubemap we need to sample just 3 texels, not 4.\n * The texels are in\n *\n *   0:  (u,v)\n *   1:  (u + 1, v)\n *   2:  (u, v + 1)\n *   3:  (u + 1, v + 1)\n *\n * We pass in the original 2d (converted from cubemap) texture coordinate.\n * If it's within half a pixel of the edge in both directions then it's\n * a corner so we return the index of the one texel that's not needed.\n * Otherwise we return -1.\n */\nfunction getUnusedCubeCornerSampleIndex(textureSize: number, coords: vec3) {\n  const u = coords[0] * textureSize;\n  const v = coords[1] * textureSize;\n  if (v < 0.5) {\n    if (u < 0.5) {\n      return 0;\n    } else if (u >= textureSize - 0.5) {\n      return 1;\n    }\n  } else if (v >= textureSize - 0.5) {\n    if (u < 0.5) {\n      return 2;\n    } else if (u >= textureSize - 0.5) {\n      return 3;\n    }\n  }\n  return -1;\n}\n\nconst add = (a: number[], b: number[]) => apply(a, b, (x, y) => x + y);\n\nexport interface Texture {\n  texels: TexelView[];\n  descriptor: GPUTextureDescriptor;\n  viewDescriptor: GPUTextureViewDescriptor;\n}\n\n/**\n * Converts the src texel representation to an RGBA representation.\n */\nfunction convertPerTexelComponentToResultFormat(\n  src: PerTexelComponent<number>,\n  format: EncodableTextureFormat\n): PerTexelComponent<number> {\n  const rep = kTexelRepresentationInfo[format];\n  const out: PerTexelComponent<number> = { R: 0, G: 0, B: 0, A: 1 };\n  for (const component of rep.componentOrder) {\n    switch (component) {\n      case 'Stencil':\n      case 'Depth':\n        out.R = src[component];\n        break;\n      default:\n        assert(out[component] !== undefined); // checks that component = R, G, B or A\n        out[component] = src[component];\n    }\n  }\n  return out;\n}\n\n/**\n * Convert RGBA result format to texel view format.\n * Example, converts\n *   { R: 0.1, G: 0, B: 0, A: 1 } to { Depth: 0.1 }\n *   { R: 0.1 } to { R: 0.1, G: 0, B: 0, A: 1 }\n */\nfunction convertToTexelViewFormat(src: PerTexelComponent<number>, format: GPUTextureFormat) {\n  const componentOrder = isDepthTextureFormat(format)\n    ? [TexelComponent.Depth]\n    : isStencilTextureFormat(format)\n    ? [TexelComponent.Stencil]\n    : [TexelComponent.R, TexelComponent.G, TexelComponent.B, TexelComponent.A];\n  const out: PerTexelComponent<number> = {};\n  for (const component of componentOrder) {\n    let v = src[component];\n    if (v === undefined) {\n      if (component === 'Depth' || component === 'Stencil') {\n        v = src.R;\n      } else if (component === 'G' || component === 'B') {\n        v = 0;\n      } else {\n        v = 1;\n      }\n    }\n    out[component] = v;\n  }\n  return out;\n}\n\n/**\n * Convert RGBA result format to texel view format of src texture.\n * Effectively this converts something like { R: 0.1, G: 0, B: 0, A: 1 }\n * to { Depth: 0.1 }\n */\nfunction convertResultFormatToTexelViewFormat(\n  src: PerTexelComponent<number>,\n  format: EncodableTextureFormat\n): PerTexelComponent<number> {\n  const rep = kTexelRepresentationInfo[format];\n  const out: PerTexelComponent<number> = {};\n  for (const component of rep.componentOrder) {\n    out[component] = src[component] ?? src.R;\n  }\n  return out;\n}\n\nfunction zeroValuePerTexelComponent(components: TexelComponent[]) {\n  const out: PerTexelComponent<number> = {};\n  for (const component of components) {\n    out[component] = 0;\n  }\n  return out;\n}\n\nconst kSamplerFns: Record<GPUCompareFunction, (ref: number, v: number) => boolean> = {\n  never: (ref: number, v: number) => false,\n  less: (ref: number, v: number) => ref < v,\n  equal: (ref: number, v: number) => ref === v,\n  'less-equal': (ref: number, v: number) => ref <= v,\n  greater: (ref: number, v: number) => ref > v,\n  'not-equal': (ref: number, v: number) => ref !== v,\n  'greater-equal': (ref: number, v: number) => ref >= v,\n  always: (ref: number, v: number) => true,\n} as const;\n\nfunction applyCompare<T extends Dimensionality>(\n  call: TextureCall<T>,\n  sampler: GPUSamplerDescriptor | undefined,\n  components: TexelComponent[],\n  src: PerTexelComponent<number>\n): PerTexelComponent<number> {\n  if (isBuiltinComparison(call.builtin)) {\n    assert(sampler !== undefined);\n    assert(call.depthRef !== undefined);\n    const out: PerTexelComponent<number> = {};\n    const compareFn = kSamplerFns[sampler.compare!];\n    for (const component of components) {\n      out[component] = compareFn(call.depthRef, src[component]!) ? 1 : 0;\n    }\n    return out;\n  } else {\n    return src;\n  }\n}\n\n/**\n * Returns the expect value for a WGSL builtin texture function for a single\n * mip level\n */\nfunction softwareTextureReadMipLevel<T extends Dimensionality>(\n  call: TextureCall<T>,\n  texture: Texture,\n  sampler: GPUSamplerDescriptor | undefined,\n  mipLevel: number\n): PerTexelComponent<number> {\n  assert(mipLevel % 1 === 0);\n  const { format } = texture.texels[0];\n  const rep = kTexelRepresentationInfo[format];\n  const textureSize = virtualMipSize(\n    texture.descriptor.dimension || '2d',\n    texture.descriptor.size,\n    mipLevel\n  );\n  const addressMode: GPUAddressMode[] =\n    call.builtin === 'textureSampleBaseClampToEdge'\n      ? ['clamp-to-edge', 'clamp-to-edge', 'clamp-to-edge']\n      : [\n          sampler?.addressModeU ?? 'clamp-to-edge',\n          sampler?.addressModeV ?? 'clamp-to-edge',\n          sampler?.addressModeW ?? 'clamp-to-edge',\n        ];\n\n  const isCube = isCubeViewDimension(texture.viewDescriptor);\n  const arrayIndexMult = isCube ? 6 : 1;\n  const numLayers = textureSize[2] / arrayIndexMult;\n  assert(numLayers % 1 === 0);\n  const textureSizeForCube = [textureSize[0], textureSize[1], 6];\n\n  const load = (at: number[]) => {\n    const zFromArrayIndex =\n      call.arrayIndex !== undefined\n        ? clamp(call.arrayIndex, { min: 0, max: numLayers - 1 }) * arrayIndexMult\n        : 0;\n    return texture.texels[mipLevel].color({\n      x: Math.floor(at[0]),\n      y: Math.floor(at[1] ?? 0),\n      z: Math.floor(at[2] ?? 0) + zFromArrayIndex,\n      sampleIndex: call.sampleIndex,\n    });\n  };\n\n  switch (call.builtin) {\n    case 'textureGather':\n    case 'textureGatherCompare':\n    case 'textureSample':\n    case 'textureSampleBias':\n    case 'textureSampleBaseClampToEdge':\n    case 'textureSampleCompare':\n    case 'textureSampleCompareLevel':\n    case 'textureSampleGrad':\n    case 'textureSampleLevel': {\n      let coords = toArray(call.coords!);\n\n      if (isCube) {\n        coords = convertCubeCoordToNormalized3DTextureCoord(coords as vec3);\n      }\n\n      // convert normalized to absolute texel coordinate\n      // ┌───┬───┬───┬───┐\n      // │ a │   │   │   │  norm: a = 1/8, b = 7/8\n      // ├───┼───┼───┼───┤   abs: a = 0,   b = 3\n      // │   │   │   │   │\n      // ├───┼───┼───┼───┤\n      // │   │   │   │   │\n      // ├───┼───┼───┼───┤\n      // │   │   │   │ b │\n      // └───┴───┴───┴───┘\n      let at = coords.map((v, i) => v * (isCube ? textureSizeForCube : textureSize)[i] - 0.5);\n\n      // Apply offset in whole texel units\n      // This means the offset is added at each mip level in texels. There's no\n      // scaling for each level.\n      if (call.offset !== undefined) {\n        at = add(at, toArray(call.offset));\n      }\n\n      const samples: { at: number[]; weight: number }[] = [];\n\n      const filter = isBuiltinGather(call.builtin) ? 'linear' : sampler?.minFilter ?? 'nearest';\n      switch (filter) {\n        case 'linear': {\n          // 'p0' is the lower texel for 'at'\n          const p0 = at.map(v => Math.floor(v));\n          // 'p1' is the higher texel for 'at'\n          // If it's cube then don't advance Z.\n          const p1 = p0.map((v, i) => v + (isCube ? (i === 2 ? 0 : 1) : 1));\n\n          // interpolation weights for p0 and p1\n          const p1W = at.map((v, i) => v - p0[i]);\n          const p0W = p1W.map(v => 1 - v);\n\n          switch (coords.length) {\n            case 1:\n              samples.push({ at: p0, weight: p0W[0] });\n              samples.push({ at: p1, weight: p1W[0] });\n              break;\n            case 2: {\n              // Note: These are ordered to match textureGather\n              samples.push({ at: [p0[0], p1[1]], weight: p0W[0] * p1W[1] });\n              samples.push({ at: p1, weight: p1W[0] * p1W[1] });\n              samples.push({ at: [p1[0], p0[1]], weight: p1W[0] * p0W[1] });\n              samples.push({ at: p0, weight: p0W[0] * p0W[1] });\n              break;\n            }\n            case 3: {\n              // cube sampling, here in the software renderer, is the same\n              // as 2d sampling. We'll sample at most 4 texels. The weights are\n              // the same as if it was just one plane. If the points fall outside\n              // the slice they'll be wrapped by wrapFaceCoordToCubeFaceAtEdgeBoundaries\n              // below.\n              if (isCube) {\n                // Note: These are ordered to match textureGather\n                samples.push({ at: [p0[0], p1[1], p0[2]], weight: p0W[0] * p1W[1] });\n                samples.push({ at: p1, weight: p1W[0] * p1W[1] });\n                samples.push({ at: [p1[0], p0[1], p0[2]], weight: p1W[0] * p0W[1] });\n                samples.push({ at: p0, weight: p0W[0] * p0W[1] });\n                const ndx = getUnusedCubeCornerSampleIndex(textureSize[0], coords as vec3);\n                if (ndx >= 0) {\n                  // # Issues with corners of cubemaps\n                  //\n                  // note: I tried multiple things here\n                  //\n                  // 1. distribute 1/3 of the weight of the removed sample to each of the remaining samples\n                  // 2. distribute 1/2 of the weight of the removed sample to the 2 samples that are not the \"main\" sample.\n                  // 3. normalize the weights of the remaining 3 samples.\n                  //\n                  // none of them matched the M1 in all cases. Checking the dEQP I found this comment\n                  //\n                  // > If any of samples is out of both edges, implementations can do pretty much anything according to spec.\n                  // https://github.com/KhronosGroup/VK-GL-CTS/blob/d2d6aa65607383bb29c8398fe6562c6b08b4de57/framework/common/tcuTexCompareVerifier.cpp#L882\n                  //\n                  // If I understand this correctly it matches the OpenGL ES 3.1 spec it says\n                  // it's implementation defined.\n                  //\n                  // > OpenGL ES 3.1 section 8.12.1 Seamless Cubemap Filtering\n                  // >\n                  // > -  If a texture sample location would lie in the texture\n                  // >    border in both u and v (in one of the corners of the\n                  // >    cube), there is no unique neighboring face from which to\n                  // >    extract one texel. The recommended method to generate this\n                  // >    texel is to average the values of the three available\n                  // >    samples. However, implementations are free to construct\n                  // >    this fourth texel in another way, so long as, when the\n                  // >    three available samples have the same value, this texel\n                  // >    also has that value.\n                  //\n                  // I'm not sure what \"average the values of the three available samples\"\n                  // means. To me that would be (a+b+c)/3 or in other words, set all the\n                  // weights to 0.33333 but that's not what the M1 is doing.\n                  //\n                  // We could check that, given the 3 texels at the corner, if all 3 texels\n                  // are the same value then the result must be the same value. Otherwise,\n                  // the result must be between the 3 values. For now, the code that\n                  // chooses test coordinates avoids corners. This has the restriction\n                  // that the smallest mip level be at least 4x4 so there are some non\n                  // corners to choose from.\n                  unreachable(\n                    `corners of cubemaps are not testable:\\n   ${describeTextureCall(call)}`\n                  );\n                }\n              } else {\n                const p = [p0, p1];\n                const w = [p0W, p1W];\n                for (let z = 0; z < 2; ++z) {\n                  for (let y = 0; y < 2; ++y) {\n                    for (let x = 0; x < 2; ++x) {\n                      samples.push({\n                        at: [p[x][0], p[y][1], p[z][2]],\n                        weight: w[x][0] * w[y][1] * w[z][2],\n                      });\n                    }\n                  }\n                }\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case 'nearest': {\n          const p = at.map(v => Math.round(quantizeToF32(v)));\n          samples.push({ at: p, weight: 1 });\n          break;\n        }\n        default:\n          unreachable();\n      }\n\n      if (isBuiltinGather(call.builtin)) {\n        const componentNdx = call.component ?? 0;\n        assert(componentNdx >= 0 && componentNdx < 4);\n        assert(samples.length === 4);\n        const component = kRGBAComponents[componentNdx];\n        const out: PerTexelComponent<number> = {};\n        samples.forEach((sample, i) => {\n          const c = isCube\n            ? wrapFaceCoordToCubeFaceAtEdgeBoundaries(textureSize[0], sample.at as vec3)\n            : applyAddressModesToCoords(addressMode, textureSize, sample.at);\n          const v = load(c);\n          const postV = applyCompare(call, sampler, rep.componentOrder, v);\n          const rgba = convertPerTexelComponentToResultFormat(postV, format);\n          out[kRGBAComponents[i]] = rgba[component];\n        });\n        return out;\n      }\n\n      const out: PerTexelComponent<number> = {};\n      for (const sample of samples) {\n        const c = isCube\n          ? wrapFaceCoordToCubeFaceAtEdgeBoundaries(textureSize[0], sample.at as vec3)\n          : applyAddressModesToCoords(addressMode, textureSize, sample.at);\n        const v = load(c);\n        const postV = applyCompare(call, sampler, rep.componentOrder, v);\n        for (const component of rep.componentOrder) {\n          out[component] = (out[component] ?? 0) + postV[component]! * sample.weight;\n        }\n      }\n\n      return convertPerTexelComponentToResultFormat(out, format);\n    }\n    case 'textureLoad': {\n      const out: PerTexelComponent<number> = isOutOfBoundsCall(texture, call)\n        ? zeroValuePerTexelComponent(rep.componentOrder)\n        : load(call.coords!);\n      return convertPerTexelComponentToResultFormat(out, format);\n    }\n    default:\n      unreachable();\n  }\n}\n\n/**\n * Reads a texture, optionally sampling between 2 mipLevels\n */\nfunction softwareTextureReadLevel<T extends Dimensionality>(\n  t: GPUTest,\n  stage: ShaderStage,\n  call: TextureCall<T>,\n  texture: Texture,\n  sampler: GPUSamplerDescriptor | undefined,\n  mipLevel: number\n): PerTexelComponent<number> {\n  const mipLevelCount = texture.texels.length;\n  const maxLevel = mipLevelCount - 1;\n\n  if (!sampler) {\n    return softwareTextureReadMipLevel<T>(call, texture, sampler, mipLevel);\n  }\n\n  const effectiveMipmapFilter = isBuiltinGather(call.builtin) ? 'nearest' : sampler.mipmapFilter;\n  switch (effectiveMipmapFilter) {\n    case 'linear': {\n      const clampedMipLevel = clamp(mipLevel, { min: 0, max: maxLevel });\n      const baseMipLevel = Math.floor(clampedMipLevel);\n      const nextMipLevel = Math.ceil(clampedMipLevel);\n      const t0 = softwareTextureReadMipLevel<T>(call, texture, sampler, baseMipLevel);\n      const t1 = softwareTextureReadMipLevel<T>(call, texture, sampler, nextMipLevel);\n      const weightType = call.builtin === 'textureSampleLevel' ? 'sampleLevelWeights' : 'identity';\n      const mix = getWeightForMipLevel(t, stage, weightType, mipLevelCount, clampedMipLevel);\n      assert(mix >= 0 && mix <= 1);\n      const values = [\n        { v: t0, weight: 1 - mix },\n        { v: t1, weight: mix },\n      ];\n      const out: PerTexelComponent<number> = {};\n      for (const { v, weight } of values) {\n        for (const component of kRGBAComponents) {\n          out[component] = (out[component] ?? 0) + v[component]! * weight;\n        }\n      }\n      return out;\n    }\n    default: {\n      const baseMipLevel = Math.floor(\n        clamp(mipLevel + 0.5, { min: 0, max: texture.texels.length - 1 })\n      );\n      return softwareTextureReadMipLevel<T>(call, texture, sampler, baseMipLevel);\n    }\n  }\n}\n\nfunction computeMipLevelFromGradients(\n  ddx: readonly number[],\n  ddy: readonly number[],\n  size: GPUExtent3D\n) {\n  const texSize = reifyExtent3D(size);\n  const textureSize = [texSize.width, texSize.height, texSize.depthOrArrayLayers];\n\n  // Compute the mip level the same way textureSampleGrad does according to the spec.\n  const scaledDdx = ddx.map((v, i) => v * textureSize[i]);\n  const scaledDdy = ddy.map((v, i) => v * textureSize[i]);\n  const dotDDX = dotProduct(scaledDdx, scaledDdx);\n  const dotDDY = dotProduct(scaledDdy, scaledDdy);\n  const deltaMax = Math.max(dotDDX, dotDDY);\n  const mipLevel = 0.5 * Math.log2(deltaMax);\n  return mipLevel;\n}\n\nfunction computeMipLevelFromGradientsForCall<T extends Dimensionality>(\n  call: TextureCall<T>,\n  size: GPUExtent3D\n) {\n  assert(!!call.ddx);\n  assert(!!call.ddy);\n  // ddx and ddy are the values that would be passed to textureSampleGrad\n  // If we're emulating textureSample then they're the computed derivatives\n  // such that if we passed them to textureSampleGrad they'd produce the\n  // same result.\n  const ddx: readonly number[] = typeof call.ddx === 'number' ? [call.ddx] : call.ddx;\n  const ddy: readonly number[] = typeof call.ddy === 'number' ? [call.ddy] : call.ddy;\n\n  return computeMipLevelFromGradients(ddx, ddy, size);\n}\n\n/**\n * The software version of textureSampleGrad except with optional level.\n */\nfunction softwareTextureReadGrad<T extends Dimensionality>(\n  t: GPUTest,\n  stage: ShaderStage,\n  call: TextureCall<T>,\n  texture: Texture,\n  sampler?: GPUSamplerDescriptor\n): PerTexelComponent<number> {\n  const bias = call.bias === undefined ? 0 : clamp(call.bias, { min: -16.0, max: 15.99 });\n  if (call.ddx) {\n    const mipLevel = computeMipLevelFromGradientsForCall(call, texture.descriptor.size);\n    const mipLevelCount = texture.descriptor.mipLevelCount ?? 1;\n    const clampedMipLevel = clamp(mipLevel + bias, { min: 0, max: mipLevelCount - 1 });\n    const weightMipLevel = mapSoftwareMipLevelToGPUMipLevel(t, stage, clampedMipLevel);\n    return softwareTextureReadLevel(t, stage, call, texture, sampler, weightMipLevel);\n  } else {\n    return softwareTextureReadLevel(t, stage, call, texture, sampler, (call.mipLevel ?? 0) + bias);\n  }\n}\n\n/**\n * This must match the code in doTextureCalls for derivativeBase\n *\n * Note: normal implicit derivatives are computed like this\n *\n * fn textureSample(T, S, coord) -> vec4f {\n *    return textureSampleGrad(T, S, dpdx(coord), dpdy(coord));\n * }\n *\n * dpdx and dpdy are effectively computed by,\n * getting the values of coord for 2x2 adjacent texels.\n *\n *   p0 = coord value at x, y\n *   p1 = coord value at x + 1, y\n *   p2 = coord value at x, y + 1\n *   p3 = coord value at x + 1, y + 1\n *\n * dpdx is the average delta in x and dpdy is the average delta in y\n *\n *   dpdx = (p1 - p0 + p3 - p2) / 2   // average of horizontal change\n *   dpdy = (p2 - p0 + p3 - p1) / 2   // average of vertical change\n *\n * derivativeBase is\n *\n *       '1d'    '2d'     '3d'\n *   p0 = [0]   [0, 0]  [0, 0, 0]\n *   p1 = [1]   [1, 0]  [1, 0, 0]\n *   p2 = [0]   [0, 1]  [0, 1, 0]\n *   p3 = [1]   [1, 1]  [1, 1, 0]\n *\n * But, these values are normalized texels coords so if the src texture\n * is 8x8 these would be * 0.125\n *\n * Note: to test other derivatives we add in a multiplier but,\n * this base gives us something to add that starts at 0,0 at the call\n * but who's derivatives we can easily set. We need the default\n * derivativeBase to be 1 otherwise it's 0 which makes the computed mip level\n * be -Infinity which means bias in `textureSampleBias` has no meaning.\n */\nfunction derivativeBaseForCall<T extends Dimensionality>(texture: Texture, isDDX: boolean) {\n  const texSize = reifyExtent3D(texture.descriptor.size);\n  const textureSize = [texSize.width, texSize.height, texSize.depthOrArrayLayers];\n  if (isCubeViewDimension(texture.viewDescriptor)) {\n    return (isDDX ? [1 / textureSize[0], 0, 1] : [0, 1 / textureSize[1], 1]) as T;\n  } else if (texture.descriptor.dimension === '3d') {\n    return (isDDX ? [1 / textureSize[0], 0, 0] : [0, 1 / textureSize[1], 0]) as T;\n  } else if (texture.descriptor.dimension === '1d') {\n    return [1 / textureSize[0]] as T;\n  } else {\n    return (isDDX ? [1 / textureSize[0], 0] : [0, 1 / textureSize[1]]) as T;\n  }\n}\n\n/**\n * Multiplies derivativeBase by derivativeMult or 1\n */\nfunction derivativeForCall<T extends Dimensionality>(\n  texture: Texture,\n  call: TextureCall<T>,\n  isDDX: boolean\n) {\n  const dd = derivativeBaseForCall(texture, isDDX);\n  return dd.map((v, i) => v * (call.derivativeMult?.[i] ?? 1)) as T;\n}\n\nfunction softwareTextureRead<T extends Dimensionality>(\n  t: GPUTest,\n  stage: ShaderStage,\n  call: TextureCall<T>,\n  texture: Texture,\n  sampler?: GPUSamplerDescriptor\n): PerTexelComponent<number> {\n  // add the implicit derivatives that we use from WGSL in doTextureCalls\n  if (builtinNeedsDerivatives(call.builtin) && !call.ddx) {\n    const newCall: TextureCall<T> = {\n      ...call,\n      ddx: call.ddx ?? derivativeForCall<T>(texture, call, true),\n      ddy: call.ddy ?? derivativeForCall<T>(texture, call, false),\n    };\n    call = newCall;\n  }\n  return softwareTextureReadGrad(t, stage, call, texture, sampler);\n}\n\nexport type TextureTestOptions<T extends Dimensionality> = {\n  ddx?: number; // the derivative we want at sample time\n  ddy?: number;\n  uvwStart?: Readonly<T>; // the starting uv value (these are used make the coordinates negative as it uncovered issues on some hardware)\n  offset?: Readonly<T>; // a constant offset\n  depthTexture?: boolean;\n  arrayIndexType?: 'i' | 'u';\n};\n\n/**\n * out of bounds is defined as any of the following being true\n *\n * * coords is outside the range [0, textureDimensions(t, level))\n * * array_index is outside the range [0, textureNumLayers(t))\n * * level is outside the range [0, textureNumLevels(t))\n * * sample_index is outside the range [0, textureNumSamples(s))\n */\nfunction isOutOfBoundsCall<T extends Dimensionality>(texture: Texture, call: TextureCall<T>) {\n  assert(call.coords !== undefined);\n\n  const desc = reifyTextureDescriptor(texture.descriptor);\n  const { coords, mipLevel, arrayIndex, sampleIndex } = call;\n\n  if (mipLevel !== undefined && (mipLevel < 0 || mipLevel >= desc.mipLevelCount)) {\n    return true;\n  }\n\n  const size = virtualMipSize(\n    texture.descriptor.dimension || '2d',\n    texture.descriptor.size,\n    mipLevel ?? 0\n  );\n\n  for (let i = 0; i < coords.length; ++i) {\n    const v = coords[i];\n    if (v < 0 || v >= size[i]) {\n      return true;\n    }\n  }\n\n  if (arrayIndex !== undefined) {\n    const size = reifyExtent3D(desc.size);\n    if (arrayIndex < 0 || arrayIndex >= size.depthOrArrayLayers) {\n      return true;\n    }\n  }\n\n  if (sampleIndex !== undefined) {\n    if (sampleIndex < 0 || sampleIndex >= desc.sampleCount) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction isValidOutOfBoundsValue(\n  texture: Texture,\n  gotRGBA: PerTexelComponent<number>,\n  maxFractionalDiff: number\n) {\n  // For a texture builtin with no sampler (eg textureLoad),\n  // any out of bounds access is allowed to return one of:\n  //\n  // * the value of any texel in the texture\n  // * 0,0,0,0 or 0,0,0,1 if not a depth texture\n  // * 0 if a depth texture\n  if (texture.descriptor.format.includes('depth')) {\n    if (gotRGBA.R === 0) {\n      return true;\n    }\n  } else {\n    if (\n      gotRGBA.R === 0 &&\n      gotRGBA.B === 0 &&\n      gotRGBA.G === 0 &&\n      (gotRGBA.A === 0 || gotRGBA.A === 1)\n    ) {\n      return true;\n    }\n  }\n\n  // Can be any texel value\n  for (let mipLevel = 0; mipLevel < texture.texels.length; ++mipLevel) {\n    const mipTexels = texture.texels[mipLevel];\n    const size = virtualMipSize(\n      texture.descriptor.dimension || '2d',\n      texture.descriptor.size,\n      mipLevel\n    );\n    const sampleCount = texture.descriptor.sampleCount ?? 1;\n    for (let z = 0; z < size[2]; ++z) {\n      for (let y = 0; y < size[1]; ++y) {\n        for (let x = 0; x < size[0]; ++x) {\n          for (let sampleIndex = 0; sampleIndex < sampleCount; ++sampleIndex) {\n            const texel = mipTexels.color({ x, y, z, sampleIndex });\n            const rgba = convertPerTexelComponentToResultFormat(texel, mipTexels.format);\n            if (\n              texelsApproximatelyEqual(\n                gotRGBA,\n                texture.descriptor.format,\n                rgba,\n                mipTexels.format,\n                maxFractionalDiff\n              )\n            ) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return false;\n}\n\n/**\n * For a texture builtin with no sampler (eg textureLoad),\n * any out of bounds access is allowed to return one of:\n *\n * * the value of any texel in the texture\n * * 0,0,0,0 or 0,0,0,1 if not a depth texture\n * * 0 if a depth texture\n */\nfunction okBecauseOutOfBounds<T extends Dimensionality>(\n  texture: Texture,\n  call: TextureCall<T>,\n  gotRGBA: PerTexelComponent<number>,\n  maxFractionalDiff: number\n) {\n  if (!isOutOfBoundsCall(texture, call)) {\n    return false;\n  }\n\n  return isValidOutOfBoundsValue(texture, gotRGBA, maxFractionalDiff);\n}\n\nconst kRGBAComponents = [\n  TexelComponent.R,\n  TexelComponent.G,\n  TexelComponent.B,\n  TexelComponent.A,\n] as const;\n\nconst kRComponent = [TexelComponent.R] as const;\n\n/**\n * Compares two Texels\n */\nexport function texelsApproximatelyEqual(\n  gotRGBA: PerTexelComponent<number>,\n  gotFormat: GPUTextureFormat,\n  expectRGBA: PerTexelComponent<number>,\n  expectedFormat: EncodableTextureFormat,\n  maxFractionalDiff: number\n) {\n  const rep = kTexelRepresentationInfo[expectedFormat];\n  const got = convertResultFormatToTexelViewFormat(gotRGBA, expectedFormat);\n  const expect = convertResultFormatToTexelViewFormat(expectRGBA, expectedFormat);\n  const gULP = convertPerTexelComponentToResultFormat(\n    rep.bitsToULPFromZero(rep.numberToBits(got)),\n    expectedFormat\n  );\n  const eULP = convertPerTexelComponentToResultFormat(\n    rep.bitsToULPFromZero(rep.numberToBits(expect)),\n    expectedFormat\n  );\n\n  const rgbaComponentsToCheck = isDepthOrStencilTextureFormat(gotFormat)\n    ? kRComponent\n    : kRGBAComponents;\n\n  for (const component of rgbaComponentsToCheck) {\n    const g = gotRGBA[component]!;\n    const e = expectRGBA[component]!;\n    const absDiff = Math.abs(g - e);\n    const ulpDiff = Math.abs(gULP[component]! - eULP[component]!);\n    if (ulpDiff > 3 && absDiff > maxFractionalDiff) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// If it's `textureGather` then we need to convert all values to one component.\n// In other words, imagine the format is rg11b10ufloat. If it was\n// `textureSample` we'd have `r11, g11, b10, a=1` but for `textureGather`\n//\n// component = 0 => `r11, r11, r11, r11`\n// component = 1 => `g11, g11, g11, g11`\n// component = 2 => `b10, b10, b10, b10`\n//\n// etc..., each from a different texel\n//\n// The Texel utils don't handle this. So if `component = 2` we take each value,\n// copy it to the `B` component, run it through the texel utils so it returns\n// the correct ULP for a 10bit float (not an 11 bit float). Then copy it back to\n// the channel it came from.\nfunction getULPFromZeroForComponents(\n  rgba: PerTexelComponent<number>,\n  format: EncodableTextureFormat,\n  builtin: TextureBuiltin,\n  componentNdx?: number\n): PerTexelComponent<number> {\n  const rep = kTexelRepresentationInfo[format];\n  if (isBuiltinGather(builtin)) {\n    const out: PerTexelComponent<number> = {};\n    const component = kRGBAComponents[componentNdx ?? 0];\n    const temp: PerTexelComponent<number> = { R: 0, G: 0, B: 0, A: 1 };\n    for (const comp of kRGBAComponents) {\n      temp[component] = rgba[comp];\n      const texel = convertResultFormatToTexelViewFormat(temp, format);\n      const ulp = convertPerTexelComponentToResultFormat(\n        rep.bitsToULPFromZero(rep.numberToBits(texel)),\n        format\n      );\n      out[comp] = ulp[component];\n    }\n    return out;\n  } else {\n    const texel = convertResultFormatToTexelViewFormat(rgba, format);\n    return convertPerTexelComponentToResultFormat(\n      rep.bitsToULPFromZero(rep.numberToBits(texel)),\n      format\n    );\n  }\n}\n\n/**\n * Checks the result of each call matches the expected result.\n */\nexport async function checkCallResults<T extends Dimensionality>(\n  t: GPUTest,\n  texture: Texture,\n  textureType: string,\n  sampler: GPUSamplerDescriptor | undefined,\n  calls: TextureCall<T>[],\n  results: Awaited<ReturnType<typeof doTextureCalls<T>>>,\n  shortShaderStage: ShortShaderStage,\n  gpuTexture?: GPUTexture\n) {\n  const stage = kShortShaderStageToShaderStage[shortShaderStage];\n  if (builtinNeedsMipLevelWeights(calls[0].builtin)) {\n    await initMipLevelWeightsForDevice(t, stage);\n  }\n\n  let haveComparisonCheckInfo = false;\n  let checkInfo = {\n    runner: results.runner,\n    calls,\n    sampler,\n  };\n  // These are only read if the tests fail. They are used to get the values from the\n  // GPU texture for displaying in diagnostics.\n  let gpuTexels: TexelView[] | undefined;\n  const errs: string[] = [];\n  const format = texture.texels[0].format;\n  const size = reifyExtent3D(texture.descriptor.size);\n  const maxFractionalDiff =\n    sampler?.minFilter === 'linear' ||\n    sampler?.magFilter === 'linear' ||\n    sampler?.mipmapFilter === 'linear'\n      ? getMaxFractionalDiffForTextureFormat(texture.descriptor.format)\n      : 0;\n\n  for (let callIdx = 0; callIdx < calls.length; callIdx++) {\n    const call = calls[callIdx];\n    const gotRGBA = results.results[callIdx];\n    const expectRGBA = softwareTextureRead(t, stage, call, texture, sampler);\n    // Issues with textureSampleBias\n    //\n    // textureSampleBias tests start to get unexpected results when bias >= ~12\n    // where the mip level selected by the GPU is off by +/- 0.41.\n    //\n    // The issue is probably an internal precision issue. In order to test a bias of 12\n    // we choose a target mip level between 0 and mipLevelCount - 1. For example 0.4.\n    // We then compute what mip level we need the derivatives to select such that when\n    // we add in the bias it will result in a mip level of 0.4.  For a bias of 12\n    // that's means we need the derivatives to select mip level -11.4. That means\n    // the derivatives are `pow(2, -11.4) / textureSize` so for a texture that's 16\n    // pixels wide that's `0.00002312799936691891`. I'm just guessing some of that\n    // gets rounded off leading. For example, if we round it ourselves.\n    //\n    // | derivative             | mip level |\n    // +------------------------+-----------+\n    // | 0.00002312799936691891 | -11.4     |\n    // | 0.000022               | -11.47    |\n    // | 0.000023               | -11.408   |\n    // | 0.000024               | -11.34    |\n    // +------------------------+-----------+\n    //\n    // Note: As an example of a bad case: set `callSpecificMaxFractionalDiff = maxFractionalDiff` below\n    // then run `webgpu:shader,execution,expression,call,builtin,textureSampleBias:sampled_2d_coords:format=\"astc-6x6-unorm\";filt=\"linear\";modeU=\"m\";modeV=\"m\";offset=false`\n    // on an M1 Mac.\n    //\n    // ```\n    // EXPECTATION FAILED: subcase: samplePoints=\"spiral\"\n    // result was not as expected:\n    //       size: [18, 18, 1]\n    //   mipCount: 3\n    //       call: textureSampleBias(texture: T, sampler: S, coords: vec2f(0.1527777777777778, 1.4166666666666667) + derivativeBase * derivativeMult(vec2f(0.00002249990733551491, 0)), bias: f32(15.739721414633095))  // #32\n    //           : as texel coord @ mip level[0]: (2.750, 25.500)\n    //           : as texel coord @ mip level[1]: (1.375, 12.750)\n    //           : as texel coord @ mip level[2]: (0.611, 5.667)\n    // implicit derivative based mip level: -15.439721414633095 (without bias)\n    //                        clamped bias: 15.739721414633095\n    //                 mip level with bias: 0.3000000000000007\n    //        got: 0.555311381816864, 0.7921856045722961, 0.8004884123802185, 0.38046398758888245\n    //   expected: 0.6069580801937625, 0.7999182825318225, 0.8152446179041957, 0.335314491045024\n    //   max diff: 0.027450980392156862\n    //  abs diffs: 0.0516466983768985, 0.007732677959526368, 0.014756205523977162, 0.04514949654385847\n    //  rel diffs: 8.51%, 0.97%, 1.81%, 11.87%\n    //  ulp diffs: 866488, 129733, 247568, 1514966\n    //\n    //   sample points:\n    // expected:                                                                   | got:\n    // ...\n    // a: mip(0) at: [ 2, 10,  0], weight: 0.52740                                 | a: mip(0) at: [ 2, 10,  0], weight: 0.60931\n    // b: mip(0) at: [ 3, 10,  0], weight: 0.17580                                 | b: mip(0) at: [ 3, 10,  0], weight: 0.20319\n    // a: value: R: 0.46642, G: 0.77875, B: 0.77509, A: 0.45788                    | a: value: R: 0.46642, G: 0.77875, B: 0.77509, A: 0.45788\n    // b: value: R: 0.46642, G: 0.77875, B: 0.77509, A: 0.45788                    | b: value: R: 0.46642, G: 0.77875, B: 0.77509, A: 0.45788\n    // mip level (0) weight: 0.70320                                               | mip level (0) weight: 0.81250\n    // ```\n    //\n    // Notice above the \"expected\" level weight (0.7) matches the \"mip level with bias (0.3)\" which is\n    // the mip level we expected the GPU to select. Selecting mip level 0.3 will do `mix(level0, level1, 0.3)`\n    // which is 0.7 of level 0 and 0.3 of level 1. Notice the \"got\" level weight is 0.81 which is pretty far off.\n    //\n    // Just looking at the failures, the largest formula below makes most of the tests pass\n    //\n    // MAINTENANCE_TODO: Consider different solutions for this issue\n    //\n    // 1. Try to figure out what the exact rounding issue is the take it into account\n    //\n    // 2. The code currently samples the texture once via the GPU and once via softwareTextureRead. These values are\n    //    \"got:\" and \"expected:\" above. The test only fails if they are too different. We could rather get the bilinear\n    //    sample from every mip level and then check the \"got\" value is between 2 of the levels (or equal if nearest).\n    //    In other words.\n    //\n    //        if (bias >= 12)\n    //          colorForEachMipLevel = range(mipLevelCount, mipLevel => softwareTextureReadLevel(..., mipLevel))\n    //          if nearest\n    //            pass = got === one of colorForEachMipLevel\n    //          else // linear\n    //            pass = false;\n    //            for (i = 0; !pass && i < mipLevelCount - 1; i)\n    //              pass = got is between colorForEachMipLevel[i] and colorForEachMipLevel[i + 1]\n    //\n    //    This would check \"something\" but effectively it would no longer be checking \"bias\" for values > 12. Only that\n    //    textureSampleBias returns some possible answer vs some completely wrong answer.\n    //\n    // 3. It's possible this check is just not possible given the precision required. We could just check bias -16 to 12\n    //    and ignore values > 12. We won't be able to test clamping but maybe that's irrelevant.\n    //\n    const callSpecificMaxFractionalDiff =\n      call.bias! >= 12 ? maxFractionalDiff * (2 + call.bias! - 12) : maxFractionalDiff;\n\n    // The spec says depth and stencil have implementation defined values for G, B, and A\n    // so if this is `textureGather` and component > 0 then there's nothing to check.\n    if (\n      isDepthOrStencilTextureFormat(format) &&\n      isBuiltinGather(call.builtin) &&\n      call.component! > 0\n    ) {\n      continue;\n    }\n\n    if (\n      texelsApproximatelyEqual(\n        gotRGBA,\n        texture.descriptor.format,\n        expectRGBA,\n        format,\n        callSpecificMaxFractionalDiff\n      )\n    ) {\n      continue;\n    }\n\n    if (!sampler && okBecauseOutOfBounds(texture, call, gotRGBA, callSpecificMaxFractionalDiff)) {\n      continue;\n    }\n\n    const gULP = getULPFromZeroForComponents(gotRGBA, format, call.builtin, call.component);\n    const eULP = getULPFromZeroForComponents(expectRGBA, format, call.builtin, call.component);\n\n    // from the spec: https://gpuweb.github.io/gpuweb/#reading-depth-stencil\n    // depth and stencil values are D, ?, ?, ?\n    const rgbaComponentsToCheck =\n      isBuiltinGather(call.builtin) || !isDepthOrStencilTextureFormat(format)\n        ? kRGBAComponents\n        : kRComponent;\n\n    let bad = false;\n    const diffs = rgbaComponentsToCheck.map(component => {\n      const g = gotRGBA[component]!;\n      const e = expectRGBA[component]!;\n      const absDiff = Math.abs(g - e);\n      const ulpDiff = Math.abs(gULP[component]! - eULP[component]!);\n      assert(!Number.isNaN(ulpDiff));\n      const maxAbs = Math.max(Math.abs(g), Math.abs(e));\n      const relDiff = maxAbs > 0 ? absDiff / maxAbs : 0;\n      if (ulpDiff > 3 && absDiff > callSpecificMaxFractionalDiff) {\n        bad = true;\n      }\n      return { absDiff, relDiff, ulpDiff };\n    });\n\n    const isFloatType = (format: GPUTextureFormat) => {\n      const info = kTextureFormatInfo[format];\n      return info.color?.type === 'float' || info.depth?.type === 'depth';\n    };\n    const fix5 = (n: number) => (isFloatType(format) ? n.toFixed(5) : n.toString());\n    const fix5v = (arr: number[]) => arr.map(v => fix5(v)).join(', ');\n    const rgbaToArray = (p: PerTexelComponent<number>): number[] =>\n      rgbaComponentsToCheck.map(component => p[component]!);\n\n    if (bad) {\n      const desc = describeTextureCall(call);\n      errs.push(`result was not as expected:\n      size: [${size.width}, ${size.height}, ${size.depthOrArrayLayers}]\n  mipCount: ${texture.descriptor.mipLevelCount ?? 1}\n      call: ${desc}  // #${callIdx}`);\n      if (isCubeViewDimension(texture.viewDescriptor)) {\n        const coord = convertCubeCoordToNormalized3DTextureCoord(call.coords as vec3);\n        const faceNdx = Math.floor(coord[2] * 6);\n        errs.push(`          : as 3D texture coord: (${coord[0]}, ${coord[1]}, ${coord[2]})`);\n        for (let mipLevel = 0; mipLevel < (texture.descriptor.mipLevelCount ?? 1); ++mipLevel) {\n          const mipSize = virtualMipSize(\n            texture.descriptor.dimension ?? '2d',\n            texture.descriptor.size,\n            mipLevel\n          );\n          const t = coord.slice(0, 2).map((v, i) => (v * mipSize[i]).toFixed(3));\n          errs.push(\n            `          : as texel coord mip level[${mipLevel}]: (${t[0]}, ${t[1]}), face: ${faceNdx}(${kFaceNames[faceNdx]})`\n          );\n        }\n      } else {\n        for (let mipLevel = 0; mipLevel < (texture.descriptor.mipLevelCount ?? 1); ++mipLevel) {\n          const mipSize = virtualMipSize(\n            texture.descriptor.dimension ?? '2d',\n            texture.descriptor.size,\n            mipLevel\n          );\n          const t = call.coords!.map((v, i) => (v * mipSize[i]).toFixed(3));\n          errs.push(`          : as texel coord @ mip level[${mipLevel}]: (${t.join(', ')})`);\n        }\n      }\n      if (builtinNeedsDerivatives(call.builtin)) {\n        const ddx = derivativeForCall<T>(texture, call, true);\n        const ddy = derivativeForCall<T>(texture, call, false);\n        const mipLevel = computeMipLevelFromGradients(ddx, ddy, size);\n        const biasStr = call.bias === undefined ? '' : ' (without bias)';\n        errs.push(`implicit derivative based mip level: ${fix5(mipLevel)}${biasStr}`);\n        if (call.bias) {\n          const clampedBias = clamp(call.bias ?? 0, { min: -16.0, max: 15.99 });\n          errs.push(`\\\n                       clamped bias: ${fix5(clampedBias)}\n                mip level with bias: ${fix5(mipLevel + clampedBias)}`);\n        }\n      } else if (call.ddx) {\n        const mipLevel = computeMipLevelFromGradientsForCall(call, size);\n        errs.push(`gradient based mip level: ${mipLevel}`);\n      }\n      errs.push(`\\\n       got: ${fix5v(rgbaToArray(gotRGBA))}\n  expected: ${fix5v(rgbaToArray(expectRGBA))}\n  max diff: ${callSpecificMaxFractionalDiff}\n abs diffs: ${fix5v(diffs.map(({ absDiff }) => absDiff))}\n rel diffs: ${diffs.map(({ relDiff }) => `${(relDiff * 100).toFixed(2)}%`).join(', ')}\n ulp diffs: ${diffs.map(({ ulpDiff }) => ulpDiff).join(', ')}\n`);\n\n      if (sampler) {\n        if (t.rec.debugging) {\n          // For compares, we can't use the builtin (textureXXXCompareXXX) because it only\n          // returns 0 or 1 or the average of 0 and 1 for multiple samples. And, for example,\n          // if the comparison is `always` then every sample returns 1. So we need to use the\n          // corresponding sample function to get the actual values from the textures\n          //\n          // textureSampleCompare -> textureSample\n          // textureSampleCompareLevel -> textureSampleLevel\n          // textureGatherCompare -> textureGather\n          if (isBuiltinComparison(call.builtin)) {\n            if (!haveComparisonCheckInfo) {\n              // Convert the comparison calls to their corresponding non-comparison call\n              const debugCalls = calls.map(call => {\n                const debugCall = { ...call };\n                debugCall.depthRef = undefined;\n                switch (call.builtin) {\n                  case 'textureGatherCompare':\n                    debugCall.builtin = 'textureGather';\n                    break;\n                  case 'textureSampleCompare':\n                    debugCall.builtin = 'textureSample';\n                    break;\n                  case 'textureSampleCompareLevel':\n                    debugCall.builtin = 'textureSampleLevel';\n                    debugCall.levelType = 'f';\n                    debugCall.mipLevel = 0;\n                    break;\n                  default:\n                    unreachable();\n                }\n                return debugCall;\n              });\n\n              // Convert the comparison sampler to a non-comparison sampler\n              const debugSampler = { ...sampler };\n              delete debugSampler.compare;\n\n              // Make a runner for these changed calls.\n              const debugRunner = createTextureCallsRunner(\n                t,\n                {\n                  format,\n                  dimension: texture.descriptor.dimension ?? '2d',\n                  sampleCount: texture.descriptor.sampleCount ?? 1,\n                  depthOrArrayLayers: size.depthOrArrayLayers,\n                },\n                texture.viewDescriptor,\n                textureType,\n                debugSampler,\n                debugCalls,\n                stage\n              );\n              checkInfo = {\n                runner: debugRunner,\n                sampler: debugSampler,\n                calls: debugCalls,\n              };\n              haveComparisonCheckInfo = true;\n            }\n          }\n\n          if (!gpuTexels && gpuTexture) {\n            // Read the texture back if we haven't yet. We'll use this\n            // to get values for each sample point.\n            gpuTexels = await readTextureToTexelViews(\n              t,\n              gpuTexture,\n              texture.descriptor,\n              getTexelViewFormatForTextureFormat(gpuTexture.format)\n            );\n          }\n\n          const callForSamplePoints = checkInfo.calls[callIdx];\n\n          // We're going to create textures with black and white texels\n          // but if it's a compressed texture we use an encodable texture.\n          // It's not perfect but we already know it failed. We're just hoping\n          // to get sample points.\n          const useTexelFormatForGPUTexture = isCompressedTextureFormat(texture.descriptor.format);\n\n          if (useTexelFormatForGPUTexture) {\n            errs.push(`\n### WARNING: sample points are derived from un-compressed textures and may not match the\nactual GPU results of sampling a compressed texture. The test itself failed at this point\n(see expected: and got: above). We're only trying to determine what the GPU sampled, but\nwe can not do that easily with compressed textures. ###\n`);\n          }\n\n          const expectedSamplePoints = [\n            'expected:',\n            ...(await identifySamplePoints(\n              texture,\n              sampler,\n              callForSamplePoints,\n              call,\n              texture.texels,\n              (texels: TexelView[]) => {\n                return Promise.resolve(\n                  softwareTextureRead(\n                    t,\n                    stage,\n                    callForSamplePoints,\n                    {\n                      texels,\n                      descriptor: texture.descriptor,\n                      viewDescriptor: texture.viewDescriptor,\n                    },\n                    checkInfo.sampler\n                  )\n                );\n              }\n            )),\n          ];\n          const gotSamplePoints = [\n            'got:',\n            ...(await identifySamplePoints(\n              texture,\n              sampler,\n              callForSamplePoints,\n              call,\n              gpuTexels,\n              async (texels: TexelView[]) => {\n                const descriptor = { ...texture.descriptor };\n                if (useTexelFormatForGPUTexture) {\n                  descriptor.format = texels[0].format;\n                }\n                const gpuTexture = createTextureFromTexelViewsLocal(t, texels, descriptor);\n                const result = (await checkInfo.runner.run(gpuTexture))[callIdx];\n                gpuTexture.destroy();\n                return result;\n              }\n            )),\n          ];\n          errs.push('  sample points:');\n          errs.push(layoutTwoColumns(expectedSamplePoints, gotSamplePoints).join('\\n'));\n          errs.push('', '');\n        }\n\n        // this is not an else because it's common to comment out the previous `if` for running on a CQ.\n        if (!t.rec.debugging) {\n          errs.push('### turn on debugging to see sample points ###');\n        }\n      } // if (sampler)\n\n      // Don't report the other errors. There 50 sample points per subcase and\n      // 50-100 subcases so the log would get enormous if all 50 fail. One\n      // report per subcase is enough.\n      break;\n    } // if (bad)\n  } // for cellNdx\n\n  results.runner.destroy();\n  checkInfo.runner.destroy();\n\n  return errs.length > 0 ? new Error(errs.join('\\n')) : undefined;\n}\n\nfunction getMaxFractionalDiffForTextureFormat(format: GPUTextureFormat) {\n  // Note: I'm not sure what we should do here. My assumption is, given texels\n  // have random values, the difference between 2 texels can be very large. In\n  // the current version, for a float texture they can be +/- 1000 difference.\n  // Sampling is very GPU dependent. So if one pixel gets a random value of\n  // -1000 and the neighboring pixel gets +1000 then any slight variation in how\n  // sampling is applied will generate a large difference when interpolating\n  // between -1000 and +1000.\n  //\n  // We could make some entry for every format but for now I just put the\n  // tolerances here based on format texture suffix.\n  //\n  // It's possible the math in the software rasterizer is just bad but the\n  // results certainly seem close.\n  //\n  // These tolerances started from the OpenGL ES dEQP tests.\n  // Those tests always render to an rgba8unorm texture. The shaders do effectively\n  //\n  //   result = textureSample(...) * scale + bias\n  //\n  // to get the results in a 0.0 to 1.0 range. After reading the values back they\n  // expand them to their original ranges with\n  //\n  //   value = (result - bias) / scale;\n  //\n  // Tolerances from dEQP\n  // --------------------\n  // 8unorm: 3.9 / 255\n  // 8snorm: 7.9 / 128\n  // 2unorm: 7.9 / 512\n  // ufloat: 156.249\n  //  float: 31.2498\n  //\n  // The numbers below have been set empirically to get the tests to pass on all\n  // devices. The devices with the most divergence from the calculated expected\n  // values are MacOS Intel and AMD.\n  //\n  // MAINTENANCE_TODO: Double check the software rendering math and lower these\n  // tolerances if possible.\n\n  if (format.includes('depth')) {\n    return 3 / 100;\n  } else if (format.includes('8unorm')) {\n    return 7 / 255;\n  } else if (format.includes('2unorm')) {\n    return 13 / 512;\n  } else if (format.includes('unorm')) {\n    return 7 / 255;\n  } else if (format.includes('8snorm')) {\n    return 7.9 / 128;\n  } else if (format.includes('snorm')) {\n    return 7.9 / 128;\n  } else if (format.endsWith('ufloat')) {\n    return 156.249;\n  } else if (format.endsWith('float')) {\n    return 44;\n  } else {\n    // It's likely an integer format. In any case, zero tolerance is passable.\n    return 0;\n  }\n}\n\nconst sumOfCharCodesOfString = (s: unknown) =>\n  String(s)\n    .split('')\n    .reduce((sum, c) => sum + c.charCodeAt(0), 0);\n\n/**\n * Makes a function that fills a block portion of a Uint8Array with random valid data\n * for an astc block.\n *\n * The astc format is fairly complicated. For now we do the simplest thing.\n * which is to set the block as a \"void-extent\" block (a solid color).\n * This makes our test have far less precision.\n *\n * MAINTENANCE_TODO: generate other types of astc blocks. One option would\n * be to randomly select from set of pre-made blocks.\n *\n * See Spec:\n * https://registry.khronos.org/OpenGL/extensions/KHR/KHR_texture_compression_astc_hdr.txt\n */\nfunction makeAstcBlockFiller(format: GPUTextureFormat) {\n  const info = kTextureFormatInfo[format];\n  const bytesPerBlock = info.color!.bytes;\n  return (data: Uint8Array, offset: number, hashBase: number) => {\n    // set the block to be a void-extent block\n    data.set(\n      [\n        0b1111_1100, // 0\n        0b1111_1101, // 1\n        0b1111_1111, // 2\n        0b1111_1111, // 3\n        0b1111_1111, // 4\n        0b1111_1111, // 5\n        0b1111_1111, // 6\n        0b1111_1111, // 7\n      ],\n      offset\n    );\n    // fill the rest of the block with random data\n    const end = offset + bytesPerBlock;\n    for (let i = offset + 8; i < end; ++i) {\n      data[i] = hashU32(hashBase, i);\n    }\n  };\n}\n\n/**\n * Makes a function that fills a block portion of a Uint8Array with random bytes.\n */\nfunction makeRandomBytesBlockFiller(format: GPUTextureFormat) {\n  const info = kTextureFormatInfo[format];\n  const bytesPerBlock = info.color!.bytes;\n  return (data: Uint8Array, offset: number, hashBase: number) => {\n    const end = offset + bytesPerBlock;\n    for (let i = offset; i < end; ++i) {\n      data[i] = hashU32(hashBase, i);\n    }\n  };\n}\n\nfunction getBlockFiller(format: GPUTextureFormat) {\n  if (format.startsWith('astc')) {\n    return makeAstcBlockFiller(format);\n  } else {\n    return makeRandomBytesBlockFiller(format);\n  }\n}\n\n/**\n * Fills a texture with random data.\n */\nfunction fillTextureWithRandomData(device: GPUDevice, texture: GPUTexture) {\n  assert(!isCompressedFloatTextureFormat(texture.format));\n  const info = kTextureFormatInfo[texture.format];\n  const hashBase =\n    sumOfCharCodesOfString(texture.format) +\n    sumOfCharCodesOfString(texture.dimension) +\n    texture.width +\n    texture.height +\n    texture.depthOrArrayLayers +\n    texture.mipLevelCount;\n  const bytesPerBlock = info.color!.bytes;\n  const fillBlock = getBlockFiller(texture.format);\n  for (let mipLevel = 0; mipLevel < texture.mipLevelCount; ++mipLevel) {\n    const size = physicalMipSizeFromTexture(texture, mipLevel);\n    const blocksAcross = Math.ceil(size[0] / info.blockWidth);\n    const blocksDown = Math.ceil(size[1] / info.blockHeight);\n    const bytesPerRow = blocksAcross * bytesPerBlock;\n    const bytesNeeded = bytesPerRow * blocksDown * size[2];\n    const data = new Uint8Array(bytesNeeded);\n    for (let offset = 0; offset < bytesNeeded; offset += bytesPerBlock) {\n      fillBlock(data, offset, hashBase);\n    }\n    device.queue.writeTexture(\n      { texture, mipLevel },\n      data,\n      { bytesPerRow, rowsPerImage: blocksDown },\n      size\n    );\n  }\n}\n\nconst s_readTextureToRGBA32DeviceToPipeline = new WeakMap<\n  GPUDevice,\n  Map<string, GPUComputePipeline>\n>();\n\n// MAINTENANCE_TODO: remove cast once textureBindingViewDimension is added to IDL\nfunction getEffectiveViewDimension(\n  t: GPUTest,\n  descriptor: Omit<GPUTextureDescriptor, 'format' | 'usage'>\n): GPUTextureViewDimension {\n  const { textureBindingViewDimension } = descriptor as unknown as {\n    textureBindingViewDimension?: GPUTextureViewDimension;\n  };\n  const size = reifyExtent3D(descriptor.size);\n  return effectiveViewDimensionForDimension(\n    textureBindingViewDimension,\n    descriptor.dimension,\n    size.depthOrArrayLayers\n  );\n}\n\n/**\n * Reads a texture to an array of TexelViews, one per mip level.\n * format is the format of the TexelView you want. Often this is\n * same as the texture.format but if the texture.format is not\n * \"Encodable\" then you need to choose a different format.\n * Example: depth24plus -> r32float, bc1-rgba-unorm to rgba32float\n */\nexport async function readTextureToTexelViews(\n  t: GPUTest,\n  texture: GPUTexture,\n  descriptor: Omit<GPUTextureDescriptor, 'format' | 'usage'>,\n  format: EncodableTextureFormat\n) {\n  const device = t.device;\n  const viewDimensionToPipelineMap =\n    s_readTextureToRGBA32DeviceToPipeline.get(device) ??\n    new Map<GPUTextureViewDimension, GPUComputePipeline>();\n  s_readTextureToRGBA32DeviceToPipeline.set(device, viewDimensionToPipelineMap);\n\n  const { componentType, resultType } = getTextureFormatTypeInfo(texture.format);\n  const viewDimension = getEffectiveViewDimension(t, descriptor);\n  const id = `${texture.format}:${viewDimension}:${texture.sampleCount}`;\n  let pipeline = viewDimensionToPipelineMap.get(id);\n  if (!pipeline) {\n    let textureWGSL;\n    let loadWGSL;\n    let dimensionWGSL = 'textureDimensions(tex, 0)';\n    switch (viewDimension) {\n      case '2d':\n        if (texture.sampleCount > 1) {\n          textureWGSL = `texture_multisampled_2d<${componentType}>`;\n          loadWGSL = 'textureLoad(tex, coord.xy, sampleIndex)';\n          dimensionWGSL = 'textureDimensions(tex)';\n        } else {\n          textureWGSL = `texture_2d<${componentType}>`;\n          loadWGSL = 'textureLoad(tex, coord.xy, 0)';\n        }\n        break;\n      case 'cube-array': // cube-array doesn't exist in compat so we can just use 2d_array for this\n      case '2d-array':\n        textureWGSL = `texture_2d_array<${componentType}>`;\n        loadWGSL = `\n          textureLoad(\n              tex,\n              coord.xy,\n              coord.z,\n              0)`;\n        break;\n      case '3d':\n        textureWGSL = `texture_3d<${componentType}>`;\n        loadWGSL = 'textureLoad(tex, coord.xyz, 0)';\n        break;\n      case 'cube':\n        textureWGSL = `texture_cube<${componentType}>`;\n        loadWGSL = `\n          textureLoadCubeAs2DArray(tex, coord.xy, coord.z);\n        `;\n        break;\n      case '1d':\n        textureWGSL = `texture_1d<${componentType}>`;\n        loadWGSL = `textureLoad(tex, coord.x, 0)`;\n        dimensionWGSL = `vec2u(textureDimensions(tex), 1)`;\n        break;\n      default:\n        unreachable(`unsupported view: ${viewDimension}`);\n    }\n\n    const textureLoadCubeWGSL = `\n      const faceMat = array(\n        mat3x3f( 0,  0,  -2,  0, -2,   0,  1,  1,   1),   // pos-x\n        mat3x3f( 0,  0,   2,  0, -2,   0, -1,  1,  -1),   // neg-x\n        mat3x3f( 2,  0,   0,  0,  0,   2, -1,  1,  -1),   // pos-y\n        mat3x3f( 2,  0,   0,  0,  0,  -2, -1, -1,   1),   // neg-y\n        mat3x3f( 2,  0,   0,  0, -2,   0, -1,  1,   1),   // pos-z\n        mat3x3f(-2,  0,   0,  0, -2,   0,  1,  1,  -1));  // neg-z\n\n      // needed for compat mode.\n      fn textureLoadCubeAs2DArray(tex: texture_cube<${componentType}>, coord: vec2u, layer: u32) -> ${resultType} {\n        // convert texel coord normalized coord\n        let size = textureDimensions(tex, 0);\n        let uv = (vec2f(coord) + 0.5) / vec2f(size.xy);\n\n        // convert uv + layer into cube coord\n        let cubeCoord = faceMat[layer] * vec3f(uv, 1.0);\n\n        // We have to use textureGather as it's the only texture builtin that works on cubemaps\n        // with integer texture formats.\n        let r = textureGather(0, tex, smp, cubeCoord);\n        let g = textureGather(1, tex, smp, cubeCoord);\n        let b = textureGather(2, tex, smp, cubeCoord);\n        let a = textureGather(3, tex, smp, cubeCoord);\n\n        // element 3 is the texel corresponding to cubeCoord\n        return ${resultType}(r[3], g[3], b[3], a[3]);\n      }\n    `;\n\n    const module = device.createShaderModule({\n      code: `\n        ${isViewDimensionCubeOrCubeArray(viewDimension) ? textureLoadCubeWGSL : ''}\n        struct Uniforms {\n          sampleCount: u32,\n        };\n\n        @group(0) @binding(0) var<uniform> uni: Uniforms;\n        @group(0) @binding(1) var tex: ${textureWGSL};\n        @group(0) @binding(2) var smp: sampler;\n        @group(0) @binding(3) var<storage, read_write> data: array<${resultType}>;\n\n        @compute @workgroup_size(1) fn cs(\n          @builtin(global_invocation_id) global_invocation_id : vec3<u32>) {\n          _ = smp;\n          let size = ${dimensionWGSL};\n          let ndx = global_invocation_id.z * size.x * size.y * uni.sampleCount +\n                    global_invocation_id.y * size.x * uni.sampleCount +\n                    global_invocation_id.x;\n          let coord = vec3u(global_invocation_id.x / uni.sampleCount, global_invocation_id.yz);\n          let sampleIndex = global_invocation_id.x % uni.sampleCount;\n          data[ndx] = ${loadWGSL};\n        }\n      `,\n    });\n    const info = kTextureFormatInfo[texture.format];\n    const sampleType = info.depth\n      ? 'unfilterable-float' // depth only supports unfilterable-float if not a comparison.\n      : info.stencil\n      ? 'uint'\n      : info.color.type === 'float'\n      ? 'unfilterable-float'\n      : info.color.type;\n    const bindGroupLayout = device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.COMPUTE,\n          buffer: {\n            type: 'uniform',\n          },\n        },\n        {\n          binding: 1,\n          visibility: GPUShaderStage.COMPUTE,\n          texture: {\n            sampleType,\n            viewDimension,\n            multisampled: texture.sampleCount > 1,\n          },\n        },\n        {\n          binding: 2,\n          visibility: GPUShaderStage.COMPUTE,\n          sampler: {\n            type: 'non-filtering',\n          },\n        },\n        {\n          binding: 3,\n          visibility: GPUShaderStage.COMPUTE,\n          buffer: {\n            type: 'storage',\n          },\n        },\n      ],\n    });\n    const layout = device.createPipelineLayout({\n      bindGroupLayouts: [bindGroupLayout],\n    });\n    pipeline = device.createComputePipeline({ layout, compute: { module } });\n    viewDimensionToPipelineMap.set(id, pipeline);\n  }\n\n  const encoder = device.createCommandEncoder();\n\n  const readBuffers = [];\n  for (let mipLevel = 0; mipLevel < texture.mipLevelCount; ++mipLevel) {\n    const size = virtualMipSize(texture.dimension, texture, mipLevel);\n\n    const uniformValues = new Uint32Array([texture.sampleCount, 0, 0, 0]); // min size is 16 bytes\n    const uniformBuffer = t.createBufferTracked({\n      size: uniformValues.byteLength,\n      usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n    });\n    device.queue.writeBuffer(uniformBuffer, 0, uniformValues);\n\n    const storageBuffer = t.createBufferTracked({\n      size: size[0] * size[1] * size[2] * 4 * 4 * texture.sampleCount, // rgba32float\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n    });\n\n    const readBuffer = t.createBufferTracked({\n      size: storageBuffer.size,\n      usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\n    });\n    readBuffers.push({ size, readBuffer });\n\n    const sampler = device.createSampler();\n\n    const aspect = getAspectForTexture(texture);\n    const bindGroup = device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [\n        { binding: 0, resource: { buffer: uniformBuffer } },\n        {\n          binding: 1,\n          resource: texture.createView({\n            dimension: viewDimension,\n            aspect,\n            baseMipLevel: mipLevel,\n            mipLevelCount: 1,\n          }),\n        },\n        { binding: 2, resource: sampler },\n        { binding: 3, resource: { buffer: storageBuffer } },\n      ],\n    });\n\n    const pass = encoder.beginComputePass();\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bindGroup);\n    pass.dispatchWorkgroups(size[0] * texture.sampleCount, size[1], size[2]);\n    pass.end();\n    encoder.copyBufferToBuffer(storageBuffer, 0, readBuffer, 0, readBuffer.size);\n  }\n\n  device.queue.submit([encoder.finish()]);\n\n  const texelViews: TexelView[] = [];\n\n  for (const { readBuffer, size } of readBuffers) {\n    await readBuffer.mapAsync(GPUMapMode.READ);\n\n    // need a copy of the data since unmapping will nullify the typedarray view.\n    const Ctor =\n      componentType === 'i32' ? Int32Array : componentType === 'u32' ? Uint32Array : Float32Array;\n    const data = new Ctor(readBuffer.getMappedRange()).slice();\n    readBuffer.unmap();\n\n    const { sampleCount } = texture;\n    texelViews.push(\n      TexelView.fromTexelsAsColors(format, coord => {\n        const offset =\n          ((coord.z * size[0] * size[1] + coord.y * size[0] + coord.x) * sampleCount +\n            (coord.sampleIndex ?? 0)) *\n          4;\n        return {\n          R: data[offset + 0],\n          G: data[offset + 1],\n          B: data[offset + 2],\n          A: data[offset + 3],\n        };\n      })\n    );\n  }\n\n  return texelViews;\n}\n\nfunction createTextureFromTexelViewsLocal(\n  t: GPUTest,\n  texelViews: TexelView[],\n  desc: GPUTextureDescriptor\n): GPUTexture {\n  const modifiedDescriptor = { ...desc };\n  // If it's a depth or stencil texture we need to render to it to fill it with data.\n  if (isDepthOrStencilTextureFormat(desc.format) || desc.sampleCount! > 1) {\n    modifiedDescriptor.usage = desc.usage | GPUTextureUsage.RENDER_ATTACHMENT;\n  }\n  return createTextureFromTexelViews(t, texelViews, modifiedDescriptor);\n}\n\n/**\n * Fills a texture with random data and returns that data as\n * an array of TexelView.\n *\n * For compressed textures the texture is filled with random bytes\n * and then read back from the GPU by sampling so the GPU decompressed\n * the texture.\n *\n * For uncompressed textures the TexelViews are generated and then\n * copied to the texture.\n */\nexport async function createTextureWithRandomDataAndGetTexels(\n  t: GPUTest,\n  descriptor: GPUTextureDescriptor,\n  options?: RandomTextureOptions\n) {\n  if (isCompressedTextureFormat(descriptor.format)) {\n    assert(!options, 'options not supported for compressed textures');\n    const texture = t.createTextureTracked(descriptor);\n\n    fillTextureWithRandomData(t.device, texture);\n    const texels = await readTextureToTexelViews(\n      t,\n      texture,\n      descriptor,\n      getTexelViewFormatForTextureFormat(texture.format)\n    );\n    return { texture, texels };\n  } else if (isUnencodableDepthFormat(descriptor.format)) {\n    // This is round about. We can't directly write to depth24plus, depth24plus-stencil8, depth32float-stencil8\n    // and they are not encodable. So: (1) we make random data using `depth32float`. We create a texture with\n    // that data (createTextureFromTexelViewsLocal will render the data into the texture rather than copy).\n    // We then need to read it back out but as rgba32float since that is encodable but, since it round tripped\n    // through the GPU it's now been quantized.\n    const d32Descriptor = {\n      ...descriptor,\n      format: 'depth32float' as GPUTextureFormat,\n    };\n    const tempTexels = createRandomTexelViewMipmap(d32Descriptor, options);\n    const texture = createTextureFromTexelViewsLocal(t, tempTexels, descriptor);\n    const texels = await readTextureToTexelViews(\n      t,\n      texture,\n      descriptor,\n      getTexelViewFormatForTextureFormat(texture.format)\n    );\n    return { texture, texels };\n  } else {\n    const texels = createRandomTexelViewMipmap(descriptor, options);\n    const texture = createTextureFromTexelViewsLocal(t, texels, descriptor);\n    return { texture, texels };\n  }\n}\n\nfunction valueIfAllComponentsAreEqual(\n  c: PerTexelComponent<number>,\n  componentOrder: readonly TexelComponent[]\n) {\n  const s = new Set(componentOrder.map(component => c[component]!));\n  return s.size === 1 ? s.values().next().value : undefined;\n}\n\n/**\n * Creates a VideoFrame with random data and a TexelView with the same data.\n */\nexport function createVideoFrameWithRandomDataAndGetTexels(textureSize: GPUExtent3D) {\n  const size = reifyExtent3D(textureSize);\n  assert(size.depthOrArrayLayers === 1);\n\n  // Fill ImageData with random values.\n  const imageData = new ImageData(size.width, size.height);\n  const data = imageData.data;\n  const asU32 = new Uint32Array(data.buffer);\n  for (let i = 0; i < asU32.length; ++i) {\n    asU32[i] = hashU32(i);\n  }\n\n  // Put the ImageData into a canvas and make a VideoFrame\n  const canvas = new OffscreenCanvas(size.width, size.height);\n  const ctx = canvas.getContext('2d')!;\n  ctx.putImageData(imageData, 0, 0);\n  const videoFrame = new VideoFrame(canvas, { timestamp: 0 });\n\n  // Premultiply the ImageData\n  for (let i = 0; i < data.length; i += 4) {\n    const alpha = data[i + 3] / 255;\n    data[i + 0] = data[i + 0] * alpha;\n    data[i + 1] = data[i + 1] * alpha;\n    data[i + 2] = data[i + 2] * alpha;\n  }\n\n  // Create a TexelView from the premultiplied ImageData\n  const texels = [\n    TexelView.fromTextureDataByReference('rgba8unorm', data, {\n      bytesPerRow: size.width * 4,\n      rowsPerImage: size.height,\n      subrectOrigin: [0, 0, 0],\n      subrectSize: size,\n    }),\n  ];\n\n  return { videoFrame, texels };\n}\n\nconst kFaceNames = ['+x', '-x', '+y', '-y', '+z', '-z'] as const;\n\n/**\n * Generates a text art grid showing which texels were sampled\n * followed by a list of the samples and the weights used for each\n * component.\n *\n * It works by making a set of indices for every texel in the texture.\n * It splits the set into 2. It picks one set and generates texture data\n * using TexelView.fromTexelsAsColor with [1, 1, 1, 1] texels for members\n * of the current set.\n *\n * In then calls 'run' which renders a single `call`. `run` uses either\n * the software renderer or WebGPU. It then checks the results. If the\n * result is zero, all texels in the current had no influence when sampling\n * and can be discarded.\n *\n * If the result is > 0 then, if the set has more than one member, the\n * set is split and added to the list to sets to test. If the set only\n * had one member then the result is the weight used when sampling that texel.\n *\n * This lets you see if the weights from the software renderer match the\n * weights from WebGPU.\n *\n * Example:\n *\n *     0   1   2   3   4   5   6   7\n *   +---+---+---+---+---+---+---+---+\n * 0 |   |   |   |   |   |   |   |   |\n *   +---+---+---+---+---+---+---+---+\n * 1 |   |   |   |   |   |   |   | a |\n *   +---+---+---+---+---+---+---+---+\n * 2 |   |   |   |   |   |   |   | b |\n *   +---+---+---+---+---+---+---+---+\n * 3 |   |   |   |   |   |   |   |   |\n *   +---+---+---+---+---+---+---+---+\n * 4 |   |   |   |   |   |   |   |   |\n *   +---+---+---+---+---+---+---+---+\n * 5 |   |   |   |   |   |   |   |   |\n *   +---+---+---+---+---+---+---+---+\n * 6 |   |   |   |   |   |   |   |   |\n *   +---+---+---+---+---+---+---+---+\n * 7 |   |   |   |   |   |   |   |   |\n *   +---+---+---+---+---+---+---+---+\n * a: at: [7, 1], weights: [R: 0.75000]\n * b: at: [7, 2], weights: [R: 0.25000]\n */\nasync function identifySamplePoints<T extends Dimensionality>(\n  texture: Texture,\n  sampler: GPUSamplerDescriptor,\n  callForSamples: TextureCall<T>,\n  originalCall: TextureCall<T>,\n  texels: TexelView[] | undefined,\n  run: (texels: TexelView[]) => Promise<PerTexelComponent<number>>\n) {\n  const info = texture.descriptor;\n  const isCube = isCubeViewDimension(texture.viewDescriptor);\n  const mipLevelCount = texture.descriptor.mipLevelCount ?? 1;\n  const mipLevelSize = range(mipLevelCount, mipLevel =>\n    virtualMipSize(texture.descriptor.dimension ?? '2d', texture.descriptor.size, mipLevel)\n  );\n  const numTexelsPerLevel = mipLevelSize.map(size => size.reduce((s, v) => s * v));\n  const numTexelsOfPrecedingLevels = (() => {\n    let total = 0;\n    return numTexelsPerLevel.map(v => {\n      const num = total;\n      total += v;\n      return num;\n    });\n  })();\n  const numTexels = numTexelsPerLevel.reduce((sum, v) => sum + v);\n\n  const getMipLevelFromTexelId = (texelId: number) => {\n    for (let mipLevel = mipLevelCount - 1; mipLevel > 0; --mipLevel) {\n      if (texelId - numTexelsOfPrecedingLevels[mipLevel] >= 0) {\n        return mipLevel;\n      }\n    }\n    return 0;\n  };\n\n  const getTexelCoordFromTexelId = (texelId: number) => {\n    const mipLevel = getMipLevelFromTexelId(texelId);\n    const size = mipLevelSize[mipLevel];\n    const texelsPerSlice = size[0] * size[1];\n    const id = texelId - numTexelsOfPrecedingLevels[mipLevel];\n    const layer = Math.floor(id / texelsPerSlice);\n    const xyId = id - layer * texelsPerSlice;\n    const y = (xyId / size[0]) | 0;\n    const x = xyId % size[0];\n    return { x, y, z: layer, mipLevel, xyId };\n  };\n\n  // This isn't perfect. We already know there was an error. We're just\n  // generating info so it seems okay it's not perfect. This format will\n  // be used to generate weights by drawing with a texture of this format\n  // with a specific pixel set to [1, 1, 1, 1]. As such, if the result\n  // is > 0 then that pixel was sampled and the results are the weights.\n  //\n  // Ideally, this texture with a single pixel set to [1, 1, 1, 1] would\n  // be the same format we were originally testing, the one we already\n  // detected an error for. This way, whatever subtle issues there are\n  // from that format will affect the weight values we're computing. But,\n  // if that format is not encodable, for example if it's a compressed\n  // texture format, then we have no way to build a texture so we use\n  // rgba8unorm instead.\n  const format = (\n    kEncodableTextureFormats.includes(info.format as EncodableTextureFormat)\n      ? info.format\n      : isDepthTextureFormat(info.format)\n      ? 'depth16unorm'\n      : 'rgba8unorm'\n  ) as EncodableTextureFormat;\n  const rep = kTexelRepresentationInfo[format];\n\n  const components = isBuiltinGather(callForSamples.builtin) ? kRGBAComponents : rep.componentOrder;\n  const convertResultAsAppropriate = isBuiltinGather(callForSamples.builtin)\n    ? <T>(v: T) => v\n    : convertResultFormatToTexelViewFormat;\n\n  // Identify all the texels that are sampled, and their weights.\n  const sampledTexelWeights = new Map<number, PerTexelComponent<number>>();\n  const unclassifiedStack = [new Set<number>(range(numTexels, v => v))];\n  while (unclassifiedStack.length > 0) {\n    // Pop the an unclassified texels stack\n    const unclassified = unclassifiedStack.pop()!;\n\n    // Split unclassified texels evenly into two new sets\n    const setA = new Set<number>();\n    const setB = new Set<number>();\n    [...unclassified.keys()].forEach((t, i) => ((i & 1) === 0 ? setA : setB).add(t));\n\n    // Push setB to the unclassified texels stack\n    if (setB.size > 0) {\n      unclassifiedStack.push(setB);\n    }\n\n    // See if any of the texels in setA were sampled.0\n    const results = convertResultAsAppropriate(\n      await run(\n        range(mipLevelCount, mipLevel =>\n          TexelView.fromTexelsAsColors(\n            format,\n            (coords: Required<GPUOrigin3DDict>): Readonly<PerTexelComponent<number>> => {\n              const size = mipLevelSize[mipLevel];\n              const texelsPerSlice = size[0] * size[1];\n              const texelsPerRow = size[0];\n              const texelId =\n                numTexelsOfPrecedingLevels[mipLevel] +\n                coords.x +\n                coords.y * texelsPerRow +\n                coords.z * texelsPerSlice;\n              const isCandidate = setA.has(texelId);\n              const texel: PerTexelComponent<number> = {};\n              for (const component of rep.componentOrder) {\n                texel[component] = isCandidate ? 1 : 0;\n              }\n              return texel;\n            }\n          )\n        )\n      ),\n      format\n    );\n    if (components.some(c => results[c] !== 0)) {\n      // One or more texels of setA were sampled.\n      if (setA.size === 1) {\n        // We identified a specific texel was sampled.\n        // As there was only one texel in the set, results holds the sampling weights.\n        setA.forEach(texel => sampledTexelWeights.set(texel, results));\n      } else {\n        // More than one texel in the set. Needs splitting.\n        unclassifiedStack.push(setA);\n      }\n    }\n  }\n\n  // separate the sampledTexelWeights by mipLevel, then by layer, within a layer the texelId only includes x and y\n  const levels: Map<number, PerTexelComponent<number>>[][] = [];\n  for (const [texelId, weight] of sampledTexelWeights.entries()) {\n    const { xyId, z, mipLevel } = getTexelCoordFromTexelId(texelId);\n    const level = levels[mipLevel] ?? [];\n    levels[mipLevel] = level;\n    const layerEntries = level[z] ?? new Map();\n    level[z] = layerEntries;\n    layerEntries.set(xyId, weight);\n  }\n\n  // example when blockWidth = 2, blockHeight = 2\n  //\n  //     0   1   2   3\n  //   +===+===+===+===+\n  // 0 # a |   #   |   #\n  //   +---+---+---+---+\n  // 1 #   |   #   |   #\n  //   +===+===+===+===+\n  // 2 #   |   #   |   #\n  //   +---+---+---+---+\n  // 3 #   |   #   | b #\n  //   +===+===+===+===+\n\n  const lines: string[] = [];\n  const letter = (idx: number) => String.fromCodePoint(idx < 30 ? 97 + idx : idx + 9600 - 30); // 97: 'a'\n  let idCount = 0;\n\n  const { blockWidth, blockHeight } = kTextureFormatInfo[texture.descriptor.format];\n  const [blockHChar, blockVChar] = Math.max(blockWidth, blockHeight) > 1 ? ['=', '#'] : ['-', '|'];\n  const blockHCell = '+'.padStart(4, blockHChar); // generates ---+ or ===+\n  // range + concatenate results.\n  const rangeCat = <T>(num: number, fn: (i: number) => T) => range(num, fn).join('');\n\n  for (let mipLevel = 0; mipLevel < mipLevelCount; ++mipLevel) {\n    const level = levels[mipLevel];\n    if (!level) {\n      continue;\n    }\n\n    const [width, height, depthOrArrayLayers] = mipLevelSize[mipLevel];\n    const texelsPerRow = width;\n\n    for (let layer = 0; layer < depthOrArrayLayers; ++layer) {\n      const layerEntries = level[layer];\n\n      const orderedTexelIndices: number[] = [];\n      lines.push('');\n      const unSampled = layerEntries ? '' : 'un-sampled';\n      if (isCube) {\n        const face = kFaceNames[layer % 6];\n        lines.push(\n          `layer: ${layer} mip(${mipLevel}), cube-layer: ${(layer / 6) | 0} (${face}) ${unSampled}`\n        );\n      } else {\n        lines.push(`layer: ${layer} mip(${mipLevel}) ${unSampled}`);\n      }\n\n      if (!layerEntries) {\n        continue;\n      }\n\n      lines.push(`   ${rangeCat(width, x => `  ${x.toString().padEnd(2)}`)}`);\n      lines.push(`   +${rangeCat(width, () => blockHCell)}`);\n      for (let y = 0; y < height; y++) {\n        {\n          let line = `${y.toString().padStart(2)} ${blockVChar}`;\n          for (let x = 0; x < width; x++) {\n            const colChar = (x + 1) % blockWidth === 0 ? blockVChar : '|';\n            const texelIdx = x + y * texelsPerRow;\n            const weight = layerEntries.get(texelIdx);\n            if (weight !== undefined) {\n              line += ` ${letter(idCount + orderedTexelIndices.length)} ${colChar}`;\n              orderedTexelIndices.push(texelIdx);\n            } else {\n              line += `   ${colChar}`;\n            }\n          }\n          lines.push(line);\n        }\n        if (y < height - 1) {\n          lines.push(\n            `   +${rangeCat(width, () => ((y + 1) % blockHeight === 0 ? blockHCell : '---+'))}`\n          );\n        }\n      }\n      lines.push(`   +${range(width, () => blockHCell).join('')}`);\n\n      const pad2 = (n: number) => n.toString().padStart(2);\n      const pad3 = (n: number) => n.toString().padStart(3);\n      const fix5 = (n: number) => {\n        const s = n.toFixed(5);\n        return s === '0.00000' && n !== 0 ? n.toString() : s;\n      };\n      const formatValue = isSintOrUintFormat(format) ? pad3 : fix5;\n      const formatTexel = (texel: PerTexelComponent<number> | undefined) =>\n        texel\n          ? Object.entries(texel)\n              .map(([k, v]) => `${k}: ${formatValue(v)}`)\n              .join(', ')\n          : '*texel values unavailable*';\n\n      const colorLines: string[] = [];\n      const compareLines: string[] = [];\n      let levelWeight = 0;\n      orderedTexelIndices.forEach((texelIdx, i) => {\n        const weights = layerEntries.get(texelIdx)!;\n        const y = Math.floor(texelIdx / texelsPerRow);\n        const x = texelIdx % texelsPerRow;\n        const singleWeight = valueIfAllComponentsAreEqual(weights, components)!;\n        levelWeight += singleWeight;\n        const w =\n          singleWeight !== undefined\n            ? `weight: ${fix5(singleWeight)}`\n            : `weights: [${components.map(c => `${c}: ${fix5(weights[c]!)}`).join(', ')}]`;\n        const coord = `${pad2(x)}, ${pad2(y)}, ${pad2(layer)}`;\n        const texel =\n          texels &&\n          convertToTexelViewFormat(\n            texels[mipLevel].color({ x, y, z: layer }),\n            texture.descriptor.format\n          );\n\n        const texelStr = formatTexel(texel);\n        const id = letter(idCount + i);\n        lines.push(`${id}: mip(${mipLevel}) at: [${coord}], ${w}`);\n        colorLines.push(`${id}: value: ${texelStr}`);\n        if (isBuiltinComparison(originalCall.builtin)) {\n          assert(!!texel);\n          const compareTexel = applyCompare(originalCall, sampler, [TexelComponent.Depth], texel);\n          compareLines.push(\n            `${id}: compare(${sampler.compare}) result with depthRef(${fix5(\n              originalCall.depthRef!\n            )}): ${fix5(compareTexel.Depth!)}`\n          );\n        }\n      });\n      lines.push(...colorLines);\n      lines.push(...compareLines);\n      if (!isNaN(levelWeight)) {\n        lines.push(`mip level (${mipLevel}) weight: ${fix5(levelWeight)}`);\n      }\n      idCount += orderedTexelIndices.length;\n    }\n  }\n\n  return lines;\n}\n\nfunction layoutTwoColumns(columnA: string[], columnB: string[]) {\n  const widthA = Math.max(...columnA.map(l => l.length));\n  const lines = Math.max(columnA.length, columnB.length);\n  const out: string[] = new Array<string>(lines);\n  for (let line = 0; line < lines; line++) {\n    const a = columnA[line] ?? '';\n    const b = columnB[line] ?? '';\n    out[line] = `${a}${' '.repeat(widthA - a.length)} | ${b}`;\n  }\n  return out;\n}\n\n/**\n * Returns the number of layers ot test for a given view dimension\n */\nexport function getDepthOrArrayLayersForViewDimension(viewDimension?: GPUTextureViewDimension) {\n  switch (viewDimension) {\n    case '1d':\n      return 1;\n    case undefined:\n    case '2d':\n      return 1;\n    case '2d-array':\n      return 4;\n    case '3d':\n      return 8;\n    case 'cube':\n      return 6;\n    default:\n      unreachable();\n  }\n}\n\n/**\n * Choose a texture size based on the given parameters.\n * The size will be in a multiple of blocks. If it's a cube\n * map the size will so be square.\n */\nexport function chooseTextureSize({\n  minSize,\n  minBlocks,\n  format,\n  viewDimension,\n}: {\n  minSize: number;\n  minBlocks: number;\n  format: GPUTextureFormat;\n  viewDimension?: GPUTextureViewDimension;\n}) {\n  const { blockWidth, blockHeight } = kTextureFormatInfo[format];\n  const width = align(Math.max(minSize, blockWidth * minBlocks), blockWidth);\n  const height =\n    viewDimension === '1d' ? 1 : align(Math.max(minSize, blockHeight * minBlocks), blockHeight);\n  if (viewDimension === 'cube' || viewDimension === 'cube-array') {\n    const blockLCM = lcm(blockWidth, blockHeight);\n    const largest = Math.max(width, height);\n    const size = align(largest, blockLCM);\n    return [size, size, viewDimension === 'cube-array' ? 24 : 6];\n  }\n  const depthOrArrayLayers = getDepthOrArrayLayersForViewDimension(viewDimension);\n  return [width, height, depthOrArrayLayers];\n}\n\nexport const kSamplePointMethods = ['texel-centre', 'spiral'] as const;\nexport type SamplePointMethods = (typeof kSamplePointMethods)[number];\n\nexport const kCubeSamplePointMethods = ['cube-edges', 'texel-centre', 'spiral'] as const;\nexport type CubeSamplePointMethods = (typeof kSamplePointMethods)[number];\n\ntype TextureBuiltinInputArgs = {\n  textureBuiltin?: TextureBuiltin;\n  descriptor: GPUTextureDescriptor;\n  sampler?: GPUSamplerDescriptor;\n  derivatives?: boolean;\n  mipLevel?: RangeDef;\n  sampleIndex?: RangeDef;\n  arrayIndex?: RangeDef;\n  grad?: boolean;\n  bias?: boolean;\n  component?: boolean;\n  depthRef?: boolean;\n  offset?: boolean;\n  hashInputs: (number | string | boolean)[];\n};\n\n/**\n * Generates an array of coordinates at which to sample a texture.\n */\nfunction generateTextureBuiltinInputsImpl<T extends Dimensionality>(\n  makeValue: (x: number, y: number, z: number) => T,\n  n: number,\n  args:\n    | (TextureBuiltinInputArgs & {\n        method: 'texel-centre';\n      })\n    | (TextureBuiltinInputArgs & {\n        method: 'spiral';\n        radius?: number;\n        loops?: number;\n      })\n): {\n  coords: T;\n  derivativeMult?: T;\n  ddx?: T;\n  ddy?: T;\n  mipLevel: number;\n  sampleIndex?: number;\n  arrayIndex?: number;\n  bias?: number;\n  offset?: T;\n  component?: number;\n  depthRef?: number;\n}[] {\n  const { method, descriptor } = args;\n  const dimension = descriptor.dimension ?? '2d';\n  const mipLevelCount = descriptor.mipLevelCount ?? 1;\n  const size = virtualMipSize(dimension, descriptor.size, 0);\n  const coords: T[] = [];\n  switch (method) {\n    case 'texel-centre': {\n      for (let i = 0; i < n; i++) {\n        const r = hashU32(i);\n        const x = Math.floor(lerp(0, size[0] - 1, (r & 0xff) / 0xff)) + 0.5;\n        const y = Math.floor(lerp(0, size[1] - 1, ((r >> 8) & 0xff) / 0xff)) + 0.5;\n        const z = Math.floor(lerp(0, size[2] - 1, ((r >> 16) & 0xff) / 0xff)) + 0.5;\n        coords.push(makeValue(x / size[0], y / size[1], z / size[2]));\n      }\n      break;\n    }\n    case 'spiral': {\n      const { radius = 1.5, loops = 2 } = args;\n      for (let i = 0; i < n; i++) {\n        const f = i / (Math.max(n, 2) - 1);\n        const r = radius * f;\n        const a = loops * 2 * Math.PI * f;\n        coords.push(makeValue(0.5 + r * Math.cos(a), 0.5 + r * Math.sin(a), 0));\n      }\n      break;\n    }\n  }\n\n  const _hashInputs = args.hashInputs.map(v =>\n    typeof v === 'string' ? sumOfCharCodesOfString(v) : typeof v === 'boolean' ? (v ? 1 : 0) : v\n  );\n\n  // returns a number between [0 and N)\n  const makeRandValue = ({ num, type }: RangeDef, ...hashInputs: number[]) => {\n    const range = num;\n    const number = (hashU32(..._hashInputs, ...hashInputs) / 0x1_0000_0000) * range;\n    return type === 'f32' ? number : Math.floor(number);\n  };\n\n  // for signed and float values returns [-1 to num]\n  // for unsigned values returns [0 to num]\n  const makeRangeValue = ({ num, type }: RangeDef, ...hashInputs: number[]) => {\n    const range = num + (type === 'u32' ? 1 : 2);\n    const number =\n      (hashU32(..._hashInputs, ...hashInputs) / 0x1_0000_0000) * range - (type === 'u32' ? 0 : 1);\n    return type === 'f32' ? number : Math.floor(number);\n  };\n\n  // Generates the same values per coord instead of using all the extra `_hashInputs`.\n  const makeIntHashValueRepeatable = (min: number, max: number, ...hashInputs: number[]) => {\n    const range = max - min;\n    return min + Math.floor((hashU32(...hashInputs) / 0x1_0000_0000) * range);\n  };\n\n  // Samplers across devices use different methods to interpolate.\n  // Quantizing the texture coordinates seems to hit coords that produce\n  // comparable results to our computed results.\n  // Note: This value works with 8x8 textures. Other sizes have not been tested.\n  // Values that worked for reference:\n  // Win 11, NVidia 2070 Super: 16\n  // Linux, AMD Radeon Pro WX 3200: 256\n  // MacOS, M1 Mac: 256\n  const kSubdivisionsPerTexel = 4;\n\n  // When filtering is nearest then we want to avoid edges of texels\n  //\n  //             U\n  //             |\n  //     +---+---+---+---+---+---+---+---+\n  //     |   | A | B |   |   |   |   |   |\n  //     +---+---+---+---+---+---+---+---+\n  //\n  // Above, coordinate U could sample either A or B\n  //\n  //               U\n  //               |\n  //     +---+---+---+---+---+---+---+---+\n  //     |   | A | B | C |   |   |   |   |\n  //     +---+---+---+---+---+---+---+---+\n  //\n  // For textureGather we want to avoid texel centers\n  // as for coordinate U could either gather A,B or B,C.\n\n  const avoidEdgeCase =\n    !args.sampler || args.sampler.minFilter === 'nearest' || isBuiltinGather(args.textureBuiltin);\n  const edgeRemainder = isBuiltinGather(args.textureBuiltin) ? kSubdivisionsPerTexel / 2 : 0;\n\n  // textureGather issues for 2d/3d textures\n  //\n  // If addressModeU is repeat, then on an 8x1 texture, u = 0.01 or u = 0.99\n  // would gather these texels\n  //\n  //     +---+---+---+---+---+---+---+---+\n  //     | * |   |   |   |   |   |   | * |\n  //     +---+---+---+---+---+---+---+---+\n  //\n  // If addressModeU is clamp-to-edge or mirror-repeat,\n  // then on an 8x1 texture, u = 0.01 would gather this texel\n  //\n  //     +---+---+---+---+---+---+---+---+\n  //     | * |   |   |   |   |   |   |   |\n  //     +---+---+---+---+---+---+---+---+\n  //\n  // and 0.99 would gather this texel\n  //\n  //     +---+---+---+---+---+---+---+---+\n  //     |   |   |   |   |   |   |   | * |\n  //     +---+---+---+---+---+---+---+---+\n  //\n  // This means we have to if addressMode is not `repeat`, we\n  // need to avoid the edge of the texture.\n  //\n  // Note: we don't have these specific issues with cube maps\n  // as they ignore addressMode\n  const euclideanModulo = (n: number, m: number) => ((n % m) + m) % m;\n  const addressMode: GPUAddressMode[] =\n    args.textureBuiltin === 'textureSampleBaseClampToEdge'\n      ? ['clamp-to-edge', 'clamp-to-edge', 'clamp-to-edge']\n      : [\n          args.sampler?.addressModeU ?? 'clamp-to-edge',\n          args.sampler?.addressModeV ?? 'clamp-to-edge',\n          args.sampler?.addressModeW ?? 'clamp-to-edge',\n        ];\n  const avoidTextureEdge = (axis: number, textureDimensionUnits: number, v: number) => {\n    assert(isBuiltinGather(args.textureBuiltin));\n    if (addressMode[axis] === 'repeat') {\n      return v;\n    }\n    const inside = euclideanModulo(v, textureDimensionUnits);\n    const outside = v - inside;\n    return outside + clamp(inside, { min: 1, max: textureDimensionUnits - 1 });\n  };\n\n  const numComponents = isDepthOrStencilTextureFormat(descriptor.format) ? 1 : 4;\n  return coords.map((c, i) => {\n    const mipLevel = args.mipLevel\n      ? quantizeMipLevel(makeRangeValue(args.mipLevel, i), args.sampler?.mipmapFilter ?? 'nearest')\n      : 0;\n    const clampedMipLevel = clamp(mipLevel, { min: 0, max: mipLevelCount - 1 });\n    const mipSize = virtualMipSize(dimension, size, clampedMipLevel);\n    const q = mipSize.map(v => v * kSubdivisionsPerTexel);\n\n    const coords = c.map((v, i) => {\n      // Quantize to kSubdivisionsPerPixel\n      const v1 = Math.floor(v * q[i]);\n      // If it's nearest or textureGather and we're on the edge of a texel then move us off the edge\n      // since the edge could choose one texel or another.\n      const isTexelEdgeCase = Math.abs(v1 % kSubdivisionsPerTexel) === edgeRemainder;\n      const v2 = isTexelEdgeCase && avoidEdgeCase ? v1 + 1 : v1;\n      const v3 = isBuiltinGather(args.textureBuiltin) ? avoidTextureEdge(i, q[i], v2) : v2;\n      // Convert back to texture coords\n      return v3 / q[i];\n    }) as T;\n\n    const makeGradient = <T>(hashInput: number): T => {\n      return coords.map((_, i) => {\n        // a value between -4 and 4 integer then add +/- 0.25\n        // We want to be able to choose levels but we want to avoid the area where the\n        // gpu might choose 2 different levels than the software renderer.\n        const intPart = makeRangeValue({ num: 8, type: 'u32' }, i, hashInput) - 4;\n        const fractPart = makeRangeValue({ num: 0, type: 'f32' }, i, hashInput + 1) * 0.25;\n        assert(fractPart >= -0.25 && fractPart <= 0.25);\n        return intPart + fractPart;\n      }) as T;\n    };\n\n    // choose a derivative value that will select a mipLevel.\n    const makeDerivativeMult = (coords: T, mipLevel: number): T => {\n      // Make an identity vec (all 1s).\n      const mult = new Array(coords.length).fill(0);\n      // choose one axis to set\n      const ndx = makeRangeValue({ num: coords.length - 1, type: 'u32' }, i, 8);\n      assert(ndx < coords.length);\n      mult[ndx] = Math.pow(2, mipLevel);\n      return mult as T;\n    };\n\n    // Choose a mip level. If mipmapFilter is 'nearest' then avoid centers of levels\n    // else avoid edges.\n    const chooseMipLevel = () => {\n      const innerLevelR = makeRandValue({ num: 9, type: 'u32' }, i, 11);\n      const innerLevel =\n        args?.sampler?.mipmapFilter === 'linear'\n          ? innerLevelR + 1\n          : innerLevelR < 5\n          ? innerLevelR\n          : innerLevelR + 1;\n      const outerLevel = makeRangeValue({ num: mipLevelCount - 1, type: 'i32' }, i, 11);\n      return outerLevel + innerLevel / 10;\n    };\n\n    // for textureSample, choose a derivative value that will select a mipLevel near\n    // the range of mip levels.\n    const makeDerivativeMultForTextureSample = (coords: T): T => {\n      const mipLevel = chooseMipLevel();\n      return makeDerivativeMult(coords, mipLevel);\n    };\n\n    // for textureSampleBias we choose a mipLevel we want to sample, then a bias between -17 and 17.\n    // and then a derivative that, given the chosen bias will arrive at the chosen mipLevel.\n    // The GPU is supposed to clamp between -16.0 and 15.99.\n    const makeBiasAndDerivativeMult = (coords: T): [number, T] => {\n      const mipLevel = chooseMipLevel();\n      const bias = makeRangeValue({ num: 34, type: 'f32' }, i, 9) - 17;\n      const clampedBias = clamp(bias, { min: -16, max: 15.99 });\n      const derivativeBasedMipLevel = mipLevel - clampedBias;\n      const derivativeMult = makeDerivativeMult(coords, derivativeBasedMipLevel);\n      return [bias, derivativeMult];\n    };\n\n    // If bias is set this is textureSampleBias. If bias is not set but derivatives\n    // is then this is one of the other functions that needs implicit derivatives.\n    const [bias, derivativeMult] = args.bias\n      ? makeBiasAndDerivativeMult(coords)\n      : args.derivatives\n      ? [undefined, makeDerivativeMultForTextureSample(coords)]\n      : [];\n\n    return {\n      coords,\n      derivativeMult,\n      mipLevel,\n      sampleIndex: args.sampleIndex ? makeRangeValue(args.sampleIndex, i, 1) : undefined,\n      arrayIndex: args.arrayIndex ? makeRangeValue(args.arrayIndex, i, 2) : undefined,\n      // use 0.0, 0.5, or 1.0 for depthRef. We can't test for equality except for values 0 and 1\n      // The texture will be filled with random values unless our comparison is 'equal' or 'not-equal'\n      // in which case the texture will be filled with only 0, 0.6, 1. Choosing 0.0, 0.5, 1.0 here\n      // means we can test 'equal' and 'not-equal'. For other comparisons, the fact that the texture's\n      // contents is random seems enough to test all the comparison modes.\n      depthRef: args.depthRef ? makeRandValue({ num: 3, type: 'u32' }, i, 5) / 2 : undefined,\n      ddx: args.grad ? makeGradient(7) : undefined,\n      ddy: args.grad ? makeGradient(8) : undefined,\n      bias,\n      offset: args.offset\n        ? (coords.map((_, j) => makeIntHashValueRepeatable(-8, 8, i, 3 + j)) as T)\n        : undefined,\n      component: args.component ? makeIntHashValueRepeatable(0, numComponents, i, 4) : undefined,\n    };\n  });\n}\n\n/**\n * When mipmapFilter === 'nearest' we need to stay away from 0.5\n * because the GPU could decide to choose one mip or the other.\n *\n * Some example transition values, the value at which the GPU chooses\n * mip level 1 over mip level 0:\n *\n * M1 Mac: 0.515381\n * Intel Mac: 0.49999\n * AMD Mac: 0.5\n */\nconst kMipEpsilon = 0.02;\nfunction quantizeMipLevel(mipLevel: number, mipmapFilter: GPUMipmapFilterMode) {\n  if (mipmapFilter === 'linear') {\n    return mipLevel;\n  }\n  const intMip = Math.floor(mipLevel);\n  const fractionalMip = mipLevel - intMip;\n  if (fractionalMip < 0.5 - kMipEpsilon || fractionalMip > 0.5 + kMipEpsilon) {\n    return mipLevel;\n  } else {\n    return intMip + 0.5 + (fractionalMip < 0.5 ? -kMipEpsilon : +kMipEpsilon);\n  }\n}\n\n// Removes the first element from an array of types\ntype FilterFirstElement<T extends unknown[]> = T extends [unknown, ...infer R] ? R : [];\n\ntype GenerateTextureBuiltinInputsImplArgs = FilterFirstElement<\n  Parameters<typeof generateTextureBuiltinInputsImpl>\n>;\n\nexport function generateTextureBuiltinInputs1D(...args: GenerateTextureBuiltinInputsImplArgs) {\n  return generateTextureBuiltinInputsImpl<vec1>((x: number) => [x], ...args);\n}\n\nexport function generateTextureBuiltinInputs2D(...args: GenerateTextureBuiltinInputsImplArgs) {\n  return generateTextureBuiltinInputsImpl<vec2>((x: number, y: number) => [x, y], ...args);\n}\n\nexport function generateTextureBuiltinInputs3D(...args: GenerateTextureBuiltinInputsImplArgs) {\n  return generateTextureBuiltinInputsImpl<vec3>(\n    (x: number, y: number, z: number) => [x, y, z],\n    ...args\n  );\n}\n\ntype mat3 =\n  /* prettier-ignore */ [\n  number, number, number,\n  number, number, number,\n  number, number, number,\n];\n\nconst kFaceUVMatrices: mat3[] =\n  /* prettier-ignore */ [\n  [ 0,  0,  -2,  0, -2,   0,  1,  1,   1],   // pos-x\n  [ 0,  0,   2,  0, -2,   0, -1,  1,  -1],   // neg-x\n  [ 2,  0,   0,  0,  0,   2, -1,  1,  -1],   // pos-y\n  [ 2,  0,   0,  0,  0,  -2, -1, -1,   1],   // neg-y\n  [ 2,  0,   0,  0, -2,   0, -1,  1,   1],   // pos-z\n  [-2,  0,   0,  0, -2,   0,  1,  1,  -1],   // neg-z\n];\n\n/** multiply a vec3 by mat3 */\nfunction transformMat3(v: vec3, m: mat3): vec3 {\n  const x = v[0];\n  const y = v[1];\n  const z = v[2];\n\n  return [\n    x * m[0] + y * m[3] + z * m[6],\n    x * m[1] + y * m[4] + z * m[7],\n    x * m[2] + y * m[5] + z * m[8],\n  ];\n}\n\n/** normalize a vec3 */\nfunction normalize(v: vec3): vec3 {\n  const length = Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);\n  assert(length > 0);\n  return v.map(v => v / length) as vec3;\n}\n\n/**\n * Converts a cube map coordinate to a uv coordinate (0 to 1) and layer (0.5/6.0 to 5.5/6.0).\n */\nfunction convertCubeCoordToNormalized3DTextureCoord(v: vec3): vec3 {\n  let uvw;\n  let layer;\n  // normalize the coord.\n  // MAINTENANCE_TODO: handle(0, 0, 0)\n  const r = normalize(v);\n  const absR = r.map(v => Math.abs(v));\n  if (absR[0] > absR[1] && absR[0] > absR[2]) {\n    // x major\n    const negX = r[0] < 0.0 ? 1 : 0;\n    uvw = [negX ? r[2] : -r[2], -r[1], absR[0]];\n    layer = negX;\n  } else if (absR[1] > absR[2]) {\n    // y major\n    const negY = r[1] < 0.0 ? 1 : 0;\n    uvw = [r[0], negY ? -r[2] : r[2], absR[1]];\n    layer = 2 + negY;\n  } else {\n    // z major\n    const negZ = r[2] < 0.0 ? 1 : 0;\n    uvw = [negZ ? -r[0] : r[0], -r[1], absR[2]];\n    layer = 4 + negZ;\n  }\n  return [(uvw[0] / uvw[2] + 1) * 0.5, (uvw[1] / uvw[2] + 1) * 0.5, (layer + 0.5) / 6];\n}\n\n/**\n * Convert a 3d texcoord into a cube map coordinate.\n */\nfunction convertNormalized3DTexCoordToCubeCoord(uvLayer: vec3) {\n  const [u, v, faceLayer] = uvLayer;\n  return normalize(transformMat3([u, v, 1], kFaceUVMatrices[Math.min(5, faceLayer * 6) | 0]));\n}\n\n/**\n * Wrap a texel based face coord across cube faces\n *\n * We have a face texture in texels coord where U/V choose a texel and W chooses the face.\n * If U/V are outside the size of the texture then, when normalized and converted\n * to a cube map coordinate, they'll end up pointing to a different face.\n *\n * addressMode is effectively ignored for cube\n *\n * By converting from a texel based coord to a normalized coord and then to a cube map coord,\n * if the texel was outside of the face, the cube map coord will end up pointing to a different\n * face. We then convert back cube coord -> normalized face coord -> texel based coord\n */\nfunction wrapFaceCoordToCubeFaceAtEdgeBoundaries(textureSize: number, faceCoord: vec3) {\n  // convert texel based face coord to normalized 2d-array coord\n  const nc0: vec3 = [\n    (faceCoord[0] + 0.5) / textureSize,\n    (faceCoord[1] + 0.5) / textureSize,\n    (faceCoord[2] + 0.5) / 6,\n  ];\n  const cc = convertNormalized3DTexCoordToCubeCoord(nc0);\n  const nc1 = convertCubeCoordToNormalized3DTextureCoord(cc);\n  // convert normalized 2d-array coord back texel based face coord\n  const fc = [\n    Math.floor(nc1[0] * textureSize),\n    Math.floor(nc1[1] * textureSize),\n    Math.floor(nc1[2] * 6),\n  ];\n\n  return fc;\n}\n\nfunction applyAddressModesToCoords(\n  addressMode: GPUAddressMode[],\n  textureSize: number[],\n  coord: number[]\n) {\n  return coord.map((v, i) => {\n    switch (addressMode[i]) {\n      case 'clamp-to-edge':\n        return clamp(v, { min: 0, max: textureSize[i] - 1 });\n      case 'mirror-repeat': {\n        const n = Math.floor(v / textureSize[i]);\n        v = v - n * textureSize[i];\n        return (n & 1) !== 0 ? textureSize[i] - v - 1 : v;\n      }\n      case 'repeat':\n        return v - Math.floor(v / textureSize[i]) * textureSize[i];\n      default:\n        unreachable();\n    }\n  });\n}\n\n/**\n * Generates an array of coordinates at which to sample a texture for a cubemap\n */\nexport function generateSamplePointsCube(\n  n: number,\n  args:\n    | (TextureBuiltinInputArgs & {\n        method: 'texel-centre';\n      })\n    | (TextureBuiltinInputArgs & {\n        method: 'spiral';\n        radius?: number;\n        loops?: number;\n      })\n    | (TextureBuiltinInputArgs & {\n        method: 'cube-edges';\n      })\n): {\n  coords: vec3;\n  derivativeMult?: vec3;\n  ddx?: vec3;\n  ddy?: vec3;\n  mipLevel: number;\n  arrayIndex?: number;\n  bias?: number;\n  offset?: undefined;\n  component?: number;\n  depthRef?: number;\n}[] {\n  const { method, descriptor } = args;\n  const mipLevelCount = descriptor.mipLevelCount ?? 1;\n  const size = virtualMipSize('2d', descriptor.size, 0);\n  const textureWidth = size[0];\n  const coords: vec3[] = [];\n  switch (method) {\n    case 'texel-centre': {\n      for (let i = 0; i < n; i++) {\n        const r = hashU32(i);\n        const u = (Math.floor(lerp(0, textureWidth - 1, (r & 0xff) / 0xff)) + 0.5) / textureWidth;\n        const v =\n          (Math.floor(lerp(0, textureWidth - 1, ((r >> 8) & 0xff) / 0xff)) + 0.5) / textureWidth;\n        const face = Math.floor(lerp(0, 6, ((r >> 16) & 0xff) / 0x100));\n        coords.push(convertNormalized3DTexCoordToCubeCoord([u, v, face]));\n      }\n      break;\n    }\n    case 'spiral': {\n      const { radius = 1.5, loops = 2 } = args;\n      for (let i = 0; i < n; i++) {\n        const f = (i + 1) / (Math.max(n, 2) - 1);\n        const r = radius * f;\n        const theta = loops * 2 * Math.PI * f;\n        const phi = loops * 1.3 * Math.PI * f;\n        const sinTheta = Math.sin(theta);\n        const cosTheta = Math.cos(theta);\n        const sinPhi = Math.sin(phi);\n        const cosPhi = Math.cos(phi);\n        const ux = cosTheta * sinPhi;\n        const uy = cosPhi;\n        const uz = sinTheta * sinPhi;\n        coords.push([ux * r, uy * r, uz * r]);\n      }\n      break;\n    }\n    case 'cube-edges': {\n      /* prettier-ignore */\n      coords.push(\n        // between edges\n        // +x\n        [  1   , -1.01,  0    ],  // wrap -y\n        [  1   , +1.01,  0    ],  // wrap +y\n        [  1   ,  0   , -1.01 ],  // wrap -z\n        [  1   ,  0   , +1.01 ],  // wrap +z\n        // -x\n        [ -1   , -1.01,  0    ],  // wrap -y\n        [ -1   , +1.01,  0    ],  // wrap +y\n        [ -1   ,  0   , -1.01 ],  // wrap -z\n        [ -1   ,  0   , +1.01 ],  // wrap +z\n\n        // +y\n        [ -1.01,  1   ,  0    ],  // wrap -x\n        [ +1.01,  1   ,  0    ],  // wrap +x\n        [  0   ,  1   , -1.01 ],  // wrap -z\n        [  0   ,  1   , +1.01 ],  // wrap +z\n        // -y\n        [ -1.01, -1   ,  0    ],  // wrap -x\n        [ +1.01, -1   ,  0    ],  // wrap +x\n        [  0   , -1   , -1.01 ],  // wrap -z\n        [  0   , -1   , +1.01 ],  // wrap +z\n\n        // +z\n        [ -1.01,  0   ,  1    ],  // wrap -x\n        [ +1.01,  0   ,  1    ],  // wrap +x\n        [  0   , -1.01,  1    ],  // wrap -y\n        [  0   , +1.01,  1    ],  // wrap +y\n        // -z\n        [ -1.01,  0   , -1    ],  // wrap -x\n        [ +1.01,  0   , -1    ],  // wrap +x\n        [  0   , -1.01, -1    ],  // wrap -y\n        [  0   , +1.01, -1    ],  // wrap +y\n\n        // corners (see comment \"Issues with corners of cubemaps\")\n        // for why these are commented out.\n        // [-1.01, -1.02, -1.03],\n        // [ 1.01, -1.02, -1.03],\n        // [-1.01,  1.02, -1.03],\n        // [ 1.01,  1.02, -1.03],\n        // [-1.01, -1.02,  1.03],\n        // [ 1.01, -1.02,  1.03],\n        // [-1.01,  1.02,  1.03],\n        // [ 1.01,  1.02,  1.03],\n      );\n      break;\n    }\n  }\n\n  const _hashInputs = args.hashInputs.map(v =>\n    typeof v === 'string' ? sumOfCharCodesOfString(v) : typeof v === 'boolean' ? (v ? 1 : 0) : v\n  );\n\n  // returns a number between [0 and N)\n  const makeRandValue = ({ num, type }: RangeDef, ...hashInputs: number[]) => {\n    const range = num;\n    const number = (hashU32(..._hashInputs, ...hashInputs) / 0x1_0000_0000) * range;\n    return type === 'f32' ? number : Math.floor(number);\n  };\n\n  // for signed and float values returns [-1 to num]\n  // for unsigned values returns [0 to num]\n  const makeRangeValue = ({ num, type }: RangeDef, ...hashInputs: number[]) => {\n    const range = num + (type === 'u32' ? 1 : 2);\n    const number =\n      (hashU32(..._hashInputs, ...hashInputs) / 0x1_0000_0000) * range - (type === 'u32' ? 0 : 1);\n    return type === 'f32' ? number : Math.floor(number);\n  };\n\n  const makeIntHashValue = (min: number, max: number, ...hashInputs: number[]) => {\n    const range = max - min;\n    return min + Math.floor((hashU32(..._hashInputs, ...hashInputs) / 0x1_0000_0000) * range);\n  };\n\n  // Samplers across devices use different methods to interpolate.\n  // Quantizing the texture coordinates seems to hit coords that produce\n  // comparable results to our computed results.\n  // Note: This value works with 8x8 textures. Other sizes have not been tested.\n  // Values that worked for reference:\n  // Win 11, NVidia 2070 Super: 16\n  // Linux, AMD Radeon Pro WX 3200: 256\n  // MacOS, M1 Mac: 256\n  //\n  // Note: When doing `textureGather...` we can't use texel centers\n  // because which 4 pixels will be gathered jumps if we're slightly under\n  // or slightly over the center\n  //\n  // Similarly, if we're using 'nearest' filtering then we don't want texel\n  // edges for the same reason.\n  //\n  // Also note that for textureGather. The way it works for cube maps is to\n  // first convert from cube map coordinate to a 2D texture coordinate and\n  // a face. Then, choose 4 texels just like normal 2D texture coordinates.\n  // If one of the 4 texels is outside the current face, wrap it to the correct\n  // face.\n  //\n  // An issue this brings up though. Imagine a 2D texture with addressMode = 'repeat'\n  //\n  //       2d texture   (same texture repeated to show 'repeat')\n  //     ┌───┬───┬───┐     ┌───┬───┬───┐\n  //     │   │   │   │     │   │   │   │\n  //     ├───┼───┼───┤     ├───┼───┼───┤\n  //     │   │   │  a│     │c  │   │   │\n  //     ├───┼───┼───┤     ├───┼───┼───┤\n  //     │   │   │  b│     │d  │   │   │\n  //     └───┴───┴───┘     └───┴───┴───┘\n  //\n  // Assume the texture coordinate is at the bottom right corner of a.\n  // Then textureGather will grab c, d, b, a (no idea why that order).\n  // but think of it as top-right, bottom-right, bottom-left, top-left.\n  // Similarly, if the texture coordinate is at the top left of d it\n  // will select the same 4 texels.\n  //\n  // But, in the case of a cubemap, each face is in different direction\n  // relative to the face next to it.\n  //\n  //             +-----------+\n  //             |0->u       |\n  //             |↓          |\n  //             |v   +y     |\n  //             |    (2)    |\n  //             |           |\n  // +-----------+-----------+-----------+-----------+\n  // |0->u       |0->u       |0->u       |0->u       |\n  // |↓          |↓          |↓          |↓          |\n  // |v   -x     |v   +z     |v   +x     |v   -z     |\n  // |    (1)    |    (4)    |    (0)    |    (5)    |\n  // |           |           |           |           |\n  // +-----------+-----------+-----------+-----------+\n  //             |0->u       |\n  //             |↓          |\n  //             |v   -y     |\n  //             |    (3)    |\n  //             |           |\n  //             +-----------+\n  //\n  // As an example, imagine going from the +y to the +x face.\n  // See diagram above, the right edge of the +y face wraps\n  // to the top edge of the +x face.\n  //\n  //                             +---+---+\n  //                             |  a|c  |\n  //     ┌───┬───┬───┐           ┌───┬───┬───┐\n  //     │   │   │   │           │  b│d  │   │\n  //     ├───┼───┼───┤---+       ├───┼───┼───┤\n  //     │   │   │  a│ c |       │   │   │   │\n  //     ├───┼───┼───┤---+       ├───┼───┼───┤\n  //     │   │   │  b│ d |       │   │   │   │\n  //     └───┴───┴───┘---+       └───┴───┴───┘\n  //        +y face                 +x face\n  //\n  // If the texture coordinate is in the bottom right corner of a,\n  // the rectangle of texels we read are a,b,c,d and, if we the\n  // texture coordinate is in the top left corner of d we also\n  // read a,b,c,d according to the 2 diagrams above.\n  //\n  // But, notice that when reading from the POV of +y vs +x,\n  // which actual a,b,c,d texels are different.\n  //\n  // From the POV of face +x: a,b are in face +x and c,d are in face +y\n  // From the POV of face +y: a,c are in face +x and b,d are in face +y\n  //\n  // This is all the long way of saying that if we're on the edge of a cube\n  // face we could get drastically different results because the orientation\n  // of the rectangle of the 4 texels we use, rotates. So, we need to avoid\n  // any values too close to the edge just in case our math is different than\n  // the GPU's.\n  //\n  const kSubdivisionsPerTexel = 4;\n  const avoidEdgeCase =\n    !args.sampler || args.sampler.minFilter === 'nearest' || isBuiltinGather(args.textureBuiltin);\n  const edgeRemainder = isBuiltinGather(args.textureBuiltin) ? kSubdivisionsPerTexel / 2 : 0;\n  return coords.map((c, i) => {\n    const mipLevel = args.mipLevel\n      ? quantizeMipLevel(makeRangeValue(args.mipLevel, i), args.sampler?.mipmapFilter ?? 'nearest')\n      : 0;\n    const clampedMipLevel = clamp(mipLevel, { min: 0, max: mipLevelCount - 1 });\n    const mipSize = virtualMipSize('2d', size, Math.ceil(clampedMipLevel));\n    const q = [\n      mipSize[0] * kSubdivisionsPerTexel,\n      mipSize[0] * kSubdivisionsPerTexel,\n      6 * kSubdivisionsPerTexel,\n    ];\n\n    const uvw = convertCubeCoordToNormalized3DTextureCoord(c);\n\n    // If this is a corner, move to in so it's not\n    // (see comment \"Issues with corners of cubemaps\")\n    const ndx = getUnusedCubeCornerSampleIndex(mipSize[0], uvw);\n    if (ndx >= 0) {\n      const halfTexel = 0.5 / mipSize[0];\n      uvw[0] = clamp(uvw[0], { min: halfTexel, max: 1 - halfTexel });\n    }\n\n    const quantizedUVW = uvw.map((v, i) => {\n      // Quantize to kSubdivisionsPerPixel\n      const v1 = Math.floor(v * q[i]);\n      // If it's nearest or textureGather and we're on the edge of a texel then move us off the edge\n      // since the edge could choose one texel or another.\n      const isEdgeCase = Math.abs(v1 % kSubdivisionsPerTexel) === edgeRemainder;\n      const v2 = isEdgeCase && avoidEdgeCase ? v1 + 1 : v1;\n      // Convert back to texture coords slightly off\n      return (v2 + 1 / 16) / q[i];\n    }) as vec3;\n\n    const quantize = (v: number, units: number) => Math.floor(v * units) * units;\n\n    const makeGradient = <T>(hashInput: number): T => {\n      return coords.map((_, i) =>\n        // a value between -4 and 4, quantized to 1/3rd.\n        quantize(makeRangeValue({ num: 8, type: 'f32' }, i, hashInput) - 4, 1 / 3)\n      ) as T;\n    };\n\n    const coords = convertNormalized3DTexCoordToCubeCoord(quantizedUVW);\n\n    // choose a derivative value that will select a mipLevel.\n    const makeDerivativeMult = (coords: vec3, mipLevel: number): vec3 => {\n      // Make an identity vec (all 1s).\n      const mult = new Array(coords.length).fill(0);\n      // choose one axis to set\n      const ndx = makeRangeValue({ num: coords.length - 1, type: 'u32' }, i, 8);\n      assert(ndx < coords.length);\n      mult[ndx] = Math.pow(2, mipLevel);\n      return mult as vec3;\n    };\n\n    // Choose a mip level. If mipmapFilter is 'nearest' then avoid centers of levels\n    // else avoid edges.\n    const chooseMipLevel = () => {\n      const innerLevelR = makeRandValue({ num: 9, type: 'u32' }, i, 11);\n      const innerLevel =\n        args?.sampler?.mipmapFilter === 'linear'\n          ? innerLevelR + 1\n          : innerLevelR < 4\n          ? innerLevelR\n          : innerLevelR + 1;\n      const outerLevel = makeRangeValue({ num: mipLevelCount - 1, type: 'i32' }, i, 11);\n      return outerLevel + innerLevel / 10;\n    };\n\n    // for textureSample, choose a derivative value that will select a mipLevel near\n    // the range of mip levels.\n    const makeDerivativeMultForTextureSample = (coords: vec3): vec3 => {\n      const mipLevel = chooseMipLevel();\n      return makeDerivativeMult(coords, mipLevel);\n    };\n\n    // for textureSampleBias we choose a mipLevel we want to sample, then a bias between -17 and 17.\n    // and then a derivative that, given the chosen bias will arrive at the chosen mipLevel.\n    // The GPU is supposed to clamp between -16.0 and 15.99.\n    const makeBiasAndDerivativeMult = (coords: vec3): [number, vec3] => {\n      const mipLevel = chooseMipLevel();\n      const bias = makeRangeValue({ num: 34, type: 'f32' }, i, 9) - 17;\n      const clampedBias = clamp(bias, { min: -16, max: 15.99 });\n      const derivativeBasedMipLevel = mipLevel - clampedBias;\n      const derivativeMult = makeDerivativeMult(coords, derivativeBasedMipLevel);\n      return [bias, derivativeMult];\n    };\n\n    // If bias is set this is textureSampleBias. If bias is not set but derivatives\n    // is then this is one of the other functions that needs implicit derivatives.\n    const [bias, derivativeMult] = args.bias\n      ? makeBiasAndDerivativeMult(coords)\n      : args.derivatives\n      ? [undefined, makeDerivativeMultForTextureSample(coords)]\n      : [];\n\n    return {\n      coords,\n      derivativeMult,\n      ddx: args.grad ? makeGradient(7) : undefined,\n      ddy: args.grad ? makeGradient(8) : undefined,\n      mipLevel,\n      arrayIndex: args.arrayIndex ? makeRangeValue(args.arrayIndex, i, 2) : undefined,\n      bias,\n      // use 0.0, 0.5, or 1.0 for depthRef. We can't test for equality except for values 0 and 1\n      // The texture will be filled with random values unless our comparison is 'equal' or 'not-equal'\n      // in which case the texture will be filled with only 0, 0.6, 1. Choosing 0.0, 0.5, 1.0 here\n      // means we can test 'equal' and 'not-equal'. For other comparisons, the fact that the texture's\n      // contents is random seems enough to test all the comparison modes.\n      depthRef: args.depthRef ? makeRandValue({ num: 3, type: 'u32' }, i, 5) / 2 : undefined,\n      component: args.component ? makeIntHashValue(0, 4, i, 4) : undefined,\n    };\n  });\n}\n\nfunction wgslTypeFor(data: number | Dimensionality, type: 'f' | 'i' | 'u'): string {\n  if (Array.isArray(data)) {\n    switch (data.length) {\n      case 1:\n        return `${type}32`;\n      case 2:\n        return `vec2${type}`;\n      case 3:\n        return `vec3${type}`;\n      default:\n        unreachable();\n    }\n  }\n  return `${type}32`;\n}\n\nfunction wgslExpr(\n  data: number | Readonly<vec1> | Readonly<vec2> | Readonly<vec3> | Readonly<vec4>\n): string {\n  if (Array.isArray(data)) {\n    switch (data.length) {\n      case 1:\n        return data[0].toString();\n      case 2:\n        return `vec2(${data.map(v => v.toString()).join(', ')})`;\n      case 3:\n        return `vec3(${data.map(v => v.toString()).join(', ')})`;\n      default:\n        unreachable();\n    }\n  }\n  return data.toString();\n}\n\nfunction wgslExprFor(data: number | vec1 | vec2 | vec3 | vec4, type: 'f' | 'i' | 'u'): string {\n  if (Array.isArray(data)) {\n    switch (data.length) {\n      case 1:\n        return `${type}(${data[0].toString()})`;\n      case 2:\n        return `vec2${type}(${data.map(v => v.toString()).join(', ')})`;\n      case 3:\n        return `vec3${type}(${data.map(v => v.toString()).join(', ')})`;\n      default:\n        unreachable();\n    }\n  }\n  return `${type}32(${data.toString()})`;\n}\n\nfunction binKey<T extends Dimensionality>(call: TextureCall<T>): string {\n  const keys: string[] = [];\n  for (const name of kTextureCallArgNames) {\n    const value = call[name];\n    if (value !== undefined) {\n      if (name === 'offset' || name === 'component') {\n        // offset and component must be constant expressions\n        keys.push(`${name}: ${wgslExpr(value)}`);\n      } else {\n        keys.push(`${name}: ${wgslTypeFor(value, call.coordType)}`);\n      }\n    }\n  }\n  return `${call.builtin}(${keys.join(', ')})`;\n}\n\nfunction buildBinnedCalls<T extends Dimensionality>(calls: TextureCall<T>[]) {\n  const args: string[] = [];\n  const fields: string[] = [];\n  const data: number[] = [];\n  const prototype = calls[0];\n\n  if (isBuiltinGather(prototype.builtin) && prototype['componentType']) {\n    args.push(`/* component */ ${wgslExpr(prototype['component']!)}`);\n  }\n\n  // All texture builtins take a Texture\n  args.push('T');\n\n  if (builtinNeedsSampler(prototype.builtin)) {\n    // textureSample*() builtins take a sampler as the second argument\n    args.push('S');\n  }\n\n  for (const name of kTextureCallArgNames) {\n    const value = prototype[name];\n    if (value !== undefined) {\n      if (name === 'offset') {\n        args.push(`/* offset */ ${wgslExpr(value)}`);\n      } else if (name === 'component') {\n        // was handled above\n      } else {\n        const type =\n          name === 'mipLevel'\n            ? prototype.levelType!\n            : name === 'arrayIndex'\n            ? prototype.arrayIndexType!\n            : name === 'sampleIndex'\n            ? prototype.sampleIndexType!\n            : name === 'bias' || name === 'depthRef' || name === 'ddx' || name === 'ddy'\n            ? 'f'\n            : prototype.coordType;\n        if (name !== 'derivativeMult') {\n          args.push(\n            `args.${name}${\n              name === 'coords' && builtinNeedsDerivatives(prototype.builtin)\n                ? ' + derivativeBase * args.derivativeMult'\n                : ''\n            }`\n          );\n        }\n        fields.push(`@align(16) ${name} : ${wgslTypeFor(value, type)}`);\n      }\n    }\n  }\n\n  for (const call of calls) {\n    for (const name of kTextureCallArgNames) {\n      const value = call[name];\n      assert(\n        (prototype[name] === undefined) === (value === undefined),\n        'texture calls are not binned correctly'\n      );\n      if (value !== undefined && name !== 'offset' && name !== 'component') {\n        const type = getCallArgType<T>(call, name);\n        const bitcastToU32 = kBitCastFunctions[type];\n        if (value instanceof Array) {\n          for (const c of value) {\n            data.push(bitcastToU32(c));\n          }\n        } else {\n          data.push(bitcastToU32(value));\n        }\n        // All fields are aligned to 16 bytes.\n        while ((data.length & 3) !== 0) {\n          data.push(0);\n        }\n      }\n    }\n  }\n\n  const expr = `${prototype.builtin}(${args.join(', ')})`;\n\n  return { expr, fields, data };\n}\n\nfunction binCalls<T extends Dimensionality>(calls: TextureCall<T>[]): number[][] {\n  const map = new Map<string, number>(); // key to bin index\n  const bins: number[][] = [];\n  calls.forEach((call, callIdx) => {\n    const key = binKey(call);\n    const binIdx = map.get(key);\n    if (binIdx === undefined) {\n      map.set(key, bins.length);\n      bins.push([callIdx]);\n    } else {\n      bins[binIdx].push(callIdx);\n    }\n  });\n  return bins;\n}\n\nfunction describeTextureCall<T extends Dimensionality>(call: TextureCall<T>): string {\n  const args: string[] = [];\n  if (isBuiltinGather(call.builtin) && call.componentType) {\n    args.push(`component: ${wgslExprFor(call.component!, call.componentType)}`);\n  }\n  args.push('texture: T');\n  if (builtinNeedsSampler(call.builtin)) {\n    args.push('sampler: S');\n  }\n  for (const name of kTextureCallArgNames) {\n    const value = call[name];\n    if (value !== undefined && name !== 'component') {\n      if (name === 'coords') {\n        const derivativeWGSL = builtinNeedsDerivatives(call.builtin)\n          ? ` + derivativeBase * derivativeMult(${\n              call.derivativeMult ? wgslExprFor(call.derivativeMult, call.coordType) : '1'\n            })`\n          : '';\n        args.push(`${name}: ${wgslExprFor(value, call.coordType)}${derivativeWGSL}`);\n      } else if (name === 'derivativeMult') {\n        // skip this - it's covered in 'coords'\n      } else if (name === 'ddx' || name === 'ddy') {\n        args.push(`${name}: ${wgslExprFor(value, call.coordType)}`);\n      } else if (name === 'mipLevel') {\n        args.push(`${name}: ${wgslExprFor(value, call.levelType!)}`);\n      } else if (name === 'arrayIndex') {\n        args.push(`${name}: ${wgslExprFor(value, call.arrayIndexType!)}`);\n      } else if (name === 'bias') {\n        args.push(`${name}: ${wgslExprFor(value, 'f')}`);\n      } else if (name === 'sampleIndex') {\n        args.push(`${name}: ${wgslExprFor(value, call.sampleIndexType!)}`);\n      } else if (name === 'depthRef') {\n        args.push(`${name}: ${wgslExprFor(value, 'f')}`);\n      } else {\n        args.push(`${name}: ${wgslExpr(value)}`);\n      }\n    }\n  }\n  return `${call.builtin}(${args.join(', ')})`;\n}\n\nconst getAspectForTexture = (texture: GPUTexture | GPUExternalTexture): GPUTextureAspect =>\n  texture instanceof GPUExternalTexture\n    ? 'all'\n    : isDepthTextureFormat(texture.format)\n    ? 'depth-only'\n    : isStencilTextureFormat(texture.format)\n    ? 'stencil-only'\n    : 'all';\n\nconst s_deviceToPipelines = new WeakMap<\n  GPUDevice,\n  Map<string, GPURenderPipeline | GPUComputePipeline>\n>();\n\n/**\n * Given a list of \"calls\", each one of which has a texture coordinate,\n * generates a fragment shader that uses the instance_index as an index. That\n * index is then used to look up a coordinate from a storage buffer which is\n * used to call the WGSL texture function to read/sample the texture, and then\n * write to a storage buffer. We then read the storage buffer for the per \"call\"\n * results.\n *\n * We use a 1x1 target and use instance drawing, once instance per call.\n * This allows use to more easily adjust derivatives per call.\n *\n * An issue we ran into before this \"one draw call per instance\" change;\n * Before we had a single draw call and wrote the result of one call per\n * pixel rendered.\n *\n * Imagine we have code like this:\n *\n * ```\n * @group(0) @binding(0) var T: texture_2d<f32>;\n * @group(0) @binding(1) var S: sampler;\n * @group(0) @binding(2) var<storage> coords: array<vec4f>;\n * @fragment fn fs(@builtin(position) pos: vec4f) -> vec4f {\n *   let ndx = u32(pos.x) * u32(pos.y) * targetWidth;\n *   return textureSample(T, S, coords[ndx].xy);\n * }\n * ```\n *\n * T points to 8x8 pixel texture with 3 mip levels\n * S is 'nearest'\n * coords: is a storage buffer, 16 bytes long [0,0,0,0], one vec4f.\n * our render target is 1x1 pixels\n *\n * Looking above it appears `ndx` will only ever be 0 but that's\n * not what happens. Instead, the GPU will run the fragment shader for\n * a 2x2 area. It does this to compute derivatives by running the code\n * above and looking at what values it gets passed as coords to\n * textureSample. When it does this it ends up with\n *\n * ndx = 0 for invocation 0\n * ndx = 1 for invocation 1\n * ndx = 0 + 1 * targetWidth for invocation 2\n * ndx = 1 + 1 * targetWidth for invocation 3\n *\n * In 3 of those cases `ndx` is out of bounds with respect to `coords`.\n * Out of bounds access is indeterminate. That means the derivatives are\n * indeterminate so what lod it tries to read is indeterminate.\n *\n * By using instance_index for ndx we avoid this issue. ndx is the same\n * on all 4 executions.\n *\n * Calls are \"binned\" by call parameters. Each bin has its own structure and\n * field in the storage buffer. This allows the calls to be non-homogenous and\n * each have their own data type for coordinates.\n *\n * Note: this function returns:\n *\n * 'results': an array of results, one for each call.\n *\n * 'run': a function that accepts a texture and runs the same class pipeline with\n *        that texture as input, returning an array of results. This can be used by\n *        identifySamplePoints to query the mix-weights used. We do this so we're\n *        using the same shader that generated the original results when querying\n *        the weights.\n *\n * 'destroy': a function that cleans up the buffers used by `run`.\n */\nfunction createTextureCallsRunner<T extends Dimensionality>(\n  t: GPUTest,\n  {\n    format,\n    dimension,\n    sampleCount,\n    depthOrArrayLayers,\n  }: {\n    format: GPUTextureFormat;\n    dimension: GPUTextureDimension;\n    sampleCount: number;\n    depthOrArrayLayers: number;\n  },\n  viewDescriptor: GPUTextureViewDescriptor,\n  textureType: string,\n  sampler: GPUSamplerDescriptor | undefined,\n  calls: TextureCall<T>[],\n  stage: ShaderStage\n) {\n  let structs = '';\n  let body = '';\n  let dataFields = '';\n  const data: number[] = [];\n  let callCount = 0;\n  const binned = binCalls(calls);\n  binned.forEach((binCalls, binIdx) => {\n    const b = buildBinnedCalls(binCalls.map(callIdx => calls[callIdx]));\n    structs += `struct Args${binIdx} {\n  ${b.fields.join(',\\n  ')}\n}\n`;\n    dataFields += `  args${binIdx} : array<Args${binIdx}, ${binCalls.length}>,\n`;\n    body += `\n  {\n    let is_active = (idx >= ${callCount}) & (idx < ${callCount + binCalls.length});\n    let args = data.args${binIdx}[idx - ${callCount}];\n    let call = ${b.expr};\n    result = select(result, call, is_active);\n  }\n`;\n    callCount += binCalls.length;\n    data.push(...b.data);\n  });\n\n  const dataBuffer = t.createBufferTracked({\n    size: data.length * 4,\n    usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM,\n  });\n  t.device.queue.writeBuffer(dataBuffer, 0, new Uint32Array(data));\n\n  const builtin = calls[0].builtin;\n  const isCompare = isBuiltinComparison(builtin);\n\n  const { resultType, resultFormat, componentType } = isBuiltinGather(builtin)\n    ? getTextureFormatTypeInfo(format)\n    : textureType === 'texture_external'\n    ? ({ resultType: 'vec4f', resultFormat: 'rgba32float', componentType: 'f32' } as const)\n    : textureType.includes('depth')\n    ? ({ resultType: 'f32', resultFormat: 'rgba32float', componentType: 'f32' } as const)\n    : getTextureFormatTypeInfo(format);\n  const returnType = `vec4<${componentType}>`;\n\n  const samplerType = isCompare ? 'sampler_comparison' : 'sampler';\n\n  const renderTarget = t.createTextureTracked({\n    format: 'rgba32uint',\n    size: [calls.length, 1],\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n  });\n\n  // derivativeBase is a number that starts at (0, 0, 0) and advances by 1 in x, y\n  // for each fragment shader iteration in texel space. It is then converted to normalized\n  // texture space by dividing by the textureDimensions.\n  // Since it's moving by 1 texel unit we can multiply it to get any specific lod value we want.\n  // Because it starts at (0, 0, 0) it will not affect our texture coordinate.\n  const derivativeBaseWGSL = `\n  let derivativeBase = ${\n    isCubeViewDimension(viewDescriptor)\n      ? '(v.pos.xyx - 0.5 - vec3f(f32(v.ndx), 0, f32(v.ndx))) / vec3f(vec2f(textureDimensions(T)), 1.0)'\n      : dimension === '1d'\n      ? 'f32(v.pos.x - 0.5 - f32(v.ndx)) / f32(textureDimensions(T))'\n      : dimension === '3d'\n      ? 'vec3f(v.pos.xy - 0.5 - vec2f(f32(v.ndx), 0), 0) / vec3f(textureDimensions(T))'\n      : '(v.pos.xy - 0.5 - vec2f(f32(v.ndx), 0)) / vec2f(textureDimensions(T))'\n  };`;\n  const derivativeType =\n    isCubeViewDimension(viewDescriptor) || dimension === '3d'\n      ? 'vec3f'\n      : dimension === '1d'\n      ? 'f32'\n      : 'vec2f';\n\n  const stageWGSL =\n    stage === 'vertex'\n      ? `\n// --------------------------- vertex stage shaders --------------------------------\n@vertex fn vsVertex(\n    @builtin(vertex_index) vertex_index : u32,\n    @builtin(instance_index) instance_index : u32) -> VOut {\n  let positions = array(vec2f(-1, 3), vec2f(3, -1), vec2f(-1, -1));\n  return VOut(vec4f(positions[vertex_index], 0, 1),\n              instance_index,\n              getResult(instance_index, ${derivativeType}(0)));\n}\n\n@fragment fn fsVertex(v: VOut) -> @location(0) vec4u {\n  return bitcast<vec4u>(v.result);\n}\n`\n      : stage === 'fragment'\n      ? `\n// --------------------------- fragment stage shaders --------------------------------\n@vertex fn vsFragment(\n    @builtin(vertex_index) vertex_index : u32,\n    @builtin(instance_index) instance_index : u32) -> VOut {\n  let positions = array(vec2f(-1, 3), vec2f(3, -1), vec2f(-1, -1));\n  return VOut(vec4f(positions[vertex_index], 0, 1), instance_index, ${returnType}(0));\n}\n\n@fragment fn fsFragment(v: VOut) -> @location(0) vec4u {\n  ${derivativeBaseWGSL}\n  return bitcast<vec4u>(getResult(v.ndx, derivativeBase));\n}\n`\n      : `\n// --------------------------- compute stage shaders --------------------------------\n@group(1) @binding(0) var<storage, read_write> results: array<${returnType}>;\n\n@compute @workgroup_size(1) fn csCompute(@builtin(global_invocation_id) id: vec3u) {\n  results[id.x] = getResult(id.x, ${derivativeType}(0));\n}\n`;\n\n  const code = `\n${structs}\n\nstruct Data {\n${dataFields}\n}\n\nstruct VOut {\n  @builtin(position) pos: vec4f,\n  @location(0) @interpolate(flat, either) ndx: u32,\n  @location(1) @interpolate(flat, either) result: ${returnType},\n};\n\n@group(0) @binding(0) var          T    : ${textureType};\n${sampler ? `@group(0) @binding(1) var          S    : ${samplerType}` : ''};\n@group(0) @binding(2) var<uniform> data : Data;\n\nfn getResult(idx: u32, derivativeBase: ${derivativeType}) -> ${returnType} {\n  var result : ${resultType};\n${body}\n  return ${returnType}(result);\n}\n\n${stageWGSL}\n`;\n\n  const pipelines =\n    s_deviceToPipelines.get(t.device) ?? new Map<string, GPURenderPipeline | GPUComputePipeline>();\n  s_deviceToPipelines.set(t.device, pipelines);\n\n  // unfilterable-float textures can only be used with manually created bindGroupLayouts\n  // since the default 'auto' layout requires filterable textures/samplers.\n  // So, if we don't need filtering, don't request a filtering sampler. If we require\n  // filtering then check if the format is 32float format and if float32-filterable\n  // is enabled.\n  const info = kTextureFormatInfo[format ?? 'rgba8unorm'];\n  const isFiltering =\n    !!sampler &&\n    (sampler.minFilter === 'linear' ||\n      sampler.magFilter === 'linear' ||\n      sampler.mipmapFilter === 'linear');\n  let sampleType: GPUTextureSampleType = textureType.startsWith('texture_depth')\n    ? 'depth'\n    : isDepthTextureFormat(format)\n    ? 'unfilterable-float'\n    : isStencilTextureFormat(format)\n    ? 'uint'\n    : info.color?.type ?? 'float';\n  if (isFiltering && sampleType === 'unfilterable-float') {\n    assert(is32Float(format));\n    assert(t.device.features.has('float32-filterable'));\n    sampleType = 'float';\n  }\n  if (sampleCount > 1 && sampleType === 'float') {\n    sampleType = 'unfilterable-float';\n  }\n\n  const visibility =\n    stage === 'compute'\n      ? GPUShaderStage.COMPUTE\n      : stage === 'fragment'\n      ? GPUShaderStage.FRAGMENT\n      : GPUShaderStage.VERTEX;\n\n  const entries: GPUBindGroupLayoutEntry[] = [\n    {\n      binding: 2,\n      visibility,\n      buffer: {\n        type: 'uniform',\n      },\n    },\n  ];\n\n  const viewDimension = effectiveViewDimensionForDimension(\n    viewDescriptor.dimension,\n    dimension,\n    depthOrArrayLayers\n  );\n\n  if (textureType.includes('storage')) {\n    entries.push({\n      binding: 0,\n      visibility,\n      storageTexture: {\n        access: 'read-only',\n        viewDimension,\n        format,\n      },\n    });\n  } else if (textureType === 'texture_external') {\n    entries.push({\n      binding: 0,\n      visibility,\n      externalTexture: {},\n    });\n  } else {\n    entries.push({\n      binding: 0,\n      visibility,\n      texture: {\n        sampleType,\n        viewDimension,\n        multisampled: sampleCount > 1,\n      },\n    });\n  }\n\n  if (sampler) {\n    const type = isCompare ? 'comparison' : isFiltering ? 'filtering' : 'non-filtering';\n    entries.push({\n      binding: 1,\n      visibility,\n      sampler: { type },\n    });\n  }\n\n  const id = `${resultType}:${stage}:${JSON.stringify(entries)}:${code}`;\n  let pipeline = pipelines.get(id);\n  if (!pipeline) {\n    const module = t.device.createShaderModule({ code });\n    const bindGroupLayout0 = t.device.createBindGroupLayout({ entries });\n    const bindGroupLayouts = [bindGroupLayout0];\n\n    if (stage === 'compute') {\n      const bindGroupLayout1 = t.device.createBindGroupLayout({\n        entries: [\n          {\n            binding: 0,\n            visibility: GPUShaderStage.FRAGMENT | GPUShaderStage.COMPUTE,\n            buffer: {\n              type: 'storage',\n            },\n          },\n        ],\n      });\n      bindGroupLayouts.push(bindGroupLayout1);\n    }\n\n    const layout = t.device.createPipelineLayout({\n      bindGroupLayouts,\n    });\n\n    switch (stage) {\n      case 'compute':\n        pipeline = t.device.createComputePipeline({\n          layout,\n          compute: { module },\n        });\n        break;\n      case 'fragment':\n      case 'vertex':\n        pipeline = t.device.createRenderPipeline({\n          layout,\n          vertex: { module },\n          fragment: {\n            module,\n            targets: [{ format: 'rgba32uint' }],\n          },\n        });\n        break;\n    }\n    pipelines.set(id, pipeline);\n  }\n\n  const gpuSampler = sampler ? t.device.createSampler(sampler) : undefined;\n\n  const run = async (gpuTexture: GPUTexture | GPUExternalTexture) => {\n    const resultBuffer = t.createBufferTracked({\n      size: align(calls.length * 16, 256),\n      usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ,\n    });\n\n    const aspect = getAspectForTexture(gpuTexture);\n    const runViewDescriptor = {\n      ...viewDescriptor,\n      aspect,\n    };\n\n    const bindGroup0 = t.device.createBindGroup({\n      layout: pipeline!.getBindGroupLayout(0),\n      entries: [\n        {\n          binding: 0,\n          resource:\n            gpuTexture instanceof GPUExternalTexture\n              ? gpuTexture\n              : gpuTexture.createView(runViewDescriptor),\n        },\n        ...(sampler ? [{ binding: 1, resource: gpuSampler! }] : []),\n        { binding: 2, resource: { buffer: dataBuffer } },\n      ],\n    });\n\n    let storageBuffer: GPUBuffer | undefined;\n    const encoder = t.device.createCommandEncoder();\n\n    if (stage === 'compute') {\n      storageBuffer = t.createBufferTracked({\n        size: resultBuffer.size,\n        usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n      });\n\n      const bindGroup1 = t.device.createBindGroup({\n        layout: pipeline!.getBindGroupLayout(1),\n        entries: [{ binding: 0, resource: { buffer: storageBuffer } }],\n      });\n\n      const pass = encoder.beginComputePass();\n      pass.setPipeline(pipeline! as GPUComputePipeline);\n      pass.setBindGroup(0, bindGroup0);\n      pass.setBindGroup(1, bindGroup1);\n      pass.dispatchWorkgroups(calls.length);\n      pass.end();\n      encoder.copyBufferToBuffer(storageBuffer, 0, resultBuffer, 0, storageBuffer.size);\n    } else {\n      const pass = encoder.beginRenderPass({\n        colorAttachments: [\n          {\n            view: renderTarget.createView(),\n            loadOp: 'clear',\n            storeOp: 'store',\n          },\n        ],\n      });\n\n      pass.setPipeline(pipeline! as GPURenderPipeline);\n      pass.setBindGroup(0, bindGroup0);\n      for (let i = 0; i < calls.length; ++i) {\n        pass.setViewport(i, 0, 1, 1, 0, 1);\n        pass.draw(3, 1, 0, i);\n      }\n      pass.end();\n      encoder.copyTextureToBuffer(\n        { texture: renderTarget },\n        {\n          buffer: resultBuffer,\n          bytesPerRow: resultBuffer.size,\n        },\n        [renderTarget.width, 1]\n      );\n    }\n    t.device.queue.submit([encoder.finish()]);\n\n    await resultBuffer.mapAsync(GPUMapMode.READ);\n\n    const view = TexelView.fromTextureDataByReference(\n      resultFormat,\n      new Uint8Array(resultBuffer.getMappedRange()),\n      {\n        bytesPerRow: calls.length * 16,\n        rowsPerImage: 1,\n        subrectOrigin: [0, 0, 0],\n        subrectSize: [calls.length, 1],\n      }\n    );\n\n    let outIdx = 0;\n    const out = new Array<PerTexelComponent<number>>(calls.length);\n    for (const bin of binned) {\n      for (const callIdx of bin) {\n        const x = outIdx;\n        out[callIdx] = view.color({ x, y: 0, z: 0 });\n        outIdx++;\n      }\n    }\n\n    storageBuffer?.destroy();\n    resultBuffer.destroy();\n\n    return out;\n  };\n\n  return {\n    run,\n    destroy() {\n      dataBuffer.destroy();\n      renderTarget.destroy();\n    },\n  };\n}\n\nexport async function doTextureCalls<T extends Dimensionality>(\n  t: GPUTest,\n  gpuTexture: GPUTexture | GPUExternalTexture,\n  viewDescriptor: GPUTextureViewDescriptor,\n  textureType: string,\n  sampler: GPUSamplerDescriptor | undefined,\n  calls: TextureCall<T>[],\n  shortShaderStage: ShortShaderStage\n) {\n  const stage = kShortShaderStageToShaderStage[shortShaderStage];\n  const runner = createTextureCallsRunner(\n    t,\n    gpuTexture instanceof GPUExternalTexture\n      ? { format: 'rgba8unorm', dimension: '2d', depthOrArrayLayers: 1, sampleCount: 1 }\n      : gpuTexture,\n    viewDescriptor,\n    textureType,\n    sampler,\n    calls,\n    stage\n  );\n  const results = await runner.run(gpuTexture);\n\n  return {\n    runner,\n    results,\n  };\n}\n"],"mappings":"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"}