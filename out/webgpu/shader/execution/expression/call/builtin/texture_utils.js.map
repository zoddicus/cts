{"version":3,"file":"texture_utils.js","names":["assert","range","unreachable","float32ToUint32","align","clamp","hashU32","lerp","quantizeToF32","kTexelRepresentationInfo","TexelView","createTextureFromTexelView","reifyExtent3D","getLimitValue","v","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","getValueBetweenMinAndMaxTexelValueInclusive","rep","normalized","numericRange","min","max","createRandomTexelView","info","format","generator","coords","texel","component","componentOrder","rnd","x","y","z","charCodeAt","quantize","fromTexelsAsColors","kTextureCallArgNames","toArray","Array","repl","bitsToNumber","unpackBits","Uint8Array","pack","encode","apply","a","b","op","length","map","i","add","expected","call","texture","sampler","texels","textureExtent","descriptor","size","textureSize","width","height","depthOrArrayLayers","addressMode","addressModeU","addressModeV","addressModeW","load","at","color","Math","floor","builtin","offset","undefined","samples","filter","minFilter","p0","p1","p1W","p0W","push","weight","p","round","out","ss","sample","c","n","putDataInTextureThenDrawAndCheckResults","device","calls","results","doTextureCalls","errs","callIdx","got","expect","gULP","bitsToULPFromZero","numberToBits","eULP","g","e","absDiff","abs","ulpDiff","relDiff","desc","describeTextureCall","toFixed","expectedSamplePoints","identifySamplePoints","Promise","resolve","gotSamplePoints","layoutTwoColumns","join","Error","run","numTexels","sampledTexelWeights","Map","unclassifiedStack","Set","unclassified","pop","setA","setB","keys","forEach","t","isCandidate","has","some","set","letter","idx","String","fromCharCode","orderedTexelIndices","lines","line","texelIdx","get","weights","w","columnA","columnB","widthA","l","repeat","kSamplePointMethods","generateSamplePoints","nearest","args","method","r","textureWidth","textureHeight","f","radius","loops","PI","cos","sin","kSubdivisionsPerTexel","q","v1","v2","wgslTypeFor","data","type","wgslExpr","toString","binKey","name","value","coordType","buildBinnedCalls","fields","prototype","startsWith","bitcastToU32","expr","binCalls","bins","key","binIdx","structs","body","dataFields","callCount","binned","dataBuffer","createBuffer","usage","GPUBufferUsage","COPY_DST","STORAGE","queue","writeBuffer","Uint32Array","rtWidth","renderTarget","createTexture","ceil","GPUTextureUsage","COPY_SRC","RENDER_ATTACHMENT","code","shaderModule","createShaderModule","pipeline","createRenderPipeline","layout","vertex","module","entryPoint","fragment","targets","primitive","topology","cullMode","gpuTexture","gpuSampler","createSampler","bindGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","createView","buffer","bytesPerRow","resultBuffer","MAP_READ","encoder","createCommandEncoder","renderPass","beginRenderPass","colorAttachments","view","loadOp","storeOp","setPipeline","setBindGroup","draw","end","copyTextureToBuffer","submit","finish","mapAsync","GPUMapMode","READ","fromTextureDataByReference","getMappedRange","rowsPerImage","subrectOrigin","subrectSize","outIdx","bin","destroy"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/texture_utils.ts"],"sourcesContent":["import { assert, range, unreachable } from '../../../../../../common/util/util.js';\nimport { EncodableTextureFormat } from '../../../../../format_info.js';\nimport { float32ToUint32 } from '../../../../../util/conversion.js';\nimport { align, clamp, hashU32, lerp, quantizeToF32 } from '../../../../../util/math.js';\nimport {\n  kTexelRepresentationInfo,\n  PerTexelComponent,\n  TexelRepresentationInfo,\n} from '../../../../../util/texture/texel_data.js';\nimport { TexelView } from '../../../../../util/texture/texel_view.js';\nimport { createTextureFromTexelView } from '../../../../../util/texture.js';\nimport { reifyExtent3D } from '../../../../../util/unions.js';\n\nfunction getLimitValue(v: number) {\n  switch (v) {\n    case Number.POSITIVE_INFINITY:\n      return 1000;\n    case Number.NEGATIVE_INFINITY:\n      return -1000;\n    default:\n      return v;\n  }\n}\n\nfunction getValueBetweenMinAndMaxTexelValueInclusive(\n  rep: TexelRepresentationInfo,\n  normalized: number\n) {\n  return lerp(\n    getLimitValue(rep.numericRange!.min),\n    getLimitValue(rep.numericRange!.max),\n    normalized\n  );\n}\n\n/**\n * Creates a TexelView filled with random values.\n */\nexport function createRandomTexelView(info: {\n  format: GPUTextureFormat;\n  size: GPUExtent3D;\n}): TexelView {\n  const rep = kTexelRepresentationInfo[info.format as EncodableTextureFormat];\n  const generator = (coords: Required<GPUOrigin3DDict>): Readonly<PerTexelComponent<number>> => {\n    const texel: PerTexelComponent<number> = {};\n    for (const component of rep.componentOrder) {\n      const rnd = hashU32(coords.x, coords.y, coords.z, component.charCodeAt(0));\n      const normalized = clamp(rnd / 0xffffffff, { min: 0, max: 1 });\n      texel[component] = getValueBetweenMinAndMaxTexelValueInclusive(rep, normalized);\n    }\n    return quantize(texel, rep);\n  };\n  return TexelView.fromTexelsAsColors(info.format as EncodableTextureFormat, generator);\n}\n\nexport type vec2 = [number, number];\nexport type vec3 = [number, number, number];\nexport type vec4 = [number, number, number, number];\nexport type Dimensionality = number | vec2 | vec3;\n\ntype TextureCallArgKeys = keyof TextureCallArgs<number>;\nconst kTextureCallArgNames: TextureCallArgKeys[] = [\n  'coords',\n  'mipLevel',\n  'arrayIndex',\n  'ddx',\n  'ddy',\n  'offset',\n];\n\nexport interface TextureCallArgs<T extends Dimensionality> {\n  coords?: T;\n  mipLevel?: number;\n  arrayIndex?: number;\n  ddx?: T;\n  ddy?: T;\n  offset?: T;\n}\n\nexport interface TextureCall<T extends Dimensionality> extends TextureCallArgs<T> {\n  builtin: 'textureSample' | 'textureLoad';\n  coordType: 'f';\n}\n\nfunction toArray(coords: Dimensionality): number[] {\n  if (coords instanceof Array) {\n    return coords;\n  }\n  return [coords];\n}\n\nfunction quantize(texel: PerTexelComponent<number>, repl: TexelRepresentationInfo) {\n  return repl.bitsToNumber(repl.unpackBits(new Uint8Array(repl.pack(repl.encode(texel)))));\n}\n\nfunction apply(a: number[], b: number[], op: (x: number, y: number) => number) {\n  assert(a.length === b.length, `apply(${a}, ${b}): arrays must have same length`);\n  return a.map((v, i) => op(v, b[i]));\n}\n\nconst add = (a: number[], b: number[]) => apply(a, b, (x, y) => x + y);\n\nexport interface Texture {\n  texels: TexelView;\n  descriptor: GPUTextureDescriptor;\n}\n\n/**\n * Returns the expect value for a WGSL builtin texture function\n */\nexport function expected<T extends Dimensionality>(\n  call: TextureCall<T>,\n  texture: Texture,\n  sampler: GPUSamplerDescriptor\n): PerTexelComponent<number> {\n  const rep = kTexelRepresentationInfo[texture.texels.format];\n  const textureExtent = reifyExtent3D(texture.descriptor.size);\n  const textureSize = [textureExtent.width, textureExtent.height, textureExtent.depthOrArrayLayers];\n  const addressMode = [\n    sampler.addressModeU ?? 'clamp-to-edge',\n    sampler.addressModeV ?? 'clamp-to-edge',\n    sampler.addressModeW ?? 'clamp-to-edge',\n  ];\n\n  const load = (at: number[]) =>\n    texture.texels.color({\n      x: Math.floor(at[0]),\n      y: Math.floor(at[1] ?? 0),\n      z: Math.floor(at[2] ?? 0),\n    });\n\n  switch (call.builtin) {\n    case 'textureSample': {\n      const coords = toArray(call.coords!);\n\n      // convert normalized to absolute texel coordinate\n      // ┌───┬───┬───┬───┐\n      // │ a │   │   │   │  norm: a = 1/8, b = 7/8\n      // ├───┼───┼───┼───┤   abs: a = 0,   b = 3\n      // │   │   │   │   │\n      // ├───┼───┼───┼───┤\n      // │   │   │   │   │\n      // ├───┼───┼───┼───┤\n      // │   │   │   │ b │\n      // └───┴───┴───┴───┘\n      let at = coords.map((v, i) => v * textureSize[i] - 0.5);\n\n      // Apply offset in whole texel units\n      if (call.offset !== undefined) {\n        at = add(at, toArray(call.offset));\n      }\n\n      const samples: { at: number[]; weight: number }[] = [];\n\n      const filter = sampler.minFilter;\n      switch (filter) {\n        case 'linear': {\n          // 'p0' is the lower texel for 'at'\n          const p0 = at.map(v => Math.floor(v));\n          // 'p1' is the higher texel for 'at'\n          const p1 = p0.map(v => v + 1);\n\n          // interpolation weights for p0 and p1\n          const p1W = at.map((v, i) => v - p0[i]);\n          const p0W = p1W.map(v => 1 - v);\n\n          switch (coords.length) {\n            case 1:\n              samples.push({ at: p0, weight: p0W[0] });\n              samples.push({ at: p1, weight: p1W[0] });\n              break;\n            case 2: {\n              samples.push({ at: p0, weight: p0W[0] * p0W[1] });\n              samples.push({ at: [p1[0], p0[1]], weight: p1W[0] * p0W[1] });\n              samples.push({ at: [p0[0], p1[1]], weight: p0W[0] * p1W[1] });\n              samples.push({ at: p1, weight: p1W[0] * p1W[1] });\n              break;\n            }\n          }\n          break;\n        }\n        case 'nearest': {\n          const p = at.map(v => Math.round(quantizeToF32(v)));\n          samples.push({ at: p, weight: 1 });\n          break;\n        }\n        default:\n          unreachable();\n      }\n\n      const out: PerTexelComponent<number> = {};\n      const ss = [];\n      for (const sample of samples) {\n        // Apply sampler address mode\n        const c = sample.at.map((v, i) => {\n          switch (addressMode[i]) {\n            case 'clamp-to-edge':\n              return clamp(v, { min: 0, max: textureSize[i] - 1 });\n            case 'mirror-repeat': {\n              const n = Math.floor(v / textureSize[i]);\n              v = v - n * textureSize[i];\n              return (n & 1) !== 0 ? textureSize[i] - v - 1 : v;\n            }\n            case 'repeat':\n              return v - Math.floor(v / textureSize[i]) * textureSize[i];\n            default:\n              unreachable();\n          }\n        });\n        const v = load(c);\n        ss.push(v);\n        for (const component of rep.componentOrder) {\n          out[component] = (out[component] ?? 0) + v[component]! * sample.weight;\n        }\n      }\n\n      return out;\n    }\n    case 'textureLoad': {\n      return load(toArray(call.coords!));\n    }\n  }\n}\n\n/**\n * Puts random data in a texture, generates a shader that implements `calls`\n * such that each call's result is written to the next consecutive texel of\n * a rgba32float texture. It then checks the result of each call matches\n * the expected result.\n */\nexport async function putDataInTextureThenDrawAndCheckResults<T extends Dimensionality>(\n  device: GPUDevice,\n  texture: Texture,\n  sampler: GPUSamplerDescriptor,\n  calls: TextureCall<T>[]\n) {\n  const results = await doTextureCalls(device, texture, sampler, calls);\n  const errs: string[] = [];\n  const rep = kTexelRepresentationInfo[texture.texels.format];\n  for (let callIdx = 0; callIdx < calls.length; callIdx++) {\n    const call = calls[callIdx];\n    const got = results[callIdx];\n    const expect = expected(call, texture, sampler);\n\n    const gULP = rep.bitsToULPFromZero(rep.numberToBits(got));\n    const eULP = rep.bitsToULPFromZero(rep.numberToBits(expect));\n    for (const component of rep.componentOrder) {\n      const g = got[component]!;\n      const e = expect[component]!;\n      const absDiff = Math.abs(g - e);\n      const ulpDiff = Math.abs(gULP[component]! - eULP[component]!);\n      const relDiff = absDiff / Math.max(Math.abs(g), Math.abs(e));\n      if (ulpDiff > 3 && relDiff > 0.03) {\n        const desc = describeTextureCall(call);\n        errs.push(`component was not as expected:\n      call: ${desc}\n component: ${component}\n       got: ${g}\n  expected: ${e}\n  abs diff: ${absDiff.toFixed(4)}\n  rel diff: ${(relDiff * 100).toFixed(2)}%\n  ulp diff: ${ulpDiff}\n  sample points:\n`);\n        const expectedSamplePoints = [\n          'expected:',\n          ...(await identifySamplePoints(texture.descriptor, (texels: TexelView) => {\n            return Promise.resolve(\n              expected(call, { texels, descriptor: texture.descriptor }, sampler)\n            );\n          })),\n        ];\n        const gotSamplePoints = [\n          'got:',\n          ...(await identifySamplePoints(\n            texture.descriptor,\n            async (texels: TexelView) =>\n              (\n                await doTextureCalls(device, { texels, descriptor: texture.descriptor }, sampler, [\n                  call,\n                ])\n              )[0]\n          )),\n        ];\n        errs.push(layoutTwoColumns(expectedSamplePoints, gotSamplePoints).join('\\n'));\n        errs.push('', '');\n      }\n    }\n  }\n\n  return errs.length > 0 ? new Error(errs.join('\\n')) : undefined;\n}\n\n/**\n * Generates a text art grid showing which texels were sampled\n * followed by a list of the samples and the weights used for each\n * component.\n *\n * Example:\n *\n *     0   1   2   3   4   5   6   7\n *   ┌───┬───┬───┬───┬───┬───┬───┬───┐\n * 0 │   │   │   │   │   │   │   │   │\n *   ├───┼───┼───┼───┼───┼───┼───┼───┤\n * 1 │   │   │   │   │   │   │   │ a │\n *   ├───┼───┼───┼───┼───┼───┼───┼───┤\n * 2 │   │   │   │   │   │   │   │ b │\n *   ├───┼───┼───┼───┼───┼───┼───┼───┤\n * 3 │   │   │   │   │   │   │   │   │\n *   ├───┼───┼───┼───┼───┼───┼───┼───┤\n * 4 │   │   │   │   │   │   │   │   │\n *   ├───┼───┼───┼───┼───┼───┼───┼───┤\n * 5 │   │   │   │   │   │   │   │   │\n *   ├───┼───┼───┼───┼───┼───┼───┼───┤\n * 6 │   │   │   │   │   │   │   │   │\n *   ├───┼───┼───┼───┼───┼───┼───┼───┤\n * 7 │   │   │   │   │   │   │   │   │\n *   └───┴───┴───┴───┴───┴───┴───┴───┘\n * a: at: [7, 1], weights: [R: 0.75000]\n * b: at: [7, 2], weights: [R: 0.25000]\n */\nasync function identifySamplePoints(\n  info: GPUTextureDescriptor,\n  run: (texels: TexelView) => Promise<PerTexelComponent<number>>\n) {\n  const textureSize = reifyExtent3D(info.size);\n  const numTexels = textureSize.width * textureSize.height;\n  const rep = kTexelRepresentationInfo[info.format as EncodableTextureFormat];\n\n  // Identify all the texels that are sampled, and their weights.\n  const sampledTexelWeights = new Map<number, PerTexelComponent<number>>();\n  const unclassifiedStack = [new Set<number>(range(numTexels, v => v))];\n  while (unclassifiedStack.length > 0) {\n    // Pop the an unclassified texels stack\n    const unclassified = unclassifiedStack.pop()!;\n\n    // Split unclassified texels evenly into two new sets\n    const setA = new Set<number>();\n    const setB = new Set<number>();\n    [...unclassified.keys()].forEach((t, i) => ((i & 1) === 0 ? setA : setB).add(t));\n\n    // Push setB to the unclassified texels stack\n    if (setB.size > 0) {\n      unclassifiedStack.push(setB);\n    }\n\n    // See if any of the texels in setA were sampled.\n    const results = await run(\n      TexelView.fromTexelsAsColors(\n        info.format as EncodableTextureFormat,\n        (coords: Required<GPUOrigin3DDict>): Readonly<PerTexelComponent<number>> => {\n          const isCandidate = setA.has(coords.x + coords.y * textureSize.width);\n          const texel: PerTexelComponent<number> = {};\n          for (const component of rep.componentOrder) {\n            texel[component] = isCandidate ? 1 : 0;\n          }\n          return texel;\n        }\n      )\n    );\n    if (rep.componentOrder.some(c => results[c] !== 0)) {\n      // One or more texels of setA were sampled.\n      if (setA.size === 1) {\n        // We identified a specific texel was sampled.\n        // As there was only one texel in the set, results holds the sampling weights.\n        setA.forEach(texel => sampledTexelWeights.set(texel, results));\n      } else {\n        // More than one texel in the set. Needs splitting.\n        unclassifiedStack.push(setA);\n      }\n    }\n  }\n\n  // ┌───┬───┬───┬───┐\n  // │ a │   │   │   │\n  // ├───┼───┼───┼───┤\n  // │   │   │   │   │\n  // ├───┼───┼───┼───┤\n  // │   │   │   │   │\n  // ├───┼───┼───┼───┤\n  // │   │   │   │ b │\n  // └───┴───┴───┴───┘\n  const letter = (idx: number) => String.fromCharCode(97 + idx); // 97: 'a'\n  const orderedTexelIndices: number[] = [];\n  const lines: string[] = [];\n  {\n    let line = '  ';\n    for (let x = 0; x < textureSize.width; x++) {\n      line += `  ${x} `;\n    }\n    lines.push(line);\n  }\n  {\n    let line = '  ┌';\n    for (let x = 0; x < textureSize.width; x++) {\n      line += x === textureSize.width - 1 ? '───┐' : '───┬';\n    }\n    lines.push(line);\n  }\n  for (let y = 0; y < textureSize.height; y++) {\n    {\n      let line = `${y} │`;\n      for (let x = 0; x < textureSize.width; x++) {\n        const texelIdx = x + y * textureSize.height;\n        const weight = sampledTexelWeights.get(texelIdx);\n        if (weight !== undefined) {\n          line += ` ${letter(orderedTexelIndices.length)} │`;\n          orderedTexelIndices.push(texelIdx);\n        } else {\n          line += '   │';\n        }\n      }\n      lines.push(line);\n    }\n    if (y < textureSize.height - 1) {\n      let line = '  ├';\n      for (let x = 0; x < textureSize.width; x++) {\n        line += x === textureSize.width - 1 ? '───┤' : '───┼';\n      }\n      lines.push(line);\n    }\n  }\n  {\n    let line = '  └';\n    for (let x = 0; x < textureSize.width; x++) {\n      line += x === textureSize.width - 1 ? '───┘' : '───┴';\n    }\n    lines.push(line);\n  }\n\n  orderedTexelIndices.forEach((texelIdx, i) => {\n    const weights = sampledTexelWeights.get(texelIdx)!;\n    const y = Math.floor(texelIdx / textureSize.width);\n    const x = texelIdx - y * textureSize.height;\n    const w = rep.componentOrder.map(c => `${c}: ${weights[c]?.toFixed(5)}`).join(', ');\n    lines.push(`${letter(i)}: at: [${x}, ${y}], weights: [${w}]`);\n  });\n  return lines;\n}\n\nfunction layoutTwoColumns(columnA: string[], columnB: string[]) {\n  const widthA = Math.max(...columnA.map(l => l.length));\n  const lines = Math.max(columnA.length, columnB.length);\n  const out: string[] = new Array<string>(lines);\n  for (let line = 0; line < lines; line++) {\n    const a = columnA[line] ?? '';\n    const b = columnB[line] ?? '';\n    out[line] = `${a}${' '.repeat(widthA - a.length)} | ${b}`;\n  }\n  return out;\n}\n\nexport const kSamplePointMethods = ['texel-centre', 'spiral'] as const;\nexport type SamplePointMethods = (typeof kSamplePointMethods)[number];\n\n/**\n * Generates an array of coordinates at which to sample a texture.\n */\nexport function generateSamplePoints(\n  n: number,\n  nearest: boolean,\n  args:\n    | {\n        method: 'texel-centre';\n        textureWidth: number;\n        textureHeight: number;\n      }\n    | {\n        method: 'spiral';\n        radius?: number;\n        loops?: number;\n        textureWidth: number;\n        textureHeight: number;\n      }\n) {\n  const out: vec2[] = [];\n  switch (args.method) {\n    case 'texel-centre': {\n      for (let i = 0; i < n; i++) {\n        const r = hashU32(i);\n        const x = Math.floor(lerp(0, args.textureWidth - 1, (r & 0xffff) / 0xffff)) + 0.5;\n        const y = Math.floor(lerp(0, args.textureHeight - 1, (r >>> 16) / 0xffff)) + 0.5;\n        out.push([x / args.textureWidth, y / args.textureHeight]);\n      }\n      break;\n    }\n    case 'spiral': {\n      for (let i = 0; i < n; i++) {\n        const f = i / (Math.max(n, 2) - 1);\n        const r = (args.radius ?? 1.5) * f;\n        const a = (args.loops ?? 2) * 2 * Math.PI * f;\n        out.push([0.5 + r * Math.cos(a), 0.5 + r * Math.sin(a)]);\n      }\n      break;\n    }\n  }\n  // Samplers across devices use different methods to interpolate.\n  // Quantizing the texture coordinates seems to hit coords that produce\n  // comparable results to our computed results.\n  // Note: This value works with 8x8 textures. Other sizes have not been tested.\n  // Values that worked for reference:\n  // Win 11, NVidia 2070 Super: 16\n  // Linux, AMD Radeon Pro WX 3200: 256\n  // MacOS, M1 Mac: 256\n  const kSubdivisionsPerTexel = 4;\n  const q = [args.textureWidth * kSubdivisionsPerTexel, args.textureHeight * kSubdivisionsPerTexel];\n  return out.map(\n    c =>\n      c.map((v, i) => {\n        // Quantize to kSubdivisionsPerPixel\n        const v1 = Math.floor(v * q[i]);\n        // If it's nearest and we're on the edge of a texel then move us off the edge\n        // since the edge could choose one texel or another in nearest mode\n        const v2 = nearest && v1 % kSubdivisionsPerTexel === 0 ? v1 + 1 : v1;\n        // Convert back to texture coords\n        return v2 / q[i];\n      }) as vec2\n  );\n}\n\nfunction wgslTypeFor(data: Dimensionality, type: 'f' | 'i' | 'u'): string {\n  if (data instanceof Array) {\n    switch (data.length) {\n      case 2:\n        return `vec2${type}`;\n      case 3:\n        return `vec3${type}`;\n    }\n  }\n  return '${type}32';\n}\n\nfunction wgslExpr(data: number | vec2 | vec3 | vec4): string {\n  if (data instanceof Array) {\n    switch (data.length) {\n      case 2:\n        return `vec2(${data.map(v => v.toString()).join(', ')})`;\n      case 3:\n        return `vec3(${data.map(v => v.toString()).join(', ')})`;\n    }\n  }\n  return data.toString();\n}\n\nfunction binKey<T extends Dimensionality>(call: TextureCall<T>): string {\n  const keys: string[] = [];\n  for (const name of kTextureCallArgNames) {\n    const value = call[name];\n    if (value !== undefined) {\n      if (name === 'offset') {\n        // offset must be a constant expression\n        keys.push(`${name}: ${wgslExpr(value)}`);\n      } else {\n        keys.push(`${name}: ${wgslTypeFor(value, call.coordType)}`);\n      }\n    }\n  }\n  return `${call.builtin}(${keys.join(', ')})`;\n}\n\nfunction buildBinnedCalls<T extends Dimensionality>(calls: TextureCall<T>[]) {\n  const args: string[] = ['T']; // All texture builtins take the texture as the first argument\n  const fields: string[] = [];\n  const data: number[] = [];\n\n  const prototype = calls[0];\n  if (prototype.builtin.startsWith('textureSample')) {\n    // textureSample*() builtins take a sampler as the second argument\n    args.push('S');\n  }\n\n  for (const name of kTextureCallArgNames) {\n    const value = prototype[name];\n    if (value !== undefined) {\n      if (name === 'offset') {\n        args.push(`/* offset */ ${wgslExpr(value)}`);\n      } else {\n        args.push(`args.${name}`);\n        fields.push(`@align(16) ${name} : ${wgslTypeFor(value, prototype.coordType)}`);\n      }\n    }\n  }\n\n  for (const call of calls) {\n    for (const name of kTextureCallArgNames) {\n      const value = call[name];\n      assert(\n        (prototype[name] === undefined) === (value === undefined),\n        'texture calls are not binned correctly'\n      );\n      if (value !== undefined && name !== 'offset') {\n        const bitcastToU32 = (value: number) => {\n          if (calls[0].coordType === 'f') {\n            return float32ToUint32(value);\n          }\n          return value;\n        };\n        if (value instanceof Array) {\n          for (const c of value) {\n            data.push(bitcastToU32(c));\n          }\n        } else {\n          data.push(bitcastToU32(value));\n        }\n        // All fields are aligned to 16 bytes.\n        while ((data.length & 3) !== 0) {\n          data.push(0);\n        }\n      }\n    }\n  }\n\n  const expr = `${prototype.builtin}(${args.join(', ')})`;\n\n  return { expr, fields, data };\n}\n\nfunction binCalls<T extends Dimensionality>(calls: TextureCall<T>[]): number[][] {\n  const map = new Map<string, number>(); // key to bin index\n  const bins: number[][] = [];\n  calls.forEach((call, callIdx) => {\n    const key = binKey(call);\n    const binIdx = map.get(key);\n    if (binIdx === undefined) {\n      map.set(key, bins.length);\n      bins.push([callIdx]);\n    } else {\n      bins[binIdx].push(callIdx);\n    }\n  });\n  return bins;\n}\n\nexport function describeTextureCall<T extends Dimensionality>(call: TextureCall<T>): string {\n  const args: string[] = ['texture: T'];\n  if (call.builtin.startsWith('textureSample')) {\n    args.push('sampler: S');\n  }\n  for (const name of kTextureCallArgNames) {\n    const value = call[name];\n    if (value !== undefined) {\n      args.push(`${name}: ${wgslExpr(value)}`);\n    }\n  }\n  return `${call.builtin}(${args.join(', ')})`;\n}\n\n/**\n * Given a list of \"calls\", each one of which has a texture coordinate,\n * generates a fragment shader that uses the fragment position as an index\n * (position.y * 256 + position.x) That index is then used to look up a\n * coordinate from a storage buffer which is used to call the WGSL texture\n * function to read/sample the texture, and then write to an rgba32float\n * texture.  We then read the rgba32float texture for the per \"call\" results.\n *\n * Calls are \"binned\" by call parameters. Each bin has its own structure and\n * field in the storage buffer. This allows the calls to be non-homogenous and\n * each have their own data type for coordinates.\n */\nexport async function doTextureCalls<T extends Dimensionality>(\n  device: GPUDevice,\n  texture: Texture,\n  sampler: GPUSamplerDescriptor,\n  calls: TextureCall<T>[]\n) {\n  let structs = '';\n  let body = '';\n  let dataFields = '';\n  const data: number[] = [];\n  let callCount = 0;\n  const binned = binCalls(calls);\n  binned.forEach((binCalls, binIdx) => {\n    const b = buildBinnedCalls(binCalls.map(callIdx => calls[callIdx]));\n    structs += `struct Args${binIdx} {\n  ${b.fields.join(',  \\n')}\n}\n`;\n    dataFields += `  args${binIdx} : array<Args${binIdx}, ${binCalls.length}>,\n`;\n    body += `\n  {\n    let is_active = (frag_idx >= ${callCount}) & (frag_idx < ${callCount + binCalls.length});\n    let args = data.args${binIdx}[frag_idx - ${callCount}];\n    let call = ${b.expr};\n    result = select(result, call, is_active);\n  }\n`;\n    callCount += binCalls.length;\n    data.push(...b.data);\n  });\n\n  const dataBuffer = device.createBuffer({\n    size: data.length * 4,\n    usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.STORAGE,\n  });\n  device.queue.writeBuffer(dataBuffer, 0, new Uint32Array(data));\n\n  const rtWidth = 256;\n  const renderTarget = device.createTexture({\n    format: 'rgba32float',\n    size: { width: rtWidth, height: Math.ceil(calls.length / rtWidth) },\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n  });\n\n  const code = `\n${structs}\n\nstruct Data {\n${dataFields}\n}\n\n@vertex\nfn vs_main(@builtin(vertex_index) vertex_index : u32) -> @builtin(position) vec4f {\n  let positions = array(\n    vec4f(-1,  1, 0, 1), vec4f( 1,  1, 0, 1),\n    vec4f(-1, -1, 0, 1), vec4f( 1, -1, 0, 1),\n  );\n  return positions[vertex_index];\n}\n\n@group(0) @binding(0) var          T    : texture_2d<f32>;\n@group(0) @binding(1) var          S    : sampler;\n@group(0) @binding(2) var<storage> data : Data;\n\n@fragment\nfn fs_main(@builtin(position) frag_pos : vec4f) -> @location(0) vec4f {\n  let frag_idx = u32(frag_pos.x) + u32(frag_pos.y) * ${renderTarget.width};\n  var result : vec4f;\n${body}\n  return result;\n}\n`;\n  const shaderModule = device.createShaderModule({ code });\n\n  const pipeline = device.createRenderPipeline({\n    layout: 'auto',\n    vertex: { module: shaderModule, entryPoint: 'vs_main' },\n    fragment: {\n      module: shaderModule,\n      entryPoint: 'fs_main',\n      targets: [{ format: renderTarget.format }],\n    },\n    primitive: { topology: 'triangle-strip', cullMode: 'none' },\n  });\n\n  const gpuTexture = createTextureFromTexelView(device, texture.texels, texture.descriptor);\n  const gpuSampler = device.createSampler(sampler);\n\n  const bindGroup = device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [\n      { binding: 0, resource: gpuTexture.createView() },\n      { binding: 1, resource: gpuSampler },\n      { binding: 2, resource: { buffer: dataBuffer } },\n    ],\n  });\n\n  const bytesPerRow = align(16 * renderTarget.width, 256);\n  const resultBuffer = device.createBuffer({\n    size: renderTarget.height * bytesPerRow,\n    usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ,\n  });\n  const encoder = device.createCommandEncoder();\n\n  const renderPass = encoder.beginRenderPass({\n    colorAttachments: [{ view: renderTarget.createView(), loadOp: 'clear', storeOp: 'store' }],\n  });\n\n  renderPass.setPipeline(pipeline);\n  renderPass.setBindGroup(0, bindGroup);\n  renderPass.draw(4);\n  renderPass.end();\n  encoder.copyTextureToBuffer(\n    { texture: renderTarget },\n    { buffer: resultBuffer, bytesPerRow },\n    { width: renderTarget.width, height: renderTarget.height }\n  );\n  device.queue.submit([encoder.finish()]);\n\n  await resultBuffer.mapAsync(GPUMapMode.READ);\n\n  const view = TexelView.fromTextureDataByReference(\n    renderTarget.format as EncodableTextureFormat,\n    new Uint8Array(resultBuffer.getMappedRange()),\n    {\n      bytesPerRow,\n      rowsPerImage: renderTarget.height,\n      subrectOrigin: [0, 0, 0],\n      subrectSize: [renderTarget.width, renderTarget.height],\n    }\n  );\n\n  let outIdx = 0;\n  const out = new Array<PerTexelComponent<number>>(calls.length);\n  for (const bin of binned) {\n    for (const callIdx of bin) {\n      const x = outIdx % rtWidth;\n      const y = Math.floor(outIdx / rtWidth);\n      out[callIdx] = view.color({ x, y, z: 0 });\n      outIdx++;\n    }\n  }\n\n  renderTarget.destroy();\n  gpuTexture.destroy();\n  resultBuffer.destroy();\n\n  return out;\n}\n"],"mappings":"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"}