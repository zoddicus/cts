{"version":3,"file":"texture_utils.js","names":["keysOf","assert","range","unreachable","isCompressedFloatTextureFormat","isCompressedTextureFormat","isDepthOrStencilTextureFormat","kEncodableTextureFormats","kTextureFormatInfo","GPUTest","float32ToUint32","align","clamp","dotProduct","hashU32","lcm","lerp","quantizeToF32","effectiveViewDimensionForDimension","physicalMipSizeFromTexture","reifyTextureDescriptor","virtualMipSize","kTexelRepresentationInfo","TexelComponent","TexelView","createTextureFromTexelViews","reifyExtent3D","kSampleTypeInfo","f32","format","i32","u32","WGSLTextureQueryTest","executeAndExpectResult","code","view","expected","device","module","createShaderModule","pipeline","createComputePipeline","layout","compute","resultBuffer","createBufferTracked","size","usage","GPUBufferUsage","STORAGE","COPY_SRC","bindGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","buffer","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","queue","submit","finish","e","Uint32Array","set","expectGPUBufferValuesEqual","makeRepeatableValuesInRanges","hashInputs","rangeDefs","_hashInputs","map","v","sumOfCharCodesOfString","num","type","i","number","Math","floor","getLimitValue","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","getValueBetweenMinAndMaxTexelValueInclusive","rep","component","normalized","numericRange","perComponentRanges","perComponentRange","min","max","getTexelViewFormatForTextureFormat","endsWith","kTextureTypeInfo","depth","componentType","resultType","resultFormat","float","sint","uint","getTextureFormatTypeInfo","info","color","stencil","appendComponentTypeForFormatToTextureType","base","includes","createRandomTexelView","generator","coords","texel","componentOrder","rnd","x","y","z","sampleIndex","charCodeAt","mipLevel","width","height","depthOrArrayLayers","quantize","fromTexelsAsColors","createRandomTexelViewMipmap","mipLevelCount","dimension","kTextureCallArgNames","toArray","Array","repl","bitsToNumber","unpackBits","Uint8Array","pack","encode","apply","a","b","op","length","getUnusedCubeCornerSampleIndex","textureSize","u","add","convertPerTexelComponentToResultFormat","src","out","R","G","B","A","undefined","convertResultFormatToTexelViewFormat","zeroValuePerTexelComponent","components","softwareTextureReadMipLevel","call","texture","sampler","texels","descriptor","addressMode","addressModeU","addressModeV","addressModeW","load","at","arrayIndex","isCube","viewDescriptor","builtin","convertCubeCoordToNormalized3DTextureCoord","offset","samples","filter","minFilter","p0","p1","p1W","p0W","push","weight","ndx","p","w","round","ss","sample","c","wrapFaceCoordToCubeFaceAtEdgeBoundaries","applyAddressModesToCoords","isOutOfBoundsCall","softwareTextureRead","ddx","ddy","texSize","scaledDdx","scaledDdy","dotDDX","dotDDY","deltaMax","log2","maxLevel","mipmapFilter","clampedMipLevel","baseMipLevel","nextMipLevel","ceil","t0","t1","mix","values","desc","sampleCount","okBecauseOutOfBounds","gotRGBA","maxFractionalDiff","mipTexels","rgba","texelsApproximatelyEqual","kRGBAComponents","kRComponent","expectRGBA","got","expect","gULP","bitsToULPFromZero","numberToBits","eULP","rgbaComponentsToCheck","g","absDiff","abs","ulpDiff","checkCallResults","t","textureType","calls","results","errs","magFilter","getMaxFractionalDiffForTextureFormat","callIdx","relDiff","describeTextureCall","toFixed","expectedSamplePoints","identifySamplePoints","Promise","resolve","gotSamplePoints","gpuTexture","result","doTextureCalls","destroy","layoutTwoColumns","join","Error","softwareRasterize","targetSize","options","uvwStart","screenSpaceUMult","screenSpaceVMult","expData","Float32Array","fragY","fragX","coordType","asRgba32Float","fromTextureDataByReference","bytesPerRow","rowsPerImage","subrectOrigin","subrectSize","drawTexture","samplerDesc","renderTarget","createTextureTracked","GPUTextureUsage","RENDER_ATTACHMENT","uMult","vMult","offsetWGSL","shaderModule","createRenderPipeline","vertex","fragment","targets","primitive","topology","createSampler","createView","renderPass","beginRenderPass","colorAttachments","loadOp","storeOp","draw","checkTextureMatchesExpectedTexelView","actualTexture","expectedTexelView","expectTexelViewComparisonIsOkInTexture","putDataInTextureThenDrawAndCheckResultsComparedToSoftwareRasterizer","createTextureWithRandomDataAndGetTexels","s","String","split","reduce","sum","makeAstcBlockFiller","bytesPerBlock","bytes","data","hashBase","makeRandomBytesBlockFiller","getBlockFiller","startsWith","fillTextureWithRandomData","fillBlock","blocksAcross","blockWidth","blocksDown","blockHeight","bytesNeeded","writeTexture","s_readTextureToRGBA32DeviceToPipeline","WeakMap","getEffectiveViewDimension","textureBindingViewDimension","readTextureToTexelViews","viewDimensionToPipelineMap","get","Map","viewDimension","textureWGSL","loadWGSL","dimensionWGSL","readBuffers","uniformValues","uniformBuffer","byteLength","UNIFORM","COPY_DST","writeBuffer","storageBuffer","readBuffer","MAP_READ","copyBufferToBuffer","texelViews","mapAsync","GPUMapMode","READ","getMappedRange","slice","unmap","coord","kFaceNames","run","numTexels","texelsPerRow","texelsPerSlice","sampledTexelWeights","unclassifiedStack","Set","unclassified","pop","setA","setB","keys","forEach","isCandidate","has","some","letter","idx","fromCharCode","orderedTexelIndices","lines","line","toString","padEnd","texelIdx","pad2","n","padStart","weights","columnA","columnB","widthA","l","repeat","getDepthOrArrayLayersForViewDimension","chooseTextureSize","minSize","minBlocks","kSamplePointMethods","kCubeSamplePointMethods","generateTextureBuiltinInputsImpl","makeValue","args","method","r","radius","loops","f","PI","cos","sin","makeRangeValue","makeIntHashValue","kSubdivisionsPerTexel","nearest","mipSize","q","v1","v2","_","j","generateTextureBuiltinInputs1D","generateTextureBuiltinInputs2D","generateTextureBuiltinInputs3D","kFaceUVMatrices","transformMat3","m","normalize","sqrt","uvw","layer","absR","negX","negY","negZ","convertNormalized3DTexCoordToCubeCoord","uvLayer","faceLayer","kFaceConversions","faceCoord","u+t","u-t","v+t","v-t","t-v","1+u","1+v","-v-1","t-u-1","t-v-1","2t-u-1","2t-v-1","kFaceConversionEnums","kFaceToFaceRemap","to","getFaceWrapIndex","applyFaceWrap","generateSamplePointsCube","textureWidth","face","theta","phi","sinTheta","cosTheta","sinPhi","cosPhi","ux","uy","uz","halfTexel","quantizedUVW","wgslTypeFor","isArray","wgslExpr","wgslExprFor","binKey","name","value","buildBinnedCalls","fields","prototype","levelType","arrayIndexType","sampleIndexType","bitcastToU32","expr","binCalls","bins","key","binIdx","s_deviceToPipelines","structs","body","dataFields","callCount","binned","dataBuffer","returnType","rtWidth","pipelines","gpuSampler","copyTextureToBuffer","outIdx","bin"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/texture_utils.ts"],"sourcesContent":["import { keysOf } from '../../../../../../common/util/data_tables.js';\nimport { assert, range, unreachable } from '../../../../../../common/util/util.js';\nimport {\n  EncodableTextureFormat,\n  isCompressedFloatTextureFormat,\n  isCompressedTextureFormat,\n  isDepthOrStencilTextureFormat,\n  kEncodableTextureFormats,\n  kTextureFormatInfo,\n} from '../../../../../format_info.js';\nimport { GPUTest, TextureTestMixinType } from '../../../../../gpu_test.js';\nimport { float32ToUint32 } from '../../../../../util/conversion.js';\nimport {\n  align,\n  clamp,\n  dotProduct,\n  hashU32,\n  lcm,\n  lerp,\n  quantizeToF32,\n} from '../../../../../util/math.js';\nimport {\n  effectiveViewDimensionForDimension,\n  physicalMipSizeFromTexture,\n  reifyTextureDescriptor,\n  SampleCoord,\n  virtualMipSize,\n} from '../../../../../util/texture/base.js';\nimport {\n  kTexelRepresentationInfo,\n  NumericRange,\n  PerComponentNumericRange,\n  PerTexelComponent,\n  TexelComponent,\n  TexelRepresentationInfo,\n} from '../../../../../util/texture/texel_data.js';\nimport { TexelView } from '../../../../../util/texture/texel_view.js';\nimport { createTextureFromTexelViews } from '../../../../../util/texture.js';\nimport { reifyExtent3D } from '../../../../../util/unions.js';\n\nexport type SampledType = 'f32' | 'i32' | 'u32';\n\nexport const kSampleTypeInfo = {\n  f32: {\n    format: 'rgba8unorm',\n  },\n  i32: {\n    format: 'rgba8sint',\n  },\n  u32: {\n    format: 'rgba8uint',\n  },\n} as const;\n\n/**\n * Used for textureDimension, textureNumLevels, textureNumLayers\n */\nexport class WGSLTextureQueryTest extends GPUTest {\n  executeAndExpectResult(code: string, view: GPUTextureView, expected: number[]) {\n    const { device } = this;\n    const module = device.createShaderModule({ code });\n    const pipeline = device.createComputePipeline({\n      layout: 'auto',\n      compute: {\n        module,\n      },\n    });\n\n    const resultBuffer = this.createBufferTracked({\n      size: 16,\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n    });\n\n    const bindGroup = device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [\n        { binding: 0, resource: view },\n        { binding: 1, resource: { buffer: resultBuffer } },\n      ],\n    });\n\n    const encoder = device.createCommandEncoder();\n    const pass = encoder.beginComputePass();\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bindGroup);\n    pass.dispatchWorkgroups(1);\n    pass.end();\n    device.queue.submit([encoder.finish()]);\n\n    const e = new Uint32Array(4);\n    e.set(expected);\n    this.expectGPUBufferValuesEqual(resultBuffer, e);\n  }\n}\n\n/**\n * Generates an array of pseudo random values based on a hash.\n * For `i32` generates an integer in the range [-1, num]\n * For `u32` generates an integer in the range [0, num)\n * for `f32` generates an number in the range [-1 to num)\n */\nexport function makeRepeatableValuesInRanges({\n  hashInputs,\n  rangeDefs,\n}: {\n  hashInputs: (number | string)[];\n  rangeDefs: RangeDef[];\n}): number[] {\n  const _hashInputs = hashInputs.map(v => (typeof v === 'string' ? sumOfCharCodesOfString(v) : v));\n  return rangeDefs.map(({ num, type }, i) => {\n    const range = num + type === 'u32' ? 1 : 2;\n    const number = (hashU32(..._hashInputs, i) / 0x1_0000_0000) * range - (type === 'u32' ? 0 : 1);\n    return type === 'f32' ? number : Math.floor(number);\n  });\n}\n\nfunction getLimitValue(v: number) {\n  switch (v) {\n    case Number.POSITIVE_INFINITY:\n      return 1000;\n    case Number.NEGATIVE_INFINITY:\n      return -1000;\n    default:\n      return v;\n  }\n}\n\nfunction getValueBetweenMinAndMaxTexelValueInclusive(\n  rep: TexelRepresentationInfo,\n  component: TexelComponent,\n  normalized: number\n) {\n  assert(!!rep.numericRange);\n  const perComponentRanges = rep.numericRange as PerComponentNumericRange;\n  const perComponentRange = perComponentRanges[component];\n  const range = rep.numericRange as NumericRange;\n  const { min, max } = perComponentRange ? perComponentRange : range;\n  return lerp(getLimitValue(min), getLimitValue(max), normalized);\n}\n\n/**\n * We need the software rendering to do the same interpolation as the hardware\n * rendered so for -srgb formats we set the TexelView to an -srgb format as\n * TexelView handles this case. Note: It might be nice to add rgba32float-srgb\n * or something similar to TexelView.\n */\nexport function getTexelViewFormatForTextureFormat(format: GPUTextureFormat) {\n  return format.endsWith('-srgb') ? 'rgba8unorm-srgb' : 'rgba32float';\n}\n\nconst kTextureTypeInfo = {\n  depth: {\n    componentType: 'f32',\n    resultType: 'vec4f',\n    resultFormat: 'rgba32float',\n  },\n  float: {\n    componentType: 'f32',\n    resultType: 'vec4f',\n    resultFormat: 'rgba32float',\n  },\n  'unfilterable-float': {\n    componentType: 'f32',\n    resultType: 'vec4f',\n    resultFormat: 'rgba32float',\n  },\n  sint: {\n    componentType: 'i32',\n    resultType: 'vec4i',\n    resultFormat: 'rgba32sint',\n  },\n  uint: {\n    componentType: 'u32',\n    resultType: 'vec4u',\n    resultFormat: 'rgba32uint',\n  },\n} as const;\n\nfunction getTextureFormatTypeInfo(format: GPUTextureFormat) {\n  const info = kTextureFormatInfo[format];\n  const type = info.color?.type ?? info.depth?.type ?? info.stencil?.type;\n  assert(!!type);\n  return kTextureTypeInfo[type];\n}\n\n/**\n * given a texture type 'base', returns the base with the correct component for the given texture format.\n * eg: `getTextureType('texture_2d', someUnsignedIntTextureFormat)` -> `texture_2d<u32>`\n */\nexport function appendComponentTypeForFormatToTextureType(base: string, format: GPUTextureFormat) {\n  return base.includes('depth')\n    ? base\n    : `${base}<${getTextureFormatTypeInfo(format).componentType}>`;\n}\n\n/**\n * Creates a TexelView filled with random values.\n */\nexport function createRandomTexelView(info: {\n  format: GPUTextureFormat;\n  size: GPUExtent3D;\n  mipLevel: number;\n}): TexelView {\n  const rep = kTexelRepresentationInfo[info.format as EncodableTextureFormat];\n  const size = reifyExtent3D(info.size);\n  const generator = (coords: SampleCoord): Readonly<PerTexelComponent<number>> => {\n    const texel: PerTexelComponent<number> = {};\n    for (const component of rep.componentOrder) {\n      const rnd = hashU32(\n        coords.x,\n        coords.y,\n        coords.z,\n        coords.sampleIndex ?? 0,\n        component.charCodeAt(0),\n        info.mipLevel,\n        size.width,\n        size.height,\n        size.depthOrArrayLayers\n      );\n      const normalized = clamp(rnd / 0xffffffff, { min: 0, max: 1 });\n      texel[component] = getValueBetweenMinAndMaxTexelValueInclusive(rep, component, normalized);\n    }\n    return quantize(texel, rep);\n  };\n  return TexelView.fromTexelsAsColors(info.format as EncodableTextureFormat, generator);\n}\n\n/**\n * Creates a mip chain of TexelViews filled with random values\n */\nexport function createRandomTexelViewMipmap(info: {\n  format: GPUTextureFormat;\n  size: GPUExtent3D;\n  mipLevelCount?: number;\n  dimension?: GPUTextureDimension;\n}): TexelView[] {\n  const mipLevelCount = info.mipLevelCount ?? 1;\n  const dimension = info.dimension ?? '2d';\n  return range(mipLevelCount, i =>\n    createRandomTexelView({\n      format: info.format,\n      size: virtualMipSize(dimension, info.size, i),\n      mipLevel: i,\n    })\n  );\n}\n\nexport type vec1 = [number]; // Because it's easy to deal with if these types are all array of number\nexport type vec2 = [number, number];\nexport type vec3 = [number, number, number];\nexport type vec4 = [number, number, number, number];\nexport type Dimensionality = vec1 | vec2 | vec3;\n\ntype TextureCallArgKeys = keyof TextureCallArgs<vec1>;\nconst kTextureCallArgNames: TextureCallArgKeys[] = [\n  'coords',\n  'arrayIndex',\n  'sampleIndex',\n  'mipLevel',\n  'ddx',\n  'ddy',\n  'offset',\n];\n\nexport interface TextureCallArgs<T extends Dimensionality> {\n  coords?: T;\n  mipLevel?: number;\n  arrayIndex?: number;\n  sampleIndex?: number;\n  ddx?: T;\n  ddy?: T;\n  offset?: T;\n}\n\nexport interface TextureCall<T extends Dimensionality> extends TextureCallArgs<T> {\n  builtin: 'textureSample' | 'textureLoad';\n  coordType: 'f' | 'i' | 'u';\n  levelType?: 'i' | 'u';\n  arrayIndexType?: 'i' | 'u';\n  sampleIndexType?: 'i' | 'u';\n}\n\nfunction toArray(coords: Dimensionality): number[] {\n  if (coords instanceof Array) {\n    return coords;\n  }\n  return [coords];\n}\n\nfunction quantize(texel: PerTexelComponent<number>, repl: TexelRepresentationInfo) {\n  return repl.bitsToNumber(repl.unpackBits(new Uint8Array(repl.pack(repl.encode(texel)))));\n}\n\nfunction apply(a: number[], b: number[], op: (x: number, y: number) => number) {\n  assert(a.length === b.length, `apply(${a}, ${b}): arrays must have same length`);\n  return a.map((v, i) => op(v, b[i]));\n}\n\n/**\n * At the corner of a cubemap we need to sample just 3 texels, not 4.\n * The texels are in\n *\n *   0:  (u,v)\n *   1:  (u + 1, v)\n *   2:  (u, v + 1)\n *   3:  (u + 1, v + 1)\n *\n * We pass in the original 2d (converted from cubemap) texture coordinate.\n * If it's within half a pixel of the edge in both directions then it's\n * a corner so we return the index of the one texel that's not needed.\n * Otherwise we return -1.\n */\nfunction getUnusedCubeCornerSampleIndex(textureSize: number, coords: vec3) {\n  const u = coords[0] * textureSize;\n  const v = coords[1] * textureSize;\n  if (v < 0.5) {\n    if (u < 0.5) {\n      return 0;\n    } else if (u >= textureSize - 0.5) {\n      return 1;\n    }\n  } else if (v >= textureSize - 0.5) {\n    if (u < 0.5) {\n      return 2;\n    } else if (u >= textureSize - 0.5) {\n      return 3;\n    }\n  }\n  return -1;\n}\n\nconst add = (a: number[], b: number[]) => apply(a, b, (x, y) => x + y);\n\nexport interface Texture {\n  texels: TexelView[];\n  descriptor: GPUTextureDescriptor;\n  viewDescriptor: GPUTextureViewDescriptor;\n}\n\n/**\n * Converts the src texel representation to an RGBA representation.\n */\nfunction convertPerTexelComponentToResultFormat(\n  src: PerTexelComponent<number>,\n  format: EncodableTextureFormat\n): PerTexelComponent<number> {\n  const rep = kTexelRepresentationInfo[format];\n  const out: PerTexelComponent<number> = { R: 0, G: 0, B: 0, A: 1 };\n  for (const component of rep.componentOrder) {\n    switch (component) {\n      case 'Stencil':\n      case 'Depth':\n        out.R = src[component];\n        break;\n      default:\n        assert(out[component] !== undefined); // checks that component = R, G, B or A\n        out[component] = src[component];\n    }\n  }\n  return out;\n}\n\n/**\n * Convert RGBA result format to texel view format of src texture.\n * Effectively this converts something like { R: 0.1, G: 0, B: 0, A: 1 }\n * to { Depth: 0.1 }\n */\nfunction convertResultFormatToTexelViewFormat(\n  src: PerTexelComponent<number>,\n  format: EncodableTextureFormat\n): PerTexelComponent<number> {\n  const rep = kTexelRepresentationInfo[format];\n  const out: PerTexelComponent<number> = {};\n  for (const component of rep.componentOrder) {\n    out[component] = src[component] ?? src.R;\n  }\n  return out;\n}\n\nfunction zeroValuePerTexelComponent(components: TexelComponent[]) {\n  const out: PerTexelComponent<number> = {};\n  for (const component of components) {\n    out[component] = 0;\n  }\n  return out;\n}\n\n/**\n * Returns the expect value for a WGSL builtin texture function for a single\n * mip level\n */\nexport function softwareTextureReadMipLevel<T extends Dimensionality>(\n  call: TextureCall<T>,\n  texture: Texture,\n  sampler: GPUSamplerDescriptor | undefined,\n  mipLevel: number\n): PerTexelComponent<number> {\n  const { format } = texture.texels[0];\n  const rep = kTexelRepresentationInfo[format];\n  const textureSize = virtualMipSize(\n    texture.descriptor.dimension || '2d',\n    texture.descriptor.size,\n    mipLevel\n  );\n  const addressMode = [\n    sampler?.addressModeU ?? 'clamp-to-edge',\n    sampler?.addressModeV ?? 'clamp-to-edge',\n    sampler?.addressModeW ?? 'clamp-to-edge',\n  ];\n\n  const load = (at: number[]) =>\n    texture.texels[mipLevel].color({\n      x: Math.floor(at[0]),\n      y: Math.floor(at[1] ?? 0),\n      z: call.arrayIndex ?? Math.floor(at[2] ?? 0),\n      sampleIndex: call.sampleIndex,\n    });\n\n  const isCube = texture.viewDescriptor.dimension === 'cube';\n\n  switch (call.builtin) {\n    case 'textureSample': {\n      let coords = toArray(call.coords!);\n\n      if (isCube) {\n        coords = convertCubeCoordToNormalized3DTextureCoord(coords as vec3);\n      }\n\n      // convert normalized to absolute texel coordinate\n      // ┌───┬───┬───┬───┐\n      // │ a │   │   │   │  norm: a = 1/8, b = 7/8\n      // ├───┼───┼───┼───┤   abs: a = 0,   b = 3\n      // │   │   │   │   │\n      // ├───┼───┼───┼───┤\n      // │   │   │   │   │\n      // ├───┼───┼───┼───┤\n      // │   │   │   │ b │\n      // └───┴───┴───┴───┘\n      let at = coords.map((v, i) => v * textureSize[i] - 0.5);\n\n      // Apply offset in whole texel units\n      // This means the offset is added at each mip level in texels. There's no\n      // scaling for each level.\n      if (call.offset !== undefined) {\n        at = add(at, toArray(call.offset));\n      }\n\n      const samples: { at: number[]; weight: number }[] = [];\n\n      const filter = sampler?.minFilter ?? 'nearest';\n      switch (filter) {\n        case 'linear': {\n          // 'p0' is the lower texel for 'at'\n          const p0 = at.map(v => Math.floor(v));\n          // 'p1' is the higher texel for 'at'\n          // If it's cube then don't advance Z.\n          const p1 = p0.map((v, i) => v + (isCube ? (i === 2 ? 0 : 1) : 1));\n\n          // interpolation weights for p0 and p1\n          const p1W = at.map((v, i) => v - p0[i]);\n          const p0W = p1W.map(v => 1 - v);\n\n          switch (coords.length) {\n            case 1:\n              samples.push({ at: p0, weight: p0W[0] });\n              samples.push({ at: p1, weight: p1W[0] });\n              break;\n            case 2: {\n              samples.push({ at: p0, weight: p0W[0] * p0W[1] });\n              samples.push({ at: [p1[0], p0[1]], weight: p1W[0] * p0W[1] });\n              samples.push({ at: [p0[0], p1[1]], weight: p0W[0] * p1W[1] });\n              samples.push({ at: p1, weight: p1W[0] * p1W[1] });\n              break;\n            }\n            case 3: {\n              // cube sampling, here in the software renderer, is the same\n              // as 2d sampling. We'll sample at most 4 texels. The weights are\n              // the same as if it was just one plane. If the points fall outside\n              // the slice they'll be wrapped by wrapFaceCoordToCubeFaceAtEdgeBoundaries\n              // below.\n              if (isCube) {\n                samples.push({ at: p0, weight: p0W[0] * p0W[1] });\n                samples.push({ at: [p1[0], p0[1], p0[2]], weight: p1W[0] * p0W[1] });\n                samples.push({ at: [p0[0], p1[1], p0[2]], weight: p0W[0] * p1W[1] });\n                samples.push({ at: p1, weight: p1W[0] * p1W[1] });\n                const ndx = getUnusedCubeCornerSampleIndex(textureSize[0], coords as vec3);\n                if (ndx >= 0) {\n                  // # Issues with corners of cubemaps\n                  //\n                  // note: I tried multiple things here\n                  //\n                  // 1. distribute 1/3 of the weight of the removed sample to each of the remaining samples\n                  // 2. distribute 1/2 of the weight of the removed sample to the 2 samples that are not the \"main\" sample.\n                  // 3. normalize the weights of the remaining 3 samples.\n                  //\n                  // none of them matched the M1 in all cases. Checking the dEQP I found this comment\n                  //\n                  // > If any of samples is out of both edges, implementations can do pretty much anything according to spec.\n                  // https://github.com/KhronosGroup/VK-GL-CTS/blob/d2d6aa65607383bb29c8398fe6562c6b08b4de57/framework/common/tcuTexCompareVerifier.cpp#L882\n                  //\n                  // If I understand this correctly it matches the OpenGL ES 3.1 spec it says\n                  // it's implementation defined.\n                  //\n                  // > OpenGL ES 3.1 section 8.12.1 Seamless Cubemap Filtering\n                  // >\n                  // > -  If a texture sample location would lie in the texture\n                  // >    border in both u and v (in one of the corners of the\n                  // >    cube), there is no unique neighboring face from which to\n                  // >    extract one texel. The recommended method to generate this\n                  // >    texel is to average the values of the three available\n                  // >    samples. However, implementations are free to construct\n                  // >    this fourth texel in another way, so long as, when the\n                  // >    three available samples have the same value, this texel\n                  // >    also has that value.\n                  //\n                  // I'm not sure what \"average the values of the three available samples\"\n                  // means. To me that would be (a+b+c)/3 or in other words, set all the\n                  // weights to 0.33333 but that's not what the M1 is doing.\n                  unreachable('corners of cubemaps are not testable');\n                }\n              } else {\n                const p = [p0, p1];\n                const w = [p0W, p1W];\n                for (let z = 0; z < 2; ++z) {\n                  for (let y = 0; y < 2; ++y) {\n                    for (let x = 0; x < 2; ++x) {\n                      samples.push({\n                        at: [p[x][0], p[y][1], p[z][2]],\n                        weight: w[x][0] * w[y][1] * w[z][2],\n                      });\n                    }\n                  }\n                }\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case 'nearest': {\n          const p = at.map(v => Math.round(quantizeToF32(v)));\n          samples.push({ at: p, weight: 1 });\n          break;\n        }\n        default:\n          unreachable();\n      }\n\n      const out: PerTexelComponent<number> = {};\n      const ss = [];\n      for (const sample of samples) {\n        const c = isCube\n          ? wrapFaceCoordToCubeFaceAtEdgeBoundaries(textureSize[0], sample.at as vec3)\n          : applyAddressModesToCoords(addressMode, textureSize, sample.at);\n        const v = load(c);\n        ss.push(v);\n        for (const component of rep.componentOrder) {\n          out[component] = (out[component] ?? 0) + v[component]! * sample.weight;\n        }\n      }\n\n      return convertPerTexelComponentToResultFormat(out, format);\n    }\n    case 'textureLoad': {\n      const out: PerTexelComponent<number> = isOutOfBoundsCall(texture, call)\n        ? zeroValuePerTexelComponent(rep.componentOrder)\n        : load(call.coords!);\n      return convertPerTexelComponentToResultFormat(out, format);\n    }\n  }\n}\n\n/**\n * The software version of a texture builtin (eg: textureSample)\n * Note that this is not a complete implementation. Rather it's only\n * what's needed to generate the correct expected value for the tests.\n */\nexport function softwareTextureRead<T extends Dimensionality>(\n  call: TextureCall<T>,\n  texture: Texture,\n  sampler: GPUSamplerDescriptor\n): PerTexelComponent<number> {\n  assert(call.ddx !== undefined);\n  assert(call.ddy !== undefined);\n  const rep = kTexelRepresentationInfo[texture.texels[0].format];\n  const texSize = reifyExtent3D(texture.descriptor.size);\n  const textureSize = [texSize.width, texSize.height];\n\n  // ddx and ddy are the values that would be passed to textureSampleGrad\n  // If we're emulating textureSample then they're the computed derivatives\n  // such that if we passed them to textureSampleGrad they'd produce the\n  // same result.\n  const ddx: readonly number[] = typeof call.ddx === 'number' ? [call.ddx] : call.ddx;\n  const ddy: readonly number[] = typeof call.ddy === 'number' ? [call.ddy] : call.ddy;\n\n  // Compute the mip level the same way textureSampleGrad does\n  const scaledDdx = ddx.map((v, i) => v * textureSize[i]);\n  const scaledDdy = ddy.map((v, i) => v * textureSize[i]);\n  const dotDDX = dotProduct(scaledDdx, scaledDdx);\n  const dotDDY = dotProduct(scaledDdy, scaledDdy);\n  const deltaMax = Math.max(dotDDX, dotDDY);\n  // MAINTENANCE_TODO: handle texture view baseMipLevel and mipLevelCount?\n  const mipLevel = 0.5 * Math.log2(deltaMax);\n\n  const mipLevelCount = texture.texels.length;\n  const maxLevel = mipLevelCount - 1;\n\n  switch (sampler.mipmapFilter) {\n    case 'linear': {\n      const clampedMipLevel = clamp(mipLevel, { min: 0, max: maxLevel });\n      const baseMipLevel = Math.floor(clampedMipLevel);\n      const nextMipLevel = Math.ceil(clampedMipLevel);\n      const t0 = softwareTextureReadMipLevel<T>(call, texture, sampler, baseMipLevel);\n      const t1 = softwareTextureReadMipLevel<T>(call, texture, sampler, nextMipLevel);\n      const mix = mipLevel % 1;\n      const values = [\n        { v: t0, weight: 1 - mix },\n        { v: t1, weight: mix },\n      ];\n      const out: PerTexelComponent<number> = {};\n      for (const { v, weight } of values) {\n        for (const component of rep.componentOrder) {\n          out[component] = (out[component] ?? 0) + v[component]! * weight;\n        }\n      }\n      return out;\n    }\n    default: {\n      const baseMipLevel = Math.floor(\n        clamp(mipLevel + 0.5, { min: 0, max: texture.texels.length - 1 })\n      );\n      return softwareTextureReadMipLevel<T>(call, texture, sampler, baseMipLevel);\n    }\n  }\n}\n\nexport type TextureTestOptions = {\n  ddx?: number; // the derivative we want at sample time\n  ddy?: number;\n  uvwStart?: readonly [number, number]; // the starting uv value (these are used make the coordinates negative as it uncovered issues on some hardware)\n  offset?: readonly [number, number]; // a constant offset\n};\n\n/**\n * out of bounds is defined as any of the following being true\n *\n * * coords is outside the range [0, textureDimensions(t, level))\n * * array_index is outside the range [0, textureNumLayers(t))\n * * level is outside the range [0, textureNumLevels(t))\n * * sample_index is outside the range [0, textureNumSamples(s))\n */\nfunction isOutOfBoundsCall<T extends Dimensionality>(texture: Texture, call: TextureCall<T>) {\n  assert(call.coords !== undefined);\n  assert(call.offset === undefined);\n\n  const desc = reifyTextureDescriptor(texture.descriptor);\n\n  const { coords, mipLevel, arrayIndex, sampleIndex } = call;\n\n  if (mipLevel !== undefined && (mipLevel < 0 || mipLevel >= desc.mipLevelCount)) {\n    return true;\n  }\n\n  const size = virtualMipSize(\n    texture.descriptor.dimension || '2d',\n    texture.descriptor.size,\n    mipLevel ?? 0\n  );\n\n  for (let i = 0; i < coords.length; ++i) {\n    const v = coords[i];\n    if (v < 0 || v >= size[i]) {\n      return true;\n    }\n  }\n\n  if (arrayIndex !== undefined) {\n    const size = reifyExtent3D(desc.size);\n    if (arrayIndex < 0 || arrayIndex >= size.depthOrArrayLayers) {\n      return true;\n    }\n  }\n\n  if (sampleIndex !== undefined) {\n    if (sampleIndex < 0 || sampleIndex >= desc.sampleCount) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * For a texture builtin with no sampler (eg textureLoad),\n * any out of bounds access is allowed to return one of:\n *\n * * the value of any texel in the texture\n * * 0,0,0,0 or 0,0,0,1 if not a depth texture\n * * 0 if a depth texture\n */\nfunction okBecauseOutOfBounds<T extends Dimensionality>(\n  texture: Texture,\n  call: TextureCall<T>,\n  gotRGBA: PerTexelComponent<number>,\n  maxFractionalDiff: number\n) {\n  if (!isOutOfBoundsCall(texture, call)) {\n    return false;\n  }\n\n  if (texture.descriptor.format.includes('depth')) {\n    if (gotRGBA.R === 0) {\n      return true;\n    }\n  } else {\n    if (\n      gotRGBA.R === 0 &&\n      gotRGBA.B === 0 &&\n      gotRGBA.G === 0 &&\n      (gotRGBA.A === 0 || gotRGBA.A === 1)\n    ) {\n      return true;\n    }\n  }\n\n  for (let mipLevel = 0; mipLevel < texture.texels.length; ++mipLevel) {\n    const mipTexels = texture.texels[mipLevel];\n    const size = virtualMipSize(\n      texture.descriptor.dimension || '2d',\n      texture.descriptor.size,\n      mipLevel\n    );\n    const sampleCount = texture.descriptor.sampleCount ?? 1;\n    for (let z = 0; z < size[2]; ++z) {\n      for (let y = 0; y < size[1]; ++y) {\n        for (let x = 0; x < size[0]; ++x) {\n          for (let sampleIndex = 0; sampleIndex < sampleCount; ++sampleIndex) {\n            const texel = mipTexels.color({ x, y, z, sampleIndex });\n            const rgba = convertPerTexelComponentToResultFormat(texel, mipTexels.format);\n            if (texelsApproximatelyEqual(gotRGBA, rgba, mipTexels.format, maxFractionalDiff)) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return false;\n}\n\nconst kRGBAComponents = [\n  TexelComponent.R,\n  TexelComponent.G,\n  TexelComponent.B,\n  TexelComponent.A,\n] as const;\n\nconst kRComponent = [TexelComponent.R] as const;\n\nfunction texelsApproximatelyEqual(\n  gotRGBA: PerTexelComponent<number>,\n  expectRGBA: PerTexelComponent<number>,\n  format: EncodableTextureFormat,\n  maxFractionalDiff: number\n) {\n  const rep = kTexelRepresentationInfo[format];\n  const got = convertResultFormatToTexelViewFormat(gotRGBA, format);\n  const expect = convertResultFormatToTexelViewFormat(expectRGBA, format);\n  const gULP = convertPerTexelComponentToResultFormat(\n    rep.bitsToULPFromZero(rep.numberToBits(got)),\n    format\n  );\n  const eULP = convertPerTexelComponentToResultFormat(\n    rep.bitsToULPFromZero(rep.numberToBits(expect)),\n    format\n  );\n\n  const rgbaComponentsToCheck = isDepthOrStencilTextureFormat(format)\n    ? kRComponent\n    : kRGBAComponents;\n\n  for (const component of rgbaComponentsToCheck) {\n    const g = gotRGBA[component]!;\n    const e = expectRGBA[component]!;\n    const absDiff = Math.abs(g - e);\n    const ulpDiff = Math.abs(gULP[component]! - eULP[component]!);\n    if (ulpDiff > 3 && absDiff > maxFractionalDiff) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Checks the result of each call matches the expected result.\n */\nexport async function checkCallResults<T extends Dimensionality>(\n  t: GPUTest,\n  texture: Texture,\n  textureType: string,\n  sampler: GPUSamplerDescriptor | undefined,\n  calls: TextureCall<T>[],\n  results: PerTexelComponent<number>[]\n) {\n  const errs: string[] = [];\n  const rep = kTexelRepresentationInfo[texture.texels[0].format];\n  const maxFractionalDiff =\n    sampler?.minFilter === 'linear' ||\n    sampler?.magFilter === 'linear' ||\n    sampler?.mipmapFilter === 'linear'\n      ? getMaxFractionalDiffForTextureFormat(texture.descriptor.format)\n      : 0;\n\n  for (let callIdx = 0; callIdx < calls.length; callIdx++) {\n    const call = calls[callIdx];\n    const gotRGBA = results[callIdx];\n    const expectRGBA = softwareTextureReadMipLevel(call, texture, sampler, call.mipLevel ?? 0);\n\n    if (\n      texelsApproximatelyEqual(gotRGBA, expectRGBA, texture.texels[0].format, maxFractionalDiff)\n    ) {\n      continue;\n    }\n\n    if (!sampler && okBecauseOutOfBounds(texture, call, gotRGBA, maxFractionalDiff)) {\n      continue;\n    }\n\n    const got = convertResultFormatToTexelViewFormat(gotRGBA, texture.texels[0].format);\n    const expect = convertResultFormatToTexelViewFormat(expectRGBA, texture.texels[0].format);\n    const gULP = rep.bitsToULPFromZero(rep.numberToBits(got));\n    const eULP = rep.bitsToULPFromZero(rep.numberToBits(expect));\n    for (const component of rep.componentOrder) {\n      const g = got[component]!;\n      const e = expect[component]!;\n      const absDiff = Math.abs(g - e);\n      const ulpDiff = Math.abs(gULP[component]! - eULP[component]!);\n      const relDiff = absDiff / Math.max(Math.abs(g), Math.abs(e));\n      if (ulpDiff > 3 && absDiff > maxFractionalDiff) {\n        const desc = describeTextureCall(call);\n        const size = reifyExtent3D(texture.descriptor.size);\n        errs.push(`component was not as expected:\n      size: [${size.width}, ${size.height}, ${size.depthOrArrayLayers}]\n  mipCount: ${texture.descriptor.mipLevelCount ?? 1}\n      call: ${desc}  // #${callIdx}\n component: ${component}\n       got: ${g}\n  expected: ${e}\n  abs diff: ${absDiff.toFixed(4)}\n  rel diff: ${(relDiff * 100).toFixed(2)}%\n  ulp diff: ${ulpDiff}\n`);\n        if (sampler) {\n          const expectedSamplePoints = [\n            'expected:',\n            ...(await identifySamplePoints(texture, (texels: TexelView) => {\n              return Promise.resolve(\n                softwareTextureReadMipLevel(\n                  call,\n                  {\n                    texels: [texels],\n                    descriptor: texture.descriptor,\n                    viewDescriptor: texture.viewDescriptor,\n                  },\n                  sampler,\n                  0\n                )\n              );\n            })),\n          ];\n          const gotSamplePoints = [\n            'got:',\n            ...(await identifySamplePoints(texture, async (texels: TexelView) => {\n              const gpuTexture = createTextureFromTexelViews(t, [texels], texture.descriptor);\n              const result = (\n                await doTextureCalls(t, gpuTexture, texture.viewDescriptor, textureType, sampler, [\n                  call,\n                ])\n              )[0];\n              gpuTexture.destroy();\n              return result;\n            })),\n          ];\n          errs.push('  sample points:');\n          errs.push(layoutTwoColumns(expectedSamplePoints, gotSamplePoints).join('\\n'));\n          errs.push('', '');\n        }\n      }\n    }\n  }\n\n  return errs.length > 0 ? new Error(errs.join('\\n')) : undefined;\n}\n\n/**\n * \"Renders a quad\" to a TexelView with the given parameters,\n * sampling from the given Texture.\n */\nexport function softwareRasterize<T extends Dimensionality>(\n  texture: Texture,\n  sampler: GPUSamplerDescriptor,\n  targetSize: [number, number],\n  options: TextureTestOptions\n) {\n  const [width, height] = targetSize;\n  const { ddx = 1, ddy = 1, uvwStart = [0, 0] } = options;\n  const format = 'rgba32float';\n\n  const textureSize = reifyExtent3D(texture.descriptor.size);\n\n  // MAINTENANCE_TODO: Consider passing these in as a similar computation\n  // happens in putDataInTextureThenDrawAndCheckResultsComparedToSoftwareRasterizer.\n  // The issue is there, the calculation is \"what do we need to multiply the unitQuad\n  // by to get the derivatives we want\". The calculation here is \"what coordinate\n  // will we get for a given frag coordinate\". It turns out to be the same calculation\n  // but needs rephrasing them so they are more obviously the same would help\n  // consolidate them into one calculation.\n  const screenSpaceUMult = (ddx * width) / textureSize.width;\n  const screenSpaceVMult = (ddy * height) / textureSize.height;\n\n  const rep = kTexelRepresentationInfo[format];\n\n  const expData = new Float32Array(width * height * 4);\n  for (let y = 0; y < height; ++y) {\n    const fragY = height - y - 1 + 0.5;\n    for (let x = 0; x < width; ++x) {\n      const fragX = x + 0.5;\n      // This code calculates the same value that will be passed to\n      // `textureSample` in the fragment shader for a given frag coord (see the\n      // WGSL code which uses the same formula, but using interpolation). That\n      // shader renders a clip space quad and includes a inter-stage \"uv\"\n      // coordinates that start with a unit quad (0,0) to (1,1) and is\n      // multiplied by ddx,ddy and as added in uStart and vStart\n      //\n      // uv = unitQuad * vec2(ddx, ddy) + vec2(vStart, uStart);\n      //\n      // softwareTextureRead<T> simulates a single call to `textureSample` so\n      // here we're computing the `uv` value that will be passed for a\n      // particular fragment coordinate. fragX / width, fragY / height provides\n      // the unitQuad value.\n      //\n      // ddx and ddy in this case are the derivative values we want to test. We\n      // pass those into the softwareTextureRead<T> as they would normally be\n      // derived from the change in coord.\n      const coords = [\n        (fragX / width) * screenSpaceUMult + uvwStart[0],\n        (fragY / height) * screenSpaceVMult + uvwStart[1],\n      ] as T;\n      const call: TextureCall<T> = {\n        builtin: 'textureSample',\n        coordType: 'f',\n        coords,\n        ddx: [ddx / textureSize.width, 0] as T,\n        ddy: [0, ddy / textureSize.height] as T,\n        offset: options.offset as T,\n      };\n      const sample = softwareTextureRead<T>(call, texture, sampler);\n      const rgba = { R: 0, G: 0, B: 0, A: 1, ...sample };\n      const asRgba32Float = new Float32Array(rep.pack(rgba));\n      expData.set(asRgba32Float, (y * width + x) * 4);\n    }\n  }\n\n  return TexelView.fromTextureDataByReference(format, new Uint8Array(expData.buffer), {\n    bytesPerRow: width * 4 * 4,\n    rowsPerImage: height,\n    subrectOrigin: [0, 0, 0],\n    subrectSize: targetSize,\n  });\n}\n\n/**\n * Render textured quad to an rgba32float texture.\n */\nexport function drawTexture(\n  t: GPUTest & TextureTestMixinType,\n  texture: GPUTexture,\n  samplerDesc: GPUSamplerDescriptor,\n  options: TextureTestOptions\n) {\n  const device = t.device;\n  const { ddx = 1, ddy = 1, uvwStart = [0, 0, 0], offset } = options;\n\n  const format = 'rgba32float';\n  const renderTarget = t.createTextureTracked({\n    format,\n    size: [32, 32],\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n  });\n\n  // Compute the amount we need to multiply the unitQuad by get the\n  // derivatives we want.\n  const uMult = (ddx * renderTarget.width) / texture.width;\n  const vMult = (ddy * renderTarget.height) / texture.height;\n\n  const offsetWGSL = offset ? `, vec2i(${offset[0]},${offset[1]})` : '';\n\n  const code = `\nstruct InOut {\n  @builtin(position) pos: vec4f,\n  @location(0) uv: vec2f,\n};\n\n@vertex fn vs(@builtin(vertex_index) vertex_index : u32) -> InOut {\n  let positions = array(\n    vec2f(-1,  1), vec2f( 1,  1),\n    vec2f(-1, -1), vec2f( 1, -1),\n  );\n  let pos = positions[vertex_index];\n  return InOut(\n    vec4f(pos, 0, 1),\n    (pos * 0.5 + 0.5) * vec2f(${uMult}, ${vMult}) + vec2f(${uvwStart[0]}, ${uvwStart[1]}),\n  );\n}\n\n@group(0) @binding(0) var          T    : texture_2d<f32>;\n@group(0) @binding(1) var          S    : sampler;\n\n@fragment fn fs(v: InOut) -> @location(0) vec4f {\n  return textureSample(T, S, v.uv${offsetWGSL});\n}\n`;\n\n  const shaderModule = device.createShaderModule({ code });\n\n  const pipeline = device.createRenderPipeline({\n    layout: 'auto',\n    vertex: { module: shaderModule },\n    fragment: {\n      module: shaderModule,\n      targets: [{ format }],\n    },\n    primitive: { topology: 'triangle-strip' },\n  });\n\n  const sampler = device.createSampler(samplerDesc);\n\n  const bindGroup = device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [\n      { binding: 0, resource: texture.createView() },\n      { binding: 1, resource: sampler },\n    ],\n  });\n\n  const encoder = device.createCommandEncoder();\n\n  const renderPass = encoder.beginRenderPass({\n    colorAttachments: [{ view: renderTarget.createView(), loadOp: 'clear', storeOp: 'store' }],\n  });\n\n  renderPass.setPipeline(pipeline);\n  renderPass.setBindGroup(0, bindGroup);\n  renderPass.draw(4);\n  renderPass.end();\n  device.queue.submit([encoder.finish()]);\n\n  return renderTarget;\n}\n\nfunction getMaxFractionalDiffForTextureFormat(format: GPUTextureFormat) {\n  // Note: I'm not sure what we should do here. My assumption is, given texels\n  // have random values, the difference between 2 texels can be very large. In\n  // the current version, for a float texture they can be +/- 1000 difference.\n  // Sampling is very GPU dependent. So if one pixel gets a random value of\n  // -1000 and the neighboring pixel gets +1000 then any slight variation in how\n  // sampling is applied will generate a large difference when interpolating\n  // between -1000 and +1000.\n  //\n  // We could make some entry for every format but for now I just put the\n  // tolerances here based on format texture suffix.\n  //\n  // It's possible the math in the software rasterizer is just bad but the\n  // results certainly seem close.\n  //\n  // These tolerances started from the OpenGL ES dEQP tests.\n  // Those tests always render to an rgba8unorm texture. The shaders do effectively\n  //\n  //   result = textureSample(...) * scale + bias\n  //\n  // to get the results in a 0.0 to 1.0 range. After reading the values back they\n  // expand them to their original ranges with\n  //\n  //   value = (result - bias) / scale;\n  //\n  // Tolerances from dEQP\n  // --------------------\n  // 8unorm: 3.9 / 255\n  // 8snorm: 7.9 / 128\n  // 2unorm: 7.9 / 512\n  // ufloat: 156.249\n  //  float: 31.2498\n  //\n  // The numbers below have been set empirically to get the tests to pass on all\n  // devices. The devices with the most divergence from the calculated expected\n  // values are MacOS Intel and AMD.\n  //\n  // MAINTENANCE_TODO: Double check the software rendering math and lower these\n  // tolerances if possible.\n\n  if (format.includes('8unorm')) {\n    return 7 / 255;\n  } else if (format.includes('2unorm')) {\n    return 9 / 512;\n  } else if (format.includes('unorm')) {\n    return 7 / 255;\n  } else if (format.includes('8snorm')) {\n    return 7.9 / 128;\n  } else if (format.includes('snorm')) {\n    return 7.9 / 128;\n  } else if (format.endsWith('ufloat')) {\n    return 156.249;\n  } else if (format.endsWith('float')) {\n    return 44;\n  } else {\n    // It's likely an integer format. In any case, zero tolerance is passable.\n    return 0;\n  }\n}\n\nexport function checkTextureMatchesExpectedTexelView(\n  t: GPUTest & TextureTestMixinType,\n  format: GPUTextureFormat,\n  actualTexture: GPUTexture,\n  expectedTexelView: TexelView\n) {\n  const maxFractionalDiff = getMaxFractionalDiffForTextureFormat(format);\n  t.expectTexelViewComparisonIsOkInTexture(\n    { texture: actualTexture },\n    expectedTexelView,\n    [actualTexture.width, actualTexture.height],\n    { maxFractionalDiff }\n  );\n}\n\n/**\n * Puts data in a texture. Renders a quad to a rgba32float. Then \"software renders\"\n * to a TexelView the expected result and compares the rendered texture to the\n * expected TexelView.\n */\nexport async function putDataInTextureThenDrawAndCheckResultsComparedToSoftwareRasterizer<\n  T extends Dimensionality,\n>(\n  t: GPUTest & TextureTestMixinType,\n  descriptor: GPUTextureDescriptor,\n  viewDescriptor: GPUTextureViewDescriptor,\n  samplerDesc: GPUSamplerDescriptor,\n  options: TextureTestOptions\n) {\n  const { texture, texels } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n\n  const actualTexture = drawTexture(t, texture, samplerDesc, options);\n  const expectedTexelView = softwareRasterize<T>(\n    { descriptor, texels, viewDescriptor },\n    samplerDesc,\n    [actualTexture.width, actualTexture.height],\n    options\n  );\n\n  checkTextureMatchesExpectedTexelView(t, texture.format, actualTexture, expectedTexelView);\n}\n\nconst sumOfCharCodesOfString = (s: unknown) =>\n  String(s)\n    .split('')\n    .reduce((sum, c) => sum + c.charCodeAt(0), 0);\n\n/**\n * Makes a function that fills a block portion of a Uint8Array with random valid data\n * for an astc block.\n *\n * The astc format is fairly complicated. For now we do the simplest thing.\n * which is to set the block as a \"void-extent\" block (a solid color).\n * This makes our test have far less precision.\n *\n * MAINTENANCE_TODO: generate other types of astc blocks. One option would\n * be to randomly select from set of pre-made blocks.\n *\n * See Spec:\n * https://registry.khronos.org/OpenGL/extensions/KHR/KHR_texture_compression_astc_hdr.txt\n */\nfunction makeAstcBlockFiller(format: GPUTextureFormat) {\n  const info = kTextureFormatInfo[format];\n  const bytesPerBlock = info.color!.bytes;\n  return (data: Uint8Array, offset: number, hashBase: number) => {\n    // set the block to be a void-extent block\n    data.set(\n      [\n        0b1111_1100, // 0\n        0b1111_1101, // 1\n        0b1111_1111, // 2\n        0b1111_1111, // 3\n        0b1111_1111, // 4\n        0b1111_1111, // 5\n        0b1111_1111, // 6\n        0b1111_1111, // 7\n      ],\n      offset\n    );\n    // fill the rest of the block with random data\n    const end = offset + bytesPerBlock;\n    for (let i = offset + 8; i < end; ++i) {\n      data[i] = hashU32(hashBase, i);\n    }\n  };\n}\n\n/**\n * Makes a function that fills a block portion of a Uint8Array with random bytes.\n */\nfunction makeRandomBytesBlockFiller(format: GPUTextureFormat) {\n  const info = kTextureFormatInfo[format];\n  const bytesPerBlock = info.color!.bytes;\n  return (data: Uint8Array, offset: number, hashBase: number) => {\n    const end = offset + bytesPerBlock;\n    for (let i = offset; i < end; ++i) {\n      data[i] = hashU32(hashBase, i);\n    }\n  };\n}\n\nfunction getBlockFiller(format: GPUTextureFormat) {\n  if (format.startsWith('astc')) {\n    return makeAstcBlockFiller(format);\n  } else {\n    return makeRandomBytesBlockFiller(format);\n  }\n}\n\n/**\n * Fills a texture with random data.\n */\nexport function fillTextureWithRandomData(device: GPUDevice, texture: GPUTexture) {\n  assert(!isCompressedFloatTextureFormat(texture.format));\n  const info = kTextureFormatInfo[texture.format];\n  const hashBase =\n    sumOfCharCodesOfString(texture.format) +\n    sumOfCharCodesOfString(texture.dimension) +\n    texture.width +\n    texture.height +\n    texture.depthOrArrayLayers +\n    texture.mipLevelCount;\n  const bytesPerBlock = info.color!.bytes;\n  const fillBlock = getBlockFiller(texture.format);\n  for (let mipLevel = 0; mipLevel < texture.mipLevelCount; ++mipLevel) {\n    const size = physicalMipSizeFromTexture(texture, mipLevel);\n    const blocksAcross = Math.ceil(size[0] / info.blockWidth);\n    const blocksDown = Math.ceil(size[1] / info.blockHeight);\n    const bytesPerRow = blocksAcross * bytesPerBlock;\n    const bytesNeeded = bytesPerRow * blocksDown * size[2];\n    const data = new Uint8Array(bytesNeeded);\n    for (let offset = 0; offset < bytesNeeded; offset += bytesPerBlock) {\n      fillBlock(data, offset, hashBase);\n    }\n    device.queue.writeTexture(\n      { texture, mipLevel },\n      data,\n      { bytesPerRow, rowsPerImage: blocksDown },\n      size\n    );\n  }\n}\n\nconst s_readTextureToRGBA32DeviceToPipeline = new WeakMap<\n  GPUDevice,\n  Map<GPUTextureViewDimension, GPUComputePipeline>\n>();\n\n// MAINTENANCE_TODO: remove cast once textureBindingViewDimension is added to IDL\nfunction getEffectiveViewDimension(\n  t: GPUTest,\n  descriptor: GPUTextureDescriptor\n): GPUTextureViewDimension {\n  const { textureBindingViewDimension } = descriptor as unknown as {\n    textureBindingViewDimension?: GPUTextureViewDimension;\n  };\n  const size = reifyExtent3D(descriptor.size);\n  return effectiveViewDimensionForDimension(\n    textureBindingViewDimension,\n    descriptor.dimension,\n    size.depthOrArrayLayers\n  );\n}\n\nexport async function readTextureToTexelViews(\n  t: GPUTest,\n  texture: GPUTexture,\n  descriptor: GPUTextureDescriptor,\n  format: EncodableTextureFormat\n) {\n  const device = t.device;\n  const viewDimensionToPipelineMap =\n    s_readTextureToRGBA32DeviceToPipeline.get(device) ??\n    new Map<GPUTextureViewDimension, GPUComputePipeline>();\n  s_readTextureToRGBA32DeviceToPipeline.set(device, viewDimensionToPipelineMap);\n\n  const viewDimension = getEffectiveViewDimension(t, descriptor);\n  let pipeline = viewDimensionToPipelineMap.get(viewDimension);\n  if (!pipeline) {\n    let textureWGSL;\n    let loadWGSL;\n    let dimensionWGSL = 'textureDimensions(tex, uni.mipLevel)';\n    switch (viewDimension) {\n      case '2d':\n        if (texture.sampleCount > 1) {\n          textureWGSL = 'texture_multisampled_2d<f32>';\n          loadWGSL = 'textureLoad(tex, coord.xy, sampleIndex)';\n          dimensionWGSL = 'textureDimensions(tex)';\n        } else {\n          textureWGSL = 'texture_2d<f32>';\n          loadWGSL = 'textureLoad(tex, coord.xy, mipLevel)';\n        }\n        break;\n      case 'cube-array': // cube-array doesn't exist in compat so we can just use 2d_array for this\n      case '2d-array':\n        textureWGSL = 'texture_2d_array<f32>';\n        loadWGSL = `\n          textureLoad(\n              tex,\n              coord.xy,\n              coord.z,\n              mipLevel)`;\n        break;\n      case '3d':\n        textureWGSL = 'texture_3d<f32>';\n        loadWGSL = 'textureLoad(tex, coord.xyz, mipLevel)';\n        break;\n      case 'cube':\n        textureWGSL = 'texture_cube<f32>';\n        loadWGSL = `\n          textureLoadCubeAs2DArray(tex, coord.xy, coord.z, mipLevel);\n        `;\n        break;\n      default:\n        unreachable(`unsupported view: ${viewDimension}`);\n    }\n    const module = device.createShaderModule({\n      code: `\n        const faceMat = array(\n          mat3x3f( 0,  0,  -2,  0, -2,   0,  1,  1,   1),   // pos-x\n          mat3x3f( 0,  0,   2,  0, -2,   0, -1,  1,  -1),   // neg-x\n          mat3x3f( 2,  0,   0,  0,  0,   2, -1,  1,  -1),   // pos-y\n          mat3x3f( 2,  0,   0,  0,  0,  -2, -1, -1,   1),   // neg-y\n          mat3x3f( 2,  0,   0,  0, -2,   0, -1,  1,   1),   // pos-z\n          mat3x3f(-2,  0,   0,  0, -2,   0,  1,  1,  -1));  // neg-z\n\n        // needed for compat mode.\n        fn textureLoadCubeAs2DArray(tex: texture_cube<f32>, coord: vec2u, layer: u32, mipLevel: u32) -> vec4f {\n          // convert texel coord normalized coord\n          let size = textureDimensions(tex, mipLevel);\n          let uv = (vec2f(coord) + 0.5) / vec2f(size.xy);\n\n          // convert uv + layer into cube coord\n          let cubeCoord = faceMat[layer] * vec3f(uv, 1.0);\n\n          return textureSampleLevel(tex, smp, cubeCoord, f32(mipLevel));\n        }\n\n        struct Uniforms {\n          mipLevel: u32,\n          sampleCount: u32,\n        };\n\n        @group(0) @binding(0) var<uniform> uni: Uniforms;\n        @group(0) @binding(1) var tex: ${textureWGSL};\n        @group(0) @binding(2) var smp: sampler;\n        @group(0) @binding(3) var<storage, read_write> data: array<vec4f>;\n\n        @compute @workgroup_size(1) fn cs(\n          @builtin(global_invocation_id) global_invocation_id : vec3<u32>) {\n          _ = smp;\n          let size = ${dimensionWGSL};\n          let ndx = global_invocation_id.z * size.x * size.y * uni.sampleCount +\n                    global_invocation_id.y * size.x * uni.sampleCount +\n                    global_invocation_id.x;\n          let coord = vec3u(global_invocation_id.x / uni.sampleCount, global_invocation_id.yz);\n          let sampleIndex = global_invocation_id.x % uni.sampleCount;\n          let mipLevel = uni.mipLevel;\n          data[ndx] = ${loadWGSL};\n        }\n      `,\n    });\n    pipeline = device.createComputePipeline({ layout: 'auto', compute: { module } });\n    viewDimensionToPipelineMap.set(viewDimension, pipeline);\n  }\n\n  const encoder = device.createCommandEncoder();\n\n  const readBuffers = [];\n  for (let mipLevel = 0; mipLevel < texture.mipLevelCount; ++mipLevel) {\n    const size = virtualMipSize(texture.dimension, texture, mipLevel);\n\n    const uniformValues = new Uint32Array([mipLevel, texture.sampleCount, 0, 0]); // min size is 16 bytes\n    const uniformBuffer = t.createBufferTracked({\n      size: uniformValues.byteLength,\n      usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n    });\n    device.queue.writeBuffer(uniformBuffer, 0, uniformValues);\n\n    const storageBuffer = t.createBufferTracked({\n      size: size[0] * size[1] * size[2] * 4 * 4 * texture.sampleCount, // rgba32float\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n    });\n\n    const readBuffer = t.createBufferTracked({\n      size: storageBuffer.size,\n      usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\n    });\n    readBuffers.push({ size, readBuffer });\n\n    const sampler = device.createSampler();\n\n    const bindGroup = device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [\n        { binding: 0, resource: { buffer: uniformBuffer } },\n        { binding: 1, resource: texture.createView({ dimension: viewDimension }) },\n        { binding: 2, resource: sampler },\n        { binding: 3, resource: { buffer: storageBuffer } },\n      ],\n    });\n\n    const pass = encoder.beginComputePass();\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bindGroup);\n    pass.dispatchWorkgroups(size[0] * texture.sampleCount, size[1], size[2]);\n    pass.end();\n    encoder.copyBufferToBuffer(storageBuffer, 0, readBuffer, 0, readBuffer.size);\n  }\n\n  device.queue.submit([encoder.finish()]);\n\n  const texelViews: TexelView[] = [];\n\n  for (const { readBuffer, size } of readBuffers) {\n    await readBuffer.mapAsync(GPUMapMode.READ);\n\n    // need a copy of the data since unmapping will nullify the typedarray view.\n    const data = new Float32Array(readBuffer.getMappedRange()).slice();\n    readBuffer.unmap();\n\n    const { sampleCount } = texture;\n    texelViews.push(\n      TexelView.fromTexelsAsColors(format, coord => {\n        const offset =\n          ((coord.z * size[0] * size[1] + coord.y * size[0] + coord.x) * sampleCount +\n            (coord.sampleIndex ?? 0)) *\n          4;\n        return {\n          R: data[offset + 0],\n          G: data[offset + 1],\n          B: data[offset + 2],\n          A: data[offset + 3],\n        };\n      })\n    );\n  }\n\n  return texelViews;\n}\n\n/**\n * Fills a texture with random data and returns that data as\n * an array of TexelView.\n *\n * For compressed textures the texture is filled with random bytes\n * and then read back from the GPU by sampling so the GPU decompressed\n * the texture.\n *\n * For uncompressed textures the TexelViews are generated and then\n * copied to the texture.\n */\nexport async function createTextureWithRandomDataAndGetTexels(\n  t: GPUTest,\n  descriptor: GPUTextureDescriptor\n) {\n  if (isCompressedTextureFormat(descriptor.format)) {\n    const texture = t.createTextureTracked(descriptor);\n\n    fillTextureWithRandomData(t.device, texture);\n    const texels = await readTextureToTexelViews(\n      t,\n      texture,\n      descriptor,\n      getTexelViewFormatForTextureFormat(texture.format)\n    );\n    return { texture, texels };\n  } else {\n    const texels = createRandomTexelViewMipmap(descriptor);\n    const texture = createTextureFromTexelViews(t, texels, descriptor);\n    return { texture, texels };\n  }\n}\n\nconst kFaceNames = ['+x', '-x', '+y', '-y', '+z', '-z'] as const;\n\n/**\n * Generates a text art grid showing which texels were sampled\n * followed by a list of the samples and the weights used for each\n * component.\n *\n * It works by making an index for every pixel in the texture. Then,\n * for each index it generates texture data using TexelView.fromTexelsAsColor\n * with a single [1, 1, 1, 1] texel at the texel for the current index.\n *\n * In then calls 'run' which renders a single `call`. `run` uses either\n * the software renderer or WebGPU. The result ends up being the weights\n * used when sampling that pixel. 0 = that texel was not sampled. > 0 =\n * it was sampled.\n *\n * This lets you see if the weights from the software renderer match the\n * weights from WebGPU.\n *\n * Example:\n *\n *     0   1   2   3   4   5   6   7\n *   ┌───┬───┬───┬───┬───┬───┬───┬───┐\n * 0 │   │   │   │   │   │   │   │   │\n *   ├───┼───┼───┼───┼───┼───┼───┼───┤\n * 1 │   │   │   │   │   │   │   │ a │\n *   ├───┼───┼───┼───┼───┼───┼───┼───┤\n * 2 │   │   │   │   │   │   │   │ b │\n *   ├───┼───┼───┼───┼───┼───┼───┼───┤\n * 3 │   │   │   │   │   │   │   │   │\n *   ├───┼───┼───┼───┼───┼───┼───┼───┤\n * 4 │   │   │   │   │   │   │   │   │\n *   ├───┼───┼───┼───┼───┼───┼───┼───┤\n * 5 │   │   │   │   │   │   │   │   │\n *   ├───┼───┼───┼───┼───┼───┼───┼───┤\n * 6 │   │   │   │   │   │   │   │   │\n *   ├───┼───┼───┼───┼───┼───┼───┼───┤\n * 7 │   │   │   │   │   │   │   │   │\n *   └───┴───┴───┴───┴───┴───┴───┴───┘\n * a: at: [7, 1], weights: [R: 0.75000]\n * b: at: [7, 2], weights: [R: 0.25000]\n */\nasync function identifySamplePoints(\n  texture: Texture,\n  run: (texels: TexelView) => Promise<PerTexelComponent<number>>\n) {\n  const info = texture.descriptor;\n  const isCube = texture.viewDescriptor.dimension === 'cube';\n  const textureSize = reifyExtent3D(info.size);\n  const numTexels = textureSize.width * textureSize.height * textureSize.height;\n  const texelsPerRow = textureSize.width;\n  const texelsPerSlice = textureSize.width * textureSize.height;\n  // This isn't perfect. We already know there was an error. We're just\n  // generating info so it seems okay it's not perfect. This format will\n  // be used to generate weights by drawing with a texture of this format\n  // with a specific pixel set to [1, 1, 1, 1]. As such, if the result\n  // is > 0 then that pixel was sampled and the results are the weights.\n  //\n  // Ideally, this texture with a single pixel set to [1, 1, 1, 1] would\n  // be the same format we were originally testing, the one we already\n  // detected an error for. This way, whatever subtle issues there are\n  // from that format will affect the weight values we're computing. But,\n  // if that format is not encodable, for example if it's a compressed\n  // texture format, then we have no way to build a texture so we use\n  // rgba8unorm instead.\n  const format = (\n    kEncodableTextureFormats.includes(info.format as EncodableTextureFormat)\n      ? info.format\n      : 'rgba8unorm'\n  ) as EncodableTextureFormat;\n  const rep = kTexelRepresentationInfo[format];\n\n  // Identify all the texels that are sampled, and their weights.\n  const sampledTexelWeights = new Map<number, PerTexelComponent<number>>();\n  const unclassifiedStack = [new Set<number>(range(numTexels, v => v))];\n  while (unclassifiedStack.length > 0) {\n    // Pop the an unclassified texels stack\n    const unclassified = unclassifiedStack.pop()!;\n\n    // Split unclassified texels evenly into two new sets\n    const setA = new Set<number>();\n    const setB = new Set<number>();\n    [...unclassified.keys()].forEach((t, i) => ((i & 1) === 0 ? setA : setB).add(t));\n\n    // Push setB to the unclassified texels stack\n    if (setB.size > 0) {\n      unclassifiedStack.push(setB);\n    }\n\n    // See if any of the texels in setA were sampled.\n    const results = await run(\n      TexelView.fromTexelsAsColors(\n        format,\n        (coords: Required<GPUOrigin3DDict>): Readonly<PerTexelComponent<number>> => {\n          const isCandidate = setA.has(\n            coords.x + coords.y * texelsPerRow + coords.z * texelsPerSlice\n          );\n          const texel: PerTexelComponent<number> = {};\n          for (const component of rep.componentOrder) {\n            texel[component] = isCandidate ? 1 : 0;\n          }\n          return texel;\n        }\n      )\n    );\n    if (rep.componentOrder.some(c => results[c] !== 0)) {\n      // One or more texels of setA were sampled.\n      if (setA.size === 1) {\n        // We identified a specific texel was sampled.\n        // As there was only one texel in the set, results holds the sampling weights.\n        setA.forEach(texel => sampledTexelWeights.set(texel, results));\n      } else {\n        // More than one texel in the set. Needs splitting.\n        unclassifiedStack.push(setA);\n      }\n    }\n  }\n\n  // ┌───┬───┬───┬───┐\n  // │ a │   │   │   │\n  // ├───┼───┼───┼───┤\n  // │   │   │   │   │\n  // ├───┼───┼───┼───┤\n  // │   │   │   │   │\n  // ├───┼───┼───┼───┤\n  // │   │   │   │ b │\n  // └───┴───┴───┴───┘\n  const letter = (idx: number) => String.fromCharCode(97 + idx); // 97: 'a'\n  const orderedTexelIndices: number[] = [];\n  const lines: string[] = [];\n  for (let z = 0; z < textureSize.depthOrArrayLayers; ++z) {\n    lines.push(`slice: ${z}${isCube ? ` (${kFaceNames[z]})` : ''}`);\n    {\n      let line = '  ';\n      for (let x = 0; x < textureSize.width; x++) {\n        line += `  ${x.toString().padEnd(2)}`;\n      }\n      lines.push(line);\n    }\n    {\n      let line = '  ┌';\n      for (let x = 0; x < textureSize.width; x++) {\n        line += x === textureSize.width - 1 ? '───┐' : '───┬';\n      }\n      lines.push(line);\n    }\n    for (let y = 0; y < textureSize.height; y++) {\n      {\n        let line = `${y.toString().padEnd(2)}│`;\n        for (let x = 0; x < textureSize.width; x++) {\n          const texelIdx = x + y * texelsPerRow + z * texelsPerSlice;\n          const weight = sampledTexelWeights.get(texelIdx);\n          if (weight !== undefined) {\n            line += ` ${letter(orderedTexelIndices.length)} │`;\n            orderedTexelIndices.push(texelIdx);\n          } else {\n            line += '   │';\n          }\n        }\n        lines.push(line);\n      }\n      if (y < textureSize.height - 1) {\n        let line = '  ├';\n        for (let x = 0; x < textureSize.width; x++) {\n          line += x === textureSize.width - 1 ? '───┤' : '───┼';\n        }\n        lines.push(line);\n      }\n    }\n    {\n      let line = '  └';\n      for (let x = 0; x < textureSize.width; x++) {\n        line += x === textureSize.width - 1 ? '───┘' : '───┴';\n      }\n      lines.push(line);\n    }\n  }\n\n  const pad2 = (n: number) => n.toString().padStart(2);\n  orderedTexelIndices.forEach((texelIdx, i) => {\n    const weights = sampledTexelWeights.get(texelIdx)!;\n    const z = Math.floor(texelIdx / texelsPerSlice);\n    const y = Math.floor((texelIdx % texelsPerSlice) / texelsPerRow);\n    const x = texelIdx % texelsPerRow;\n    const w = rep.componentOrder.map(c => `${c}: ${weights[c]?.toFixed(5)}`).join(', ');\n    lines.push(`${letter(i)}: at: [${pad2(x)}, ${pad2(y)}, ${pad2(z)}], weights: [${w}]`);\n  });\n  return lines;\n}\n\nfunction layoutTwoColumns(columnA: string[], columnB: string[]) {\n  const widthA = Math.max(...columnA.map(l => l.length));\n  const lines = Math.max(columnA.length, columnB.length);\n  const out: string[] = new Array<string>(lines);\n  for (let line = 0; line < lines; line++) {\n    const a = columnA[line] ?? '';\n    const b = columnB[line] ?? '';\n    out[line] = `${a}${' '.repeat(widthA - a.length)} | ${b}`;\n  }\n  return out;\n}\n\nfunction getDepthOrArrayLayersForViewDimension(viewDimension?: GPUTextureViewDimension) {\n  switch (viewDimension) {\n    case undefined:\n    case '2d':\n      return 1;\n    case '3d':\n      return 8;\n    case 'cube':\n      return 6;\n    default:\n      unreachable();\n  }\n}\n\n/**\n * Choose a texture size based on the given parameters.\n * The size will be in a multiple of blocks. If it's a cube\n * map the size will so be square.\n */\nexport function chooseTextureSize({\n  minSize,\n  minBlocks,\n  format,\n  viewDimension,\n}: {\n  minSize: number;\n  minBlocks: number;\n  format: GPUTextureFormat;\n  viewDimension?: GPUTextureViewDimension;\n}) {\n  const { blockWidth, blockHeight } = kTextureFormatInfo[format];\n  const width = align(Math.max(minSize, blockWidth * minBlocks), blockWidth);\n  const height = align(Math.max(minSize, blockHeight * minBlocks), blockHeight);\n  if (viewDimension === 'cube') {\n    const size = lcm(width, height);\n    return [size, size, 6];\n  }\n  const depthOrArrayLayers = getDepthOrArrayLayersForViewDimension(viewDimension);\n  return [width, height, depthOrArrayLayers];\n}\n\nexport const kSamplePointMethods = ['texel-centre', 'spiral'] as const;\nexport type SamplePointMethods = (typeof kSamplePointMethods)[number];\n\nexport const kCubeSamplePointMethods = ['cube-edges', 'texel-centre', 'spiral'] as const;\nexport type CubeSamplePointMethods = (typeof kSamplePointMethods)[number];\n\n/**\n * Used to specify a range from [0, num)\n * The type is used to determine if values should be integers and if they can be negative.\n */\nexport type RangeDef = {\n  num: number;\n  type: 'f32' | 'i32' | 'u32';\n};\n\ntype TextureBuiltinInputArgs = {\n  descriptor: GPUTextureDescriptor;\n  sampler?: GPUSamplerDescriptor;\n  mipLevel?: RangeDef;\n  sampleIndex?: RangeDef;\n  arrayIndex?: RangeDef;\n  offset?: boolean;\n  hashInputs: (number | string | boolean)[];\n};\n\n/**\n * Generates an array of coordinates at which to sample a texture.\n */\nfunction generateTextureBuiltinInputsImpl<T extends Dimensionality>(\n  makeValue: (x: number, y: number, z: number) => T,\n  n: number,\n  args:\n    | (TextureBuiltinInputArgs & {\n        method: 'texel-centre';\n      })\n    | (TextureBuiltinInputArgs & {\n        method: 'spiral';\n        radius?: number;\n        loops?: number;\n      })\n): { coords: T; mipLevel: number; sampleIndex?: number; arrayIndex?: number; offset?: T }[] {\n  const { method, descriptor } = args;\n  const dimension = descriptor.dimension ?? '2d';\n  const size = virtualMipSize(dimension, descriptor.size, 0);\n  const coords: T[] = [];\n  switch (method) {\n    case 'texel-centre': {\n      for (let i = 0; i < n; i++) {\n        const r = hashU32(i);\n        const x = Math.floor(lerp(0, size[0] - 1, (r & 0xff) / 0xff)) + 0.5;\n        const y = Math.floor(lerp(0, size[1] - 1, ((r >> 8) & 0xff) / 0xff)) + 0.5;\n        const z = Math.floor(lerp(0, size[2] - 1, ((r >> 16) & 0xff) / 0xff)) + 0.5;\n        coords.push(makeValue(x / size[0], y / size[1], z / size[2]));\n      }\n      break;\n    }\n    case 'spiral': {\n      const { radius = 1.5, loops = 2 } = args;\n      for (let i = 0; i < n; i++) {\n        const f = i / (Math.max(n, 2) - 1);\n        const r = radius * f;\n        const a = loops * 2 * Math.PI * f;\n        coords.push(makeValue(0.5 + r * Math.cos(a), 0.5 + r * Math.sin(a), 0));\n      }\n      break;\n    }\n  }\n\n  const _hashInputs = args.hashInputs.map(v =>\n    typeof v === 'string' ? sumOfCharCodesOfString(v) : typeof v === 'boolean' ? (v ? 1 : 0) : v\n  );\n  const makeRangeValue = ({ num, type }: RangeDef, ...hashInputs: number[]) => {\n    const range = num + type === 'u32' ? 1 : 2;\n    const number =\n      (hashU32(..._hashInputs, ...hashInputs) / 0x1_0000_0000) * range - (type === 'u32' ? 0 : 1);\n    return type === 'f32' ? number : Math.floor(number);\n  };\n  const makeIntHashValue = (min: number, max: number, ...hashInputs: number[]) => {\n    const range = max - min;\n    return min + Math.floor((hashU32(..._hashInputs, ...hashInputs) / 0x1_0000_0000) * range);\n  };\n\n  // Samplers across devices use different methods to interpolate.\n  // Quantizing the texture coordinates seems to hit coords that produce\n  // comparable results to our computed results.\n  // Note: This value works with 8x8 textures. Other sizes have not been tested.\n  // Values that worked for reference:\n  // Win 11, NVidia 2070 Super: 16\n  // Linux, AMD Radeon Pro WX 3200: 256\n  // MacOS, M1 Mac: 256\n  const kSubdivisionsPerTexel = 4;\n  const nearest = !args.sampler || args.sampler.minFilter === 'nearest';\n  return coords.map((c, i) => {\n    const mipLevel = args.mipLevel ? makeRangeValue(args.mipLevel, i) : 0;\n    const mipSize = virtualMipSize(dimension, size, mipLevel);\n    const q = mipSize.map(v => v * kSubdivisionsPerTexel);\n\n    const coords = c.map((v, i) => {\n      // Quantize to kSubdivisionsPerPixel\n      const v1 = Math.floor(v * q[i]);\n      // If it's nearest and we're on the edge of a texel then move us off the edge\n      // since the edge could choose one texel or another in nearest mode\n      const v2 = nearest && v1 % kSubdivisionsPerTexel === 0 ? v1 + 1 : v1;\n      // Convert back to texture coords\n      return v2 / q[i];\n    }) as T;\n\n    return {\n      coords,\n      mipLevel,\n      sampleIndex: args.sampleIndex ? makeRangeValue(args.sampleIndex, i, 1) : undefined,\n      arrayIndex: args.arrayIndex ? makeRangeValue(args.arrayIndex, i, 2) : undefined,\n      offset: args.offset\n        ? (coords.map((_, j) => makeIntHashValue(-8, 8, i, 3 + j)) as T)\n        : undefined,\n    };\n  });\n}\n\n// Removes the first element from an array of types\ntype FilterFirstElement<T extends unknown[]> = T extends [unknown, ...infer R] ? R : [];\n\ntype GenerateTextureBuiltinInputsImplArgs = FilterFirstElement<\n  Parameters<typeof generateTextureBuiltinInputsImpl>\n>;\n\nexport function generateTextureBuiltinInputs1D(...args: GenerateTextureBuiltinInputsImplArgs) {\n  return generateTextureBuiltinInputsImpl<vec1>((x: number) => [x], ...args);\n}\n\nexport function generateTextureBuiltinInputs2D(...args: GenerateTextureBuiltinInputsImplArgs) {\n  return generateTextureBuiltinInputsImpl<vec2>((x: number, y: number) => [x, y], ...args);\n}\n\nexport function generateTextureBuiltinInputs3D(...args: GenerateTextureBuiltinInputsImplArgs) {\n  return generateTextureBuiltinInputsImpl<vec3>(\n    (x: number, y: number, z: number) => [x, y, z],\n    ...args\n  );\n}\n\ntype mat3 =\n  /* prettier-ignore */ [\n  number, number, number,\n  number, number, number,\n  number, number, number,\n];\n\nconst kFaceUVMatrices: mat3[] =\n  /* prettier-ignore */ [\n  [ 0,  0,  -2,  0, -2,   0,  1,  1,   1],   // pos-x\n  [ 0,  0,   2,  0, -2,   0, -1,  1,  -1],   // neg-x\n  [ 2,  0,   0,  0,  0,   2, -1,  1,  -1],   // pos-y\n  [ 2,  0,   0,  0,  0,  -2, -1, -1,   1],   // neg-y\n  [ 2,  0,   0,  0, -2,   0, -1,  1,   1],   // pos-z\n  [-2,  0,   0,  0, -2,   0,  1,  1,  -1],   // neg-z\n];\n\n/** multiply a vec3 by mat3 */\nfunction transformMat3(v: vec3, m: mat3): vec3 {\n  const x = v[0];\n  const y = v[1];\n  const z = v[2];\n\n  return [\n    x * m[0] + y * m[3] + z * m[6],\n    x * m[1] + y * m[4] + z * m[7],\n    x * m[2] + y * m[5] + z * m[8],\n  ];\n}\n\n/** normalize a vec3 */\nfunction normalize(v: vec3): vec3 {\n  const length = Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);\n  assert(length > 0);\n  return v.map(v => v / length) as vec3;\n}\n\n/**\n * Converts a cube map coordinate to a uv coordinate (0 to 1) and layer (0.5/6.0 to 5.5/6.0).\n * Also returns the length of the original coordinate.\n */\nfunction convertCubeCoordToNormalized3DTextureCoord(v: vec3): vec3 {\n  let uvw;\n  let layer;\n  // normalize the coord.\n  // MAINTENANCE_TODO: handle(0, 0, 0)\n  const r = normalize(v);\n  const absR = r.map(v => Math.abs(v));\n  if (absR[0] > absR[1] && absR[0] > absR[2]) {\n    // x major\n    const negX = r[0] < 0.0 ? 1 : 0;\n    uvw = [negX ? r[2] : -r[2], -r[1], absR[0]];\n    layer = negX;\n  } else if (absR[1] > absR[2]) {\n    // y major\n    const negY = r[1] < 0.0 ? 1 : 0;\n    uvw = [r[0], negY ? -r[2] : r[2], absR[1]];\n    layer = 2 + negY;\n  } else {\n    // z major\n    const negZ = r[2] < 0.0 ? 1 : 0;\n    uvw = [negZ ? -r[0] : r[0], -r[1], absR[2]];\n    layer = 4 + negZ;\n  }\n  return [(uvw[0] / uvw[2] + 1) * 0.5, (uvw[1] / uvw[2] + 1) * 0.5, (layer + 0.5) / 6];\n}\n\n/**\n * Convert a 3d texcoord into a cube map coordinate.\n */\nfunction convertNormalized3DTexCoordToCubeCoord(uvLayer: vec3) {\n  const [u, v, faceLayer] = uvLayer;\n  return normalize(transformMat3([u, v, 1], kFaceUVMatrices[Math.min(5, faceLayer * 6) | 0]));\n}\n\n/**\n * We have a face texture in texels coord where U/V choose a texel and W chooses the face.\n * If U/V are outside the size of the texture then, when normalized and converted\n * to a cube map coordinate, they'll end up pointing to a different face.\n *\n * addressMode is effectively ignored for cube\n *\n *             +-----------+\n *             |0->u       |\n *             |↓          |\n *             |v   +y     |\n *             |    (2)    |\n *             |           |\n * +-----------+-----------+-----------+-----------+\n * |0->u       |0->u       |0->u       |0->u       |\n * |↓          |↓          |↓          |↓          |\n * |v   -x     |v   +z     |v   +x     |v   -z     |\n * |    (1)    |    (4)    |    (0)    |    (5)    |\n * |           |           |           |           |\n * +-----------+-----------+-----------+-----------+\n *             |0->u       |\n *             |↓          |\n *             |v   -y     |\n *             |    (3)    |\n *             |           |\n *             +-----------+\n */\nconst kFaceConversions = {\n  u: (textureSize: number, faceCoord: vec3) => faceCoord[0],\n  v: (textureSize: number, faceCoord: vec3) => faceCoord[1],\n  'u+t': (textureSize: number, faceCoord: vec3) => faceCoord[0] + textureSize,\n  'u-t': (textureSize: number, faceCoord: vec3) => faceCoord[0] - textureSize,\n  'v+t': (textureSize: number, faceCoord: vec3) => faceCoord[1] + textureSize,\n  'v-t': (textureSize: number, faceCoord: vec3) => faceCoord[1] - textureSize,\n  't-v': (textureSize: number, faceCoord: vec3) => textureSize - faceCoord[1],\n  '1+u': (textureSize: number, faceCoord: vec3) => 1 + faceCoord[0],\n  '1+v': (textureSize: number, faceCoord: vec3) => 1 + faceCoord[1],\n  '-v-1': (textureSize: number, faceCoord: vec3) => -faceCoord[1] - 1,\n  't-u-1': (textureSize: number, faceCoord: vec3) => textureSize - faceCoord[0] - 1,\n  't-v-1': (textureSize: number, faceCoord: vec3) => textureSize - faceCoord[1] - 1,\n  '2t-u-1': (textureSize: number, faceCoord: vec3) => textureSize * 2 - faceCoord[0] - 1,\n  '2t-v-1': (textureSize: number, faceCoord: vec3) => textureSize * 2 - faceCoord[1] - 1,\n} as const;\nconst kFaceConversionEnums = keysOf(kFaceConversions);\ntype FaceCoordConversion = (typeof kFaceConversionEnums)[number];\n\n// For Each face\n//   face to go if u < 0\n//   face to go if u >= textureSize\n//   face to go if v < 0\n//   face to go if v >= textureSize\nconst kFaceToFaceRemap: { to: number; u: FaceCoordConversion; v: FaceCoordConversion }[][] = [\n  // 0\n  [\n    /* -u */ { to: 4, u: 'u+t', v: 'v' },\n    /* +u */ { to: 5, u: 'u-t', v: 'v' },\n    /* -v */ { to: 2, u: 'v+t', v: 't-u-1' },\n    /* +v */ { to: 3, u: '2t-v-1', v: 'u' },\n  ],\n  // 1\n  [\n    /* -u */ { to: 5, u: 'u+t', v: 'v' },\n    /* +u */ { to: 4, u: 'u-t', v: 'v' },\n    /* -v */ { to: 2, u: '-v-1', v: 'u' }, // -1->0, -2->1  -3->2\n    /* +v */ { to: 3, u: 't-v', v: 't-u-1' },\n  ],\n  // 2\n  [\n    /* -u */ { to: 1, u: 'v', v: '1+u' },\n    /* +u */ { to: 0, u: 't-v-1', v: 'u-t' },\n    /* -v */ { to: 5, u: 't-u-1', v: 't-v-1' },\n    /* +v */ { to: 4, u: 'u', v: 'v-t' },\n  ],\n  // 3\n  [\n    /* -u */ { to: 1, u: 't-v-1', v: 'u+t' },\n    /* +u */ { to: 0, u: 'v', v: '2t-u-1' },\n    /* -v */ { to: 4, u: 'u', v: 'v+t' },\n    /* +v */ { to: 5, u: 't-u-1', v: '2t-v-1' },\n  ],\n  // 4\n  [\n    /* -u */ { to: 1, u: 'u+t', v: 'v' },\n    /* +u */ { to: 0, u: 'u-t', v: 'v' },\n    /* -v */ { to: 2, u: 'u', v: 'v+t' },\n    /* +v */ { to: 3, u: 'u', v: 'v-t' },\n  ],\n  // 5\n  [\n    /* -u */ { to: 0, u: 'u+t', v: 'v' },\n    /* +u */ { to: 1, u: 'u-t', v: 'v' },\n    /* -v */ { to: 2, u: 't-u-1', v: '1+v' },\n    /* +v */ { to: 3, u: 't-u-1', v: '2t-v-1' },\n  ],\n];\n\nfunction getFaceWrapIndex(textureSize: number, faceCoord: vec3) {\n  if (faceCoord[0] < 0) {\n    return 0;\n  }\n  if (faceCoord[0] >= textureSize) {\n    return 1;\n  }\n  if (faceCoord[1] < 0) {\n    return 2;\n  }\n  if (faceCoord[1] >= textureSize) {\n    return 3;\n  }\n  return -1;\n}\n\nfunction applyFaceWrap(textureSize: number, faceCoord: vec3): vec3 {\n  const ndx = getFaceWrapIndex(textureSize, faceCoord);\n  if (ndx < 0) {\n    return faceCoord;\n  }\n  const { to, u, v } = kFaceToFaceRemap[faceCoord[2]][ndx];\n  return [\n    kFaceConversions[u](textureSize, faceCoord),\n    kFaceConversions[v](textureSize, faceCoord),\n    to,\n  ];\n}\n\nfunction wrapFaceCoordToCubeFaceAtEdgeBoundaries(textureSize: number, faceCoord: vec3) {\n  // If we're off both edges we need to wrap twice, once for each edge.\n  faceCoord = applyFaceWrap(textureSize, faceCoord);\n  faceCoord = applyFaceWrap(textureSize, faceCoord);\n  return faceCoord;\n}\n\nfunction applyAddressModesToCoords(\n  addressMode: GPUAddressMode[],\n  textureSize: number[],\n  coord: number[]\n) {\n  return coord.map((v, i) => {\n    switch (addressMode[i]) {\n      case 'clamp-to-edge':\n        return clamp(v, { min: 0, max: textureSize[i] - 1 });\n      case 'mirror-repeat': {\n        const n = Math.floor(v / textureSize[i]);\n        v = v - n * textureSize[i];\n        return (n & 1) !== 0 ? textureSize[i] - v - 1 : v;\n      }\n      case 'repeat':\n        return v - Math.floor(v / textureSize[i]) * textureSize[i];\n      default:\n        unreachable();\n    }\n  });\n}\n\n/**\n * Generates an array of coordinates at which to sample a texture for a cubemap\n */\nexport function generateSamplePointsCube(\n  n: number,\n  args:\n    | (TextureBuiltinInputArgs & {\n        method: 'texel-centre';\n      })\n    | (TextureBuiltinInputArgs & {\n        method: 'spiral';\n        radius?: number;\n        loops?: number;\n      })\n    | (TextureBuiltinInputArgs & {\n        method: 'cube-edges';\n      })\n): {\n  coords: vec3;\n  mipLevel: number;\n  arrayIndex?: number;\n  offset?: undefined;\n}[] {\n  const { method, descriptor } = args;\n  const size = virtualMipSize('2d', descriptor.size, 0);\n  const textureWidth = size[0];\n  const coords: vec3[] = [];\n  switch (method) {\n    case 'texel-centre': {\n      for (let i = 0; i < n; i++) {\n        const r = hashU32(i);\n        const u = (Math.floor(lerp(0, textureWidth - 1, (r & 0xff) / 0xff)) + 0.5) / textureWidth;\n        const v =\n          (Math.floor(lerp(0, textureWidth - 1, ((r >> 8) & 0xff) / 0xff)) + 0.5) / textureWidth;\n        const face = Math.floor(lerp(0, 6, ((r >> 16) & 0xff) / 0x100));\n        coords.push(convertNormalized3DTexCoordToCubeCoord([u, v, face]));\n      }\n      break;\n    }\n    case 'spiral': {\n      const { radius = 1.5, loops = 2 } = args;\n      for (let i = 0; i < n; i++) {\n        const f = (i + 1) / (Math.max(n, 2) - 1);\n        const r = radius * f;\n        const theta = loops * 2 * Math.PI * f;\n        const phi = loops * 1.3 * Math.PI * f;\n        const sinTheta = Math.sin(theta);\n        const cosTheta = Math.cos(theta);\n        const sinPhi = Math.sin(phi);\n        const cosPhi = Math.cos(phi);\n        const ux = cosTheta * sinPhi;\n        const uy = cosPhi;\n        const uz = sinTheta * sinPhi;\n        coords.push([ux * r, uy * r, uz * r]);\n      }\n      break;\n    }\n    case 'cube-edges': {\n      /* prettier-ignore */\n      coords.push(\n        // between edges\n        [-1.01, -1.02,  0],\n        [ 1.01, -1.02,  0],\n        [-1.01,  1.02,  0],\n        [ 1.01,  1.02,  0],\n\n        [-1.01,  0, -1.02],\n        [ 1.01,  0, -1.02],\n        [-1.01,  0,  1.02],\n        [ 1.01,  0,  1.02],\n\n        [-1.01, -1.02,  0],\n        [ 1.01, -1.02,  0],\n        [-1.01,  1.02,  0],\n        [ 1.01,  1.02,  0],\n\n        // corners (see comment \"Issues with corners of cubemaps\")\n        // for why these are commented out.\n        // [-1.01, -1.02, -1.03],\n        // [ 1.01, -1.02, -1.03],\n        // [-1.01,  1.02, -1.03],\n        // [ 1.01,  1.02, -1.03],\n        // [-1.01, -1.02,  1.03],\n        // [ 1.01, -1.02,  1.03],\n        // [-1.01,  1.02,  1.03],\n        // [ 1.01,  1.02,  1.03],\n      );\n      break;\n    }\n  }\n\n  const _hashInputs = args.hashInputs.map(v =>\n    typeof v === 'string' ? sumOfCharCodesOfString(v) : typeof v === 'boolean' ? (v ? 1 : 0) : v\n  );\n  const makeRangeValue = ({ num, type }: RangeDef, ...hashInputs: number[]) => {\n    const range = num + type === 'u32' ? 1 : 2;\n    const number =\n      (hashU32(..._hashInputs, ...hashInputs) / 0x1_0000_0000) * range - (type === 'u32' ? 0 : 1);\n    return type === 'f32' ? number : Math.floor(number);\n  };\n\n  // Samplers across devices use different methods to interpolate.\n  // Quantizing the texture coordinates seems to hit coords that produce\n  // comparable results to our computed results.\n  // Note: This value works with 8x8 textures. Other sizes have not been tested.\n  // Values that worked for reference:\n  // Win 11, NVidia 2070 Super: 16\n  // Linux, AMD Radeon Pro WX 3200: 256\n  // MacOS, M1 Mac: 256\n  const kSubdivisionsPerTexel = 4;\n  const nearest = !args.sampler || args.sampler.minFilter === 'nearest';\n  return coords.map((c, i) => {\n    const mipLevel = args.mipLevel ? makeRangeValue(args.mipLevel, i) : 0;\n    const mipSize = virtualMipSize('2d', size, mipLevel);\n    const q = [\n      mipSize[0] * kSubdivisionsPerTexel,\n      mipSize[0] * kSubdivisionsPerTexel,\n      6 * kSubdivisionsPerTexel,\n    ];\n\n    const uvw = convertCubeCoordToNormalized3DTextureCoord(c);\n\n    // If this is a corner, move to in so it's not\n    // (see comment \"Issues with corners of cubemaps\")\n    const ndx = getUnusedCubeCornerSampleIndex(textureWidth, uvw);\n    if (ndx >= 0) {\n      const halfTexel = 0.5 / textureWidth;\n      uvw[0] = clamp(uvw[0], { min: halfTexel, max: 1 - halfTexel });\n    }\n\n    const quantizedUVW = uvw.map((v, i) => {\n      // Quantize to kSubdivisionsPerPixel\n      const v1 = Math.floor(v * q[i]);\n      // If it's nearest and we're on the edge of a texel then move us off the edge\n      // since the edge could choose one texel or another in nearest mode\n      const v2 = nearest && v1 % kSubdivisionsPerTexel === 0 ? v1 + 1 : v1;\n      // Convert back to texture coords\n      return v2 / q[i];\n    }) as vec3;\n    const coords = convertNormalized3DTexCoordToCubeCoord(quantizedUVW);\n    return {\n      coords,\n      mipLevel,\n      arrayIndex: args.arrayIndex ? makeRangeValue(args.arrayIndex, i, 2) : undefined,\n    };\n  });\n}\n\nfunction wgslTypeFor(data: number | Dimensionality, type: 'f' | 'i' | 'u'): string {\n  if (Array.isArray(data)) {\n    switch (data.length) {\n      case 1:\n        return `${type}32`;\n      case 2:\n        return `vec2${type}`;\n      case 3:\n        return `vec3${type}`;\n      default:\n        unreachable();\n    }\n  }\n  return `${type}32`;\n}\n\nfunction wgslExpr(data: number | vec1 | vec2 | vec3 | vec4): string {\n  if (Array.isArray(data)) {\n    switch (data.length) {\n      case 1:\n        return data[0].toString();\n      case 2:\n        return `vec2(${data.map(v => v.toString()).join(', ')})`;\n      case 3:\n        return `vec3(${data.map(v => v.toString()).join(', ')})`;\n      default:\n        unreachable();\n    }\n  }\n  return data.toString();\n}\n\nfunction wgslExprFor(data: number | vec1 | vec2 | vec3 | vec4, type: 'f' | 'i' | 'u'): string {\n  if (Array.isArray(data)) {\n    switch (data.length) {\n      case 1:\n        return `${type}(${data[0].toString()})`;\n      case 2:\n        return `vec2${type}(${data.map(v => v.toString()).join(', ')})`;\n      case 3:\n        return `vec3${type}(${data.map(v => v.toString()).join(', ')})`;\n      default:\n        unreachable();\n    }\n  }\n  return `${type}32(${data.toString()})`;\n}\n\nfunction binKey<T extends Dimensionality>(call: TextureCall<T>): string {\n  const keys: string[] = [];\n  for (const name of kTextureCallArgNames) {\n    const value = call[name];\n    if (value !== undefined) {\n      if (name === 'offset') {\n        // offset must be a constant expression\n        keys.push(`${name}: ${wgslExpr(value)}`);\n      } else {\n        keys.push(`${name}: ${wgslTypeFor(value, call.coordType)}`);\n      }\n    }\n  }\n  return `${call.builtin}(${keys.join(', ')})`;\n}\n\nfunction buildBinnedCalls<T extends Dimensionality>(calls: TextureCall<T>[]) {\n  const args: string[] = ['T']; // All texture builtins take the texture as the first argument\n  const fields: string[] = [];\n  const data: number[] = [];\n\n  const prototype = calls[0];\n  if (prototype.builtin.startsWith('textureSample')) {\n    // textureSample*() builtins take a sampler as the second argument\n    args.push('S');\n  }\n\n  for (const name of kTextureCallArgNames) {\n    const value = prototype[name];\n    if (value !== undefined) {\n      if (name === 'offset') {\n        args.push(`/* offset */ ${wgslExpr(value)}`);\n      } else {\n        const type =\n          name === 'mipLevel'\n            ? prototype.levelType!\n            : name === 'arrayIndex'\n            ? prototype.arrayIndexType!\n            : name === 'sampleIndex'\n            ? prototype.sampleIndexType!\n            : prototype.coordType;\n        args.push(`args.${name}`);\n        fields.push(`@align(16) ${name} : ${wgslTypeFor(value, type)}`);\n      }\n    }\n  }\n\n  for (const call of calls) {\n    for (const name of kTextureCallArgNames) {\n      const value = call[name];\n      assert(\n        (prototype[name] === undefined) === (value === undefined),\n        'texture calls are not binned correctly'\n      );\n      if (value !== undefined && name !== 'offset') {\n        const bitcastToU32 = (value: number) => {\n          if (calls[0].coordType === 'f') {\n            return float32ToUint32(value);\n          }\n          return value;\n        };\n        if (value instanceof Array) {\n          for (const c of value) {\n            data.push(bitcastToU32(c));\n          }\n        } else {\n          data.push(bitcastToU32(value));\n        }\n        // All fields are aligned to 16 bytes.\n        while ((data.length & 3) !== 0) {\n          data.push(0);\n        }\n      }\n    }\n  }\n\n  const expr = `${prototype.builtin}(${args.join(', ')})`;\n\n  return { expr, fields, data };\n}\n\nfunction binCalls<T extends Dimensionality>(calls: TextureCall<T>[]): number[][] {\n  const map = new Map<string, number>(); // key to bin index\n  const bins: number[][] = [];\n  calls.forEach((call, callIdx) => {\n    const key = binKey(call);\n    const binIdx = map.get(key);\n    if (binIdx === undefined) {\n      map.set(key, bins.length);\n      bins.push([callIdx]);\n    } else {\n      bins[binIdx].push(callIdx);\n    }\n  });\n  return bins;\n}\n\nexport function describeTextureCall<T extends Dimensionality>(call: TextureCall<T>): string {\n  const args: string[] = ['texture: T'];\n  if (call.builtin.startsWith('textureSample')) {\n    args.push('sampler: S');\n  }\n  for (const name of kTextureCallArgNames) {\n    const value = call[name];\n    if (value !== undefined) {\n      if (name === 'coords') {\n        args.push(`${name}: ${wgslExprFor(value, call.coordType)}`);\n      } else if (name === 'mipLevel') {\n        args.push(`${name}: ${wgslExprFor(value, call.levelType!)}`);\n      } else if (name === 'arrayIndex') {\n        args.push(`${name}: ${wgslExprFor(value, call.arrayIndexType!)}`);\n      } else if (name === 'sampleIndex') {\n        args.push(`${name}: ${wgslExprFor(value, call.sampleIndexType!)}`);\n      } else {\n        args.push(`${name}: ${wgslExpr(value)}`);\n      }\n    }\n  }\n  return `${call.builtin}(${args.join(', ')})`;\n}\n\nconst s_deviceToPipelines = new WeakMap<GPUDevice, Map<string, GPURenderPipeline>>();\n\n/**\n * Given a list of \"calls\", each one of which has a texture coordinate,\n * generates a fragment shader that uses the fragment position as an index\n * (position.y * 256 + position.x) That index is then used to look up a\n * coordinate from a storage buffer which is used to call the WGSL texture\n * function to read/sample the texture, and then write to an rgba32float\n * texture.  We then read the rgba32float texture for the per \"call\" results.\n *\n * Calls are \"binned\" by call parameters. Each bin has its own structure and\n * field in the storage buffer. This allows the calls to be non-homogenous and\n * each have their own data type for coordinates.\n */\nexport async function doTextureCalls<T extends Dimensionality>(\n  t: GPUTest,\n  gpuTexture: GPUTexture,\n  viewDescriptor: GPUTextureViewDescriptor,\n  textureType: string,\n  sampler: GPUSamplerDescriptor | undefined,\n  calls: TextureCall<T>[]\n) {\n  let structs = '';\n  let body = '';\n  let dataFields = '';\n  const data: number[] = [];\n  let callCount = 0;\n  const binned = binCalls(calls);\n  binned.forEach((binCalls, binIdx) => {\n    const b = buildBinnedCalls(binCalls.map(callIdx => calls[callIdx]));\n    structs += `struct Args${binIdx} {\n  ${b.fields.join(',  \\n')}\n}\n`;\n    dataFields += `  args${binIdx} : array<Args${binIdx}, ${binCalls.length}>,\n`;\n    body += `\n  {\n    let is_active = (frag_idx >= ${callCount}) & (frag_idx < ${callCount + binCalls.length});\n    let args = data.args${binIdx}[frag_idx - ${callCount}];\n    let call = ${b.expr};\n    result = select(result, call, is_active);\n  }\n`;\n    callCount += binCalls.length;\n    data.push(...b.data);\n  });\n\n  const dataBuffer = t.createBufferTracked({\n    size: data.length * 4,\n    usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.STORAGE,\n  });\n  t.device.queue.writeBuffer(dataBuffer, 0, new Uint32Array(data));\n\n  const { resultType, resultFormat, componentType } = textureType.includes('depth')\n    ? ({ resultType: 'f32', resultFormat: 'rgba32float', componentType: 'f32' } as const)\n    : getTextureFormatTypeInfo(gpuTexture.format);\n  const returnType = `vec4<${componentType}>`;\n\n  const rtWidth = 256;\n  const renderTarget = t.createTextureTracked({\n    format: resultFormat,\n    size: { width: rtWidth, height: Math.ceil(calls.length / rtWidth) },\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n  });\n\n  const code = `\n${structs}\n\nstruct Data {\n${dataFields}\n}\n\n@vertex\nfn vs_main(@builtin(vertex_index) vertex_index : u32) -> @builtin(position) vec4f {\n  let positions = array(\n    vec4f(-1,  1, 0, 1), vec4f( 1,  1, 0, 1),\n    vec4f(-1, -1, 0, 1), vec4f( 1, -1, 0, 1),\n  );\n  return positions[vertex_index];\n}\n\n@group(0) @binding(0) var          T    : ${textureType};\n${sampler ? '@group(0) @binding(1) var          S    : sampler' : ''};\n@group(0) @binding(2) var<storage> data : Data;\n\n@fragment\nfn fs_main(@builtin(position) frag_pos : vec4f) -> @location(0) ${returnType} {\n  let frag_idx = u32(frag_pos.x) + u32(frag_pos.y) * ${renderTarget.width};\n  var result : ${resultType};\n${body}\n  return ${returnType}(result);\n}\n`;\n\n  const pipelines = s_deviceToPipelines.get(t.device) ?? new Map<string, GPURenderPipeline>();\n  s_deviceToPipelines.set(t.device, pipelines);\n\n  let pipeline = pipelines.get(code);\n  if (!pipeline) {\n    const shaderModule = t.device.createShaderModule({ code });\n\n    pipeline = t.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: { module: shaderModule },\n      fragment: {\n        module: shaderModule,\n        targets: [{ format: renderTarget.format }],\n      },\n      primitive: { topology: 'triangle-strip' },\n    });\n\n    pipelines.set(code, pipeline);\n  }\n\n  const gpuSampler = sampler ? t.device.createSampler(sampler) : undefined;\n\n  const bindGroup = t.device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [\n      { binding: 0, resource: gpuTexture.createView(viewDescriptor) },\n      ...(sampler ? [{ binding: 1, resource: gpuSampler! }] : []),\n      { binding: 2, resource: { buffer: dataBuffer } },\n    ],\n  });\n\n  const bytesPerRow = align(16 * renderTarget.width, 256);\n  const resultBuffer = t.createBufferTracked({\n    size: renderTarget.height * bytesPerRow,\n    usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ,\n  });\n  const encoder = t.device.createCommandEncoder();\n\n  const renderPass = encoder.beginRenderPass({\n    colorAttachments: [\n      {\n        view: renderTarget.createView(),\n        loadOp: 'clear',\n        storeOp: 'store',\n      },\n    ],\n  });\n\n  renderPass.setPipeline(pipeline);\n  renderPass.setBindGroup(0, bindGroup);\n  renderPass.draw(4);\n  renderPass.end();\n  encoder.copyTextureToBuffer(\n    { texture: renderTarget },\n    { buffer: resultBuffer, bytesPerRow },\n    { width: renderTarget.width, height: renderTarget.height }\n  );\n  t.device.queue.submit([encoder.finish()]);\n\n  await resultBuffer.mapAsync(GPUMapMode.READ);\n\n  const view = TexelView.fromTextureDataByReference(\n    renderTarget.format as EncodableTextureFormat,\n    new Uint8Array(resultBuffer.getMappedRange()),\n    {\n      bytesPerRow,\n      rowsPerImage: renderTarget.height,\n      subrectOrigin: [0, 0, 0],\n      subrectSize: [renderTarget.width, renderTarget.height],\n    }\n  );\n\n  let outIdx = 0;\n  const out = new Array<PerTexelComponent<number>>(calls.length);\n  for (const bin of binned) {\n    for (const callIdx of bin) {\n      const x = outIdx % rtWidth;\n      const y = Math.floor(outIdx / rtWidth);\n      out[callIdx] = view.color({ x, y, z: 0 });\n      outIdx++;\n    }\n  }\n\n  renderTarget.destroy();\n  resultBuffer.destroy();\n\n  return out;\n}\n"],"mappings":"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"}