{"version":3,"file":"textureGather.spec.js","names":["description","makeTestGroup","isDepthTextureFormat","isEncodableTextureFormat","kCompressedTextureFormats","kDepthStencilFormats","kEncodableTextureFormats","appendComponentTypeForFormatToTextureType","checkCallResults","chooseTextureSize","createTextureWithRandomDataAndGetTexels","doTextureCalls","generateSamplePointsCube","generateTextureBuiltinInputs2D","isFillable","kCubeSamplePointMethods","kSamplePointMethods","skipIfNeedsFilteringAndIsUnfilterableOrSelectDevice","WGSLTextureSampleTest","kTestableColorFormats","g","test","specURL","desc","params","u","combine","filter","t","format","beginSubcases","beforeAllSubcases","skipIfTextureFormatNotSupported","minFilter","fn","C","samplePoints","addressModeU","addressModeV","offset","width","height","minSize","minBlocks","descriptor","size","mipLevelCount","usage","GPUTextureUsage","COPY_DST","TEXTURE_BINDING","texels","texture","sampler","magFilter","mipmapFilter","calls","method","textureBuiltin","component","hashInputs","map","coords","builtin","coordType","componentType","textureType","viewDescriptor","results","res","expectOK","addressMode","viewDimension","depthOrArrayLayers","isCompatibility","textureBindingViewDimension","addressModeW","dimension","A","arrayIndex","num","type","arrayIndexType","skipIfTextureViewDimensionNotSupported"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/textureGather.spec.ts"],"sourcesContent":["export const description = `\nExecution tests for the 'textureGather' builtin function\n\n- TODO: Test un-encodable formats.\n\nA texture gather operation reads from a 2D, 2D array, cube, or cube array texture, computing a four-component vector as follows:\n * Find the four texels that would be used in a sampling operation with linear filtering, from mip level 0:\n   - Use the specified coordinate, array index (when present), and offset (when present).\n   - The texels are adjacent, forming a square, when considering their texture space coordinates (u,v).\n   - Selected texels at the texture edge, cube face edge, or cube corners are handled as in ordinary texture sampling.\n * For each texel, read one channel and convert it into a scalar value.\n   - For non-depth textures, a zero-based component parameter specifies the channel to use.\n     * If the texture format supports the specified channel, i.e. has more than component channels:\n       - Yield scalar value v[component] when the texel value is v.\n     * Otherwise:\n       - Yield 0.0 when component is 1 or 2.\n       - Yield 1.0 when component is 3 (the alpha channel).\n   - For depth textures, yield the texel value. (Depth textures only have one channel.)\n * Yield the four-component vector, arranging scalars produced by the previous step into components according to the relative coordinates of the texels, as follows:\n   - Result component  Relative texel coordinate\n      x (umin,vmax)\n      y (umax,vmax)\n      z (umax,vmin)\n      w (umin,vmin)\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport {\n  isDepthTextureFormat,\n  isEncodableTextureFormat,\n  kCompressedTextureFormats,\n  kDepthStencilFormats,\n  kEncodableTextureFormats,\n} from '../../../../../format_info.js';\n\nimport {\n  appendComponentTypeForFormatToTextureType,\n  checkCallResults,\n  chooseTextureSize,\n  createTextureWithRandomDataAndGetTexels,\n  doTextureCalls,\n  generateSamplePointsCube,\n  generateTextureBuiltinInputs2D,\n  isFillable,\n  kCubeSamplePointMethods,\n  kSamplePointMethods,\n  skipIfNeedsFilteringAndIsUnfilterableOrSelectDevice,\n  TextureCall,\n  vec2,\n  vec3,\n  WGSLTextureSampleTest,\n} from './texture_utils.js';\n\nconst kTestableColorFormats = [...kEncodableTextureFormats, ...kCompressedTextureFormats] as const;\n\nexport const g = makeTestGroup(WGSLTextureSampleTest);\n\ng.test('sampled_2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturegather')\n  .desc(\n    `\nC: i32, u32\nT: i32, u32, f32\n\nfn textureGather(component: C, t: texture_2d<T>, s: sampler, coords: vec2<f32>) -> vec4<T>\nfn textureGather(component: C, t: texture_2d<T>, s: sampler, coords: vec2<f32>, offset: vec2<i32>) -> vec4<T>\n\nParameters:\n * component:\n    - The index of the channel to read from the selected texels.\n    - When provided, the component expression must a creation-time expression (e.g. 1).\n    - Its value must be at least 0 and at most 3. Values outside of this range will result in a shader-creation error.\n * t: The sampled texture to read from\n * s: The sampler type\n * coords: The texture coordinates\n * offset:\n    - The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n      This offset is applied before applying any texture wrapping modes.\n    - The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    - Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .params(u =>\n    u\n      .combine('format', kTestableColorFormats)\n      .filter(t => isFillable(t.format))\n      .combine('minFilter', ['nearest', 'linear'] as const)\n      .beginSubcases()\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('addressModeU', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('addressModeV', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('offset', [false, true] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.skipIfTextureFormatNotSupported(t.params.format);\n    skipIfNeedsFilteringAndIsUnfilterableOrSelectDevice(t, t.params.minFilter, t.params.format);\n  })\n  .fn(async t => {\n    const { format, C, samplePoints, addressModeU, addressModeV, minFilter, offset } = t.params;\n\n    // We want at least 4 blocks or something wide enough for 3 mip levels.\n    const [width, height] = chooseTextureSize({ minSize: 8, minBlocks: 4, format });\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size: { width, height },\n      mipLevelCount: 3,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n    const sampler: GPUSamplerDescriptor = {\n      addressModeU,\n      addressModeV,\n      minFilter,\n      magFilter: minFilter,\n      mipmapFilter: minFilter,\n    };\n\n    const calls: TextureCall<vec2>[] = generateTextureBuiltinInputs2D(50, {\n      method: samplePoints,\n      textureBuiltin: 'textureGather',\n      sampler,\n      descriptor,\n      offset,\n      component: true,\n      hashInputs: [format, C, samplePoints, addressModeU, addressModeV, minFilter, offset],\n    }).map(({ coords, component, offset }) => {\n      return {\n        builtin: 'textureGather',\n        coordType: 'f',\n        coords,\n        component,\n        componentType: C === 'i32' ? 'i' : 'u',\n        offset,\n      };\n    });\n    const textureType = appendComponentTypeForFormatToTextureType('texture_2d', format);\n    const viewDescriptor = {};\n    const results = await doTextureCalls(t, texture, viewDescriptor, textureType, sampler, calls);\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results\n    );\n    t.expectOK(res);\n  });\n\ng.test('sampled_3d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturegather')\n  .desc(\n    `\nT: i32, u32, f32\n\nfn textureGather(component: C, t: texture_cube<T>, s: sampler, coords: vec3<f32>) -> vec4<T>\n\nParameters:\n * component:\n    - The index of the channel to read from the selected texels.\n    - When provided, the component expression must a creation-time expression (e.g. 1).\n    - Its value must be at least 0 and at most 3. Values outside of this range will result in a shader-creation error.\n * t: The sampled texture to read from\n * s: The sampler type\n * coords: The texture coordinates\n`\n  )\n  .params(u =>\n    u\n      .combine('format', kTestableColorFormats)\n      .filter(t => isFillable(t.format))\n      .combine('minFilter', ['nearest', 'linear'] as const)\n      .beginSubcases()\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('samplePoints', kCubeSamplePointMethods)\n      .combine('addressMode', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.skipIfTextureFormatNotSupported(t.params.format);\n    skipIfNeedsFilteringAndIsUnfilterableOrSelectDevice(t, t.params.minFilter, t.params.format);\n  })\n  .fn(async t => {\n    const { format, C, samplePoints, addressMode, minFilter } = t.params;\n\n    const viewDimension: GPUTextureViewDimension = 'cube';\n    const [width, height] = chooseTextureSize({ minSize: 8, minBlocks: 2, format, viewDimension });\n    const depthOrArrayLayers = 6;\n\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      ...(t.isCompatibility && { textureBindingViewDimension: viewDimension }),\n      size: { width, height, depthOrArrayLayers },\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n      mipLevelCount: 3,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n    const sampler: GPUSamplerDescriptor = {\n      addressModeU: addressMode,\n      addressModeV: addressMode,\n      addressModeW: addressMode,\n      minFilter,\n      magFilter: minFilter,\n      mipmapFilter: minFilter,\n    };\n\n    const calls: TextureCall<vec3>[] = generateSamplePointsCube(50, {\n      method: samplePoints,\n      sampler,\n      descriptor,\n      component: true,\n      textureBuiltin: 'textureGather',\n      hashInputs: [format, C, samplePoints, addressMode, minFilter],\n    }).map(({ coords, component }) => {\n      return {\n        builtin: 'textureGather',\n        component,\n        componentType: C === 'i32' ? 'i' : 'u',\n        coordType: 'f',\n        coords,\n      };\n    });\n    const viewDescriptor = {\n      dimension: viewDimension,\n    };\n    const textureType = appendComponentTypeForFormatToTextureType('texture_cube', format);\n    const results = await doTextureCalls(t, texture, viewDescriptor, textureType, sampler, calls);\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results\n    );\n    t.expectOK(res);\n  });\n\ng.test('sampled_array_2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturegather')\n  .desc(\n    `\nC: i32, u32\nT: i32, u32, f32\n\nfn textureGather(component: C, t: texture_2d_array<T>, s: sampler, coords: vec2<f32>, array_index: C) -> vec4<T>\nfn textureGather(component: C, t: texture_2d_array<T>, s: sampler, coords: vec2<f32>, array_index: C, offset: vec2<i32>) -> vec4<T>\n\nParameters:\n * component:\n    - The index of the channel to read from the selected texels.\n    - When provided, the component expression must a creation-time expression (e.g. 1).\n    - Its value must be at least 0 and at most 3. Values outside of this range will result in a shader-creation error.\n * t: The sampled texture to read from\n * s: The sampler type\n * coords: The texture coordinates\n * array_index: The 0-based texture array index\n * offset:\n    - The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n      This offset is applied before applying any texture wrapping modes.\n    - The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    - Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .params(u =>\n    u\n      .combine('format', kTestableColorFormats)\n      .filter(t => isFillable(t.format))\n      .combine('minFilter', ['nearest', 'linear'] as const)\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('A', ['i32', 'u32'] as const)\n      .combine('addressModeU', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('addressModeV', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('offset', [false, true] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.skipIfTextureFormatNotSupported(t.params.format);\n    skipIfNeedsFilteringAndIsUnfilterableOrSelectDevice(t, t.params.minFilter, t.params.format);\n  })\n  .fn(async t => {\n    const { format, samplePoints, C, A, addressModeU, addressModeV, minFilter, offset } = t.params;\n\n    // We want at least 4 blocks or something wide enough for 3 mip levels.\n    const [width, height] = chooseTextureSize({ minSize: 8, minBlocks: 4, format });\n    const depthOrArrayLayers = 4;\n\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size: { width, height, depthOrArrayLayers },\n      mipLevelCount: 3,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n    const sampler: GPUSamplerDescriptor = {\n      addressModeU,\n      addressModeV,\n      minFilter,\n      magFilter: minFilter,\n      mipmapFilter: minFilter,\n    };\n\n    const calls: TextureCall<vec2>[] = generateTextureBuiltinInputs2D(50, {\n      method: samplePoints,\n      textureBuiltin: 'textureGather',\n      sampler,\n      descriptor,\n      arrayIndex: { num: texture.depthOrArrayLayers, type: A },\n      offset,\n      component: true,\n      hashInputs: [format, samplePoints, C, A, addressModeU, addressModeV, minFilter, offset],\n    }).map(({ coords, component, arrayIndex, offset }) => {\n      return {\n        builtin: 'textureGather',\n        component,\n        componentType: C === 'i32' ? 'i' : 'u',\n        coordType: 'f',\n        coords,\n        arrayIndex,\n        arrayIndexType: A === 'i32' ? 'i' : 'u',\n        offset,\n      };\n    });\n    const textureType = appendComponentTypeForFormatToTextureType('texture_2d_array', format);\n    const viewDescriptor = {};\n    const results = await doTextureCalls(t, texture, viewDescriptor, textureType, sampler, calls);\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results\n    );\n    t.expectOK(res);\n  });\n\ng.test('sampled_array_3d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturegather')\n  .desc(\n    `\nC: i32, u32\nT: i32, u32, f32\nA: i32, u32\n\nfn textureGather(component: C, t: texture_cube_array<T>, s: sampler, coords: vec3<f32>, array_index: A) -> vec4<T>\n\nParameters:\n * component:\n    - The index of the channel to read from the selected texels.\n    - When provided, the component expression must a creation-time expression (e.g. 1).\n    - Its value must be at least 0 and at most 3. Values outside of this range will result in a shader-creation error.\n * t: The sampled texture to read from\n * s: The sampler type\n * coords: The texture coordinates\n * array_index: The 0-based texture array index\n`\n  )\n  .params(u =>\n    u\n      .combine('format', kTestableColorFormats)\n      .filter(t => isFillable(t.format))\n      .combine('minFilter', ['nearest', 'linear'] as const)\n      .beginSubcases()\n      .combine('samplePoints', kCubeSamplePointMethods)\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('A', ['i32', 'u32'] as const)\n      .combine('addressMode', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.skipIfTextureFormatNotSupported(t.params.format);\n    t.skipIfTextureViewDimensionNotSupported('cube-array');\n    skipIfNeedsFilteringAndIsUnfilterableOrSelectDevice(t, t.params.minFilter, t.params.format);\n  })\n  .fn(async t => {\n    const { format, C, A, samplePoints, addressMode, minFilter } = t.params;\n\n    const viewDimension: GPUTextureViewDimension = 'cube-array';\n    const size = chooseTextureSize({ minSize: 8, minBlocks: 2, format, viewDimension });\n\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      ...(t.isCompatibility && { textureBindingViewDimension: viewDimension }),\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n      mipLevelCount: 3,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n    const sampler: GPUSamplerDescriptor = {\n      addressModeU: addressMode,\n      addressModeV: addressMode,\n      addressModeW: addressMode,\n      minFilter,\n      magFilter: minFilter,\n      mipmapFilter: minFilter,\n    };\n\n    const calls: TextureCall<vec3>[] = generateSamplePointsCube(50, {\n      method: samplePoints,\n      sampler,\n      descriptor,\n      component: true,\n      textureBuiltin: 'textureGather',\n      arrayIndex: { num: texture.depthOrArrayLayers / 6, type: A },\n      hashInputs: [format, C, samplePoints, addressMode, minFilter],\n    }).map(({ coords, component, arrayIndex }) => {\n      return {\n        builtin: 'textureGather',\n        component,\n        componentType: C === 'i32' ? 'i' : 'u',\n        arrayIndex,\n        arrayIndexType: A === 'i32' ? 'i' : 'u',\n        coordType: 'f',\n        coords,\n      };\n    });\n    const viewDescriptor = {\n      dimension: viewDimension,\n    };\n    const textureType = appendComponentTypeForFormatToTextureType('texture_cube_array', format);\n    const results = await doTextureCalls(t, texture, viewDescriptor, textureType, sampler, calls);\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results\n    );\n    t.expectOK(res);\n  });\n\ng.test('depth_2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturegather')\n  .desc(\n    `\nfn textureGather(t: texture_depth_2d, s: sampler, coords: vec2<f32>) -> vec4<f32>\nfn textureGather(t: texture_depth_2d, s: sampler, coords: vec2<f32>, offset: vec2<i32>) -> vec4<f32>\n\nParameters:\n * t: The depth texture to read from\n * s: The sampler type\n * coords: The texture coordinates\n * offset:\n    - The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n      This offset is applied before applying any texture wrapping modes.\n    - The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    - Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .params(u =>\n    u\n      .combine('format', kDepthStencilFormats)\n      // filter out stencil only formats\n      .filter(t => isDepthTextureFormat(t.format))\n      // MAINTENANCE_TODO: Remove when support for depth24plus, depth24plus-stencil8, and depth32float-stencil8 is added.\n      .filter(t => isEncodableTextureFormat(t.format))\n      .combine('minFilter', ['nearest', 'linear'] as const)\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('addressModeU', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('addressModeV', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('offset', [false, true] as const)\n  )\n  .fn(async t => {\n    const { format, samplePoints, addressModeU, addressModeV, minFilter, offset } = t.params;\n\n    // We want at least 4 blocks or something wide enough for 3 mip levels.\n    const [width, height] = chooseTextureSize({ minSize: 8, minBlocks: 4, format });\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size: { width, height },\n      mipLevelCount: 3,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n    const sampler: GPUSamplerDescriptor = {\n      addressModeU,\n      addressModeV,\n      minFilter,\n      magFilter: minFilter,\n      mipmapFilter: minFilter,\n    };\n\n    const calls: TextureCall<vec2>[] = generateTextureBuiltinInputs2D(50, {\n      method: samplePoints,\n      textureBuiltin: 'textureGather',\n      sampler,\n      descriptor,\n      offset,\n      hashInputs: [format, samplePoints, addressModeU, addressModeV, minFilter, offset],\n    }).map(({ coords, offset }) => {\n      return {\n        builtin: 'textureGather',\n        coordType: 'f',\n        coords,\n        offset,\n      };\n    });\n    const textureType = 'texture_depth_2d';\n    const viewDescriptor = {};\n    const results = await doTextureCalls(t, texture, viewDescriptor, textureType, sampler, calls);\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results\n    );\n    t.expectOK(res);\n  });\n\ng.test('depth_3d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturegather')\n  .desc(\n    `\nfn textureGather(t: texture_depth_cube, s: sampler, coords: vec3<f32>) -> vec4<f32>\n\nParameters:\n * t: The depth texture to read from\n * s: The sampler type\n * coords: The texture coordinates\n`\n  )\n  .params(u =>\n    u\n      .combine('format', kDepthStencilFormats)\n      // filter out stencil only formats\n      .filter(t => isDepthTextureFormat(t.format))\n      // MAINTENANCE_TODO: Remove when support for depth24plus, depth24plus-stencil8, and depth32float-stencil8 is added.\n      .filter(t => isEncodableTextureFormat(t.format))\n      .combine('minFilter', ['nearest', 'linear'] as const)\n      .beginSubcases()\n      .combine('samplePoints', kCubeSamplePointMethods)\n      .combine('addressMode', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n  )\n  .fn(async t => {\n    const { format, samplePoints, addressMode, minFilter } = t.params;\n\n    const viewDimension: GPUTextureViewDimension = 'cube';\n    const [width, height] = chooseTextureSize({ minSize: 8, minBlocks: 2, format, viewDimension });\n    const depthOrArrayLayers = 6;\n\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      ...(t.isCompatibility && { textureBindingViewDimension: viewDimension }),\n      size: { width, height, depthOrArrayLayers },\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n      mipLevelCount: 3,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n    const sampler: GPUSamplerDescriptor = {\n      addressModeU: addressMode,\n      addressModeV: addressMode,\n      addressModeW: addressMode,\n      minFilter,\n      magFilter: minFilter,\n      mipmapFilter: minFilter,\n    };\n\n    const calls: TextureCall<vec3>[] = generateSamplePointsCube(50, {\n      method: samplePoints,\n      sampler,\n      descriptor,\n      textureBuiltin: 'textureGather',\n      hashInputs: [format, samplePoints, addressMode, minFilter],\n    }).map(({ coords, component }) => {\n      return {\n        builtin: 'textureGather',\n        coordType: 'f',\n        coords,\n      };\n    });\n    const viewDescriptor = {\n      dimension: viewDimension,\n    };\n    const textureType = 'texture_depth_cube';\n    const results = await doTextureCalls(t, texture, viewDescriptor, textureType, sampler, calls);\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results\n    );\n    t.expectOK(res);\n  });\n\ng.test('depth_array_2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturegather')\n  .desc(\n    `\nA: i32, u32\n\nfn textureGather(t: texture_depth_2d_array, s: sampler, coords: vec2<f32>, array_index: A) -> vec4<f32>\nfn textureGather(t: texture_depth_2d_array, s: sampler, coords: vec2<f32>, array_index: A, offset: vec2<i32>) -> vec4<f32>\n\nParameters:\n * t: The depth texture to read from\n * s: The sampler type\n * coords: The texture coordinates\n * array_index: The 0-based texture array index\n * offset:\n    - The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n      This offset is applied before applying any texture wrapping modes.\n    - The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    - Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .params(u =>\n    u\n      .combine('format', kDepthStencilFormats)\n      // filter out stencil only formats\n      .filter(t => isDepthTextureFormat(t.format))\n      // MAINTENANCE_TODO: Remove when support for depth24plus, depth24plus-stencil8, and depth32float-stencil8 is added.\n      .filter(t => isEncodableTextureFormat(t.format))\n      .combine('minFilter', ['nearest', 'linear'] as const)\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('A', ['i32', 'u32'] as const)\n      .combine('addressModeU', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('addressModeV', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('offset', [false, true] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.skipIfTextureFormatNotSupported(t.params.format);\n    skipIfNeedsFilteringAndIsUnfilterableOrSelectDevice(t, t.params.minFilter, t.params.format);\n  })\n  .fn(async t => {\n    const { format, samplePoints, A, addressModeU, addressModeV, minFilter, offset } = t.params;\n\n    // We want at least 4 blocks or something wide enough for 3 mip levels.\n    const [width, height] = chooseTextureSize({ minSize: 8, minBlocks: 4, format });\n    const depthOrArrayLayers = 4;\n\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size: { width, height, depthOrArrayLayers },\n      mipLevelCount: 3,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n    const sampler: GPUSamplerDescriptor = {\n      addressModeU,\n      addressModeV,\n      minFilter,\n      magFilter: minFilter,\n      mipmapFilter: minFilter,\n    };\n\n    const calls: TextureCall<vec2>[] = generateTextureBuiltinInputs2D(50, {\n      method: samplePoints,\n      textureBuiltin: 'textureGather',\n      sampler,\n      descriptor,\n      arrayIndex: { num: texture.depthOrArrayLayers, type: A },\n      offset,\n      hashInputs: [format, samplePoints, A, addressModeU, addressModeV, minFilter, offset],\n    }).map(({ coords, arrayIndex, offset }) => {\n      return {\n        builtin: 'textureGather',\n        coordType: 'f',\n        coords,\n        arrayIndex,\n        arrayIndexType: A === 'i32' ? 'i' : 'u',\n        offset,\n      };\n    });\n    const textureType = 'texture_depth_2d_array';\n    const viewDescriptor = {};\n    const results = await doTextureCalls(t, texture, viewDescriptor, textureType, sampler, calls);\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results\n    );\n    t.expectOK(res);\n  });\n\ng.test('depth_array_3d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturegather')\n  .desc(\n    `\nA: i32, u32\n\nfn textureGather(t: texture_depth_cube_array, s: sampler, coords: vec3<f32>, array_index: A) -> vec4<f32>\n\nParameters:\n * t: The depth texture to read from\n * s: The sampler type\n * coords: The texture coordinates\n * array_index: The 0-based texture array index\n`\n  )\n  .params(u =>\n    u\n      .combine('format', kDepthStencilFormats)\n      // filter out stencil only formats\n      .filter(t => isDepthTextureFormat(t.format))\n      // MAINTENANCE_TODO: Remove when support for depth24plus, depth24plus-stencil8, and depth32float-stencil8 is added.\n      .filter(t => isEncodableTextureFormat(t.format))\n      .combine('minFilter', ['nearest', 'linear'] as const)\n      .beginSubcases()\n      .combine('samplePoints', kCubeSamplePointMethods)\n      .combine('A', ['i32', 'u32'] as const)\n      .combine('addressMode', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.skipIfTextureViewDimensionNotSupported('cube-array');\n  })\n  .fn(async t => {\n    const { format, A, samplePoints, addressMode, minFilter } = t.params;\n\n    const viewDimension: GPUTextureViewDimension = 'cube-array';\n    const size = chooseTextureSize({ minSize: 8, minBlocks: 2, format, viewDimension });\n\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      ...(t.isCompatibility && { textureBindingViewDimension: viewDimension }),\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n      mipLevelCount: 3,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n    const sampler: GPUSamplerDescriptor = {\n      addressModeU: addressMode,\n      addressModeV: addressMode,\n      addressModeW: addressMode,\n      minFilter,\n      magFilter: minFilter,\n      mipmapFilter: minFilter,\n    };\n\n    const calls: TextureCall<vec3>[] = generateSamplePointsCube(50, {\n      method: samplePoints,\n      sampler,\n      descriptor,\n      textureBuiltin: 'textureGather',\n      arrayIndex: { num: texture.depthOrArrayLayers / 6, type: A },\n      hashInputs: [format, samplePoints, addressMode, minFilter],\n    }).map(({ coords, arrayIndex }) => {\n      return {\n        builtin: 'textureGather',\n        arrayIndex,\n        arrayIndexType: A === 'i32' ? 'i' : 'u',\n        coordType: 'f',\n        coords,\n      };\n    });\n    const viewDescriptor = {\n      dimension: viewDimension,\n    };\n    const textureType = 'texture_depth_cube_array';\n    const results = await doTextureCalls(t, texture, viewDescriptor, textureType, sampler, calls);\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results\n    );\n    t.expectOK(res);\n  });\n"],"mappings":"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"}