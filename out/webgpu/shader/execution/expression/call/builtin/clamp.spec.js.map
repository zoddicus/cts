{"version":3,"file":"clamp.spec.js","names":["description","makeTestGroup","GPUTest","kValue","TypeF32","TypeI32","TypeU32","FP","sparseF32Range","makeCaseCache","allInputSources","run","builtin","g","u32Values","u32","min","max","i32Values","i32","negative","positive","d","u32_non_const","generateIntegerTestCases","u32_const","i32_non_const","i32_const","f32_const","generateF32TestCases","f32_non_const","test_values","type","stage","cases","Array","e","low","high","push","input","create","expected","Math","c","f32","makeScalarTripleToIntervalCase","clampIntervals","undefined","test","specURL","desc","params","u","combine","unimplemented","fn","t","get","inputSource"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/clamp.spec.ts"],"sourcesContent":["export const description = `\nExecution tests for the 'clamp' builtin function\n\nS is AbstractInt, i32, or u32\nT is S or vecN<S>\n@const fn clamp(e: T , low: T, high: T) -> T\nReturns min(max(e,low),high). Component-wise when T is a vector.\n\nS is AbstractFloat, f32, f16\nT is S or vecN<S>\n@const clamp(e: T , low: T , high: T) -> T\nReturns either min(max(e,low),high), or the median of the three values e, low, high.\nComponent-wise when T is a vector.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { kValue } from '../../../../../util/constants.js';\nimport { ScalarType, TypeF32, TypeI32, TypeU32 } from '../../../../../util/conversion.js';\nimport { FP } from '../../../../../util/floating_point.js';\nimport { sparseF32Range } from '../../../../../util/math.js';\nimport { makeCaseCache } from '../../case_cache.js';\nimport { allInputSources, Case, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\nconst u32Values = [kValue.u32.min, 1, 2, 0x70000000, 0x80000000, kValue.u32.max];\n\nconst i32Values = [kValue.i32.negative.min, -2, -1, 0, 1, 2, 0x70000000, kValue.i32.positive.max];\n\nexport const d = makeCaseCache('clamp', {\n  u32_non_const: () => {\n    return generateIntegerTestCases(u32Values, TypeU32, 'non-const');\n  },\n  u32_const: () => {\n    return generateIntegerTestCases(u32Values, TypeU32, 'const');\n  },\n  i32_non_const: () => {\n    return generateIntegerTestCases(i32Values, TypeI32, 'non-const');\n  },\n  i32_const: () => {\n    return generateIntegerTestCases(i32Values, TypeI32, 'const');\n  },\n  f32_const: () => {\n    return generateF32TestCases(sparseF32Range(), 'const');\n  },\n  f32_non_const: () => {\n    return generateF32TestCases(sparseF32Range(), 'non-const');\n  },\n});\n\n/** @returns a set of clamp test cases from an ascending list of integer values */\nfunction generateIntegerTestCases(\n  test_values: Array<number>,\n  type: ScalarType,\n  stage: 'const' | 'non-const'\n): Array<Case> {\n  const cases = new Array<Case>();\n  for (const e of test_values) {\n    for (const low of test_values) {\n      for (const high of test_values) {\n        if (stage === 'const' && low > high) {\n          continue; // This would result in a shader compilation error\n        }\n        cases.push({\n          input: [type.create(e), type.create(low), type.create(high)],\n          expected: type.create(Math.min(Math.max(e, low), high)),\n        });\n      }\n    }\n  }\n  return cases;\n}\n\nfunction generateF32TestCases(\n  test_values: Array<number>,\n  stage: 'const' | 'non-const'\n): Array<Case> {\n  const cases = new Array<Case>();\n  for (const e of test_values) {\n    for (const low of test_values) {\n      for (const high of test_values) {\n        if (stage === 'const' && low > high) {\n          continue; // This would result in a shader compilation error\n        }\n        const c = FP.f32.makeScalarTripleToIntervalCase(\n          e,\n          low,\n          high,\n          stage === 'const' ? 'finite' : 'unfiltered',\n          ...FP.f32.clampIntervals\n        );\n        if (c !== undefined) {\n          cases.push(c);\n        }\n      }\n    }\n  }\n  return cases;\n}\n\ng.test('abstract_int')\n  .specURL('https://www.w3.org/TR/WGSL/#integer-builtin-functions')\n  .desc(`abstract int tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('u32')\n  .specURL('https://www.w3.org/TR/WGSL/#integer-builtin-functions')\n  .desc(`u32 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = await d.get(t.params.inputSource === 'const' ? 'u32_const' : 'u32_non_const');\n    await run(t, builtin('clamp'), [TypeU32, TypeU32, TypeU32], TypeU32, t.params, cases);\n  });\n\ng.test('i32')\n  .specURL('https://www.w3.org/TR/WGSL/#integer-builtin-functions')\n  .desc(`i32 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = await d.get(t.params.inputSource === 'const' ? 'i32_const' : 'i32_non_const');\n    await run(t, builtin('clamp'), [TypeI32, TypeI32, TypeI32], TypeI32, t.params, cases);\n  });\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`abstract float tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('f32')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f32 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = await d.get(t.params.inputSource === 'const' ? 'f32_const' : 'f32_non_const');\n    await run(t, builtin('clamp'), [TypeF32, TypeF32, TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f16 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n"],"mappings":"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"}