{"version":3,"file":"clamp.spec.js","names":["description","makeTestGroup","GPUTest","kBit","i32","i32Bits","TypeF32","TypeI32","TypeU32","u32","u32Bits","FP","sparseF32Range","makeCaseCache","allInputSources","run","builtin","g","d","test_values","min","max","generateIntegerTestCases","negative","positive","f32_const","f32","generateScalarTripleToIntervalCases","clampIntervals","f32_non_const","calculateMinMaxClamp","ei","fi","gi","Math","cases","Array","forEach","e","f","expected_idx","expected","push","input","test","specURL","desc","params","u","combine","undefined","unimplemented","fn","t","get","inputSource"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/clamp.spec.ts"],"sourcesContent":["export const description = `\nExecution tests for the 'clamp' builtin function\n\nS is AbstractInt, i32, or u32\nT is S or vecN<S>\n@const fn clamp(e: T , low: T, high: T) -> T\nReturns min(max(e,low),high). Component-wise when T is a vector.\n\nS is AbstractFloat, f32, f16\nT is S or vecN<S>\n@const clamp(e: T , low: T , high: T) -> T\nReturns either min(max(e,low),high), or the median of the three values e, low, high.\nComponent-wise when T is a vector.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { kBit } from '../../../../../util/constants.js';\nimport {\n  i32,\n  i32Bits,\n  Scalar,\n  TypeF32,\n  TypeI32,\n  TypeU32,\n  u32,\n  u32Bits,\n} from '../../../../../util/conversion.js';\nimport { FP } from '../../../../../util/floating_point.js';\nimport { sparseF32Range } from '../../../../../util/math.js';\nimport { makeCaseCache } from '../../case_cache.js';\nimport { allInputSources, Case, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\nexport const d = makeCaseCache('clamp', {\n  u32: () => {\n    // This array must be strictly increasing, since that ordering determines\n    // the expected values.\n    const test_values: Array<Scalar> = [\n      u32Bits(kBit.u32.min),\n      u32(1),\n      u32(2),\n      u32(0x70000000),\n      u32(0x80000000),\n      u32Bits(kBit.u32.max),\n    ];\n\n    return generateIntegerTestCases(test_values);\n  },\n  i32: () => {\n    // This array must be strictly increasing, since that ordering determines\n    // the expected values.\n    const test_values: Array<Scalar> = [\n      i32Bits(kBit.i32.negative.min),\n      i32(-2),\n      i32(-1),\n      i32(0),\n      i32(1),\n      i32(2),\n      i32Bits(0x70000000),\n      i32Bits(kBit.i32.positive.max),\n    ];\n\n    return generateIntegerTestCases(test_values);\n  },\n  f32_const: () => {\n    return FP.f32.generateScalarTripleToIntervalCases(\n      sparseF32Range(),\n      sparseF32Range(),\n      sparseF32Range(),\n      'finite',\n      ...FP.f32.clampIntervals\n    );\n  },\n  f32_non_const: () => {\n    return FP.f32.generateScalarTripleToIntervalCases(\n      sparseF32Range(),\n      sparseF32Range(),\n      sparseF32Range(),\n      'unfiltered',\n      ...FP.f32.clampIntervals\n    );\n  },\n});\n\n/**\n * Calculates clamp using the min-max formula.\n * clamp(e, f, g) = min(max(e, f), g)\n *\n * Operates on indices of an ascending sorted array, instead of the actual\n * values to avoid rounding issues.\n *\n * @returns the index of the clamped value\n */\nfunction calculateMinMaxClamp(ei: number, fi: number, gi: number): number {\n  return Math.min(Math.max(ei, fi), gi);\n}\n\n/** @returns a set of clamp test cases from an ascending list of integer values */\nfunction generateIntegerTestCases(test_values: Array<Scalar>): Array<Case> {\n  const cases = new Array<Case>();\n  test_values.forEach((e, ei) => {\n    test_values.forEach((f, fi) => {\n      test_values.forEach((g, gi) => {\n        const expected_idx = calculateMinMaxClamp(ei, fi, gi);\n        const expected = test_values[expected_idx];\n        cases.push({ input: [e, f, g], expected });\n      });\n    });\n  });\n  return cases;\n}\n\ng.test('abstract_int')\n  .specURL('https://www.w3.org/TR/WGSL/#integer-builtin-functions')\n  .desc(`abstract int tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('u32')\n  .specURL('https://www.w3.org/TR/WGSL/#integer-builtin-functions')\n  .desc(`u32 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = await d.get('u32');\n    await run(t, builtin('clamp'), [TypeU32, TypeU32, TypeU32], TypeU32, t.params, cases);\n  });\n\ng.test('i32')\n  .specURL('https://www.w3.org/TR/WGSL/#integer-builtin-functions')\n  .desc(`i32 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = await d.get('i32');\n    await run(t, builtin('clamp'), [TypeI32, TypeI32, TypeI32], TypeI32, t.params, cases);\n  });\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`abstract float tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('f32')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f32 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = await d.get(t.params.inputSource === 'const' ? 'f32_const' : 'f32_non_const');\n    await run(t, builtin('clamp'), [TypeF32, TypeF32, TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f16 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n"],"mappings":"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"}