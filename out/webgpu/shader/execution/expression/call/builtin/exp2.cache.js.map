{"version":3,"file":"exp2.cache.js","names":["kValue","FP","biasedRange","linearRange","makeCaseCache","f32_inputs","f32","negative","min","max","positive","f16_inputs","f16","d","f32_const","generateScalarToIntervalCases","exp2Interval","f32_non_const","f16_const","f16_non_const"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/exp2.cache.ts"],"sourcesContent":["import { kValue } from '../../../../../util/constants.js';\nimport { FP } from '../../../../../util/floating_point.js';\nimport { biasedRange, linearRange } from '../../../../../util/math.js';\nimport { makeCaseCache } from '../../case_cache.js';\n\n// floor(log2(max f32 value)) = 127, so exp2(127) will be within range of a f32, but exp2(128) will not\n// floor(ln(max f64 value)) = 1023, so exp2(1023) can be handled by the testing framework, but exp2(1024) will misbehave\nconst f32_inputs = [\n  0, // Returns 1 by definition\n  -128, // Returns subnormal value\n  kValue.f32.negative.min, // Closest to returning 0 as possible\n  ...biasedRange(kValue.f32.negative.max, -127, 100),\n  ...biasedRange(kValue.f32.positive.min, 127, 100),\n  ...linearRange(128, 1023, 10), // Overflows f32, but not f64\n];\n\n// floor(log2(max f16 value)) = 15, so exp2(15) will be within range of a f16, but exp2(15) will not\nconst f16_inputs = [\n  0, // Returns 1 by definition\n  -16, // Returns subnormal value\n  kValue.f16.negative.min, // Closest to returning 0 as possible\n  ...biasedRange(kValue.f16.negative.max, -15, 100),\n  ...biasedRange(kValue.f16.positive.min, 15, 100),\n  ...linearRange(16, 1023, 10), // Overflows f16, but not f64\n];\n\nexport const d = makeCaseCache('exp2', {\n  f32_const: () => {\n    return FP.f32.generateScalarToIntervalCases(f32_inputs, 'finite', FP.f32.exp2Interval);\n  },\n  f32_non_const: () => {\n    return FP.f32.generateScalarToIntervalCases(f32_inputs, 'unfiltered', FP.f32.exp2Interval);\n  },\n  f16_const: () => {\n    return FP.f16.generateScalarToIntervalCases(f16_inputs, 'finite', FP.f16.exp2Interval);\n  },\n  f16_non_const: () => {\n    return FP.f16.generateScalarToIntervalCases(f16_inputs, 'unfiltered', FP.f16.exp2Interval);\n  },\n});\n"],"mappings":";;GAAA,SAASA,MAAM,QAAQ,kCAAkC,CACzD,SAASC,EAAE,QAAQ,uCAAuC,CAC1D,SAASC,WAAW,EAAEC,WAAW,QAAQ,6BAA6B;AACtE,SAASC,aAAa,QAAQ,qBAAqB;;AAEnD;AACA;AACA,MAAMC,UAAU,GAAG;AACjB,CAAC,EAAE;AACH,CAAC,GAAG,EAAE;AACNL,MAAM,CAACM,GAAG,CAACC,QAAQ,CAACC,GAAG,EAAE;AACzB,GAAGN,WAAW,CAACF,MAAM,CAACM,GAAG,CAACC,QAAQ,CAACE,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;AAClD,GAAGP,WAAW,CAACF,MAAM,CAACM,GAAG,CAACI,QAAQ,CAACF,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;AACjD,GAAGL,WAAW,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,CAAC,CAAE;AAAA,CAChC;;AAED;AACA,MAAMQ,UAAU,GAAG;AACjB,CAAC,EAAE;AACH,CAAC,EAAE,EAAE;AACLX,MAAM,CAACY,GAAG,CAACL,QAAQ,CAACC,GAAG,EAAE;AACzB,GAAGN,WAAW,CAACF,MAAM,CAACY,GAAG,CAACL,QAAQ,CAACE,GAAG,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC;AACjD,GAAGP,WAAW,CAACF,MAAM,CAACY,GAAG,CAACF,QAAQ,CAACF,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC;AAChD,GAAGL,WAAW,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE,CAAC,CAAE;AAAA,CAC/B;;AAED,OAAO,MAAMU,CAAC,GAAGT,aAAa,CAAC,MAAM,EAAE;EACrCU,SAAS,EAAEA,CAAA,KAAM;IACf,OAAOb,EAAE,CAACK,GAAG,CAACS,6BAA6B,CAACV,UAAU,EAAE,QAAQ,EAAEJ,EAAE,CAACK,GAAG,CAACU,YAAY,CAAC;EACxF,CAAC;EACDC,aAAa,EAAEA,CAAA,KAAM;IACnB,OAAOhB,EAAE,CAACK,GAAG,CAACS,6BAA6B,CAACV,UAAU,EAAE,YAAY,EAAEJ,EAAE,CAACK,GAAG,CAACU,YAAY,CAAC;EAC5F,CAAC;EACDE,SAAS,EAAEA,CAAA,KAAM;IACf,OAAOjB,EAAE,CAACW,GAAG,CAACG,6BAA6B,CAACJ,UAAU,EAAE,QAAQ,EAAEV,EAAE,CAACW,GAAG,CAACI,YAAY,CAAC;EACxF,CAAC;EACDG,aAAa,EAAEA,CAAA,KAAM;IACnB,OAAOlB,EAAE,CAACW,GAAG,CAACG,6BAA6B,CAACJ,UAAU,EAAE,YAAY,EAAEV,EAAE,CAACW,GAAG,CAACI,YAAY,CAAC;EAC5F;AACF,CAAC,CAAC"}