{"version":3,"file":"subgroup_util.js","names":["assert","iterRange","Float16Array","kTextureFormatInfo","GPUTest","TextureTestMixin","sparseScalarF16Range","sparseScalarF32Range","align","PRNG","SubgroupTest","kNumCases","kStride","kWGSizes","kPredicateCases","every_even","cond","filter","id","size","every_odd","lower_half","Math","floor","upper_half","first_two","checkAccuracy","metadata","output","indices","values","identity","intervalGen","subgroupIdIdx1","subgroupIdIdx2","i","length","subgroupId","v1","v2","interval","contains","Error","toString","undefined","runAccuracyTest","t","seed","wgSize","operation","type","prng","wgThreads","maxComputeInvocationsPerWorkgroup","maxComputeWorkgroupSizeX","maxComputeWorkgroupSizeY","maxComputeWorkgroupSizeZ","device","limits","skipIf","indexLimit","idx1","uniformInt","idx2","range","numVals","val1","val2","extraEnables","wgsl","inputData","x","Float32Array","inputBuffer","makeBufferWithContents","GPUBufferUsage","COPY_SRC","COPY_DST","STORAGE","trackForCleanup","outputBuffer","numMetadata","metadataBuffer","Uint32Array","pipeline","createComputePipeline","layout","compute","module","createShaderModule","code","entryPoint","bg","createBindGroup","getBindGroupLayout","entries","binding","resource","buffer","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","queue","submit","finish","metadataReadback","readGPUBufferRangeTyped","srcByteOffset","typedLength","method","data","outputReadback","expectOK","kDataSentinel","runComputeTest","outputUintsPerElement","checkFunction","outputUints","kFramebufferSizes","runFragmentTest","format","fsShader","width","height","checker","vsShader","createRenderPipeline","vertex","fragment","targets","primitive","topology","blockWidth","blockHeight","bytesPerBlock","blocksPerRow","blocksPerColumn","bytesPerRow","byteLength","uintLength","framebuffer","createTextureTracked","usage","GPUTextureUsage","RENDER_ATTACHMENT","TEXTURE_BINDING","beginRenderPass","colorAttachments","view","createView","loadOp","storeOp","draw","copyBuffer","copyWholeTextureToNewBufferSimple","readback"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/subgroup_util.ts"],"sourcesContent":["import { assert, iterRange } from '../../../../../../common/util/util.js';\nimport { Float16Array } from '../../../../../../external/petamoriken/float16/float16.js';\nimport { kTextureFormatInfo } from '../../../../../format_info.js';\nimport { GPUTest, TextureTestMixin } from '../../../../../gpu_test.js';\nimport { FPInterval } from '../../../../../util/floating_point.js';\nimport { sparseScalarF16Range, sparseScalarF32Range, align } from '../../../../../util/math.js';\nimport { PRNG } from '../../../../../util/prng.js';\n\nexport class SubgroupTest extends TextureTestMixin(GPUTest) {}\n\nexport const kNumCases = 1000;\nexport const kStride = 128;\n\nexport const kWGSizes = [\n  [4, 1, 1],\n  [8, 1, 1],\n  [16, 1, 1],\n  [32, 1, 1],\n  [64, 1, 1],\n  [128, 1, 1],\n  [256, 1, 1],\n  [1, 4, 1],\n  [1, 8, 1],\n  [1, 16, 1],\n  [1, 32, 1],\n  [1, 64, 1],\n  [1, 128, 1],\n  [1, 256, 1],\n  [1, 1, 4],\n  [1, 1, 8],\n  [1, 1, 16],\n  [1, 1, 32],\n  [1, 1, 64],\n  [3, 3, 3],\n  [4, 4, 4],\n  [16, 16, 1],\n  [16, 1, 16],\n  [1, 16, 16],\n  [15, 3, 3],\n  [3, 15, 3],\n  [3, 3, 15],\n] as const;\n\nexport const kPredicateCases = {\n  every_even: {\n    cond: `id % 2 == 0`,\n    filter: (id: number, size: number) => {\n      return id % 2 === 0;\n    },\n  },\n  every_odd: {\n    cond: `id % 2 == 1`,\n    filter: (id: number, size: number) => {\n      return id % 2 === 1;\n    },\n  },\n  lower_half: {\n    cond: `id < subgroupSize / 2`,\n    filter: (id: number, size: number) => {\n      return id < Math.floor(size / 2);\n    },\n  },\n  upper_half: {\n    cond: `id >= subgroupSize / 2`,\n    filter: (id: number, size: number) => {\n      return id >= Math.floor(size / 2);\n    },\n  },\n  first_two: {\n    cond: `id == 0 || id == 1`,\n    filter: (id: number) => {\n      return id === 0 || id === 1;\n    },\n  },\n};\n\n/**\n * Check the accuracy of the reduction operation.\n *\n * @param metadata An array containing subgroup ids for each invocation\n * @param output An array containing the results of the reduction for each invocation\n * @param indices An array of two values containing the indices of the interesting values in the input\n * @param values An array of two values containing the interesting values in the input\n * @param identity The identity for the operation\n * @param intervalGen A functor to generate an appropriate FPInterval for a binary operation\n */\nfunction checkAccuracy(\n  metadata: Uint32Array,\n  output: Float32Array | Float16Array,\n  indices: number[],\n  values: number[],\n  identity: number,\n  intervalGen: (x: number | FPInterval, y: number | FPInterval) => FPInterval\n): undefined | Error {\n  const subgroupIdIdx1 = metadata[indices[0]];\n  const subgroupIdIdx2 = metadata[indices[1]];\n  for (let i = 0; i < output.length; i++) {\n    const subgroupId = metadata[i];\n\n    const v1 = subgroupId === subgroupIdIdx1 ? values[0] : identity;\n    const v2 = subgroupId === subgroupIdIdx2 ? values[1] : identity;\n    const interval = intervalGen(v1, v2);\n    if (!interval.contains(output[i])) {\n      return new Error(`Invocation ${i}, subgroup id ${subgroupId}: incorrect result\n- interval: ${interval.toString()}\n- output: ${output[i]}`);\n    }\n  }\n\n  return undefined;\n}\n\n/**\n * Run a floating-point accuracy subgroup test.\n *\n * @param t The base test\n * @param seed A seed for the PRNG\n * @param wgSize An array for the workgroup size\n * @param operation The subgroup operation\n * @param type The type (f16 or f32)\n * @param identity The identity for the operation\n * @param intervalGen A functor to generate an appropriate FPInterval for a binary operation\n */\nexport async function runAccuracyTest(\n  t: GPUTest,\n  seed: number,\n  wgSize: number[],\n  operation: string,\n  type: 'f16' | 'f32',\n  identity: number,\n  intervalGen: (x: number | FPInterval, y: number | FPInterval) => FPInterval\n) {\n  assert(seed < kNumCases);\n  const prng = new PRNG(seed);\n\n  // Compatibility mode has lower workgroup limits.\n  const wgThreads = wgSize[0] * wgSize[1] * wgSize[2];\n  const {\n    maxComputeInvocationsPerWorkgroup,\n    maxComputeWorkgroupSizeX,\n    maxComputeWorkgroupSizeY,\n    maxComputeWorkgroupSizeZ,\n  } = t.device.limits;\n  t.skipIf(\n    maxComputeInvocationsPerWorkgroup < wgThreads ||\n      maxComputeWorkgroupSizeX < wgSize[0] ||\n      maxComputeWorkgroupSizeY < wgSize[1] ||\n      maxComputeWorkgroupSizeZ < wgSize[2],\n    'Workgroup size too large'\n  );\n\n  // Bias half the cases to lower indices since most subgroup sizes are <= 64.\n  let indexLimit = kStride;\n  if (seed < kNumCases / 4) {\n    indexLimit = 16;\n  } else if (seed < kNumCases / 2) {\n    indexLimit = 64;\n  }\n\n  // Ensure two distinct indices are picked.\n  const idx1 = prng.uniformInt(indexLimit);\n  let idx2 = prng.uniformInt(indexLimit - 1);\n  if (idx1 === idx2) {\n    idx2++;\n  }\n  assert(idx2 < indexLimit);\n\n  // Select two random values.\n  const range = type === 'f16' ? sparseScalarF16Range() : sparseScalarF32Range();\n  const numVals = range.length;\n  const val1 = range[prng.uniformInt(numVals)];\n  const val2 = range[prng.uniformInt(numVals)];\n\n  const extraEnables = type === 'f16' ? `enable f16;\\nenable subgroups_f16;` : ``;\n  const wgsl = `\nenable subgroups;\n${extraEnables}\n\n@group(0) @binding(0)\nvar<storage> inputs : array<${type}>;\n\n@group(0) @binding(1)\nvar<storage, read_write> outputs : array<${type}>;\n\nstruct Metadata {\n  subgroup_id : array<u32, ${kStride}>,\n}\n\n@group(0) @binding(2)\nvar<storage, read_write> metadata : Metadata;\n\n@compute @workgroup_size(${wgSize[0]}, ${wgSize[1]}, ${wgSize[2]})\nfn main(\n  @builtin(local_invocation_index) lid : u32,\n) {\n  metadata.subgroup_id[lid] = subgroupBroadcast(lid, 0);\n  outputs[lid] = ${operation}(inputs[lid]);\n}`;\n\n  const inputData =\n    type === 'f16'\n      ? new Float16Array([\n          ...iterRange(kStride, x => {\n            if (x === idx1) return val1;\n            if (x === idx2) return val2;\n            return identity;\n          }),\n        ])\n      : new Float32Array([\n          ...iterRange(kStride, x => {\n            if (x === idx1) return val1;\n            if (x === idx2) return val2;\n            return identity;\n          }),\n        ]);\n\n  const inputBuffer = t.makeBufferWithContents(\n    inputData,\n    GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST | GPUBufferUsage.STORAGE\n  );\n  t.trackForCleanup(inputBuffer);\n\n  const outputBuffer = t.makeBufferWithContents(\n    new Float32Array([...iterRange(kStride, x => 0)]),\n    GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST | GPUBufferUsage.STORAGE\n  );\n  t.trackForCleanup(outputBuffer);\n\n  const numMetadata = kStride;\n  const metadataBuffer = t.makeBufferWithContents(\n    new Uint32Array([...iterRange(numMetadata, x => 0)]),\n    GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST | GPUBufferUsage.STORAGE\n  );\n\n  const pipeline = t.device.createComputePipeline({\n    layout: 'auto',\n    compute: {\n      module: t.device.createShaderModule({\n        code: wgsl,\n      }),\n      entryPoint: 'main',\n    },\n  });\n  const bg = t.device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [\n      {\n        binding: 0,\n        resource: {\n          buffer: inputBuffer,\n        },\n      },\n      {\n        binding: 1,\n        resource: {\n          buffer: outputBuffer,\n        },\n      },\n      {\n        binding: 2,\n        resource: {\n          buffer: metadataBuffer,\n        },\n      },\n    ],\n  });\n\n  const encoder = t.device.createCommandEncoder();\n  const pass = encoder.beginComputePass();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, bg);\n  pass.dispatchWorkgroups(1, 1, 1);\n  pass.end();\n  t.queue.submit([encoder.finish()]);\n\n  const metadataReadback = await t.readGPUBufferRangeTyped(metadataBuffer, {\n    srcByteOffset: 0,\n    type: Uint32Array,\n    typedLength: numMetadata,\n    method: 'copy',\n  });\n  const metadata = metadataReadback.data;\n\n  let output: Float16Array | Float32Array;\n  if (type === 'f16') {\n    const outputReadback = await t.readGPUBufferRangeTyped(outputBuffer, {\n      srcByteOffset: 0,\n      type: Float16Array,\n      typedLength: kStride,\n      method: 'copy',\n    });\n    output = outputReadback.data;\n  } else {\n    const outputReadback = await t.readGPUBufferRangeTyped(outputBuffer, {\n      srcByteOffset: 0,\n      type: Float32Array,\n      typedLength: kStride,\n      method: 'copy',\n    });\n    output = outputReadback.data;\n  }\n\n  t.expectOK(checkAccuracy(metadata, output, [idx1, idx2], [val1, val2], identity, intervalGen));\n}\n\nexport const kDataSentinel = 999;\n\n/**\n * Runs compute shader subgroup test\n *\n * The test makes the following assumptions:\n * * group(0) binding(0) is a storage buffer for input data\n * * group(0) binding(1) is an output storage buffer for outputUintsPerElement * wgSize uints\n * * group(0) binding(2) is an output storage buffer for 2 * wgSize uints\n *\n * @param t The base test\n * @param wgsl The shader code\n * @param outputUintsPerElement number of uints output per invocation\n * @param inputData the input data\n * @param checkFunction a functor that takes the output storage buffer data to check result validity\n */\nexport async function runComputeTest(\n  t: GPUTest,\n  wgsl: string,\n  wgSize: number[],\n  outputUintsPerElement: number,\n  inputData: Uint32Array,\n  checkFunction: (metadata: Uint32Array, output: Uint32Array) => Error | undefined\n) {\n  // Compatibility mode has lower workgroup limits.\n  const wgThreads = wgSize[0] * wgSize[1] * wgSize[2];\n  const {\n    maxComputeInvocationsPerWorkgroup,\n    maxComputeWorkgroupSizeX,\n    maxComputeWorkgroupSizeY,\n    maxComputeWorkgroupSizeZ,\n  } = t.device.limits;\n  t.skipIf(\n    maxComputeInvocationsPerWorkgroup < wgThreads ||\n      maxComputeWorkgroupSizeX < wgSize[0] ||\n      maxComputeWorkgroupSizeY < wgSize[1] ||\n      maxComputeWorkgroupSizeZ < wgSize[2],\n    'Workgroup size too large'\n  );\n\n  const inputBuffer = t.makeBufferWithContents(\n    inputData,\n    GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST | GPUBufferUsage.STORAGE\n  );\n  t.trackForCleanup(inputBuffer);\n\n  const outputUints = outputUintsPerElement * wgThreads;\n  const outputBuffer = t.makeBufferWithContents(\n    new Uint32Array([...iterRange(outputUints, x => kDataSentinel)]),\n    GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST | GPUBufferUsage.STORAGE\n  );\n  t.trackForCleanup(outputBuffer);\n\n  const numMetadata = 2 * wgThreads;\n  const metadataBuffer = t.makeBufferWithContents(\n    new Uint32Array([...iterRange(numMetadata, x => kDataSentinel)]),\n    GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST | GPUBufferUsage.STORAGE\n  );\n\n  const pipeline = t.device.createComputePipeline({\n    layout: 'auto',\n    compute: {\n      module: t.device.createShaderModule({\n        code: wgsl,\n      }),\n    },\n  });\n  const bg = t.device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [\n      {\n        binding: 0,\n        resource: {\n          buffer: inputBuffer,\n        },\n      },\n      {\n        binding: 1,\n        resource: {\n          buffer: outputBuffer,\n        },\n      },\n      {\n        binding: 2,\n        resource: {\n          buffer: metadataBuffer,\n        },\n      },\n    ],\n  });\n\n  const encoder = t.device.createCommandEncoder();\n  const pass = encoder.beginComputePass();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, bg);\n  pass.dispatchWorkgroups(1, 1, 1);\n  pass.end();\n  t.queue.submit([encoder.finish()]);\n\n  const metadataReadback = await t.readGPUBufferRangeTyped(metadataBuffer, {\n    srcByteOffset: 0,\n    type: Uint32Array,\n    typedLength: numMetadata,\n    method: 'copy',\n  });\n  const metadata = metadataReadback.data;\n\n  const outputReadback = await t.readGPUBufferRangeTyped(outputBuffer, {\n    srcByteOffset: 0,\n    type: Uint32Array,\n    typedLength: outputUints,\n    method: 'copy',\n  });\n  const output = outputReadback.data;\n\n  t.expectOK(checkFunction(metadata, output));\n}\n\n// Minimum size is [3, 3].\nexport const kFramebufferSizes = [\n  [15, 15],\n  [16, 16],\n  [17, 17],\n  [19, 13],\n  [13, 10],\n  [111, 3],\n  [3, 111],\n  [35, 3],\n  [3, 35],\n  [53, 13],\n  [13, 53],\n  [3, 3],\n] as const;\n\n/**\n * Runs a subgroup builtin test for fragment shaders\n *\n * This test draws a full screen triangle.\n * Tests should avoid checking the last row or column to avoid helper\n * invocations. Underlying APIs do not consistently guarantee whether\n * helper invocations participate in subgroup operations.\n * @param t The base test\n * @param format The framebuffer format\n * @param fsShader The fragment shader with the following interface:\n *                 Location 0 output is framebuffer with format\n *                 Group 0 binding 0 is input data\n * @param width The framebuffer width\n * @param height The framebuffer height\n * @param inputData The input data\n * @param checker A functor to check the framebuffer values\n */\nexport async function runFragmentTest(\n  t: SubgroupTest,\n  format: GPUTextureFormat,\n  fsShader: string,\n  width: number,\n  height: number,\n  inputData: Uint32Array | Float32Array | Float16Array,\n  checker: (data: Uint32Array) => Error | undefined\n) {\n  const vsShader = `\n@vertex\nfn vsMain(@builtin(vertex_index) index : u32) -> @builtin(position) vec4f {\n  const vertices = array(\n    vec2(-2, 4), vec2(-2, -4), vec2(2, 0),\n  );\n  return vec4f(vec2f(vertices[index]), 0, 1);\n}`;\n\n  assert(width >= 3, 'Minimum width is 3');\n  assert(height >= 3, 'Minimum height is 3');\n  const pipeline = t.device.createRenderPipeline({\n    layout: 'auto',\n    vertex: {\n      module: t.device.createShaderModule({ code: vsShader }),\n    },\n    fragment: {\n      module: t.device.createShaderModule({ code: fsShader }),\n      targets: [{ format }],\n    },\n    primitive: {\n      topology: 'triangle-list',\n    },\n  });\n\n  const { blockWidth, blockHeight, bytesPerBlock } = kTextureFormatInfo[format];\n  assert(bytesPerBlock !== undefined);\n\n  const blocksPerRow = width / blockWidth;\n  const blocksPerColumn = height / blockHeight;\n  // 256 minimum arises from image copy requirements.\n  const bytesPerRow = align(blocksPerRow * (bytesPerBlock ?? 1), 256);\n  const byteLength = bytesPerRow * blocksPerColumn;\n  const uintLength = byteLength / 4;\n\n  const buffer = t.makeBufferWithContents(\n    inputData,\n    GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST\n  );\n\n  const bg = t.device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [\n      {\n        binding: 0,\n        resource: {\n          buffer,\n        },\n      },\n    ],\n  });\n\n  const framebuffer = t.createTextureTracked({\n    size: [width, height],\n    usage:\n      GPUTextureUsage.COPY_SRC |\n      GPUTextureUsage.COPY_DST |\n      GPUTextureUsage.RENDER_ATTACHMENT |\n      GPUTextureUsage.TEXTURE_BINDING,\n    format,\n  });\n\n  const encoder = t.device.createCommandEncoder();\n  const pass = encoder.beginRenderPass({\n    colorAttachments: [\n      {\n        view: framebuffer.createView(),\n        loadOp: 'clear',\n        storeOp: 'store',\n      },\n    ],\n  });\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, bg);\n  pass.draw(3);\n  pass.end();\n  t.queue.submit([encoder.finish()]);\n\n  const copyBuffer = t.copyWholeTextureToNewBufferSimple(framebuffer, 0);\n  const readback = await t.readGPUBufferRangeTyped(copyBuffer, {\n    srcByteOffset: 0,\n    type: Uint32Array,\n    typedLength: uintLength,\n    method: 'copy',\n  });\n  const data: Uint32Array = readback.data;\n\n  t.expectOK(checker(data));\n}\n"],"mappings":"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"}