{"version":3,"file":"quadBroadcast.spec.js","names":["description","makeTestGroup","keysOf","objectsToRecord","assert","unreachable","kTextureFormatInfo","kBit","kConcreteNumericScalarsAndVectors","Type","VectorType","scalarTypeOf","align","kWGSizes","kDataSentinel","kPredicateCases","runComputeTest","SubgroupTest","kFramebufferSizes","runFragmentTest","g","kTypes","generateScalarValues","type","scalarTy","u32","min","max","i32","positive","negative","f32","zero","nearest_max","nearest_min","f16","toString","generateTypedInputs","scalarValues","elements","width","requiresF16","Uint32Array","bound","values","i","j","push","checkDataTypes","metadata","output","input","broadcast","expectIdx","Math","floor","expectShift","expect","index","shift","res","Error","uints","undefined","test","desc","params","u","combine","beginSubcases","beforeAllSubcases","t","features","selectDeviceOrSkipTestCase","fn","wgSize","enables","wgsl","id","inputData","uintsPerOutput","checkBroadcastCompute","filter","trunc","length","subgroup_id","size","quad_id","quad","other_id","other_quad_id","other_quad_index","other_subgroup_id","wgThreads","predicate","testcase","cond","checkFragment","data","format","height","blockWidth","blockHeight","bytesPerBlock","blocksPerRow","bytesPerRow","uintsPerRow","uintsPerTexel","coordToIndex","row","col","offset","row_is_odd","col_is_odd","max_row","max_col","expect_row","expect_col","row_broadcast","col_broadcast","combineWithParams","fsShader","unimplemented"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/quadBroadcast.spec.ts"],"sourcesContent":["export const description = `\nExecution tests for quadBroadcast.\n\nNote: There is a lack of portability for non-uniform execution so these tests\nrestrict themselves to uniform control flow.\nNote: There is no guaranteed mapping between subgroup_invocation_id and\nlocal_invocation_index. Tests should avoid assuming there is.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport { assert, unreachable } from '../../../../../../common/util/util.js';\nimport { kTextureFormatInfo } from '../../../../../format_info.js';\nimport { kBit } from '../../../../../util/constants.js';\nimport {\n  kConcreteNumericScalarsAndVectors,\n  Type,\n  VectorType,\n  scalarTypeOf,\n} from '../../../../../util/conversion.js';\nimport { align } from '../../../../../util/math.js';\n\nimport {\n  kWGSizes,\n  kDataSentinel,\n  kPredicateCases,\n  runComputeTest,\n  SubgroupTest,\n  kFramebufferSizes,\n  runFragmentTest,\n} from './subgroup_util.js';\n\nexport const g = makeTestGroup(SubgroupTest);\n\nconst kTypes = objectsToRecord(kConcreteNumericScalarsAndVectors);\n\n/**\n * Generates scalar values for type\n *\n * Generates 4 32-bit values whose bit patterns represent\n * interesting values of the data type.\n * @param type The data type\n */\nfunction generateScalarValues(type: Type): number[] {\n  const scalarTy = scalarTypeOf(type);\n  switch (scalarTy) {\n    case Type.u32:\n      return [kBit.u32.min, kBit.u32.max, 1111, 2222];\n    case Type.i32:\n      return [\n        kBit.i32.positive.min,\n        kBit.i32.positive.max,\n        kBit.i32.negative.min,\n        0xffffffff, // -1\n      ];\n    case Type.f32:\n      return [\n        kBit.f32.positive.zero,\n        kBit.f32.positive.nearest_max,\n        kBit.f32.negative.nearest_min,\n        0xbf800000, // -1\n      ];\n    case Type.f16:\n      return [\n        kBit.f16.positive.zero,\n        kBit.f16.positive.nearest_max,\n        kBit.f16.negative.nearest_min,\n        0xbc00, // -1\n      ];\n    default:\n      unreachable(`Unsupported type: ${type.toString()}`);\n  }\n  return [0, 0, 0, 0];\n}\n\n/**\n * Generates input bit patterns for the input type\n *\n * Generates 4 values of type in a Uint32Array.\n * 16-bit types are appropriately packed.\n * @param type The data type\n */\nfunction generateTypedInputs(type: Type): Uint32Array {\n  const scalarValues = generateScalarValues(type);\n  let elements = 1;\n  if (type instanceof VectorType) {\n    elements = type.width;\n  }\n  if (type.requiresF16()) {\n    switch (elements) {\n      case 1:\n        return new Uint32Array([\n          scalarValues[0] | (scalarValues[1] << 16),\n          scalarValues[2] | (scalarValues[3] << 16),\n        ]);\n      case 2:\n        return new Uint32Array([\n          scalarValues[0] | (scalarValues[0] << 16),\n          scalarValues[1] | (scalarValues[1] << 16),\n          scalarValues[2] | (scalarValues[2] << 16),\n          scalarValues[3] | (scalarValues[3] << 16),\n        ]);\n      case 3:\n        return new Uint32Array([\n          scalarValues[0] | (scalarValues[0] << 16),\n          scalarValues[0] | (kDataSentinel << 16),\n          scalarValues[1] | (scalarValues[1] << 16),\n          scalarValues[1] | (kDataSentinel << 16),\n          scalarValues[2] | (scalarValues[2] << 16),\n          scalarValues[2] | (kDataSentinel << 16),\n          scalarValues[3] | (scalarValues[3] << 16),\n          scalarValues[3] | (kDataSentinel << 16),\n        ]);\n      case 4:\n        return new Uint32Array([\n          scalarValues[0] | (scalarValues[0] << 16),\n          scalarValues[0] | (scalarValues[0] << 16),\n          scalarValues[1] | (scalarValues[1] << 16),\n          scalarValues[1] | (scalarValues[1] << 16),\n          scalarValues[2] | (scalarValues[2] << 16),\n          scalarValues[2] | (scalarValues[2] << 16),\n          scalarValues[3] | (scalarValues[3] << 16),\n          scalarValues[3] | (scalarValues[3] << 16),\n        ]);\n      default:\n        unreachable(`Unsupported type: ${type.toString()}`);\n    }\n    return new Uint32Array([0]);\n  } else {\n    const bound = elements === 3 ? 4 : elements;\n    const values: number[] = [];\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < bound; j++) {\n        if (j < elements) {\n          values.push(scalarValues[i]);\n        } else {\n          values.push(kDataSentinel);\n        }\n      }\n    }\n    return new Uint32Array(values);\n  }\n}\n\n/**\n * Checks results from data types test\n *\n * The output is expected to match the input values corresponding to the\n * id being broadcast (assuming a linear mapping).\n * @param metadata An unused parameter\n * @param output The output data\n * @param input The input data\n * @param broadcast The id being broadcast\n * @param type The data type being tested\n */\nfunction checkDataTypes(\n  metadata: Uint32Array, // unused\n  output: Uint32Array,\n  input: Uint32Array,\n  broadcast: number,\n  type: Type\n): Error | undefined {\n  if (type.requiresF16() && !(type instanceof VectorType)) {\n    const expectIdx = Math.floor(broadcast / 2);\n    const expectShift = broadcast % 2 === 1;\n    let expect = input[expectIdx];\n    if (expectShift) {\n      expect >>= 16;\n    }\n    expect &= 0xffff;\n\n    for (let i = 0; i < 4; i++) {\n      const index = Math.floor(i / 2);\n      const shift = i % 2 === 1;\n      let res = output[index];\n      if (shift) {\n        res >>= 16;\n      }\n      res &= 0xffff;\n      if (res !== expect) {\n        return new Error(`${i}: incorrect result\n- expected: ${expect}\n-      got: ${res}`);\n      }\n    }\n  } else {\n    let uints = 1;\n    if (type instanceof VectorType) {\n      uints = type.width === 3 ? 4 : type.width;\n      if (type.requiresF16()) {\n        uints = Math.floor(uints / 2);\n      }\n    }\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < uints; j++) {\n        const expect = input[broadcast * uints + j];\n        const res = output[i * uints + j];\n        if (res !== expect) {\n          return new Error(`${i * uints + j}: incorrect result\n- expected: ${expect}\n-      got: ${res}`);\n        }\n      }\n    }\n  }\n\n  return undefined;\n}\n\ng.test('data_types')\n  .desc('Test allowed data types')\n  .params(u =>\n    u\n      .combine('type', keysOf(kTypes))\n      .beginSubcases()\n      .combine('id', [0, 1, 2, 3] as const)\n  )\n  .beforeAllSubcases(t => {\n    const features: GPUFeatureName[] = ['subgroups' as GPUFeatureName];\n    const type = kTypes[t.params.type];\n    if (type.requiresF16()) {\n      features.push('subgroups-f16' as GPUFeatureName);\n      features.push('shader-f16' as GPUFeatureName);\n    }\n    t.selectDeviceOrSkipTestCase(features);\n  })\n  .fn(async t => {\n    const wgSize = [4, 1, 1];\n    const type = kTypes[t.params.type];\n    let enables = `enable subgroups;\\n`;\n    if (type.requiresF16()) {\n      enables += `enable f16;\\nenable subgroups_f16;`;\n    }\n    const wgsl = `\n${enables}\n\n@group(0) @binding(0)\nvar<storage> input : array<${type.toString()}>;\n\n@group(0) @binding(1)\nvar<storage, read_write> output : array<${type.toString()}>;\n\n@group(0) @binding(2)\nvar<storage, read_write> metadata : array<u32>; // unused\n\n@compute @workgroup_size(${wgSize[0]}, ${wgSize[1]}, ${wgSize[2]})\nfn main(\n  @builtin(subgroup_invocation_id) id : u32,\n) {\n  // Force usage\n  _ = metadata[0];\n\n  output[id] = quadBroadcast(input[id], ${t.params.id});\n}`;\n\n    const inputData = generateTypedInputs(type);\n    let uintsPerOutput = 1;\n    if (type instanceof VectorType) {\n      uintsPerOutput = type.width === 3 ? 4 : type.width;\n      if (type.requiresF16()) {\n        uintsPerOutput = Math.floor(uintsPerOutput / 2);\n      }\n    }\n    await runComputeTest(\n      t,\n      wgsl,\n      wgSize,\n      uintsPerOutput,\n      inputData,\n      (metadata: Uint32Array, output: Uint32Array) => {\n        return checkDataTypes(metadata, output, inputData, t.params.id, type);\n      }\n    );\n  });\n\n/**\n * Checks quadBroadcast in compute shaders\n *\n * Assumes that quads are linear within a subgroup.\n *\n * @param metadata An array of integers divided as follows:\n *                 * first half subgroup invocation ids\n *                 * second half subgroup sizes\n * @param output An array of integers divided as follows:\n *               * first half results of quad broadcast\n *               * second half generated unique subgroup ids\n * @param broadcast The id being broadcast in the range [0, 3]\n * @param filter A functor to filter active invocations\n */\nfunction checkBroadcastCompute(\n  metadata: Uint32Array,\n  output: Uint32Array,\n  broadcast: number,\n  filter: (id: number, size: number) => boolean\n): Error | undefined {\n  assert(broadcast === Math.trunc(broadcast));\n  assert(broadcast >= 0 && broadcast <= 3);\n\n  const bound = Math.floor(output.length / 2);\n  for (let i = 0; i < bound; i++) {\n    const subgroup_id = output[bound + i];\n    const id = metadata[i];\n    const size = metadata[bound + i];\n    if (!filter(id, size)) {\n      if (output[i] !== kDataSentinel) {\n        return new Error(`Unexpected write for invocation ${i}`);\n      }\n      continue;\n    }\n\n    const quad_id = Math.floor(id / 4);\n    const quad = [-1, -1, -1, -1];\n    for (let j = 0; j < bound; j++) {\n      const other_id = metadata[j];\n      const other_quad_id = Math.floor(other_id / 4);\n      const other_quad_index = other_id % 4;\n      const other_subgroup_id = output[bound + j];\n      if (other_subgroup_id === subgroup_id && quad_id === other_quad_id) {\n        quad[other_quad_index] = j;\n      }\n    }\n    for (let j = 0; j < 4; j++) {\n      if (quad[j] === -1) {\n        return new Error(`Invocation ${i}: missing quad index ${j}`);\n      }\n    }\n    for (let j = 0; j < 4; j++) {\n      if (output[quad[j]] !== output[quad[broadcast]]) {\n        return new Error(`Incorrect result for quad: base invocation = ${\n          quad[broadcast]\n        }, invocation = ${quad[j]}\n- expected: ${output[quad[broadcast]]}\n-      got: ${output[quad[j]]}`);\n      }\n    }\n  }\n\n  return undefined;\n}\n\ng.test('compute,all_active')\n  .desc(\n    `Tests broadcast with all active invocations\n\nQuad operations require a full quad so workgroup sizes are limited to multiples of 4.\n  `\n  )\n  .params(u =>\n    u\n      .combine('wgSize', kWGSizes)\n      .filter(t => {\n        const wgThreads = t.wgSize[0] * t.wgSize[1] * t.wgSize[2];\n        return wgThreads % 4 === 0;\n      })\n      .beginSubcases()\n      .combine('id', [0, 1, 2, 3] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('subgroups' as GPUFeatureName);\n  })\n  .fn(async t => {\n    const wgThreads = t.params.wgSize[0] * t.params.wgSize[1] * t.params.wgSize[2];\n\n    const wgsl = `\nenable subgroups;\n\n@group(0) @binding(0)\nvar<storage> inputs : u32; // unused\n\nstruct Output {\n  results : array<u32, ${wgThreads}>,\n  subgroup_size : array<u32, ${wgThreads}>,\n}\n\n@group(0) @binding(1)\nvar<storage, read_write> output : Output;\n\nstruct Metadata {\n  id : array<u32, ${wgThreads}>,\n  subgroup_size : array<u32, ${wgThreads}>,\n}\n\n@group(0) @binding(2)\nvar<storage, read_write> metadata : Metadata;\n\n@compute @workgroup_size(${t.params.wgSize[0]}, ${t.params.wgSize[1]}, ${t.params.wgSize[2]})\nfn main(\n  @builtin(local_invocation_index) lid : u32,\n  @builtin(subgroup_invocation_id) id : u32,\n  @builtin(subgroup_size) subgroupSize : u32,\n) {\n  // Force usage\n  _ = inputs;\n\n  let b = quadBroadcast(lid, ${t.params.id});\n  output.results[lid] = b;\n  output.subgroup_size[lid] = subgroupBroadcastFirst(lid + 1);\n  metadata.id[lid] = id;\n  metadata.subgroup_size[lid] = subgroupSize;\n}`;\n\n    const uintsPerOutput = 2;\n    await runComputeTest(\n      t,\n      wgsl,\n      [t.params.wgSize[0], t.params.wgSize[1], t.params.wgSize[2]],\n      uintsPerOutput,\n      new Uint32Array([0]), // unused\n      (metadata: Uint32Array, output: Uint32Array) => {\n        return checkBroadcastCompute(metadata, output, t.params.id, (id: number, size: number) => {\n          return true;\n        });\n      }\n    );\n  });\n\ng.test('compute,split')\n  .desc(\n    `Tests broadcast with predicated invocations\n\nQuad operations require a full quad so workgroup sizes are limited to multiples of 4.\nQuad operations require a fully active quad to operate correctly so several of the\npredication filters are skipped.\n  `\n  )\n  .params(u =>\n    u\n      .combine('predicate', keysOf(kPredicateCases))\n      .filter(t => {\n        return t.predicate === 'lower_half' || t.predicate === 'upper_half';\n      })\n      .combine('wgSize', kWGSizes)\n      .filter(t => {\n        const wgThreads = t.wgSize[0] * t.wgSize[1] * t.wgSize[2];\n        return wgThreads % 4 === 0;\n      })\n      .beginSubcases()\n      .combine('id', [0, 1, 2, 3] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('subgroups' as GPUFeatureName);\n  })\n  .fn(async t => {\n    const wgThreads = t.params.wgSize[0] * t.params.wgSize[1] * t.params.wgSize[2];\n    const testcase = kPredicateCases[t.params.predicate];\n\n    const wgsl = `\nenable subgroups;\n\n@group(0) @binding(0)\nvar<storage> inputs : u32; // unused\n\nstruct Output {\n  results : array<u32, ${wgThreads}>,\n  subgroup_size : array<u32, ${wgThreads}>,\n}\n\n@group(0) @binding(1)\nvar<storage, read_write> output : Output;\n\nstruct Metadata {\n  id : array<u32, ${wgThreads}>,\n  subgroup_size : array<u32, ${wgThreads}>,\n}\n\n@group(0) @binding(2)\nvar<storage, read_write> metadata : Metadata;\n\n@compute @workgroup_size(${t.params.wgSize[0]}, ${t.params.wgSize[1]}, ${t.params.wgSize[2]})\nfn main(\n  @builtin(local_invocation_index) lid : u32,\n  @builtin(subgroup_invocation_id) id : u32,\n  @builtin(subgroup_size) subgroupSize : u32,\n) {\n  // Force usage\n  _ = inputs;\n\n  output.subgroup_size[lid] = subgroupBroadcastFirst(lid + 1);\n  metadata.id[lid] = id;\n  metadata.subgroup_size[lid] = subgroupSize;\n\n  if ${testcase.cond} {\n    let b = quadBroadcast(lid, ${t.params.id});\n    output.results[lid] = b;\n  }\n}`;\n\n    const uintsPerOutput = 2;\n    await runComputeTest(\n      t,\n      wgsl,\n      [t.params.wgSize[0], t.params.wgSize[1], t.params.wgSize[2]],\n      uintsPerOutput,\n      new Uint32Array([0]), // unused\n      (metadata: Uint32Array, output: Uint32Array) => {\n        return checkBroadcastCompute(metadata, output, t.params.id, testcase.filter);\n      }\n    );\n  });\n\n/**\n * Checks results of quadBroadcast in fragment shaders.\n *\n * @param data The framebuffer output\n *             * component 0 is the broadcast of the integer x position\n *             * component 1 is the broadcast of the integer y position\n * @param format The framebuffer format\n * @param width Framebuffer width\n * @param height Framebuffer height\n * @param broadcast The quad id being broadcast\n */\nfunction checkFragment(\n  data: Uint32Array,\n  format: GPUTextureFormat,\n  width: number,\n  height: number,\n  broadcast: number\n): Error | undefined {\n  assert(broadcast === Math.trunc(broadcast));\n  assert(broadcast >= 0 && broadcast <= 3);\n\n  if (width < 3 || height < 3) {\n    return new Error(\n      `Insufficient framebuffer size [${width}w x ${height}h]. Minimum is [3w x 3h].`\n    );\n  }\n\n  const { blockWidth, blockHeight, bytesPerBlock } = kTextureFormatInfo[format];\n  const blocksPerRow = width / blockWidth;\n  // 256 minimum comes from image copy requirements.\n  const bytesPerRow = align(blocksPerRow * (bytesPerBlock ?? 1), 256);\n  const uintsPerRow = bytesPerRow / 4;\n  const uintsPerTexel = (bytesPerBlock ?? 1) / blockWidth / blockHeight / 4;\n\n  const coordToIndex = (row: number, col: number) => {\n    return uintsPerRow * row + col * uintsPerTexel;\n  };\n\n  // Iteration skips last row and column to avoid helper invocations because it is not\n  // guaranteed whether or not they participate in the subgroup operation.\n  for (let row = 0; row < height - 1; row++) {\n    for (let col = 0; col < width - 1; col++) {\n      const offset = coordToIndex(row, col);\n\n      const row_is_odd = row % 2 === 1;\n      const col_is_odd = col % 2 === 1;\n\n      // Skip checking quads that extend into potential helper invocations.\n      const max_row = row_is_odd ? row : row + 1;\n      const max_col = col_is_odd ? col : col + 1;\n      if (max_row === height - 1 || max_col === width - 1) {\n        continue;\n      }\n\n      let expect_row = row;\n      let expect_col = col;\n      switch (broadcast) {\n        case 0:\n          expect_row = row_is_odd ? row - 1 : row;\n          expect_col = col_is_odd ? col - 1 : col;\n          break;\n        case 1:\n          expect_row = row_is_odd ? row - 1 : row;\n          expect_col = col_is_odd ? col : col + 1;\n          break;\n        case 2:\n          expect_row = row_is_odd ? row : row + 1;\n          expect_col = col_is_odd ? col - 1 : col;\n          break;\n        case 3:\n          expect_row = row_is_odd ? row : row + 1;\n          expect_col = col_is_odd ? col : col + 1;\n          break;\n      }\n\n      const row_broadcast = data[offset + 1];\n      const col_broadcast = data[offset];\n      if (expect_row !== row_broadcast) {\n        return new Error(`Row ${row}, col ${col}: incorrect row results:\n- expected: ${expect_row}\n-      got: ${row_broadcast}`);\n      }\n\n      if (expect_col !== col_broadcast) {\n        return new Error(`Row ${row}, col ${col}: incorrect col results:\n- expected: ${expect_row}\n-      got: ${col_broadcast}`);\n      }\n    }\n  }\n\n  return undefined;\n}\n\ng.test('fragment,all_active')\n  .desc(`Tests quadBroadcast in fragment shaders`)\n  .params(u =>\n    u\n      .combine('size', kFramebufferSizes)\n      .beginSubcases()\n      .combine('id', [0, 1, 2, 3] as const)\n      .combineWithParams([{ format: 'rgba32uint' }] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('subgroups' as GPUFeatureName);\n  })\n  .fn(async t => {\n    const fsShader = `\nenable subgroups;\n\n@group(0) @binding(0)\nvar<storage, read_write> inputs : array<u32>; // unused\n\n@fragment\nfn main(\n  @builtin(position) pos : vec4f,\n) -> @location(0) vec4u {\n  // Force usage\n  _ = inputs[0];\n\n  let linear = u32(pos.x) + u32(pos.y) * ${t.params.size[0]};\n\n  // Filter out possible helper invocations.\n  let x_in_range = u32(pos.x) < (${t.params.size[0]} - 1);\n  let y_in_range = u32(pos.y) < (${t.params.size[1]} - 1);\n  let in_range = x_in_range && y_in_range;\n\n  var x_broadcast = select(1001, u32(pos.x), in_range);\n  var y_broadcast = select(1001, u32(pos.y), in_range);\n\n  x_broadcast = quadBroadcast(x_broadcast, ${t.params.id});\n  y_broadcast = quadBroadcast(y_broadcast, ${t.params.id});\n\n  return vec4u(x_broadcast, y_broadcast, 0, 0);\n}`;\n\n    await runFragmentTest(\n      t,\n      t.params.format,\n      fsShader,\n      t.params.size[0],\n      t.params.size[1],\n      new Uint32Array([0]), // unused,\n      (data: Uint32Array) => {\n        return checkFragment(\n          data,\n          t.params.format,\n          t.params.size[0],\n          t.params.size[1],\n          t.params.id\n        );\n      }\n    );\n  });\n\ng.test('fragment,split').unimplemented();\n"],"mappings":"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"}