{"version":3,"file":"asinh.spec.js","names":["description","makeTestGroup","GPUTest","Type","allInputSources","run","d","builtin","g","test","specURL","desc","params","u","combine","undefined","unimplemented","fn","t","cases","get","f32","beforeAllSubcases","selectDeviceOrSkipTestCase","f16"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/asinh.spec.ts"],"sourcesContent":["export const description = `\nExecution tests for the 'sinh' builtin function\n\nS is abstract-float, f32, f16\nT is S or vecN<S>\n@const fn asinh(e: T ) -> T\nReturns the hyperbolic arc sine of e.\nComputes the functional inverse of sinh.\nComponent-wise when T is a vector.\n\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { Type } from '../../../../../util/conversion.js';\nimport { allInputSources, run } from '../../expression.js';\n\nimport { d } from './asinh.cache.js';\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`abstract float test`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('f32')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f32 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = await d.get('f32');\n    await run(t, builtin('asinh'), [Type.f32], Type.f32, t.params, cases);\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f16 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  })\n  .fn(async t => {\n    const cases = await d.get('f16');\n    await run(t, builtin('asinh'), [Type.f16], Type.f16, t.params, cases);\n  });\n"],"mappings":";;GAAA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAED,SAASC,aAAa,QAAQ,kDAAkD;AAChF,SAASC,OAAO,QAAQ,4BAA4B;AACpD,SAASC,IAAI,QAAQ,mCAAmC;AACxD,SAASC,eAAe,EAAEC,GAAG,QAAQ,qBAAqB;;AAE1D,SAASC,CAAC,QAAQ,kBAAkB;AACpC,SAASC,OAAO,QAAQ,cAAc;;AAEtC,OAAO,MAAMC,CAAC,GAAGP,aAAa,CAACC,OAAO,CAAC;;AAEvCM,CAAC,CAACC,IAAI,CAAC,gBAAgB,CAAC;AACrBC,OAAO,CAAC,qDAAqD,CAAC;AAC9DC,IAAI,CAAE,qBAAoB,CAAC;AAC3BC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAO,CAAC,aAAa,EAAEV,eAAe,CAAC,CAACU,OAAO,CAAC,WAAW,EAAE,CAACC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAU;AAC9F,CAAC;AACAC,aAAa,CAAC,CAAC;;AAElBR,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC;AACVC,OAAO,CAAC,qDAAqD,CAAC;AAC9DC,IAAI,CAAE,WAAU,CAAC;AACjBC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAO,CAAC,aAAa,EAAEV,eAAe,CAAC,CAACU,OAAO,CAAC,WAAW,EAAE,CAACC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAU;AAC9F,CAAC;AACAE,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,MAAMC,KAAK,GAAG,MAAMb,CAAC,CAACc,GAAG,CAAC,KAAK,CAAC;EAChC,MAAMf,GAAG,CAACa,CAAC,EAAEX,OAAO,CAAC,OAAO,CAAC,EAAE,CAACJ,IAAI,CAACkB,GAAG,CAAC,EAAElB,IAAI,CAACkB,GAAG,EAAEH,CAAC,CAACN,MAAM,EAAEO,KAAK,CAAC;AACvE,CAAC,CAAC;;AAEJX,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC;AACVC,OAAO,CAAC,qDAAqD,CAAC;AAC9DC,IAAI,CAAE,WAAU,CAAC;AACjBC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAO,CAAC,aAAa,EAAEV,eAAe,CAAC,CAACU,OAAO,CAAC,WAAW,EAAE,CAACC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAU;AAC9F,CAAC;AACAO,iBAAiB,CAAC,CAAAJ,CAAC,KAAI;EACtBA,CAAC,CAACK,0BAA0B,CAAC,YAAY,CAAC;AAC5C,CAAC,CAAC;AACDN,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,MAAMC,KAAK,GAAG,MAAMb,CAAC,CAACc,GAAG,CAAC,KAAK,CAAC;EAChC,MAAMf,GAAG,CAACa,CAAC,EAAEX,OAAO,CAAC,OAAO,CAAC,EAAE,CAACJ,IAAI,CAACqB,GAAG,CAAC,EAAErB,IAAI,CAACqB,GAAG,EAAEN,CAAC,CAACN,MAAM,EAAEO,KAAK,CAAC;AACvE,CAAC,CAAC"}