{"version":3,"file":"quadSwap.spec.js","names":["description","makeTestGroup","keysOf","objectsToRecord","assert","unreachable","kTextureFormatInfo","kBit","kConcreteNumericScalarsAndVectors","Type","VectorType","scalarTypeOf","align","kWGSizes","kDataSentinel","kPredicateCases","runComputeTest","SubgroupTest","kFramebufferSizes","runFragmentTest","g","kTypes","kOps","generateScalarValues","type","scalarTy","u32","min","max","i32","positive","negative","f32","zero","nearest_max","nearest_min","f16","toString","generateTypedInputs","scalarValues","elements","width","requiresF16","Uint32Array","bound","values","i","j","push","swapIndex","index","op","Math","trunc","checkDataTypes","metadata","output","input","swapIdx","expectIdx","floor","expectShift","expect","resIdx","resShift","res","Error","uints","undefined","test","desc","params","u","combine","beginSubcases","beforeAllSubcases","t","features","selectDeviceOrSkipTestCase","fn","wgSize","enables","wgsl","inputData","uintsPerOutput","checkSwapCompute","filter","length","subgroup_id","id","size","quad_id","quad_index","found","other_id","other_quad_id","other_quad_index","other_subgroup_id","wgThreads","predicate","testcase","cond","checkFragment","data","format","height","blockWidth","blockHeight","bytesPerBlock","blocksPerRow","bytesPerRow","uintsPerRow","uintsPerTexel","coordToIndex","row","col","offset","row_is_odd","col_is_odd","max_row","max_col","expect_row","expect_col","row_output","col_output","combineWithParams","fsShader","unimplemented"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/quadSwap.spec.ts"],"sourcesContent":["export const description = `\nExecution tests for quadSwapX, quadSwapY, and quadSwapDiagnoal.\n\nNote: There is a lack of portability for non-uniform execution so these tests\nrestrict themselves to uniform control flow.\nNote: There is no guaranteed mapping between subgroup_invocation_id and\nlocal_invocation_index. Tests should avoid assuming there is.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport { assert, unreachable } from '../../../../../../common/util/util.js';\nimport { kTextureFormatInfo } from '../../../../../format_info.js';\nimport { kBit } from '../../../../../util/constants.js';\nimport {\n  kConcreteNumericScalarsAndVectors,\n  Type,\n  VectorType,\n  scalarTypeOf,\n} from '../../../../../util/conversion.js';\nimport { align } from '../../../../../util/math.js';\n\nimport {\n  kWGSizes,\n  kDataSentinel,\n  kPredicateCases,\n  runComputeTest,\n  SubgroupTest,\n  kFramebufferSizes,\n  runFragmentTest,\n} from './subgroup_util.js';\n\nexport const g = makeTestGroup(SubgroupTest);\n\nconst kTypes = objectsToRecord(kConcreteNumericScalarsAndVectors);\n\ntype SwapOp = 'quadSwapX' | 'quadSwapY' | 'quadSwapDiagonal';\n\nconst kOps: SwapOp[] = ['quadSwapX', 'quadSwapY', 'quadSwapDiagonal'];\n\n/**\n * Generates scalar values for type\n *\n * Generates 4 32-bit values whose bit patterns represent\n * interesting values of the data type.\n * @param type The data type\n */\nfunction generateScalarValues(type: Type): number[] {\n  const scalarTy = scalarTypeOf(type);\n  switch (scalarTy) {\n    case Type.u32:\n      return [kBit.u32.min, kBit.u32.max, 1111, 2222];\n    case Type.i32:\n      return [\n        kBit.i32.positive.min,\n        kBit.i32.positive.max,\n        kBit.i32.negative.min,\n        0xffffffff, // -1\n      ];\n    case Type.f32:\n      return [\n        kBit.f32.positive.zero,\n        kBit.f32.positive.nearest_max,\n        kBit.f32.negative.nearest_min,\n        0xbf800000, // -1\n      ];\n    case Type.f16:\n      return [\n        kBit.f16.positive.zero,\n        kBit.f16.positive.nearest_max,\n        kBit.f16.negative.nearest_min,\n        0xbc00, // -1\n      ];\n    default:\n      unreachable(`Unsupported type: ${type.toString()}`);\n  }\n  return [0, 0, 0, 0];\n}\n\n/**\n * Generates input bit patterns for the input type\n *\n * Generates 4 values of type in a Uint32Array.\n * 16-bit types are appropriately packed.\n * @param type The data type\n */\nfunction generateTypedInputs(type: Type): Uint32Array {\n  const scalarValues = generateScalarValues(type);\n  let elements = 1;\n  if (type instanceof VectorType) {\n    elements = type.width;\n  }\n  if (type.requiresF16()) {\n    switch (elements) {\n      case 1:\n        return new Uint32Array([\n          scalarValues[0] | (scalarValues[1] << 16),\n          scalarValues[2] | (scalarValues[3] << 16),\n        ]);\n      case 2:\n        return new Uint32Array([\n          scalarValues[0] | (scalarValues[0] << 16),\n          scalarValues[1] | (scalarValues[1] << 16),\n          scalarValues[2] | (scalarValues[2] << 16),\n          scalarValues[3] | (scalarValues[3] << 16),\n        ]);\n      case 3:\n        return new Uint32Array([\n          scalarValues[0] | (scalarValues[0] << 16),\n          scalarValues[0] | (kDataSentinel << 16),\n          scalarValues[1] | (scalarValues[1] << 16),\n          scalarValues[1] | (kDataSentinel << 16),\n          scalarValues[2] | (scalarValues[2] << 16),\n          scalarValues[2] | (kDataSentinel << 16),\n          scalarValues[3] | (scalarValues[3] << 16),\n          scalarValues[3] | (kDataSentinel << 16),\n        ]);\n      case 4:\n        return new Uint32Array([\n          scalarValues[0] | (scalarValues[0] << 16),\n          scalarValues[0] | (scalarValues[0] << 16),\n          scalarValues[1] | (scalarValues[1] << 16),\n          scalarValues[1] | (scalarValues[1] << 16),\n          scalarValues[2] | (scalarValues[2] << 16),\n          scalarValues[2] | (scalarValues[2] << 16),\n          scalarValues[3] | (scalarValues[3] << 16),\n          scalarValues[3] | (scalarValues[3] << 16),\n        ]);\n      default:\n        unreachable(`Unsupported type: ${type.toString()}`);\n    }\n    return new Uint32Array([0]);\n  } else {\n    const bound = elements === 3 ? 4 : elements;\n    const values: number[] = [];\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < bound; j++) {\n        if (j < elements) {\n          values.push(scalarValues[i]);\n        } else {\n          values.push(kDataSentinel);\n        }\n      }\n    }\n    return new Uint32Array(values);\n  }\n}\n\n/**\n * Returns the swapped quad invocation id for the given op\n *\n * @param index The index in the range [0,3]\n * @param op The swap\n */\nfunction swapIndex(index: number, op: SwapOp): number {\n  assert(index === Math.trunc(index));\n  assert(index >= 0 && index <= 3);\n  switch (op) {\n    case 'quadSwapX':\n      return index ^ 1;\n    case 'quadSwapY':\n      return index ^ 2;\n    case 'quadSwapDiagonal':\n      return index ^ 3;\n  }\n  unreachable(`Unhandled op ${op}`);\n}\n\n/**\n * Checks the results of data types test\n *\n * The outputs for a given index are expected to match the input values\n * for the given swap.\n * @param metadata An unused parameter\n * @param output The output data\n * @param input The input data\n * @param op The type of swap\n * @param type The data type\n */\nfunction checkDataTypes(\n  metadata: Uint32Array, // unused\n  output: Uint32Array,\n  input: Uint32Array,\n  op: SwapOp,\n  type: Type\n): Error | undefined {\n  if (type.requiresF16() && !(type instanceof VectorType)) {\n    for (let i = 0; i < 4; i++) {\n      const swapIdx = swapIndex(i, op);\n\n      const expectIdx = Math.floor(swapIdx / 2);\n      const expectShift = swapIdx % 2 === 1;\n      let expect = input[expectIdx];\n      if (expectShift) {\n        expect >>= 16;\n      }\n      expect &= 0xffff;\n\n      const resIdx = Math.floor(i / 2);\n      const resShift = i % 2 === 1;\n      let res = output[resIdx];\n      if (resShift) {\n        res >>= 16;\n      }\n      res &= 0xffff;\n\n      if (res !== expect) {\n        return new Error(`${i}: incorrect result\n- expected: ${expect}\n-      got: ${res}`);\n      }\n    }\n  } else {\n    let uints = 1;\n    if (type instanceof VectorType) {\n      uints = type.width === 3 ? 4 : type.width;\n      if (type.requiresF16()) {\n        uints = Math.floor(uints / 2);\n      }\n    }\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < uints; j++) {\n        const expect = input[swapIndex(i, op) * uints + j];\n        const res = output[i * uints + j];\n        if (res !== expect) {\n          return new Error(`${uints * i + j}: incorrect result\n- expected: ${expect}\n-      got: ${res}`);\n        }\n      }\n    }\n  }\n\n  return undefined;\n}\n\ng.test('data_types')\n  .desc('Test allowed data types')\n  .params(u => u.combine('type', keysOf(kTypes)).beginSubcases().combine('op', kOps))\n  .beforeAllSubcases(t => {\n    const features: GPUFeatureName[] = ['subgroups' as GPUFeatureName];\n    const type = kTypes[t.params.type];\n    if (type.requiresF16()) {\n      features.push('subgroups-f16' as GPUFeatureName);\n      features.push('shader-f16' as GPUFeatureName);\n    }\n    t.selectDeviceOrSkipTestCase(features);\n  })\n  .fn(async t => {\n    const wgSize = [4, 1, 1];\n    const type = kTypes[t.params.type];\n    let enables = `enable subgroups;\\n`;\n    if (type.requiresF16()) {\n      enables += `enable f16;\\nenable subgroups_f16;`;\n    }\n    const wgsl = `\n${enables}\n\n@group(0) @binding(0)\nvar<storage> input : array<${type.toString()}>;\n\n@group(0) @binding(1)\nvar<storage, read_write> output : array<${type.toString()}>;\n\n@group(0) @binding(2)\nvar<storage, read_write> metadata : array<u32>; // unused\n\n@compute @workgroup_size(${wgSize[0]}, ${wgSize[1]}, ${wgSize[2]})\nfn main(\n  @builtin(subgroup_invocation_id) id : u32,\n) {\n  // Force usage\n  _ = metadata[0];\n\n  output[id] = ${t.params.op}(input[id]);\n}`;\n\n    const inputData = generateTypedInputs(type);\n    let uintsPerOutput = 1;\n    if (type instanceof VectorType) {\n      uintsPerOutput = type.width === 3 ? 4 : type.width;\n      if (type.requiresF16()) {\n        uintsPerOutput = Math.floor(uintsPerOutput / 2);\n      }\n    }\n    await runComputeTest(\n      t,\n      wgsl,\n      wgSize,\n      uintsPerOutput,\n      inputData,\n      (metadata: Uint32Array, output: Uint32Array) => {\n        return checkDataTypes(metadata, output, inputData, t.params.op, type);\n      }\n    );\n  });\n\n/**\n * Checks quad swaps in compute shaders\n *\n * Assumes that quads are linear within a subgroup.\n *\n * @param metadata An array of integers divided as follows:\n *                 * first half subgroup invocation ids\n *                 * second half subgroup sizes\n * @param output An array of integers divided as follows:\n *               * first half results of quad broadcast\n *               * second half generated unique subgroup ids\n * @param op The swap operation\n * @param filter A functor to filter active invocations\n */\nfunction checkSwapCompute(\n  metadata: Uint32Array,\n  output: Uint32Array,\n  op: SwapOp,\n  filter: (id: number, size: number) => boolean\n): Error | undefined {\n  const bound = Math.floor(output.length / 2);\n  for (let i = 0; i < bound; i++) {\n    const subgroup_id = output[bound + i];\n    const id = metadata[i];\n    const size = metadata[bound + i];\n    if (!filter(id, size)) {\n      if (output[i] !== kDataSentinel) {\n        return new Error(`Unexpected write for invocation ${i}`);\n      }\n      continue;\n    }\n\n    const quad_id = Math.floor(id / 4);\n    const quad_index = id % 4;\n    let found = false;\n    for (let j = 0; j < bound; j++) {\n      const other_id = metadata[j];\n      const other_quad_id = Math.floor(other_id / 4);\n      const other_quad_index = other_id % 4;\n      const other_subgroup_id = output[bound + j];\n      if (\n        subgroup_id === other_subgroup_id &&\n        quad_id === other_quad_id &&\n        quad_index === swapIndex(other_quad_index, op)\n      ) {\n        found = true;\n        if (output[i] !== j) {\n          return new Error(`Invocation ${i}: incorrect result\n- expected: ${j}\n-      got: ${output[i]}`);\n        }\n        break;\n      }\n    }\n    if (!found) {\n      return new Error(`Invocation ${i}: failed to find swapped result`);\n    }\n  }\n\n  return undefined;\n}\n\ng.test('compute,all_active')\n  .desc(\n    `Tests swaps with all active invocations\n\nQuad operations require a full quad so workgroup sizes are limited to multiples of 4.\n  `\n  )\n  .params(u =>\n    u\n      .combine('wgSize', kWGSizes)\n      .filter(t => {\n        const wgThreads = t.wgSize[0] * t.wgSize[1] * t.wgSize[2];\n        return wgThreads % 4 === 0;\n      })\n      .beginSubcases()\n      .combine('op', kOps)\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('subgroups' as GPUFeatureName);\n  })\n  .fn(async t => {\n    const wgThreads = t.params.wgSize[0] * t.params.wgSize[1] * t.params.wgSize[2];\n\n    const wgsl = `\nenable subgroups;\n\n@group(0) @binding(0)\nvar<storage> inputs : u32; // unused\n\nstruct Output {\n  results : array<u32, ${wgThreads}>,\n  subgroup_size : array<u32, ${wgThreads}>,\n}\n\n@group(0) @binding(1)\nvar<storage, read_write> output : Output;\n\nstruct Metadata {\n  id : array<u32, ${wgThreads}>,\n  subgroup_size : array<u32, ${wgThreads}>,\n}\n\n@group(0) @binding(2)\nvar<storage, read_write> metadata : Metadata;\n\n@compute @workgroup_size(${t.params.wgSize[0]}, ${t.params.wgSize[1]}, ${t.params.wgSize[2]})\nfn main(\n  @builtin(local_invocation_index) lid : u32,\n  @builtin(subgroup_invocation_id) id : u32,\n  @builtin(subgroup_size) subgroupSize : u32,\n) {\n  // Force usage\n  _ = inputs;\n\n  let b = ${t.params.op}(lid);\n  output.results[lid] = b;\n  output.subgroup_size[lid] = subgroupBroadcastFirst(lid + 1);\n  metadata.id[lid] = id;\n  metadata.subgroup_size[lid] = subgroupSize;\n}`;\n\n    const uintsPerOutput = 2;\n    await runComputeTest(\n      t,\n      wgsl,\n      [t.params.wgSize[0], t.params.wgSize[1], t.params.wgSize[2]],\n      uintsPerOutput,\n      new Uint32Array([0]), // unused\n      (metadata: Uint32Array, output: Uint32Array) => {\n        return checkSwapCompute(metadata, output, t.params.op, (id: number, size: number) => {\n          return true;\n        });\n      }\n    );\n  });\n\ng.test('compute,split')\n  .desc(\n    `Tests swaps with all predicated invocations\n\nQuad operations require a full quad so workgroup sizes are limited to multiples of 4.\nQuad operations require a fully active quad to operate correctly so several of the\npredication filters are skipped.\n  `\n  )\n  .params(u =>\n    u\n      .combine('predicate', keysOf(kPredicateCases))\n      .filter(t => {\n        return t.predicate === 'lower_half' || t.predicate === 'upper_half';\n      })\n      .combine('wgSize', kWGSizes)\n      .filter(t => {\n        const wgThreads = t.wgSize[0] * t.wgSize[1] * t.wgSize[2];\n        return wgThreads % 4 === 0;\n      })\n      .beginSubcases()\n      .combine('op', kOps)\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('subgroups' as GPUFeatureName);\n  })\n  .fn(async t => {\n    const wgThreads = t.params.wgSize[0] * t.params.wgSize[1] * t.params.wgSize[2];\n    const testcase = kPredicateCases[t.params.predicate];\n\n    const wgsl = `\nenable subgroups;\n\n@group(0) @binding(0)\nvar<storage> inputs : u32; // unused\n\nstruct Output {\n  results : array<u32, ${wgThreads}>,\n  subgroup_size : array<u32, ${wgThreads}>,\n}\n\n@group(0) @binding(1)\nvar<storage, read_write> output : Output;\n\nstruct Metadata {\n  id : array<u32, ${wgThreads}>,\n  subgroup_size : array<u32, ${wgThreads}>,\n}\n\n@group(0) @binding(2)\nvar<storage, read_write> metadata : Metadata;\n\n@compute @workgroup_size(${t.params.wgSize[0]}, ${t.params.wgSize[1]}, ${t.params.wgSize[2]})\nfn main(\n  @builtin(local_invocation_index) lid : u32,\n  @builtin(subgroup_invocation_id) id : u32,\n  @builtin(subgroup_size) subgroupSize : u32,\n) {\n  // Force usage\n  _ = inputs;\n\n  output.subgroup_size[lid] = subgroupBroadcastFirst(lid + 1);\n  metadata.id[lid] = id;\n  metadata.subgroup_size[lid] = subgroupSize;\n\n  if ${testcase.cond} {\n    let b = ${t.params.op}(lid);\n    output.results[lid] = b;\n  }\n}`;\n\n    const uintsPerOutput = 2;\n    await runComputeTest(\n      t,\n      wgsl,\n      [t.params.wgSize[0], t.params.wgSize[1], t.params.wgSize[2]],\n      uintsPerOutput,\n      new Uint32Array([0]), // unused\n      (metadata: Uint32Array, output: Uint32Array) => {\n        return checkSwapCompute(metadata, output, t.params.op, testcase.filter);\n      }\n    );\n  });\n\n/**\n * Checks results of quad swaps in fragment shaders.\n *\n * @param data The framebuffer output\n *             * component 0 is the broadcast of the integer x position\n *             * component 1 is the broadcast of the integer y position\n * @param format The framebuffer format\n * @param width Framebuffer width\n * @param height Framebuffer height\n * @param broadcast The quad id being broadcast\n */\nfunction checkFragment(\n  data: Uint32Array,\n  format: GPUTextureFormat,\n  width: number,\n  height: number,\n  op: SwapOp\n): Error | undefined {\n  if (width < 3 || height < 3) {\n    return new Error(\n      `Insufficient framebuffer size [${width}w x ${height}h]. Minimum is [3w x 3h].`\n    );\n  }\n\n  const { blockWidth, blockHeight, bytesPerBlock } = kTextureFormatInfo[format];\n  const blocksPerRow = width / blockWidth;\n  // 256 minimum comes from image copy requirements.\n  const bytesPerRow = align(blocksPerRow * (bytesPerBlock ?? 1), 256);\n  const uintsPerRow = bytesPerRow / 4;\n  const uintsPerTexel = (bytesPerBlock ?? 1) / blockWidth / blockHeight / 4;\n\n  const coordToIndex = (row: number, col: number) => {\n    return uintsPerRow * row + col * uintsPerTexel;\n  };\n\n  // Iteration skips last row and column to avoid helper invocations because it is not\n  // guaranteed whether or not they participate in the subgroup operation.\n  for (let row = 0; row < height - 1; row++) {\n    for (let col = 0; col < width - 1; col++) {\n      const offset = coordToIndex(row, col);\n\n      const row_is_odd = row % 2 === 1;\n      const col_is_odd = col % 2 === 1;\n\n      // Skip checking quads that extend into potential helper invocations.\n      const max_row = row_is_odd ? row : row + 1;\n      const max_col = col_is_odd ? col : col + 1;\n      if (max_row === height - 1 || max_col === width - 1) {\n        continue;\n      }\n\n      let expect_row = row;\n      let expect_col = col;\n      switch (op) {\n        case 'quadSwapX':\n          expect_col = col_is_odd ? col - 1 : col + 1;\n          break;\n        case 'quadSwapY':\n          expect_row = row_is_odd ? row - 1 : row + 1;\n          break;\n        case 'quadSwapDiagonal':\n          expect_row = row_is_odd ? row - 1 : row + 1;\n          expect_col = col_is_odd ? col - 1 : col + 1;\n          break;\n      }\n\n      const row_output = data[offset + 1];\n      const col_output = data[offset];\n      if (expect_row !== row_output) {\n        return new Error(`Row ${row}, col ${col}: incorrect row results:\n- expected: ${expect_row}\n-      got: ${row_output}`);\n      }\n\n      if (expect_col !== col_output) {\n        return new Error(`Row ${row}, col ${col}: incorrect col results:\n- expected: ${expect_row}\n-      got: ${col_output}`);\n      }\n    }\n  }\n\n  return undefined;\n}\n\ng.test('fragment,all_active')\n  .desc(`Tests quad swaps in fragment shaders`)\n  .params(u =>\n    u\n      .combine('size', kFramebufferSizes)\n      .beginSubcases()\n      .combine('op', kOps)\n      .combineWithParams([{ format: 'rgba32uint' }] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('subgroups' as GPUFeatureName);\n  })\n  .fn(async t => {\n    const fsShader = `\nenable subgroups;\n\n@group(0) @binding(0)\nvar<storage, read_write> inputs : array<u32>; // unused\n\n@fragment\nfn main(\n  @builtin(position) pos : vec4f,\n) -> @location(0) vec4u {\n  // Force usage\n  _ = inputs[0];\n\n  let linear = u32(pos.x) + u32(pos.y) * ${t.params.size[0]};\n\n  // Filter out possible helper invocations.\n  let x_in_range = u32(pos.x) < (${t.params.size[0]} - 1);\n  let y_in_range = u32(pos.y) < (${t.params.size[1]} - 1);\n  let in_range = x_in_range && y_in_range;\n\n  var x_swap = select(1001, u32(pos.x), in_range);\n  var y_swap = select(1001, u32(pos.y), in_range);\n\n  x_swap = ${t.params.op}(x_swap);\n  y_swap = ${t.params.op}(y_swap);\n\n  return vec4u(x_swap, y_swap, 0, 0);\n}`;\n\n    await runFragmentTest(\n      t,\n      t.params.format,\n      fsShader,\n      t.params.size[0],\n      t.params.size[1],\n      new Uint32Array([0]), // unused,\n      (data: Uint32Array) => {\n        return checkFragment(\n          data,\n          t.params.format,\n          t.params.size[0],\n          t.params.size[1],\n          t.params.op\n        );\n      }\n    );\n  });\n\ng.test('fragment,split').unimplemented();\n"],"mappings":"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"}