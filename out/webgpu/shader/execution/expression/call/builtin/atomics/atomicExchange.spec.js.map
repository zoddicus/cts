{"version":3,"file":"atomicExchange.spec.js","names":["description","makeTestGroup","GPUTest","g","test","specURL","desc","params","u","combine","unimplemented"],"sources":["../../../../../../../../src/webgpu/shader/execution/expression/call/builtin/atomics/atomicExchange.spec.ts"],"sourcesContent":["export const description = `\nAtomically stores the value v in the atomic object pointed to atomic_ptr and returns the original value stored in the atomic object.\n`;\n\nimport { makeTestGroup } from '../../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../../gpu_test.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('exchange')\n  .specURL('https://www.w3.org/TR/WGSL/#atomic-rmw')\n  .desc(\n    `\nAS is storage or workgroup\nT is i32 or u32\n\nfn atomicExchange(atomic_ptr: ptr<AS, atomic<T>, read_write>, v: T) -> T\n`\n  )\n  .params(u =>\n    u.combine('SC', ['storage', 'uniform'] as const).combine('T', ['i32', 'u32'] as const)\n  )\n  .unimplemented();\n"],"mappings":";AAAA;AAAA,GAAA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAAC,CAED,SAASC,aAAa,QAAQ,qDAAqD;AACnF,SAASC,OAAO,QAAQ,+BAA+B;;AAEvD,OAAO,MAAMC,CAAC,GAAGF,aAAa,CAACC,OAAO,CAAC;;AAEvCC,CAAC,CAACC,IAAI,CAAC,UAAU,CAAC;AACfC,OAAO,CAAC,wCAAwC,CAAC;AACjDC,IAAI;AACF;AACL;AACA;AACA;AACA;AACA,CAAC,CACE;;AACAC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAO,CAAC,IAAI,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC,CAAU,CAACA,OAAO,CAAC,GAAG,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC,CAAU,CACvF;;AACAC,aAAa,EAAE"}