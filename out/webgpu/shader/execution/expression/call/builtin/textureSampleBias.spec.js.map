{"version":3,"file":"textureSampleBias.spec.js","names":["description","makeTestGroup","GPUTest","generateCoordBoundaries","generateOffsets","g","test","specURL","desc","params","u","combine","unimplemented","paramsSubcasesOnly","beginSubcases"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/textureSampleBias.spec.ts"],"sourcesContent":["export const description = `\nExecution tests for the 'textureSampleBias' builtin function\n\nSamples a texture with a bias to the mip level.\nMust only be used in a fragment shader stage.\nMust only be invoked in uniform control flow.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\n\nimport { generateCoordBoundaries, generateOffsets } from './utils.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('stage')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplebias')\n  .desc(\n    `\nTests that 'textureSampleBias' can only be called in 'fragment' shaders.\n`\n  )\n  .params(u => u.combine('stage', ['fragment', 'vertex', 'compute'] as const))\n  .unimplemented();\n\ng.test('control_flow')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplebias')\n  .desc(\n    `\nTests that 'textureSampleBias' can only be called in uniform control flow.\n`\n  )\n  .params(u => u.combine('stage', ['fragment', 'vertex', 'compute'] as const))\n  .unimplemented();\n\ng.test('sampled_2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplebias')\n  .desc(\n    `\nfn textureSampleBias(t: texture_2d<f32>, s: sampler, coords: vec2<f32>, bias: f32) -> vec4<f32>\nfn textureSampleBias(t: texture_2d<f32>, s: sampler, coords: vec2<f32>, bias: f32, offset: vec2<i32>) -> vec4<f32>\n\nParameters:\n * t: The sampled texture to read from\n * s: The sampler type\n * coords: The texture coordinates\n * bias: The bias to apply to the mip level before sampling. bias must be between -16.0 and 15.99.\n * offset:\n    - The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n      This offset is applied before applying any texture wrapping modes.\n    - The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    - Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'])\n      .combine('coords', generateCoordBoundaries(2))\n      .combine('bias', [-16.1, -16, 0, 1, 15.99, 16] as const)\n      .combine('offset', generateOffsets(2))\n  )\n  .unimplemented();\n\ng.test('sampled_3d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplebias')\n  .desc(\n    `\nfn textureSampleBias(t: texture_3d<f32>, s: sampler, coords: vec3<f32>, bias: f32) -> vec4<f32>\nfn textureSampleBias(t: texture_3d<f32>, s: sampler, coords: vec3<f32>, bias: f32, offset: vec3<i32>) -> vec4<f32>\nfn textureSampleBias(t: texture_cube<f32>, s: sampler, coords: vec3<f32>, bias: f32) -> vec4<f32>\n\nParameters:\n * t: The sampled texture to read from\n * s: The sampler type\n * coords: The texture coordinates\n * bias: The bias to apply to the mip level before sampling. bias must be between -16.0 and 15.99.\n * offset:\n    - The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n      This offset is applied before applying any texture wrapping modes.\n    - The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    - Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .params(u =>\n    u\n      .combine('texture_type', ['texture_3d', 'texture_cube'] as const)\n      .beginSubcases()\n      .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'])\n      .combine('coords', generateCoordBoundaries(3))\n      .combine('bias', [-16.1, -16, 0, 1, 15.99, 16] as const)\n      .combine('offset', generateOffsets(3))\n  )\n  .unimplemented();\n\ng.test('arrayed_2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplebias')\n  .desc(\n    `\nC: i32, u32\n\nfn textureSampleBias(t: texture_2d_array<f32>, s: sampler, coords: vec2<f32>, array_index: C, bias: f32) -> vec4<f32>\nfn textureSampleBias(t: texture_2d_array<f32>, s: sampler, coords: vec2<f32>, array_index: C, bias: f32, offset: vec2<i32>) -> vec4<f32>\n\nParameters:\n * t: The sampled texture to read from\n * s: The sampler type\n * coords: The texture coordinates\n * array_index: The 0-based texture array index to sample.\n * bias: The bias to apply to the mip level before sampling. bias must be between -16.0 and 15.99.\n * offset:\n    - The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n      This offset is applied before applying any texture wrapping modes.\n    - The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    - Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'])\n      .combine('coords', generateCoordBoundaries(2))\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('C_value', [-1, 0, 1, 2, 3, 4] as const)\n      /* array_index not param'd as out-of-bounds is implementation specific */\n      .combine('bias', [-16.1, -16, 0, 1, 15.99, 16] as const)\n      .combine('offset', generateOffsets(2))\n  )\n  .unimplemented();\n\ng.test('arrayed_3d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplebias')\n  .desc(\n    `\nC: i32, u32\n\nfn textureSampleBias(t: texture_cube_array<f32>, s: sampler, coords: vec3<f32>, array_index: C, bias: f32) -> vec4<f32>\n\nParameters:\n * t: The sampled texture to read from\n * s: The sampler type\n * coords: The texture coordinates\n * array_index: The 0-based texture array index to sample.\n * bias: The bias to apply to the mip level before sampling. bias must be between -16.0 and 15.99.\n * offset:\n    - The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n      This offset is applied before applying any texture wrapping modes.\n    - The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    - Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'])\n      .combine('coords', generateCoordBoundaries(3))\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('C_value', [-1, 0, 1, 2, 3, 4] as const)\n      /* array_index not param'd as out-of-bounds is implementation specific */\n      .combine('bias', [-16.1, -16, 0, 1, 15.99, 16] as const)\n  )\n  .unimplemented();\n"],"mappings":"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"}