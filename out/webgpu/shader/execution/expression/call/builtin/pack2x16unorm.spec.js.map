{"version":3,"file":"pack2x16unorm.spec.js","names":["description","makeTestGroup","GPUTest","kValue","f32","pack2x16unorm","TypeF32","TypeU32","TypeVec","u32","vec2","quantizeToF32","vectorF32Range","allInputSources","run","builtin","g","test","specURL","desc","params","u","combine","fn","t","makeCase","x","y","input","expected","normalizeF32","n","positive","max","negative","min","cases","flatMap","v","map"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/pack2x16unorm.spec.ts"],"sourcesContent":["export const description = `\nConverts two normalized floating point values to 16-bit unsigned integers, and then combines them into one u32 value.\nComponent e[i] of the input is converted to a 16-bit unsigned integer value\n⌊ 0.5 + 65535 × min(1, max(0, e[i])) ⌋ which is then placed in\nbits 16 × i through 16 × i + 15 of the result.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { kValue } from '../../../../../util/constants.js';\nimport {\n  f32,\n  pack2x16unorm,\n  TypeF32,\n  TypeU32,\n  TypeVec,\n  u32,\n  vec2,\n} from '../../../../../util/conversion.js';\nimport { quantizeToF32, vectorF32Range } from '../../../../../util/math.js';\nimport { allInputSources, Case, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('pack')\n  .specURL('https://www.w3.org/TR/WGSL/#pack-builtin-functions')\n  .desc(\n    `\n@const fn pack2x16unorm(e: vec2<f32>) -> u32\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const makeCase = (x: number, y: number): Case => {\n      x = quantizeToF32(x);\n      y = quantizeToF32(y);\n      return { input: [vec2(f32(x), f32(y))], expected: u32(pack2x16unorm(x, y)) };\n    };\n\n    // Returns a value normalized to [0, 1].\n    const normalizeF32 = (n: number): number => {\n      return n > 0 ? n / kValue.f32.positive.max : n / kValue.f32.negative.min;\n    };\n\n    const cases: Array<Case> = vectorF32Range(2).flatMap(v => {\n      return [\n        makeCase(...(v as [number, number])),\n        makeCase(...(v.map(normalizeF32) as [number, number])),\n      ];\n    });\n\n    await run(t, builtin('pack2x16unorm'), [TypeVec(2, TypeF32)], TypeU32, t.params, cases);\n  });\n"],"mappings":";AAAA;AAAA,GAAA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA,CAAC,CAED,SAASC,aAAa,QAAQ,kDAAkD;AAChF,SAASC,OAAO,QAAQ,4BAA4B;AACpD,SAASC,MAAM,QAAQ,kCAAkC;AACzD;AACEC,GAAG;AACHC,aAAa;AACbC,OAAO;AACPC,OAAO;AACPC,OAAO;AACPC,GAAG;AACHC,IAAI;AACC,mCAAmC;AAC1C,SAASC,aAAa,EAAEC,cAAc,QAAQ,6BAA6B;AAC3E,SAASC,eAAe,EAAQC,GAAG,QAAQ,qBAAqB;;AAEhE,SAASC,OAAO,QAAQ,cAAc;;AAEtC,OAAO,MAAMC,CAAC,GAAGf,aAAa,CAACC,OAAO,CAAC;;AAEvCc,CAAC,CAACC,IAAI,CAAC,MAAM,CAAC;AACXC,OAAO,CAAC,oDAAoD,CAAC;AAC7DC,IAAI;AACF;AACL;AACA,CAAC,CACE;;AACAC,MAAM,CAAC,CAAAC,CAAC,KAAIA,CAAC,CAACC,OAAO,CAAC,aAAa,EAAET,eAAe,CAAC,CAAC;AACtDU,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,MAAMC,QAAQ,GAAG,CAACC,CAAS,EAAEC,CAAS,KAAW;IAC/CD,CAAC,GAAGf,aAAa,CAACe,CAAC,CAAC;IACpBC,CAAC,GAAGhB,aAAa,CAACgB,CAAC,CAAC;IACpB,OAAO,EAAEC,KAAK,EAAE,CAAClB,IAAI,CAACN,GAAG,CAACsB,CAAC,CAAC,EAAEtB,GAAG,CAACuB,CAAC,CAAC,CAAC,CAAC,EAAEE,QAAQ,EAAEpB,GAAG,CAACJ,aAAa,CAACqB,CAAC,EAAEC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC9E,CAAC;;EAED;EACA,MAAMG,YAAY,GAAG,CAACC,CAAS,KAAa;IAC1C,OAAOA,CAAC,GAAG,CAAC,GAAGA,CAAC,GAAG5B,MAAM,CAACC,GAAG,CAAC4B,QAAQ,CAACC,GAAG,GAAGF,CAAC,GAAG5B,MAAM,CAACC,GAAG,CAAC8B,QAAQ,CAACC,GAAG;EAC1E,CAAC;;EAED,MAAMC,KAAkB,GAAGxB,cAAc,CAAC,CAAC,CAAC,CAACyB,OAAO,CAAC,CAAAC,CAAC,KAAI;IACxD,OAAO;IACLb,QAAQ,CAAC,GAAIa,CAAsB,CAAC;IACpCb,QAAQ,CAAC,GAAIa,CAAC,CAACC,GAAG,CAACT,YAAY,CAAsB,CAAC,CACvD;;EACH,CAAC,CAAC;;EAEF,MAAMhB,GAAG,CAACU,CAAC,EAAET,OAAO,CAAC,eAAe,CAAC,EAAE,CAACP,OAAO,CAAC,CAAC,EAAEF,OAAO,CAAC,CAAC,EAAEC,OAAO,EAAEiB,CAAC,CAACJ,MAAM,EAAEgB,KAAK,CAAC;AACzF,CAAC,CAAC"}