{"version":3,"file":"clamp.cache.js","names":["kValue","Type","FP","maxBigInt","minBigInt","makeCaseCache","u32Values","u32","max","i32Values","i32","negative","min","positive","abstractFloatValues","i64","generateConcreteIntegerTestCases","test_values","type","stage","flatMap","low","high","map","e","input","create","expected","Math","generateAbstractIntegerTestCases","abstractInt","generateFloatTestCases","trait","c","makeScalarTripleToIntervalCase","clampIntervals","undefined","fp_cases","nonConst","sparseScalarRange","reduce","a","b","d","u32_non_const","u32_const","i32_non_const","i32_const","abstract_int"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/clamp.cache.ts"],"sourcesContent":["import { kValue } from '../../../../../util/constants.js';\nimport { ScalarType, Type } from '../../../../../util/conversion.js';\nimport { FP } from '../../../../../util/floating_point.js';\nimport { maxBigInt, minBigInt } from '../../../../../util/math.js';\nimport { Case } from '../../case.js';\nimport { makeCaseCache } from '../../case_cache.js';\n\nconst u32Values = [0, 1, 2, 3, 0x70000000, 0x80000000, kValue.u32.max];\n\nconst i32Values = [\n  kValue.i32.negative.min,\n  -3,\n  -2,\n  -1,\n  0,\n  1,\n  2,\n  3,\n  0x70000000,\n  kValue.i32.positive.max,\n];\n\nconst abstractFloatValues = [\n  kValue.i64.negative.min,\n  -3n,\n  -2n,\n  -1n,\n  0n,\n  1n,\n  2n,\n  3n,\n  0x70000000n,\n  kValue.i64.positive.max,\n];\n\n/** @returns a set of clamp test cases from an ascending list of concrete integer values */\nfunction generateConcreteIntegerTestCases(\n  test_values: Array<number>,\n  type: ScalarType,\n  stage: 'const' | 'non_const'\n): Array<Case> {\n  return test_values.flatMap(low =>\n    test_values.flatMap(high =>\n      stage === 'const' && low > high\n        ? []\n        : test_values.map(e => ({\n            input: [type.create(e), type.create(low), type.create(high)],\n            expected: type.create(Math.min(Math.max(e, low), high)),\n          }))\n    )\n  );\n}\n\n/** @returns a set of clamp test cases from an ascending list of abstract integer values */\nfunction generateAbstractIntegerTestCases(test_values: Array<bigint>): Array<Case> {\n  return test_values.flatMap(low =>\n    test_values.flatMap(high =>\n      low > high\n        ? []\n        : test_values.map(e => ({\n            input: [\n              Type.abstractInt.create(e),\n              Type.abstractInt.create(low),\n              Type.abstractInt.create(high),\n            ],\n            expected: Type.abstractInt.create(minBigInt(maxBigInt(e, low), high)),\n          }))\n    )\n  );\n}\n\nfunction generateFloatTestCases(\n  test_values: readonly number[],\n  trait: 'f32' | 'f16' | 'abstract',\n  stage: 'const' | 'non_const'\n): Array<Case> {\n  return test_values.flatMap(low =>\n    test_values.flatMap(high =>\n      stage === 'const' && low > high\n        ? []\n        : test_values.flatMap(e => {\n            const c = FP[trait].makeScalarTripleToIntervalCase(\n              e,\n              low,\n              high,\n              stage === 'const' ? 'finite' : 'unfiltered',\n              ...FP[trait].clampIntervals\n            );\n            return c === undefined ? [] : [c];\n          })\n    )\n  );\n}\n\n// Cases: [f32|f16|abstract]_[non_]const\n// abstract_non_const is empty and unused\nconst fp_cases = (['f32', 'f16', 'abstract'] as const)\n  .flatMap(trait =>\n    ([true, false] as const).map(nonConst => ({\n      [`${trait}_${nonConst ? 'non_const' : 'const'}`]: () => {\n        if (trait === 'abstract' && nonConst) {\n          return [];\n        }\n        return generateFloatTestCases(\n          FP[trait].sparseScalarRange(),\n          trait,\n          nonConst ? 'non_const' : 'const'\n        );\n      },\n    }))\n  )\n  .reduce((a, b) => ({ ...a, ...b }), {});\n\nexport const d = makeCaseCache('clamp', {\n  u32_non_const: () => {\n    return generateConcreteIntegerTestCases(u32Values, Type.u32, 'non_const');\n  },\n  u32_const: () => {\n    return generateConcreteIntegerTestCases(u32Values, Type.u32, 'const');\n  },\n  i32_non_const: () => {\n    return generateConcreteIntegerTestCases(i32Values, Type.i32, 'non_const');\n  },\n  i32_const: () => {\n    return generateConcreteIntegerTestCases(i32Values, Type.i32, 'const');\n  },\n  abstract_int: () => {\n    return generateAbstractIntegerTestCases(abstractFloatValues);\n  },\n  ...fp_cases,\n});\n"],"mappings":"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"}