{"version":3,"file":"clamp.cache.js","names":["kValue","TypeI32","TypeU32","FP","makeCaseCache","u32Values","u32","max","i32Values","i32","negative","min","positive","generateIntegerTestCases","test_values","type","stage","flatMap","low","high","map","e","input","create","expected","Math","generateFloatTestCases","trait","c","makeScalarTripleToIntervalCase","clampIntervals","undefined","fp_cases","nonConst","sparseScalarRange","reduce","a","b","d","u32_non_const","u32_const","i32_non_const","i32_const"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/clamp.cache.ts"],"sourcesContent":["import { kValue } from '../../../../../util/constants.js';\nimport { ScalarType, TypeI32, TypeU32 } from '../../../../../util/conversion.js';\nimport { FP } from '../../../../../util/floating_point.js';\nimport { Case } from '../../case.js';\nimport { makeCaseCache } from '../../case_cache.js';\n\nconst u32Values = [0, 1, 2, 3, 0x70000000, 0x80000000, kValue.u32.max];\n\nconst i32Values = [\n  kValue.i32.negative.min,\n  -3,\n  -2,\n  -1,\n  0,\n  1,\n  2,\n  3,\n  0x70000000,\n  kValue.i32.positive.max,\n];\n\n/** @returns a set of clamp test cases from an ascending list of integer values */\nfunction generateIntegerTestCases(\n  test_values: Array<number>,\n  type: ScalarType,\n  stage: 'const' | 'non_const'\n): Array<Case> {\n  return test_values.flatMap(low =>\n    test_values.flatMap(high =>\n      stage === 'const' && low > high\n        ? []\n        : test_values.map(e => ({\n            input: [type.create(e), type.create(low), type.create(high)],\n            expected: type.create(Math.min(Math.max(e, low), high)),\n          }))\n    )\n  );\n}\n\nfunction generateFloatTestCases(\n  test_values: readonly number[],\n  trait: 'f32' | 'f16' | 'abstract',\n  stage: 'const' | 'non_const'\n): Array<Case> {\n  return test_values.flatMap(low =>\n    test_values.flatMap(high =>\n      stage === 'const' && low > high\n        ? []\n        : test_values.flatMap(e => {\n            const c = FP[trait].makeScalarTripleToIntervalCase(\n              e,\n              low,\n              high,\n              stage === 'const' ? 'finite' : 'unfiltered',\n              ...FP[trait].clampIntervals\n            );\n            return c === undefined ? [] : [c];\n          })\n    )\n  );\n}\n\n// Cases: [f32|f16|abstract]_[non_]const\n// abstract_non_const is empty and unused\nconst fp_cases = (['f32', 'f16', 'abstract'] as const)\n  .flatMap(trait =>\n    ([true, false] as const).map(nonConst => ({\n      [`${trait}_${nonConst ? 'non_const' : 'const'}`]: () => {\n        if (trait === 'abstract' && nonConst) {\n          return [];\n        }\n        return generateFloatTestCases(\n          FP[trait].sparseScalarRange(),\n          trait,\n          nonConst ? 'non_const' : 'const'\n        );\n      },\n    }))\n  )\n  .reduce((a, b) => ({ ...a, ...b }), {});\n\nexport const d = makeCaseCache('clamp', {\n  u32_non_const: () => {\n    return generateIntegerTestCases(u32Values, TypeU32, 'non_const');\n  },\n  u32_const: () => {\n    return generateIntegerTestCases(u32Values, TypeU32, 'const');\n  },\n  i32_non_const: () => {\n    return generateIntegerTestCases(i32Values, TypeI32, 'non_const');\n  },\n  i32_const: () => {\n    return generateIntegerTestCases(i32Values, TypeI32, 'const');\n  },\n  ...fp_cases,\n});\n"],"mappings":"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"}