{"version":3,"file":"determinant.cache.js","names":["assert","FP","PRNG","makeCaseCache","numSamples","randomMatrixEntry","p","dim","fpwidth","rangeTable","N","balanced","uniformInt","Math","floor","randomSquareMatrix","result","Array","map","_","multiplier","c","r","nonTrivialMatrices","matrices","detFn","detInterval","m","sumBegin","reduce","accum","abs","begin","sumEnd","end","f32_cases","flatMap","nonConst","f32","determinantInterval","generateMatrixToScalarCases","a","b","f16_cases","f16","abstract_cases","abstract","d"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/determinant.cache.ts"],"sourcesContent":["import { assert } from '../../../../../../common/util/util.js';\nimport { FP, FPInterval } from '../../../../../util/floating_point.js';\nimport { PRNG } from '../../../../../util/prng.js';\nimport { makeCaseCache } from '../../case_cache.js';\n\n// We want each case to avoid losing accuracy. We want to prevent bits from\n// falling off the bottom of the significand during intermediate\n// calculations. We want this to be true for reasonable implementations of\n// the determinant. Let's compute a budget B for the number of significant\n// bits allowed for each element in the matrix.\n//\n// Example computation method 1:  Use lower-diagonal form:\n//  A matrix is in lower-diagonal form if all the entries above and to\n//  the right of the diagonal are zero.\n//  1. Convert the matrix to lower-diagonal form using elementary row\n//  operations.\n//  2. Then the determinant is the product of the elements on the diagonal.\n//\n//  Analysis:\n//   - Let M be the number of significand bits for the floating point type.\n//     Remember to include the hidden/implicit 1, because we will assume\n//     all numbers are normal.\n//   - It takes N-1 elementary row operations to convert a general NxN\n//     matrix to lower diagonal form.  Let's ignore the fact this uses\n//     division. Let's allocate a budget 1 bit of precision per row operation.\n//   - If the diagonal elements are integers bounded by D, then their product\n//     is bounded by D**N.  So we split the remaining significand bit budget\n//     bits N ways.\n//\n//  So we have B ~ (M - (N-1)) / N\n//\n//  For f32, M = 24:\n//     N = 4 :  B =~ ( 24 - 3 ) / 4 = 21 / 4\n//              The bound on matrix elements should be 2**(21/4) or roughly 38.\n//     N = 3 :  B =~ ( 24 - 2 ) / 3 = 22 / 3\n//              The bound on matrix elements should be 2**(22/3) or roughly 161.\n//     N = 2 :  B =~ ( 24 - 1 ) / 2 = 23 / 2\n//              The bound on matrix elements should be 2**(23/2) or roughly 2896.\n//\n//  For f16, M = 11:\n//     N = 4 :  B =~ ( 11 - 3 ) / 4 = 8 / 4 = 2\n//              The bound on matrix elements should be 2**2 = 4.\n//     N = 3 :  B =~ ( 11 - 2 ) / 3 = 9 / 3 = 3\n//              The bound on matrix elements should be 2**3 = 8.\n//     N = 2 :  B =~ ( 11 - 1 ) / 2 = 10 / 2 = 5\n//              The bound on matrix elements should be 2**5 = 32.\n//\n// Example computation method 2: Naive method:\n//   The naive calculation of a determinant of an NxN matrix is the alternating\n//   sum of N terms, where each term is an entry from the matrix multiplied\n//   by the determinant of an (N-1)x(N-1) submatrix.\n//   The recurrence is:   T(N) = (N-1) + N + T(N-1), with T(1) = 0.\n//   The first N is for the adds and subtracts, the second N is for the multiplies,\n//   and the T(N-1) is the determinant of the submatrix.\n//   As N grows, this blows up quickly, even when accounting for reusing results.\n//   It's unlikely any GPU would actually calculate it this way.\n//\n// Accuracy for determinant is only defined for e, where e is an integer and\n// |e| < quadroot(2**21) [~38],\n// due to computational complexity of calculating the general solution for 4x4,\n// so custom matrices are used.\n\ntype Dim = 2 | 3 | 4;\ntype FPWidth = 16 | 32;\n\n// Number of random matrices to test, per configuration.\nconst numSamples = 20;\n\n// Returns a random element in a range suitable for a square matrix\n// that can have an accurately computed determinant.\nfunction randomMatrixEntry(p: PRNG, dim: Dim, fpwidth: FPWidth): number {\n  // See above for the justification.\n  const rangeTable = {\n    16: {\n      2: 32,\n      3: 8,\n      4: 4,\n    },\n    32: {\n      2: 2896,\n      3: 161,\n      4: 38,\n    },\n  };\n  const N = rangeTable[fpwidth][dim];\n  // Centre the distribution roughly at zero.\n  const balanced = p.uniformInt(N) - Math.floor(N / 2);\n  return balanced;\n}\n\n// Returns a random square matrix that should have an exactly computed\n// determinant for the given floating point width.\n// At least some of the matrices returned by this function should have\n// a non-zero determinant. This will be checked later by the nonTrivialMatrices\n// function.\nfunction randomSquareMatrix(p: PRNG, dim: Dim, fpwidth: FPWidth): number[][] {\n  const result: number[][] = [...Array(dim)].map(_ => [...Array(dim)]);\n  // Scale each element by a simple power of two. This should only affect\n  // the exponent of the result.\n  const multiplier = [1, 2, 0.25][p.uniformInt(3)];\n  for (let c = 0; c < dim; c++) {\n    for (let r = 0; r < dim; r++) {\n      result[c][r] = multiplier * randomMatrixEntry(p, dim, fpwidth);\n    }\n  }\n  return result;\n}\n\ntype detFnType = (m: number[][]) => FPInterval;\n\n// Returns true if at least one of the matrices has a non-zero determinant.\nfunction nonTrivialMatrices(matrices: number[][][], detFn: detFnType): boolean {\n  const detInterval = (m: number[][]) => detFn(m);\n  const sumBegin = matrices.reduce((accum, m) => accum + Math.abs(detInterval(m).begin), 0);\n  const sumEnd = matrices.reduce((accum, m) => accum + Math.abs(detInterval(m).end), 0);\n  return sumBegin > 0 && sumEnd >= sumBegin;\n}\n\n// Cases: f32_matDxD_[non_]const\nconst f32_cases = ([2, 3, 4] as const)\n  .flatMap(dim =>\n    ([true, false] as const).map(nonConst => ({\n      [`f32_mat${dim}x${dim}_${nonConst ? 'non_const' : 'const'}`]: () => {\n        const p = new PRNG(dim + 32);\n        const matrices: number[][][] = [...Array(numSamples)].map(_ =>\n          randomSquareMatrix(p, dim, 32)\n        );\n        assert(nonTrivialMatrices(matrices, FP.f32.determinantInterval));\n        return FP.f32.generateMatrixToScalarCases(\n          matrices,\n          nonConst ? 'unfiltered' : 'finite',\n          FP.f32.determinantInterval\n        );\n      },\n    }))\n  )\n  .reduce((a, b) => ({ ...a, ...b }), {});\n\n// Cases: f16_matDxD_[non_]const\nconst f16_cases = ([2, 3, 4] as const)\n  .flatMap(dim =>\n    ([true, false] as const).map(nonConst => ({\n      [`f16_mat${dim}x${dim}_${nonConst ? 'non_const' : 'const'}`]: () => {\n        const p = new PRNG(dim + 16);\n        const matrices: number[][][] = [...Array(numSamples)].map(_ =>\n          randomSquareMatrix(p, dim, 16)\n        );\n        assert(nonTrivialMatrices(matrices, FP.f16.determinantInterval));\n        return FP.f16.generateMatrixToScalarCases(\n          matrices,\n          nonConst ? 'unfiltered' : 'finite',\n          FP.f16.determinantInterval\n        );\n      },\n    }))\n  )\n  .reduce((a, b) => ({ ...a, ...b }), {});\n\n// Cases: abstract_matDxD\nconst abstract_cases = ([2, 3, 4] as const)\n  .map(dim => ({\n    [`abstract_mat${dim}x${dim}`]: () => {\n      const p = new PRNG(dim + 64);\n      // Use f32 values range for abstract float.\n      const matrices: number[][][] = [...Array(numSamples)].map(_ =>\n        randomSquareMatrix(p, dim, 32)\n      );\n      assert(nonTrivialMatrices(matrices, FP.f32.determinantInterval));\n      return FP.abstract.generateMatrixToScalarCases(\n        matrices,\n        'finite',\n        // determinant has an inherited accuracy, so abstract is only expected to be as accurate as f32\n        FP.f32.determinantInterval\n      );\n    },\n  }))\n  .reduce((a, b) => ({ ...a, ...b }), {});\n\nexport const d = makeCaseCache('determinant', {\n  ...f32_cases,\n  ...f16_cases,\n  ...abstract_cases,\n});\n"],"mappings":"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"}