{"version":3,"file":"bitcast.spec.js","names":["description","makeTestGroup","assert","GPUTest","alwaysPass","anyOf","kBit","kValue","f32","i32","u32","f16","TypeF32","TypeI32","TypeU32","TypeF16","TypeVec","Vector","toVector","FPInterval","FP","fullF32Range","fullI32Range","fullU32Range","fullF16Range","linearRange","isSubnormalNumberF32","isSubnormalNumberF16","cartesianProduct","isFiniteF32","isFiniteF16","reinterpretI32AsF32","reinterpretI32AsU32","reinterpretF32AsI32","reinterpretF32AsU32","reinterpretU32AsF32","reinterpretU32AsI32","reinterpretU16AsF16","reinterpretF16AsU16","makeCaseCache","allInputSources","run","builtinWithPredeclaration","g","numNaNs","f32InfAndNaNInU32","positive","infinity","max","negative","f32InfAndNaNInF32","map","u","f32InfAndNaNInI32","f32ZerosInU32","zero","f32ZerosInF32","f32ZerosInI32","f32ZerosInterval","f32FiniteRange","f32RangeWithInfAndNaN","f16FiniteInF16","f16FiniteInU16","f16InfAndNaNInU16","v","Math","ceil","floor","f16InfAndNaNInF16","f16ZerosInU16","f16ZerosInterval","u16x2ToU32","u16x2","length","buffer","ArrayBuffer","view","DataView","setUint16","getUint32","u32ToU16x2","setUint32","getUint16","u16x2ToVec2F16","u16x4ToVec4F16","u16x4","canU32BitcastToFiniteVec2F16","u16","reduce","a","b","slidingSlice","input","len","result","i","sub","j","push","f16Vec2InfAndNaNInU32","f16Vec2InfAndNaNInI32","f16Vec2ZerosInU32","f16Vec2ZerosInI32","u32RangeForF16Vec2FiniteInfNaN","u32RangeForF16Vec2Finite","filter","i32RangeForF16Vec2FiniteInfNaN","i32RangeForF16Vec2Finite","f32RangeWithInfAndNaNForF16Vec2FiniteInfNaN","f32FiniteRangeForF16Vec2Finite","f16Vec2FiniteInU16x2","f16Vec2FiniteInfNanInU16x2","f16Vec2FiniteInU16x4","f16Vec2FiniteInfNanInU16x4","anyF32","anyI32","anyU32","f32UnboundedInterval","constants","unboundedInterval","f16UnboundedInterval","i32RangeForF32FiniteInfNaN","i32RangeForF32Finite","u32RangeForF32FiniteInfNaN","u32RangeForF32Finite","bitcastF32ToF32Comparator","f","acceptable","bitcastF32ToU32Comparator","bitcastF32ToI32Comparator","bitcastI32ToF32Comparator","includes","bitcastU32ToF32Comparator","generateF16ExpectationIntervals","bitcastedF16Value","exactInterval","toInterval","bitcastF16ToF16Comparator","bitcastU32ToVec2F16Comparator","bitcastedVec2F16InU16x2","expectedIntervalsCombination","bitcastI32ToVec2F16Comparator","bitcastF32ToVec2F16Comparator","bitcastVec2U32ToVec4F16Comparator","u32x2","bitcastedVec4F16InU16x4","flatMap","bitcastVec2I32ToVec4F16Comparator","i32x2","bitcastVec2F32ToVec4F16Comparator","f32x2","possibleBitsInU16FromFiniteF16InU16","f16InU16","h","possible32BitScalarIntervalsFromF16x2","f16x2InU16x2","type","reinterpretFromU32","expectationsForValue","unboundedExpectations","x","possibleExpectations","isUnbounded","possibleU16Bits","possibleBitsU16x2","bitcastVec2F16ToU32Comparator","vec2F16InU16x2","expectations","bitcastVec2F16ToI32Comparator","bitcastVec2F16ToF32Comparator","bitcastVec4F16ToVec2U32Comparator","vec4F16InU16x4","expectationsPerElement","slice","e","bitcastVec4F16ToVec2I32Comparator","bitcastVec4F16ToVec2F32Comparator","d","i32_to_i32","expected","u32_to_u32","f32_inf_nan_to_f32","f32_to_f32","f16_inf_nan_to_f16","f16_to_f16","i32_to_u32","i32_to_f32","i32_to_f32_inf_nan","u32_to_i32","u32_to_f32","u32_to_f32_inf_nan","f32_inf_nan_to_i32","f32_to_i32","f32_inf_nan_to_u32","f32_to_u32","u32_to_vec2_f16_inf_nan","u32_to_vec2_f16","i32_to_vec2_f16_inf_nan","i32_to_vec2_f16","f32_inf_nan_to_vec2_f16_inf_nan","f32_to_vec2_f16","vec2_i32_to_vec4_f16_inf_nan","vec2_i32_to_vec4_f16","vec2_u32_to_vec4_f16_inf_nan","vec2_u32_to_vec4_f16","vec2_f32_inf_nan_to_vec4_f16_inf_nan","vec2_f32_to_vec4_f16","vec2_f16_to_u32","vec2_f16_inf_nan_to_u32","vec2_f16_to_i32","vec2_f16_inf_nan_to_i32","vec2_f16_to_f32_finite","vec2_f16_inf_nan_to_f32","vec4_f16_to_vec2_u32","vec4_f16_inf_nan_to_vec2_u32","vec4_f16_to_vec2_i32","vec4_f16_inf_nan_to_vec2_i32","vec4_f16_to_vec2_f32_finite","vec4_f16_inf_nan_to_vec2_f32","bitcastBuilder","canonicalDestType","params","destType","vectorize","alias","test","specURL","desc","combine","undefined","fn","t","cases","get","inputSource","beforeAllSubcases","selectDeviceOrSkipTestCase"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/bitcast.spec.ts"],"sourcesContent":["export const description = `\nExecution tests for the 'bitcast' builtin function\n\n@const @must_use fn bitcast<T>(e: T ) -> T\nT is concrete numeric scalar or concerete numeric vector\nIdentity function.\n\n@const @must_use fn bitcast<T>(e: S ) -> T\n@const @must_use fn bitcast<vecN<T>>(e: vecN<S> ) -> vecN<T>\nS is i32, u32, f32\nT is i32, u32, f32, and T is not S\nReinterpretation of bits.  Beware non-normal f32 values.\n\n@const @must_use fn bitcast<T>(e: vec2<f16> ) -> T\n@const @must_use fn bitcast<vec2<T>>(e: vec4<f16> ) -> vec2<T>\n@const @must_use fn bitcast<vec2<f16>>(e: T ) -> vec2<f16>\n@const @must_use fn bitcast<vec4<f16>>(e: vec2<T> ) -> vec4<f16>\nT is i32, u32, f32\n`;\n\nimport { TestParams } from '../../../../../../common/framework/fixture.js';\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { assert } from '../../../../../../common/util/util.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { Comparator, alwaysPass, anyOf } from '../../../../../util/compare.js';\nimport { kBit, kValue } from '../../../../../util/constants.js';\nimport {\n  f32,\n  i32,\n  u32,\n  f16,\n  TypeF32,\n  TypeI32,\n  TypeU32,\n  TypeF16,\n  TypeVec,\n  Vector,\n  Scalar,\n  toVector,\n} from '../../../../../util/conversion.js';\nimport { FPInterval, FP } from '../../../../../util/floating_point.js';\nimport {\n  fullF32Range,\n  fullI32Range,\n  fullU32Range,\n  fullF16Range,\n  linearRange,\n  isSubnormalNumberF32,\n  isSubnormalNumberF16,\n  cartesianProduct,\n  isFiniteF32,\n  isFiniteF16,\n} from '../../../../../util/math.js';\nimport {\n  reinterpretI32AsF32,\n  reinterpretI32AsU32,\n  reinterpretF32AsI32,\n  reinterpretF32AsU32,\n  reinterpretU32AsF32,\n  reinterpretU32AsI32,\n  reinterpretU16AsF16,\n  reinterpretF16AsU16,\n} from '../../../../../util/reinterpret.js';\nimport { makeCaseCache } from '../../case_cache.js';\nimport { allInputSources, run, ShaderBuilder } from '../../expression.js';\n\nimport { builtinWithPredeclaration } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\nconst numNaNs = 11;\nconst f32InfAndNaNInU32: number[] = [\n  // Cover NaNs evenly in integer space.\n  // The positive NaN with the lowest integer representation is the integer\n  // for infinity, plus one.\n  // The positive NaN with the highest integer representation is i32.max (!)\n  ...linearRange(kBit.f32.positive.infinity + 1, kBit.i32.positive.max, numNaNs),\n  // The negative NaN with the lowest integer representation is the integer\n  // for negative infinity, plus one.\n  // The negative NaN with the highest integer representation is u32.max (!)\n  ...linearRange(kBit.f32.negative.infinity + 1, kBit.u32.max, numNaNs),\n  kBit.f32.positive.infinity,\n  kBit.f32.negative.infinity,\n];\nconst f32InfAndNaNInF32 = f32InfAndNaNInU32.map(u => reinterpretU32AsF32(u));\nconst f32InfAndNaNInI32 = f32InfAndNaNInU32.map(u => reinterpretU32AsI32(u));\n\nconst f32ZerosInU32 = [0, kBit.f32.negative.zero];\nconst f32ZerosInF32 = f32ZerosInU32.map(u => reinterpretU32AsF32(u));\nconst f32ZerosInI32 = f32ZerosInU32.map(u => reinterpretU32AsI32(u));\nconst f32ZerosInterval: FPInterval = new FPInterval('f32', -0.0, 0.0);\n\n// f32FiniteRange is a list of finite f32s. fullF32Range() already\n// has +0, we only need to add -0.\nconst f32FiniteRange: number[] = [...fullF32Range(), kValue.f32.negative.zero];\nconst f32RangeWithInfAndNaN: number[] = [...f32FiniteRange, ...f32InfAndNaNInF32];\n\n// F16 values, finite, Inf/NaN, and zeros. Represented in float and u16.\nconst f16FiniteInF16: number[] = [...fullF16Range(), kValue.f16.negative.zero];\nconst f16FiniteInU16: number[] = f16FiniteInF16.map(u => reinterpretF16AsU16(u));\n\nconst f16InfAndNaNInU16: number[] = [\n  // Cover NaNs evenly in integer space.\n  // The positive NaN with the lowest integer representation is the integer\n  // for infinity, plus one.\n  // The positive NaN with the highest integer representation is u16 0x7fff i.e. 32767.\n  ...linearRange(kBit.f16.positive.infinity + 1, 32767, numNaNs).map(v => Math.ceil(v)),\n  // The negative NaN with the lowest integer representation is the integer\n  // for negative infinity, plus one.\n  // The negative NaN with the highest integer representation is u16 0xffff i.e. 65535\n  ...linearRange(kBit.f16.negative.infinity + 1, 65535, numNaNs).map(v => Math.floor(v)),\n  kBit.f16.positive.infinity,\n  kBit.f16.negative.infinity,\n];\nconst f16InfAndNaNInF16 = f16InfAndNaNInU16.map(u => reinterpretU16AsF16(u));\n\nconst f16ZerosInU16 = [kBit.f16.negative.zero, 0];\n\n// f16 interval that match +/-0.0.\nconst f16ZerosInterval: FPInterval = new FPInterval('f16', -0.0, 0.0);\n\n/**\n * @returns an u32 whose lower and higher 16bits are the two elements of the\n * given array of two u16 respectively, in little-endian.\n */\nfunction u16x2ToU32(u16x2: readonly number[]): number {\n  assert(u16x2.length === 2);\n  // Create a DataView with 4 bytes buffer.\n  const buffer = new ArrayBuffer(4);\n  const view = new DataView(buffer);\n  // Enforce little-endian.\n  view.setUint16(0, u16x2[0], true);\n  view.setUint16(2, u16x2[1], true);\n  return view.getUint32(0, true);\n}\n\n/**\n * @returns an array of two u16, respectively the lower and higher 16bits of\n * given u32 in little-endian.\n */\nfunction u32ToU16x2(u32: number): number[] {\n  // Create a DataView with 4 bytes buffer.\n  const buffer = new ArrayBuffer(4);\n  const view = new DataView(buffer);\n  // Enforce little-endian.\n  view.setUint32(0, u32, true);\n  return [view.getUint16(0, true), view.getUint16(2, true)];\n}\n\n/**\n * @returns a vec2<f16> from an array of two u16, each reinterpreted as f16.\n */\nfunction u16x2ToVec2F16(u16x2: number[]): Vector {\n  assert(u16x2.length === 2);\n  return toVector(u16x2.map(reinterpretU16AsF16), f16);\n}\n\n/**\n * @returns a vec4<f16> from an array of four u16, each reinterpreted as f16.\n */\nfunction u16x4ToVec4F16(u16x4: number[]): Vector {\n  assert(u16x4.length === 4);\n  return toVector(u16x4.map(reinterpretU16AsF16), f16);\n}\n\n/**\n * @returns true if and only if a given u32 can bitcast to a vec2<f16> with all elements\n * being finite f16 values.\n */\nfunction canU32BitcastToFiniteVec2F16(u32: number): boolean {\n  return u32ToU16x2(u32)\n    .map(u16 => isFiniteF16(reinterpretU16AsF16(u16)))\n    .reduce((a, b) => a && b, true);\n}\n\n/**\n * @returns an array of N elements with the i-th element being an array of len elements\n * [a_i, a_((i+1)%N), ..., a_((i+len-1)%N)], for the input array of N element [a_1, ... a_N]\n * and the given len. For example, slidingSlice([1, 2, 3], 2) result in\n * [[1, 2], [2, 3], [3, 1]].\n * This helper function is used for generating vector cases from scalar values array.\n */\nfunction slidingSlice(input: number[], len: number) {\n  const result: number[][] = [];\n  for (let i = 0; i < input.length; i++) {\n    const sub: number[] = [];\n    for (let j = 0; j < len; j++) {\n      sub.push(input[(i + j) % input.length]);\n    }\n    result.push(sub);\n  }\n  return result;\n}\n\n// vec2<f16> interesting (zeros, Inf, and NaN) values for testing cases.\n// vec2<f16> values that has at least one Inf/NaN f16 element, reinterpreted as u32/i32.\nconst f16Vec2InfAndNaNInU32 = [\n  ...cartesianProduct(f16InfAndNaNInU16, [...f16InfAndNaNInU16, ...f16FiniteInU16]),\n  ...cartesianProduct(f16FiniteInU16, f16InfAndNaNInU16),\n].map(u16x2ToU32);\nconst f16Vec2InfAndNaNInI32 = f16Vec2InfAndNaNInU32.map(u => reinterpretU32AsI32(u));\n// vec2<f16> values with two f16 0.0 element, reinterpreted as u32/i32.\nconst f16Vec2ZerosInU32 = cartesianProduct(f16ZerosInU16, f16ZerosInU16).map(u16x2ToU32);\nconst f16Vec2ZerosInI32 = f16Vec2ZerosInU32.map(u => reinterpretU32AsI32(u));\n\n// i32/u32/f32 range for bitcasting to vec2<f16>\n// u32 values for bitcasting to vec2<f16> finite, Inf, and NaN.\nconst u32RangeForF16Vec2FiniteInfNaN: number[] = [\n  ...fullU32Range(),\n  ...f16Vec2ZerosInU32,\n  ...f16Vec2InfAndNaNInU32,\n];\n// u32 values for bitcasting to finite only vec2<f16>, used for constant evaluation.\nconst u32RangeForF16Vec2Finite: number[] = u32RangeForF16Vec2FiniteInfNaN.filter(\n  canU32BitcastToFiniteVec2F16\n);\n// i32 values for bitcasting to vec2<f16> finite, zeros, Inf, and NaN.\nconst i32RangeForF16Vec2FiniteInfNaN: number[] = [\n  ...fullI32Range(),\n  ...f16Vec2ZerosInI32,\n  ...f16Vec2InfAndNaNInI32,\n];\n// i32 values for bitcasting to finite only vec2<f16>, used for constant evaluation.\nconst i32RangeForF16Vec2Finite: number[] = i32RangeForF16Vec2FiniteInfNaN.filter(u =>\n  canU32BitcastToFiniteVec2F16(reinterpretI32AsU32(u))\n);\n// f32 values with finite/Inf/NaN f32, for bitcasting to vec2<f16> finite, zeros, Inf, and NaN.\nconst f32RangeWithInfAndNaNForF16Vec2FiniteInfNaN: number[] = [\n  ...f32RangeWithInfAndNaN,\n  ...u32RangeForF16Vec2FiniteInfNaN.map(reinterpretU32AsF32),\n];\n// Finite f32 values for bitcasting to finite only vec2<f16>, used for constant evaluation.\nconst f32FiniteRangeForF16Vec2Finite: number[] = f32RangeWithInfAndNaNForF16Vec2FiniteInfNaN\n  .filter(isFiniteF32)\n  .filter(u => canU32BitcastToFiniteVec2F16(reinterpretF32AsU32(u)));\n\n// vec2<f16> cases for bitcasting to i32/u32/f32, by combining f16 values into pairs\nconst f16Vec2FiniteInU16x2 = slidingSlice(f16FiniteInU16, 2);\nconst f16Vec2FiniteInfNanInU16x2 = slidingSlice([...f16FiniteInU16, ...f16InfAndNaNInU16], 2);\n// vec4<f16> cases for bitcasting to vec2<i32/u32/f32>, by combining f16 values 4-by-4\nconst f16Vec2FiniteInU16x4 = slidingSlice(f16FiniteInU16, 4);\nconst f16Vec2FiniteInfNanInU16x4 = slidingSlice([...f16FiniteInU16, ...f16InfAndNaNInU16], 4);\n\n// alwaysPass comparator for i32/u32/f32 cases. For f32/f16 we also use unbound interval, which\n// allow per-element unbounded expectation for vector.\nconst anyF32 = alwaysPass('any f32');\nconst anyI32 = alwaysPass('any i32');\nconst anyU32 = alwaysPass('any u32');\n\n// Unbounded FPInterval\nconst f32UnboundedInterval = FP.f32.constants().unboundedInterval;\nconst f16UnboundedInterval = FP.f16.constants().unboundedInterval;\n\n// i32 and u32 cases for bitcasting to f32.\n// i32 cases for bitcasting to f32 finite, zeros, Inf, and NaN.\nconst i32RangeForF32FiniteInfNaN: number[] = [\n  ...fullI32Range(),\n  ...f32ZerosInI32,\n  ...f32InfAndNaNInI32,\n];\n// i32 cases for bitcasting to f32 finite only.\nconst i32RangeForF32Finite: number[] = i32RangeForF32FiniteInfNaN.filter(i =>\n  isFiniteF32(reinterpretI32AsF32(i))\n);\n// u32 cases for bitcasting to f32 finite, zeros, Inf, and NaN.\nconst u32RangeForF32FiniteInfNaN: number[] = [\n  ...fullU32Range(),\n  ...f32ZerosInU32,\n  ...f32InfAndNaNInU32,\n];\n// u32 cases for bitcasting to f32 finite only.\nconst u32RangeForF32Finite: number[] = u32RangeForF32FiniteInfNaN.filter(u =>\n  isFiniteF32(reinterpretU32AsF32(u))\n);\n\n/**\n * @returns a Comparator for checking if a f32 value is a valid\n * bitcast conversion from f32.\n */\nfunction bitcastF32ToF32Comparator(f: number): Comparator {\n  if (!isFiniteF32(f)) return anyF32;\n  const acceptable: number[] = [f, ...(isSubnormalNumberF32(f) ? f32ZerosInF32 : [])];\n  return anyOf(...acceptable.map(f32));\n}\n\n/**\n * @returns a Comparator for checking if a u32 value is a valid\n * bitcast conversion from f32.\n */\nfunction bitcastF32ToU32Comparator(f: number): Comparator {\n  if (!isFiniteF32(f)) return anyU32;\n  const acceptable: number[] = [\n    reinterpretF32AsU32(f),\n    ...(isSubnormalNumberF32(f) ? f32ZerosInU32 : []),\n  ];\n  return anyOf(...acceptable.map(u32));\n}\n\n/**\n * @returns a Comparator for checking if a i32 value is a valid\n * bitcast conversion from f32.\n */\nfunction bitcastF32ToI32Comparator(f: number): Comparator {\n  if (!isFiniteF32(f)) return anyI32;\n  const acceptable: number[] = [\n    reinterpretF32AsI32(f),\n    ...(isSubnormalNumberF32(f) ? f32ZerosInI32 : []),\n  ];\n  return anyOf(...acceptable.map(i32));\n}\n\n/**\n * @returns a Comparator for checking if a f32 value is a valid\n * bitcast conversion from i32.\n */\nfunction bitcastI32ToF32Comparator(i: number): Comparator {\n  const f: number = reinterpretI32AsF32(i);\n  if (!isFiniteF32(f)) return anyI32;\n  // Positive or negative zero bit pattern map to any zero.\n  if (f32ZerosInI32.includes(i)) return anyOf(...f32ZerosInF32.map(f32));\n  const acceptable: number[] = [f, ...(isSubnormalNumberF32(f) ? f32ZerosInF32 : [])];\n  return anyOf(...acceptable.map(f32));\n}\n\n/**\n * @returns a Comparator for checking if a f32 value is a valid\n * bitcast conversion from u32.\n */\nfunction bitcastU32ToF32Comparator(u: number): Comparator {\n  const f: number = reinterpretU32AsF32(u);\n  if (!isFiniteF32(f)) return anyU32;\n  // Positive or negative zero bit pattern map to any zero.\n  if (f32ZerosInU32.includes(u)) return anyOf(...f32ZerosInF32.map(f32));\n  const acceptable: number[] = [f, ...(isSubnormalNumberF32(f) ? f32ZerosInF32 : [])];\n  return anyOf(...acceptable.map(f32));\n}\n\n/**\n * @returns an array of expected f16 FPInterval for the given bitcasted f16 value, which may be\n * subnormal, Inf, or NaN. Test cases that bitcasted to vector of f16 use this function to get\n * per-element expectation and build vector expectation using cartesianProduct.\n */\nfunction generateF16ExpectationIntervals(bitcastedF16Value: number): FPInterval[] {\n  // If the bitcasted f16 value is inf or nan, the result is unbounded\n  if (!isFiniteF16(bitcastedF16Value)) {\n    return [f16UnboundedInterval];\n  }\n  // If the casted f16 value is +/-0.0, the result can be one of both. Note that in JS -0.0 === 0.0.\n  if (bitcastedF16Value === 0.0) {\n    return [f16ZerosInterval];\n  }\n  const exactInterval = FP.f16.toInterval(bitcastedF16Value);\n  // If the casted f16 value is subnormal, it also may be flushed to +/-0.0.\n  return [exactInterval, ...(isSubnormalNumberF16(bitcastedF16Value) ? [f16ZerosInterval] : [])];\n}\n\n/**\n * @returns a Comparator for checking if a f16 value is a valid\n * bitcast conversion from f16.\n */\nfunction bitcastF16ToF16Comparator(f: number): Comparator {\n  if (!isFiniteF16(f)) return anyOf(f16UnboundedInterval);\n  return anyOf(...generateF16ExpectationIntervals(f));\n}\n\n/**\n * @returns a Comparator for checking if a vec2<f16> is a valid bitcast\n * conversion from u32.\n */\nfunction bitcastU32ToVec2F16Comparator(u: number): Comparator {\n  const bitcastedVec2F16InU16x2 = u32ToU16x2(u).map(reinterpretU16AsF16);\n  // Generate expection for vec2 f16 result, by generating expected intervals for each elements and\n  // then do cartesian product.\n  const expectedIntervalsCombination = cartesianProduct(\n    ...bitcastedVec2F16InU16x2.map(generateF16ExpectationIntervals)\n  );\n  return anyOf(...expectedIntervalsCombination);\n}\n\n/**\n * @returns a Comparator for checking if a vec2<f16> value is a valid\n * bitcast conversion from i32.\n */\nfunction bitcastI32ToVec2F16Comparator(i: number): Comparator {\n  const bitcastedVec2F16InU16x2 = u32ToU16x2(reinterpretI32AsU32(i)).map(reinterpretU16AsF16);\n  // Generate expection for vec2 f16 result, by generating expected intervals for each elements and\n  // then do cartesian product.\n  const expectedIntervalsCombination = cartesianProduct(\n    ...bitcastedVec2F16InU16x2.map(generateF16ExpectationIntervals)\n  );\n  return anyOf(...expectedIntervalsCombination);\n}\n\n/**\n * @returns a Comparator for checking if a vec2<f16> value is a valid\n * bitcast conversion from f32.\n */\nfunction bitcastF32ToVec2F16Comparator(f: number): Comparator {\n  // If input f32 is not finite, it can be evaluated to any value and thus any result f16 vec2 is\n  // possible.\n  if (!isFiniteF32(f)) {\n    return anyOf([f16UnboundedInterval, f16UnboundedInterval]);\n  }\n  const bitcastedVec2F16InU16x2 = u32ToU16x2(reinterpretF32AsU32(f)).map(reinterpretU16AsF16);\n  // Generate expection for vec2 f16 result, by generating expected intervals for each elements and\n  // then do cartesian product.\n  const expectedIntervalsCombination = cartesianProduct(\n    ...bitcastedVec2F16InU16x2.map(generateF16ExpectationIntervals)\n  );\n  return anyOf(...expectedIntervalsCombination);\n}\n\n/**\n * @returns a Comparator for checking if a vec4<f16> is a valid\n * bitcast conversion from vec2<u32>.\n */\nfunction bitcastVec2U32ToVec4F16Comparator(u32x2: number[]): Comparator {\n  assert(u32x2.length === 2);\n  const bitcastedVec4F16InU16x4 = u32x2.flatMap(u32ToU16x2).map(reinterpretU16AsF16);\n  // Generate expection for vec4 f16 result, by generating expected intervals for each elements and\n  // then do cartesian product.\n  const expectedIntervalsCombination = cartesianProduct(\n    ...bitcastedVec4F16InU16x4.map(generateF16ExpectationIntervals)\n  );\n  return anyOf(...expectedIntervalsCombination);\n}\n\n/**\n * @returns a Comparator for checking if a vec4<f16> is a valid\n * bitcast conversion from vec2<i32>.\n */\nfunction bitcastVec2I32ToVec4F16Comparator(i32x2: number[]): Comparator {\n  assert(i32x2.length === 2);\n  const bitcastedVec4F16InU16x4 = i32x2\n    .map(reinterpretI32AsU32)\n    .flatMap(u32ToU16x2)\n    .map(reinterpretU16AsF16);\n  // Generate expection for vec4 f16 result, by generating expected intervals for each elements and\n  // then do cartesian product.\n  const expectedIntervalsCombination = cartesianProduct(\n    ...bitcastedVec4F16InU16x4.map(generateF16ExpectationIntervals)\n  );\n  return anyOf(...expectedIntervalsCombination);\n}\n\n/**\n * @returns a Comparator for checking if a vec4<f16> is a valid\n * bitcast conversion from vec2<f32>.\n */\nfunction bitcastVec2F32ToVec4F16Comparator(f32x2: number[]): Comparator {\n  assert(f32x2.length === 2);\n  const bitcastedVec4F16InU16x4 = f32x2\n    .map(reinterpretF32AsU32)\n    .flatMap(u32ToU16x2)\n    .map(reinterpretU16AsF16);\n  // Generate expection for vec4 f16 result, by generating expected intervals for each elements and\n  // then do cartesian product.\n  const expectedIntervalsCombination = cartesianProduct(\n    ...bitcastedVec4F16InU16x4.map(generateF16ExpectationIntervals)\n  );\n  return anyOf(...expectedIntervalsCombination);\n}\n\n// Structure that store the expectations of a single 32bit scalar/element bitcasted from two f16.\ninterface ExpectionFor32BitsScalarFromF16x2 {\n  // possibleExpectations is Scalar array if the expectation is for i32/u32 and FPInterval array for\n  // f32. Note that if the expectation for i32/u32 is unbound, possibleExpectations is meaningless.\n  possibleExpectations: (Scalar | FPInterval)[];\n  isUnbounded: boolean;\n}\n\n/**\n * @returns the array of possible 16bits, represented in u16, that bitcasted\n * from a given finite f16 represented in u16, handling the possible subnormal\n * flushing. Used to build up 32bits or larger results.\n */\nfunction possibleBitsInU16FromFiniteF16InU16(f16InU16: number): number[] {\n  const h = reinterpretU16AsF16(f16InU16);\n  assert(isFiniteF16(h));\n  return [f16InU16, ...(isSubnormalNumberF16(h) ? f16ZerosInU16 : [])];\n}\n\n/**\n * @returns the expectation for a single 32bit scalar bitcasted from given pair of\n * f16, result in ExpectionFor32BitsScalarFromF16x2.\n */\nfunction possible32BitScalarIntervalsFromF16x2(\n  f16x2InU16x2: number[],\n  type: 'i32' | 'u32' | 'f32'\n): ExpectionFor32BitsScalarFromF16x2 {\n  assert(f16x2InU16x2.length === 2);\n  let reinterpretFromU32: (x: number) => number;\n  let expectationsForValue: (x: number) => Scalar[] | FPInterval[];\n  let unboundedExpectations: FPInterval[] | Scalar[];\n  if (type === 'u32') {\n    reinterpretFromU32 = (x: number) => x;\n    expectationsForValue = x => [u32(x)];\n    // Scalar expectation can not express \"unbounded\" for i32 and u32, so use 0 here as a\n    // placeholder, and the possibleExpectations should be ignored if the result is unbounded.\n    unboundedExpectations = [u32(0)];\n  } else if (type === 'i32') {\n    reinterpretFromU32 = (x: number) => reinterpretU32AsI32(x);\n    expectationsForValue = x => [i32(x)];\n    // Scalar expectation can not express \"unbounded\" for i32 and u32, so use 0 here as a\n    // placeholder, and the possibleExpectations should be ignored if the result is unbounded.\n    unboundedExpectations = [i32(0)];\n  } else {\n    assert(type === 'f32');\n    reinterpretFromU32 = (x: number) => reinterpretU32AsF32(x);\n    expectationsForValue = x => {\n      // Handle the possible Inf/NaN/zeros and subnormal cases for f32 result.\n      if (!isFiniteF32(x)) {\n        return [f32UnboundedInterval];\n      }\n      // If the casted f16 value is +/-0.0, the result can be one of both. Note that in JS -0.0 === 0.0.\n      if (x === 0.0) {\n        return [f32ZerosInterval];\n      }\n      const exactInterval = FP.f32.toInterval(x);\n      // If the casted f16 value is subnormal, it also may be flushed to +/-0.0.\n      return [exactInterval, ...(isSubnormalNumberF32(x) ? [f32ZerosInterval] : [])];\n    };\n    unboundedExpectations = [f32UnboundedInterval];\n  }\n  // Return unbounded expection if f16 Inf/NaN occurs\n  if (\n    !isFiniteF16(reinterpretU16AsF16(f16x2InU16x2[0])) ||\n    !isFiniteF16(reinterpretU16AsF16(f16x2InU16x2[1]))\n  ) {\n    return { possibleExpectations: unboundedExpectations, isUnbounded: true };\n  }\n  const possibleU16Bits = f16x2InU16x2.map(possibleBitsInU16FromFiniteF16InU16);\n  const possibleExpectations = cartesianProduct(...possibleU16Bits).flatMap<Scalar | FPInterval>(\n    (possibleBitsU16x2: readonly number[]) => {\n      assert(possibleBitsU16x2.length === 2);\n      return expectationsForValue(reinterpretFromU32(u16x2ToU32(possibleBitsU16x2)));\n    }\n  );\n  return { possibleExpectations, isUnbounded: false };\n}\n\n/**\n * @returns a Comparator for checking if a u32 value is a valid\n * bitcast conversion from vec2 f16.\n */\nfunction bitcastVec2F16ToU32Comparator(vec2F16InU16x2: number[]): Comparator {\n  assert(vec2F16InU16x2.length === 2);\n  const expectations = possible32BitScalarIntervalsFromF16x2(vec2F16InU16x2, 'u32');\n  // Return alwaysPass if result is expected unbounded.\n  if (expectations.isUnbounded) {\n    return anyU32;\n  }\n  return anyOf(...expectations.possibleExpectations);\n}\n\n/**\n * @returns a Comparator for checking if a i32 value is a valid\n * bitcast conversion from vec2 f16.\n */\nfunction bitcastVec2F16ToI32Comparator(vec2F16InU16x2: number[]): Comparator {\n  assert(vec2F16InU16x2.length === 2);\n  const expectations = possible32BitScalarIntervalsFromF16x2(vec2F16InU16x2, 'i32');\n  // Return alwaysPass if result is expected unbounded.\n  if (expectations.isUnbounded) {\n    return anyI32;\n  }\n  return anyOf(...expectations.possibleExpectations);\n}\n\n/**\n * @returns a Comparator for checking if a i32 value is a valid\n * bitcast conversion from vec2 f16.\n */\nfunction bitcastVec2F16ToF32Comparator(vec2F16InU16x2: number[]): Comparator {\n  assert(vec2F16InU16x2.length === 2);\n  const expectations = possible32BitScalarIntervalsFromF16x2(vec2F16InU16x2, 'f32');\n  // Return alwaysPass if result is expected unbounded.\n  if (expectations.isUnbounded) {\n    return anyF32;\n  }\n  return anyOf(...expectations.possibleExpectations);\n}\n\n/**\n * @returns a Comparator for checking if a vec2 u32 value is a valid\n * bitcast conversion from vec4 f16.\n */\nfunction bitcastVec4F16ToVec2U32Comparator(vec4F16InU16x4: number[]): Comparator {\n  assert(vec4F16InU16x4.length === 4);\n  const expectationsPerElement = [vec4F16InU16x4.slice(0, 2), vec4F16InU16x4.slice(2, 4)].map(e =>\n    possible32BitScalarIntervalsFromF16x2(e, 'u32')\n  );\n  // Return alwaysPass if any element is expected unbounded. Although it may be only one unbounded\n  // element in the result vector, currently we don't have a way to build a comparator that expect\n  // only one element of i32/u32 vector unbounded.\n  if (expectationsPerElement.map(e => e.isUnbounded).reduce((a, b) => a || b, false)) {\n    return alwaysPass('any vec2<u32>');\n  }\n  return anyOf(\n    ...cartesianProduct(...expectationsPerElement.map(e => e.possibleExpectations)).map(\n      e => new Vector(e as Scalar[])\n    )\n  );\n}\n\n/**\n * @returns a Comparator for checking if a vec2 i32 value is a valid\n * bitcast conversion from vec4 f16.\n */\nfunction bitcastVec4F16ToVec2I32Comparator(vec4F16InU16x4: number[]): Comparator {\n  assert(vec4F16InU16x4.length === 4);\n  const expectationsPerElement = [vec4F16InU16x4.slice(0, 2), vec4F16InU16x4.slice(2, 4)].map(e =>\n    possible32BitScalarIntervalsFromF16x2(e, 'i32')\n  );\n  // Return alwaysPass if any element is expected unbounded. Although it may be only one unbounded\n  // element in the result vector, currently we don't have a way to build a comparator that expect\n  // only one element of i32/u32 vector unbounded.\n  if (expectationsPerElement.map(e => e.isUnbounded).reduce((a, b) => a || b, false)) {\n    return alwaysPass('any vec2<i32>');\n  }\n  return anyOf(\n    ...cartesianProduct(...expectationsPerElement.map(e => e.possibleExpectations)).map(\n      e => new Vector(e as Scalar[])\n    )\n  );\n}\n\n/**\n * @returns a Comparator for checking if a vec2 f32 value is a valid\n * bitcast conversion from vec4 f16.\n */\nfunction bitcastVec4F16ToVec2F32Comparator(vec4F16InU16x4: number[]): Comparator {\n  assert(vec4F16InU16x4.length === 4);\n  const expectationsPerElement = [vec4F16InU16x4.slice(0, 2), vec4F16InU16x4.slice(2, 4)].map(e =>\n    possible32BitScalarIntervalsFromF16x2(e, 'f32')\n  );\n  return anyOf(\n    ...cartesianProduct(...expectationsPerElement.map(e => e.possibleExpectations)).map(e => [\n      e[0] as FPInterval,\n      e[1] as FPInterval,\n    ])\n  );\n}\n\nexport const d = makeCaseCache('bitcast', {\n  // Identity Cases\n  i32_to_i32: () => fullI32Range().map(e => ({ input: i32(e), expected: i32(e) })),\n  u32_to_u32: () => fullU32Range().map(e => ({ input: u32(e), expected: u32(e) })),\n  f32_inf_nan_to_f32: () =>\n    f32RangeWithInfAndNaN.map(e => ({\n      input: f32(e),\n      expected: bitcastF32ToF32Comparator(e),\n    })),\n  f32_to_f32: () =>\n    f32FiniteRange.map(e => ({ input: f32(e), expected: bitcastF32ToF32Comparator(e) })),\n  f16_inf_nan_to_f16: () =>\n    [...f16FiniteInF16, ...f16InfAndNaNInF16].map(e => ({\n      input: f16(e),\n      expected: bitcastF16ToF16Comparator(e),\n    })),\n  f16_to_f16: () =>\n    f16FiniteInF16.map(e => ({ input: f16(e), expected: bitcastF16ToF16Comparator(e) })),\n\n  // i32,u32,f32 to different i32,u32,f32\n  i32_to_u32: () => fullI32Range().map(e => ({ input: i32(e), expected: u32(e) })),\n  i32_to_f32: () =>\n    i32RangeForF32Finite.map(e => ({\n      input: i32(e),\n      expected: bitcastI32ToF32Comparator(e),\n    })),\n  i32_to_f32_inf_nan: () =>\n    i32RangeForF32FiniteInfNaN.map(e => ({\n      input: i32(e),\n      expected: bitcastI32ToF32Comparator(e),\n    })),\n  u32_to_i32: () => fullU32Range().map(e => ({ input: u32(e), expected: i32(e) })),\n  u32_to_f32: () =>\n    u32RangeForF32Finite.map(e => ({\n      input: u32(e),\n      expected: bitcastU32ToF32Comparator(e),\n    })),\n  u32_to_f32_inf_nan: () =>\n    u32RangeForF32FiniteInfNaN.map(e => ({\n      input: u32(e),\n      expected: bitcastU32ToF32Comparator(e),\n    })),\n  f32_inf_nan_to_i32: () =>\n    f32RangeWithInfAndNaN.map(e => ({\n      input: f32(e),\n      expected: bitcastF32ToI32Comparator(e),\n    })),\n  f32_to_i32: () =>\n    f32FiniteRange.map(e => ({ input: f32(e), expected: bitcastF32ToI32Comparator(e) })),\n\n  f32_inf_nan_to_u32: () =>\n    f32RangeWithInfAndNaN.map(e => ({\n      input: f32(e),\n      expected: bitcastF32ToU32Comparator(e),\n    })),\n  f32_to_u32: () =>\n    f32FiniteRange.map(e => ({ input: f32(e), expected: bitcastF32ToU32Comparator(e) })),\n\n  // i32,u32,f32 to vec2<f16>\n  u32_to_vec2_f16_inf_nan: () =>\n    u32RangeForF16Vec2FiniteInfNaN.map(e => ({\n      input: u32(e),\n      expected: bitcastU32ToVec2F16Comparator(e),\n    })),\n  u32_to_vec2_f16: () =>\n    u32RangeForF16Vec2Finite.map(e => ({\n      input: u32(e),\n      expected: bitcastU32ToVec2F16Comparator(e),\n    })),\n  i32_to_vec2_f16_inf_nan: () =>\n    i32RangeForF16Vec2FiniteInfNaN.map(e => ({\n      input: i32(e),\n      expected: bitcastI32ToVec2F16Comparator(e),\n    })),\n  i32_to_vec2_f16: () =>\n    i32RangeForF16Vec2Finite.map(e => ({\n      input: i32(e),\n      expected: bitcastI32ToVec2F16Comparator(e),\n    })),\n  f32_inf_nan_to_vec2_f16_inf_nan: () =>\n    f32RangeWithInfAndNaNForF16Vec2FiniteInfNaN.map(e => ({\n      input: f32(e),\n      expected: bitcastF32ToVec2F16Comparator(e),\n    })),\n  f32_to_vec2_f16: () =>\n    f32FiniteRangeForF16Vec2Finite.map(e => ({\n      input: f32(e),\n      expected: bitcastF32ToVec2F16Comparator(e),\n    })),\n\n  // vec2<i32>, vec2<u32>, vec2<f32> to vec4<f16>\n  vec2_i32_to_vec4_f16_inf_nan: () =>\n    slidingSlice(i32RangeForF16Vec2FiniteInfNaN, 2).map(e => ({\n      input: toVector(e, i32),\n      expected: bitcastVec2I32ToVec4F16Comparator(e),\n    })),\n  vec2_i32_to_vec4_f16: () =>\n    slidingSlice(i32RangeForF16Vec2Finite, 2).map(e => ({\n      input: toVector(e, i32),\n      expected: bitcastVec2I32ToVec4F16Comparator(e),\n    })),\n  vec2_u32_to_vec4_f16_inf_nan: () =>\n    slidingSlice(u32RangeForF16Vec2FiniteInfNaN, 2).map(e => ({\n      input: toVector(e, u32),\n      expected: bitcastVec2U32ToVec4F16Comparator(e),\n    })),\n  vec2_u32_to_vec4_f16: () =>\n    slidingSlice(u32RangeForF16Vec2Finite, 2).map(e => ({\n      input: toVector(e, u32),\n      expected: bitcastVec2U32ToVec4F16Comparator(e),\n    })),\n  vec2_f32_inf_nan_to_vec4_f16_inf_nan: () =>\n    slidingSlice(f32RangeWithInfAndNaNForF16Vec2FiniteInfNaN, 2).map(e => ({\n      input: toVector(e, f32),\n      expected: bitcastVec2F32ToVec4F16Comparator(e),\n    })),\n  vec2_f32_to_vec4_f16: () =>\n    slidingSlice(f32FiniteRangeForF16Vec2Finite, 2).map(e => ({\n      input: toVector(e, f32),\n      expected: bitcastVec2F32ToVec4F16Comparator(e),\n    })),\n\n  // vec2<f16> to i32, u32, f32\n  vec2_f16_to_u32: () =>\n    f16Vec2FiniteInU16x2.map(e => ({\n      input: u16x2ToVec2F16(e),\n      expected: bitcastVec2F16ToU32Comparator(e),\n    })),\n  vec2_f16_inf_nan_to_u32: () =>\n    f16Vec2FiniteInfNanInU16x2.map(e => ({\n      input: u16x2ToVec2F16(e),\n      expected: bitcastVec2F16ToU32Comparator(e),\n    })),\n  vec2_f16_to_i32: () =>\n    f16Vec2FiniteInU16x2.map(e => ({\n      input: u16x2ToVec2F16(e),\n      expected: bitcastVec2F16ToI32Comparator(e),\n    })),\n  vec2_f16_inf_nan_to_i32: () =>\n    f16Vec2FiniteInfNanInU16x2.map(e => ({\n      input: u16x2ToVec2F16(e),\n      expected: bitcastVec2F16ToI32Comparator(e),\n    })),\n  vec2_f16_to_f32_finite: () =>\n    f16Vec2FiniteInU16x2\n      .filter(u16x2 => isFiniteF32(reinterpretU32AsF32(u16x2ToU32(u16x2))))\n      .map(e => ({\n        input: u16x2ToVec2F16(e),\n        expected: bitcastVec2F16ToF32Comparator(e),\n      })),\n  vec2_f16_inf_nan_to_f32: () =>\n    f16Vec2FiniteInfNanInU16x2.map(e => ({\n      input: u16x2ToVec2F16(e),\n      expected: bitcastVec2F16ToF32Comparator(e),\n    })),\n\n  // vec4<f16> to vec2 of i32, u32, f32\n  vec4_f16_to_vec2_u32: () =>\n    f16Vec2FiniteInU16x4.map(e => ({\n      input: u16x4ToVec4F16(e),\n      expected: bitcastVec4F16ToVec2U32Comparator(e),\n    })),\n  vec4_f16_inf_nan_to_vec2_u32: () =>\n    f16Vec2FiniteInfNanInU16x4.map(e => ({\n      input: u16x4ToVec4F16(e),\n      expected: bitcastVec4F16ToVec2U32Comparator(e),\n    })),\n  vec4_f16_to_vec2_i32: () =>\n    f16Vec2FiniteInU16x4.map(e => ({\n      input: u16x4ToVec4F16(e),\n      expected: bitcastVec4F16ToVec2I32Comparator(e),\n    })),\n  vec4_f16_inf_nan_to_vec2_i32: () =>\n    f16Vec2FiniteInfNanInU16x4.map(e => ({\n      input: u16x4ToVec4F16(e),\n      expected: bitcastVec4F16ToVec2I32Comparator(e),\n    })),\n  vec4_f16_to_vec2_f32_finite: () =>\n    f16Vec2FiniteInU16x4\n      .filter(\n        u16x4 =>\n          isFiniteF32(reinterpretU32AsF32(u16x2ToU32(u16x4.slice(0, 2)))) &&\n          isFiniteF32(reinterpretU32AsF32(u16x2ToU32(u16x4.slice(2, 4))))\n      )\n      .map(e => ({\n        input: u16x4ToVec4F16(e),\n        expected: bitcastVec4F16ToVec2F32Comparator(e),\n      })),\n  vec4_f16_inf_nan_to_vec2_f32: () =>\n    f16Vec2FiniteInfNanInU16x4.map(e => ({\n      input: u16x4ToVec4F16(e),\n      expected: bitcastVec4F16ToVec2F32Comparator(e),\n    })),\n});\n\n/**\n * @returns a ShaderBuilder that generates a call to bitcast,\n * using appropriate destination type, which optionally can be\n * a WGSL type alias.\n */\nfunction bitcastBuilder(canonicalDestType: string, params: TestParams): ShaderBuilder {\n  const destType = params.vectorize\n    ? `vec${params.vectorize}<${canonicalDestType}>`\n    : canonicalDestType;\n\n  return builtinWithPredeclaration(\n    `bitcast<${destType}>`,\n    params.alias ? `alias myalias = ${destType};` : ''\n  );\n}\n\n// Identity cases\ng.test('i32_to_i32')\n  .specURL('https://www.w3.org/TR/WGSL/#bitcast-builtin')\n  .desc(`bitcast i32 to i32 tests`)\n  .params(u =>\n    u\n      .combine('inputSource', allInputSources)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n      .combine('alias', [false, true])\n  )\n  .fn(async t => {\n    const cases = await d.get('i32_to_i32');\n    await run(t, bitcastBuilder('i32', t.params), [TypeI32], TypeI32, t.params, cases);\n  });\n\ng.test('u32_to_u32')\n  .specURL('https://www.w3.org/TR/WGSL/#bitcast-builtin')\n  .desc(`bitcast u32 to u32 tests`)\n  .params(u =>\n    u\n      .combine('inputSource', allInputSources)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n      .combine('alias', [false, true])\n  )\n  .fn(async t => {\n    const cases = await d.get('u32_to_u32');\n    await run(t, bitcastBuilder('u32', t.params), [TypeU32], TypeU32, t.params, cases);\n  });\n\ng.test('f32_to_f32')\n  .specURL('https://www.w3.org/TR/WGSL/#bitcast-builtin')\n  .desc(`bitcast f32 to f32 tests`)\n  .params(u =>\n    u\n      .combine('inputSource', allInputSources)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n      .combine('alias', [false, true])\n  )\n  .fn(async t => {\n    const cases = await d.get(\n      // Infinities and NaNs are errors in const-eval.\n      t.params.inputSource === 'const' ? 'f32_to_f32' : 'f32_inf_nan_to_f32'\n    );\n    await run(t, bitcastBuilder('f32', t.params), [TypeF32], TypeF32, t.params, cases);\n  });\n\n// To i32 from u32, f32\ng.test('u32_to_i32')\n  .specURL('https://www.w3.org/TR/WGSL/#bitcast-builtin')\n  .desc(`bitcast u32 to i32 tests`)\n  .params(u =>\n    u\n      .combine('inputSource', allInputSources)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n      .combine('alias', [false, true])\n  )\n  .fn(async t => {\n    const cases = await d.get('u32_to_i32');\n    await run(t, bitcastBuilder('i32', t.params), [TypeU32], TypeI32, t.params, cases);\n  });\n\ng.test('f32_to_i32')\n  .specURL('https://www.w3.org/TR/WGSL/#bitcast-builtin')\n  .desc(`bitcast f32 to i32 tests`)\n  .params(u =>\n    u\n      .combine('inputSource', allInputSources)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n      .combine('alias', [false, true])\n  )\n  .fn(async t => {\n    const cases = await d.get(\n      // Infinities and NaNs are errors in const-eval.\n      t.params.inputSource === 'const' ? 'f32_to_i32' : 'f32_inf_nan_to_i32'\n    );\n    await run(t, bitcastBuilder('i32', t.params), [TypeF32], TypeI32, t.params, cases);\n  });\n\n// To u32 from i32, f32\ng.test('i32_to_u32')\n  .specURL('https://www.w3.org/TR/WGSL/#bitcast-builtin')\n  .desc(`bitcast i32 to u32 tests`)\n  .params(u =>\n    u\n      .combine('inputSource', allInputSources)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n      .combine('alias', [false, true])\n  )\n  .fn(async t => {\n    const cases = await d.get('i32_to_u32');\n    await run(t, bitcastBuilder('u32', t.params), [TypeI32], TypeU32, t.params, cases);\n  });\n\ng.test('f32_to_u32')\n  .specURL('https://www.w3.org/TR/WGSL/#bitcast-builtin')\n  .desc(`bitcast f32 to i32 tests`)\n  .params(u =>\n    u\n      .combine('inputSource', allInputSources)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n      .combine('alias', [false, true])\n  )\n  .fn(async t => {\n    const cases = await d.get(\n      // Infinities and NaNs are errors in const-eval.\n      t.params.inputSource === 'const' ? 'f32_to_u32' : 'f32_inf_nan_to_u32'\n    );\n    await run(t, bitcastBuilder('u32', t.params), [TypeF32], TypeU32, t.params, cases);\n  });\n\n// To f32 from i32, u32\ng.test('i32_to_f32')\n  .specURL('https://www.w3.org/TR/WGSL/#bitcast-builtin')\n  .desc(`bitcast i32 to f32 tests`)\n  .params(u =>\n    u\n      .combine('inputSource', allInputSources)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n      .combine('alias', [false, true])\n  )\n  .fn(async t => {\n    const cases = await d.get(\n      // Infinities and NaNs are errors in const-eval.\n      t.params.inputSource === 'const' ? 'i32_to_f32' : 'i32_to_f32_inf_nan'\n    );\n    await run(t, bitcastBuilder('f32', t.params), [TypeI32], TypeF32, t.params, cases);\n  });\n\ng.test('u32_to_f32')\n  .specURL('https://www.w3.org/TR/WGSL/#bitcast-builtin')\n  .desc(`bitcast u32 to f32 tests`)\n  .params(u =>\n    u\n      .combine('inputSource', allInputSources)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n      .combine('alias', [false, true])\n  )\n  .fn(async t => {\n    const cases = await d.get(\n      // Infinities and NaNs are errors in const-eval.\n      t.params.inputSource === 'const' ? 'u32_to_f32' : 'u32_to_f32_inf_nan'\n    );\n    await run(t, bitcastBuilder('f32', t.params), [TypeU32], TypeF32, t.params, cases);\n  });\n\n// 16 bit types\n\n// f16 cases\n\n// f16: Identity\ng.test('f16_to_f16')\n  .specURL('https://www.w3.org/TR/WGSL/#bitcast-builtin')\n  .desc(`bitcast f16 to f16 tests`)\n  .params(u =>\n    u\n      .combine('inputSource', allInputSources)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n      .combine('alias', [false, true])\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  })\n  .fn(async t => {\n    const cases = await d.get(\n      // Infinities and NaNs are errors in const-eval.\n      t.params.inputSource === 'const' ? 'f16_to_f16' : 'f16_inf_nan_to_f16'\n    );\n    await run(t, bitcastBuilder('f16', t.params), [TypeF16], TypeF16, t.params, cases);\n  });\n\n// f16: 32-bit scalar numeric to vec2<f16>\ng.test('i32_to_vec2h')\n  .specURL('https://www.w3.org/TR/WGSL/#bitcast-builtin')\n  .desc(`bitcast i32 to vec2h tests`)\n  .params(u => u.combine('inputSource', allInputSources).combine('alias', [false, true]))\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  })\n  .fn(async t => {\n    const cases = await d.get(\n      // Infinities and NaNs are errors in const-eval.\n      t.params.inputSource === 'const' ? 'i32_to_vec2_f16' : 'i32_to_vec2_f16_inf_nan'\n    );\n    await run(\n      t,\n      bitcastBuilder('vec2<f16>', t.params),\n      [TypeI32],\n      TypeVec(2, TypeF16),\n      t.params,\n      cases\n    );\n  });\n\ng.test('u32_to_vec2h')\n  .specURL('https://www.w3.org/TR/WGSL/#bitcast-builtin')\n  .desc(`bitcast u32 to vec2h tests`)\n  .params(u => u.combine('inputSource', allInputSources).combine('alias', [false, true]))\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  })\n  .fn(async t => {\n    const cases = await d.get(\n      // Infinities and NaNs are errors in const-eval.\n      t.params.inputSource === 'const' ? 'u32_to_vec2_f16' : 'u32_to_vec2_f16_inf_nan'\n    );\n    await run(\n      t,\n      bitcastBuilder('vec2<f16>', t.params),\n      [TypeU32],\n      TypeVec(2, TypeF16),\n      t.params,\n      cases\n    );\n  });\n\ng.test('f32_to_vec2h')\n  .specURL('https://www.w3.org/TR/WGSL/#bitcast-builtin')\n  .desc(`bitcast u32 to vec2h tests`)\n  .params(u => u.combine('inputSource', allInputSources).combine('alias', [false, true]))\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  })\n  .fn(async t => {\n    const cases = await d.get(\n      // Infinities and NaNs are errors in const-eval.\n      t.params.inputSource === 'const' ? 'f32_to_vec2_f16' : 'f32_inf_nan_to_vec2_f16_inf_nan'\n    );\n    await run(\n      t,\n      bitcastBuilder('vec2<f16>', t.params),\n      [TypeF32],\n      TypeVec(2, TypeF16),\n      t.params,\n      cases\n    );\n  });\n\n// f16: vec2<32-bit scalar numeric> to vec4<f16>\ng.test('vec2i_to_vec4h')\n  .specURL('https://www.w3.org/TR/WGSL/#bitcast-builtin')\n  .desc(`bitcast vec2i to vec4h tests`)\n  .params(u => u.combine('inputSource', allInputSources).combine('alias', [false, true]))\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  })\n  .fn(async t => {\n    const cases = await d.get(\n      // Infinities and NaNs are errors in const-eval.\n      t.params.inputSource === 'const' ? 'vec2_i32_to_vec4_f16' : 'vec2_i32_to_vec4_f16_inf_nan'\n    );\n    await run(\n      t,\n      bitcastBuilder('vec4<f16>', t.params),\n      [TypeVec(2, TypeI32)],\n      TypeVec(4, TypeF16),\n      t.params,\n      cases\n    );\n  });\n\ng.test('vec2u_to_vec4h')\n  .specURL('https://www.w3.org/TR/WGSL/#bitcast-builtin')\n  .desc(`bitcast vec2u to vec4h tests`)\n  .params(u => u.combine('inputSource', allInputSources).combine('alias', [false, true]))\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  })\n  .fn(async t => {\n    const cases = await d.get(\n      // Infinities and NaNs are errors in const-eval.\n      t.params.inputSource === 'const' ? 'vec2_u32_to_vec4_f16' : 'vec2_u32_to_vec4_f16_inf_nan'\n    );\n    await run(\n      t,\n      bitcastBuilder('vec4<f16>', t.params),\n      [TypeVec(2, TypeU32)],\n      TypeVec(4, TypeF16),\n      t.params,\n      cases\n    );\n  });\n\ng.test('vec2f_to_vec4h')\n  .specURL('https://www.w3.org/TR/WGSL/#bitcast-builtin')\n  .desc(`bitcast vec2f to vec2h tests`)\n  .params(u => u.combine('inputSource', allInputSources).combine('alias', [false, true]))\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  })\n  .fn(async t => {\n    const cases = await d.get(\n      // Infinities and NaNs are errors in const-eval.\n      t.params.inputSource === 'const'\n        ? 'vec2_f32_to_vec4_f16'\n        : 'vec2_f32_inf_nan_to_vec4_f16_inf_nan'\n    );\n    await run(\n      t,\n      bitcastBuilder('vec4<f16>', t.params),\n      [TypeVec(2, TypeF32)],\n      TypeVec(4, TypeF16),\n      t.params,\n      cases\n    );\n  });\n\n// f16: vec2<f16> to 32-bit scalar numeric\ng.test('vec2h_to_i32')\n  .specURL('https://www.w3.org/TR/WGSL/#bitcast-builtin')\n  .desc(`bitcast vec2h to i32 tests`)\n  .params(u => u.combine('inputSource', allInputSources).combine('alias', [false, true]))\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  })\n  .fn(async t => {\n    const cases = await d.get(\n      // Infinities and NaNs are errors in const-eval.\n      t.params.inputSource === 'const' ? 'vec2_f16_to_i32' : 'vec2_f16_inf_nan_to_i32'\n    );\n    await run(t, bitcastBuilder('i32', t.params), [TypeVec(2, TypeF16)], TypeI32, t.params, cases);\n  });\n\ng.test('vec2h_to_u32')\n  .specURL('https://www.w3.org/TR/WGSL/#bitcast-builtin')\n  .desc(`bitcast vec2h to u32 tests`)\n  .params(u => u.combine('inputSource', allInputSources).combine('alias', [false, true]))\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  })\n  .fn(async t => {\n    const cases = await d.get(\n      // Infinities and NaNs are errors in const-eval.\n      t.params.inputSource === 'const' ? 'vec2_f16_to_u32' : 'vec2_f16_inf_nan_to_u32'\n    );\n    await run(t, bitcastBuilder('u32', t.params), [TypeVec(2, TypeF16)], TypeU32, t.params, cases);\n  });\n\ng.test('vec2h_to_f32')\n  .specURL('https://www.w3.org/TR/WGSL/#bitcast-builtin')\n  .desc(`bitcast vec2h to f32 tests`)\n  .params(u => u.combine('inputSource', allInputSources).combine('alias', [false, true]))\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  })\n  .fn(async t => {\n    const cases = await d.get(\n      // Infinities and NaNs are errors in const-eval.\n      t.params.inputSource === 'const' ? 'vec2_f16_to_f32_finite' : 'vec2_f16_inf_nan_to_f32'\n    );\n    await run(t, bitcastBuilder('f32', t.params), [TypeVec(2, TypeF16)], TypeF32, t.params, cases);\n  });\n\n// f16: vec4<f16> to vec2<32-bit scalar numeric>\ng.test('vec4h_to_vec2i')\n  .specURL('https://www.w3.org/TR/WGSL/#bitcast-builtin')\n  .desc(`bitcast vec4h to vec2i tests`)\n  .params(u => u.combine('inputSource', allInputSources).combine('alias', [false, true]))\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  })\n  .fn(async t => {\n    const cases = await d.get(\n      // Infinities and NaNs are errors in const-eval.\n      t.params.inputSource === 'const' ? 'vec4_f16_to_vec2_i32' : 'vec4_f16_inf_nan_to_vec2_i32'\n    );\n    await run(\n      t,\n      bitcastBuilder('vec2<i32>', t.params),\n      [TypeVec(4, TypeF16)],\n      TypeVec(2, TypeI32),\n      t.params,\n      cases\n    );\n  });\n\ng.test('vec4h_to_vec2u')\n  .specURL('https://www.w3.org/TR/WGSL/#bitcast-builtin')\n  .desc(`bitcast vec4h to vec2u tests`)\n  .params(u => u.combine('inputSource', allInputSources).combine('alias', [false, true]))\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  })\n  .fn(async t => {\n    const cases = await d.get(\n      // Infinities and NaNs are errors in const-eval.\n      t.params.inputSource === 'const' ? 'vec4_f16_to_vec2_u32' : 'vec4_f16_inf_nan_to_vec2_u32'\n    );\n    await run(\n      t,\n      bitcastBuilder('vec2<u32>', t.params),\n      [TypeVec(4, TypeF16)],\n      TypeVec(2, TypeU32),\n      t.params,\n      cases\n    );\n  });\n\ng.test('vec4h_to_vec2f')\n  .specURL('https://www.w3.org/TR/WGSL/#bitcast-builtin')\n  .desc(`bitcast vec4h to vec2f tests`)\n  .params(u => u.combine('inputSource', allInputSources).combine('alias', [false, true]))\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  })\n  .fn(async t => {\n    const cases = await d.get(\n      // Infinities and NaNs are errors in const-eval.\n      t.params.inputSource === 'const'\n        ? 'vec4_f16_to_vec2_f32_finite'\n        : 'vec4_f16_inf_nan_to_vec2_f32'\n    );\n    await run(\n      t,\n      bitcastBuilder('vec2<f32>', t.params),\n      [TypeVec(4, TypeF16)],\n      TypeVec(2, TypeF32),\n      t.params,\n      cases\n    );\n  });\n"],"mappings":"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"}