{"version":3,"file":"dot.cache.js","names":["assert","kValue","FP","calculatePermutations","sparseVectorI32Range","sparseVectorI64Range","sparseVectorU32Range","vectorI32Range","vectorI64Range","vectorU32Range","generateVectorVectorToI32Cases","generateVectorVectorToI64Cases","generateVectorVectorToU32Cases","makeCaseCache","ai_dot","x","y","length","multiplications","map","_","idx","some","i64","isOOB","undefined","result","reduce","prev","curr","wentOOB","permutations","forEach","p","next","ci_dot","Math","imul","float_cases","flatMap","trait","N","nonConst","generateVectorPairToIntervalCases","vectorRange","sparseVectorRange","dotInterval","a","b","cases","abstract_int_vec2","abstract_int_vec3","abstract_int_vec4","i32_vec2","i32_vec3","i32_vec4","u32_vec2","u32_vec3","u32_vec4","d"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/dot.cache.ts"],"sourcesContent":["import { ROArrayArray } from '../../../../../../common/util/types.js';\nimport { assert } from '../../../../../../common/util/util.js';\nimport { kValue } from '../../../../../util/constants.js';\nimport { FP } from '../../../../../util/floating_point.js';\nimport {\n  calculatePermutations,\n  sparseVectorI32Range,\n  sparseVectorI64Range,\n  sparseVectorU32Range,\n  vectorI32Range,\n  vectorI64Range,\n  vectorU32Range,\n} from '../../../../../util/math.js';\nimport {\n  generateVectorVectorToI32Cases,\n  generateVectorVectorToI64Cases,\n  generateVectorVectorToU32Cases,\n} from '../../case.js';\nimport { makeCaseCache } from '../../case_cache.js';\n\nfunction ai_dot(x: bigint[], y: bigint[]): bigint | undefined {\n  assert(x.length === y.length, 'Cannot calculate dot for vectors of different lengths');\n  const multiplications = x.map((_, idx) => x[idx] * y[idx]);\n  if (multiplications.some(kValue.i64.isOOB)) return undefined;\n\n  const result = multiplications.reduce((prev, curr) => prev + curr);\n  if (kValue.i64.isOOB(result)) return undefined;\n\n  // The spec does not state the ordering of summation, so all the\n  // permutations are calculated and the intermediate results checked for\n  // going OOB. vec2 does not need permutations, since a + b === b + a.\n  // All the end results should be the same regardless of the order if the\n  // intermediate additions stay inbounds.\n  if (x.length !== 2) {\n    let wentOOB: boolean = false;\n    const permutations: ROArrayArray<bigint> = calculatePermutations(multiplications);\n    permutations.forEach(p => {\n      if (!wentOOB) {\n        p.reduce((prev, curr) => {\n          const next = prev + curr;\n          if (kValue.i64.isOOB(next)) {\n            wentOOB = true;\n          }\n          return next;\n        });\n      }\n    });\n\n    if (wentOOB) return undefined;\n  }\n\n  return !kValue.i64.isOOB(result) ? result : undefined;\n}\n\nfunction ci_dot(x: number[], y: number[]): number | undefined {\n  assert(x.length === y.length, 'Cannot calculate dot for vectors of different lengths');\n  return x.reduce((prev, _, idx) => prev + Math.imul(x[idx], y[idx]), 0);\n}\n\n// Cases: [f32|f16|abstract]_vecN_[non_]const\nconst float_cases = (['f32', 'f16', 'abstract'] as const)\n  .flatMap(trait =>\n    ([2, 3, 4] as const).flatMap(N =>\n      ([true, false] as const).map(nonConst => ({\n        [`${trait === 'abstract' ? 'abstract_float' : trait}_vec${N}_${\n          nonConst ? 'non_const' : 'const'\n        }`]: () => {\n          // Emit an empty array for not const abstract float, since they will never be run\n          if (trait === 'abstract' && nonConst) {\n            return [];\n          }\n          // vec3 and vec4 require calculating all possible permutations, so their runtime is much\n          // longer per test, so only using sparse vectors for them.\n          return FP[trait].generateVectorPairToIntervalCases(\n            N === 2 ? FP[trait].vectorRange(2) : FP[trait].sparseVectorRange(N),\n            N === 2 ? FP[trait].vectorRange(2) : FP[trait].sparseVectorRange(N),\n            nonConst ? 'unfiltered' : 'finite',\n            // dot has an inherited accuracy, so abstract is only expected to be as accurate as f32\n            FP[trait !== 'abstract' ? trait : 'f32'].dotInterval\n          );\n        },\n      }))\n    )\n  )\n  .reduce((a, b) => ({ ...a, ...b }), {});\n\nconst cases = {\n  ...float_cases,\n  abstract_int_vec2: () => {\n    return generateVectorVectorToI64Cases(vectorI64Range(2), vectorI64Range(2), ai_dot);\n  },\n  abstract_int_vec3: () => {\n    return generateVectorVectorToI64Cases(sparseVectorI64Range(3), sparseVectorI64Range(3), ai_dot);\n  },\n  abstract_int_vec4: () => {\n    return generateVectorVectorToI64Cases(sparseVectorI64Range(4), sparseVectorI64Range(4), ai_dot);\n  },\n  i32_vec2: () => {\n    return generateVectorVectorToI32Cases(vectorI32Range(2), vectorI32Range(2), ci_dot);\n  },\n  i32_vec3: () => {\n    return generateVectorVectorToI32Cases(sparseVectorI32Range(3), sparseVectorI32Range(3), ci_dot);\n  },\n  i32_vec4: () => {\n    return generateVectorVectorToI32Cases(sparseVectorI32Range(4), sparseVectorI32Range(4), ci_dot);\n  },\n  u32_vec2: () => {\n    return generateVectorVectorToU32Cases(vectorU32Range(2), vectorU32Range(2), ci_dot);\n  },\n  u32_vec3: () => {\n    return generateVectorVectorToU32Cases(sparseVectorU32Range(3), sparseVectorU32Range(3), ci_dot);\n  },\n  u32_vec4: () => {\n    return generateVectorVectorToU32Cases(sparseVectorU32Range(4), sparseVectorU32Range(4), ci_dot);\n  },\n};\n\nexport const d = makeCaseCache('dot', cases);\n"],"mappings":"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"}