{"version":3,"file":"textureGatherCompare.spec.js","names":["description","makeTestGroup","GPUTest","generateCoordBoundaries","generateOffsets","g","test","specURL","desc","paramsSubcasesOnly","u","combine","unimplemented"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/textureGatherCompare.spec.ts"],"sourcesContent":["export const description = `\nExecution tests for the 'textureGatherCompare' builtin function\n\nA texture gather compare operation performs a depth comparison on four texels in a depth texture and collects the results into a single vector, as follows:\n * Find the four texels that would be used in a depth sampling operation with linear filtering, from mip level 0:\n   - Use the specified coordinate, array index (when present), and offset (when present).\n   - The texels are adjacent, forming a square, when considering their texture space coordinates (u,v).\n   - Selected texels at the texture edge, cube face edge, or cube corners are handled as in ordinary texture sampling.\n * For each texel, perform a comparison against the depth reference value, yielding a 0.0 or 1.0 value, as controlled by the comparison sampler parameters.\n * Yield the four-component vector where the components are the comparison results with the texels with relative texel coordinates as follows:\n\n   Result component  Relative texel coordinate\n    x                (umin,vmax)\n    y                (umax,vmax)\n    z                (umax,vmin)\n    w                (umin,vmin)\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\n\nimport { generateCoordBoundaries, generateOffsets } from './utils.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('array_2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturegathercompare')\n  .desc(\n    `\nC: i32, u32\n\nfn textureGatherCompare(t: texture_depth_2d_array, s: sampler_comparison, coords: vec2<f32>, array_index: C, depth_ref: f32) -> vec4<f32>\nfn textureGatherCompare(t: texture_depth_2d_array, s: sampler_comparison, coords: vec2<f32>, array_index: C, depth_ref: f32, offset: vec2<i32>) -> vec4<f32>\n\nParameters:\n * t: The depth texture to read from\n * s: The sampler_comparison\n * coords: The texture coordinates\n * array_index: The 0-based array index.\n * depth_ref: The reference value to compare the sampled depth value against\n * offset:\n    - The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n      This offset is applied before applying any texture wrapping modes.\n    - The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    - Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'])\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('C_value', [-1, 0, 1, 2, 3, 4])\n      .combine('coords', generateCoordBoundaries(2))\n      .combine('depth_ref', [-1 /* smaller ref */, 0 /* equal ref */, 1 /* larger ref */] as const)\n      .combine('offset', generateOffsets(2))\n  )\n  .unimplemented();\n\ng.test('array_3d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturegathercompare')\n  .desc(\n    `\nC: i32, u32\n\nfn textureGatherCompare(t: texture_depth_cube_array, s: sampler_comparison, coords: vec3<f32>, array_index: C, depth_ref: f32) -> vec4<f32>\n\nParameters:\n * t: The depth texture to read from\n * s: The sampler_comparison\n * coords: The texture coordinates\n * array_index: The 0-based array index.\n * depth_ref: The reference value to compare the sampled depth value against\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'])\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('C_value', [-1, 0, 1, 2, 3, 4])\n      .combine('coords', generateCoordBoundaries(3))\n      .combine('depth_ref', [-1 /* smaller ref */, 0 /* equal ref */, 1 /* larger ref */] as const)\n  )\n  .unimplemented();\n\ng.test('sampled_array_2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturegathercompare')\n  .desc(\n    `\nfn textureGatherCompare(t: texture_depth_2d, s: sampler_comparison, coords: vec2<f32>, depth_ref: f32) -> vec4<f32>\nfn textureGatherCompare(t: texture_depth_2d, s: sampler_comparison, coords: vec2<f32>, depth_ref: f32, offset: vec2<i32>) -> vec4<f32>\n\nParameters:\n * t: The depth texture to read from\n * s: The sampler_comparison\n * coords: The texture coordinates\n * depth_ref: The reference value to compare the sampled depth value against\n * offset:\n    - The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n      This offset is applied before applying any texture wrapping modes.\n    - The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    - Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'])\n      .combine('coords', generateCoordBoundaries(2))\n      .combine('depth_ref', [-1 /* smaller ref */, 0 /* equal ref */, 1 /* larger ref */] as const)\n      .combine('offset', generateOffsets(2))\n  )\n  .unimplemented();\n\ng.test('sampled_array_3d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturegathercompare')\n  .desc(\n    `\nfn textureGatherCompare(t: texture_depth_cube, s: sampler_comparison, coords: vec3<f32>, depth_ref: f32) -> vec4<f32>\n\nParameters:\n * t: The depth texture to read from\n * s: The sampler_comparison\n * coords: The texture coordinates\n * depth_ref: The reference value to compare the sampled depth value against\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'])\n      .combine('coords', generateCoordBoundaries(3))\n      .combine('depth_ref', [-1 /* smaller ref */, 0 /* equal ref */, 1 /* larger ref */] as const)\n  )\n  .unimplemented();\n"],"mappings":"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"}