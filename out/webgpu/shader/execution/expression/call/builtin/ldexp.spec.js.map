{"version":3,"file":"ldexp.spec.js","names":["description","makeTestGroup","GPUTest","i32","TypeF32","TypeI32","FP","biasedRange","fullF32Range","fullI32Range","quantizeToI32","makeCaseCache","allInputSources","run","builtin","g","makeCaseF32","e1","e2","f32","quantize","expected","ldexpInterval","input","scalarBuilder","d","f32_non_const","cases","forEach","push","f32_const","isFinite","Math","pow","test","specURL","desc","params","u","combine","undefined","unimplemented","fn","t","get","inputSource"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/ldexp.spec.ts"],"sourcesContent":["export const description = `\nExecution tests for the 'ldexp' builtin function\n\nS is AbstractFloat, f32, f16\nT is S or vecN<S>\n\nK is AbstractInt, i32\nI is K or vecN<K>, where\n  I is a scalar if T is a scalar, or a vector when T is a vector\n\n@const fn ldexp(e1: T ,e2: I ) -> T\nReturns e1 * 2^e2. Component-wise when T is a vector.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { i32, TypeF32, TypeI32 } from '../../../../../util/conversion.js';\nimport { FP } from '../../../../../util/floating_point.js';\nimport {\n  biasedRange,\n  fullF32Range,\n  fullI32Range,\n  quantizeToI32,\n} from '../../../../../util/math.js';\nimport { makeCaseCache } from '../../case_cache.js';\nimport { allInputSources, Case, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\nfunction makeCaseF32(e1: number, e2: number): Case {\n  // Due to the heterogeneous types of the params to ldexp (f32 & i32),\n  // makeBinaryToF32IntervalCase cannot be used here.\n  e1 = FP.f32.quantize(e1);\n  e2 = quantizeToI32(e2);\n  const expected = FP.f32.ldexpInterval(e1, e2);\n  return { input: [FP.f32.scalarBuilder(e1), i32(e2)], expected };\n}\n\nexport const d = makeCaseCache('ldexp', {\n  f32_non_const: () => {\n    const cases: Array<Case> = [];\n    fullF32Range().forEach(e1 => {\n      fullI32Range().forEach(e2 => {\n        cases.push(makeCaseF32(e1, e2));\n      });\n    });\n    return cases;\n  },\n  f32_const: () => {\n    const cases: Array<Case> = [];\n    fullF32Range().forEach(e1 => {\n      biasedRange(-128, 128, 10).forEach(e2 => {\n        if (FP.f32.isFinite(e1 * Math.pow(2, e2))) {\n          cases.push(makeCaseF32(e1, e2));\n        }\n      });\n    });\n    return cases;\n  },\n});\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\n`\n  )\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('f32')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f32 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = await d.get(t.params.inputSource === 'const' ? 'f32_const' : 'f32_non_const');\n    await run(t, builtin('ldexp'), [TypeF32, TypeI32], TypeF32, t.params, cases);\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f16 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n"],"mappings":"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"}