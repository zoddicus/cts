{"version":3,"file":"refract.cache.js","names":["toVector","FP","selectNCases","makeCaseCache","makeCase","argumentKind","parameterKind","i","s","r","check","fp","map","quantize","vectors","refractInterval","some","e","isFinite","undefined","input","scalarBuilder","expected","generateCases","param_is","param_ss","param_rs","flatMap","filter","c","cases","trait","dim","nonConst","sparseVectorRange","sparseScalarRange","reduce","a","b","d"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/refract.cache.ts"],"sourcesContent":["import { ROArrayArray } from '../../../../../../common/util/types.js';\nimport { toVector } from '../../../../../util/conversion.js';\nimport { FP, FPKind } from '../../../../../util/floating_point.js';\nimport { Case, selectNCases } from '../../case.js';\nimport { makeCaseCache } from '../../case_cache.js';\nimport { IntervalFilter } from '../../interval_filter.js';\n\n// Using a bespoke implementation of make*Case and generate*Cases here\n// since refract is the only builtin with the API signature\n// (vec, vec, scalar) -> vec\n\n/**\n * @returns a Case for `refract`\n * @param argumentKind what kind of floating point numbers being operated on\n * @param parameterKind what kind of floating point operation should be performed,\n *                should be the same as argumentKind, except for abstract\n * @param i the `i` param for the case\n * @param s the `s` param for the case\n * @param r the `r` param for the case\n * @param check what interval checking to apply\n * */\nfunction makeCase(\n  argumentKind: FPKind,\n  parameterKind: FPKind,\n  i: readonly number[],\n  s: readonly number[],\n  r: number,\n  check: IntervalFilter\n): Case | undefined {\n  const fp = FP[argumentKind];\n  i = i.map(fp.quantize);\n  s = s.map(fp.quantize);\n  r = fp.quantize(r);\n\n  const vectors = FP[parameterKind].refractInterval(i, s, r);\n  if (check === 'finite' && vectors.some(e => !e.isFinite())) {\n    return undefined;\n  }\n\n  return {\n    input: [toVector(i, fp.scalarBuilder), toVector(s, fp.scalarBuilder), fp.scalarBuilder(r)],\n    expected: vectors,\n  };\n}\n\n/**\n * @returns an array of Cases for `refract`\n * @param argumentKind what kind of floating point numbers being operated on\n * @param parameterKind what kind of floating point operation should be performed,\n *                should be the same as argumentKind, except for abstract\n * @param param_is array of inputs to try for the `i` param\n * @param param_ss array of inputs to try for the `s` param\n * @param param_rs array of inputs to try for the `r` param\n * @param check what interval checking to apply\n */\nfunction generateCases(\n  argumentKind: FPKind,\n  parameterKind: FPKind,\n  param_is: ROArrayArray<number>,\n  param_ss: ROArrayArray<number>,\n  param_rs: readonly number[],\n  check: IntervalFilter\n): Case[] {\n  // Cannot use `cartesianProduct` here due to heterogeneous param types\n  return param_is\n    .flatMap(i => {\n      return param_ss.flatMap(s => {\n        return param_rs.map(r => {\n          return makeCase(argumentKind, parameterKind, i, s, r, check);\n        });\n      });\n    })\n    .filter((c): c is Case => c !== undefined);\n}\n\n// Cases: [f32|f16|abstract]_vecN_[non_]const\nconst cases = (['f32', 'f16', 'abstract'] as const)\n  .flatMap(trait =>\n    ([2, 3, 4] as const).flatMap(dim =>\n      ([true, false] as const).map(nonConst => ({\n        [`${trait}_vec${dim}_${nonConst ? 'non_const' : 'const'}`]: () => {\n          if (trait === 'abstract' && nonConst) {\n            return [];\n          }\n          if (trait !== 'abstract') {\n            return generateCases(\n              trait,\n              trait,\n              FP[trait].sparseVectorRange(dim),\n              FP[trait].sparseVectorRange(dim),\n              FP[trait].sparseScalarRange(),\n              nonConst ? 'unfiltered' : 'finite'\n            );\n          } else {\n            // Restricting the number of cases, because a vector of abstract floats needs to be returned, which is costly.\n            return selectNCases(\n              'faceForward',\n              20,\n              generateCases(\n                trait,\n                // refract has an inherited accuracy, so is only expected to be as accurate as f32\n                'f32',\n                FP[trait].sparseVectorRange(dim),\n                FP[trait].sparseVectorRange(dim),\n                FP[trait].sparseScalarRange(),\n                nonConst ? 'unfiltered' : 'finite'\n              )\n            );\n          }\n        },\n      }))\n    )\n  )\n  .reduce((a, b) => ({ ...a, ...b }), {});\n\nexport const d = makeCaseCache('refract', cases);\n"],"mappings":"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"}