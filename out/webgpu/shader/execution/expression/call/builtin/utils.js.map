{"version":3,"file":"utils.js","names":["assert","isBoundaryNegative","boundary","endsWith","generateCoordBoundaries","numDimensions","ret","Error","name","i","j","k","push","generateOffsets","undefined","val","v"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/utils.ts"],"sourcesContent":["import { assert } from '../../../../../../common/util/util.js';\n\n/* Valid types of Boundaries */\nexport type Boundary =\n  | 'in-bounds'\n  | 'x-min-wrap'\n  | 'x-min-boundary'\n  | 'x-max-wrap'\n  | 'x-max-boundary'\n  | 'y-min-wrap'\n  | 'y-min-boundary'\n  | 'y-max-wrap'\n  | 'y-max-boundary'\n  | 'z-min-wrap'\n  | 'z-min-boundary'\n  | 'z-max-wrap'\n  | 'z-max-boundary';\n\nexport function isBoundaryNegative(boundary: Boundary) {\n  return boundary.endsWith('min-wrap');\n}\n\n/**\n * Generates the boundary entries for the given number of dimensions\n *\n * @param numDimensions: The number of dimensions to generate for\n * @returns an array of generated coord boundaries\n */\nexport function generateCoordBoundaries(numDimensions: number): Boundary[] {\n  const ret: Boundary[] = ['in-bounds'];\n\n  if (numDimensions < 1 || numDimensions > 3) {\n    throw new Error(`invalid numDimensions: ${numDimensions}`);\n  }\n\n  const name = 'xyz';\n  for (let i = 0; i < numDimensions; ++i) {\n    for (const j of ['min', 'max']) {\n      for (const k of ['wrap', 'boundary']) {\n        ret.push(`${name[i]}-${j}-${k}` as Boundary);\n      }\n    }\n  }\n\n  return ret;\n}\n\n/**\n * Generates a set of offset values to attempt in the range [-8, 7].\n *\n * @param numDimensions: The number of dimensions to generate for\n * @return an array of generated offset values\n */\nexport function generateOffsets(numDimensions: number) {\n  assert(numDimensions >= 2 && numDimensions <= 3);\n  const ret: Array<undefined | Array<number>> = [undefined];\n  for (const val of [-8, 0, 1, 7]) {\n    const v = [];\n    for (let i = 0; i < numDimensions; ++i) {\n      v.push(val);\n    }\n    ret.push(v);\n  }\n  return ret;\n}\n"],"mappings":";;GAAA,SAASA,MAAM,QAAQ,uCAAuC,CAAC,CAE/D;;;;;;;;;;;;;;;;AAgBA,OAAO,SAASC,kBAAkBA,CAACC,QAAkB,EAAE;EACrD,OAAOA,QAAQ,CAACC,QAAQ,CAAC,UAAU,CAAC;AACtC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,uBAAuBA,CAACC,aAAqB,EAAc;EACzE,MAAMC,GAAe,GAAG,CAAC,WAAW,CAAC;;EAErC,IAAID,aAAa,GAAG,CAAC,IAAIA,aAAa,GAAG,CAAC,EAAE;IAC1C,MAAM,IAAIE,KAAK,CAAE,0BAAyBF,aAAc,EAAC,CAAC;EAC5D;;EAEA,MAAMG,IAAI,GAAG,KAAK;EAClB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,aAAa,EAAE,EAAEI,CAAC,EAAE;IACtC,KAAK,MAAMC,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,EAAE;MAC9B,KAAK,MAAMC,CAAC,IAAI,CAAC,MAAM,EAAE,UAAU,CAAC,EAAE;QACpCL,GAAG,CAACM,IAAI,CAAE,GAAEJ,IAAI,CAACC,CAAC,CAAE,IAAGC,CAAE,IAAGC,CAAE,EAAa,CAAC;MAC9C;IACF;EACF;;EAEA,OAAOL,GAAG;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASO,eAAeA,CAACR,aAAqB,EAAE;EACrDL,MAAM,CAACK,aAAa,IAAI,CAAC,IAAIA,aAAa,IAAI,CAAC,CAAC;EAChD,MAAMC,GAAqC,GAAG,CAACQ,SAAS,CAAC;EACzD,KAAK,MAAMC,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE;IAC/B,MAAMC,CAAC,GAAG,EAAE;IACZ,KAAK,IAAIP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,aAAa,EAAE,EAAEI,CAAC,EAAE;MACtCO,CAAC,CAACJ,IAAI,CAACG,GAAG,CAAC;IACb;IACAT,GAAG,CAACM,IAAI,CAACI,CAAC,CAAC;EACb;EACA,OAAOV,GAAG;AACZ"}