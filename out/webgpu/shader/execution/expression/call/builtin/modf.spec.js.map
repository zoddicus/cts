{"version":3,"file":"modf.spec.js","names":["description","makeTestGroup","GPUTest","toVector","TypeF32","TypeVec","FP","fullF32Range","vectorF32Range","makeCaseCache","allInputSources","basicExpressionBuilder","run","g","wholeBuilder","value","fractBuilder","makeVectorCaseFract","kind","v","fp","map","quantize","fs","e","modfInterval","fract","input","scalarBuilder","expected","makeVectorCaseWhole","ws","whole","d","f32_fract","makeCase","n","f32","f32_whole","f32_vec2_fract","bind","f32_vec2_whole","f32_vec3_fract","f32_vec3_whole","f32_vec4_fract","f32_vec4_whole","test","specURL","desc","params","u","combine","fn","t","cases","get","unimplemented"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/modf.spec.ts"],"sourcesContent":["export const description = `\nExecution tests for the 'modf' builtin function\n\nT is f32 or f16\n@const fn modf(e:T) -> result_struct\nSplits |e| into fractional and whole number parts.\nThe whole part is (|e| % 1.0), and the fractional part is |e| minus the whole part.\nReturns the result_struct for the given type.\n\nS is f32 or f16\nT is vecN<S>\n@const fn modf(e:T) -> result_struct\nSplits the components of |e| into fractional and whole number parts.\nThe |i|'th component of the whole and fractional parts equal the whole and fractional parts of modf(e[i]).\nReturns the result_struct for the given type.\n\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { toVector, TypeF32, TypeVec } from '../../../../../util/conversion.js';\nimport { FP, FPKind } from '../../../../../util/floating_point.js';\nimport { fullF32Range, vectorF32Range } from '../../../../../util/math.js';\nimport { makeCaseCache } from '../../case_cache.js';\nimport {\n  allInputSources,\n  basicExpressionBuilder,\n  Case,\n  run,\n  ShaderBuilder,\n} from '../../expression.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n/** @returns an ShaderBuilder that evaluates modf and returns .whole from the result structure */\nfunction wholeBuilder(): ShaderBuilder {\n  return basicExpressionBuilder(value => `modf(${value}).whole`);\n}\n\n/** @returns an ShaderBuilder that evaluates modf and returns .fract from the result structure */\nfunction fractBuilder(): ShaderBuilder {\n  return basicExpressionBuilder(value => `modf(${value}).fract`);\n}\n\n/** @returns a fract Case for a given vector input */\nfunction makeVectorCaseFract(kind: FPKind, v: number[]): Case {\n  const fp = FP[kind];\n  v = v.map(fp.quantize);\n  const fs = v.map(e => {\n    return fp.modfInterval(e).fract;\n  });\n\n  return { input: toVector(v, fp.scalarBuilder), expected: fs };\n}\n\n/** @returns a whole Case for a given vector input */\nfunction makeVectorCaseWhole(kind: FPKind, v: number[]): Case {\n  const fp = FP[kind];\n  v = v.map(fp.quantize);\n  const ws = v.map(e => {\n    return fp.modfInterval(e).whole;\n  });\n\n  return { input: toVector(v, fp.scalarBuilder), expected: ws };\n}\n\nexport const d = makeCaseCache('modf', {\n  f32_fract: () => {\n    const makeCase = (n: number): Case => {\n      n = FP.f32.quantize(n);\n      return { input: FP.f32.scalarBuilder(n), expected: FP.f32.modfInterval(n).fract };\n    };\n    return fullF32Range().map(makeCase);\n  },\n  f32_whole: () => {\n    const makeCase = (n: number): Case => {\n      n = FP.f32.quantize(n);\n      return { input: FP.f32.scalarBuilder(n), expected: FP.f32.modfInterval(n).whole };\n    };\n    return fullF32Range().map(makeCase);\n  },\n  f32_vec2_fract: () => {\n    return vectorF32Range(2).map(makeVectorCaseFract.bind(null, 'f32'));\n  },\n  f32_vec2_whole: () => {\n    return vectorF32Range(2).map(makeVectorCaseWhole.bind(null, 'f32'));\n  },\n  f32_vec3_fract: () => {\n    return vectorF32Range(3).map(makeVectorCaseFract.bind(null, 'f32'));\n  },\n  f32_vec3_whole: () => {\n    return vectorF32Range(3).map(makeVectorCaseWhole.bind(null, 'f32'));\n  },\n  f32_vec4_fract: () => {\n    return vectorF32Range(4).map(makeVectorCaseFract.bind(null, 'f32'));\n  },\n  f32_vec4_whole: () => {\n    return vectorF32Range(4).map(makeVectorCaseWhole.bind(null, 'f32'));\n  },\n});\n\ng.test('f32_fract')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is f32\n\nstruct __modf_result_f32 {\n  fract : f32, // fractional part\n  whole : f32  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases = await d.get('f32_fract');\n    await run(t, fractBuilder(), [TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('f32_whole')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is f32\n\nstruct __modf_result_f32 {\n  fract : f32, // fractional part\n  whole : f32  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases = await d.get('f32_whole');\n    await run(t, wholeBuilder(), [TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('f32_vec2_fract')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is vec2<f32>\n\nstruct __modf_result_vec2_f32 {\n  fract : vec2<f32>, // fractional part\n  whole : vec2<f32>  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases = await d.get('f32_vec2_fract');\n    await run(t, fractBuilder(), [TypeVec(2, TypeF32)], TypeVec(2, TypeF32), t.params, cases);\n  });\n\ng.test('f32_vec2_whole')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is vec2<f32>\n\nstruct __modf_result_vec2_f32 {\n  fract : vec2<f32>, // fractional part\n  whole : vec2<f32>  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases = await d.get('f32_vec2_whole');\n    await run(t, wholeBuilder(), [TypeVec(2, TypeF32)], TypeVec(2, TypeF32), t.params, cases);\n  });\n\ng.test('f32_vec3_fract')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is vec3<f32>\n\nstruct __modf_result_vec3_f32 {\n  fract : vec3<f32>, // fractional part\n  whole : vec3<f32>  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases = await d.get('f32_vec3_fract');\n    await run(t, fractBuilder(), [TypeVec(3, TypeF32)], TypeVec(3, TypeF32), t.params, cases);\n  });\n\ng.test('f32_vec3_whole')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is vec3<f32>\n\nstruct __modf_result_vec3_f32 {\n  fract : vec3<f32>, // fractional part\n  whole : vec3<f32>  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases = await d.get('f32_vec3_whole');\n    await run(t, wholeBuilder(), [TypeVec(3, TypeF32)], TypeVec(3, TypeF32), t.params, cases);\n  });\n\ng.test('f32_vec4_fract')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is vec4<f32>\n\nstruct __modf_result_vec4_f32 {\n  fract : vec4<f32>, // fractional part\n  whole : vec4<f32>  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases = await d.get('f32_vec4_fract');\n    await run(t, fractBuilder(), [TypeVec(4, TypeF32)], TypeVec(4, TypeF32), t.params, cases);\n  });\n\ng.test('f32_vec4_whole')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is vec4<f32>\n\nstruct __modf_result_vec4_f32 {\n  fract : vec4<f32>, // fractional part\n  whole : vec4<f32>  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases = await d.get('f32_vec4_whole');\n    await run(t, wholeBuilder(), [TypeVec(4, TypeF32)], TypeVec(4, TypeF32), t.params, cases);\n  });\n\ng.test('f16_fract')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is f16\n\nstruct __modf_result_f16 {\n  fract : f16, // fractional part\n  whole : f16  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .unimplemented();\n\ng.test('f16_whole')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is f16\n\nstruct __modf_result_f16 {\n  fract : f16, // fractional part\n  whole : f16  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .unimplemented();\n\ng.test('f16_vec2_fract')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is vec2<f16>\n\nstruct __modf_result_vec2_f16 {\n  fract : vec2<f16>, // fractional part\n  whole : vec2<f16>  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .unimplemented();\n\ng.test('f16_vec2_whole')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is vec2<f16>\n\nstruct __modf_result_vec2_f16 {\n  fract : vec2<f16>, // fractional part\n  whole : vec2<f16>  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .unimplemented();\n\ng.test('f16_vec3_fract')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is vec3<f16>\n\nstruct __modf_result_vec3_f16 {\n  fract : vec3<f16>, // fractional part\n  whole : vec3<f16>  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .unimplemented();\n\ng.test('f16_vec3_whole')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is vec3<f16>\n\nstruct __modf_result_vec3_f16 {\n  fract : vec3<f16>, // fractional part\n  whole : vec3<f16>  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .unimplemented();\n\ng.test('f16_vec4_fract')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is vec4<f16>\n\nstruct __modf_result_vec4_f16 {\n  fract : vec4<f16>, // fractional part\n  whole : vec4<f16>  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .unimplemented();\n\ng.test('f16_vec4_whole')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is vec4<f16>\n\nstruct __modf_result_vec4_f16 {\n  fract : vec4<f16>, // fractional part\n  whole : vec4<f16>  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .unimplemented();\n"],"mappings":"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"}