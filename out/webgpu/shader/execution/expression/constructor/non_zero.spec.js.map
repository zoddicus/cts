{"version":3,"file":"non_zero.spec.js","names":["description","makeTestGroup","GPUTest","Type","vec2","vec3","FP","allInputSources","basicExpressionBuilder","run","g","isMinOrMax","v","valueFor","kind","constants","negative","min","positive","max","test","specURL","desc","params","u","combine","beforeAllSubcases","t","type","selectDeviceOrSkipTestCase","skipIf","value","fn","ops","input","create","expected","elementType","vectorType","vec","width","elements","infer_type","i","push","join","map","e","elementValue","nextValue","args","c","signature","matrixType","mat","columns","rows","column","row","columnType","columnVectors","columnElements","arrayType","array","length","unimplemented"],"sources":["../../../../../../src/webgpu/shader/execution/expression/constructor/non_zero.spec.ts"],"sourcesContent":["export const description = `\nExecution Tests for value constructors from components\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../gpu_test.js';\nimport { Type, Value, VectorValue, vec2, vec3 } from '../../../../util/conversion.js';\nimport { FP } from '../../../../util/floating_point.js';\nimport { allInputSources, basicExpressionBuilder, run } from '../expression.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n/** @returns true if 'v' is 'min' or 'max' */\nfunction isMinOrMax(v: number | 'min' | 'max') {\n  return v === 'min' || v === 'max';\n}\n\n/**\n * @returns the lowest finite value for 'kind' if 'v' is 'min',\n *          the highest finite value for 'kind' if 'v' is 'max',\n *          otherwise returns 'v'\n */\nfunction valueFor(v: number | 'min' | 'max', kind: 'bool' | 'i32' | 'u32' | 'f32' | 'f16') {\n  if (!isMinOrMax(v)) {\n    return v as number;\n  }\n  switch (kind) {\n    case 'bool':\n      return v === 'min' ? 0 : 1;\n    case 'i32':\n      return v === 'min' ? -0x80000000 : 0x7fffffff;\n    case 'u32':\n      return v === 'min' ? 0 : 0xffffffff;\n    case 'f32':\n      return v === 'min' ? FP['f32'].constants().negative.min : FP['f32'].constants().positive.max;\n    case 'f16':\n      return v === 'min' ? FP['f16'].constants().negative.min : FP['f16'].constants().positive.max;\n  }\n}\n\ng.test('scalar_identity')\n  .specURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function')\n  .desc(`Test that a scalar constructed from a value of the same type produces the expected value`)\n  .params(u =>\n    u\n      .combine('inputSource', allInputSources)\n      .combine('type', ['bool', 'i32', 'u32', 'f32', 'f16'] as const)\n      .combine('value', ['min', 'max', 1, 2, 5, 100] as const)\n  )\n  .beforeAllSubcases(t => {\n    if (t.params.type === 'f16') {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n    t.skipIf(t.params.type === 'bool' && !isMinOrMax(t.params.value));\n  })\n  .fn(async t => {\n    const type = Type[t.params.type];\n    const value = valueFor(t.params.value, t.params.type);\n    await run(\n      t,\n      basicExpressionBuilder(ops => `${type}(${ops[0]})`),\n      [type],\n      type,\n      t.params,\n      [{ input: [type.create(value)], expected: type.create(value) }]\n    );\n  });\n\ng.test('vector_identity')\n  .specURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function')\n  .desc(`Test that a vector constructed from a value of the same type produces the expected value`)\n  .params(u =>\n    u\n      .combine('inputSource', allInputSources)\n      .combine('type', ['bool', 'i32', 'u32', 'f32', 'f16'] as const)\n      .combine('width', [2, 3, 4] as const)\n      .combine('infer_type', [false, true] as const)\n  )\n  .beforeAllSubcases(t => {\n    if (t.params.type === 'f16') {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(async t => {\n    const elementType = Type[t.params.type];\n    const vectorType = Type.vec(t.params.width, elementType);\n    const elements: number[] = [];\n    const fn = t.params.infer_type ? `vec${t.params.width}` : `${vectorType}`;\n    for (let i = 0; i < t.params.width; i++) {\n      if (t.params.type === 'bool') {\n        elements.push(i & 1);\n      } else {\n        elements.push((i + 1) * 10);\n      }\n    }\n\n    await run(\n      t,\n      basicExpressionBuilder(ops => `${fn}(${ops[0]})`),\n      [vectorType],\n      vectorType,\n      t.params,\n      [\n        {\n          input: vectorType.create(elements),\n          expected: vectorType.create(elements),\n        },\n      ]\n    );\n  });\n\ng.test('vector_splat')\n  .specURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function')\n  .desc(`Test that a vector constructed from a single scalar produces the expected value`)\n  .params(u =>\n    u\n      .combine('inputSource', allInputSources)\n      .combine('type', ['bool', 'i32', 'u32', 'f32', 'f16'] as const)\n      .combine('value', ['min', 'max', 1, 2, 5, 100] as const)\n      .combine('width', [2, 3, 4] as const)\n      .combine('infer_type', [false, true] as const)\n  )\n  .beforeAllSubcases(t => {\n    if (t.params.type === 'f16') {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n    t.skipIf(t.params.type === 'bool' && !isMinOrMax(t.params.value));\n  })\n  .fn(async t => {\n    const value = valueFor(t.params.value, t.params.type);\n    const elementType = Type[t.params.type];\n    const vectorType = Type.vec(t.params.width, elementType);\n    const fn = t.params.infer_type ? `vec${t.params.width}` : `${vectorType}`;\n    await run(\n      t,\n      basicExpressionBuilder(ops => `${fn}(${ops[0]})`),\n      [elementType],\n      vectorType,\n      t.params,\n      [{ input: [elementType.create(value)], expected: vectorType.create(value) }]\n    );\n  });\n\ng.test('vector_elements')\n  .specURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function')\n  .desc(`Test that a vector constructed from element values produces the expected value`)\n  .params(u =>\n    u\n      .combine('inputSource', allInputSources)\n      .combine('type', ['bool', 'i32', 'u32', 'f32', 'f16'] as const)\n      .combine('width', [2, 3, 4] as const)\n      .combine('infer_type', [false, true] as const)\n  )\n  .beforeAllSubcases(t => {\n    if (t.params.type === 'f16') {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(async t => {\n    const elementType = Type[t.params.type];\n    const vectorType = Type.vec(t.params.width, elementType);\n    const elements: number[] = [];\n    const fn = t.params.infer_type ? `vec${t.params.width}` : `${vectorType}`;\n    for (let i = 0; i < t.params.width; i++) {\n      if (t.params.type === 'bool') {\n        elements.push(i & 1);\n      } else {\n        elements.push((i + 1) * 10);\n      }\n    }\n\n    await run(\n      t,\n      basicExpressionBuilder(ops => `${fn}(${ops.join(', ')})`),\n      elements.map(e => elementType),\n      vectorType,\n      t.params,\n      [\n        {\n          input: elements.map(v => elementType.create(v)),\n          expected: vectorType.create(elements),\n        },\n      ]\n    );\n  });\n\ng.test('vector_mix')\n  .specURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function')\n  .desc(\n    `Test that a vector constructed from a mix of element values and sub-vectors produces the expected value`\n  )\n  .params(u =>\n    u\n      .combine('inputSource', allInputSources)\n      .combine('type', ['bool', 'i32', 'u32', 'f32', 'f16'] as const)\n      .combine('signature', [\n        '2s', //   [vec2,   scalar]\n        's2', //   [scalar, vec2]\n        '2ss', //  [vec2,   scalar,   scalar]\n        's2s', //  [scalar, vec2,     scalar]\n        'ss2', //  [scalar, scalar,   vec2  ]\n        '22', //   [vec2,   vec2]\n        '3s', //   [vec3,   scalar]\n        's3', //   [scalar, vec3]\n      ] as const)\n      .combine('infer_type', [false, true] as const)\n  )\n  .beforeAllSubcases(t => {\n    if (t.params.type === 'f16') {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(async t => {\n    const elementType = Type[t.params.type];\n    let width = 0;\n    const elementValue = (i: number) => (t.params.type === 'bool' ? i & 1 : (i + 1) * 10);\n    const elements: number[] = [];\n    const nextValue = () => {\n      const value = elementValue(width++);\n      elements.push(value);\n      return elementType.create(value);\n    };\n    const args: Value[] = [];\n    for (const c of t.params.signature) {\n      switch (c) {\n        case '2':\n          args.push(vec2(nextValue(), nextValue()));\n          break;\n        case '3':\n          args.push(vec3(nextValue(), nextValue(), nextValue()));\n          break;\n        case 's':\n          args.push(nextValue());\n          break;\n      }\n    }\n    const vectorType = Type.vec(width, elementType);\n    const fn = t.params.infer_type ? `vec${width}` : `${vectorType}`;\n    await run(\n      t,\n      basicExpressionBuilder(ops => `${fn}(${ops.join(', ')})`),\n      args.map(e => e.type),\n      vectorType,\n      t.params,\n      [\n        {\n          input: args,\n          expected: vectorType.create(elements),\n        },\n      ]\n    );\n  });\n\ng.test('matrix_identity')\n  .specURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function')\n  .desc(`Test that a matrix constructed from a value of the same type produces the expected value`)\n  .params(u =>\n    u\n      .combine('inputSource', allInputSources)\n      .combine('type', ['f32', 'f16'] as const)\n      .combine('columns', [2, 3, 4] as const)\n      .combine('rows', [2, 3, 4] as const)\n      .combine('infer_type', [false, true] as const)\n  )\n  .beforeAllSubcases(t => {\n    if (t.params.type === 'f16') {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(async t => {\n    const elementType = Type[t.params.type];\n    const matrixType = Type.mat(t.params.columns, t.params.rows, elementType);\n    const elements: number[] = [];\n    for (let column = 0; column < t.params.columns; column++) {\n      for (let row = 0; row < t.params.rows; row++) {\n        elements.push((column + 1) * 10 + (row + 1));\n      }\n    }\n    const fn = t.params.infer_type ? `mat${t.params.columns}x${t.params.rows}` : `${matrixType}`;\n    await run(\n      t,\n      basicExpressionBuilder(ops => `${fn}(${ops[0]})`),\n      [matrixType],\n      matrixType,\n      t.params,\n      [\n        {\n          input: matrixType.create(elements),\n          expected: matrixType.create(elements),\n        },\n      ]\n    );\n  });\n\ng.test('matrix_elements')\n  .specURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function')\n  .desc(`Test that a matrix constructed from element values produces the expected value`)\n  .params(u =>\n    u\n      .combine('inputSource', allInputSources)\n      .combine('type', ['f32', 'f16'] as const)\n      .combine('columns', [2, 3, 4] as const)\n      .combine('rows', [2, 3, 4] as const)\n      .combine('infer_type', [false, true] as const)\n  )\n  .beforeAllSubcases(t => {\n    if (t.params.type === 'f16') {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(async t => {\n    const elementType = Type[t.params.type];\n    const matrixType = Type.mat(t.params.columns, t.params.rows, elementType);\n    const elements: number[] = [];\n    for (let column = 0; column < t.params.columns; column++) {\n      for (let row = 0; row < t.params.rows; row++) {\n        elements.push((column + 1) * 10 + (row + 1));\n      }\n    }\n    const fn = t.params.infer_type ? `mat${t.params.columns}x${t.params.rows}` : `${matrixType}`;\n    await run(\n      t,\n      basicExpressionBuilder(ops => `${fn}(${ops.join(', ')})`),\n      elements.map(e => elementType),\n      matrixType,\n      t.params,\n      [\n        {\n          input: elements.map(e => elementType.create(e)),\n          expected: matrixType.create(elements),\n        },\n      ]\n    );\n  });\n\ng.test('matrix_column_vectors')\n  .specURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function')\n  .desc(`Test that a matrix constructed from column vectors produces the expected value`)\n  .params(u =>\n    u\n      .combine('inputSource', allInputSources)\n      .combine('type', ['f32', 'f16'] as const)\n      .combine('columns', [2, 3, 4] as const)\n      .combine('rows', [2, 3, 4] as const)\n      .combine('infer_type', [false, true] as const)\n  )\n  .beforeAllSubcases(t => {\n    if (t.params.type === 'f16') {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(async t => {\n    const elementType = Type[t.params.type];\n    const columnType = Type.vec(t.params.rows, elementType);\n    const matrixType = Type.mat(t.params.columns, t.params.rows, elementType);\n    const elements: number[] = [];\n    const columnVectors: VectorValue[] = [];\n    for (let column = 0; column < t.params.columns; column++) {\n      const columnElements: number[] = [];\n      for (let row = 0; row < t.params.rows; row++) {\n        const v = (column + 1) * 10 + (row + 1);\n        elements.push(v);\n        columnElements.push(v);\n      }\n      columnVectors.push(columnType.create(columnElements));\n    }\n    const fn = t.params.infer_type ? `mat${t.params.columns}x${t.params.rows}` : `${matrixType}`;\n    await run(\n      t,\n      basicExpressionBuilder(ops => `${fn}(${ops.join(', ')})`),\n      columnVectors.map(v => v.type),\n      matrixType,\n      t.params,\n      [\n        {\n          input: columnVectors,\n          expected: matrixType.create(elements),\n        },\n      ]\n    );\n  });\n\ng.test('array_elements')\n  .specURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function')\n  .desc(`Test that an array constructed from element values produces the expected value`)\n  .params(u =>\n    u\n      .combine('inputSource', allInputSources)\n      .combine('type', ['bool', 'i32', 'u32', 'f32', 'f16', 'vec3f', 'vec4i'] as const)\n      .combine('length', [1, 5, 10] as const)\n      .combine('infer_type', [false, true] as const)\n  )\n  .beforeAllSubcases(t => {\n    if (t.params.type === 'f16') {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(async t => {\n    const elementType = Type[t.params.type];\n    const arrayType = Type.array(t.params.length, elementType);\n    const elements: number[] = [];\n    for (let i = 0; i < t.params.length; i++) {\n      elements.push((i + 1) * 10);\n    }\n    const fn = t.params.infer_type ? `array` : `${arrayType}`;\n    await run(\n      t,\n      basicExpressionBuilder(ops => `${fn}(${ops.join(', ')})`),\n      elements.map(e => elementType),\n      arrayType,\n      t.params,\n      [\n        {\n          input: elements.map(e => elementType.create(e)),\n          expected: arrayType.create(elements),\n        },\n      ]\n    );\n  });\n\ng.test('structure')\n  .specURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function')\n  .desc(`Test that an structure constructed from element values produces the expected value`)\n  .unimplemented();\n"],"mappings":"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"}