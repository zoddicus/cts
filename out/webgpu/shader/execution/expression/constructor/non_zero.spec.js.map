{"version":3,"file":"non_zero.spec.js","names":["description","makeTestGroup","GPUTest","ArrayValue","Type","scalarTypeOf","vec2","vec3","FP","allInputSources","basicExpressionBuilder","run","g","isMinOrMax","v","kConcreteTypesForAbstractType","valueFor","kind","constants","negative","min","positive","max","test","specURL","desc","params","u","combine","beforeAllSubcases","t","type","selectDeviceOrSkipTestCase","skipIf","value","fn","ops","input","create","expected","elementType","vectorType","vec","width","elements","infer_type","i","push","expand","abstract_type","concrete_type","suffix","concreteElementType","concreteVectorType","_","inputSource","join","map","e","kMixSignatures","elementValue","nextValue","args","c","signature","matrixType","mat","columns","rows","column","row","concreteMatrixType","columnType","columnVectors","columnElements","arrayType","array","length","count","concreteArrayType","x","y","z","w","e00","e01","e02","e10","e11","e12","beginSubcases","member_types","includes","memberType","member_index","values","ty","builder","nested","parameterTypes","resultType","cases"],"sources":["../../../../../../src/webgpu/shader/execution/expression/constructor/non_zero.spec.ts"],"sourcesContent":["export const description = `\nExecution Tests for value constructors from components\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../gpu_test.js';\nimport {\n  ArrayValue,\n  MatrixType,\n  ScalarKind,\n  Type,\n  Value,\n  VectorType,\n  VectorValue,\n  scalarTypeOf,\n  vec2,\n  vec3,\n} from '../../../../util/conversion.js';\nimport { FP } from '../../../../util/floating_point.js';\nimport { allInputSources, basicExpressionBuilder, run } from '../expression.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n/** @returns true if 'v' is 'min' or 'max' */\nfunction isMinOrMax(v: number | 'min' | 'max') {\n  return v === 'min' || v === 'max';\n}\n\n/** A list of concrete types to test for the given abstract-numeric type */\nconst kConcreteTypesForAbstractType = {\n  'abstract-float': ['f32', 'f16'] as const,\n  'abstract-int': ['f32', 'f16', 'i32', 'u32'] as const,\n  'vec3<abstract-int>': ['vec3f', 'vec3h', 'vec3i', 'vec3u'] as const,\n  'vec4<abstract-float>': ['vec4f', 'vec4h'] as const,\n  'mat2x3<abstract-float>': ['mat2x3f', 'mat2x3h'] as const,\n};\n\n/**\n * @returns the lowest finite value for 'kind' if 'v' is 'min',\n *          the highest finite value for 'kind' if 'v' is 'max',\n *          otherwise returns 'v'\n */\nfunction valueFor(v: number | 'min' | 'max', kind: 'bool' | 'i32' | 'u32' | 'f32' | 'f16') {\n  if (!isMinOrMax(v)) {\n    return v as number;\n  }\n  switch (kind) {\n    case 'bool':\n      return v === 'min' ? 0 : 1;\n    case 'i32':\n      return v === 'min' ? -0x80000000 : 0x7fffffff;\n    case 'u32':\n      return v === 'min' ? 0 : 0xffffffff;\n    case 'f32':\n      return v === 'min' ? FP['f32'].constants().negative.min : FP['f32'].constants().positive.max;\n    case 'f16':\n      return v === 'min' ? FP['f16'].constants().negative.min : FP['f16'].constants().positive.max;\n  }\n}\n\ng.test('scalar_identity')\n  .specURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function')\n  .desc(`Test that a scalar constructed from a value of the same type produces the expected value`)\n  .params(u =>\n    u\n      .combine('inputSource', allInputSources)\n      .combine('type', ['bool', 'i32', 'u32', 'f32', 'f16'] as const)\n      .combine('value', ['min', 'max', 1, 2, 5, 100] as const)\n  )\n  .beforeAllSubcases(t => {\n    if (t.params.type === 'f16') {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n    t.skipIf(t.params.type === 'bool' && !isMinOrMax(t.params.value));\n  })\n  .fn(async t => {\n    const type = Type[t.params.type];\n    const value = valueFor(t.params.value, t.params.type);\n    await run(\n      t,\n      basicExpressionBuilder(ops => `${type}(${ops[0]})`),\n      [type],\n      type,\n      t.params,\n      [{ input: [type.create(value)], expected: type.create(value) }]\n    );\n  });\n\ng.test('vector_identity')\n  .specURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function')\n  .desc(`Test that a vector constructed from a value of the same type produces the expected value`)\n  .params(u =>\n    u\n      .combine('inputSource', allInputSources)\n      .combine('type', ['bool', 'i32', 'u32', 'f32', 'f16'] as const)\n      .combine('width', [2, 3, 4] as const)\n      .combine('infer_type', [false, true] as const)\n  )\n  .beforeAllSubcases(t => {\n    if (t.params.type === 'f16') {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(async t => {\n    const elementType = Type[t.params.type];\n    const vectorType = Type.vec(t.params.width, elementType);\n    const elements: number[] = [];\n    const fn = t.params.infer_type ? `vec${t.params.width}` : `${vectorType}`;\n    for (let i = 0; i < t.params.width; i++) {\n      if (t.params.type === 'bool') {\n        elements.push(i & 1);\n      } else {\n        elements.push((i + 1) * 10);\n      }\n    }\n\n    await run(\n      t,\n      basicExpressionBuilder(ops => `${fn}(${ops[0]})`),\n      [vectorType],\n      vectorType,\n      t.params,\n      [\n        {\n          input: vectorType.create(elements),\n          expected: vectorType.create(elements),\n        },\n      ]\n    );\n  });\n\ng.test('concrete_vector_splat')\n  .specURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function')\n  .desc(`Test that a vector constructed from a single concrete scalar produces the expected value`)\n  .params(u =>\n    u\n      .combine('inputSource', allInputSources)\n      .combine('type', ['bool', 'i32', 'u32', 'f32', 'f16'] as const)\n      .combine('value', ['min', 'max', 1, 2, 5, 100] as const)\n      .combine('width', [2, 3, 4] as const)\n      .combine('infer_type', [false, true] as const)\n  )\n  .beforeAllSubcases(t => {\n    if (t.params.type === 'f16') {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n    t.skipIf(t.params.type === 'bool' && !isMinOrMax(t.params.value));\n  })\n  .fn(async t => {\n    const value = valueFor(t.params.value, t.params.type);\n    const elementType = Type[t.params.type];\n    const vectorType = Type.vec(t.params.width, elementType);\n    const fn = t.params.infer_type ? `vec${t.params.width}` : `${vectorType}`;\n    await run(\n      t,\n      basicExpressionBuilder(ops => `${fn}(${ops[0]})`),\n      [elementType],\n      vectorType,\n      t.params,\n      [{ input: [elementType.create(value)], expected: vectorType.create(value) }]\n    );\n  });\n\ng.test('abstract_vector_splat')\n  .specURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function')\n  .desc(`Test that a vector constructed from a single abstract scalar produces the expected value`)\n  .params(u =>\n    u\n      .combine('abstract_type', ['abstract-int', 'abstract-float'] as const)\n      .expand('concrete_type', t => kConcreteTypesForAbstractType[t.abstract_type])\n      .combine('value', [1, 2, 5, 100] as const)\n      .combine('width', [2, 3, 4] as const)\n  )\n  .beforeAllSubcases(t => {\n    if (t.params.concrete_type === 'f16') {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(async t => {\n    const suffix = t.params.abstract_type === 'abstract-float' ? '.0' : '';\n    const concreteElementType = Type[t.params.concrete_type];\n    const concreteVectorType = Type.vec(t.params.width, concreteElementType);\n    const fn = `vec${t.params.width}`;\n    await run(\n      t,\n      basicExpressionBuilder(_ => `${fn}(${t.params.value * 0x100000000}${suffix}) / 0x100000000`),\n      [],\n      concreteVectorType,\n      { inputSource: 'const' },\n      [{ input: [], expected: concreteVectorType.create(t.params.value) }]\n    );\n  });\n\ng.test('concrete_vector_elements')\n  .specURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function')\n  .desc(`Test that a vector constructed from concrete element values produces the expected value`)\n  .params(u =>\n    u\n      .combine('inputSource', allInputSources)\n      .combine('type', ['bool', 'i32', 'u32', 'f32', 'f16'] as const)\n      .combine('width', [2, 3, 4] as const)\n      .combine('infer_type', [false, true] as const)\n  )\n  .beforeAllSubcases(t => {\n    if (t.params.type === 'f16') {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(async t => {\n    const elementType = Type[t.params.type];\n    const vectorType = Type.vec(t.params.width, elementType);\n    const elements: number[] = [];\n    const fn = t.params.infer_type ? `vec${t.params.width}` : `${vectorType}`;\n    for (let i = 0; i < t.params.width; i++) {\n      if (t.params.type === 'bool') {\n        elements.push(i & 1);\n      } else {\n        elements.push((i + 1) * 10);\n      }\n    }\n\n    await run(\n      t,\n      basicExpressionBuilder(ops => `${fn}(${ops.join(', ')})`),\n      elements.map(e => elementType),\n      vectorType,\n      t.params,\n      [\n        {\n          input: elements.map(v => elementType.create(v)),\n          expected: vectorType.create(elements),\n        },\n      ]\n    );\n  });\n\ng.test('abstract_vector_elements')\n  .specURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function')\n  .desc(`Test that a vector constructed from abstract element values produces the expected value`)\n  .params(u =>\n    u\n      .combine('abstract_type', ['abstract-int', 'abstract-float'] as const)\n      .expand('concrete_type', t => kConcreteTypesForAbstractType[t.abstract_type])\n      .combine('width', [2, 3, 4] as const)\n  )\n  .beforeAllSubcases(t => {\n    if (t.params.concrete_type === 'f16') {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(async t => {\n    const suffix = t.params.abstract_type === 'abstract-float' ? '.0' : '';\n    const concreteElementType = Type[t.params.concrete_type];\n    const concreteVectorType = Type.vec(t.params.width, concreteElementType);\n    const fn = `vec${t.params.width}`;\n    const elements: number[] = [];\n    for (let i = 0; i < t.params.width; i++) {\n      elements.push((i + 1) * 10);\n    }\n    await run(\n      t,\n      basicExpressionBuilder(\n        _ => `${fn}(${elements.map(v => `${v * 0x100000000}${suffix}`).join(', ')}) / 0x100000000`\n      ),\n      [],\n      concreteVectorType,\n      { inputSource: 'const' },\n      [{ input: [], expected: concreteVectorType.create(elements) }]\n    );\n  });\n\nconst kMixSignatures = [\n  '2s', //   [vec2,   scalar]\n  's2', //   [scalar, vec2]\n  '2ss', //  [vec2,   scalar,   scalar]\n  's2s', //  [scalar, vec2,     scalar]\n  'ss2', //  [scalar, scalar,   vec2  ]\n  '22', //   [vec2,   vec2]\n  '3s', //   [vec3,   scalar]\n  's3', //   [scalar, vec3]\n] as const;\n\ng.test('concrete_vector_mix')\n  .specURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function')\n  .desc(\n    `Test that a vector constructed from a mix of concrete element values and sub-vectors produces the expected value`\n  )\n  .params(u =>\n    u\n      .combine('inputSource', allInputSources)\n      .combine('type', ['bool', 'i32', 'u32', 'f32', 'f16'] as const)\n      .combine('signature', kMixSignatures)\n      .combine('infer_type', [false, true] as const)\n  )\n  .beforeAllSubcases(t => {\n    if (t.params.type === 'f16') {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(async t => {\n    const elementType = Type[t.params.type];\n    let width = 0;\n    const elementValue = (i: number) => (t.params.type === 'bool' ? i & 1 : (i + 1) * 10);\n    const elements: number[] = [];\n    const nextValue = () => {\n      const value = elementValue(width++);\n      elements.push(value);\n      return elementType.create(value);\n    };\n    const args: Value[] = [];\n    for (const c of t.params.signature) {\n      switch (c) {\n        case '2':\n          args.push(vec2(nextValue(), nextValue()));\n          break;\n        case '3':\n          args.push(vec3(nextValue(), nextValue(), nextValue()));\n          break;\n        case 's':\n          args.push(nextValue());\n          break;\n      }\n    }\n    const vectorType = Type.vec(width, elementType);\n    const fn = t.params.infer_type ? `vec${width}` : `${vectorType}`;\n    await run(\n      t,\n      basicExpressionBuilder(ops => `${fn}(${ops.join(', ')})`),\n      args.map(e => e.type),\n      vectorType,\n      t.params,\n      [\n        {\n          input: args,\n          expected: vectorType.create(elements),\n        },\n      ]\n    );\n  });\n\ng.test('abstract_vector_mix')\n  .specURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function')\n  .desc(\n    `Test that a vector constructed from a mix of abstract element values and sub-vectors produces the expected value`\n  )\n  .params(u =>\n    u\n      .combine('abstract_type', ['abstract-int', 'abstract-float'] as const)\n      .expand('concrete_type', t => kConcreteTypesForAbstractType[t.abstract_type])\n      .combine('signature', kMixSignatures)\n  )\n  .beforeAllSubcases(t => {\n    if (t.params.concrete_type === 'f16') {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(async t => {\n    let width = 0;\n    const suffix = t.params.abstract_type === 'abstract-float' ? '.0' : '';\n    const concreteElementType = Type[t.params.concrete_type];\n    const elementValue = (i: number) => (i + 1) * 10;\n    const elements: number[] = [];\n    const nextValue = () => {\n      const value = elementValue(width++);\n      elements.push(value);\n      return `${value * 0x100000000}${suffix}`;\n    };\n    const args: string[] = [];\n    for (const c of t.params.signature) {\n      switch (c) {\n        case '2':\n          args.push(`vec2(${nextValue()}, ${nextValue()})`);\n          break;\n        case '3':\n          args.push(`vec3(${nextValue()}, ${nextValue()}, ${nextValue()})`);\n          break;\n        case 's':\n          args.push(`${nextValue()}`);\n          break;\n      }\n    }\n    const concreteVectorType = Type.vec(width, concreteElementType);\n    const fn = `vec${width}`;\n    await run(\n      t,\n      basicExpressionBuilder(_ => `${fn}(${args.join(', ')}) / 0x100000000`),\n      [],\n      concreteVectorType,\n      { inputSource: 'const' },\n      [\n        {\n          input: [],\n          expected: concreteVectorType.create(elements),\n        },\n      ]\n    );\n  });\n\ng.test('matrix_identity')\n  .specURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function')\n  .desc(`Test that a matrix constructed from a value of the same type produces the expected value`)\n  .params(u =>\n    u\n      .combine('inputSource', allInputSources)\n      .combine('type', ['f32', 'f16'] as const)\n      .combine('columns', [2, 3, 4] as const)\n      .combine('rows', [2, 3, 4] as const)\n      .combine('infer_type', [false, true] as const)\n  )\n  .beforeAllSubcases(t => {\n    if (t.params.type === 'f16') {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(async t => {\n    const elementType = Type[t.params.type];\n    const matrixType = Type.mat(t.params.columns, t.params.rows, elementType);\n    const elements: number[] = [];\n    for (let column = 0; column < t.params.columns; column++) {\n      for (let row = 0; row < t.params.rows; row++) {\n        elements.push((column + 1) * 10 + (row + 1));\n      }\n    }\n    const fn = t.params.infer_type ? `mat${t.params.columns}x${t.params.rows}` : `${matrixType}`;\n    await run(\n      t,\n      basicExpressionBuilder(ops => `${fn}(${ops[0]})`),\n      [matrixType],\n      matrixType,\n      t.params,\n      [\n        {\n          input: matrixType.create(elements),\n          expected: matrixType.create(elements),\n        },\n      ]\n    );\n  });\n\ng.test('concrete_matrix_elements')\n  .specURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function')\n  .desc(`Test that a matrix constructed from concrete element values produces the expected value`)\n  .params(u =>\n    u\n      .combine('inputSource', allInputSources)\n      .combine('type', ['f32', 'f16'] as const)\n      .combine('columns', [2, 3, 4] as const)\n      .combine('rows', [2, 3, 4] as const)\n      .combine('infer_type', [false, true] as const)\n  )\n  .beforeAllSubcases(t => {\n    if (t.params.type === 'f16') {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(async t => {\n    const elementType = Type[t.params.type];\n    const matrixType = Type.mat(t.params.columns, t.params.rows, elementType);\n    const elements: number[] = [];\n    for (let column = 0; column < t.params.columns; column++) {\n      for (let row = 0; row < t.params.rows; row++) {\n        elements.push((column + 1) * 10 + (row + 1));\n      }\n    }\n    const fn = t.params.infer_type ? `mat${t.params.columns}x${t.params.rows}` : `${matrixType}`;\n    await run(\n      t,\n      basicExpressionBuilder(ops => `${fn}(${ops.join(', ')})`),\n      elements.map(e => elementType),\n      matrixType,\n      t.params,\n      [\n        {\n          input: elements.map(e => elementType.create(e)),\n          expected: matrixType.create(elements),\n        },\n      ]\n    );\n  });\n\ng.test('abstract_matrix_elements')\n  .specURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function')\n  .desc(`Test that a matrix constructed from concrete element values produces the expected value`)\n  .params(u =>\n    u\n      .combine('concrete_type', ['f32', 'f16'] as const)\n      .combine('columns', [2, 3, 4] as const)\n      .combine('rows', [2, 3, 4] as const)\n  )\n  .beforeAllSubcases(t => {\n    if (t.params.concrete_type === 'f16') {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(async t => {\n    const concreteElementType = Type[t.params.concrete_type];\n    const concreteMatrixType = Type.mat(t.params.columns, t.params.rows, concreteElementType);\n    const elements: number[] = [];\n    for (let column = 0; column < t.params.columns; column++) {\n      for (let row = 0; row < t.params.rows; row++) {\n        elements.push((column + 1) * 10 + (row + 1));\n      }\n    }\n    const fn = `mat${t.params.columns}x${t.params.rows}`;\n    await run(\n      t,\n      basicExpressionBuilder(\n        _ => `${fn}(${elements.map(v => `${v * 0x100000000}.0`).join(', ')}) * (1.0 / 0x100000000)`\n      ),\n      [],\n      concreteMatrixType,\n      { inputSource: 'const' },\n      [\n        {\n          input: [],\n          expected: concreteMatrixType.create(elements),\n        },\n      ]\n    );\n  });\n\ng.test('concrete_matrix_column_vectors')\n  .specURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function')\n  .desc(`Test that a matrix constructed from concrete column vectors produces the expected value`)\n  .params(u =>\n    u\n      .combine('inputSource', allInputSources)\n      .combine('type', ['f32', 'f16'] as const)\n      .combine('columns', [2, 3, 4] as const)\n      .combine('rows', [2, 3, 4] as const)\n      .combine('infer_type', [false, true] as const)\n  )\n  .beforeAllSubcases(t => {\n    if (t.params.type === 'f16') {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(async t => {\n    const elementType = Type[t.params.type];\n    const columnType = Type.vec(t.params.rows, elementType);\n    const matrixType = Type.mat(t.params.columns, t.params.rows, elementType);\n    const elements: number[] = [];\n    const columnVectors: VectorValue[] = [];\n    for (let column = 0; column < t.params.columns; column++) {\n      const columnElements: number[] = [];\n      for (let row = 0; row < t.params.rows; row++) {\n        const v = (column + 1) * 10 + (row + 1);\n        elements.push(v);\n        columnElements.push(v);\n      }\n      columnVectors.push(columnType.create(columnElements));\n    }\n    const fn = t.params.infer_type ? `mat${t.params.columns}x${t.params.rows}` : `${matrixType}`;\n    await run(\n      t,\n      basicExpressionBuilder(ops => `${fn}(${ops.join(', ')})`),\n      columnVectors.map(v => v.type),\n      matrixType,\n      t.params,\n      [\n        {\n          input: columnVectors,\n          expected: matrixType.create(elements),\n        },\n      ]\n    );\n  });\n\ng.test('abstract_matrix_column_vectors')\n  .specURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function')\n  .desc(`Test that a matrix constructed from abstract column vectors produces the expected value`)\n  .params(u =>\n    u\n      .combine('concrete_type', ['f32', 'f16'] as const)\n      .combine('columns', [2, 3, 4] as const)\n      .combine('rows', [2, 3, 4] as const)\n  )\n  .beforeAllSubcases(t => {\n    if (t.params.concrete_type === 'f16') {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(async t => {\n    const concreteElementType = Type[t.params.concrete_type];\n    const concreteMatrixType = Type.mat(t.params.columns, t.params.rows, concreteElementType);\n    const elements: number[] = [];\n    const columnVectors: string[] = [];\n    for (let column = 0; column < t.params.columns; column++) {\n      const columnElements: string[] = [];\n      for (let row = 0; row < t.params.rows; row++) {\n        const v = (column + 1) * 10 + (row + 1);\n        elements.push(v);\n        columnElements.push(`${v * 0x100000000}`);\n      }\n      columnVectors.push(`vec${t.params.rows}(${columnElements.join(', ')})`);\n    }\n    const fn = `mat${t.params.columns}x${t.params.rows}`;\n    await run(\n      t,\n      basicExpressionBuilder(_ => `${fn}(${columnVectors.join(', ')}) * (1.0 / 0x100000000)`),\n      [],\n      concreteMatrixType,\n      { inputSource: 'const' },\n      [\n        {\n          input: [],\n          expected: concreteMatrixType.create(elements),\n        },\n      ]\n    );\n  });\n\ng.test('concrete_array_elements')\n  .specURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function')\n  .desc(`Test that an array constructed from concrete element values produces the expected value`)\n  .params(u =>\n    u\n      .combine('inputSource', allInputSources)\n      .combine('type', ['bool', 'i32', 'u32', 'f32', 'f16', 'vec3f', 'vec4i'] as const)\n      .combine('length', [1, 5, 10] as const)\n      .combine('infer_type', [false, true] as const)\n  )\n  .beforeAllSubcases(t => {\n    if (t.params.type === 'f16') {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(async t => {\n    const elementType = Type[t.params.type];\n    const arrayType = Type.array(t.params.length, elementType);\n    const elements: number[] = [];\n    for (let i = 0; i < t.params.length; i++) {\n      elements.push((i + 1) * 10);\n    }\n    const fn = t.params.infer_type ? `array` : `${arrayType}`;\n    await run(\n      t,\n      basicExpressionBuilder(ops => `${fn}(${ops.join(', ')})`),\n      elements.map(e => elementType),\n      arrayType,\n      t.params,\n      [\n        {\n          input: elements.map(e => elementType.create(e)),\n          expected: arrayType.create(elements),\n        },\n      ]\n    );\n  });\n\ng.test('abstract_array_elements')\n  .specURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function')\n  .desc(`Test that an array constructed from element values produces the expected value`)\n  .params(u =>\n    u\n      .combine('abstract_type', [\n        'abstract-int',\n        'abstract-float',\n        'vec3<abstract-int>',\n        'vec4<abstract-float>',\n        'mat2x3<abstract-float>',\n      ] as const)\n      .expand('concrete_type', t => kConcreteTypesForAbstractType[t.abstract_type])\n      .combine('length', [1, 5, 10] as const)\n  )\n  .beforeAllSubcases(t => {\n    if (scalarTypeOf(Type[t.params.concrete_type]).kind === 'f16') {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(async t => {\n    const count = t.params.length;\n    const concreteElementType = Type[t.params.concrete_type];\n    const concreteArrayType = Type.array(count, concreteElementType);\n    const elements: { args: string; value: Value }[] = [];\n    let i = 0;\n    const nextValue = () => ++i * 10;\n    for (let i = 0; i < count; i++) {\n      switch (t.params.abstract_type) {\n        case 'abstract-int': {\n          const value = nextValue();\n          elements.push({ args: `${value}`, value: concreteElementType.create(value) });\n          break;\n        }\n        case 'abstract-float': {\n          const value = nextValue();\n          elements.push({ args: `${value}.0`, value: concreteElementType.create(value) });\n          break;\n        }\n        case 'vec3<abstract-int>': {\n          const x = nextValue();\n          const y = nextValue();\n          const z = nextValue();\n          elements.push({\n            args: `vec3(${x}, ${y}, ${z})`,\n            value: (concreteElementType as VectorType).create([x, y, z]),\n          });\n          break;\n        }\n        case 'vec4<abstract-float>': {\n          const x = nextValue();\n          const y = nextValue();\n          const z = nextValue();\n          const w = nextValue();\n          elements.push({\n            args: `vec4(${x}.0, ${y}.0, ${z}.0, ${w}.0)`,\n            value: (concreteElementType as VectorType).create([x, y, z, w]),\n          });\n          break;\n        }\n        case 'mat2x3<abstract-float>': {\n          const e00 = nextValue();\n          const e01 = nextValue();\n          const e02 = nextValue();\n          const e10 = nextValue();\n          const e11 = nextValue();\n          const e12 = nextValue();\n          elements.push({\n            args: `mat2x3(vec3(${e00}.0, ${e01}.0, ${e02}.0), vec3(${e10}.0, ${e11}.0, ${e12}.0))`,\n            value: (concreteElementType as MatrixType).create([e00, e01, e02, e10, e11, e12]),\n          });\n          break;\n        }\n      }\n    }\n    const fn = `array`;\n    await run(\n      t,\n      basicExpressionBuilder(_ => `${fn}(${elements.map(e => e.args).join(', ')})`),\n      [],\n      concreteArrayType,\n      { inputSource: 'const' },\n      [\n        {\n          input: [],\n          expected: new ArrayValue(elements.map(e => e.value)),\n        },\n      ]\n    );\n  });\n\ng.test('structure')\n  .specURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function')\n  .desc(`Test that an structure constructed from element values produces the expected value`)\n  .params(u =>\n    u\n      .combine('member_types', [\n        ['bool'],\n        ['u32'],\n        ['vec3f'],\n        ['i32', 'u32'],\n        ['i32', 'f16', 'vec4i', 'mat3x2f'],\n        ['bool', 'u32', 'f16', 'vec3f', 'vec2i'],\n        ['i32', 'u32', 'f32', 'f16', 'vec3f', 'vec4i'],\n      ] as readonly ScalarKind[][])\n      .combine('nested', [false, true])\n      .beginSubcases()\n      .expand('member_index', t => t.member_types.map((_, i) => i))\n  )\n  .beforeAllSubcases(t => {\n    if (t.params.member_types.includes('f16')) {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(async t => {\n    const memberType = Type[t.params.member_types[t.params.member_index]];\n    const values = t.params.member_types.map((ty, i) => Type[ty].create(i));\n\n    const builder = basicExpressionBuilder(ops =>\n      t.params.nested\n        ? `OuterStruct(10, MyStruct(${ops.join(', ')}), 20).inner.member_${t.params.member_index}`\n        : `MyStruct(${ops.join(', ')}).member_${t.params.member_index}`\n    );\n    await run(\n      t,\n      (parameterTypes, resultType, cases, inputSource) => {\n        return `\n${t.params.member_types.includes('f16') ? 'enable f16;' : ''}\n\n${builder(parameterTypes, resultType, cases, inputSource)}\n\nstruct MyStruct {\n${t.params.member_types.map((ty, i) => `  member_${i} : ${ty},`).join('\\n')}\n};\nstruct OuterStruct {\n  pre : i32,\n  inner : MyStruct,\n  post : i32,\n};\n`;\n      },\n      t.params.member_types.map(ty => Type[ty]),\n      memberType,\n      { inputSource: 'const' },\n      [{ input: values, expected: values[t.params.member_index] }]\n    );\n  });\n"],"mappings":"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"}