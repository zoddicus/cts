{"version":3,"file":"case_cache.js","names":["dataCache","unreachable","deserializeComparator","serializeComparator","Scalar","Vector","serializeValue","deserializeValue","Matrix","deserializeFPInterval","FPInterval","serializeFPInterval","flatten2DArray","unflatten2DArray","isComparator","serializeExpectation","e","kind","value","Array","cols","length","rows","map","deserializeExpectation","data","serializeCase","c","input","v","expected","deserializeCase","CaseCache","constructor","name","builders","path","get","fetch","build","built","cases","Promise","resolve","serialize","serialized","JSON","stringify","deserialize","parse","casesByName","caseData","makeCaseCache"],"sources":["../../../../../src/webgpu/shader/execution/expression/case_cache.ts"],"sourcesContent":["import { Cacheable, dataCache } from '../../../../common/framework/data_cache.js';\nimport { unreachable } from '../../../../common/util/util.js';\nimport {\n  SerializedComparator,\n  deserializeComparator,\n  serializeComparator,\n} from '../../../util/compare.js';\nimport {\n  Scalar,\n  Vector,\n  serializeValue,\n  SerializedValue,\n  deserializeValue,\n  Matrix,\n} from '../../../util/conversion.js';\nimport {\n  deserializeFPInterval,\n  FPInterval,\n  SerializedFPInterval,\n  serializeFPInterval,\n} from '../../../util/floating_point.js';\nimport { flatten2DArray, unflatten2DArray } from '../../../util/math.js';\n\nimport { Case, CaseList, Expectation, isComparator } from './expression.js';\n\n/**\n * SerializedExpectationValue holds the serialized form of an Expectation when\n * the Expectation is a Value\n * This form can be safely encoded to JSON.\n */\ntype SerializedExpectationValue = {\n  kind: 'value';\n  value: SerializedValue;\n};\n\n/**\n * SerializedExpectationInterval holds the serialized form of an Expectation when\n * the Expectation is an Interval\n * This form can be safely encoded to JSON.\n */\ntype SerializedExpectationInterval = {\n  kind: 'interval';\n  value: SerializedFPInterval;\n};\n\n/**\n * SerializedExpectationIntervals holds the serialized form of an Expectation when\n * the Expectation is a list of Intervals\n * This form can be safely encoded to JSON.\n */\ntype SerializedExpectationIntervals = {\n  kind: 'intervals';\n  value: SerializedFPInterval[];\n};\n\n/**\n * SerializedExpectation2DIntervalArray holds the serialized form of an\n * Expectation when the Expectation is a 2d array of Intervals. The array is\n * flattened to a 1D array for storage.\n * This form can be safely encoded to JSON.\n */\ntype SerializedExpectation2DIntervalArray = {\n  kind: '2d-interval-array';\n  cols: number;\n  rows: number;\n  value: SerializedFPInterval[];\n};\n\n/**\n * SerializedExpectationValue holds the serialized form of an Expectation when\n * the Expectation is a Comparator\n * This form can be safely encoded to JSON.\n */\ntype SerializedExpectationComparator = {\n  kind: 'comparator';\n  value: SerializedComparator;\n};\n\n/**\n * SerializedExpectation holds the serialized form of an Expectation.\n * This form can be safely encoded to JSON.\n */\nexport type SerializedExpectation =\n  | SerializedExpectationValue\n  | SerializedExpectationInterval\n  | SerializedExpectationIntervals\n  | SerializedExpectation2DIntervalArray\n  | SerializedExpectationComparator;\n\n/** serializeExpectation() converts an Expectation to a SerializedExpectation */\nexport function serializeExpectation(e: Expectation): SerializedExpectation {\n  if (e instanceof Scalar || e instanceof Vector || e instanceof Matrix) {\n    return { kind: 'value', value: serializeValue(e) };\n  }\n  if (e instanceof FPInterval) {\n    return { kind: 'interval', value: serializeFPInterval(e) };\n  }\n  if (e instanceof Array) {\n    if (e[0] instanceof Array) {\n      e = e as FPInterval[][];\n      const cols = e.length;\n      const rows = e[0].length;\n      return {\n        kind: '2d-interval-array',\n        cols,\n        rows,\n        value: flatten2DArray(e).map(serializeFPInterval),\n      };\n    } else {\n      e = e as FPInterval[];\n      return { kind: 'intervals', value: e.map(serializeFPInterval) };\n    }\n  }\n  if (isComparator(e)) {\n    return { kind: 'comparator', value: serializeComparator(e) };\n  }\n  unreachable(`cannot serialize Expectation ${e}`);\n}\n\n/** deserializeExpectation() converts a SerializedExpectation to a Expectation */\nexport function deserializeExpectation(data: SerializedExpectation): Expectation {\n  switch (data.kind) {\n    case 'value':\n      return deserializeValue(data.value);\n    case 'interval':\n      return deserializeFPInterval(data.value);\n    case 'intervals':\n      return data.value.map(deserializeFPInterval);\n    case '2d-interval-array':\n      return unflatten2DArray(data.value.map(deserializeFPInterval), data.cols, data.rows);\n    case 'comparator':\n      return deserializeComparator(data.value);\n  }\n}\n\n/**\n * SerializedCase holds the serialized form of a Case.\n * This form can be safely encoded to JSON.\n */\nexport type SerializedCase = {\n  input: SerializedValue | SerializedValue[];\n  expected: SerializedExpectation;\n};\n\n/** serializeCase() converts an Case to a SerializedCase */\nexport function serializeCase(c: Case): SerializedCase {\n  return {\n    input: c.input instanceof Array ? c.input.map(v => serializeValue(v)) : serializeValue(c.input),\n    expected: serializeExpectation(c.expected),\n  };\n}\n\n/** serializeCase() converts an SerializedCase to a Case */\nexport function deserializeCase(data: SerializedCase): Case {\n  return {\n    input:\n      data.input instanceof Array\n        ? data.input.map(v => deserializeValue(v))\n        : deserializeValue(data.input),\n    expected: deserializeExpectation(data.expected),\n  };\n}\n\n/** CaseListBuilder is a function that builds a CaseList */\nexport type CaseListBuilder = () => CaseList;\n\n/**\n * CaseCache is a cache of CaseList.\n * CaseCache implements the Cacheable interface, so the cases can be pre-built\n * and stored in the data cache, reducing computation costs at CTS runtime.\n */\nexport class CaseCache implements Cacheable<Record<string, CaseList>> {\n  /**\n   * Constructor\n   * @param name the name of the cache. This must be globally unique.\n   * @param builders a Record of case-list name to case-list builder.\n   */\n  constructor(name: string, builders: Record<string, CaseListBuilder>) {\n    this.path = `webgpu/shader/execution/case-cache/${name}.json`;\n    this.builders = builders;\n  }\n\n  /** get() returns the list of cases with the given name */\n  public async get(name: string): Promise<CaseList> {\n    const data = await dataCache.fetch(this);\n    return data[name];\n  }\n\n  /**\n   * build() implements the Cacheable.build interface.\n   * @returns the data.\n   */\n  build(): Promise<Record<string, CaseList>> {\n    const built: Record<string, CaseList> = {};\n    for (const name in this.builders) {\n      const cases = this.builders[name]();\n      built[name] = cases;\n    }\n    return Promise.resolve(built);\n  }\n\n  /**\n   * serialize() implements the Cacheable.serialize interface.\n   * @returns the serialized data.\n   */\n  serialize(data: Record<string, CaseList>): string {\n    const serialized: Record<string, SerializedCase[]> = {};\n    for (const name in data) {\n      serialized[name] = data[name].map(c => serializeCase(c));\n    }\n    return JSON.stringify(serialized);\n  }\n\n  /**\n   * deserialize() implements the Cacheable.deserialize interface.\n   * @returns the deserialize data.\n   */\n  deserialize(serialized: string): Record<string, CaseList> {\n    const data = JSON.parse(serialized) as Record<string, SerializedCase[]>;\n    const casesByName: Record<string, CaseList> = {};\n    for (const name in data) {\n      const cases = data[name].map(caseData => deserializeCase(caseData));\n      casesByName[name] = cases;\n    }\n    return casesByName;\n  }\n\n  public readonly path: string;\n  private readonly builders: Record<string, CaseListBuilder>;\n}\n\nexport function makeCaseCache(name: string, builders: Record<string, CaseListBuilder>): CaseCache {\n  return new CaseCache(name, builders);\n}\n"],"mappings":"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"}