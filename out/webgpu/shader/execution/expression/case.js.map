{"version":3,"file":"case.js","names":["Vector","i32","u32","cartesianProduct","quantizeToI32","quantizeToU32","makeScalarVectorBinaryToVectorCase","scalar","vector","op","quantize","scalarize","map","result","v","includes","undefined","input","expected","generateScalarVectorBinaryToVectorCases","scalars","vectors","cases","Array","forEach","s","c","push","makeVectorScalarBinaryToVectorCase","generateVectorScalarBinaryToVectorCases","generateU32VectorBinaryToVectorCases","generateVectorU32BinaryToVectorCases","generateI32VectorBinaryToVectorCases","generateVectorI32BinaryToVectorCases","generateScalarBinaryToScalarCases","param0s","param1s","reduce","e","generateBinaryToI32Cases","generateBinaryToU32Cases"],"sources":["../../../../../src/webgpu/shader/execution/expression/case.ts"],"sourcesContent":["import { ROArrayArray } from '../../../../common/util/types.js';\nimport { ScalarBuilder, Value, Vector, i32, u32 } from '../../../util/conversion.js';\nimport {\n  QuantizeFunc,\n  cartesianProduct,\n  quantizeToI32,\n  quantizeToU32,\n} from '../../../util/math.js';\n\nimport { Expectation } from './expectation.js';\n\n/** Case is a single expression test case. */\nexport type Case = {\n  // The input value(s)\n  input: Value | ReadonlyArray<Value>;\n  // The expected result, or function to check the result\n  expected: Expectation;\n};\n\n/** CaseList is a list of Cases */\nexport type CaseList = Array<Case>;\n\n/**\n * A function that performs a binary operation on x and y, and returns the expected\n * result.\n */\nexport interface BinaryOp {\n  (x: number, y: number): number | undefined;\n}\n\n/**\n * @returns a Case for the input params with op applied\n * @param scalar scalar param\n * @param vector vector param (2, 3, or 4 elements)\n * @param op the op to apply to scalar and vector\n * @param quantize function to quantize all values in vectors and scalars\n * @param scalarize function to convert numbers to Scalars\n */\nfunction makeScalarVectorBinaryToVectorCase(\n  scalar: number,\n  vector: readonly number[],\n  op: BinaryOp,\n  quantize: QuantizeFunc,\n  scalarize: ScalarBuilder\n): Case | undefined {\n  scalar = quantize(scalar);\n  vector = vector.map(quantize);\n  const result = vector.map(v => op(scalar, v));\n  if (result.includes(undefined)) {\n    return undefined;\n  }\n  return {\n    input: [scalarize(scalar), new Vector(vector.map(scalarize))],\n    expected: new Vector((result as readonly number[]).map(scalarize)),\n  };\n}\n\n/**\n * @returns array of Case for the input params with op applied\n * @param scalars array of scalar params\n * @param vectors array of vector params (2, 3, or 4 elements)\n * @param op the op to apply to each pair of scalar and vector\n * @param quantize function to quantize all values in vectors and scalars\n * @param scalarize function to convert numbers to Scalars\n */\nfunction generateScalarVectorBinaryToVectorCases(\n  scalars: readonly number[],\n  vectors: ROArrayArray<number>,\n  op: BinaryOp,\n  quantize: QuantizeFunc,\n  scalarize: ScalarBuilder\n): Case[] {\n  const cases = new Array<Case>();\n  scalars.forEach(s => {\n    vectors.forEach(v => {\n      const c = makeScalarVectorBinaryToVectorCase(s, v, op, quantize, scalarize);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n    });\n  });\n  return cases;\n}\n\n/**\n * @returns a Case for the input params with op applied\n * @param vector vector param (2, 3, or 4 elements)\n * @param scalar scalar param\n * @param op the op to apply to vector and scalar\n * @param quantize function to quantize all values in vectors and scalars\n * @param scalarize function to convert numbers to Scalars\n */\nfunction makeVectorScalarBinaryToVectorCase(\n  vector: readonly number[],\n  scalar: number,\n  op: BinaryOp,\n  quantize: QuantizeFunc,\n  scalarize: ScalarBuilder\n): Case | undefined {\n  vector = vector.map(quantize);\n  scalar = quantize(scalar);\n  const result = vector.map(v => op(v, scalar));\n  if (result.includes(undefined)) {\n    return undefined;\n  }\n  return {\n    input: [new Vector(vector.map(scalarize)), scalarize(scalar)],\n    expected: new Vector((result as readonly number[]).map(scalarize)),\n  };\n}\n\n/**\n * @returns array of Case for the input params with op applied\n * @param vectors array of vector params (2, 3, or 4 elements)\n * @param scalars array of scalar params\n * @param op the op to apply to each pair of vector and scalar\n * @param quantize function to quantize all values in vectors and scalars\n * @param scalarize function to convert numbers to Scalars\n */\nfunction generateVectorScalarBinaryToVectorCases(\n  vectors: ROArrayArray<number>,\n  scalars: readonly number[],\n  op: BinaryOp,\n  quantize: QuantizeFunc,\n  scalarize: ScalarBuilder\n): Case[] {\n  const cases = new Array<Case>();\n  scalars.forEach(s => {\n    vectors.forEach(v => {\n      const c = makeVectorScalarBinaryToVectorCase(v, s, op, quantize, scalarize);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n    });\n  });\n  return cases;\n}\n\n/**\n * @returns array of Case for the input params with op applied\n * @param scalars array of scalar params\n * @param vectors array of vector params (2, 3, or 4 elements)\n * @param op he op to apply to each pair of scalar and vector\n */\nexport function generateU32VectorBinaryToVectorCases(\n  scalars: readonly number[],\n  vectors: ROArrayArray<number>,\n  op: BinaryOp\n): Case[] {\n  return generateScalarVectorBinaryToVectorCases(scalars, vectors, op, quantizeToU32, u32);\n}\n\n/**\n * @returns array of Case for the input params with op applied\n * @param vectors array of vector params (2, 3, or 4 elements)\n * @param scalars array of scalar params\n * @param op he op to apply to each pair of vector and scalar\n */\nexport function generateVectorU32BinaryToVectorCases(\n  vectors: ROArrayArray<number>,\n  scalars: readonly number[],\n  op: BinaryOp\n): Case[] {\n  return generateVectorScalarBinaryToVectorCases(vectors, scalars, op, quantizeToU32, u32);\n}\n\n/**\n * @returns array of Case for the input params with op applied\n * @param scalars array of scalar params\n * @param vectors array of vector params (2, 3, or 4 elements)\n * @param op he op to apply to each pair of scalar and vector\n */\nexport function generateI32VectorBinaryToVectorCases(\n  scalars: readonly number[],\n  vectors: ROArrayArray<number>,\n  op: BinaryOp\n): Case[] {\n  return generateScalarVectorBinaryToVectorCases(scalars, vectors, op, quantizeToI32, i32);\n}\n\n/**\n * @returns array of Case for the input params with op applied\n * @param vectors array of vector params (2, 3, or 4 elements)\n * @param scalars array of scalar params\n * @param op he op to apply to each pair of vector and scalar\n */\nexport function generateVectorI32BinaryToVectorCases(\n  vectors: ROArrayArray<number>,\n  scalars: readonly number[],\n  op: BinaryOp\n): Case[] {\n  return generateVectorScalarBinaryToVectorCases(vectors, scalars, op, quantizeToI32, i32);\n}\n\n/**\n * @returns array of Case for the input params with op applied\n * @param param0s array of inputs to try for the first param\n * @param param1s array of inputs to try for the second param\n * @param op callback called on each pair of inputs to produce each case\n * @param quantize function to quantize all values\n * @param scalarize function to convert numbers to Scalars\n */\nfunction generateScalarBinaryToScalarCases(\n  param0s: readonly number[],\n  param1s: readonly number[],\n  op: BinaryOp,\n  quantize: QuantizeFunc,\n  scalarize: ScalarBuilder\n): Case[] {\n  param0s = param0s.map(quantize);\n  param1s = param1s.map(quantize);\n  return cartesianProduct(param0s, param1s).reduce((cases, e) => {\n    const expected = op(e[0], e[1]);\n    if (expected !== undefined) {\n      cases.push({ input: [scalarize(e[0]), scalarize(e[1])], expected: scalarize(expected) });\n    }\n    return cases;\n  }, new Array<Case>());\n}\n\n/**\n * @returns an array of Cases for operations over a range of inputs\n * @param param0s array of inputs to try for the first param\n * @param param1s array of inputs to try for the second param\n * @param op callback called on each pair of inputs to produce each case\n */\nexport function generateBinaryToI32Cases(\n  param0s: readonly number[],\n  param1s: readonly number[],\n  op: BinaryOp\n) {\n  return generateScalarBinaryToScalarCases(param0s, param1s, op, quantizeToI32, i32);\n}\n\n/**\n * @returns an array of Cases for operations over a range of inputs\n * @param param0s array of inputs to try for the first param\n * @param param1s array of inputs to try for the second param\n * @param op callback called on each pair of inputs to produce each case\n */\nexport function generateBinaryToU32Cases(\n  param0s: readonly number[],\n  param1s: readonly number[],\n  op: BinaryOp\n) {\n  return generateScalarBinaryToScalarCases(param0s, param1s, op, quantizeToU32, u32);\n}\n"],"mappings":"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"}