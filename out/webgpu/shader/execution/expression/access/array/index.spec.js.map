{"version":3,"file":"index.spec.js","names":["description","makeTestGroup","GPUTest","Type","array","f32","allInputSources","basicExpressionBuilder","run","g","test","specURL","desc","params","u","combine","filter","s","beforeAllSubcases","t","elementType","selectDeviceOrSkipTestCase","fn","indexType","cases","input","create","expected","ops","inputSource","expand"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/access/array/index.spec.ts"],"sourcesContent":["export const description = `\nExecution Tests for array indexing expressions\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { Type, array, f32 } from '../../../../../util/conversion.js';\nimport { Case } from '../../case.js';\nimport { allInputSources, basicExpressionBuilder, run } from '../../expression.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('concrete_scalar')\n  .specURL('https://www.w3.org/TR/WGSL/#array-access-expr')\n  .desc(`Test indexing of an array of concrete scalars`)\n  .params(u =>\n    u\n      .combine(\n        'inputSource',\n        // 'uniform' address space requires array stride to be multiple of 16 bytes\n        allInputSources.filter(s => s !== 'uniform')\n      )\n      .combine('elementType', ['i32', 'u32', 'f32', 'f16'] as const)\n      .combine('indexType', ['i32', 'u32'] as const)\n  )\n  .beforeAllSubcases(t => {\n    if (t.params.elementType === 'f16') {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(async t => {\n    const elementType = Type[t.params.elementType];\n    const indexType = Type[t.params.indexType];\n    const cases: Case[] = [\n      {\n        input: [\n          array(\n            /* 0 */ elementType.create(10),\n            /* 1 */ elementType.create(11),\n            /* 2 */ elementType.create(12)\n          ),\n          indexType.create(0),\n        ],\n        expected: elementType.create(10),\n      },\n      {\n        input: [\n          array(\n            /* 0 */ elementType.create(20),\n            /* 1 */ elementType.create(21),\n            /* 2 */ elementType.create(22)\n          ),\n          indexType.create(1),\n        ],\n        expected: elementType.create(21),\n      },\n      {\n        input: [\n          array(\n            /* 0 */ elementType.create(30),\n            /* 1 */ elementType.create(31),\n            /* 2 */ elementType.create(32)\n          ),\n          indexType.create(2),\n        ],\n        expected: elementType.create(32),\n      },\n    ];\n    await run(\n      t,\n      basicExpressionBuilder(ops => `${ops[0]}[${ops[1]}]`),\n      [Type.array(3, elementType), indexType],\n      elementType,\n      t.params,\n      cases\n    );\n  });\n\ng.test('abstract_scalar')\n  .specURL('https://www.w3.org/TR/WGSL/#array-access-expr')\n  .desc(`Test indexing of an array of scalars`)\n  .params(u =>\n    u\n      .combine('elementType', ['abstract-int', 'abstract-float'] as const)\n      .combine('indexType', ['i32', 'u32'] as const)\n  )\n  .fn(async t => {\n    const elementType = Type[t.params.elementType];\n    const indexType = Type[t.params.indexType];\n    const cases: Case[] = [\n      {\n        input: [\n          array(\n            /* 0 */ elementType.create(0x10_00000000),\n            /* 1 */ elementType.create(0x11_00000000),\n            /* 2 */ elementType.create(0x12_00000000)\n          ),\n          indexType.create(0),\n        ],\n        expected: f32(0x10),\n      },\n      {\n        input: [\n          array(\n            /* 0 */ elementType.create(0x20_00000000),\n            /* 1 */ elementType.create(0x21_00000000),\n            /* 2 */ elementType.create(0x22_00000000)\n          ),\n          indexType.create(1),\n        ],\n        expected: f32(0x21),\n      },\n      {\n        input: [\n          array(\n            /* 0 */ elementType.create(0x30_00000000),\n            /* 1 */ elementType.create(0x31_00000000),\n            /* 2 */ elementType.create(0x32_00000000)\n          ),\n          indexType.create(2),\n        ],\n        expected: f32(0x32),\n      },\n    ];\n    await run(\n      t,\n      basicExpressionBuilder(ops => `${ops[0]}[${ops[1]}] / 0x100000000`),\n      [Type.array(3, elementType), indexType],\n      Type.f32,\n      { inputSource: 'const' },\n      cases\n    );\n  });\n\ng.test('vector')\n  .specURL('https://www.w3.org/TR/WGSL/#array-access-expr')\n  .desc(`Test indexing of an array of vectors`)\n  .params(u =>\n    u\n      .combine('inputSource', allInputSources)\n      .expand('elementType', t =>\n        t.inputSource === 'uniform'\n          ? (['vec4i', 'vec4u', 'vec4f'] as const)\n          : (['vec4i', 'vec4u', 'vec4f', 'vec4h'] as const)\n      )\n      .combine('indexType', ['i32', 'u32'] as const)\n  )\n  .beforeAllSubcases(t => {\n    if (t.params.elementType === 'vec4h') {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(async t => {\n    const elementType = Type[t.params.elementType];\n    const indexType = Type[t.params.indexType];\n    const cases: Case[] = [\n      {\n        input: [\n          array(\n            /* 0 */ elementType.create([0x10, 0x11, 0x12, 0x13]),\n            /* 1 */ elementType.create([0x14, 0x15, 0x16, 0x17]),\n            /* 2 */ elementType.create([0x18, 0x19, 0x1a, 0x1b])\n          ),\n          indexType.create(0),\n        ],\n        expected: elementType.create([0x10, 0x11, 0x12, 0x13]),\n      },\n      {\n        input: [\n          array(\n            /* 0 */ elementType.create([0x20, 0x21, 0x22, 0x23]),\n            /* 1 */ elementType.create([0x24, 0x25, 0x26, 0x27]),\n            /* 2 */ elementType.create([0x28, 0x29, 0x2a, 0x2b])\n          ),\n          indexType.create(1),\n        ],\n        expected: elementType.create([0x24, 0x25, 0x26, 0x27]),\n      },\n      {\n        input: [\n          array(\n            /* 0 */ elementType.create([0x30, 0x31, 0x32, 0x33]),\n            /* 1 */ elementType.create([0x34, 0x35, 0x36, 0x37]),\n            /* 2 */ elementType.create([0x38, 0x39, 0x3a, 0x3b])\n          ),\n          indexType.create(2),\n        ],\n        expected: elementType.create([0x38, 0x39, 0x3a, 0x3b]),\n      },\n    ];\n    await run(\n      t,\n      basicExpressionBuilder(ops => `${ops[0]}[${ops[1]}]`),\n      [Type.array(3, elementType), indexType],\n      elementType,\n      t.params,\n      cases\n    );\n  });\n"],"mappings":"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"}