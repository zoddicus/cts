{"version":3,"file":"index.spec.js","names":["description","makeTestGroup","GPUTest","MatrixValue","Type","abstractFloat","f32","vec","align","allInputSources","basicExpressionBuilder","run","g","test","specURL","desc","params","u","combine","beforeAllSubcases","t","elementType","selectDeviceOrSkipTestCase","fn","indexType","matrixType","mat","columns","rows","columnType","elements","c","column","r","push","create","vector","cases","input","expected","ops","columnValues","matrix","vecfColumnType","values","map","v","inputSource","cols","Array","from","keys","wgsl","join","pipeline","device","createComputePipeline","layout","compute","module","createShaderModule","code","entryPoint","bufferSize","arr","offset","alignment","value","Math","max","type","size","toArray","array","Uint8Array","copyTo","i","outputBuffer","createBufferTracked","usage","GPUBufferUsage","STORAGE","COPY_SRC","bindGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","buffer","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","queue","submit","finish","expectGPUBufferValuesEqual"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/access/matrix/index.spec.ts"],"sourcesContent":["export const description = `\nExecution Tests for matrix indexing expressions\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport {\n  MatrixValue,\n  ScalarValue,\n  Type,\n  abstractFloat,\n  f32,\n  vec,\n  Value,\n} from '../../../../../util/conversion.js';\nimport { align } from '../../../../../util/math.js';\nimport { Case } from '../../case.js';\nimport { allInputSources, basicExpressionBuilder, run } from '../../expression.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('concrete_float_column')\n  .specURL('https://www.w3.org/TR/WGSL/#matrix-access-expr')\n  .desc(`Test indexing a column vector from a concrete matrix`)\n  .params(u =>\n    u\n      .combine('inputSource', allInputSources)\n      .combine('elementType', ['f32', 'f16'] as const)\n      .combine('indexType', ['i32', 'u32'] as const)\n      .combine('columns', [2, 3, 4] as const)\n      .combine('rows', [2, 3, 4] as const)\n  )\n  .beforeAllSubcases(t => {\n    if (t.params.elementType === 'f16') {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(async t => {\n    const elementType = Type[t.params.elementType];\n    const indexType = Type[t.params.indexType];\n    const matrixType = Type.mat(t.params.columns, t.params.rows, elementType);\n    const columnType = Type.vec(t.params.rows, elementType);\n    const elements: ScalarValue[][] = [];\n    for (let c = 0; c < t.params.columns; c++) {\n      const column: ScalarValue[] = [];\n      for (let r = 0; r < t.params.rows; r++) {\n        column.push(elementType.create((c + 1) * 10 + (r + 1)));\n      }\n      elements.push(column);\n    }\n    const vector = new MatrixValue(elements);\n    const cases: Case[] = [];\n    for (let c = 0; c < t.params.columns; c++) {\n      cases.push({\n        input: [vector, indexType.create(c)],\n        expected: vec(...elements[c]),\n      });\n    }\n\n    await run(\n      t,\n      basicExpressionBuilder(ops => `${ops[0]}[${ops[1]}]`),\n      [matrixType, indexType],\n      columnType,\n      t.params,\n      cases\n    );\n  });\n\ng.test('concrete_float_element')\n  .specURL('https://www.w3.org/TR/WGSL/#matrix-access-expr')\n  .desc(`Test indexing a single element from a concrete matrix`)\n  .params(u =>\n    u\n      .combine('inputSource', allInputSources)\n      .combine('elementType', ['f32', 'f16'] as const)\n      .combine('indexType', ['i32', 'u32'] as const)\n      .combine('columns', [2, 3, 4] as const)\n      .combine('rows', [2, 3, 4] as const)\n  )\n  .beforeAllSubcases(t => {\n    if (t.params.elementType === 'f16') {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(async t => {\n    const elementType = Type[t.params.elementType];\n    const indexType = Type[t.params.indexType];\n    const matrixType = Type.mat(t.params.columns, t.params.rows, elementType);\n    const columnValues: ScalarValue[][] = [];\n    for (let c = 0; c < t.params.columns; c++) {\n      const column: ScalarValue[] = [];\n      for (let r = 0; r < t.params.rows; r++) {\n        column.push(elementType.create((c + 1) * 10 + (r + 1)));\n      }\n      columnValues.push(column);\n    }\n    const matrix = new MatrixValue(columnValues);\n    const cases: Case[] = [];\n    for (let c = 0; c < t.params.columns; c++) {\n      for (let r = 0; r < t.params.rows; r++) {\n        cases.push({\n          input: [matrix, indexType.create(c), indexType.create(r)],\n          expected: columnValues[c][r],\n        });\n      }\n    }\n\n    await run(\n      t,\n      basicExpressionBuilder(ops => `${ops[0]}[${ops[1]}][${ops[2]}]`),\n      [matrixType, indexType, indexType],\n      elementType,\n      t.params,\n      cases\n    );\n  });\n\ng.test('abstract_float_column')\n  .specURL('https://www.w3.org/TR/WGSL/#matrix-access-expr')\n  .desc(`Test indexing a column vector from a abstract-float matrix`)\n  .params(u =>\n    u\n      .combine('indexType', ['i32', 'u32'] as const)\n      .combine('columns', [2, 3, 4] as const)\n      .combine('rows', [2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const indexType = Type[t.params.indexType];\n    const matrixType = Type.mat(t.params.columns, t.params.rows, Type.abstractFloat);\n    const vecfColumnType = Type.vec(t.params.rows, Type.f32);\n    const values: number[][] = [];\n    for (let c = 0; c < t.params.columns; c++) {\n      const column: number[] = [];\n      for (let r = 0; r < t.params.rows; r++) {\n        column.push((c + 1) * 10 + (r + 1));\n      }\n      values.push(column);\n    }\n    const matrix = new MatrixValue(\n      values.map(column => column.map(v => abstractFloat(v * 0x100000000)))\n    );\n    const cases: Case[] = [];\n    for (let c = 0; c < t.params.columns; c++) {\n      cases.push({\n        input: [matrix, indexType.create(c)],\n        expected: vec(...values[c].map(v => f32(v))),\n      });\n    }\n\n    await run(\n      t,\n      basicExpressionBuilder(ops => `${ops[0]}[${ops[1]}] / 0x100000000`),\n      [matrixType, indexType],\n      vecfColumnType,\n      { inputSource: 'const' },\n      cases\n    );\n  });\n\ng.test('abstract_float_element')\n  .specURL('https://www.w3.org/TR/WGSL/#matrix-access-expr')\n  .desc(`Test indexing a single element from a abstract-float matrix`)\n  .params(u =>\n    u\n      .combine('indexType', ['i32', 'u32'] as const)\n      .combine('columns', [2, 3, 4] as const)\n      .combine('rows', [2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const indexType = Type[t.params.indexType];\n    const matrixType = Type.mat(t.params.columns, t.params.rows, Type.abstractFloat);\n    const values: number[][] = [];\n    for (let c = 0; c < t.params.columns; c++) {\n      const column: number[] = [];\n      for (let r = 0; r < t.params.rows; r++) {\n        column.push((c + 1) * 10 + (r + 1));\n      }\n      values.push(column);\n    }\n    const matrix = new MatrixValue(\n      values.map(column => column.map(v => abstractFloat(v * 0x100000000)))\n    );\n    const cases: Case[] = [];\n    for (let c = 0; c < t.params.columns; c++) {\n      for (let r = 0; r < t.params.rows; r++) {\n        cases.push({\n          input: [matrix, indexType.create(c), indexType.create(r)],\n          expected: f32(values[c][r]),\n        });\n      }\n    }\n\n    await run(\n      t,\n      basicExpressionBuilder(ops => `${ops[0]}[${ops[1]}][${ops[2]}] / 0x100000000`),\n      [matrixType, indexType, indexType],\n      Type.f32,\n      { inputSource: 'const' },\n      cases\n    );\n  });\n\ng.test('non_const_index')\n  .specURL('https://www.w3.org/TR/WGSL/#matrix-access-expr')\n  .desc(`Test indexing of a matrix using non-const index`)\n  .params(u => u.combine('columns', [2, 3, 4] as const).combine('rows', [2, 3, 4] as const))\n  .fn(t => {\n    const cols = t.params.columns;\n    const rows = t.params.rows;\n    const values = Array.from(Array(cols * rows).keys());\n    const wgsl = `\n@group(0) @binding(0) var<storage, read_write> output : array<f32, ${cols * rows}>;\n\n@compute @workgroup_size(${cols}, ${rows})\nfn main(@builtin(local_invocation_id) invocation_id : vec3<u32>) {\n  let m = mat${cols}x${rows}f(${values.join(', ')});\n  output[invocation_id.x*${rows} + invocation_id.y] = m[invocation_id.x][invocation_id.y];\n}\n`;\n\n    const pipeline = t.device.createComputePipeline({\n      layout: 'auto',\n      compute: {\n        module: t.device.createShaderModule({ code: wgsl }),\n        entryPoint: 'main',\n      },\n    });\n\n    const bufferSize = (arr: Value[]) => {\n      let offset = 0;\n      let alignment = 0;\n      for (const value of arr) {\n        alignment = Math.max(alignment, value.type.alignment);\n        offset = align(offset, value.type.alignment) + value.type.size;\n      }\n      return align(offset, alignment);\n    };\n\n    const toArray = (arr: Value[]) => {\n      const array = new Uint8Array(bufferSize(arr));\n      let offset = 0;\n      for (const value of arr) {\n        offset = align(offset, value.type.alignment);\n        value.copyTo(array, offset);\n        offset += value.type.size;\n      }\n      return array;\n    };\n\n    const expected = values.map(i => Type['f32'].create(i));\n\n    const outputBuffer = t.createBufferTracked({\n      size: bufferSize(expected),\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n    });\n\n    const bindGroup = t.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [{ binding: 0, resource: { buffer: outputBuffer } }],\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginComputePass();\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bindGroup);\n    pass.dispatchWorkgroups(1);\n    pass.end();\n    t.queue.submit([encoder.finish()]);\n\n    t.expectGPUBufferValuesEqual(outputBuffer, toArray(expected));\n  });\n"],"mappings":"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"}