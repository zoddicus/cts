{"version":3,"file":"index.spec.js","names":["description","makeTestGroup","GPUTest","MatrixValue","Type","abstractFloat","f32","vec","allInputSources","basicExpressionBuilder","run","g","test","specURL","desc","params","u","combine","beforeAllSubcases","t","elementType","selectDeviceOrSkipTestCase","fn","indexType","matrixType","mat","columns","rows","columnType","elements","c","column","r","push","create","vector","cases","input","expected","ops","columnValues","matrix","vecfColumnType","values","map","v","inputSource"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/access/matrix/index.spec.ts"],"sourcesContent":["export const description = `\nExecution Tests for matrix indexing expressions\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport {\n  MatrixValue,\n  ScalarValue,\n  Type,\n  abstractFloat,\n  f32,\n  vec,\n} from '../../../../../util/conversion.js';\nimport { Case } from '../../case.js';\nimport { allInputSources, basicExpressionBuilder, run } from '../../expression.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('concrete_float_column')\n  .specURL('https://www.w3.org/TR/WGSL/#matrix-access-expr')\n  .desc(`Test indexing a column vector from a concrete matrix`)\n  .params(u =>\n    u\n      .combine('inputSource', allInputSources)\n      .combine('elementType', ['f32', 'f16'] as const)\n      .combine('indexType', ['i32', 'u32'] as const)\n      .combine('columns', [2, 3, 4] as const)\n      .combine('rows', [2, 3, 4] as const)\n  )\n  .beforeAllSubcases(t => {\n    if (t.params.elementType === 'f16') {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(async t => {\n    const elementType = Type[t.params.elementType];\n    const indexType = Type[t.params.indexType];\n    const matrixType = Type.mat(t.params.columns, t.params.rows, elementType);\n    const columnType = Type.vec(t.params.rows, elementType);\n    const elements: ScalarValue[][] = [];\n    for (let c = 0; c < t.params.columns; c++) {\n      const column: ScalarValue[] = [];\n      for (let r = 0; r < t.params.rows; r++) {\n        column.push(elementType.create((c + 1) * 10 + (r + 1)));\n      }\n      elements.push(column);\n    }\n    const vector = new MatrixValue(elements);\n    const cases: Case[] = [];\n    for (let c = 0; c < t.params.columns; c++) {\n      cases.push({\n        input: [vector, indexType.create(c)],\n        expected: vec(...elements[c]),\n      });\n    }\n\n    await run(\n      t,\n      basicExpressionBuilder(ops => `${ops[0]}[${ops[1]}]`),\n      [matrixType, indexType],\n      columnType,\n      t.params,\n      cases\n    );\n  });\n\ng.test('concrete_float_element')\n  .specURL('https://www.w3.org/TR/WGSL/#matrix-access-expr')\n  .desc(`Test indexing a single element from a concrete matrix`)\n  .params(u =>\n    u\n      .combine('inputSource', allInputSources)\n      .combine('elementType', ['f32', 'f16'] as const)\n      .combine('indexType', ['i32', 'u32'] as const)\n      .combine('columns', [2, 3, 4] as const)\n      .combine('rows', [2, 3, 4] as const)\n  )\n  .beforeAllSubcases(t => {\n    if (t.params.elementType === 'f16') {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(async t => {\n    const elementType = Type[t.params.elementType];\n    const indexType = Type[t.params.indexType];\n    const matrixType = Type.mat(t.params.columns, t.params.rows, elementType);\n    const columnValues: ScalarValue[][] = [];\n    for (let c = 0; c < t.params.columns; c++) {\n      const column: ScalarValue[] = [];\n      for (let r = 0; r < t.params.rows; r++) {\n        column.push(elementType.create((c + 1) * 10 + (r + 1)));\n      }\n      columnValues.push(column);\n    }\n    const matrix = new MatrixValue(columnValues);\n    const cases: Case[] = [];\n    for (let c = 0; c < t.params.columns; c++) {\n      for (let r = 0; r < t.params.rows; r++) {\n        cases.push({\n          input: [matrix, indexType.create(c), indexType.create(r)],\n          expected: columnValues[c][r],\n        });\n      }\n    }\n\n    await run(\n      t,\n      basicExpressionBuilder(ops => `${ops[0]}[${ops[1]}][${ops[2]}]`),\n      [matrixType, indexType, indexType],\n      elementType,\n      t.params,\n      cases\n    );\n  });\n\ng.test('abstract_float_column')\n  .specURL('https://www.w3.org/TR/WGSL/#matrix-access-expr')\n  .desc(`Test indexing a column vector from a abstract-float matrix`)\n  .params(u =>\n    u\n      .combine('indexType', ['i32', 'u32'] as const)\n      .combine('columns', [2, 3, 4] as const)\n      .combine('rows', [2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const indexType = Type[t.params.indexType];\n    const matrixType = Type.mat(t.params.columns, t.params.rows, Type.abstractFloat);\n    const vecfColumnType = Type.vec(t.params.rows, Type.f32);\n    const values: number[][] = [];\n    for (let c = 0; c < t.params.columns; c++) {\n      const column: number[] = [];\n      for (let r = 0; r < t.params.rows; r++) {\n        column.push((c + 1) * 10 + (r + 1));\n      }\n      values.push(column);\n    }\n    const matrix = new MatrixValue(\n      values.map(column => column.map(v => abstractFloat(v * 0x100000000)))\n    );\n    const cases: Case[] = [];\n    for (let c = 0; c < t.params.columns; c++) {\n      cases.push({\n        input: [matrix, indexType.create(c)],\n        expected: vec(...values[c].map(v => f32(v))),\n      });\n    }\n\n    await run(\n      t,\n      basicExpressionBuilder(ops => `${ops[0]}[${ops[1]}] / 0x100000000`),\n      [matrixType, indexType],\n      vecfColumnType,\n      { inputSource: 'const' },\n      cases\n    );\n  });\n\ng.test('abstract_float_element')\n  .specURL('https://www.w3.org/TR/WGSL/#matrix-access-expr')\n  .desc(`Test indexing a single element from a abstract-float matrix`)\n  .params(u =>\n    u\n      .combine('indexType', ['i32', 'u32'] as const)\n      .combine('columns', [2, 3, 4] as const)\n      .combine('rows', [2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const indexType = Type[t.params.indexType];\n    const matrixType = Type.mat(t.params.columns, t.params.rows, Type.abstractFloat);\n    const values: number[][] = [];\n    for (let c = 0; c < t.params.columns; c++) {\n      const column: number[] = [];\n      for (let r = 0; r < t.params.rows; r++) {\n        column.push((c + 1) * 10 + (r + 1));\n      }\n      values.push(column);\n    }\n    const matrix = new MatrixValue(\n      values.map(column => column.map(v => abstractFloat(v * 0x100000000)))\n    );\n    const cases: Case[] = [];\n    for (let c = 0; c < t.params.columns; c++) {\n      for (let r = 0; r < t.params.rows; r++) {\n        cases.push({\n          input: [matrix, indexType.create(c), indexType.create(r)],\n          expected: f32(values[c][r]),\n        });\n      }\n    }\n\n    await run(\n      t,\n      basicExpressionBuilder(ops => `${ops[0]}[${ops[1]}][${ops[2]}] / 0x100000000`),\n      [matrixType, indexType, indexType],\n      Type.f32,\n      { inputSource: 'const' },\n      cases\n    );\n  });\n"],"mappings":"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"}