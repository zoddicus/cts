{"version":3,"file":"f16_matrix_matrix_multiplication.spec.js","names":["description","makeTestGroup","GPUTest","TypeF16","TypeMat","FP","sparseMatrixF16Range","makeCaseCache","allInputSources","run","binary","compoundBinary","g","mat_mat_cases","flatMap","k","cols","rows","map","nonConst","f16","generateMatrixPairToMatrixCases","multiplicationMatrixMatrixInterval","reduce","a","b","d","test","specURL","desc","params","u","combine","beforeAllSubcases","t","selectDeviceOrSkipTestCase","requiredFeatures","fn","x_cols","common_dim","x_rows","y_cols","y_rows","cases","get","inputSource"],"sources":["../../../../../../src/webgpu/shader/execution/expression/binary/f16_matrix_matrix_multiplication.spec.ts"],"sourcesContent":["export const description = `\nExecution Tests for matrix-matrix f16 multiplication expression\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../gpu_test.js';\nimport { TypeF16, TypeMat } from '../../../../util/conversion.js';\nimport { FP } from '../../../../util/floating_point.js';\nimport { sparseMatrixF16Range } from '../../../../util/math.js';\nimport { makeCaseCache } from '../case_cache.js';\nimport { allInputSources, run } from '../expression.js';\n\nimport { binary, compoundBinary } from './binary.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n// Cases: matKxR_matCxK_[non_]const\nconst mat_mat_cases = ([2, 3, 4] as const)\n  .flatMap(k =>\n    ([2, 3, 4] as const).flatMap(cols =>\n      ([2, 3, 4] as const).flatMap(rows =>\n        ([true, false] as const).map(nonConst => ({\n          [`mat${k}x${rows}_mat${cols}x${k}_${nonConst ? 'non_const' : 'const'}`]: () => {\n            return FP.f16.generateMatrixPairToMatrixCases(\n              sparseMatrixF16Range(k, rows),\n              sparseMatrixF16Range(cols, k),\n              nonConst ? 'unfiltered' : 'finite',\n              FP.f16.multiplicationMatrixMatrixInterval\n            );\n          },\n        }))\n      )\n    )\n  )\n  .reduce((a, b) => ({ ...a, ...b }), {});\n\nexport const d = makeCaseCache('binary/f16_matrix_matrix_multiplication', mat_mat_cases);\n\ng.test('matrix_matrix')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x * y, where x is a matrix and y is a matrix\nAccuracy: Correctly rounded\n`\n  )\n  .params(u =>\n    u\n      .combine('inputSource', allInputSources)\n      .combine('common_dim', [2, 3, 4] as const)\n      .combine('x_rows', [2, 3, 4] as const)\n      .combine('y_cols', [2, 3, 4] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase({ requiredFeatures: ['shader-f16'] });\n  })\n  .fn(async t => {\n    const x_cols = t.params.common_dim;\n    const x_rows = t.params.x_rows;\n    const y_cols = t.params.y_cols;\n    const y_rows = t.params.common_dim;\n\n    const cases = await d.get(\n      t.params.inputSource === 'const'\n        ? `mat${x_cols}x${x_rows}_mat${y_cols}x${y_rows}_const`\n        : `mat${x_cols}x${x_rows}_mat${y_cols}x${y_rows}_non_const`\n    );\n    await run(\n      t,\n      binary('*'),\n      [TypeMat(x_cols, x_rows, TypeF16), TypeMat(y_cols, y_rows, TypeF16)],\n      TypeMat(y_cols, x_rows, TypeF16),\n      t.params,\n      cases\n    );\n  });\n\ng.test('matrix_matrix_compound')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x *= y, where x is a matrix and y is a matrix\nAccuracy: Correctly rounded\n`\n  )\n  .params(u =>\n    u\n      .combine('inputSource', allInputSources)\n      .combine('common_dim', [2, 3, 4] as const)\n      .combine('x_rows', [2, 3, 4] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase({ requiredFeatures: ['shader-f16'] });\n  })\n  .fn(async t => {\n    const x_cols = t.params.common_dim;\n    const x_rows = t.params.x_rows;\n    const y_cols = x_cols;\n    const y_rows = t.params.common_dim;\n\n    const cases = await d.get(\n      t.params.inputSource === 'const'\n        ? `mat${x_cols}x${x_rows}_mat${y_cols}x${y_rows}_const`\n        : `mat${x_cols}x${x_rows}_mat${y_cols}x${y_rows}_non_const`\n    );\n    await run(\n      t,\n      compoundBinary('*='),\n      [TypeMat(x_cols, x_rows, TypeF16), TypeMat(y_cols, y_rows, TypeF16)],\n      TypeMat(y_cols, x_rows, TypeF16),\n      t.params,\n      cases\n    );\n  });\n"],"mappings":"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"}