{"version":3,"file":"f32_matrix_scalar_multiplication.cache.js","names":["FP","sparseMatrixF32Range","sparseScalarF32Range","makeCaseCache","mat_scalar_cases","flatMap","cols","rows","map","nonConst","f32","generateMatrixScalarToMatrixCases","multiplicationMatrixScalarInterval","reduce","a","b","scalar_mat_cases","generateScalarMatrixToMatrixCases","multiplicationScalarMatrixInterval","d"],"sources":["../../../../../../src/webgpu/shader/execution/expression/binary/f32_matrix_scalar_multiplication.cache.ts"],"sourcesContent":["import { FP } from '../../../../util/floating_point.js';\nimport { sparseMatrixF32Range, sparseScalarF32Range } from '../../../../util/math.js';\nimport { makeCaseCache } from '../case_cache.js';\n\n// Cases: matCxR_scalar_[non_]const\nconst mat_scalar_cases = ([2, 3, 4] as const)\n  .flatMap(cols =>\n    ([2, 3, 4] as const).flatMap(rows =>\n      ([true, false] as const).map(nonConst => ({\n        [`mat${cols}x${rows}_scalar_${nonConst ? 'non_const' : 'const'}`]: () => {\n          return FP.f32.generateMatrixScalarToMatrixCases(\n            sparseMatrixF32Range(cols, rows),\n            sparseScalarF32Range(),\n            nonConst ? 'unfiltered' : 'finite',\n            FP.f32.multiplicationMatrixScalarInterval\n          );\n        },\n      }))\n    )\n  )\n  .reduce((a, b) => ({ ...a, ...b }), {});\n\n// Cases: scalar_matCxR_[non_]const\nconst scalar_mat_cases = ([2, 3, 4] as const)\n  .flatMap(cols =>\n    ([2, 3, 4] as const).flatMap(rows =>\n      ([true, false] as const).map(nonConst => ({\n        [`scalar_mat${cols}x${rows}_${nonConst ? 'non_const' : 'const'}`]: () => {\n          return FP.f32.generateScalarMatrixToMatrixCases(\n            sparseScalarF32Range(),\n            sparseMatrixF32Range(cols, rows),\n            nonConst ? 'unfiltered' : 'finite',\n            FP.f32.multiplicationScalarMatrixInterval\n          );\n        },\n      }))\n    )\n  )\n  .reduce((a, b) => ({ ...a, ...b }), {});\n\nexport const d = makeCaseCache('binary/f32_matrix_scalar_multiplication', {\n  ...mat_scalar_cases,\n  ...scalar_mat_cases,\n});\n"],"mappings":";;GAAA,SAASA,EAAE,QAAQ,oCAAoC,CACvD,SAASC,oBAAoB,EAAEC,oBAAoB,QAAQ,0BAA0B,CACrF,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,MAAMC,gBAAgB,GAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAChCC,OAAO,CAAC,CAAAC,IAAI;AACV,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAWD,OAAO,CAAC,CAAAE,IAAI;AAC9B,CAAC,IAAI,EAAE,KAAK,CAAC,CAAWC,GAAG,CAAC,CAAAC,QAAQ,MAAK;EACxC,CAAE,MAAKH,IAAK,IAAGC,IAAK,WAAUE,QAAQ,GAAG,WAAW,GAAG,OAAQ,EAAC,GAAG,MAAM;IACvE,OAAOT,EAAE,CAACU,GAAG,CAACC,iCAAiC;MAC7CV,oBAAoB,CAACK,IAAI,EAAEC,IAAI,CAAC;MAChCL,oBAAoB,CAAC,CAAC;MACtBO,QAAQ,GAAG,YAAY,GAAG,QAAQ;MAClCT,EAAE,CAACU,GAAG,CAACE;IACT,CAAC;EACH;AACF,CAAC,CAAC;AACJ;AACF,CAAC;AACAC,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,MAAM,EAAE,GAAGD,CAAC,EAAE,GAAGC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;AAEzC;AACA,MAAMC,gBAAgB,GAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAChCX,OAAO,CAAC,CAAAC,IAAI;AACV,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAWD,OAAO,CAAC,CAAAE,IAAI;AAC9B,CAAC,IAAI,EAAE,KAAK,CAAC,CAAWC,GAAG,CAAC,CAAAC,QAAQ,MAAK;EACxC,CAAE,aAAYH,IAAK,IAAGC,IAAK,IAAGE,QAAQ,GAAG,WAAW,GAAG,OAAQ,EAAC,GAAG,MAAM;IACvE,OAAOT,EAAE,CAACU,GAAG,CAACO,iCAAiC;MAC7Cf,oBAAoB,CAAC,CAAC;MACtBD,oBAAoB,CAACK,IAAI,EAAEC,IAAI,CAAC;MAChCE,QAAQ,GAAG,YAAY,GAAG,QAAQ;MAClCT,EAAE,CAACU,GAAG,CAACQ;IACT,CAAC;EACH;AACF,CAAC,CAAC;AACJ;AACF,CAAC;AACAL,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,MAAM,EAAE,GAAGD,CAAC,EAAE,GAAGC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;AAEzC,OAAO,MAAMI,CAAC,GAAGhB,aAAa,CAAC,yCAAyC,EAAE;EACxE,GAAGC,gBAAgB;EACnB,GAAGY;AACL,CAAC,CAAC"}