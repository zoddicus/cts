{"version":3,"file":"af_division.cache.js","names":["FP","sparseScalarF64Range","sparseVectorF64Range","makeCaseCache","divisionVectorScalarInterval","v","s","abstract","toVector","map","e","divisionInterval","divisionScalarVectorInterval","scalar_cases","scalar","generateScalarPairToIntervalCases","vector_scalar_cases","dim","generateVectorScalarToVectorCases","reduce","a","b","scalar_vector_cases","generateScalarVectorToVectorCases","d"],"sources":["../../../../../../src/webgpu/shader/execution/expression/binary/af_division.cache.ts"],"sourcesContent":["import { FP, FPVector } from '../../../../util/floating_point.js';\nimport { sparseScalarF64Range, sparseVectorF64Range } from '../../../../util/math.js';\nimport { makeCaseCache } from '../case_cache.js';\n\nconst divisionVectorScalarInterval = (v: readonly number[], s: number): FPVector => {\n  return FP.abstract.toVector(v.map(e => FP.abstract.divisionInterval(e, s)));\n};\n\nconst divisionScalarVectorInterval = (s: number, v: readonly number[]): FPVector => {\n  return FP.abstract.toVector(v.map(e => FP.abstract.divisionInterval(s, e)));\n};\n\nconst scalar_cases = {\n  ['scalar']: () => {\n    return FP.abstract.generateScalarPairToIntervalCases(\n      sparseScalarF64Range(),\n      sparseScalarF64Range(),\n      'finite',\n      FP.abstract.divisionInterval\n    );\n  },\n};\n\nconst vector_scalar_cases = ([2, 3, 4] as const)\n  .map(dim => ({\n    [`vec${dim}_scalar`]: () => {\n      return FP.abstract.generateVectorScalarToVectorCases(\n        sparseVectorF64Range(dim),\n        sparseScalarF64Range(),\n        'finite',\n        divisionVectorScalarInterval\n      );\n    },\n  }))\n  .reduce((a, b) => ({ ...a, ...b }), {});\n\nconst scalar_vector_cases = ([2, 3, 4] as const)\n  .map(dim => ({\n    [`scalar_vec${dim}`]: () => {\n      return FP.abstract.generateScalarVectorToVectorCases(\n        sparseScalarF64Range(),\n        sparseVectorF64Range(dim),\n        'finite',\n        divisionScalarVectorInterval\n      );\n    },\n  }))\n  .reduce((a, b) => ({ ...a, ...b }), {});\n\nexport const d = makeCaseCache('binary/af_division', {\n  ...scalar_cases,\n  ...vector_scalar_cases,\n  ...scalar_vector_cases,\n});\n"],"mappings":";;GAAA,SAASA,EAAE,QAAkB,oCAAoC,CACjE,SAASC,oBAAoB,EAAEC,oBAAoB,QAAQ,0BAA0B,CACrF,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD,MAAMC,4BAA4B,GAAGA,CAACC,CAAoB,EAAEC,CAAS,KAAe;EAClF,OAAON,EAAE,CAACO,QAAQ,CAACC,QAAQ,CAACH,CAAC,CAACI,GAAG,CAAC,CAAAC,CAAC,KAAIV,EAAE,CAACO,QAAQ,CAACI,gBAAgB,CAACD,CAAC,EAAEJ,CAAC,CAAC,CAAC,CAAC;AAC7E,CAAC;;AAED,MAAMM,4BAA4B,GAAGA,CAACN,CAAS,EAAED,CAAoB,KAAe;EAClF,OAAOL,EAAE,CAACO,QAAQ,CAACC,QAAQ,CAACH,CAAC,CAACI,GAAG,CAAC,CAAAC,CAAC,KAAIV,EAAE,CAACO,QAAQ,CAACI,gBAAgB,CAACL,CAAC,EAAEI,CAAC,CAAC,CAAC,CAAC;AAC7E,CAAC;;AAED,MAAMG,YAAY,GAAG;EACnB,CAAC,QAAQ,GAAGC,CAAA,KAAM;IAChB,OAAOd,EAAE,CAACO,QAAQ,CAACQ,iCAAiC;MAClDd,oBAAoB,CAAC,CAAC;MACtBA,oBAAoB,CAAC,CAAC;MACtB,QAAQ;MACRD,EAAE,CAACO,QAAQ,CAACI;IACd,CAAC;EACH;AACF,CAAC;;AAED,MAAMK,mBAAmB,GAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AACnCP,GAAG,CAAC,CAAAQ,GAAG,MAAK;EACX,CAAE,MAAKA,GAAI,SAAQ,GAAG,MAAM;IAC1B,OAAOjB,EAAE,CAACO,QAAQ,CAACW,iCAAiC;MAClDhB,oBAAoB,CAACe,GAAG,CAAC;MACzBhB,oBAAoB,CAAC,CAAC;MACtB,QAAQ;MACRG;IACF,CAAC;EACH;AACF,CAAC,CAAC,CAAC;AACFe,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,MAAM,EAAE,GAAGD,CAAC,EAAE,GAAGC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;AAEzC,MAAMC,mBAAmB,GAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AACnCb,GAAG,CAAC,CAAAQ,GAAG,MAAK;EACX,CAAE,aAAYA,GAAI,EAAC,GAAG,MAAM;IAC1B,OAAOjB,EAAE,CAACO,QAAQ,CAACgB,iCAAiC;MAClDtB,oBAAoB,CAAC,CAAC;MACtBC,oBAAoB,CAACe,GAAG,CAAC;MACzB,QAAQ;MACRL;IACF,CAAC;EACH;AACF,CAAC,CAAC,CAAC;AACFO,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,MAAM,EAAE,GAAGD,CAAC,EAAE,GAAGC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;AAEzC,OAAO,MAAMG,CAAC,GAAGrB,aAAa,CAAC,oBAAoB,EAAE;EACnD,GAAGU,YAAY;EACf,GAAGG,mBAAmB;EACtB,GAAGM;AACL,CAAC,CAAC"}