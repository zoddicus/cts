{"version":3,"file":"bitwise.spec.js","names":["description","makeTestGroup","GPUTest","i32","scalarType","u32","allInputSources","run","binary","compoundBinary","g","makeBitwiseOrCases","inputType","V","cases","input","expected","i","lhs","j","rhs","push","test","specURL","desc","params","u","combine","undefined","fn","t","type","makeBitwiseAndCases","makeBitwiseExcluseOrCases"],"sources":["../../../../../../src/webgpu/shader/execution/expression/binary/bitwise.spec.ts"],"sourcesContent":["export const description = `\nExecution Tests for the bitwise binary expression operations\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../gpu_test.js';\nimport { i32, scalarType, u32 } from '../../../../util/conversion.js';\nimport { allInputSources, run } from '../expression.js';\n\nimport { binary, compoundBinary } from './binary.js';\n\nexport const g = makeTestGroup(GPUTest);\n\nfunction makeBitwiseOrCases(inputType: string) {\n  const V = inputType === 'i32' ? i32 : u32;\n  const cases = [\n    // Static patterns\n    {\n      input: [V(0b00000000000000000000000000000000), V(0b00000000000000000000000000000000)],\n      expected: V(0b00000000000000000000000000000000),\n    },\n    {\n      input: [V(0b11111111111111111111111111111111), V(0b00000000000000000000000000000000)],\n      expected: V(0b11111111111111111111111111111111),\n    },\n    {\n      input: [V(0b00000000000000000000000000000000), V(0b11111111111111111111111111111111)],\n      expected: V(0b11111111111111111111111111111111),\n    },\n    {\n      input: [V(0b11111111111111111111111111111111), V(0b11111111111111111111111111111111)],\n      expected: V(0b11111111111111111111111111111111),\n    },\n    {\n      input: [V(0b10100100010010100100010010100100), V(0b00000000000000000000000000000000)],\n      expected: V(0b10100100010010100100010010100100),\n    },\n    {\n      input: [V(0b00000000000000000000000000000000), V(0b10100100010010100100010010100100)],\n      expected: V(0b10100100010010100100010010100100),\n    },\n    {\n      input: [V(0b01010010001001010010001001010010), V(0b10100100010010100100010010100100)],\n      expected: V(0b11110110011011110110011011110110),\n    },\n  ];\n  // Permute all combinations of a single bit being set for the LHS and RHS\n  for (let i = 0; i < 32; i++) {\n    const lhs = 1 << i;\n    for (let j = 0; j < 32; j++) {\n      const rhs = 1 << j;\n      cases.push({\n        input: [V(lhs), V(rhs)],\n        expected: V(lhs | rhs),\n      });\n    }\n  }\n  return cases;\n}\n\ng.test('bitwise_or')\n  .specURL('https://www.w3.org/TR/WGSL/#bit-expr')\n  .desc(\n    `\ne1 | e2: T\nT is i32, u32, vecN<i32>, or vecN<u32>\n\nBitwise-or. Component-wise when T is a vector.\n`\n  )\n  .params(u =>\n    u\n      .combine('type', ['i32', 'u32'] as const)\n      .combine('inputSource', allInputSources)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const type = scalarType(t.params.type);\n    const cases = makeBitwiseOrCases(t.params.type);\n\n    await run(t, binary('|'), [type, type], type, t.params, cases);\n  });\n\ng.test('bitwise_or_compound')\n  .specURL('https://www.w3.org/TR/WGSL/#bit-expr')\n  .desc(\n    `\ne1 |= e2: T\nT is i32, u32, vecN<i32>, or vecN<u32>\n\nBitwise-or. Component-wise when T is a vector.\n`\n  )\n  .params(u =>\n    u\n      .combine('type', ['i32', 'u32'] as const)\n      .combine('inputSource', allInputSources)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const type = scalarType(t.params.type);\n    const cases = makeBitwiseOrCases(t.params.type);\n\n    await run(t, compoundBinary('|='), [type, type], type, t.params, cases);\n  });\n\nfunction makeBitwiseAndCases(inputType: string) {\n  const V = inputType === 'i32' ? i32 : u32;\n  const cases = [\n    // Static patterns\n    {\n      input: [V(0b00000000000000000000000000000000), V(0b00000000000000000000000000000000)],\n      expected: V(0b00000000000000000000000000000000),\n    },\n    {\n      input: [V(0b11111111111111111111111111111111), V(0b00000000000000000000000000000000)],\n      expected: V(0b00000000000000000000000000000000),\n    },\n    {\n      input: [V(0b00000000000000000000000000000000), V(0b11111111111111111111111111111111)],\n      expected: V(0b00000000000000000000000000000000),\n    },\n    {\n      input: [V(0b11111111111111111111111111111111), V(0b11111111111111111111111111111111)],\n      expected: V(0b11111111111111111111111111111111),\n    },\n    {\n      input: [V(0b10100100010010100100010010100100), V(0b00000000000000000000000000000000)],\n      expected: V(0b00000000000000000000000000000000),\n    },\n    {\n      input: [V(0b10100100010010100100010010100100), V(0b11111111111111111111111111111111)],\n      expected: V(0b10100100010010100100010010100100),\n    },\n    {\n      input: [V(0b00000000000000000000000000000000), V(0b10100100010010100100010010100100)],\n      expected: V(0b00000000000000000000000000000000),\n    },\n    {\n      input: [V(0b11111111111111111111111111111111), V(0b10100100010010100100010010100100)],\n      expected: V(0b10100100010010100100010010100100),\n    },\n    {\n      input: [V(0b01010010001001010010001001010010), V(0b01011011101101011011101101011011)],\n      expected: V(0b01010010001001010010001001010010),\n    },\n  ];\n  // Permute all combinations of a single bit being set for the LHS and all but one bit set for the RHS\n  for (let i = 0; i < 32; i++) {\n    const lhs = 1 << i;\n    for (let j = 0; j < 32; j++) {\n      const rhs = 0xffffffff ^ (1 << j);\n      cases.push({\n        input: [V(lhs), V(rhs)],\n        expected: V(lhs & rhs),\n      });\n    }\n  }\n  return cases;\n}\n\ng.test('bitwise_and')\n  .specURL('https://www.w3.org/TR/WGSL/#bit-expr')\n  .desc(\n    `\ne1 & e2: T\nT is i32, u32, vecN<i32>, or vecN<u32>\n\nBitwise-and. Component-wise when T is a vector.\n`\n  )\n  .params(u =>\n    u\n      .combine('type', ['i32', 'u32'] as const)\n      .combine('inputSource', allInputSources)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const type = scalarType(t.params.type);\n    const cases = makeBitwiseAndCases(t.params.type);\n    await run(t, binary('&'), [type, type], type, t.params, cases);\n  });\n\ng.test('bitwise_and_compound')\n  .specURL('https://www.w3.org/TR/WGSL/#bit-expr')\n  .desc(\n    `\ne1 &= e2: T\nT is i32, u32, vecN<i32>, or vecN<u32>\n\nBitwise-and. Component-wise when T is a vector.\n`\n  )\n  .params(u =>\n    u\n      .combine('type', ['i32', 'u32'] as const)\n      .combine('inputSource', allInputSources)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const type = scalarType(t.params.type);\n    const cases = makeBitwiseAndCases(t.params.type);\n    await run(t, compoundBinary('&='), [type, type], type, t.params, cases);\n  });\n\nfunction makeBitwiseExcluseOrCases(inputType: string) {\n  const V = inputType === 'i32' ? i32 : u32;\n  const cases = [\n    // Static patterns\n    {\n      input: [V(0b00000000000000000000000000000000), V(0b00000000000000000000000000000000)],\n      expected: V(0b00000000000000000000000000000000),\n    },\n    {\n      input: [V(0b11111111111111111111111111111111), V(0b00000000000000000000000000000000)],\n      expected: V(0b11111111111111111111111111111111),\n    },\n    {\n      input: [V(0b00000000000000000000000000000000), V(0b11111111111111111111111111111111)],\n      expected: V(0b11111111111111111111111111111111),\n    },\n    {\n      input: [V(0b11111111111111111111111111111111), V(0b11111111111111111111111111111111)],\n      expected: V(0b00000000000000000000000000000000),\n    },\n    {\n      input: [V(0b10100100010010100100010010100100), V(0b00000000000000000000000000000000)],\n      expected: V(0b10100100010010100100010010100100),\n    },\n    {\n      input: [V(0b10100100010010100100010010100100), V(0b11111111111111111111111111111111)],\n      expected: V(0b01011011101101011011101101011011),\n    },\n    {\n      input: [V(0b00000000000000000000000000000000), V(0b10100100010010100100010010100100)],\n      expected: V(0b10100100010010100100010010100100),\n    },\n    {\n      input: [V(0b11111111111111111111111111111111), V(0b10100100010010100100010010100100)],\n      expected: V(0b01011011101101011011101101011011),\n    },\n    {\n      input: [V(0b01010010001001010010001001010010), V(0b01011011101101011011101101011011)],\n      expected: V(0b00001001100100001001100100001001),\n    },\n  ];\n  // Permute all combinations of a single bit being set for the LHS and all but one bit set for the RHS\n  for (let i = 0; i < 32; i++) {\n    const lhs = 1 << i;\n    for (let j = 0; j < 32; j++) {\n      const rhs = 0xffffffff ^ (1 << j);\n      cases.push({\n        input: [V(lhs), V(rhs)],\n        expected: V(lhs ^ rhs),\n      });\n    }\n  }\n  return cases;\n}\n\ng.test('bitwise_exclusive_or')\n  .specURL('https://www.w3.org/TR/WGSL/#bit-expr')\n  .desc(\n    `\ne1 ^ e2: T\nT is i32, u32, vecN<i32>, or vecN<u32>\n\nBitwise-exclusive-or. Component-wise when T is a vector.\n`\n  )\n  .params(u =>\n    u\n      .combine('type', ['i32', 'u32'] as const)\n      .combine('inputSource', allInputSources)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const type = scalarType(t.params.type);\n    const cases = makeBitwiseExcluseOrCases(t.params.type);\n    await run(t, binary('^'), [type, type], type, t.params, cases);\n  });\n\ng.test('bitwise_exclusive_or_compound')\n  .specURL('https://www.w3.org/TR/WGSL/#bit-expr')\n  .desc(\n    `\ne1 ^= e2: T\nT is i32, u32, vecN<i32>, or vecN<u32>\n\nBitwise-exclusive-or. Component-wise when T is a vector.\n`\n  )\n  .params(u =>\n    u\n      .combine('type', ['i32', 'u32'] as const)\n      .combine('inputSource', allInputSources)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const type = scalarType(t.params.type);\n    const cases = makeBitwiseExcluseOrCases(t.params.type);\n    await run(t, compoundBinary('^='), [type, type], type, t.params, cases);\n  });\n"],"mappings":"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"}