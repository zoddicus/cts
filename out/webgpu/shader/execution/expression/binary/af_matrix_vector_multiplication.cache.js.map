{"version":3,"file":"af_matrix_vector_multiplication.cache.js","names":["FP","sparseMatrixF64Range","sparseVectorF64Range","selectNCases","makeCaseCache","mat_vec_cases","flatMap","cols","map","rows","abstract","generateMatrixVectorToVectorCases","f32","multiplicationMatrixVectorInterval","reduce","a","b","vec_mat_cases","generateVectorMatrixToVectorCases","multiplicationVectorMatrixInterval","d"],"sources":["../../../../../../src/webgpu/shader/execution/expression/binary/af_matrix_vector_multiplication.cache.ts"],"sourcesContent":["import { FP } from '../../../../util/floating_point.js';\nimport { sparseMatrixF64Range, sparseVectorF64Range } from '../../../../util/math.js';\nimport { selectNCases } from '../case.js';\nimport { makeCaseCache } from '../case_cache.js';\n\n// Cases: matCxR_vecC\nconst mat_vec_cases = ([2, 3, 4] as const)\n  .flatMap(cols =>\n    ([2, 3, 4] as const).map(rows => ({\n      [`mat${cols}x${rows}_vec${cols}`]: () => {\n        return selectNCases(\n          'binary/af_matrix_vector_multiplication_mat_vec',\n          50,\n          FP.abstract.generateMatrixVectorToVectorCases(\n            sparseMatrixF64Range(cols, rows),\n            sparseVectorF64Range(cols),\n            'finite',\n            // Matrix-vector multiplication has an inherited accuracy, so abstract is only expected to be as accurate as f32\n            FP.f32.multiplicationMatrixVectorInterval\n          )\n        );\n      },\n    }))\n  )\n  .reduce((a, b) => ({ ...a, ...b }), {});\n\n// Cases: vecR_matCxR\nconst vec_mat_cases = ([2, 3, 4] as const)\n  .flatMap(rows =>\n    ([2, 3, 4] as const).map(cols => ({\n      [`vec${rows}_mat${cols}x${rows}`]: () => {\n        return selectNCases(\n          'binary/af_matrix_vector_multiplication_vec_mat',\n          50,\n          FP.abstract.generateVectorMatrixToVectorCases(\n            sparseVectorF64Range(rows),\n            sparseMatrixF64Range(cols, rows),\n            'finite',\n            // Vector-matrix multiplication has an inherited accuracy, so abstract is only expected to be as accurate as f32\n            FP.f32.multiplicationVectorMatrixInterval\n          )\n        );\n      },\n    }))\n  )\n  .reduce((a, b) => ({ ...a, ...b }), {});\n\nexport const d = makeCaseCache('binary/af_matrix_vector_multiplication', {\n  ...mat_vec_cases,\n  ...vec_mat_cases,\n});\n"],"mappings":";;GAAA,SAASA,EAAE,QAAQ,oCAAoC,CACvD,SAASC,oBAAoB,EAAEC,oBAAoB,QAAQ,0BAA0B,CACrF,SAASC,YAAY,QAAQ,YAAY;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,MAAMC,aAAa,GAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAC7BC,OAAO,CAAC,CAAAC,IAAI;AACV,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAWC,GAAG,CAAC,CAAAC,IAAI,MAAK;EAChC,CAAE,MAAKF,IAAK,IAAGE,IAAK,OAAMF,IAAK,EAAC,GAAG,MAAM;IACvC,OAAOJ,YAAY;MACjB,gDAAgD;MAChD,EAAE;MACFH,EAAE,CAACU,QAAQ,CAACC,iCAAiC;QAC3CV,oBAAoB,CAACM,IAAI,EAAEE,IAAI,CAAC;QAChCP,oBAAoB,CAACK,IAAI,CAAC;QAC1B,QAAQ;QACR;QACAP,EAAE,CAACY,GAAG,CAACC;MACT;IACF,CAAC;EACH;AACF,CAAC,CAAC;AACJ,CAAC;AACAC,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,MAAM,EAAE,GAAGD,CAAC,EAAE,GAAGC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;AAEzC;AACA,MAAMC,aAAa,GAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAC7BX,OAAO,CAAC,CAAAG,IAAI;AACV,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAWD,GAAG,CAAC,CAAAD,IAAI,MAAK;EAChC,CAAE,MAAKE,IAAK,OAAMF,IAAK,IAAGE,IAAK,EAAC,GAAG,MAAM;IACvC,OAAON,YAAY;MACjB,gDAAgD;MAChD,EAAE;MACFH,EAAE,CAACU,QAAQ,CAACQ,iCAAiC;QAC3ChB,oBAAoB,CAACO,IAAI,CAAC;QAC1BR,oBAAoB,CAACM,IAAI,EAAEE,IAAI,CAAC;QAChC,QAAQ;QACR;QACAT,EAAE,CAACY,GAAG,CAACO;MACT;IACF,CAAC;EACH;AACF,CAAC,CAAC;AACJ,CAAC;AACAL,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,MAAM,EAAE,GAAGD,CAAC,EAAE,GAAGC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;AAEzC,OAAO,MAAMI,CAAC,GAAGhB,aAAa,CAAC,wCAAwC,EAAE;EACvE,GAAGC,aAAa;EAChB,GAAGY;AACL,CAAC,CAAC"}