{"version":3,"file":"af_matrix_addition.cache.js","names":["assert","FP","selectNCases","makeCaseCache","getAdditionAFInterval","kSparseMatrixAFValues","additionMatrixMatrixInterval","lhs","rhs","length","cols","rows","result","Array","map","_","i","j","abstract","toMatrix","mat_cases","flatMap","generateMatrixPairToMatrixCases","reduce","a","b","d"],"sources":["../../../../../../src/webgpu/shader/execution/expression/binary/af_matrix_addition.cache.ts"],"sourcesContent":["import { ROArrayArray } from '../../../../../common/util/types.js';\nimport { assert } from '../../../../../common/util/util.js';\nimport { FP, FPInterval, FPMatrix } from '../../../../util/floating_point.js';\nimport { selectNCases } from '../case.js';\nimport { makeCaseCache } from '../case_cache.js';\n\nimport { getAdditionAFInterval, kSparseMatrixAFValues } from './af_data.js';\n\nconst additionMatrixMatrixInterval = (\n  lhs: ROArrayArray<number>,\n  rhs: ROArrayArray<number>\n): FPMatrix => {\n  assert(lhs.length === rhs.length, 'lhs and rhs have different number of columns');\n  assert(rhs[0].length === rhs[0].length, 'lhs and rhs have different number of rows');\n  const cols = lhs.length;\n  const rows = rhs[0].length;\n\n  const result: FPInterval[][] = [...Array(cols)].map(_ => [...Array(rows)]);\n  for (let i = 0; i < cols; i++) {\n    for (let j = 0; j < rows; j++) {\n      result[i][j] = getAdditionAFInterval(lhs[i][j], rhs[i][j]);\n    }\n  }\n  return FP.abstract.toMatrix(result);\n};\n\n// Cases: matCxR\nconst mat_cases = ([2, 3, 4] as const)\n  .flatMap(cols =>\n    ([2, 3, 4] as const).map(rows => ({\n      [`mat${cols}x${rows}`]: () => {\n        return selectNCases(\n          'binary/af_matrix_addition',\n          50,\n          FP.abstract.generateMatrixPairToMatrixCases(\n            kSparseMatrixAFValues[cols][rows],\n            kSparseMatrixAFValues[cols][rows],\n            'finite',\n            additionMatrixMatrixInterval\n          )\n        );\n      },\n    }))\n  )\n  .reduce((a, b) => ({ ...a, ...b }), {});\n\nexport const d = makeCaseCache('binary/af_matrix_addition', mat_cases);\n"],"mappings":";;GACA,SAASA,MAAM,QAAQ,oCAAoC,CAC3D,SAASC,EAAE,QAA8B,oCAAoC;AAC7E,SAASC,YAAY,QAAQ,YAAY;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD,SAASC,qBAAqB,EAAEC,qBAAqB,QAAQ,cAAc;;AAE3E,MAAMC,4BAA4B,GAAGA;AACnCC,GAAyB;AACzBC,GAAyB;AACZ;EACbR,MAAM,CAACO,GAAG,CAACE,MAAM,KAAKD,GAAG,CAACC,MAAM,EAAE,8CAA8C,CAAC;EACjFT,MAAM,CAACQ,GAAG,CAAC,CAAC,CAAC,CAACC,MAAM,KAAKD,GAAG,CAAC,CAAC,CAAC,CAACC,MAAM,EAAE,2CAA2C,CAAC;EACpF,MAAMC,IAAI,GAAGH,GAAG,CAACE,MAAM;EACvB,MAAME,IAAI,GAAGH,GAAG,CAAC,CAAC,CAAC,CAACC,MAAM;;EAE1B,MAAMG,MAAsB,GAAG,CAAC,GAAGC,KAAK,CAACH,IAAI,CAAC,CAAC,CAACI,GAAG,CAAC,CAAAC,CAAC,KAAI,CAAC,GAAGF,KAAK,CAACF,IAAI,CAAC,CAAC,CAAC;EAC1E,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,IAAI,EAAEM,CAAC,EAAE,EAAE;IAC7B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,IAAI,EAAEM,CAAC,EAAE,EAAE;MAC7BL,MAAM,CAACI,CAAC,CAAC,CAACC,CAAC,CAAC,GAAGb,qBAAqB,CAACG,GAAG,CAACS,CAAC,CAAC,CAACC,CAAC,CAAC,EAAET,GAAG,CAACQ,CAAC,CAAC,CAACC,CAAC,CAAC,CAAC;IAC5D;EACF;EACA,OAAOhB,EAAE,CAACiB,QAAQ,CAACC,QAAQ,CAACP,MAAM,CAAC;AACrC,CAAC;;AAED;AACA,MAAMQ,SAAS,GAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AACzBC,OAAO,CAAC,CAAAX,IAAI;AACV,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAWI,GAAG,CAAC,CAAAH,IAAI,MAAK;EAChC,CAAE,MAAKD,IAAK,IAAGC,IAAK,EAAC,GAAG,MAAM;IAC5B,OAAOT,YAAY;MACjB,2BAA2B;MAC3B,EAAE;MACFD,EAAE,CAACiB,QAAQ,CAACI,+BAA+B;QACzCjB,qBAAqB,CAACK,IAAI,CAAC,CAACC,IAAI,CAAC;QACjCN,qBAAqB,CAACK,IAAI,CAAC,CAACC,IAAI,CAAC;QACjC,QAAQ;QACRL;MACF;IACF,CAAC;EACH;AACF,CAAC,CAAC;AACJ,CAAC;AACAiB,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,MAAM,EAAE,GAAGD,CAAC,EAAE,GAAGC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;AAEzC,OAAO,MAAMC,CAAC,GAAGvB,aAAa,CAAC,2BAA2B,EAAEiB,SAAS,CAAC"}