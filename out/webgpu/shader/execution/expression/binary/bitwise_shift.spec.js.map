{"version":3,"file":"bitwise_shift.spec.js","names":["description","makeTestGroup","assert","GPUTest","Type","u32","allInputSources","run","binary","compoundBinary","g","isValidConstShiftLeft","e1","e2","value","bitwidth","type","size","signed","must_be_zero_msb","mask","must_match_msb","isValidConstShiftRight","generateShiftLeftCases","isConst","cases","shift","expected","push","input","create","generateShiftRightCases","makeShiftLeftConcreteCases","isUnsigned","B","add_unsigned_overflow_cases","add_signed_overflow_cases","test","specURL","desc","params","u","combine","undefined","fn","t","builder","bind","inputSource","makeShiftRightConcreteCases"],"sources":["../../../../../../src/webgpu/shader/execution/expression/binary/bitwise_shift.spec.ts"],"sourcesContent":["export const description = `\nExecution Tests for the bitwise shift binary expression operations\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { assert } from '../../../../../common/util/util.js';\nimport { GPUTest } from '../../../../gpu_test.js';\nimport { ScalarBuilder, ScalarValue, Type, u32 } from '../../../../util/conversion.js';\nimport { Case } from '../case.js';\nimport { allInputSources, run } from '../expression.js';\n\nimport { binary, compoundBinary } from './binary.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n// Returns true if e1 << e2 is valid for const evaluation\nfunction isValidConstShiftLeft(e1: ScalarValue, e2: number) {\n  // This will need to change when AbstractInts are added in\n  assert(typeof e1.value === 'number');\n\n  // Shift by 0 is always valid\n  if (e2 === 0) {\n    return true;\n  }\n\n  const bitwidth = e1.type.size * 8;\n  // Cannot shift by bitwidth or greater\n  if (e2 >= bitwidth) {\n    return false;\n  }\n\n  if (!e1.type.signed) {\n    // If T is an unsigned integer type, and any of the e2 most significant bits of e1 are 1, then invalid.\n    const must_be_zero_msb = e2;\n    const mask = ~0 << (bitwidth - must_be_zero_msb);\n    if ((e1.value & mask) !== 0) {\n      return false;\n    }\n  } else {\n    // If T is a signed integer type, and the e2+1 most significant bits of e1 do\n    // not have the same bit value, then error.\n    const must_match_msb = e2 + 1;\n    const mask = ~0 << (bitwidth - must_match_msb);\n    if ((e1.value & mask) !== 0 && (e1.value & mask) !== mask) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Returns true if e1 >> e2 is valid for const evaluation\nfunction isValidConstShiftRight(e1: ScalarValue, e2: number) {\n  // Shift by 0 is always valid\n  if (e2 === 0) {\n    return true;\n  }\n\n  const bitwidth = e1.type.size * 8;\n  // Cannot shift by bitwidth or greater\n  if (e2 >= bitwidth) {\n    return false;\n  }\n\n  return true;\n}\n\n// Returns all cases of shifting e1 left by [0,63]. If `isConst` is true, cases that are\n// invalid for const eval are not returned.\nfunction generateShiftLeftCases(e1: ScalarValue, isConst: boolean): Case[] {\n  // This will need to change when AbstractInts are added in\n  assert(typeof e1.value === 'number');\n\n  const bitwidth = e1.type.size * 8;\n  const cases: Case[] = [];\n  for (let shift = 0; shift < 64; ++shift) {\n    const e2 = shift;\n    if (isConst && !isValidConstShiftLeft(e1, e2)) {\n      continue;\n    }\n    const expected = e1.value << e2 % bitwidth;\n    cases.push({ input: [e1, u32(e2)], expected: e1.type.create(expected) });\n  }\n  return cases;\n}\n\n// Returns all cases of shifting e1 right by [0,63]. If `is_const` is true, cases that are\n// invalid for const eval are not returned.\nfunction generateShiftRightCases(e1: ScalarValue, isConst: boolean): Case[] {\n  // This will need to change when AbstractInts are added in\n  assert(typeof e1.value === 'number');\n\n  const cases: Case[] = [];\n  for (let shift = 0; shift < 64; ++shift) {\n    const e2 = shift;\n    if (isConst && !isValidConstShiftRight(e1, e2)) {\n      continue;\n    }\n\n    let expected: number = 0;\n    if (!e1.type.signed) {\n      // zero-fill right shift\n      expected = e1.value >>> e2;\n    } else {\n      // arithmetic right shift\n      expected = e1.value >> e2;\n    }\n    cases.push({ input: [e1, u32(e2)], expected: e1.type.create(expected) });\n  }\n  return cases;\n}\n\n// ScalarBuilder<number> will need to be updated to support AbstractInt\nfunction makeShiftLeftConcreteCases(\n  isConst: boolean,\n  isUnsigned: boolean,\n  B: ScalarBuilder<number>\n) {\n  const cases: Case[] = [\n    {\n      input: /*  */ [B(0b00000000000000000000000000000001), u32(1)],\n      expected: /**/ B(0b00000000000000000000000000000010),\n    },\n    {\n      input: /*  */ [B(0b00000000000000000000000000000011), u32(1)],\n      expected: /**/ B(0b00000000000000000000000000000110),\n    },\n  ];\n\n  const add_unsigned_overflow_cases = !isConst || isUnsigned;\n  const add_signed_overflow_cases = !isConst || !isUnsigned;\n\n  if (add_unsigned_overflow_cases) {\n    // Cases that are fine for unsigned values, but would overflow (sign change) signed\n    // values when const evaluated.\n    cases.push(\n      ...[\n        {\n          input: [/*  */ B(0b01000000000000000000000000000000), u32(1)],\n          expected: /**/ B(0b10000000000000000000000000000000),\n        },\n        {\n          input: [/*  */ B(0b01111111111111111111111111111111), u32(1)],\n          expected: /**/ B(0b11111111111111111111111111111110),\n        },\n        {\n          input: [/*  */ B(0b00000000000000000000000000000001), u32(31)],\n          expected: /**/ B(0b10000000000000000000000000000000),\n        },\n      ]\n    );\n  }\n  if (add_signed_overflow_cases) {\n    // Cases that are fine for signed values (no sign change), but would overflow\n    // unsigned values when const evaluated.\n    cases.push(\n      ...[\n        {\n          input: [/*  */ B(0b11000000000000000000000000000000), u32(1)],\n          expected: /**/ B(0b10000000000000000000000000000000),\n        },\n        {\n          input: [/*  */ B(0b11111111111111111111111111111111), u32(1)],\n          expected: /**/ B(0b11111111111111111111111111111110),\n        },\n        {\n          input: [/*  */ B(0b11111111111111111111111111111111), u32(31)],\n          expected: /**/ B(0b10000000000000000000000000000000),\n        },\n      ]\n    );\n  }\n\n  // Generate cases that shift input value by [0,63] (invalid const eval cases are not returned).\n  cases.push(...generateShiftLeftCases(B(0b00000000000000000000000000000000), isConst));\n  cases.push(...generateShiftLeftCases(B(0b00000000000000000000000000000001), isConst));\n  cases.push(...generateShiftLeftCases(B(0b00000000000000000000000000000010), isConst));\n  cases.push(...generateShiftLeftCases(B(0b00000000000000000000000000000011), isConst));\n  cases.push(...generateShiftLeftCases(B(0b10000000000000000000000000000000), isConst));\n  cases.push(...generateShiftLeftCases(B(0b01000000000000000000000000000000), isConst));\n  cases.push(...generateShiftLeftCases(B(0b11000000000000000000000000000000), isConst));\n  cases.push(...generateShiftLeftCases(B(0b00010000001000001000010001010101), isConst));\n  cases.push(...generateShiftLeftCases(B(0b11101111110111110111101110101010), isConst));\n  return cases;\n}\n\ng.test('shift_left_concrete')\n  .specURL('https://www.w3.org/TR/WGSL/#bit-expr')\n  .desc(\n    `\ne1 << e2\n\nShift left (shifted value is concrete)\n`\n  )\n  .params(u =>\n    u\n      .combine('type', ['i32', 'u32'] as const)\n      .combine('inputSource', allInputSources)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const type = Type[t.params.type];\n    const builder = type.create.bind(type);\n\n    const cases = makeShiftLeftConcreteCases(\n      t.params.inputSource === 'const',\n      !type.signed,\n      builder\n    );\n    await run(t, binary('<<'), [type, Type.u32], type, t.params, cases);\n  });\n\ng.test('shift_left_concrete_compound')\n  .specURL('https://www.w3.org/TR/WGSL/#bit-expr')\n  .desc(\n    `\ne1 <<= e2\n\nShift left (shifted value is concrete)\n`\n  )\n  .params(u =>\n    u\n      .combine('type', ['i32', 'u32'] as const)\n      .combine('inputSource', allInputSources)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const type = Type[t.params.type];\n    const builder = type.create.bind(type);\n\n    const cases = makeShiftLeftConcreteCases(\n      t.params.inputSource === 'const',\n      !type.signed,\n      builder\n    );\n    await run(t, compoundBinary('<<='), [type, Type.u32], type, t.params, cases);\n  });\n\n// ScalarBuilder<number> will need to be updated to support AbstractInt\nfunction makeShiftRightConcreteCases(\n  isConst: boolean,\n  isUnsigned: boolean,\n  B: ScalarBuilder<number>\n) {\n  const cases: Case[] = [\n    {\n      input: /*  */ [B(0b00000000000000000000000000000001), u32(1)],\n      expected: /**/ B(0b00000000000000000000000000000000),\n    },\n    {\n      input: /*  */ [B(0b00000000000000000000000000000011), u32(1)],\n      expected: /**/ B(0b00000000000000000000000000000001),\n    },\n    {\n      input: /*  */ [B(0b01000000000000000000000000000000), u32(1)],\n      expected: /**/ B(0b00100000000000000000000000000000),\n    },\n    {\n      input: /*  */ [B(0b01100000000000000000000000000000), u32(1)],\n      expected: /**/ B(0b00110000000000000000000000000000),\n    },\n  ];\n  if (isUnsigned) {\n    // No sign extension\n    cases.push(\n      ...[\n        {\n          input: /*  */ [B(0b10000000000000000000000000000000), u32(1)],\n          expected: /**/ B(0b01000000000000000000000000000000),\n        },\n        {\n          input: /*  */ [B(0b11000000000000000000000000000000), u32(1)],\n          expected: /**/ B(0b01100000000000000000000000000000),\n        },\n      ]\n    );\n  } else {\n    cases.push(\n      // Sign extension if msb is 1\n      ...[\n        {\n          input: /*  */ [B(0b10000000000000000000000000000000), u32(1)],\n          expected: /**/ B(0b11000000000000000000000000000000),\n        },\n        {\n          input: /*  */ [B(0b11000000000000000000000000000000), u32(1)],\n          expected: /**/ B(0b11100000000000000000000000000000),\n        },\n      ]\n    );\n  }\n\n  // Generate cases that shift input value by [0,63] (invalid const eval cases are not returned).\n  cases.push(...generateShiftRightCases(B(0b00000000000000000000000000000000), isConst));\n  cases.push(...generateShiftRightCases(B(0b00000000000000000000000000000001), isConst));\n  cases.push(...generateShiftRightCases(B(0b00000000000000000000000000000010), isConst));\n  cases.push(...generateShiftRightCases(B(0b00000000000000000000000000000011), isConst));\n  cases.push(...generateShiftRightCases(B(0b10000000000000000000000000000000), isConst));\n  cases.push(...generateShiftRightCases(B(0b01000000000000000000000000000000), isConst));\n  cases.push(...generateShiftRightCases(B(0b11000000000000000000000000000000), isConst));\n  cases.push(...generateShiftRightCases(B(0b00010000001000001000010001010101), isConst));\n  cases.push(...generateShiftRightCases(B(0b11101111110111110111101110101010), isConst));\n  return cases;\n}\n\ng.test('shift_right_concrete')\n  .specURL('https://www.w3.org/TR/WGSL/#bit-expr')\n  .desc(\n    `\ne1 >> e2\n\nShift right (shifted value is concrete)\n`\n  )\n  .params(u =>\n    u\n      .combine('type', ['i32', 'u32'] as const)\n      .combine('inputSource', allInputSources)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const type = Type[t.params.type];\n    const builder = type.create.bind(type);\n\n    const cases = makeShiftRightConcreteCases(\n      t.params.inputSource === 'const',\n      !type.signed,\n      builder\n    );\n    await run(t, binary('>>'), [type, Type.u32], type, t.params, cases);\n  });\n\ng.test('shift_right_concrete_compound')\n  .specURL('https://www.w3.org/TR/WGSL/#bit-expr')\n  .desc(\n    `\ne1 >>= e2\n\nShift right (shifted value is concrete)\n`\n  )\n  .params(u =>\n    u\n      .combine('type', ['i32', 'u32'] as const)\n      .combine('inputSource', allInputSources)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const type = Type[t.params.type];\n    const builder = type.create.bind(type);\n\n    const cases = makeShiftRightConcreteCases(\n      t.params.inputSource === 'const',\n      !type.signed,\n      builder\n    );\n    await run(t, compoundBinary('>>='), [type, Type.u32], type, t.params, cases);\n  });\n"],"mappings":"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"}