{"version":3,"file":"ai_arithmetic.cache.js","names":["kValue","sparseI64Range","vectorI64Range","generateBinaryToI64Cases","generateI64VectorBinaryToVectorCases","generateVectorI64BinaryToVectorCases","makeCaseCache","ai_add","x","y","result","i64","positive","max","negative","min","undefined","d","addition","addition_scalar_vector2","addition_scalar_vector3","addition_scalar_vector4","addition_vector2_scalar","addition_vector3_scalar","addition_vector4_scalar"],"sources":["../../../../../../src/webgpu/shader/execution/expression/binary/ai_arithmetic.cache.ts"],"sourcesContent":["import { kValue } from '../../../../util/constants.js';\nimport { sparseI64Range, vectorI64Range } from '../../../../util/math.js';\nimport {\n  generateBinaryToI64Cases,\n  generateI64VectorBinaryToVectorCases,\n  generateVectorI64BinaryToVectorCases,\n} from '../case.js';\nimport { makeCaseCache } from '../case_cache.js';\n\nfunction ai_add(x: bigint, y: bigint): bigint | undefined {\n  const result = x + y;\n  if (result > kValue.i64.positive.max || result < kValue.i64.negative.min) {\n    return undefined;\n  }\n  return result;\n}\n\nexport const d = makeCaseCache('binary/ai_arithmetic', {\n  addition: () => {\n    return generateBinaryToI64Cases(sparseI64Range(), sparseI64Range(), ai_add);\n  },\n  addition_scalar_vector2: () => {\n    return generateI64VectorBinaryToVectorCases(sparseI64Range(), vectorI64Range(2), ai_add);\n  },\n  addition_scalar_vector3: () => {\n    return generateI64VectorBinaryToVectorCases(sparseI64Range(), vectorI64Range(3), ai_add);\n  },\n  addition_scalar_vector4: () => {\n    return generateI64VectorBinaryToVectorCases(sparseI64Range(), vectorI64Range(4), ai_add);\n  },\n  addition_vector2_scalar: () => {\n    return generateVectorI64BinaryToVectorCases(vectorI64Range(2), sparseI64Range(), ai_add);\n  },\n  addition_vector3_scalar: () => {\n    return generateVectorI64BinaryToVectorCases(vectorI64Range(3), sparseI64Range(), ai_add);\n  },\n  addition_vector4_scalar: () => {\n    return generateVectorI64BinaryToVectorCases(vectorI64Range(4), sparseI64Range(), ai_add);\n  },\n});\n"],"mappings":";;GAAA,SAASA,MAAM,QAAQ,+BAA+B,CACtD,SAASC,cAAc,EAAEC,cAAc,QAAQ,0BAA0B,CACzE;EACEC,wBAAwB;EACxBC,oCAAoC;EACpCC,oCAAoC;AAC/B,YAAY;AACnB,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD,SAASC,MAAMA,CAACC,CAAS,EAAEC,CAAS,EAAsB;EACxD,MAAMC,MAAM,GAAGF,CAAC,GAAGC,CAAC;EACpB,IAAIC,MAAM,GAAGV,MAAM,CAACW,GAAG,CAACC,QAAQ,CAACC,GAAG,IAAIH,MAAM,GAAGV,MAAM,CAACW,GAAG,CAACG,QAAQ,CAACC,GAAG,EAAE;IACxE,OAAOC,SAAS;EAClB;EACA,OAAON,MAAM;AACf;;AAEA,OAAO,MAAMO,CAAC,GAAGX,aAAa,CAAC,sBAAsB,EAAE;EACrDY,QAAQ,EAAEA,CAAA,KAAM;IACd,OAAOf,wBAAwB,CAACF,cAAc,CAAC,CAAC,EAAEA,cAAc,CAAC,CAAC,EAAEM,MAAM,CAAC;EAC7E,CAAC;EACDY,uBAAuB,EAAEA,CAAA,KAAM;IAC7B,OAAOf,oCAAoC,CAACH,cAAc,CAAC,CAAC,EAAEC,cAAc,CAAC,CAAC,CAAC,EAAEK,MAAM,CAAC;EAC1F,CAAC;EACDa,uBAAuB,EAAEA,CAAA,KAAM;IAC7B,OAAOhB,oCAAoC,CAACH,cAAc,CAAC,CAAC,EAAEC,cAAc,CAAC,CAAC,CAAC,EAAEK,MAAM,CAAC;EAC1F,CAAC;EACDc,uBAAuB,EAAEA,CAAA,KAAM;IAC7B,OAAOjB,oCAAoC,CAACH,cAAc,CAAC,CAAC,EAAEC,cAAc,CAAC,CAAC,CAAC,EAAEK,MAAM,CAAC;EAC1F,CAAC;EACDe,uBAAuB,EAAEA,CAAA,KAAM;IAC7B,OAAOjB,oCAAoC,CAACH,cAAc,CAAC,CAAC,CAAC,EAAED,cAAc,CAAC,CAAC,EAAEM,MAAM,CAAC;EAC1F,CAAC;EACDgB,uBAAuB,EAAEA,CAAA,KAAM;IAC7B,OAAOlB,oCAAoC,CAACH,cAAc,CAAC,CAAC,CAAC,EAAED,cAAc,CAAC,CAAC,EAAEM,MAAM,CAAC;EAC1F,CAAC;EACDiB,uBAAuB,EAAEA,CAAA,KAAM;IAC7B,OAAOnB,oCAAoC,CAACH,cAAc,CAAC,CAAC,CAAC,EAAED,cAAc,CAAC,CAAC,EAAEM,MAAM,CAAC;EAC1F;AACF,CAAC,CAAC"}