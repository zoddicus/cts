{"version":3,"file":"f16_comparison.cache.js","names":["anyOf","bool","f16","flushSubnormalNumberF16","vectorF16Range","makeCaseCache","makeCase","lhs","rhs","truthFunc","f16_lhs","f16_rhs","lhs_options","Set","rhs_options","expected","forEach","l","r","result","includes","push","input","d","equals_non_const","value","map","v","equals_const","not_equals_non_const","not_equals_const","less_than_non_const","less_than_const","less_equals_non_const","less_equals_const","greater_than_non_const","greater_than_const","greater_equals_non_const","greater_equals_const"],"sources":["../../../../../../src/webgpu/shader/execution/expression/binary/f16_comparison.cache.ts"],"sourcesContent":["import { anyOf } from '../../../../util/compare.js';\nimport { bool, f16, ScalarValue } from '../../../../util/conversion.js';\nimport { flushSubnormalNumberF16, vectorF16Range } from '../../../../util/math.js';\nimport { Case } from '../case.js';\nimport { makeCaseCache } from '../case_cache.js';\n\n/**\n * @returns a test case for the provided left hand & right hand values and truth function.\n * Handles quantization and subnormals.\n */\nfunction makeCase(\n  lhs: number,\n  rhs: number,\n  truthFunc: (lhs: ScalarValue, rhs: ScalarValue) => boolean\n): Case {\n  // Subnormal float values may be flushed at any time.\n  // https://www.w3.org/TR/WGSL/#floating-point-evaluation\n  const f16_lhs = f16(lhs);\n  const f16_rhs = f16(rhs);\n  const lhs_options = new Set([f16_lhs, f16(flushSubnormalNumberF16(lhs))]);\n  const rhs_options = new Set([f16_rhs, f16(flushSubnormalNumberF16(rhs))]);\n  const expected: Array<ScalarValue> = [];\n  lhs_options.forEach(l => {\n    rhs_options.forEach(r => {\n      const result = bool(truthFunc(l, r));\n      if (!expected.includes(result)) {\n        expected.push(result);\n      }\n    });\n  });\n\n  return { input: [f16_lhs, f16_rhs], expected: anyOf(...expected) };\n}\n\nexport const d = makeCaseCache('binary/f16_logical', {\n  equals_non_const: () => {\n    const truthFunc = (lhs: ScalarValue, rhs: ScalarValue): boolean => {\n      return (lhs.value as number) === (rhs.value as number);\n    };\n\n    return vectorF16Range(2).map(v => {\n      return makeCase(v[0], v[1], truthFunc);\n    });\n  },\n  equals_const: () => {\n    const truthFunc = (lhs: ScalarValue, rhs: ScalarValue): boolean => {\n      return (lhs.value as number) === (rhs.value as number);\n    };\n\n    return vectorF16Range(2).map(v => {\n      return makeCase(v[0], v[1], truthFunc);\n    });\n  },\n  not_equals_non_const: () => {\n    const truthFunc = (lhs: ScalarValue, rhs: ScalarValue): boolean => {\n      return (lhs.value as number) !== (rhs.value as number);\n    };\n\n    return vectorF16Range(2).map(v => {\n      return makeCase(v[0], v[1], truthFunc);\n    });\n  },\n  not_equals_const: () => {\n    const truthFunc = (lhs: ScalarValue, rhs: ScalarValue): boolean => {\n      return (lhs.value as number) !== (rhs.value as number);\n    };\n\n    return vectorF16Range(2).map(v => {\n      return makeCase(v[0], v[1], truthFunc);\n    });\n  },\n  less_than_non_const: () => {\n    const truthFunc = (lhs: ScalarValue, rhs: ScalarValue): boolean => {\n      return (lhs.value as number) < (rhs.value as number);\n    };\n\n    return vectorF16Range(2).map(v => {\n      return makeCase(v[0], v[1], truthFunc);\n    });\n  },\n  less_than_const: () => {\n    const truthFunc = (lhs: ScalarValue, rhs: ScalarValue): boolean => {\n      return (lhs.value as number) < (rhs.value as number);\n    };\n\n    return vectorF16Range(2).map(v => {\n      return makeCase(v[0], v[1], truthFunc);\n    });\n  },\n  less_equals_non_const: () => {\n    const truthFunc = (lhs: ScalarValue, rhs: ScalarValue): boolean => {\n      return (lhs.value as number) <= (rhs.value as number);\n    };\n\n    return vectorF16Range(2).map(v => {\n      return makeCase(v[0], v[1], truthFunc);\n    });\n  },\n  less_equals_const: () => {\n    const truthFunc = (lhs: ScalarValue, rhs: ScalarValue): boolean => {\n      return (lhs.value as number) <= (rhs.value as number);\n    };\n\n    return vectorF16Range(2).map(v => {\n      return makeCase(v[0], v[1], truthFunc);\n    });\n  },\n  greater_than_non_const: () => {\n    const truthFunc = (lhs: ScalarValue, rhs: ScalarValue): boolean => {\n      return (lhs.value as number) > (rhs.value as number);\n    };\n\n    return vectorF16Range(2).map(v => {\n      return makeCase(v[0], v[1], truthFunc);\n    });\n  },\n  greater_than_const: () => {\n    const truthFunc = (lhs: ScalarValue, rhs: ScalarValue): boolean => {\n      return (lhs.value as number) > (rhs.value as number);\n    };\n\n    return vectorF16Range(2).map(v => {\n      return makeCase(v[0], v[1], truthFunc);\n    });\n  },\n  greater_equals_non_const: () => {\n    const truthFunc = (lhs: ScalarValue, rhs: ScalarValue): boolean => {\n      return (lhs.value as number) >= (rhs.value as number);\n    };\n\n    return vectorF16Range(2).map(v => {\n      return makeCase(v[0], v[1], truthFunc);\n    });\n  },\n  greater_equals_const: () => {\n    const truthFunc = (lhs: ScalarValue, rhs: ScalarValue): boolean => {\n      return (lhs.value as number) >= (rhs.value as number);\n    };\n\n    return vectorF16Range(2).map(v => {\n      return makeCase(v[0], v[1], truthFunc);\n    });\n  },\n});\n"],"mappings":"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"}