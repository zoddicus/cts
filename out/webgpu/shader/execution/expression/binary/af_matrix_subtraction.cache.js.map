{"version":3,"file":"af_matrix_subtraction.cache.js","names":["FP","sparseMatrixF64Range","selectNCases","makeCaseCache","mat_cases","flatMap","cols","map","rows","abstract","generateMatrixPairToMatrixCases","subtractionMatrixMatrixInterval","reduce","a","b","d"],"sources":["../../../../../../src/webgpu/shader/execution/expression/binary/af_matrix_subtraction.cache.ts"],"sourcesContent":["import { FP } from '../../../../util/floating_point.js';\nimport { sparseMatrixF64Range } from '../../../../util/math.js';\nimport { selectNCases } from '../case.js';\nimport { makeCaseCache } from '../case_cache.js';\n\n// Cases: matCxR\nconst mat_cases = ([2, 3, 4] as const)\n  .flatMap(cols =>\n    ([2, 3, 4] as const).map(rows => ({\n      [`mat${cols}x${rows}`]: () => {\n        return selectNCases(\n          'binary/af_matrix_subtraction',\n          50,\n          FP.abstract.generateMatrixPairToMatrixCases(\n            sparseMatrixF64Range(cols, rows),\n            sparseMatrixF64Range(cols, rows),\n            'finite',\n            FP.abstract.subtractionMatrixMatrixInterval\n          )\n        );\n      },\n    }))\n  )\n  .reduce((a, b) => ({ ...a, ...b }), {});\n\nexport const d = makeCaseCache('binary/af_matrix_subtraction', mat_cases);\n"],"mappings":";;GAAA,SAASA,EAAE,QAAQ,oCAAoC,CACvD,SAASC,oBAAoB,QAAQ,0BAA0B,CAC/D,SAASC,YAAY,QAAQ,YAAY;AACzC,SAASC,aAAa,QAAQ,kBAAkB;;AAEhD;AACA,MAAMC,SAAS,GAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AACzBC,OAAO,CAAC,CAAAC,IAAI;AACV,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAWC,GAAG,CAAC,CAAAC,IAAI,MAAK;EAChC,CAAE,MAAKF,IAAK,IAAGE,IAAK,EAAC,GAAG,MAAM;IAC5B,OAAON,YAAY;MACjB,8BAA8B;MAC9B,EAAE;MACFF,EAAE,CAACS,QAAQ,CAACC,+BAA+B;QACzCT,oBAAoB,CAACK,IAAI,EAAEE,IAAI,CAAC;QAChCP,oBAAoB,CAACK,IAAI,EAAEE,IAAI,CAAC;QAChC,QAAQ;QACRR,EAAE,CAACS,QAAQ,CAACE;MACd;IACF,CAAC;EACH;AACF,CAAC,CAAC;AACJ,CAAC;AACAC,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,MAAM,EAAE,GAAGD,CAAC,EAAE,GAAGC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;AAEzC,OAAO,MAAMC,CAAC,GAAGZ,aAAa,CAAC,8BAA8B,EAAEC,SAAS,CAAC"}