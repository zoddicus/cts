{"version":3,"file":"u32_arithmetic.cache.js","names":["sparseU32Range","vectorU32Range","generateBinaryToU32Cases","generateU32VectorBinaryToVectorCases","generateVectorU32BinaryToVectorCases","makeCaseCache","u32_add","x","y","u32_subtract","u32_multiply","Math","imul","u32_divide_non_const","u32_divide_const","undefined","u32_remainder_non_const","u32_remainder_const","d","addition","subtraction","multiplication","division_non_const","division_const","remainder_non_const","remainder_const","addition_scalar_vector2","addition_scalar_vector3","addition_scalar_vector4","addition_vector2_scalar","addition_vector3_scalar","addition_vector4_scalar","subtraction_scalar_vector2","subtraction_scalar_vector3","subtraction_scalar_vector4","subtraction_vector2_scalar","subtraction_vector3_scalar","subtraction_vector4_scalar","multiplication_scalar_vector2","multiplication_scalar_vector3","multiplication_scalar_vector4","multiplication_vector2_scalar","multiplication_vector3_scalar","multiplication_vector4_scalar","division_scalar_vector2_non_const","division_scalar_vector3_non_const","division_scalar_vector4_non_const","division_vector2_scalar_non_const","division_vector3_scalar_non_const","division_vector4_scalar_non_const","division_scalar_vector2_const","division_scalar_vector3_const","division_scalar_vector4_const","division_vector2_scalar_const","division_vector3_scalar_const","division_vector4_scalar_const","remainder_scalar_vector2_non_const","remainder_scalar_vector3_non_const","remainder_scalar_vector4_non_const","remainder_vector2_scalar_non_const","remainder_vector3_scalar_non_const","remainder_vector4_scalar_non_const","remainder_scalar_vector2_const","remainder_scalar_vector3_const","remainder_scalar_vector4_const","remainder_vector2_scalar_const","remainder_vector3_scalar_const","remainder_vector4_scalar_const"],"sources":["../../../../../../src/webgpu/shader/execution/expression/binary/u32_arithmetic.cache.ts"],"sourcesContent":["import { sparseU32Range, vectorU32Range } from '../../../../util/math.js';\nimport {\n  generateBinaryToU32Cases,\n  generateU32VectorBinaryToVectorCases,\n  generateVectorU32BinaryToVectorCases,\n} from '../case.js';\nimport { makeCaseCache } from '../case_cache.js';\n\nfunction u32_add(x: number, y: number): number | undefined {\n  return x + y;\n}\n\nfunction u32_subtract(x: number, y: number): number | undefined {\n  return x - y;\n}\n\nfunction u32_multiply(x: number, y: number): number | undefined {\n  return Math.imul(x, y);\n}\n\nfunction u32_divide_non_const(x: number, y: number): number | undefined {\n  if (y === 0) {\n    return x;\n  }\n  return x / y;\n}\n\nfunction u32_divide_const(x: number, y: number): number | undefined {\n  if (y === 0) {\n    return undefined;\n  }\n  return x / y;\n}\n\nfunction u32_remainder_non_const(x: number, y: number): number | undefined {\n  if (y === 0) {\n    return 0;\n  }\n  return x % y;\n}\n\nfunction u32_remainder_const(x: number, y: number): number | undefined {\n  if (y === 0) {\n    return undefined;\n  }\n  return x % y;\n}\n\nexport const d = makeCaseCache('binary/u32_arithmetic', {\n  addition: () => {\n    return generateBinaryToU32Cases(sparseU32Range(), sparseU32Range(), u32_add);\n  },\n  subtraction: () => {\n    return generateBinaryToU32Cases(sparseU32Range(), sparseU32Range(), u32_subtract);\n  },\n  multiplication: () => {\n    return generateBinaryToU32Cases(sparseU32Range(), sparseU32Range(), u32_multiply);\n  },\n  division_non_const: () => {\n    return generateBinaryToU32Cases(sparseU32Range(), sparseU32Range(), u32_divide_non_const);\n  },\n  division_const: () => {\n    return generateBinaryToU32Cases(sparseU32Range(), sparseU32Range(), u32_divide_const);\n  },\n  remainder_non_const: () => {\n    return generateBinaryToU32Cases(sparseU32Range(), sparseU32Range(), u32_remainder_non_const);\n  },\n  remainder_const: () => {\n    return generateBinaryToU32Cases(sparseU32Range(), sparseU32Range(), u32_remainder_const);\n  },\n  addition_scalar_vector2: () => {\n    return generateU32VectorBinaryToVectorCases(sparseU32Range(), vectorU32Range(2), u32_add);\n  },\n  addition_scalar_vector3: () => {\n    return generateU32VectorBinaryToVectorCases(sparseU32Range(), vectorU32Range(3), u32_add);\n  },\n  addition_scalar_vector4: () => {\n    return generateU32VectorBinaryToVectorCases(sparseU32Range(), vectorU32Range(4), u32_add);\n  },\n  addition_vector2_scalar: () => {\n    return generateVectorU32BinaryToVectorCases(vectorU32Range(2), sparseU32Range(), u32_add);\n  },\n  addition_vector3_scalar: () => {\n    return generateVectorU32BinaryToVectorCases(vectorU32Range(3), sparseU32Range(), u32_add);\n  },\n  addition_vector4_scalar: () => {\n    return generateVectorU32BinaryToVectorCases(vectorU32Range(4), sparseU32Range(), u32_add);\n  },\n  subtraction_scalar_vector2: () => {\n    return generateU32VectorBinaryToVectorCases(sparseU32Range(), vectorU32Range(2), u32_subtract);\n  },\n  subtraction_scalar_vector3: () => {\n    return generateU32VectorBinaryToVectorCases(sparseU32Range(), vectorU32Range(3), u32_subtract);\n  },\n  subtraction_scalar_vector4: () => {\n    return generateU32VectorBinaryToVectorCases(sparseU32Range(), vectorU32Range(4), u32_subtract);\n  },\n  subtraction_vector2_scalar: () => {\n    return generateVectorU32BinaryToVectorCases(vectorU32Range(2), sparseU32Range(), u32_subtract);\n  },\n  subtraction_vector3_scalar: () => {\n    return generateVectorU32BinaryToVectorCases(vectorU32Range(3), sparseU32Range(), u32_subtract);\n  },\n  subtraction_vector4_scalar: () => {\n    return generateVectorU32BinaryToVectorCases(vectorU32Range(4), sparseU32Range(), u32_subtract);\n  },\n  multiplication_scalar_vector2: () => {\n    return generateU32VectorBinaryToVectorCases(sparseU32Range(), vectorU32Range(2), u32_multiply);\n  },\n  multiplication_scalar_vector3: () => {\n    return generateU32VectorBinaryToVectorCases(sparseU32Range(), vectorU32Range(3), u32_multiply);\n  },\n  multiplication_scalar_vector4: () => {\n    return generateU32VectorBinaryToVectorCases(sparseU32Range(), vectorU32Range(4), u32_multiply);\n  },\n  multiplication_vector2_scalar: () => {\n    return generateVectorU32BinaryToVectorCases(vectorU32Range(2), sparseU32Range(), u32_multiply);\n  },\n  multiplication_vector3_scalar: () => {\n    return generateVectorU32BinaryToVectorCases(vectorU32Range(3), sparseU32Range(), u32_multiply);\n  },\n  multiplication_vector4_scalar: () => {\n    return generateVectorU32BinaryToVectorCases(vectorU32Range(4), sparseU32Range(), u32_multiply);\n  },\n  division_scalar_vector2_non_const: () => {\n    return generateU32VectorBinaryToVectorCases(\n      sparseU32Range(),\n      vectorU32Range(2),\n      u32_divide_non_const\n    );\n  },\n  division_scalar_vector3_non_const: () => {\n    return generateU32VectorBinaryToVectorCases(\n      sparseU32Range(),\n      vectorU32Range(3),\n      u32_divide_non_const\n    );\n  },\n  division_scalar_vector4_non_const: () => {\n    return generateU32VectorBinaryToVectorCases(\n      sparseU32Range(),\n      vectorU32Range(4),\n      u32_divide_non_const\n    );\n  },\n  division_vector2_scalar_non_const: () => {\n    return generateVectorU32BinaryToVectorCases(\n      vectorU32Range(2),\n      sparseU32Range(),\n      u32_divide_non_const\n    );\n  },\n  division_vector3_scalar_non_const: () => {\n    return generateVectorU32BinaryToVectorCases(\n      vectorU32Range(3),\n      sparseU32Range(),\n      u32_divide_non_const\n    );\n  },\n  division_vector4_scalar_non_const: () => {\n    return generateVectorU32BinaryToVectorCases(\n      vectorU32Range(4),\n      sparseU32Range(),\n      u32_divide_non_const\n    );\n  },\n  division_scalar_vector2_const: () => {\n    return generateU32VectorBinaryToVectorCases(\n      sparseU32Range(),\n      vectorU32Range(2),\n      u32_divide_const\n    );\n  },\n  division_scalar_vector3_const: () => {\n    return generateU32VectorBinaryToVectorCases(\n      sparseU32Range(),\n      vectorU32Range(3),\n      u32_divide_const\n    );\n  },\n  division_scalar_vector4_const: () => {\n    return generateU32VectorBinaryToVectorCases(\n      sparseU32Range(),\n      vectorU32Range(4),\n      u32_divide_const\n    );\n  },\n  division_vector2_scalar_const: () => {\n    return generateVectorU32BinaryToVectorCases(\n      vectorU32Range(2),\n      sparseU32Range(),\n      u32_divide_const\n    );\n  },\n  division_vector3_scalar_const: () => {\n    return generateVectorU32BinaryToVectorCases(\n      vectorU32Range(3),\n      sparseU32Range(),\n      u32_divide_const\n    );\n  },\n  division_vector4_scalar_const: () => {\n    return generateVectorU32BinaryToVectorCases(\n      vectorU32Range(4),\n      sparseU32Range(),\n      u32_divide_const\n    );\n  },\n  remainder_scalar_vector2_non_const: () => {\n    return generateU32VectorBinaryToVectorCases(\n      sparseU32Range(),\n      vectorU32Range(2),\n      u32_remainder_non_const\n    );\n  },\n  remainder_scalar_vector3_non_const: () => {\n    return generateU32VectorBinaryToVectorCases(\n      sparseU32Range(),\n      vectorU32Range(3),\n      u32_remainder_non_const\n    );\n  },\n  remainder_scalar_vector4_non_const: () => {\n    return generateU32VectorBinaryToVectorCases(\n      sparseU32Range(),\n      vectorU32Range(4),\n      u32_remainder_non_const\n    );\n  },\n  remainder_vector2_scalar_non_const: () => {\n    return generateVectorU32BinaryToVectorCases(\n      vectorU32Range(2),\n      sparseU32Range(),\n      u32_remainder_non_const\n    );\n  },\n  remainder_vector3_scalar_non_const: () => {\n    return generateVectorU32BinaryToVectorCases(\n      vectorU32Range(3),\n      sparseU32Range(),\n      u32_remainder_non_const\n    );\n  },\n  remainder_vector4_scalar_non_const: () => {\n    return generateVectorU32BinaryToVectorCases(\n      vectorU32Range(4),\n      sparseU32Range(),\n      u32_remainder_non_const\n    );\n  },\n  remainder_scalar_vector2_const: () => {\n    return generateU32VectorBinaryToVectorCases(\n      sparseU32Range(),\n      vectorU32Range(2),\n      u32_remainder_const\n    );\n  },\n  remainder_scalar_vector3_const: () => {\n    return generateU32VectorBinaryToVectorCases(\n      sparseU32Range(),\n      vectorU32Range(3),\n      u32_remainder_const\n    );\n  },\n  remainder_scalar_vector4_const: () => {\n    return generateU32VectorBinaryToVectorCases(\n      sparseU32Range(),\n      vectorU32Range(4),\n      u32_remainder_const\n    );\n  },\n  remainder_vector2_scalar_const: () => {\n    return generateVectorU32BinaryToVectorCases(\n      vectorU32Range(2),\n      sparseU32Range(),\n      u32_remainder_const\n    );\n  },\n  remainder_vector3_scalar_const: () => {\n    return generateVectorU32BinaryToVectorCases(\n      vectorU32Range(3),\n      sparseU32Range(),\n      u32_remainder_const\n    );\n  },\n  remainder_vector4_scalar_const: () => {\n    return generateVectorU32BinaryToVectorCases(\n      vectorU32Range(4),\n      sparseU32Range(),\n      u32_remainder_const\n    );\n  },\n});\n"],"mappings":"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"}