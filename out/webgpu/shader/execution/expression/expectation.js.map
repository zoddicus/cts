{"version":3,"file":"expectation.js","names":["compare","MatrixValue","VectorValue","isScalarValue","FPInterval","isComparator","e","Array","toComparator","input","got","kind"],"sources":["../../../../../src/webgpu/shader/execution/expression/expectation.ts"],"sourcesContent":["import { ROArrayArray } from '../../../../common/util/types.js';\nimport { Comparator, compare } from '../../../util/compare.js';\nimport { MatrixValue, Value, VectorValue, isScalarValue } from '../../../util/conversion.js';\nimport { FPInterval } from '../../../util/floating_point.js';\n\nexport type Expectation =\n  | Value\n  | FPInterval\n  | readonly FPInterval[]\n  | ROArrayArray<FPInterval>\n  | Comparator;\n\n/** @returns if this Expectation actually a Comparator */\nexport function isComparator(e: Expectation): e is Comparator {\n  return !(\n    e instanceof FPInterval ||\n    isScalarValue(e) ||\n    e instanceof VectorValue ||\n    e instanceof MatrixValue ||\n    e instanceof Array\n  );\n}\n\n/** @returns the input if it is already a Comparator, otherwise wraps it in a 'value' comparator */\nexport function toComparator(input: Expectation): Comparator {\n  if (isComparator(input)) {\n    return input;\n  }\n\n  return { compare: got => compare(got, input as Value), kind: 'value' };\n}\n"],"mappings":";;GACA,SAAqBA,OAAO,QAAQ,0BAA0B,CAC9D,SAASC,WAAW,EAASC,WAAW,EAAEC,aAAa,QAAQ,6BAA6B;AAC5F,SAASC,UAAU,QAAQ,iCAAiC;;;;;;;;;AAS5D;AACA,OAAO,SAASC,YAAYA,CAACC,CAAc,EAAmB;EAC5D,OAAO;EACLA,CAAC,YAAYF,UAAU;EACvBD,aAAa,CAACG,CAAC,CAAC;EAChBA,CAAC,YAAYJ,WAAW;EACxBI,CAAC,YAAYL,WAAW;EACxBK,CAAC,YAAYC,KAAK,CACnB;;AACH;;AAEA;AACA,OAAO,SAASC,YAAYA,CAACC,KAAkB,EAAc;EAC3D,IAAIJ,YAAY,CAACI,KAAK,CAAC,EAAE;IACvB,OAAOA,KAAK;EACd;;EAEA,OAAO,EAAET,OAAO,EAAEA,CAAAU,GAAG,KAAIV,OAAO,CAACU,GAAG,EAAED,KAAc,CAAC,EAAEE,IAAI,EAAE,OAAO,CAAC,CAAC;AACxE"}