{"version":3,"file":"i32_complement.spec.js","names":["description","makeTestGroup","GPUTest","TypeI32","allInputSources","run","d","unary","g","test","specURL","desc","params","u","combine","undefined","fn","t","cases","get"],"sources":["../../../../../../src/webgpu/shader/execution/expression/unary/i32_complement.spec.ts"],"sourcesContent":["export const description = `\nExecution Tests for the i32 bitwise complement operation\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../gpu_test.js';\nimport { TypeI32 } from '../../../../util/conversion.js';\nimport { allInputSources, run } from '../expression.js';\n\nimport { d } from './i32_complement.cache.js';\nimport { unary } from './unary.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('i32_complement')\n  .specURL('https://www.w3.org/TR/WGSL/#bit-expr')\n  .desc(\n    `\nExpression: ~x\n`\n  )\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = await d.get('complement');\n    await run(t, unary('~'), [TypeI32], TypeI32, t.params, cases);\n  });\n"],"mappings":";;GAAA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAAC,CAED,SAASC,aAAa,QAAQ,+CAA+C;AAC7E,SAASC,OAAO,QAAQ,yBAAyB;AACjD,SAASC,OAAO,QAAQ,gCAAgC;AACxD,SAASC,eAAe,EAAEC,GAAG,QAAQ,kBAAkB;;AAEvD,SAASC,CAAC,QAAQ,2BAA2B;AAC7C,SAASC,KAAK,QAAQ,YAAY;;AAElC,OAAO,MAAMC,CAAC,GAAGP,aAAa,CAACC,OAAO,CAAC;;AAEvCM,CAAC,CAACC,IAAI,CAAC,gBAAgB,CAAC;AACrBC,OAAO,CAAC,sCAAsC,CAAC;AAC/CC,IAAI;EACF;AACL;AACA;AACE,CAAC;AACAC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAO,CAAC,aAAa,EAAEV,eAAe,CAAC,CAACU,OAAO,CAAC,WAAW,EAAE,CAACC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAU;AAC9F,CAAC;AACAC,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,MAAMC,KAAK,GAAG,MAAMZ,CAAC,CAACa,GAAG,CAAC,YAAY,CAAC;EACvC,MAAMd,GAAG,CAACY,CAAC,EAAEV,KAAK,CAAC,GAAG,CAAC,EAAE,CAACJ,OAAO,CAAC,EAAEA,OAAO,EAAEc,CAAC,CAACL,MAAM,EAAEM,KAAK,CAAC;AAC/D,CAAC,CAAC"}