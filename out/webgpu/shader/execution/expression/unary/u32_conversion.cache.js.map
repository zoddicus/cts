{"version":3,"file":"u32_conversion.cache.js","names":["kValue","abstractFloat","abstractInt","bool","f16","f32","i32","u32","fullI32Range","fullI64Range","fullU32Range","quantizeToF16","quantizeToF32","scalarF16Range","scalarF32Range","scalarF64Range","reinterpretI32AsU32","makeCaseCache","d","input","expected","filter","a","min","max","map","u","Number","i","f","Math","floor","trunc"],"sources":["../../../../../../src/webgpu/shader/execution/expression/unary/u32_conversion.cache.ts"],"sourcesContent":["import { kValue } from '../../../../util/constants.js';\nimport {\n  abstractFloat,\n  abstractInt,\n  bool,\n  f16,\n  f32,\n  i32,\n  u32,\n} from '../../../../util/conversion.js';\nimport {\n  fullI32Range,\n  fullI64Range,\n  fullU32Range,\n  quantizeToF16,\n  quantizeToF32,\n  scalarF16Range,\n  scalarF32Range,\n  scalarF64Range,\n} from '../../../../util/math.js';\nimport { reinterpretI32AsU32 } from '../../../../util/reinterpret.js';\nimport { makeCaseCache } from '../case_cache.js';\n\nexport const d = makeCaseCache('unary/u32_conversion', {\n  bool: () => {\n    return [\n      { input: bool(true), expected: u32(1) },\n      { input: bool(false), expected: u32(0) },\n    ];\n  },\n  abstractInt: () => {\n    return fullI64Range()\n      .filter(a => a >= kValue.u32.min && a <= kValue.u32.max)\n      .map(u => {\n        return { input: abstractInt(u), expected: u32(Number(u)) };\n      });\n  },\n  u32: () => {\n    return fullU32Range().map(u => {\n      return { input: u32(u), expected: u32(u) };\n    });\n  },\n  i32: () => {\n    return fullI32Range().map(i => {\n      return { input: i32(i), expected: u32(reinterpretI32AsU32(i)) };\n    });\n  },\n  abstractFloat: () => {\n    return [...scalarF64Range(), -1].map(f => {\n      // Handles zeros, subnormals, and negatives\n      if (f < 1.0) {\n        return { input: abstractFloat(f), expected: u32(0) };\n      }\n\n      if (f >= kValue.u32.max) {\n        return { input: abstractFloat(f), expected: u32(kValue.u32.max) };\n      }\n\n      // All u32s are representable as f64s and number is a f64 internally, so\n      // no need for special handling like is done for f32 and f16 below.\n      return { input: abstractFloat(f), expected: u32(Math.floor(f)) };\n    });\n  },\n  f32: () => {\n    return scalarF32Range().map(f => {\n      // Handles zeros, subnormals, and negatives\n      if (f < 1.0) {\n        return { input: f32(f), expected: u32(0) };\n      }\n\n      if (f >= kValue.u32.max) {\n        return { input: f32(f), expected: u32(kValue.u32.max) };\n      }\n\n      // All f32 no larger than 2^24 has a precise integer part and a fractional\n      // part, just need to trunc towards 0 for the result integer.\n      if (f <= 2 ** 24) {\n        return { input: f32(f), expected: u32(Math.floor(f)) };\n      }\n\n      // All f32s between 2 ** 24 and kValue.u32.max are integers, so in theory\n      // one could use them directly, expect that number is actually f64\n      // internally, so they need to be quantized to f32 first.\n      // Cannot just use floor here, since that might produce a u32 value that\n      // is precise in f64, but not in f32.\n      return { input: f32(f), expected: u32(quantizeToF32(f)) };\n    });\n  },\n  f16: () => {\n    // Note that all positive finite f16 values are in range of u32.\n    return scalarF16Range().map(f => {\n      // Handles zeros, subnormals, and negatives\n      if (f < 1.0) {\n        return { input: f16(f), expected: u32(0) };\n      }\n\n      // All f16 no larger than <= 2^12 has a precise integer part and a\n      // fractional part, just need to trunc towards 0 for the result integer.\n      if (f <= 2 ** 12) {\n        return { input: f16(f), expected: u32(Math.trunc(f)) };\n      }\n\n      // All f16s larger than 2 ** 12 are integers, so in theory one could use\n      // them directly, expect that number is actually f64 internally, so they\n      // need to be quantized to f16 first.Cannot just use trunc here, since\n      // that might produce a u32 value that is precise in f64, but not in f16.\n      return { input: f16(f), expected: u32(quantizeToF16(f)) };\n    });\n  },\n});\n"],"mappings":"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"}