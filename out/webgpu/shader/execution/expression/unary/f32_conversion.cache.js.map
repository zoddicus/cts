{"version":3,"file":"f32_conversion.cache.js","names":["bool","f16","f32","i32","u32","FP","fullI32Range","fullU32Range","scalarF16Range","scalarF32Range","sparseMatrixF16Range","sparseMatrixF32Range","makeCaseCache","f32_mat_cases","flatMap","cols","rows","map","nonConst","generateMatrixToMatrixCases","correctlyRoundedMatrix","reduce","a","b","f16_mat_cases","d","input","expected","u","correctlyRoundedInterval","i","f"],"sources":["../../../../../../src/webgpu/shader/execution/expression/unary/f32_conversion.cache.ts"],"sourcesContent":["import { bool, f16, f32, i32, u32 } from '../../../../util/conversion.js';\nimport { FP } from '../../../../util/floating_point.js';\nimport {\n  fullI32Range,\n  fullU32Range,\n  scalarF16Range,\n  scalarF32Range,\n  sparseMatrixF16Range,\n  sparseMatrixF32Range,\n} from '../../../../util/math.js';\nimport { makeCaseCache } from '../case_cache.js';\n\n// Cases: f32_matCxR_[non_]const\nconst f32_mat_cases = ([2, 3, 4] as const)\n  .flatMap(cols =>\n    ([2, 3, 4] as const).flatMap(rows =>\n      ([true, false] as const).map(nonConst => ({\n        [`f32_mat${cols}x${rows}_${nonConst ? 'non_const' : 'const'}`]: () => {\n          return FP.f32.generateMatrixToMatrixCases(\n            sparseMatrixF32Range(cols, rows),\n            nonConst ? 'unfiltered' : 'finite',\n            FP.f32.correctlyRoundedMatrix\n          );\n        },\n      }))\n    )\n  )\n  .reduce((a, b) => ({ ...a, ...b }), {});\n\n// Cases: f16_matCxR_[non_]const\n// Note that all f16 values are exactly representable in f32.\nconst f16_mat_cases = ([2, 3, 4] as const)\n  .flatMap(cols =>\n    ([2, 3, 4] as const).flatMap(rows =>\n      ([true, false] as const).map(nonConst => ({\n        [`f16_mat${cols}x${rows}_${nonConst ? 'non_const' : 'const'}`]: () => {\n          // Input matrix is of f16 types, use f16.generateMatrixToMatrixCases.\n          return FP.f16.generateMatrixToMatrixCases(\n            sparseMatrixF16Range(cols, rows),\n            nonConst ? 'unfiltered' : 'finite',\n            FP.f32.correctlyRoundedMatrix\n          );\n        },\n      }))\n    )\n  )\n  .reduce((a, b) => ({ ...a, ...b }), {});\n\nexport const d = makeCaseCache('unary/f32_conversion', {\n  bool: () => {\n    return [\n      { input: bool(true), expected: f32(1.0) },\n      { input: bool(false), expected: f32(0.0) },\n    ];\n  },\n  u32: () => {\n    return fullU32Range().map(u => {\n      return { input: u32(u), expected: FP.f32.correctlyRoundedInterval(u) };\n    });\n  },\n  i32: () => {\n    return fullI32Range().map(i => {\n      return { input: i32(i), expected: FP.f32.correctlyRoundedInterval(i) };\n    });\n  },\n  f32: () => {\n    return scalarF32Range().map(f => {\n      return { input: f32(f), expected: FP.f32.correctlyRoundedInterval(f) };\n    });\n  },\n  // All f16 values are exactly representable in f32.\n  f16: () => {\n    return scalarF16Range().map(f => {\n      return { input: f16(f), expected: FP.f32.correctlyRoundedInterval(f) };\n    });\n  },\n  ...f32_mat_cases,\n  ...f16_mat_cases,\n});\n"],"mappings":"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"}