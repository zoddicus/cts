{"version":3,"file":"f32_conversion.cache.js","names":["abstractInt","bool","f16","f32","i32","u32","FP","FPInterval","fullI32Range","fullI64Range","fullU32Range","scalarF16Range","scalarF32Range","sparseMatrixF16Range","sparseMatrixF32Range","makeCaseCache","f32FiniteRangeInterval","constants","negative","min","positive","max","f32_mat_cases","flatMap","cols","rows","map","nonConst","generateMatrixToMatrixCases","correctlyRoundedMatrix","reduce","a","b","f16_mat_cases","abstract_float_mat_cases","abstract","sparseMatrixRange","d","input","expected","u","correctlyRoundedInterval","i","abstract_int","filter","v","contains","Number","f","abstract_float","generateScalarToIntervalCases","scalarRange"],"sources":["../../../../../../src/webgpu/shader/execution/expression/unary/f32_conversion.cache.ts"],"sourcesContent":["import { abstractInt, bool, f16, f32, i32, u32 } from '../../../../util/conversion.js';\nimport { FP, FPInterval } from '../../../../util/floating_point.js';\nimport {\n  fullI32Range,\n  fullI64Range,\n  fullU32Range,\n  scalarF16Range,\n  scalarF32Range,\n  sparseMatrixF16Range,\n  sparseMatrixF32Range,\n} from '../../../../util/math.js';\nimport { makeCaseCache } from '../case_cache.js';\n\nconst f32FiniteRangeInterval = new FPInterval(\n  'f32',\n  FP.f32.constants().negative.min,\n  FP.f32.constants().positive.max\n);\n\n// Cases: f32_matCxR_[non_]const\nconst f32_mat_cases = ([2, 3, 4] as const)\n  .flatMap(cols =>\n    ([2, 3, 4] as const).flatMap(rows =>\n      ([true, false] as const).map(nonConst => ({\n        [`f32_mat${cols}x${rows}_${nonConst ? 'non_const' : 'const'}`]: () => {\n          return FP.f32.generateMatrixToMatrixCases(\n            sparseMatrixF32Range(cols, rows),\n            nonConst ? 'unfiltered' : 'finite',\n            FP.f32.correctlyRoundedMatrix\n          );\n        },\n      }))\n    )\n  )\n  .reduce((a, b) => ({ ...a, ...b }), {});\n\n// Cases: f16_matCxR_[non_]const\n// Note that all f16 values are exactly representable in f32.\nconst f16_mat_cases = ([2, 3, 4] as const)\n  .flatMap(cols =>\n    ([2, 3, 4] as const).flatMap(rows =>\n      ([true, false] as const).map(nonConst => ({\n        [`f16_mat${cols}x${rows}_${nonConst ? 'non_const' : 'const'}`]: () => {\n          // Input matrix is of f16 types, use f16.generateMatrixToMatrixCases.\n          return FP.f16.generateMatrixToMatrixCases(\n            sparseMatrixF16Range(cols, rows),\n            nonConst ? 'unfiltered' : 'finite',\n            FP.f32.correctlyRoundedMatrix\n          );\n        },\n      }))\n    )\n  )\n  .reduce((a, b) => ({ ...a, ...b }), {});\n\n// Cases: abstract_float_matCxR\n// Note that abstract float values may be not exactly representable in f32\n// and/or out of range.\nconst abstract_float_mat_cases = ([2, 3, 4] as const)\n  .flatMap(cols =>\n    ([2, 3, 4] as const).map(rows => ({\n      [`abstract_float_mat${cols}x${rows}`]: () => {\n        return FP.abstract.generateMatrixToMatrixCases(\n          FP.abstract.sparseMatrixRange(cols, rows),\n          'finite',\n          FP.f32.correctlyRoundedMatrix\n        );\n      },\n    }))\n  )\n  .reduce((a, b) => ({ ...a, ...b }), {});\n\nexport const d = makeCaseCache('unary/f32_conversion', {\n  bool: () => {\n    return [\n      { input: bool(true), expected: f32(1.0) },\n      { input: bool(false), expected: f32(0.0) },\n    ];\n  },\n  u32: () => {\n    return fullU32Range().map(u => {\n      return { input: u32(u), expected: FP.f32.correctlyRoundedInterval(u) };\n    });\n  },\n  i32: () => {\n    return fullI32Range().map(i => {\n      return { input: i32(i), expected: FP.f32.correctlyRoundedInterval(i) };\n    });\n  },\n  abstract_int: () => {\n    return [...fullI64Range()]\n      .filter(v => f32FiniteRangeInterval.contains(Number(v)))\n      .map(i => {\n        return { input: abstractInt(i), expected: FP.f32.correctlyRoundedInterval(Number(i)) };\n      });\n  },\n  f32: () => {\n    return scalarF32Range().map(f => {\n      return { input: f32(f), expected: FP.f32.correctlyRoundedInterval(f) };\n    });\n  },\n  // All f16 values are exactly representable in f32.\n  f16: () => {\n    return scalarF16Range().map(f => {\n      return { input: f16(f), expected: FP.f32.correctlyRoundedInterval(f) };\n    });\n  },\n  // Note that abstract float values may be not exactly representable in f32.\n  abstract_float: () => {\n    return FP.abstract.generateScalarToIntervalCases(\n      [...FP.abstract.scalarRange()],\n      'finite',\n      FP.f32.correctlyRoundedInterval\n    );\n  },\n  ...f32_mat_cases,\n  ...f16_mat_cases,\n  ...abstract_float_mat_cases,\n});\n"],"mappings":"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"}