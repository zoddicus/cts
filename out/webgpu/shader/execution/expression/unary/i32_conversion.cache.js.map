{"version":3,"file":"i32_conversion.cache.js","names":["kValue","bool","f16","f32","i32","u32","fullI32Range","fullU32Range","quantizeToF16","quantizeToF32","scalarF16Range","scalarF32Range","reinterpretU32AsI32","makeCaseCache","d","input","expected","map","u","i","f","Math","abs","negative","min","positive","max","trunc"],"sources":["../../../../../../src/webgpu/shader/execution/expression/unary/i32_conversion.cache.ts"],"sourcesContent":["import { kValue } from '../../../../util/constants.js';\nimport { bool, f16, f32, i32, u32 } from '../../../../util/conversion.js';\nimport {\n  fullI32Range,\n  fullU32Range,\n  quantizeToF16,\n  quantizeToF32,\n  scalarF16Range,\n  scalarF32Range,\n} from '../../../../util/math.js';\nimport { reinterpretU32AsI32 } from '../../../../util/reinterpret.js';\nimport { makeCaseCache } from '../case_cache.js';\n\nexport const d = makeCaseCache('unary/i32_conversion', {\n  bool: () => {\n    return [\n      { input: bool(true), expected: i32(1) },\n      { input: bool(false), expected: i32(0) },\n    ];\n  },\n  u32: () => {\n    return fullU32Range().map(u => {\n      return { input: u32(u), expected: i32(reinterpretU32AsI32(u)) };\n    });\n  },\n  i32: () => {\n    return fullI32Range().map(i => {\n      return { input: i32(i), expected: i32(i) };\n    });\n  },\n  f32: () => {\n    return scalarF32Range().map(f => {\n      // Handles zeros and subnormals\n      if (Math.abs(f) < 1.0) {\n        return { input: f32(f), expected: i32(0) };\n      }\n\n      if (f <= kValue.i32.negative.min) {\n        return { input: f32(f), expected: i32(kValue.i32.negative.min) };\n      }\n\n      if (f >= kValue.i32.positive.max) {\n        return { input: f32(f), expected: i32(kValue.i32.positive.max) };\n      }\n\n      // All f32 no larger than 2^24 has a precise interger part and a fractional part, just need\n      // to trunc towards 0 for the result integer.\n      if (Math.abs(f) <= 2 ** 24) {\n        return { input: f32(f), expected: i32(Math.trunc(f)) };\n      }\n\n      // All f32s between 2 ** 24 and kValue.i32.negative.min/.positive.max are\n      // integers, so in theory one could use them directly, expect that number\n      // is actually f64 internally, so they need to be quantized to f32 first.\n      // Cannot just use trunc here, since that might produce a i32 value that\n      // is precise in f64, but not in f32.\n      return { input: f32(f), expected: i32(quantizeToF32(f)) };\n    });\n  },\n  f16: () => {\n    // Note that finite f16 values are always in range of i32.\n    return scalarF16Range().map(f => {\n      // Handles zeros and subnormals\n      if (Math.abs(f) < 1.0) {\n        return { input: f16(f), expected: i32(0) };\n      }\n\n      // All f16 no larger than <= 2^12 has a precise interger part and a fractional part, just need\n      // to trunc towards 0 for the result integer.\n      if (Math.abs(f) <= 2 ** 12) {\n        return { input: f16(f), expected: i32(Math.trunc(f)) };\n      }\n\n      // All f16s larger than 2 ** 12 are integers, so in theory one could use them directly, expect\n      // that number is actually f64 internally, so they need to be quantized to f16 first.\n      // Cannot just use trunc here, since that might produce a i32 value that is precise in f64,\n      // but not in f16.\n      return { input: f16(f), expected: i32(quantizeToF16(f)) };\n    });\n  },\n});\n"],"mappings":"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"}