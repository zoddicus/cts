{"version":3,"file":"f32_conversion.spec.js","names":["description","makeTestGroup","GPUTest","bool","f32","f16","i32","TypeBool","TypeF32","TypeF16","TypeI32","TypeMat","TypeU32","u32","FP","fullF32Range","fullF16Range","fullI32Range","fullU32Range","sparseMatrixF32Range","sparseMatrixF16Range","makeCaseCache","allInputSources","run","unary","g","f32_mat_cases","flatMap","cols","rows","map","nonConst","generateMatrixToMatrixCases","correctlyRoundedMatrix","reduce","a","b","f16_mat_cases","d","input","expected","u","correctlyRoundedInterval","i","f","vectorizeToExpression","vectorize","undefined","matrixExperession","test","specURL","desc","params","combine","fn","t","cases","get","inputSource","beforeAllSubcases","selectDeviceOrSkipTestCase","requiredFeatures"],"sources":["../../../../../../src/webgpu/shader/execution/expression/unary/f32_conversion.spec.ts"],"sourcesContent":["export const description = `\nExecution Tests for the f32 conversion operations\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../gpu_test.js';\nimport {\n  bool,\n  f32,\n  f16,\n  i32,\n  TypeBool,\n  TypeF32,\n  TypeF16,\n  TypeI32,\n  TypeMat,\n  TypeU32,\n  u32,\n} from '../../../../util/conversion.js';\nimport { FP } from '../../../../util/floating_point.js';\nimport {\n  fullF32Range,\n  fullF16Range,\n  fullI32Range,\n  fullU32Range,\n  sparseMatrixF32Range,\n  sparseMatrixF16Range,\n} from '../../../../util/math.js';\nimport { makeCaseCache } from '../case_cache.js';\nimport { allInputSources, run, ShaderBuilder } from '../expression.js';\n\nimport { unary } from './unary.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n// Cases: f32_matCxR_[non_]const\nconst f32_mat_cases = ([2, 3, 4] as const)\n  .flatMap(cols =>\n    ([2, 3, 4] as const).flatMap(rows =>\n      ([true, false] as const).map(nonConst => ({\n        [`f32_mat${cols}x${rows}_${nonConst ? 'non_const' : 'const'}`]: () => {\n          return FP.f32.generateMatrixToMatrixCases(\n            sparseMatrixF32Range(cols, rows),\n            nonConst ? 'unfiltered' : 'finite',\n            FP.f32.correctlyRoundedMatrix\n          );\n        },\n      }))\n    )\n  )\n  .reduce((a, b) => ({ ...a, ...b }), {});\n\n// Cases: f16_matCxR_[non_]const\n// Note that all f16 values are exactly representable in f32.\nconst f16_mat_cases = ([2, 3, 4] as const)\n  .flatMap(cols =>\n    ([2, 3, 4] as const).flatMap(rows =>\n      ([true, false] as const).map(nonConst => ({\n        [`f16_mat${cols}x${rows}_${nonConst ? 'non_const' : 'const'}`]: () => {\n          // Input matrix is of f16 types, use f16.generateMatrixToMatrixCases.\n          return FP.f16.generateMatrixToMatrixCases(\n            sparseMatrixF16Range(cols, rows),\n            nonConst ? 'unfiltered' : 'finite',\n            FP.f32.correctlyRoundedMatrix\n          );\n        },\n      }))\n    )\n  )\n  .reduce((a, b) => ({ ...a, ...b }), {});\n\nexport const d = makeCaseCache('unary/f32_conversion', {\n  bool: () => {\n    return [\n      { input: bool(true), expected: f32(1.0) },\n      { input: bool(false), expected: f32(0.0) },\n    ];\n  },\n  u32: () => {\n    return fullU32Range().map(u => {\n      return { input: u32(u), expected: FP.f32.correctlyRoundedInterval(u) };\n    });\n  },\n  i32: () => {\n    return fullI32Range().map(i => {\n      return { input: i32(i), expected: FP.f32.correctlyRoundedInterval(i) };\n    });\n  },\n  f32: () => {\n    return fullF32Range().map(f => {\n      return { input: f32(f), expected: FP.f32.correctlyRoundedInterval(f) };\n    });\n  },\n  // All f16 values are exactly representable in f32.\n  f16: () => {\n    return fullF16Range().map(f => {\n      return { input: f16(f), expected: FP.f32.correctlyRoundedInterval(f) };\n    });\n  },\n  ...f32_mat_cases,\n  ...f16_mat_cases,\n});\n\n/** Generate a ShaderBuilder based on how the test case is to be vectorized */\nfunction vectorizeToExpression(vectorize: undefined | 2 | 3 | 4): ShaderBuilder {\n  return vectorize === undefined ? unary('f32') : unary(`vec${vectorize}<f32>`);\n}\n\n/** Generate a ShaderBuilder for a matrix of the provided dimensions */\nfunction matrixExperession(cols: number, rows: number): ShaderBuilder {\n  return unary(`mat${cols}x${rows}<f32>`);\n}\n\ng.test('bool')\n  .specURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function')\n  .desc(\n    `\nf32(e), where e is a bool\n\nThe result is 1.0 if e is true and 0.0 otherwise\n`\n  )\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = await d.get('bool');\n    await run(t, vectorizeToExpression(t.params.vectorize), [TypeBool], TypeF32, t.params, cases);\n  });\n\ng.test('u32')\n  .specURL('https://www.w3.org/TR/WGSL/#bool-builtin')\n  .desc(\n    `\nf32(e), where e is a u32\n\nConverted to f32\n`\n  )\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = await d.get('u32');\n    await run(t, vectorizeToExpression(t.params.vectorize), [TypeU32], TypeF32, t.params, cases);\n  });\n\ng.test('i32')\n  .specURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function')\n  .desc(\n    `\nf32(e), where e is a i32\n\nConverted to f32\n`\n  )\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = await d.get('i32');\n    await run(t, vectorizeToExpression(t.params.vectorize), [TypeI32], TypeF32, t.params, cases);\n  });\n\ng.test('f32')\n  .specURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function')\n  .desc(\n    `\nf32(e), where e is a f32\n\nIdentity operation\n`\n  )\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = await d.get('f32');\n    await run(t, vectorizeToExpression(t.params.vectorize), [TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('f32_mat')\n  .specURL('https://www.w3.org/TR/WGSL/#matrix-builtin-functions')\n  .desc(`f32 tests`)\n  .params(u =>\n    u\n      .combine('inputSource', allInputSources)\n      .combine('cols', [2, 3, 4] as const)\n      .combine('rows', [2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cols = t.params.cols;\n    const rows = t.params.rows;\n    const cases = await d.get(\n      t.params.inputSource === 'const'\n        ? `f32_mat${cols}x${rows}_const`\n        : `f32_mat${cols}x${rows}_non_const`\n    );\n    await run(\n      t,\n      matrixExperession(cols, rows),\n      [TypeMat(cols, rows, TypeF32)],\n      TypeMat(cols, rows, TypeF32),\n      t.params,\n      cases\n    );\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function')\n  .desc(\n    `\n  f32(e), where e is a f16\n\n  Expect the same value, since all f16 values is exactly representable in f32.\n  `\n  )\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase({ requiredFeatures: ['shader-f16'] });\n  })\n  .fn(async t => {\n    const cases = await d.get('f16');\n    await run(t, vectorizeToExpression(t.params.vectorize), [TypeF16], TypeF32, t.params, cases);\n  });\n\ng.test('f16_mat')\n  .specURL('https://www.w3.org/TR/WGSL/#matrix-builtin-functions')\n  .desc(`f16 matrix to f32 matrix tests`)\n  .params(u =>\n    u\n      .combine('inputSource', allInputSources)\n      .combine('cols', [2, 3, 4] as const)\n      .combine('rows', [2, 3, 4] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase({ requiredFeatures: ['shader-f16'] });\n  })\n  .fn(async t => {\n    const cols = t.params.cols;\n    const rows = t.params.rows;\n    const cases = await d.get(\n      t.params.inputSource === 'const'\n        ? `f16_mat${cols}x${rows}_const`\n        : `f16_mat${cols}x${rows}_non_const`\n    );\n    await run(\n      t,\n      matrixExperession(cols, rows),\n      [TypeMat(cols, rows, TypeF16)],\n      TypeMat(cols, rows, TypeF32),\n      t.params,\n      cases\n    );\n  });\n"],"mappings":"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"}