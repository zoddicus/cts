{"version":3,"file":"barrier.spec.js","names":["description","makeTestGroup","GPUTest","MemoryModelTester","buildTestShader","MemoryType","TestType","buildResultShader","ResultType","g","memoryModelTestParams","workgroupSize","testingWorkgroups","maxWorkgroups","shufflePct","barrierPct","memStressPct","memStressIterations","memStressStoreFirstPct","memStressStoreSecondPct","preStressPct","preStressIterations","preStressStoreFirstPct","preStressStoreSecondPct","scratchMemorySize","stressLineSize","stressTargetLines","stressStrategyBalancePct","permuteFirst","permuteSecond","memStride","aliasedMemory","numBehaviors","storageMemoryBarrierStoreLoadTestCode","workgroupMemoryBarrierStoreLoadTestCode","test","desc","paramsSimple","memType","NonAtomicStorageClass","_testCode","NonAtomicWorkgroupClass","fn","t","resultCode","testShader","params","IntraWorkgroup","resultShader","TwoBehavior","memModelTester","run","storageMemoryBarrierLoadStoreTestCode","workgroupMemoryBarrierLoadStoreTestCode","storageMemoryBarrierStoreStoreTestCode","workgroupMemoryBarrierStoreStoreTestCode"],"sources":["../../../../../src/webgpu/shader/execution/memory_model/barrier.spec.ts"],"sourcesContent":["export const description = `\nTests for non-atomic memory synchronization within a workgroup in the presence of a WebGPU barrier`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../gpu_test.js';\n\nimport {\n  MemoryModelTestParams,\n  MemoryModelTester,\n  buildTestShader,\n  MemoryType,\n  TestType,\n  buildResultShader,\n  ResultType,\n} from './memory_model_setup.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n// A reasonable parameter set, determined heuristically.\nconst memoryModelTestParams: MemoryModelTestParams = {\n  workgroupSize: 256,\n  testingWorkgroups: 512,\n  maxWorkgroups: 1024,\n  shufflePct: 100,\n  barrierPct: 100,\n  memStressPct: 100,\n  memStressIterations: 1024,\n  memStressStoreFirstPct: 50,\n  memStressStoreSecondPct: 50,\n  preStressPct: 100,\n  preStressIterations: 1024,\n  preStressStoreFirstPct: 50,\n  preStressStoreSecondPct: 50,\n  scratchMemorySize: 2048,\n  stressLineSize: 64,\n  stressTargetLines: 2,\n  stressStrategyBalancePct: 50,\n  permuteFirst: 109,\n  permuteSecond: 419,\n  memStride: 4,\n  aliasedMemory: false,\n  numBehaviors: 2,\n};\n\nconst storageMemoryBarrierStoreLoadTestCode = `\n  test_locations.value[x_0] = 1u;\n  workgroupBarrier();\n  let r0 = test_locations.value[x_1];\n  atomicStore(&results.value[shuffled_workgroup * workgroupXSize + id_1].r0, r0);\n`;\n\nconst workgroupMemoryBarrierStoreLoadTestCode = `\n  wg_test_locations[x_0] = 1u;\n  workgroupBarrier();\n  let r0 = wg_test_locations[x_1];\n  atomicStore(&results.value[shuffled_workgroup * workgroupXSize + id_1].r0, r0);\n`;\n\ng.test('workgroup_barrier_store_load')\n  .desc(\n    `Checks whether the workgroup barrier properly synchronizes a non-atomic write and read on\n    separate threads in the same workgroup. Within a workgroup, the barrier should force an invocation\n    after the barrier to read a write from an invocation before the barrier.\n    `\n  )\n  .paramsSimple([\n    { memType: MemoryType.NonAtomicStorageClass, _testCode: storageMemoryBarrierStoreLoadTestCode },\n    {\n      memType: MemoryType.NonAtomicWorkgroupClass,\n      _testCode: workgroupMemoryBarrierStoreLoadTestCode,\n    },\n  ])\n  .fn(async t => {\n    const resultCode = `\n      if (r0 == 1u) {\n        atomicAdd(&test_results.seq, 1u);\n      } else if (r0 == 0u) {\n        atomicAdd(&test_results.weak, 1u);\n      }\n    `;\n    const testShader = buildTestShader(\n      t.params._testCode,\n      t.params.memType,\n      TestType.IntraWorkgroup\n    );\n    const resultShader = buildResultShader(\n      resultCode,\n      TestType.IntraWorkgroup,\n      ResultType.TwoBehavior\n    );\n    const memModelTester = new MemoryModelTester(\n      t,\n      memoryModelTestParams,\n      testShader,\n      resultShader\n    );\n    await memModelTester.run(15, 1);\n  });\n\nconst storageMemoryBarrierLoadStoreTestCode = `\n  let r0 = test_locations.value[x_0];\n  workgroupBarrier();\n  test_locations.value[x_1] = 1u;\n  atomicStore(&results.value[shuffled_workgroup * workgroupXSize + id_0].r0, r0);\n`;\n\nconst workgroupMemoryBarrierLoadStoreTestCode = `\n  let r0 = wg_test_locations[x_0];\n  workgroupBarrier();\n  wg_test_locations[x_1] = 1u;\n  atomicStore(&results.value[shuffled_workgroup * workgroupXSize + id_0].r0, r0);\n`;\n\ng.test('workgroup_barrier_load_store')\n  .desc(\n    `Checks whether the workgroup barrier properly synchronizes a non-atomic write and read on\n    separate threads in the same workgroup. Within a workgroup, the barrier should force an invocation\n    before the barrier to not read the write from an invocation after the barrier.\n    `\n  )\n  .paramsSimple([\n    { memType: MemoryType.NonAtomicStorageClass, _testCode: storageMemoryBarrierLoadStoreTestCode },\n    {\n      memType: MemoryType.NonAtomicWorkgroupClass,\n      _testCode: workgroupMemoryBarrierLoadStoreTestCode,\n    },\n  ])\n  .fn(async t => {\n    const resultCode = `\n      if (r0 == 0u) {\n        atomicAdd(&test_results.seq, 1u);\n      } else if (r0 == 1u) {\n        atomicAdd(&test_results.weak, 1u);\n      }\n    `;\n    const testShader = buildTestShader(\n      t.params._testCode,\n      t.params.memType,\n      TestType.IntraWorkgroup\n    );\n    const resultShader = buildResultShader(\n      resultCode,\n      TestType.IntraWorkgroup,\n      ResultType.TwoBehavior\n    );\n    const memModelTester = new MemoryModelTester(\n      t,\n      memoryModelTestParams,\n      testShader,\n      resultShader\n    );\n    await memModelTester.run(12, 1);\n  });\n\nconst storageMemoryBarrierStoreStoreTestCode = `\n  test_locations.value[x_0] = 1u;\n  storageBarrier();\n  test_locations.value[x_1] = 2u;\n`;\n\nconst workgroupMemoryBarrierStoreStoreTestCode = `\n  wg_test_locations[x_0] = 1u;\n  workgroupBarrier();\n  wg_test_locations[x_1] = 2u;\n  workgroupBarrier();\n  test_locations.value[shuffled_workgroup * workgroupXSize * stress_params.mem_stride * 2u + x_1] = wg_test_locations[x_1];\n`;\n\ng.test('workgroup_barrier_store_store')\n  .desc(\n    `Checks whether the workgroup barrier properly synchronizes non-atomic writes on\n    separate threads in the same workgroup. Within a workgroup, the barrier should force the value in memory\n    to be the result of the write after the barrier, not the write before.\n    `\n  )\n  .paramsSimple([\n    {\n      memType: MemoryType.NonAtomicStorageClass,\n      _testCode: storageMemoryBarrierStoreStoreTestCode,\n    },\n    {\n      memType: MemoryType.NonAtomicWorkgroupClass,\n      _testCode: workgroupMemoryBarrierStoreStoreTestCode,\n    },\n  ])\n  .fn(async t => {\n    const resultCode = `\n      if (mem_x_0 == 2u) {\n        atomicAdd(&test_results.seq, 1u);\n      } else if (mem_x_0 == 1u) {\n        atomicAdd(&test_results.weak, 1u);\n      }\n    `;\n    const testShader = buildTestShader(\n      t.params._testCode,\n      t.params.memType,\n      TestType.IntraWorkgroup\n    );\n    const resultShader = buildResultShader(\n      resultCode,\n      TestType.IntraWorkgroup,\n      ResultType.TwoBehavior\n    );\n    const memModelTester = new MemoryModelTester(\n      t,\n      memoryModelTestParams,\n      testShader,\n      resultShader\n    );\n    await memModelTester.run(10, 1);\n  });\n"],"mappings":"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"}