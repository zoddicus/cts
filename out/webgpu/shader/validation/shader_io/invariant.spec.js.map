{"version":3,"file":"invariant.spec.js","names":["description","makeTestGroup","ShaderValidationTest","kBuiltins","generateShader","g","test","desc","params","u","combineWithParams","combine","beginSubcases","fn","t","code","attribute","name","type","stage","io","use_struct","expectCompileResult","invariant","use_invariant","suffix","skip","attr"],"sources":["../../../../../src/webgpu/shader/validation/shader_io/invariant.spec.ts"],"sourcesContent":["export const description = `Validation tests for the invariant attribute`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { ShaderValidationTest } from '../shader_validation_test.js';\n\nimport { kBuiltins } from './builtins.spec.js';\nimport { generateShader } from './util.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\ng.test('valid_only_with_vertex_position_builtin')\n  .desc(`Test that the invariant attribute is only accepted with the vertex position builtin`)\n  .params(u =>\n    u\n      .combineWithParams(kBuiltins)\n      .combine('use_struct', [true, false] as const)\n      .beginSubcases()\n  )\n  .fn(t => {\n    const code = generateShader({\n      attribute: `@builtin(${t.params.name}) @invariant`,\n      type: t.params.type,\n      stage: t.params.stage,\n      io: t.params.io,\n      use_struct: t.params.use_struct,\n    });\n\n    t.expectCompileResult(t.params.name === 'position', code);\n  });\n\ng.test('not_valid_on_user_defined_io')\n  .desc(`Test that the invariant attribute is not accepted on user-defined IO attributes.`)\n  .params(u => u.combine('use_invariant', [true, false] as const).beginSubcases())\n  .fn(t => {\n    const invariant = t.params.use_invariant ? '@invariant' : '';\n    const code = `\n    struct VertexOut {\n      @location(0) ${invariant} loc0 : vec4<f32>,\n      @builtin(position) position : vec4<f32>,\n    };\n    @vertex\n    fn main() -> VertexOut {\n      return VertexOut();\n    }\n    `;\n    t.expectCompileResult(!t.params.use_invariant, code);\n  });\n\ng.test('invalid_use_of_parameters')\n  .desc(`Test that no parameters are accepted for the invariant attribute`)\n  .params(u => u.combine('suffix', ['', '()', '(0)'] as const).beginSubcases())\n  .fn(t => {\n    const code = `\n    struct VertexOut {\n      @builtin(position) @invariant${t.params.suffix} position : vec4<f32>\n    };\n    @vertex\n    fn main() -> VertexOut {\n      return VertexOut();\n    }\n    `;\n    t.expectCompileResult(t.params.suffix === '', code);\n  });\n\ng.test('duplicate')\n  .desc(`Test that the invariant attribute can only be applied once.`)\n  .params(u =>\n    u\n      .combineWithParams(kBuiltins)\n      .combine('use_struct', [true, false] as const)\n      .combine('attr', ['', '@invariant'] as const)\n      .beginSubcases()\n  )\n  .fn(t => {\n    if (t.params.name !== 'position') {\n      t.skip('only valid with position');\n    }\n\n    const code = generateShader({\n      attribute: `@builtin(${t.params.name}) @invariant ${t.params.attr}`,\n      type: t.params.type,\n      stage: t.params.stage,\n      io: t.params.io,\n      use_struct: t.params.use_struct,\n    });\n\n    t.expectCompileResult(t.params.attr === '', code);\n  });\n"],"mappings":";AAAA;AAAA,GAAA,OAAO,MAAMA,WAAW,GAAI,8CAA6C,CAEzE,SAASC,aAAa,QAAQ,4CAA4C;AAC1E,SAASC,oBAAoB,QAAQ,8BAA8B;;AAEnE,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,SAASC,cAAc,QAAQ,WAAW;;AAE1C,OAAO,MAAMC,CAAC,GAAGJ,aAAa,CAACC,oBAAoB,CAAC;;AAEpDG,CAAC,CAACC,IAAI,CAAC,yCAAyC,CAAC;AAC9CC,IAAI,CAAE,qFAAoF,CAAC;AAC3FC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,iBAAiB,CAACP,SAAS,CAAC;AAC5BQ,OAAO,CAAC,YAAY,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAU;AAC7CC,aAAa,EAAE,CACnB;;AACAC,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAMC,IAAI,GAAGX,cAAc,CAAC;IAC1BY,SAAS,EAAG,YAAWF,CAAC,CAACN,MAAM,CAACS,IAAK,cAAa;IAClDC,IAAI,EAAEJ,CAAC,CAACN,MAAM,CAACU,IAAI;IACnBC,KAAK,EAAEL,CAAC,CAACN,MAAM,CAACW,KAAK;IACrBC,EAAE,EAAEN,CAAC,CAACN,MAAM,CAACY,EAAE;IACfC,UAAU,EAAEP,CAAC,CAACN,MAAM,CAACa;EACvB,CAAC,CAAC;;EAEFP,CAAC,CAACQ,mBAAmB,CAACR,CAAC,CAACN,MAAM,CAACS,IAAI,KAAK,UAAU,EAAEF,IAAI,CAAC;AAC3D,CAAC,CAAC;;AAEJV,CAAC,CAACC,IAAI,CAAC,8BAA8B,CAAC;AACnCC,IAAI,CAAE,kFAAiF,CAAC;AACxFC,MAAM,CAAC,CAAAC,CAAC,KAAIA,CAAC,CAACE,OAAO,CAAC,eAAe,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAU,CAACC,aAAa,EAAE,CAAC;AAC/EC,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAMS,SAAS,GAAGT,CAAC,CAACN,MAAM,CAACgB,aAAa,GAAG,YAAY,GAAG,EAAE;EAC5D,MAAMT,IAAI,GAAI;AAClB;AACA,qBAAqBQ,SAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;EACDT,CAAC,CAACQ,mBAAmB,CAAC,CAACR,CAAC,CAACN,MAAM,CAACgB,aAAa,EAAET,IAAI,CAAC;AACtD,CAAC,CAAC;;AAEJV,CAAC,CAACC,IAAI,CAAC,2BAA2B,CAAC;AAChCC,IAAI,CAAE,kEAAiE,CAAC;AACxEC,MAAM,CAAC,CAAAC,CAAC,KAAIA,CAAC,CAACE,OAAO,CAAC,QAAQ,EAAE,CAAC,EAAE,EAAE,IAAI,EAAE,KAAK,CAAC,CAAU,CAACC,aAAa,EAAE,CAAC;AAC5EC,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAMC,IAAI,GAAI;AAClB;AACA,qCAAqCD,CAAC,CAACN,MAAM,CAACiB,MAAO;AACrD;AACA;AACA;AACA;AACA;AACA,KAAK;EACDX,CAAC,CAACQ,mBAAmB,CAACR,CAAC,CAACN,MAAM,CAACiB,MAAM,KAAK,EAAE,EAAEV,IAAI,CAAC;AACrD,CAAC,CAAC;;AAEJV,CAAC,CAACC,IAAI,CAAC,WAAW,CAAC;AAChBC,IAAI,CAAE,6DAA4D,CAAC;AACnEC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,iBAAiB,CAACP,SAAS,CAAC;AAC5BQ,OAAO,CAAC,YAAY,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAU;AAC7CA,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,YAAY,CAAC,CAAU;AAC5CC,aAAa,EAAE,CACnB;;AACAC,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,IAAIA,CAAC,CAACN,MAAM,CAACS,IAAI,KAAK,UAAU,EAAE;IAChCH,CAAC,CAACY,IAAI,CAAC,0BAA0B,CAAC;EACpC;;EAEA,MAAMX,IAAI,GAAGX,cAAc,CAAC;IAC1BY,SAAS,EAAG,YAAWF,CAAC,CAACN,MAAM,CAACS,IAAK,gBAAeH,CAAC,CAACN,MAAM,CAACmB,IAAK,EAAC;IACnET,IAAI,EAAEJ,CAAC,CAACN,MAAM,CAACU,IAAI;IACnBC,KAAK,EAAEL,CAAC,CAACN,MAAM,CAACW,KAAK;IACrBC,EAAE,EAAEN,CAAC,CAACN,MAAM,CAACY,EAAE;IACfC,UAAU,EAAEP,CAAC,CAACN,MAAM,CAACa;EACvB,CAAC,CAAC;;EAEFP,CAAC,CAACQ,mBAAmB,CAACR,CAAC,CAACN,MAAM,CAACmB,IAAI,KAAK,EAAE,EAAEZ,IAAI,CAAC;AACnD,CAAC,CAAC"}