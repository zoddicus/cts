{"version":3,"file":"add_sub.spec.js","names":["description","makeTestGroup","keysOf","ShaderValidationTest","g","kOperators","add","op","sub","kTests","bool","src","vec","i32","u32","ai","f32","f16","is_f16","af","texture","sampler","atomic","struct","array","matf_ai_matching","matf_ai_no_matching","matf_size_matching","matf_size_no_match","math_size_matching","math_size_no_matching","test","desc","params","u","combine","beforeAllSubcases","t","rhs","startsWith","selectDeviceOrSkipTestCase","fn","lhs","code","expectCompileResult","swap","a"],"sources":["../../../../../../src/webgpu/shader/validation/expression/matrix/add_sub.spec.ts"],"sourcesContent":["export const description = `\nValidation tests for matrix addition and subtraction expressions.\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { keysOf } from '../../../../../common/util/data_tables.js';\nimport { ShaderValidationTest } from '../../shader_validation_test.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\n// A list of operators\nconst kOperators = {\n  add: { op: '+' },\n  sub: { op: '-' },\n};\n\ninterface Argument {\n  /** Value as a string. */\n  readonly src: string;\n  /** Requires f16 */\n  readonly is_f16?: boolean;\n}\n\nconst kTests: { readonly [name: string]: Argument } = {\n  bool: {\n    src: 'false',\n  },\n  vec: {\n    src: 'vec2()',\n  },\n  i32: {\n    src: '1i',\n  },\n  u32: {\n    src: '1u',\n  },\n  ai: {\n    src: '1',\n  },\n  f32: {\n    src: '1f',\n  },\n  f16: {\n    src: '1h',\n    is_f16: true,\n  },\n  af: {\n    src: '1.0',\n  },\n  texture: {\n    src: 't',\n  },\n  sampler: {\n    src: 's',\n  },\n  atomic: {\n    src: 'a',\n  },\n  struct: {\n    src: 'str',\n  },\n  array: {\n    src: 'arr',\n  },\n  matf_ai_matching: {\n    src: 'mat2x4(0, 0, 0, 0, 0, 0, 0, 0)',\n  },\n  matf_ai_no_matching: {\n    src: 'mat2x2(0, 0, 0, 0)',\n  },\n  matf_size_matching: {\n    src: 'mat2x3f()',\n  },\n  matf_size_no_match: {\n    src: 'mat4x4f()',\n  },\n  math_size_matching: {\n    src: 'mat2x3h()',\n    is_f16: true,\n  },\n  math_size_no_matching: {\n    src: 'mat4x4h()',\n    is_f16: true,\n  },\n};\n\ng.test('invalid')\n  .desc(`Validates that add and subtract are valid if the matrix types match`)\n  .params(u =>\n    u\n      .combine('op', keysOf(kOperators))\n      .combine('rhs', ['ai', 'mat2x3f()', 'mat2x3h()'])\n      .combine('test', keysOf(kTests))\n  )\n  .beforeAllSubcases(t => {\n    if (kTests[t.params.test].is_f16 === true || t.params.rhs.startsWith('mat2x3h(')) {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(t => {\n    const lhs = kTests[t.params.test].src;\n    const rhs = t.params.rhs === 'ai' ? 'mat2x4(0, 0, 0, 0, 0, 0, 0, 0)' : t.params.rhs;\n\n    const code = `\n${kTests[t.params.test].is_f16 || t.params.rhs.startsWith('mat2x3h(') ? 'enable f16;' : ''}\n@group(0) @binding(0) var t : texture_2d<f32>;\n@group(0) @binding(1) var s : sampler;\n@group(0) @binding(2) var<storage, read_write> a : atomic<i32>;\n\nstruct S { u : u32 }\n\nvar<private> arr : array<u32, 4>;\nvar<private> str : S;\n\n@compute @workgroup_size(1)\nfn main() {\n  let foo = ${lhs} ${kOperators[t.params.op].op} ${rhs};\n}\n`;\n\n    t.expectCompileResult(lhs === rhs, code);\n  });\n\ng.test('with_abstract')\n  .desc(`Validates that add and subtract are valid if when done against an abstract`)\n  .params(u =>\n    u\n      .combine('op', keysOf(kOperators))\n      .combine('rhs', ['mat2x3f()', 'mat2x3h()'])\n      .combine('swap', [true, false])\n  )\n  .beforeAllSubcases(t => {\n    if (t.params.rhs.startsWith('mat2x3h(')) {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(t => {\n    let lhs = 'mat2x3(0, 0, 0, 0, 0, 0)';\n    let rhs = t.params.rhs;\n\n    if (t.params.swap) {\n      const a = lhs;\n      lhs = rhs;\n      rhs = a;\n    }\n\n    const code = `\n${t.params.rhs.startsWith('mat2x3h(') ? 'enable f16;' : ''}\n@group(0) @binding(0) var t : texture_2d<f32>;\n@group(0) @binding(1) var s : sampler;\n@group(0) @binding(2) var<storage, read_write> a : atomic<i32>;\n\nstruct S { u : u32 }\n\nvar<private> arr : array<u32, 4>;\nvar<private> str : S;\n\n@compute @workgroup_size(1)\nfn main() {\n  let foo = ${lhs} ${kOperators[t.params.op].op} ${rhs};\n}\n`;\n\n    t.expectCompileResult(true, code);\n  });\n"],"mappings":";;GAAA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAAC,CAED,SAASC,aAAa,QAAQ,+CAA+C;AAC7E,SAASC,MAAM,QAAQ,2CAA2C;AAClE,SAASC,oBAAoB,QAAQ,iCAAiC;;AAEtE,OAAO,MAAMC,CAAC,GAAGH,aAAa,CAACE,oBAAoB,CAAC;;AAEpD;AACA,MAAME,UAAU,GAAG;EACjBC,GAAG,EAAE,EAAEC,EAAE,EAAE,GAAG,CAAC,CAAC;EAChBC,GAAG,EAAE,EAAED,EAAE,EAAE,GAAG,CAAC;AACjB,CAAC;;;;;;;;;AASD,MAAME,MAA6C,GAAG;EACpDC,IAAI,EAAE;IACJC,GAAG,EAAE;EACP,CAAC;EACDC,GAAG,EAAE;IACHD,GAAG,EAAE;EACP,CAAC;EACDE,GAAG,EAAE;IACHF,GAAG,EAAE;EACP,CAAC;EACDG,GAAG,EAAE;IACHH,GAAG,EAAE;EACP,CAAC;EACDI,EAAE,EAAE;IACFJ,GAAG,EAAE;EACP,CAAC;EACDK,GAAG,EAAE;IACHL,GAAG,EAAE;EACP,CAAC;EACDM,GAAG,EAAE;IACHN,GAAG,EAAE,IAAI;IACTO,MAAM,EAAE;EACV,CAAC;EACDC,EAAE,EAAE;IACFR,GAAG,EAAE;EACP,CAAC;EACDS,OAAO,EAAE;IACPT,GAAG,EAAE;EACP,CAAC;EACDU,OAAO,EAAE;IACPV,GAAG,EAAE;EACP,CAAC;EACDW,MAAM,EAAE;IACNX,GAAG,EAAE;EACP,CAAC;EACDY,MAAM,EAAE;IACNZ,GAAG,EAAE;EACP,CAAC;EACDa,KAAK,EAAE;IACLb,GAAG,EAAE;EACP,CAAC;EACDc,gBAAgB,EAAE;IAChBd,GAAG,EAAE;EACP,CAAC;EACDe,mBAAmB,EAAE;IACnBf,GAAG,EAAE;EACP,CAAC;EACDgB,kBAAkB,EAAE;IAClBhB,GAAG,EAAE;EACP,CAAC;EACDiB,kBAAkB,EAAE;IAClBjB,GAAG,EAAE;EACP,CAAC;EACDkB,kBAAkB,EAAE;IAClBlB,GAAG,EAAE,WAAW;IAChBO,MAAM,EAAE;EACV,CAAC;EACDY,qBAAqB,EAAE;IACrBnB,GAAG,EAAE,WAAW;IAChBO,MAAM,EAAE;EACV;AACF,CAAC;;AAEDd,CAAC,CAAC2B,IAAI,CAAC,SAAS,CAAC;AACdC,IAAI,CAAE,qEAAoE,CAAC;AAC3EC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,IAAI,EAAEjC,MAAM,CAACG,UAAU,CAAC,CAAC;AACjC8B,OAAO,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC;AAChDA,OAAO,CAAC,MAAM,EAAEjC,MAAM,CAACO,MAAM,CAAC;AACnC,CAAC;AACA2B,iBAAiB,CAAC,CAAAC,CAAC,KAAI;EACtB,IAAI5B,MAAM,CAAC4B,CAAC,CAACJ,MAAM,CAACF,IAAI,CAAC,CAACb,MAAM,KAAK,IAAI,IAAImB,CAAC,CAACJ,MAAM,CAACK,GAAG,CAACC,UAAU,CAAC,UAAU,CAAC,EAAE;IAChFF,CAAC,CAACG,0BAA0B,CAAC,YAAY,CAAC;EAC5C;AACF,CAAC,CAAC;AACDC,EAAE,CAAC,CAAAJ,CAAC,KAAI;EACP,MAAMK,GAAG,GAAGjC,MAAM,CAAC4B,CAAC,CAACJ,MAAM,CAACF,IAAI,CAAC,CAACpB,GAAG;EACrC,MAAM2B,GAAG,GAAGD,CAAC,CAACJ,MAAM,CAACK,GAAG,KAAK,IAAI,GAAG,gCAAgC,GAAGD,CAAC,CAACJ,MAAM,CAACK,GAAG;;EAEnF,MAAMK,IAAI,GAAI;AAClB,EAAElC,MAAM,CAAC4B,CAAC,CAACJ,MAAM,CAACF,IAAI,CAAC,CAACb,MAAM,IAAImB,CAAC,CAACJ,MAAM,CAACK,GAAG,CAACC,UAAU,CAAC,UAAU,CAAC,GAAG,aAAa,GAAG,EAAG;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAcG,GAAI,IAAGrC,UAAU,CAACgC,CAAC,CAACJ,MAAM,CAAC1B,EAAE,CAAC,CAACA,EAAG,IAAG+B,GAAI;AACvD;AACA,CAAC;;EAEGD,CAAC,CAACO,mBAAmB,CAACF,GAAG,KAAKJ,GAAG,EAAEK,IAAI,CAAC;AAC1C,CAAC,CAAC;;AAEJvC,CAAC,CAAC2B,IAAI,CAAC,eAAe,CAAC;AACpBC,IAAI,CAAE,4EAA2E,CAAC;AAClFC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,IAAI,EAAEjC,MAAM,CAACG,UAAU,CAAC,CAAC;AACjC8B,OAAO,CAAC,KAAK,EAAE,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;AAC1CA,OAAO,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC;AAClC,CAAC;AACAC,iBAAiB,CAAC,CAAAC,CAAC,KAAI;EACtB,IAAIA,CAAC,CAACJ,MAAM,CAACK,GAAG,CAACC,UAAU,CAAC,UAAU,CAAC,EAAE;IACvCF,CAAC,CAACG,0BAA0B,CAAC,YAAY,CAAC;EAC5C;AACF,CAAC,CAAC;AACDC,EAAE,CAAC,CAAAJ,CAAC,KAAI;EACP,IAAIK,GAAG,GAAG,0BAA0B;EACpC,IAAIJ,GAAG,GAAGD,CAAC,CAACJ,MAAM,CAACK,GAAG;;EAEtB,IAAID,CAAC,CAACJ,MAAM,CAACY,IAAI,EAAE;IACjB,MAAMC,CAAC,GAAGJ,GAAG;IACbA,GAAG,GAAGJ,GAAG;IACTA,GAAG,GAAGQ,CAAC;EACT;;EAEA,MAAMH,IAAI,GAAI;AAClB,EAAEN,CAAC,CAACJ,MAAM,CAACK,GAAG,CAACC,UAAU,CAAC,UAAU,CAAC,GAAG,aAAa,GAAG,EAAG;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAcG,GAAI,IAAGrC,UAAU,CAACgC,CAAC,CAACJ,MAAM,CAAC1B,EAAE,CAAC,CAACA,EAAG,IAAG+B,GAAI;AACvD;AACA,CAAC;;EAEGD,CAAC,CAACO,mBAAmB,CAAC,IAAI,EAAED,IAAI,CAAC;AACnC,CAAC,CAAC"}