{"version":3,"file":"result_type.js","names":["isAbstractType","isConvertible","Type","VectorType","resultType","args","lhs","rhs","canConvertScalarToVector","width","elementType","vec"],"sources":["../../../../../../src/webgpu/shader/validation/expression/binary/result_type.ts"],"sourcesContent":["import {\n  isAbstractType,\n  isConvertible,\n  Type,\n  ScalarType,\n  VectorType,\n} from '../../../../util/conversion.js';\n\n/**\n * @returns the resulting type of a binary arithmetic operation with the operands `lhs` and `rhs`\n */\nexport function resultType(args: {\n  lhs: Type;\n  rhs: Type;\n  canConvertScalarToVector: boolean;\n}): Type | null {\n  const { lhs, rhs, canConvertScalarToVector } = args;\n\n  if (lhs === rhs) {\n    return lhs;\n  }\n\n  if (lhs instanceof VectorType && rhs instanceof VectorType) {\n    // vector <op> vector\n    if (lhs.width !== rhs.width) {\n      return null;\n    }\n    const elementType = resultType({\n      lhs: lhs.elementType,\n      rhs: rhs.elementType,\n      canConvertScalarToVector,\n    }) as ScalarType | null;\n    return elementType !== null ? Type.vec(lhs.width, elementType) : null;\n  }\n\n  if (args.canConvertScalarToVector) {\n    if (lhs instanceof VectorType && !(rhs instanceof VectorType)) {\n      // vector <op> scalar\n      const elementType = resultType({\n        lhs: lhs.elementType,\n        rhs,\n        canConvertScalarToVector,\n      }) as ScalarType | null;\n      return elementType !== null ? Type.vec(lhs.width, elementType) : null;\n    }\n\n    if (!(lhs instanceof VectorType) && rhs instanceof VectorType) {\n      // scalar <op> vector\n      const elementType = resultType({\n        lhs,\n        rhs: rhs.elementType,\n        canConvertScalarToVector,\n      }) as ScalarType | null;\n      return elementType !== null ? Type.vec(rhs.width, elementType) : null;\n    }\n  }\n\n  if (isAbstractType(lhs) || isAbstractType(rhs)) {\n    if (isConvertible(lhs, rhs)) {\n      return rhs;\n    }\n    if (isConvertible(rhs, lhs)) {\n      return lhs;\n    }\n  }\n  return null;\n}\n"],"mappings":";;GAAA,SACEA,cAAc,EACdC,aAAa;EACbC,IAAI;;EAEJC,UAAU;AACL,gCAAgC;;AAEvC;AACA;AACA;AACA,OAAO,SAASC,UAAUA,CAACC,IAI1B;;;;AAAe;EACd,MAAM,EAAEC,GAAG,EAAEC,GAAG,EAAEC,wBAAwB,CAAC,CAAC,GAAGH,IAAI;;EAEnD,IAAIC,GAAG,KAAKC,GAAG,EAAE;IACf,OAAOD,GAAG;EACZ;;EAEA,IAAIA,GAAG,YAAYH,UAAU,IAAII,GAAG,YAAYJ,UAAU,EAAE;IAC1D;IACA,IAAIG,GAAG,CAACG,KAAK,KAAKF,GAAG,CAACE,KAAK,EAAE;MAC3B,OAAO,IAAI;IACb;IACA,MAAMC,WAAW,GAAGN,UAAU,CAAC;MAC7BE,GAAG,EAAEA,GAAG,CAACI,WAAW;MACpBH,GAAG,EAAEA,GAAG,CAACG,WAAW;MACpBF;IACF,CAAC,CAAsB;IACvB,OAAOE,WAAW,KAAK,IAAI,GAAGR,IAAI,CAACS,GAAG,CAACL,GAAG,CAACG,KAAK,EAAEC,WAAW,CAAC,GAAG,IAAI;EACvE;;EAEA,IAAIL,IAAI,CAACG,wBAAwB,EAAE;IACjC,IAAIF,GAAG,YAAYH,UAAU,IAAI,EAAEI,GAAG,YAAYJ,UAAU,CAAC,EAAE;MAC7D;MACA,MAAMO,WAAW,GAAGN,UAAU,CAAC;QAC7BE,GAAG,EAAEA,GAAG,CAACI,WAAW;QACpBH,GAAG;QACHC;MACF,CAAC,CAAsB;MACvB,OAAOE,WAAW,KAAK,IAAI,GAAGR,IAAI,CAACS,GAAG,CAACL,GAAG,CAACG,KAAK,EAAEC,WAAW,CAAC,GAAG,IAAI;IACvE;;IAEA,IAAI,EAAEJ,GAAG,YAAYH,UAAU,CAAC,IAAII,GAAG,YAAYJ,UAAU,EAAE;MAC7D;MACA,MAAMO,WAAW,GAAGN,UAAU,CAAC;QAC7BE,GAAG;QACHC,GAAG,EAAEA,GAAG,CAACG,WAAW;QACpBF;MACF,CAAC,CAAsB;MACvB,OAAOE,WAAW,KAAK,IAAI,GAAGR,IAAI,CAACS,GAAG,CAACJ,GAAG,CAACE,KAAK,EAAEC,WAAW,CAAC,GAAG,IAAI;IACvE;EACF;;EAEA,IAAIV,cAAc,CAACM,GAAG,CAAC,IAAIN,cAAc,CAACO,GAAG,CAAC,EAAE;IAC9C,IAAIN,aAAa,CAACK,GAAG,EAAEC,GAAG,CAAC,EAAE;MAC3B,OAAOA,GAAG;IACZ;IACA,IAAIN,aAAa,CAACM,GAAG,EAAED,GAAG,CAAC,EAAE;MAC3B,OAAOA,GAAG;IACZ;EACF;EACA,OAAO,IAAI;AACb"}