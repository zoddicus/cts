{"version":3,"file":"bitwise_shift.spec.js","names":["description","makeTestGroup","keysOf","objectsToRecord","Type","kAllScalarsAndVectors","numElementsOf","scalarTypeOf","ShaderValidationTest","g","signed","v","Int32Array","vectorize","size","undefined","kScalarAndVectorTypes","test","desc","params","u","combine","filter","value","startsWith","beginSubcases","beforeAllSubcases","t","lhs","f16","rhs","selectDeviceOrSkipTestCase","fn","lhsElement","rhsElement","hasF16","code","create","wgsl","op","lhs_valid","abstractInt","i32","u32","includes","rhs_valid","valid","expectCompileResult","kInvalidTypes","mat2x2f","expr","control","e","array","ptr","atomic","texture","sampler","struct","type","kLeftShiftCases","pass","case","vec_size","kRightShiftCases"],"sources":["../../../../../../src/webgpu/shader/validation/expression/binary/bitwise_shift.spec.ts"],"sourcesContent":["export const description = `\nValidation tests for the bitwise shift binary expression operations\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../common/util/data_tables.js';\nimport {\n  Type,\n  kAllScalarsAndVectors,\n  numElementsOf,\n  scalarTypeOf,\n} from '../../../../util/conversion.js';\nimport { ShaderValidationTest } from '../../shader_validation_test.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\n// Converts v to signed decimal number.\n// Required because JS binary literals are always interpreted as unsigned numbers.\nfunction signed(v: number): number {\n  return new Int32Array([v])[0];\n}\n\n// Return vector form of size `size` of input value `v`, or `v` if size is undefined.\nfunction vectorize(v: string, size: number | undefined): string {\n  if (size !== undefined) {\n    return `vec${size}(${v})`;\n  }\n  return v;\n}\n\n// A list of scalar and vector types.\nconst kScalarAndVectorTypes = objectsToRecord(kAllScalarsAndVectors);\n\ng.test('scalar_vector')\n  .desc(\n    `\n  Validates that scalar and vector expressions are only accepted when the LHS is an integer and the RHS is abstract or unsigned.\n  `\n  )\n  .params(u =>\n    u\n      .combine('lhs', keysOf(kScalarAndVectorTypes))\n      .combine(\n        'rhs',\n        // Skip vec3 and vec4 on the RHS to keep the number of subcases down.\n        keysOf(kScalarAndVectorTypes).filter(\n          value => !(value.startsWith('vec3') || value.startsWith('vec4'))\n        )\n      )\n      .beginSubcases()\n      .combine('op', ['<<', '>>'])\n  )\n  .beforeAllSubcases(t => {\n    if (\n      scalarTypeOf(kScalarAndVectorTypes[t.params.lhs]) === Type.f16 ||\n      scalarTypeOf(kScalarAndVectorTypes[t.params.rhs]) === Type.f16\n    ) {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(t => {\n    const lhs = kScalarAndVectorTypes[t.params.lhs];\n    const rhs = kScalarAndVectorTypes[t.params.rhs];\n    const lhsElement = scalarTypeOf(lhs);\n    const rhsElement = scalarTypeOf(rhs);\n    const hasF16 = lhsElement === Type.f16 || rhsElement === Type.f16;\n    const code = `\n${hasF16 ? 'enable f16;' : ''}\nconst lhs = ${lhs.create(0).wgsl()};\nconst rhs = ${rhs.create(0).wgsl()};\nconst foo = lhs ${t.params.op} rhs;\n`;\n\n    // The LHS must be an integer, and the RHS must be an abstract/unsigned integer.\n    // The vector widths must also match.\n    const lhs_valid = [Type.abstractInt, Type.i32, Type.u32].includes(lhsElement);\n    const rhs_valid = [Type.abstractInt, Type.u32].includes(rhsElement);\n    const valid = lhs_valid && rhs_valid && numElementsOf(lhs) === numElementsOf(rhs);\n    t.expectCompileResult(valid, code);\n  });\n\ninterface InvalidTypeConfig {\n  // An expression that produces a value of the target type.\n  expr: string;\n  // A function that converts an expression of the target type into a valid u32 operand.\n  control: (x: string) => string;\n}\nconst kInvalidTypes: Record<string, InvalidTypeConfig> = {\n  mat2x2f: {\n    expr: 'm',\n    control: e => `u32(${e}[0][0])`,\n  },\n\n  array: {\n    expr: 'arr',\n    control: e => `${e}[0]`,\n  },\n\n  ptr: {\n    expr: '(&u)',\n    control: e => `*${e}`,\n  },\n\n  atomic: {\n    expr: 'a',\n    control: e => `atomicLoad(&${e})`,\n  },\n\n  texture: {\n    expr: 't',\n    control: e => `u32(textureLoad(${e}, vec2(), 0).x)`,\n  },\n\n  sampler: {\n    expr: 's',\n    control: e => `u32(textureSampleLevel(t, ${e}, vec2(), 0).x)`,\n  },\n\n  struct: {\n    expr: 'str',\n    control: e => `${e}.u`,\n  },\n};\n\ng.test('invalid_types')\n  .desc(\n    `\n  Validates that expressions are never accepted for non-scalar and non-vector types.\n  `\n  )\n  .params(u =>\n    u\n      .combine('op', ['<<', '>>'])\n      .combine('type', keysOf(kInvalidTypes))\n      .combine('control', [true, false])\n      .beginSubcases()\n  )\n  .fn(t => {\n    const type = kInvalidTypes[t.params.type];\n    const expr = t.params.control ? type.control(type.expr) : type.expr;\n    const code = `\n@group(0) @binding(0) var t : texture_2d<f32>;\n@group(0) @binding(1) var s : sampler;\n@group(0) @binding(2) var<storage, read_write> a : atomic<u32>;\n\nstruct S { u : u32 }\n\nvar<private> u : u32;\nvar<private> m : mat2x2f;\nvar<private> arr : array<u32, 4>;\nvar<private> str : S;\n\n@compute @workgroup_size(1)\nfn main() {\n  let foo = ${expr} ${t.params.op} ${expr};\n}\n`;\n\n    t.expectCompileResult(t.params.control, code);\n  });\n\nconst kLeftShiftCases = [\n  // rhs >= bitwidth fails\n  { lhs: `0u`, rhs: `31u`, pass: true },\n  { lhs: `0u`, rhs: `32u`, pass: false },\n  { lhs: `0u`, rhs: `33u`, pass: false },\n  { lhs: `0u`, rhs: `1000u`, pass: false },\n  { lhs: `0u`, rhs: `0xFFFFFFFFu`, pass: false },\n\n  { lhs: `0i`, rhs: `31u`, pass: true },\n  { lhs: `0i`, rhs: `32u`, pass: false },\n  { lhs: `0i`, rhs: `33u`, pass: false },\n  { lhs: `0i`, rhs: `1000u`, pass: false },\n  { lhs: `0i`, rhs: `0xFFFFFFFFu`, pass: false },\n\n  // Signed overflow (sign change)\n  { lhs: `${0b01000000000000000000000000000000}i`, rhs: `1u`, pass: false },\n  { lhs: `${0b01111111111111111111111111111111}i`, rhs: `1u`, pass: false },\n  { lhs: `${0b00000000000000000000000000000001}i`, rhs: `31u`, pass: false },\n  // Same cases should pass if lhs is unsigned\n  { lhs: `${0b01000000000000000000000000000000}u`, rhs: `1u`, pass: true },\n  { lhs: `${0b01111111111111111111111111111111}u`, rhs: `1u`, pass: true },\n  { lhs: `${0b00000000000000000000000000000001}u`, rhs: `31u`, pass: true },\n\n  // Unsigned overflow\n  { lhs: `${0b11000000000000000000000000000000}u`, rhs: `1u`, pass: false },\n  { lhs: `${0b11111111111111111111111111111111}u`, rhs: `1u`, pass: false },\n  { lhs: `${0b11111111111111111111111111111111}u`, rhs: `31u`, pass: false },\n  // Same cases should pass if lhs is signed\n  { lhs: `${signed(0b11000000000000000000000000000000)}i`, rhs: `1u`, pass: true },\n  { lhs: `${signed(0b11111111111111111111111111111111)}i`, rhs: `1u`, pass: true },\n  { lhs: `${signed(0b11111111111111111111111111111111)}i`, rhs: `31u`, pass: true },\n\n  // Shift by negative is an error\n  { lhs: `1`, rhs: `-1`, pass: false },\n  { lhs: `1i`, rhs: `-1`, pass: false },\n  { lhs: `1u`, rhs: `-1`, pass: false },\n];\n\ng.test('shift_left_concrete')\n  .desc('Tests validation of binary left shift of concrete values')\n  .params(u =>\n    u\n      .combine('case', kLeftShiftCases) //\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(t => {\n    const lhs = t.params.case.lhs;\n    const rhs = t.params.case.rhs;\n    const vec_size = t.params.vectorize;\n\n    const code = `\n@compute @workgroup_size(1)\nfn main() {\n    const r = ${vectorize(lhs, vec_size)} << ${vectorize(rhs, vec_size)};\n}\n    `;\n    t.expectCompileResult(t.params.case.pass, code);\n  });\n\nconst kRightShiftCases = [\n  // rhs >= bitwidth fails\n  { lhs: `0u`, rhs: `31u`, pass: true },\n  { lhs: `0u`, rhs: `32u`, pass: false },\n  { lhs: `0u`, rhs: `33u`, pass: false },\n  { lhs: `0u`, rhs: `1000u`, pass: false },\n  { lhs: `0u`, rhs: `0xFFFFFFFFu`, pass: false },\n\n  { lhs: `0i`, rhs: `31u`, pass: true },\n  { lhs: `0i`, rhs: `32u`, pass: false },\n  { lhs: `0i`, rhs: `33u`, pass: false },\n  { lhs: `0i`, rhs: `1000u`, pass: false },\n  { lhs: `0i`, rhs: `0xFFFFFFFFu`, pass: false },\n\n  // Shift by negative is an error\n  { lhs: `1`, rhs: `-1`, pass: false },\n  { lhs: `1i`, rhs: `-1`, pass: false },\n  { lhs: `1u`, rhs: `-1`, pass: false },\n];\n\ng.test('shift_right_concrete')\n  .desc('Tests validation of binary right shift of concrete values')\n  .params(u =>\n    u\n      .combine('case', kRightShiftCases) //\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(t => {\n    const lhs = t.params.case.lhs;\n    const rhs = t.params.case.rhs;\n    const vec_size = t.params.vectorize;\n\n    const code = `\n@compute @workgroup_size(1)\nfn main() {\n    const r = ${vectorize(lhs, vec_size)} >> ${vectorize(rhs, vec_size)};\n}\n    `;\n    t.expectCompileResult(t.params.case.pass, code);\n  });\n"],"mappings":"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"}