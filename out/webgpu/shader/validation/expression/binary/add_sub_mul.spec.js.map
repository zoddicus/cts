{"version":3,"file":"add_sub_mul.spec.js","names":["description","makeTestGroup","keysOf","objectsToRecord","assert","kBit","concreteTypeOf","isAbstractType","isConvertible","kAllScalarsAndVectors","kConcreteNumericScalarsAndVectors","ScalarType","scalarTypeOf","Type","VectorType","nextAfterF16","nextAfterF32","reinterpretU16AsF16","reinterpretU32AsF32","ShaderValidationTest","kConstantAndOverrideStages","validateConstOrOverrideBinaryOpEval","resultType","g","kOperators","add","op","sub","mul","kScalarAndVectorTypes","kConcreteNumericScalarAndVectorTypes","test","desc","params","u","combine","filter","value","startsWith","beginSubcases","beforeAllSubcases","t","lhs","f16","rhs","selectDeviceOrSkipTestCase","fn","lhsElement","rhsElement","hasBool","bool","hasF16","resType","canConvertScalarToVector","resTypeIsTypeable","code","compound_assignment","create","wgsl","valid","expectCompileResult","expand","p","toString","lType","width","nonZeroIndex","valueCase","swap","elementType","maxValue","nextAfter","v","outOfRangeIsError","positive","max","f32","u32","i32","Math","floor","ceil","sqrt","computedValue","leftValue","rightValue","type","index","values","Array","fill","success","abs","stage","kInvalidTypes","array","expr","control","e","ptr","atomic","texture","sampler","struct"],"sources":["../../../../../../src/webgpu/shader/validation/expression/binary/add_sub_mul.spec.ts"],"sourcesContent":["export const description = `\nValidation tests for add/sub/mul expressions.\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../common/util/data_tables.js';\nimport { assert } from '../../../../../common/util/util.js';\nimport { kBit } from '../../../../util/constants.js';\nimport {\n  concreteTypeOf,\n  isAbstractType,\n  isConvertible,\n  kAllScalarsAndVectors,\n  kConcreteNumericScalarsAndVectors,\n  ScalarType,\n  scalarTypeOf,\n  Type,\n  Value,\n  VectorType,\n} from '../../../../util/conversion.js';\nimport { nextAfterF16, nextAfterF32 } from '../../../../util/math.js';\nimport { reinterpretU16AsF16, reinterpretU32AsF32 } from '../../../../util/reinterpret.js';\nimport { ShaderValidationTest } from '../../shader_validation_test.js';\nimport {\n  kConstantAndOverrideStages,\n  validateConstOrOverrideBinaryOpEval,\n} from '../call/builtin/const_override_validation.js';\n\nimport { resultType } from './result_type.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\n// A list of operators tested in this file.\nconst kOperators = {\n  add: { op: '+' },\n  sub: { op: '-' },\n  mul: { op: '*' },\n};\n\n// A list of scalar and vector types.\nconst kScalarAndVectorTypes = objectsToRecord(kAllScalarsAndVectors);\nconst kConcreteNumericScalarAndVectorTypes = objectsToRecord(kConcreteNumericScalarsAndVectors);\n\ng.test('scalar_vector')\n  .desc(\n    `\n  Validates that scalar and vector expressions are only accepted for compatible numeric types.\n  `\n  )\n  .params(u =>\n    u\n      .combine('lhs', keysOf(kScalarAndVectorTypes))\n      .combine(\n        'rhs',\n        // Skip vec3 and vec4 on the RHS to keep the number of subcases down.\n        // vec3 + vec3 and vec4 + vec4 is tested in execution tests.\n        keysOf(kScalarAndVectorTypes).filter(\n          value => !(value.startsWith('vec3') || value.startsWith('vec4'))\n        )\n      )\n      .combine('compound_assignment', [false, true] as const)\n      .beginSubcases()\n      .combine('op', keysOf(kOperators))\n  )\n  .beforeAllSubcases(t => {\n    if (\n      scalarTypeOf(kScalarAndVectorTypes[t.params.lhs]) === Type.f16 ||\n      scalarTypeOf(kScalarAndVectorTypes[t.params.rhs]) === Type.f16\n    ) {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(t => {\n    const op = kOperators[t.params.op];\n    const lhs = kScalarAndVectorTypes[t.params.lhs];\n    const rhs = kScalarAndVectorTypes[t.params.rhs];\n    const lhsElement = scalarTypeOf(lhs);\n    const rhsElement = scalarTypeOf(rhs);\n    const hasBool = lhsElement === Type.bool || rhsElement === Type.bool;\n    const hasF16 = lhsElement === Type.f16 || rhsElement === Type.f16;\n    const resType = resultType({ lhs, rhs, canConvertScalarToVector: true });\n    const resTypeIsTypeable = resType && !isAbstractType(scalarTypeOf(resType));\n    const code = t.params.compound_assignment\n      ? `\n${hasF16 ? 'enable f16;' : ''}\nfn f() {\n  var v = ${lhs.create(0).wgsl()};\n  v ${op.op}= ${rhs.create(0).wgsl()};\n}\n`\n      : `\n${hasF16 ? 'enable f16;' : ''}\nconst lhs = ${lhs.create(0).wgsl()};\nconst rhs = ${rhs.create(0).wgsl()};\nconst foo ${resTypeIsTypeable ? `: ${resType}` : ''} = lhs ${op.op} rhs;\n`;\n    let valid = !hasBool && resType !== null;\n    if (valid && t.params.compound_assignment) {\n      valid = valid && isConvertible(resType!, concreteTypeOf(lhs));\n    }\n    t.expectCompileResult(valid, code);\n  });\n\ng.test('scalar_vector_out_of_range')\n  .desc(\n    `\n    Checks that constant or override evaluation of add/sub/mul operations on scalar/vectors that produce out of range values cause validation errors.\n      - Checks for all concrete numeric scalar and vector types, including scalar * vector and vector * scalar.\n      - Checks for all vector elements that could cause the out of range to happen.\n      - Checks for pairs of values at one ULP difference at the boundary of the out of range.\n  `\n  )\n  .params(u =>\n    u\n      .combine('op', keysOf(kOperators))\n      .combine('lhs', keysOf(kConcreteNumericScalarAndVectorTypes))\n      .expand('rhs', p => {\n        if (kScalarAndVectorTypes[p.lhs] instanceof VectorType) {\n          return [p.lhs, scalarTypeOf(kScalarAndVectorTypes[p.lhs]).toString()];\n        }\n        return [p.lhs];\n      })\n      .beginSubcases()\n      .expand('swap', p => {\n        if (p.lhs === p.rhs) {\n          return [false];\n        }\n        return [false, true];\n      })\n      .combine('nonZeroIndex', [0, 1, 2, 3])\n      .filter(p => {\n        const lType = kScalarAndVectorTypes[p.lhs];\n        if (lType instanceof VectorType) {\n          return lType.width > p.nonZeroIndex;\n        }\n        return p.nonZeroIndex === 0;\n      })\n      .combine('valueCase', ['halfmax', 'halfmax+ulp', 'sqrtmax', 'sqrtmax+ulp'] as const)\n      .combine('stage', kConstantAndOverrideStages)\n  )\n  .beforeAllSubcases(t => {\n    if (\n      scalarTypeOf(kScalarAndVectorTypes[t.params.lhs]) === Type.f16 ||\n      scalarTypeOf(kScalarAndVectorTypes[t.params.rhs]) === Type.f16\n    ) {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(t => {\n    const { op, valueCase, nonZeroIndex, swap } = t.params;\n    let { lhs, rhs } = t.params;\n\n    const elementType = scalarTypeOf(kScalarAndVectorTypes[lhs]);\n\n    // Handle the swapping of LHS and RHS to test all cases of scalar * vector.\n    if (swap) {\n      [rhs, lhs] = [lhs, rhs];\n    }\n\n    // What is the maximum representable value for the type? Also how do we add a ULP?\n    let maxValue = 0;\n    let nextAfter: (v: number) => number = v => v + 1;\n    let outOfRangeIsError = false;\n    switch (elementType) {\n      case Type.f16:\n        maxValue = reinterpretU16AsF16(kBit.f16.positive.max);\n        nextAfter = v => nextAfterF16(v, 'positive', 'no-flush');\n        outOfRangeIsError = true;\n        break;\n      case Type.f32:\n        maxValue = reinterpretU32AsF32(kBit.f32.positive.max);\n        nextAfter = v => nextAfterF32(v, 'positive', 'no-flush');\n        outOfRangeIsError = true;\n        break;\n      case Type.u32:\n        maxValue = kBit.u32.max;\n        break;\n      case Type.i32:\n        maxValue = kBit.i32.positive.max;\n        break;\n    }\n\n    // Decide on the test value that may or may not do an out of range computation.\n    let value;\n    switch (valueCase) {\n      case 'halfmax':\n        value = Math.floor(maxValue / 2);\n        break;\n      case 'halfmax+ulp':\n        value = nextAfter(Math.ceil(maxValue / 2));\n        break;\n      case 'sqrtmax':\n        value = Math.floor(Math.sqrt(maxValue));\n        break;\n      case 'sqrtmax+ulp':\n        value = nextAfter(Math.ceil(Math.sqrt(maxValue)));\n        break;\n    }\n\n    // What value will be computed by the test?\n    let computedValue;\n    let leftValue = value;\n    const rightValue = value;\n    switch (op) {\n      case 'add':\n        computedValue = value + value;\n        break;\n      case 'sub':\n        computedValue = -value - value;\n        leftValue = -value;\n        break;\n      case 'mul':\n        computedValue = value * value;\n        break;\n    }\n\n    // Creates either a scalar with the value, or a vector with the value only at a specific index.\n    const create = (type: ScalarType | VectorType, index: number, value: number): Value => {\n      if (type instanceof ScalarType) {\n        return type.create(value);\n      } else {\n        assert(type instanceof VectorType);\n        const values = new Array(type.width);\n        values.fill(0);\n        values[index] = value;\n        return type.create(values);\n      }\n    };\n\n    // Check if there is overflow\n    const success = Math.abs(computedValue) <= maxValue || !outOfRangeIsError;\n    validateConstOrOverrideBinaryOpEval(\n      t,\n      kOperators[op].op,\n      success,\n      t.params.stage,\n      create(kScalarAndVectorTypes[lhs], nonZeroIndex, leftValue),\n      t.params.stage,\n      create(kScalarAndVectorTypes[rhs], nonZeroIndex, rightValue)\n    );\n  });\n\ninterface InvalidTypeConfig {\n  // An expression that produces a value of the target type.\n  expr: string;\n  // A function that converts an expression of the target type into a valid integer operand.\n  control: (x: string) => string;\n}\nconst kInvalidTypes: Record<string, InvalidTypeConfig> = {\n  array: {\n    expr: 'arr',\n    control: e => `${e}[0]`,\n  },\n\n  ptr: {\n    expr: '(&u)',\n    control: e => `*${e}`,\n  },\n\n  atomic: {\n    expr: 'a',\n    control: e => `atomicLoad(&${e})`,\n  },\n\n  texture: {\n    expr: 't',\n    control: e => `i32(textureLoad(${e}, vec2(), 0).x)`,\n  },\n\n  sampler: {\n    expr: 's',\n    control: e => `i32(textureSampleLevel(t, ${e}, vec2(), 0).x)`,\n  },\n\n  struct: {\n    expr: 'str',\n    control: e => `${e}.u`,\n  },\n};\n\ng.test('invalid_type_with_itself')\n  .desc(\n    `\n  Validates that expressions are never accepted for non-scalar, non-vector, and non-matrix types.\n  `\n  )\n  .params(u =>\n    u\n      .combine('op', keysOf(kOperators))\n      .combine('type', keysOf(kInvalidTypes))\n      .combine('control', [true, false])\n      .beginSubcases()\n  )\n  .fn(t => {\n    const op = kOperators[t.params.op];\n    const type = kInvalidTypes[t.params.type];\n    const expr = t.params.control ? type.control(type.expr) : type.expr;\n    const code = `\n@group(0) @binding(0) var t : texture_2d<f32>;\n@group(0) @binding(1) var s : sampler;\n@group(0) @binding(2) var<storage, read_write> a : atomic<i32>;\n\nstruct S { u : u32 }\n\nvar<private> u : u32;\nvar<private> m : mat2x2f;\nvar<private> arr : array<i32, 4>;\nvar<private> str : S;\n\n@compute @workgroup_size(1)\nfn main() {\n  let foo = ${expr} ${op.op} ${expr};\n}\n`;\n\n    t.expectCompileResult(t.params.control, code);\n  });\n"],"mappings":"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"}