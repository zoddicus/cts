{"version":3,"file":"div_rem.spec.js","names":["description","makeTestGroup","keysOf","objectsToRecord","assert","kBit","ScalarType","Type","VectorType","kAllScalarsAndVectors","kConcreteNumericScalarsAndVectors","kConvertableToFloatScalar","scalarTypeOf","ShaderValidationTest","kConstantAndOverrideStages","validateConstOrOverrideBinaryOpEval","g","kOperators","div","op","rem","kScalarAndVectorTypes","kConcreteNumericScalarAndVectorTypes","test","desc","params","u","combine","filter","value","startsWith","beginSubcases","beforeAllSubcases","t","lhs","f16","rhs","selectDeviceOrSkipTestCase","fn","lhsElement","rhsElement","hasF16","code","create","wgsl","elementsCompatible","elementTypes","includes","bool","abstractInt","abstractFloat","every","e","valid","width","expectCompileResult","expand","p","toString","lType","nonOneIndex","expandWithParams","cases","leftValue","rightValue","error","leftRuntime","push","i32","negative","min","swap","type","index","values","Array","fill","stage","kInvalidTypes","array","expr","control","ptr","atomic","texture","sampler","struct"],"sources":["../../../../../../src/webgpu/shader/validation/expression/binary/div_rem.spec.ts"],"sourcesContent":["export const description = `\nValidation tests for division and remainder expressions.\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../common/util/data_tables.js';\nimport { assert } from '../../../../../common/util/util.js';\nimport { kBit } from '../../../../util/constants.js';\nimport {\n  ScalarType,\n  Type,\n  Value,\n  VectorType,\n  kAllScalarsAndVectors,\n  kConcreteNumericScalarsAndVectors,\n  kConvertableToFloatScalar,\n  scalarTypeOf,\n} from '../../../../util/conversion.js';\nimport { ShaderValidationTest } from '../../shader_validation_test.js';\nimport {\n  kConstantAndOverrideStages,\n  validateConstOrOverrideBinaryOpEval,\n} from '../call/builtin/const_override_validation.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\n// A list of operators tested in this file.\nconst kOperators = {\n  div: { op: '/' },\n  rem: { op: '%' },\n} as const;\n\n// A list of scalar and vector types.\nconst kScalarAndVectorTypes = objectsToRecord(kAllScalarsAndVectors);\nconst kConcreteNumericScalarAndVectorTypes = objectsToRecord(kConcreteNumericScalarsAndVectors);\n\ng.test('scalar_vector')\n  .desc(\n    `\n  Validates that scalar and vector expressions are only accepted for compatible numeric types.\n  `\n  )\n  .params(u =>\n    u\n      .combine('lhs', keysOf(kScalarAndVectorTypes))\n      .combine(\n        'rhs',\n        // Skip vec3 and vec4 on the RHS to keep the number of subcases down.\n        // vec3 + vec3 and vec4 + vec4 is tested in execution tests.\n        keysOf(kScalarAndVectorTypes).filter(\n          value => !(value.startsWith('vec3') || value.startsWith('vec4'))\n        )\n      )\n      .beginSubcases()\n      .combine('op', keysOf(kOperators))\n  )\n  .beforeAllSubcases(t => {\n    if (\n      scalarTypeOf(kScalarAndVectorTypes[t.params.lhs]) === Type.f16 ||\n      scalarTypeOf(kScalarAndVectorTypes[t.params.rhs]) === Type.f16\n    ) {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(t => {\n    const op = kOperators[t.params.op];\n    const lhs = kScalarAndVectorTypes[t.params.lhs];\n    const rhs = kScalarAndVectorTypes[t.params.rhs];\n    const lhsElement = scalarTypeOf(lhs);\n    const rhsElement = scalarTypeOf(rhs);\n    const hasF16 = lhsElement === Type.f16 || rhsElement === Type.f16;\n    const code = `\n${hasF16 ? 'enable f16;' : ''}\nconst lhs = ${lhs.create(1).wgsl()};\nconst rhs = ${rhs.create(1).wgsl()};\nconst foo = lhs ${op.op} rhs;\n`;\n\n    let elementsCompatible = lhsElement === rhsElement;\n    const elementTypes = [lhsElement, rhsElement];\n\n    // Booleans are not allowed for arithmetic expressions.\n    if (elementTypes.includes(Type.bool)) {\n      elementsCompatible = false;\n\n      // AbstractInt is allowed with everything but booleans which are already checked above.\n    } else if (elementTypes.includes(Type.abstractInt)) {\n      elementsCompatible = true;\n\n      // AbstractFloat is allowed with AbstractInt (checked above) or float types\n    } else if (elementTypes.includes(Type.abstractFloat)) {\n      elementsCompatible = elementTypes.every(e => kConvertableToFloatScalar.includes(e));\n    }\n\n    // Determine if the full type is compatible. The only invalid case is mixed vector sizes.\n    let valid = elementsCompatible;\n    if (lhs instanceof VectorType && rhs instanceof VectorType) {\n      valid = valid && lhs.width === rhs.width;\n    }\n\n    t.expectCompileResult(valid, code);\n  });\n\ng.test('scalar_vector_out_of_range')\n  .desc(\n    `\n    Checks that constant or override evaluation of div/rem operations on scalar/vectors that produce out of division by 0 or out of range values cause validation errors.\n      - Checks for all concrete numeric scalar and vector types, including scalar * vector and vector * scalar.\n      - Checks for all vector elements that could cause the out of range to happen.\n      - Checks for valid small cases and 0, also the minimum i32.\n  `\n  )\n  .params(u =>\n    u\n      .combine('op', keysOf(kOperators))\n      .combine('lhs', keysOf(kConcreteNumericScalarAndVectorTypes))\n      .expand('rhs', p => {\n        if (kScalarAndVectorTypes[p.lhs] instanceof VectorType) {\n          return [p.lhs, scalarTypeOf(kScalarAndVectorTypes[p.lhs]).toString()];\n        }\n        return [p.lhs];\n      })\n      .beginSubcases()\n      .expand('swap', p => {\n        if (p.lhs === p.rhs) {\n          return [false];\n        }\n        return [false, true];\n      })\n      .combine('nonOneIndex', [0, 1, 2, 3])\n      .filter(p => {\n        const lType = kScalarAndVectorTypes[p.lhs];\n        if (lType instanceof VectorType) {\n          return lType.width > p.nonOneIndex;\n        }\n        return p.nonOneIndex === 0;\n      })\n      .expandWithParams(p => {\n        const cases = [\n          { leftValue: 42, rightValue: 0, error: true, leftRuntime: false },\n          { leftValue: 42, rightValue: 0, error: true, leftRuntime: true },\n          { leftValue: 0, rightValue: 0, error: true, leftRuntime: true },\n          { leftValue: 0, rightValue: 42, error: false, leftRuntime: false },\n        ];\n        if (p.lhs === 'i32') {\n          cases.push({\n            leftValue: -kBit.i32.negative.min,\n            rightValue: -1,\n            error: true,\n            leftRuntime: false,\n          });\n          cases.push({\n            leftValue: -kBit.i32.negative.min + 1,\n            rightValue: -1,\n            error: false,\n            leftRuntime: false,\n          });\n        }\n        return cases;\n      })\n      .combine('stage', kConstantAndOverrideStages)\n  )\n  .beforeAllSubcases(t => {\n    if (\n      scalarTypeOf(kScalarAndVectorTypes[t.params.lhs]) === Type.f16 ||\n      scalarTypeOf(kScalarAndVectorTypes[t.params.rhs]) === Type.f16\n    ) {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(t => {\n    const { op, leftValue, rightValue, error, leftRuntime, nonOneIndex, swap } = t.params;\n    let { lhs, rhs } = t.params;\n\n    // Handle the swapping of LHS and RHS to test all cases of scalar * vector.\n    if (swap) {\n      [rhs, lhs] = [lhs, rhs];\n    }\n\n    // Creates either a scalar with the value, or a vector with the value only at a specific index.\n    const create = (type: ScalarType | VectorType, index: number, value: number): Value => {\n      if (type instanceof ScalarType) {\n        return type.create(value);\n      } else {\n        assert(type instanceof VectorType);\n        const values = new Array(type.width);\n        values.fill(1);\n        values[index] = value;\n        return type.create(values);\n      }\n    };\n\n    // Check if there is overflow\n    validateConstOrOverrideBinaryOpEval(\n      t,\n      kOperators[op].op,\n      !error,\n      leftRuntime ? 'runtime' : t.params.stage,\n      create(kScalarAndVectorTypes[lhs], nonOneIndex, leftValue),\n      t.params.stage,\n      create(kScalarAndVectorTypes[rhs], nonOneIndex, rightValue)\n    );\n  });\n\ninterface InvalidTypeConfig {\n  // An expression that produces a value of the target type.\n  expr: string;\n  // A function that converts an expression of the target type into a valid integer operand.\n  control: (x: string) => string;\n}\nconst kInvalidTypes: Record<string, InvalidTypeConfig> = {\n  array: {\n    expr: 'arr',\n    control: e => `${e}[0]`,\n  },\n\n  ptr: {\n    expr: '(&u)',\n    control: e => `*${e}`,\n  },\n\n  atomic: {\n    expr: 'a',\n    control: e => `atomicLoad(&${e})`,\n  },\n\n  texture: {\n    expr: 't',\n    control: e => `i32(textureLoad(${e}, vec2(), 0).x)`,\n  },\n\n  sampler: {\n    expr: 's',\n    control: e => `i32(textureSampleLevel(t, ${e}, vec2(), 0).x)`,\n  },\n\n  struct: {\n    expr: 'str',\n    control: e => `${e}.u`,\n  },\n};\n\ng.test('invalid_type_with_itself')\n  .desc(\n    `\n  Validates that expressions are never accepted for non-scalar, non-vector, and non-matrix types.\n  `\n  )\n  .params(u =>\n    u\n      .combine('op', keysOf(kOperators))\n      .combine('type', keysOf(kInvalidTypes))\n      .combine('control', [true, false])\n      .beginSubcases()\n  )\n  .fn(t => {\n    const op = kOperators[t.params.op];\n    const type = kInvalidTypes[t.params.type];\n    const expr = t.params.control ? type.control(type.expr) : type.expr;\n    const code = `\n@group(0) @binding(0) var t : texture_2d<f32>;\n@group(0) @binding(1) var s : sampler;\n@group(0) @binding(2) var<storage, read_write> a : atomic<i32>;\n\nstruct S { u : u32 }\n\nvar<private> u : u32;\nvar<private> m : mat2x2f;\nvar<private> arr : array<i32, 4>;\nvar<private> str : S;\n\n@compute @workgroup_size(1)\nfn main() {\n  let foo = ${expr} ${op.op} ${expr};\n}\n`;\n\n    t.expectCompileResult(t.params.control, code);\n  });\n"],"mappings":"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"}