{"version":3,"file":"textureSample.spec.js","names":["builtin","description","makeTestGroup","keysOf","objectsToRecord","Type","kAllScalarsAndVectors","isConvertible","ShaderValidationTest","kValidTextureSampleParameterTypes","coordsArgType","f32","vec2f","offsetArgType","vec2i","hasArrayIndexArg","vec3f","vec3i","texture_depth_2d","texture_depth_2d_array","texture_depth_cube","texture_depth_cube_array","kTextureTypes","kValuesTypes","g","test","desc","params","u","combine","beginSubcases","expand","textureType","offset","fn","t","coordType","value","coordArgType","coordsRequiredType","coordWGSL","create","wgsl","arrayWGSL","offsetWGSL","code","expectSuccess","expectCompileResult","filter","arrayIndexType","arrayIndexArgType","args","map","arg","join","i32","u32","undefined","offsetType","offsetRequiredType","varType","castWGSL","elementType","toString"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/textureSample.spec.ts"],"sourcesContent":["const builtin = 'textureSample';\nexport const description = `\nValidation tests for the ${builtin}() builtin.\n\n* test textureSample coords parameter must be correct type\n* test textureSample array_index parameter must be correct type\n* test textureSample coords parameter must be correct type\n* test textureSample offset parameter must be correct type\n* test textureSample offset parameter must be a const-expression\n* test textureSample offset parameter must be between -8 and +7 inclusive\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport {\n  Type,\n  kAllScalarsAndVectors,\n  isConvertible,\n  ScalarType,\n  VectorType,\n} from '../../../../../util/conversion.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\ntype TextureSampleArguments = {\n  coordsArgType: ScalarType | VectorType;\n  hasArrayIndexArg?: boolean;\n  offsetArgType?: VectorType;\n};\n\nconst kValidTextureSampleParameterTypes: { [n: string]: TextureSampleArguments } = {\n  'texture_1d<f32>': { coordsArgType: Type.f32 },\n  'texture_2d<f32>': { coordsArgType: Type.vec2f, offsetArgType: Type.vec2i },\n  'texture_2d_array<f32>': {\n    coordsArgType: Type.vec2f,\n    hasArrayIndexArg: true,\n    offsetArgType: Type.vec2i,\n  },\n  'texture_3d<f32>': { coordsArgType: Type.vec3f, offsetArgType: Type.vec3i },\n  'texture_cube<f32>': { coordsArgType: Type.vec3f },\n  'texture_cube_array<f32>': { coordsArgType: Type.vec3f, hasArrayIndexArg: true },\n  texture_depth_2d: { coordsArgType: Type.vec2f, offsetArgType: Type.vec2i },\n  texture_depth_2d_array: { coordsArgType: Type.vec2f, hasArrayIndexArg: true },\n  texture_depth_cube: { coordsArgType: Type.vec3f },\n  texture_depth_cube_array: { coordsArgType: Type.vec3f, hasArrayIndexArg: true },\n} as const;\n\nconst kTextureTypes = keysOf(kValidTextureSampleParameterTypes);\nconst kValuesTypes = objectsToRecord(kAllScalarsAndVectors);\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\ng.test('coords_argument')\n  .desc(\n    `\nValidates that only incorrect coords arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', keysOf(kValidTextureSampleParameterTypes))\n      .combine('coordType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .combine('value', [-1, 0, 1] as const)\n      .expand('offset', ({ textureType }) => {\n        const offset = kValidTextureSampleParameterTypes[textureType].offsetArgType;\n        return offset ? [false, true] : [false];\n      })\n  )\n  .fn(t => {\n    const { textureType, coordType, offset, value } = t.params;\n    const coordArgType = kValuesTypes[coordType];\n    const {\n      offsetArgType,\n      coordsArgType: coordsRequiredType,\n      hasArrayIndexArg,\n    } = kValidTextureSampleParameterTypes[textureType];\n\n    const coordWGSL = coordArgType.create(value).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const offsetWGSL = offset ? `, ${offsetArgType?.create(0).wgsl()}` : '';\n\n    const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureSample(t, s, ${coordWGSL}${arrayWGSL}${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess = isConvertible(coordArgType, coordsRequiredType);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('array_index_argument')\n  .desc(\n    `\nValidates that only incorrect array_index arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kTextureTypes)\n      // filter out types with no array_index\n      .filter(\n        ({ textureType }) => !!kValidTextureSampleParameterTypes[textureType].hasArrayIndexArg\n      )\n      .combine('arrayIndexType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .combine('value', [-9, -8, 0, 7, 8])\n  )\n  .fn(t => {\n    const { textureType, arrayIndexType, value } = t.params;\n    const arrayIndexArgType = kValuesTypes[arrayIndexType];\n    const args = [arrayIndexArgType.create(value)];\n    const { coordsArgType, offsetArgType } = kValidTextureSampleParameterTypes[textureType];\n\n    const coordWGSL = coordsArgType.create(0).wgsl();\n    const arrayWGSL = args.map(arg => arg.wgsl()).join(', ');\n    const offsetWGSL = offsetArgType ? `, ${offsetArgType.create(0).wgsl()}` : '';\n\n    const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureSample(t, s, ${coordWGSL}, ${arrayWGSL}${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess =\n      isConvertible(arrayIndexArgType, Type.i32) || isConvertible(arrayIndexArgType, Type.u32);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('offset_argument')\n  .desc(\n    `\nValidates that only incorrect offset arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kTextureTypes)\n      // filter out types with no offset\n      .filter(\n        ({ textureType }) =>\n          kValidTextureSampleParameterTypes[textureType].offsetArgType !== undefined\n      )\n      .combine('offsetType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .combine('value', [-9, -8, 0, 7, 8])\n  )\n  .fn(t => {\n    const { textureType, offsetType, value } = t.params;\n    const offsetArgType = kValuesTypes[offsetType];\n    const args = [offsetArgType.create(value)];\n    const {\n      coordsArgType,\n      hasArrayIndexArg,\n      offsetArgType: offsetRequiredType,\n    } = kValidTextureSampleParameterTypes[textureType];\n\n    const coordWGSL = coordsArgType.create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const offsetWGSL = args.map(arg => arg.wgsl()).join(', ');\n\n    const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureSample(t, s, ${coordWGSL}${arrayWGSL}, ${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess =\n      isConvertible(offsetArgType, offsetRequiredType!) && value >= -8 && value <= 7;\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('offset_argument,non_const')\n  .desc(\n    `\nValidates that only non-const offset arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kTextureTypes)\n      .combine('varType', ['c', 'u', 'l'])\n      // filter out types with no offset\n      .filter(\n        ({ textureType }) =>\n          kValidTextureSampleParameterTypes[textureType].offsetArgType !== undefined\n      )\n  )\n  .fn(t => {\n    const { textureType, varType } = t.params;\n    const { coordsArgType, hasArrayIndexArg, offsetArgType } =\n      kValidTextureSampleParameterTypes[textureType];\n\n    const coordWGSL = coordsArgType.create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const offsetWGSL = `${offsetArgType}(${varType})`;\n    const castWGSL = offsetArgType!.elementType.toString();\n\n    const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType};\n@group(0) @binding(2) var<uniform> u: ${offsetArgType};\n@fragment fn fs(@builtin(position) p: vec4f) -> @location(0) vec4f {\n  const c = 1;\n  let l = ${offsetArgType}(${castWGSL}(p.x));\n  let v = textureSample(t, s, ${coordWGSL}${arrayWGSL}, ${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess = varType === 'c';\n    t.expectCompileResult(expectSuccess, code);\n  });\n"],"mappings":"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"}