{"version":3,"file":"textureSample.spec.js","names":["builtin","description","makeTestGroup","keysOf","objectsToRecord","Type","kAllScalarsAndVectors","isConvertible","isUnsignedType","ShaderValidationTest","kEntryPointsToValidateFragmentOnlyBuiltins","kValidTextureSampleParameterTypes","coordsArgType","f32","vec2f","offsetArgType","vec2i","hasArrayIndexArg","vec3f","vec3i","texture_depth_2d","texture_depth_2d_array","texture_depth_cube","texture_depth_cube_array","kTextureTypes","kValuesTypes","g","test","specURL","desc","params","u","combine","beginSubcases","filter","t","coordType","value","expand","textureType","fn","offset","coordArgType","coordsRequiredType","coordWGSL","create","wgsl","arrayWGSL","offsetWGSL","code","expectSuccess","expectCompileResult","arrayIndexType","arrayIndexArgType","args","map","arg","join","i32","u32","offsetType","offsetRequiredType","varType","entryPoint","config"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/textureSample.spec.ts"],"sourcesContent":["const builtin = 'textureSample';\nexport const description = `\nValidation tests for the ${builtin}() builtin.\n\n* test textureSample coords parameter must be correct type\n* test textureSample array_index parameter must be correct type\n* test textureSample coords parameter must be correct type\n* test textureSample offset parameter must be correct type\n* test textureSample offset parameter must be a const-expression\n* test textureSample offset parameter must be between -8 and +7 inclusive\n* test textureSample not usable in a compute or vertex shader\n\nnote: uniformity validation is covered in src/webgpu/shader/validation/uniformity/uniformity.spec.ts\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport {\n  Type,\n  kAllScalarsAndVectors,\n  isConvertible,\n  ScalarType,\n  VectorType,\n  isUnsignedType,\n} from '../../../../../util/conversion.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\nimport { kEntryPointsToValidateFragmentOnlyBuiltins } from './shader_stage_utils.js';\n\ntype TextureSampleArguments = {\n  coordsArgType: ScalarType | VectorType;\n  hasArrayIndexArg?: boolean;\n  offsetArgType?: VectorType;\n};\n\nconst kValidTextureSampleParameterTypes: { [n: string]: TextureSampleArguments } = {\n  'texture_1d<f32>': { coordsArgType: Type.f32 },\n  'texture_2d<f32>': { coordsArgType: Type.vec2f, offsetArgType: Type.vec2i },\n  'texture_2d_array<f32>': {\n    coordsArgType: Type.vec2f,\n    hasArrayIndexArg: true,\n    offsetArgType: Type.vec2i,\n  },\n  'texture_3d<f32>': { coordsArgType: Type.vec3f, offsetArgType: Type.vec3i },\n  'texture_cube<f32>': { coordsArgType: Type.vec3f },\n  'texture_cube_array<f32>': { coordsArgType: Type.vec3f, hasArrayIndexArg: true },\n  texture_depth_2d: { coordsArgType: Type.vec2f, offsetArgType: Type.vec2i },\n  texture_depth_2d_array: {\n    coordsArgType: Type.vec2f,\n    hasArrayIndexArg: true,\n    offsetArgType: Type.vec2i,\n  },\n  texture_depth_cube: { coordsArgType: Type.vec3f },\n  texture_depth_cube_array: { coordsArgType: Type.vec3f, hasArrayIndexArg: true },\n} as const;\n\nconst kTextureTypes = keysOf(kValidTextureSampleParameterTypes);\nconst kValuesTypes = objectsToRecord(kAllScalarsAndVectors);\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\ng.test('coords_argument')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesample')\n  .desc(\n    `\nValidates that only incorrect coords arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', keysOf(kValidTextureSampleParameterTypes))\n      .combine('coordType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .combine('value', [-1, 0, 1] as const)\n      // filter out unsigned types with negative values\n      .filter(t => !isUnsignedType(kValuesTypes[t.coordType]) || t.value >= 0)\n      .expand('offset', t =>\n        kValidTextureSampleParameterTypes[t.textureType].offsetArgType ? [false, true] : [false]\n      )\n  )\n  .fn(t => {\n    const { textureType, coordType, offset, value } = t.params;\n    const coordArgType = kValuesTypes[coordType];\n    const {\n      offsetArgType,\n      coordsArgType: coordsRequiredType,\n      hasArrayIndexArg,\n    } = kValidTextureSampleParameterTypes[textureType];\n\n    const coordWGSL = coordArgType.create(value).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const offsetWGSL = offset ? `, ${offsetArgType?.create(0).wgsl()}` : '';\n\n    const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureSample(t, s, ${coordWGSL}${arrayWGSL}${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess = isConvertible(coordArgType, coordsRequiredType);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('array_index_argument')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesample')\n  .desc(\n    `\nValidates that only incorrect array_index arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kTextureTypes)\n      // filter out types with no array_index\n      .filter(t => !!kValidTextureSampleParameterTypes[t.textureType].hasArrayIndexArg)\n      .combine('arrayIndexType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .combine('value', [-9, -8, 0, 7, 8])\n      // filter out unsigned types with negative values\n      .filter(t => !isUnsignedType(kValuesTypes[t.arrayIndexType]) || t.value >= 0)\n      .expand('offset', t =>\n        kValidTextureSampleParameterTypes[t.textureType].offsetArgType ? [false, true] : [false]\n      )\n  )\n  .fn(t => {\n    const { textureType, arrayIndexType, value, offset } = t.params;\n    const arrayIndexArgType = kValuesTypes[arrayIndexType];\n    const args = [arrayIndexArgType.create(value)];\n    const { coordsArgType, offsetArgType } = kValidTextureSampleParameterTypes[textureType];\n\n    const coordWGSL = coordsArgType.create(0).wgsl();\n    const arrayWGSL = args.map(arg => arg.wgsl()).join(', ');\n    const offsetWGSL = offset ? `, ${offsetArgType!.create(0).wgsl()}` : '';\n\n    const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureSample(t, s, ${coordWGSL}, ${arrayWGSL}${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess =\n      isConvertible(arrayIndexArgType, Type.i32) || isConvertible(arrayIndexArgType, Type.u32);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('offset_argument')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesample')\n  .desc(\n    `\nValidates that only incorrect offset arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kTextureTypes)\n      // filter out types with no offset\n      .filter(t => !!kValidTextureSampleParameterTypes[t.textureType].offsetArgType)\n      .combine('offsetType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .combine('value', [-9, -8, 0, 7, 8])\n      // filter out unsigned types with negative values\n      .filter(t => !isUnsignedType(kValuesTypes[t.offsetType]) || t.value >= 0)\n  )\n  .fn(t => {\n    const { textureType, offsetType, value } = t.params;\n    const offsetArgType = kValuesTypes[offsetType];\n    const args = [offsetArgType.create(value)];\n    const {\n      coordsArgType,\n      hasArrayIndexArg,\n      offsetArgType: offsetRequiredType,\n    } = kValidTextureSampleParameterTypes[textureType];\n\n    const coordWGSL = coordsArgType.create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const offsetWGSL = args.map(arg => arg.wgsl()).join(', ');\n\n    const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureSample(t, s, ${coordWGSL}${arrayWGSL}, ${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess =\n      isConvertible(offsetArgType, offsetRequiredType!) && value >= -8 && value <= 7;\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('offset_argument,non_const')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesample')\n  .desc(\n    `\nValidates that only non-const offset arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kTextureTypes)\n      .combine('varType', ['c', 'u', 'l'])\n      // filter out types with no offset\n      .filter(t => !!kValidTextureSampleParameterTypes[t.textureType].offsetArgType)\n  )\n  .fn(t => {\n    const { textureType, varType } = t.params;\n    const { coordsArgType, hasArrayIndexArg, offsetArgType } =\n      kValidTextureSampleParameterTypes[textureType];\n\n    const coordWGSL = coordsArgType.create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const offsetWGSL = `${offsetArgType}(${varType})`;\n\n    const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType};\n@group(0) @binding(2) var<uniform> u: ${offsetArgType};\n@fragment fn fs() -> @location(0) vec4f {\n  const c = 1;\n  let l = ${offsetArgType!.create(0).wgsl()};\n  let v = textureSample(t, s, ${coordWGSL}${arrayWGSL}, ${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess = varType === 'c';\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('only_in_fragment')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesample')\n  .desc(\n    `\nValidates that ${builtin} must not be used in a compute or vertex shader.\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kTextureTypes)\n      .combine('entryPoint', keysOf(kEntryPointsToValidateFragmentOnlyBuiltins))\n      .expand('offset', t =>\n        kValidTextureSampleParameterTypes[t.textureType].offsetArgType ? [false, true] : [false]\n      )\n  )\n  .fn(t => {\n    const { textureType, entryPoint, offset } = t.params;\n    const { coordsArgType, hasArrayIndexArg, offsetArgType } =\n      kValidTextureSampleParameterTypes[textureType];\n\n    const coordWGSL = coordsArgType.create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const offsetWGSL = offset ? `, ${offsetArgType?.create(0).wgsl()}` : '';\n\n    const config = kEntryPointsToValidateFragmentOnlyBuiltins[entryPoint];\n    const code = `\n${config.code}\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType};\n\nfn foo() {\n  _ = textureSample(t, s, ${coordWGSL}${arrayWGSL}${offsetWGSL});\n}`;\n    t.expectCompileResult(config.expectSuccess, code);\n  });\n"],"mappings":";;GAAA,MAAMA,OAAO,GAAG,eAAe,CAC/B,OAAO,MAAMC,WAAW,GAAI;AAC5B,2BAA2BD,OAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,SAASE,aAAa,QAAQ,kDAAkD;AAChF,SAASC,MAAM,EAAEC,eAAe,QAAQ,8CAA8C;AACtF;EACEC,IAAI;EACJC,qBAAqB;EACrBC,aAAa;;;EAGbC,cAAc;AACT,mCAAmC;AAC1C,SAASC,oBAAoB,QAAQ,oCAAoC;;AAEzE,SAASC,0CAA0C,QAAQ,yBAAyB;;;;;;;;AAQpF,MAAMC,iCAA0E,GAAG;EACjF,iBAAiB,EAAE,EAAEC,aAAa,EAAEP,IAAI,CAACQ,GAAG,CAAC,CAAC;EAC9C,iBAAiB,EAAE,EAAED,aAAa,EAAEP,IAAI,CAACS,KAAK,EAAEC,aAAa,EAAEV,IAAI,CAACW,KAAK,CAAC,CAAC;EAC3E,uBAAuB,EAAE;IACvBJ,aAAa,EAAEP,IAAI,CAACS,KAAK;IACzBG,gBAAgB,EAAE,IAAI;IACtBF,aAAa,EAAEV,IAAI,CAACW;EACtB,CAAC;EACD,iBAAiB,EAAE,EAAEJ,aAAa,EAAEP,IAAI,CAACa,KAAK,EAAEH,aAAa,EAAEV,IAAI,CAACc,KAAK,CAAC,CAAC;EAC3E,mBAAmB,EAAE,EAAEP,aAAa,EAAEP,IAAI,CAACa,KAAK,CAAC,CAAC;EAClD,yBAAyB,EAAE,EAAEN,aAAa,EAAEP,IAAI,CAACa,KAAK,EAAED,gBAAgB,EAAE,IAAI,CAAC,CAAC;EAChFG,gBAAgB,EAAE,EAAER,aAAa,EAAEP,IAAI,CAACS,KAAK,EAAEC,aAAa,EAAEV,IAAI,CAACW,KAAK,CAAC,CAAC;EAC1EK,sBAAsB,EAAE;IACtBT,aAAa,EAAEP,IAAI,CAACS,KAAK;IACzBG,gBAAgB,EAAE,IAAI;IACtBF,aAAa,EAAEV,IAAI,CAACW;EACtB,CAAC;EACDM,kBAAkB,EAAE,EAAEV,aAAa,EAAEP,IAAI,CAACa,KAAK,CAAC,CAAC;EACjDK,wBAAwB,EAAE,EAAEX,aAAa,EAAEP,IAAI,CAACa,KAAK,EAAED,gBAAgB,EAAE,IAAI,CAAC;AAChF,CAAU;;AAEV,MAAMO,aAAa,GAAGrB,MAAM,CAACQ,iCAAiC,CAAC;AAC/D,MAAMc,YAAY,GAAGrB,eAAe,CAACE,qBAAqB,CAAC;;AAE3D,OAAO,MAAMoB,CAAC,GAAGxB,aAAa,CAACO,oBAAoB,CAAC;;AAEpDiB,CAAC,CAACC,IAAI,CAAC,iBAAiB,CAAC;AACtBC,OAAO,CAAC,qDAAqD,CAAC;AAC9DC,IAAI;EACF;AACL,iEAAiE7B,OAAQ;AACzE;AACE,CAAC;AACA8B,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,aAAa,EAAE7B,MAAM,CAACQ,iCAAiC,CAAC,CAAC;AACjEqB,OAAO,CAAC,WAAW,EAAE7B,MAAM,CAACsB,YAAY,CAAC,CAAC;AAC1CQ,aAAa,CAAC,CAAC;AACfD,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAU;AACrC;AAAA,CACCE,MAAM,CAAC,CAAAC,CAAC,KAAI,CAAC3B,cAAc,CAACiB,YAAY,CAACU,CAAC,CAACC,SAAS,CAAC,CAAC,IAAID,CAAC,CAACE,KAAK,IAAI,CAAC,CAAC;AACvEC,MAAM,CAAC,QAAQ,EAAE,CAAAH,CAAC;AACjBxB,iCAAiC,CAACwB,CAAC,CAACI,WAAW,CAAC,CAACxB,aAAa,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK;AACzF;AACJ,CAAC;AACAyB,EAAE,CAAC,CAAAL,CAAC,KAAI;EACP,MAAM,EAAEI,WAAW,EAAEH,SAAS,EAAEK,MAAM,EAAEJ,KAAK,CAAC,CAAC,GAAGF,CAAC,CAACL,MAAM;EAC1D,MAAMY,YAAY,GAAGjB,YAAY,CAACW,SAAS,CAAC;EAC5C,MAAM;IACJrB,aAAa;IACbH,aAAa,EAAE+B,kBAAkB;IACjC1B;EACF,CAAC,GAAGN,iCAAiC,CAAC4B,WAAW,CAAC;;EAElD,MAAMK,SAAS,GAAGF,YAAY,CAACG,MAAM,CAACR,KAAK,CAAC,CAACS,IAAI,CAAC,CAAC;EACnD,MAAMC,SAAS,GAAG9B,gBAAgB,GAAG,KAAK,GAAG,EAAE;EAC/C,MAAM+B,UAAU,GAAGP,MAAM,GAAI,KAAI1B,aAAa,EAAE8B,MAAM,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAE,EAAC,GAAG,EAAE;;EAEvE,MAAMG,IAAI,GAAI;AAClB;AACA,+BAA+BV,WAAY;AAC3C;AACA,gCAAgCK,SAAU,GAAEG,SAAU,GAAEC,UAAW;AACnE;AACA;AACA,CAAC;EACG,MAAME,aAAa,GAAG3C,aAAa,CAACmC,YAAY,EAAEC,kBAAkB,CAAC;EACrER,CAAC,CAACgB,mBAAmB,CAACD,aAAa,EAAED,IAAI,CAAC;AAC5C,CAAC,CAAC;;AAEJvB,CAAC,CAACC,IAAI,CAAC,sBAAsB,CAAC;AAC3BC,OAAO,CAAC,qDAAqD,CAAC;AAC9DC,IAAI;EACF;AACL,sEAAsE7B,OAAQ;AAC9E;AACE,CAAC;AACA8B,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,aAAa,EAAER,aAAa;AACrC;AAAA,CACCU,MAAM,CAAC,CAAAC,CAAC,KAAI,CAAC,CAACxB,iCAAiC,CAACwB,CAAC,CAACI,WAAW,CAAC,CAACtB,gBAAgB,CAAC;AAChFe,OAAO,CAAC,gBAAgB,EAAE7B,MAAM,CAACsB,YAAY,CAAC,CAAC;AAC/CQ,aAAa,CAAC,CAAC;AACfD,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AACnC;AAAA,CACCE,MAAM,CAAC,CAAAC,CAAC,KAAI,CAAC3B,cAAc,CAACiB,YAAY,CAACU,CAAC,CAACiB,cAAc,CAAC,CAAC,IAAIjB,CAAC,CAACE,KAAK,IAAI,CAAC,CAAC;AAC5EC,MAAM,CAAC,QAAQ,EAAE,CAAAH,CAAC;AACjBxB,iCAAiC,CAACwB,CAAC,CAACI,WAAW,CAAC,CAACxB,aAAa,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK;AACzF;AACJ,CAAC;AACAyB,EAAE,CAAC,CAAAL,CAAC,KAAI;EACP,MAAM,EAAEI,WAAW,EAAEa,cAAc,EAAEf,KAAK,EAAEI,MAAM,CAAC,CAAC,GAAGN,CAAC,CAACL,MAAM;EAC/D,MAAMuB,iBAAiB,GAAG5B,YAAY,CAAC2B,cAAc,CAAC;EACtD,MAAME,IAAI,GAAG,CAACD,iBAAiB,CAACR,MAAM,CAACR,KAAK,CAAC,CAAC;EAC9C,MAAM,EAAEzB,aAAa,EAAEG,aAAa,CAAC,CAAC,GAAGJ,iCAAiC,CAAC4B,WAAW,CAAC;;EAEvF,MAAMK,SAAS,GAAGhC,aAAa,CAACiC,MAAM,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;EAChD,MAAMC,SAAS,GAAGO,IAAI,CAACC,GAAG,CAAC,CAAAC,GAAG,KAAIA,GAAG,CAACV,IAAI,CAAC,CAAC,CAAC,CAACW,IAAI,CAAC,IAAI,CAAC;EACxD,MAAMT,UAAU,GAAGP,MAAM,GAAI,KAAI1B,aAAa,CAAE8B,MAAM,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAE,EAAC,GAAG,EAAE;;EAEvE,MAAMG,IAAI,GAAI;AAClB;AACA,+BAA+BV,WAAY;AAC3C;AACA,gCAAgCK,SAAU,KAAIG,SAAU,GAAEC,UAAW;AACrE;AACA;AACA,CAAC;EACG,MAAME,aAAa;EACjB3C,aAAa,CAAC8C,iBAAiB,EAAEhD,IAAI,CAACqD,GAAG,CAAC,IAAInD,aAAa,CAAC8C,iBAAiB,EAAEhD,IAAI,CAACsD,GAAG,CAAC;EAC1FxB,CAAC,CAACgB,mBAAmB,CAACD,aAAa,EAAED,IAAI,CAAC;AAC5C,CAAC,CAAC;;AAEJvB,CAAC,CAACC,IAAI,CAAC,iBAAiB,CAAC;AACtBC,OAAO,CAAC,qDAAqD,CAAC;AAC9DC,IAAI;EACF;AACL,iEAAiE7B,OAAQ;AACzE;AACE,CAAC;AACA8B,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,aAAa,EAAER,aAAa;AACrC;AAAA,CACCU,MAAM,CAAC,CAAAC,CAAC,KAAI,CAAC,CAACxB,iCAAiC,CAACwB,CAAC,CAACI,WAAW,CAAC,CAACxB,aAAa,CAAC;AAC7EiB,OAAO,CAAC,YAAY,EAAE7B,MAAM,CAACsB,YAAY,CAAC,CAAC;AAC3CQ,aAAa,CAAC,CAAC;AACfD,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AACnC;AAAA,CACCE,MAAM,CAAC,CAAAC,CAAC,KAAI,CAAC3B,cAAc,CAACiB,YAAY,CAACU,CAAC,CAACyB,UAAU,CAAC,CAAC,IAAIzB,CAAC,CAACE,KAAK,IAAI,CAAC;AAC5E,CAAC;AACAG,EAAE,CAAC,CAAAL,CAAC,KAAI;EACP,MAAM,EAAEI,WAAW,EAAEqB,UAAU,EAAEvB,KAAK,CAAC,CAAC,GAAGF,CAAC,CAACL,MAAM;EACnD,MAAMf,aAAa,GAAGU,YAAY,CAACmC,UAAU,CAAC;EAC9C,MAAMN,IAAI,GAAG,CAACvC,aAAa,CAAC8B,MAAM,CAACR,KAAK,CAAC,CAAC;EAC1C,MAAM;IACJzB,aAAa;IACbK,gBAAgB;IAChBF,aAAa,EAAE8C;EACjB,CAAC,GAAGlD,iCAAiC,CAAC4B,WAAW,CAAC;;EAElD,MAAMK,SAAS,GAAGhC,aAAa,CAACiC,MAAM,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;EAChD,MAAMC,SAAS,GAAG9B,gBAAgB,GAAG,KAAK,GAAG,EAAE;EAC/C,MAAM+B,UAAU,GAAGM,IAAI,CAACC,GAAG,CAAC,CAAAC,GAAG,KAAIA,GAAG,CAACV,IAAI,CAAC,CAAC,CAAC,CAACW,IAAI,CAAC,IAAI,CAAC;;EAEzD,MAAMR,IAAI,GAAI;AAClB;AACA,+BAA+BV,WAAY;AAC3C;AACA,gCAAgCK,SAAU,GAAEG,SAAU,KAAIC,UAAW;AACrE;AACA;AACA,CAAC;EACG,MAAME,aAAa;EACjB3C,aAAa,CAACQ,aAAa,EAAE8C,kBAAmB,CAAC,IAAIxB,KAAK,IAAI,CAAC,CAAC,IAAIA,KAAK,IAAI,CAAC;EAChFF,CAAC,CAACgB,mBAAmB,CAACD,aAAa,EAAED,IAAI,CAAC;AAC5C,CAAC,CAAC;;AAEJvB,CAAC,CAACC,IAAI,CAAC,2BAA2B,CAAC;AAChCC,OAAO,CAAC,qDAAqD,CAAC;AAC9DC,IAAI;EACF;AACL,iEAAiE7B,OAAQ;AACzE;AACE,CAAC;AACA8B,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,aAAa,EAAER,aAAa,CAAC;AACrCQ,OAAO,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;AACnC;AAAA,CACCE,MAAM,CAAC,CAAAC,CAAC,KAAI,CAAC,CAACxB,iCAAiC,CAACwB,CAAC,CAACI,WAAW,CAAC,CAACxB,aAAa;AACjF,CAAC;AACAyB,EAAE,CAAC,CAAAL,CAAC,KAAI;EACP,MAAM,EAAEI,WAAW,EAAEuB,OAAO,CAAC,CAAC,GAAG3B,CAAC,CAACL,MAAM;EACzC,MAAM,EAAElB,aAAa,EAAEK,gBAAgB,EAAEF,aAAa,CAAC,CAAC;EACtDJ,iCAAiC,CAAC4B,WAAW,CAAC;;EAEhD,MAAMK,SAAS,GAAGhC,aAAa,CAACiC,MAAM,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;EAChD,MAAMC,SAAS,GAAG9B,gBAAgB,GAAG,KAAK,GAAG,EAAE;EAC/C,MAAM+B,UAAU,GAAI,GAAEjC,aAAc,IAAG+C,OAAQ,GAAE;;EAEjD,MAAMb,IAAI,GAAI;AAClB;AACA,+BAA+BV,WAAY;AAC3C,wCAAwCxB,aAAc;AACtD;AACA;AACA,YAAYA,aAAa,CAAE8B,MAAM,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAE;AAC5C,gCAAgCF,SAAU,GAAEG,SAAU,KAAIC,UAAW;AACrE;AACA;AACA,CAAC;EACG,MAAME,aAAa,GAAGY,OAAO,KAAK,GAAG;EACrC3B,CAAC,CAACgB,mBAAmB,CAACD,aAAa,EAAED,IAAI,CAAC;AAC5C,CAAC,CAAC;;AAEJvB,CAAC,CAACC,IAAI,CAAC,kBAAkB,CAAC;AACvBC,OAAO,CAAC,qDAAqD,CAAC;AAC9DC,IAAI;EACF;AACL,iBAAiB7B,OAAQ;AACzB;AACE,CAAC;AACA8B,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,aAAa,EAAER,aAAa,CAAC;AACrCQ,OAAO,CAAC,YAAY,EAAE7B,MAAM,CAACO,0CAA0C,CAAC,CAAC;AACzE4B,MAAM,CAAC,QAAQ,EAAE,CAAAH,CAAC;AACjBxB,iCAAiC,CAACwB,CAAC,CAACI,WAAW,CAAC,CAACxB,aAAa,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK;AACzF;AACJ,CAAC;AACAyB,EAAE,CAAC,CAAAL,CAAC,KAAI;EACP,MAAM,EAAEI,WAAW,EAAEwB,UAAU,EAAEtB,MAAM,CAAC,CAAC,GAAGN,CAAC,CAACL,MAAM;EACpD,MAAM,EAAElB,aAAa,EAAEK,gBAAgB,EAAEF,aAAa,CAAC,CAAC;EACtDJ,iCAAiC,CAAC4B,WAAW,CAAC;;EAEhD,MAAMK,SAAS,GAAGhC,aAAa,CAACiC,MAAM,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;EAChD,MAAMC,SAAS,GAAG9B,gBAAgB,GAAG,KAAK,GAAG,EAAE;EAC/C,MAAM+B,UAAU,GAAGP,MAAM,GAAI,KAAI1B,aAAa,EAAE8B,MAAM,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAE,EAAC,GAAG,EAAE;;EAEvE,MAAMkB,MAAM,GAAGtD,0CAA0C,CAACqD,UAAU,CAAC;EACrE,MAAMd,IAAI,GAAI;AAClB,EAAEe,MAAM,CAACf,IAAK;AACd;AACA,+BAA+BV,WAAY;AAC3C;AACA;AACA,4BAA4BK,SAAU,GAAEG,SAAU,GAAEC,UAAW;AAC/D,EAAE;EACEb,CAAC,CAACgB,mBAAmB,CAACa,MAAM,CAACd,aAAa,EAAED,IAAI,CAAC;AACnD,CAAC,CAAC"}