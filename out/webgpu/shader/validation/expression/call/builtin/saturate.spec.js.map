{"version":3,"file":"saturate.spec.js","names":["builtin","description","makeTestGroup","keysOf","objectsToRecord","TypeF16","TypeF32","elementType","kAllFloatScalarsAndVectors","kAllConcreteIntegerScalarsAndVectors","kAllAbstractIntegerScalarAndVectors","ShaderValidationTest","fullRangeForType","kConstantAndOverrideStages","stageSupportsType","validateConstOrOverrideBuiltinEval","g","kValuesTypes","test","desc","params","u","combine","filter","stage","type","beginSubcases","expand","beforeAllSubcases","t","selectDeviceOrSkipTestCase","fn","expectedResult","create","value","kIntegerArgumentTypes"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/saturate.spec.ts"],"sourcesContent":["const builtin = 'saturate';\nexport const description = `\nValidation tests for the ${builtin}() builtin.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport {\n  TypeF16,\n  TypeF32,\n  elementType,\n  kAllFloatScalarsAndVectors,\n  kAllConcreteIntegerScalarsAndVectors,\n  kAllAbstractIntegerScalarAndVectors,\n} from '../../../../../util/conversion.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\nimport {\n  fullRangeForType,\n  kConstantAndOverrideStages,\n  stageSupportsType,\n  validateConstOrOverrideBuiltinEval,\n} from './const_override_validation.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\nconst kValuesTypes = objectsToRecord([\n  ...kAllAbstractIntegerScalarAndVectors,\n  ...kAllFloatScalarsAndVectors,\n]);\n\ng.test('values')\n  .desc(\n    `\nValidates that constant evaluation and override evaluation of ${builtin}() inputs rejects invalid values\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kConstantAndOverrideStages)\n      .combine('type', keysOf(kValuesTypes))\n      .filter(u => stageSupportsType(u.stage, kValuesTypes[u.type]))\n      .beginSubcases()\n      .expand('value', u => fullRangeForType(kValuesTypes[u.type]))\n  )\n  .beforeAllSubcases(t => {\n    if (elementType(kValuesTypes[t.params.type]) === TypeF16) {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(t => {\n    const expectedResult = true; // Result should always be representable by the type\n    validateConstOrOverrideBuiltinEval(\n      t,\n      builtin,\n      expectedResult,\n      [kValuesTypes[t.params.type].create(t.params.value)],\n      t.params.stage\n    );\n  });\n\nconst kIntegerArgumentTypes = objectsToRecord([TypeF32, ...kAllConcreteIntegerScalarsAndVectors]);\n\ng.test('integer_argument')\n  .desc(\n    `\nValidates that scalar and vector integer arguments are rejected by ${builtin}()\n`\n  )\n  .params(u => u.combine('type', keysOf(kIntegerArgumentTypes)))\n  .fn(t => {\n    const type = kIntegerArgumentTypes[t.params.type];\n    validateConstOrOverrideBuiltinEval(\n      t,\n      builtin,\n      /* expectedResult */ type === TypeF32,\n      [type.create(1)],\n      'constant'\n    );\n  });\n"],"mappings":";;GAAA,MAAMA,OAAO,GAAG,UAAU,CAC1B,OAAO,MAAMC,WAAW,GAAI;AAC5B,2BAA2BD,OAAQ;AACnC,CAAC;AAED,SAASE,aAAa,QAAQ,kDAAkD;AAChF,SAASC,MAAM,EAAEC,eAAe,QAAQ,8CAA8C;AACtF;EACEC,OAAO;EACPC,OAAO;EACPC,WAAW;EACXC,0BAA0B;EAC1BC,oCAAoC;EACpCC,mCAAmC;AAC9B,mCAAmC;AAC1C,SAASC,oBAAoB,QAAQ,oCAAoC;;AAEzE;EACEC,gBAAgB;EAChBC,0BAA0B;EAC1BC,iBAAiB;EACjBC,kCAAkC;AAC7B,gCAAgC;;AAEvC,OAAO,MAAMC,CAAC,GAAGd,aAAa,CAACS,oBAAoB,CAAC;;AAEpD,MAAMM,YAAY,GAAGb,eAAe,CAAC;AACnC,GAAGM,mCAAmC;AACtC,GAAGF,0BAA0B;AAC9B,CAAC;;AAEFQ,CAAC,CAACE,IAAI,CAAC,QAAQ,CAAC;AACbC,IAAI;EACF;AACL,gEAAgEnB,OAAQ;AACxE;AACE,CAAC;AACAoB,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,OAAO,EAAET,0BAA0B,CAAC;AAC5CS,OAAO,CAAC,MAAM,EAAEnB,MAAM,CAACc,YAAY,CAAC,CAAC;AACrCM,MAAM,CAAC,CAAAF,CAAC,KAAIP,iBAAiB,CAACO,CAAC,CAACG,KAAK,EAAEP,YAAY,CAACI,CAAC,CAACI,IAAI,CAAC,CAAC,CAAC;AAC7DC,aAAa,CAAC,CAAC;AACfC,MAAM,CAAC,OAAO,EAAE,CAAAN,CAAC,KAAIT,gBAAgB,CAACK,YAAY,CAACI,CAAC,CAACI,IAAI,CAAC,CAAC;AAChE,CAAC;AACAG,iBAAiB,CAAC,CAAAC,CAAC,KAAI;EACtB,IAAItB,WAAW,CAACU,YAAY,CAACY,CAAC,CAACT,MAAM,CAACK,IAAI,CAAC,CAAC,KAAKpB,OAAO,EAAE;IACxDwB,CAAC,CAACC,0BAA0B,CAAC,YAAY,CAAC;EAC5C;AACF,CAAC,CAAC;AACDC,EAAE,CAAC,CAAAF,CAAC,KAAI;EACP,MAAMG,cAAc,GAAG,IAAI,CAAC,CAAC;EAC7BjB,kCAAkC;IAChCc,CAAC;IACD7B,OAAO;IACPgC,cAAc;IACd,CAACf,YAAY,CAACY,CAAC,CAACT,MAAM,CAACK,IAAI,CAAC,CAACQ,MAAM,CAACJ,CAAC,CAACT,MAAM,CAACc,KAAK,CAAC,CAAC;IACpDL,CAAC,CAACT,MAAM,CAACI;EACX,CAAC;AACH,CAAC,CAAC;;AAEJ,MAAMW,qBAAqB,GAAG/B,eAAe,CAAC,CAACE,OAAO,EAAE,GAAGG,oCAAoC,CAAC,CAAC;;AAEjGO,CAAC,CAACE,IAAI,CAAC,kBAAkB,CAAC;AACvBC,IAAI;EACF;AACL,qEAAqEnB,OAAQ;AAC7E;AACE,CAAC;AACAoB,MAAM,CAAC,CAAAC,CAAC,KAAIA,CAAC,CAACC,OAAO,CAAC,MAAM,EAAEnB,MAAM,CAACgC,qBAAqB,CAAC,CAAC,CAAC;AAC7DJ,EAAE,CAAC,CAAAF,CAAC,KAAI;EACP,MAAMJ,IAAI,GAAGU,qBAAqB,CAACN,CAAC,CAACT,MAAM,CAACK,IAAI,CAAC;EACjDV,kCAAkC;IAChCc,CAAC;IACD7B,OAAO;IACP,oBAAqByB,IAAI,KAAKnB,OAAO;IACrC,CAACmB,IAAI,CAACQ,MAAM,CAAC,CAAC,CAAC,CAAC;IAChB;EACF,CAAC;AACH,CAAC,CAAC"}