{"version":3,"file":"textureSampleLevel.spec.js","names":["builtin","description","makeTestGroup","keysOf","objectsToRecord","Type","kAllScalarsAndVectors","isConvertible","isUnsignedType","ShaderValidationTest","kTestTextureTypes","kValidTextureSampleLevelParameterTypes","coordsArgType","vec2f","levelIsF32","offsetArgType","vec2i","hasArrayIndexArg","vec3f","vec3i","texture_depth_2d","texture_depth_2d_array","texture_depth_cube","texture_depth_cube_array","kTextureTypes","kValuesTypes","g","test","specURL","desc","params","u","combine","beginSubcases","expand","t","textureType","fn","returnType","offset","returnVarType","returnExpectedType","includes","f32","vec4f","varWGSL","toString","coordWGSL","create","wgsl","arrayWGSL","offsetWGSL","code","expectSuccess","expectCompileResult","filter","coordType","value","coordArgType","coordsRequiredType","arrayIndexType","arrayIndexArgType","args","map","arg","join","i32","u32","levelType","levelArgType","levelWGSL","offsetType","offsetRequiredType","varType","testTextureType","types","typesMatch","use"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/textureSampleLevel.spec.ts"],"sourcesContent":["const builtin = 'textureSampleLevel';\nexport const description = `\nValidation tests for the ${builtin}() builtin.\n\n* test textureSampleLevel coords parameter must be correct type\n* test textureSampleLevel array_index parameter must be correct type\n* test textureSampleLevel level parameter must be correct type\n* test textureSampleLevel offset parameter must be correct type\n* test textureSampleLevel offset parameter must be a const-expression\n* test textureSampleLevel offset parameter must be between -8 and +7 inclusive\n* test textureSampleLevel returns the correct type\n* test textureSampleLevel doesn't work with texture types it's not supposed to\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport {\n  Type,\n  kAllScalarsAndVectors,\n  isConvertible,\n  ScalarType,\n  VectorType,\n  isUnsignedType,\n} from '../../../../../util/conversion.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\nimport { kTestTextureTypes } from './shader_builtin_utils.js';\n\ntype TextureSampleLevelArguments = {\n  coordsArgType: ScalarType | VectorType;\n  hasArrayIndexArg?: boolean;\n  levelIsF32?: boolean;\n  offsetArgType?: VectorType;\n};\n\nconst kValidTextureSampleLevelParameterTypes: { [n: string]: TextureSampleLevelArguments } = {\n  'texture_2d<f32>': { coordsArgType: Type.vec2f, levelIsF32: true, offsetArgType: Type.vec2i },\n  'texture_2d_array<f32>': {\n    coordsArgType: Type.vec2f,\n    hasArrayIndexArg: true,\n    levelIsF32: true,\n    offsetArgType: Type.vec2i,\n  },\n  'texture_3d<f32>': { coordsArgType: Type.vec3f, levelIsF32: true, offsetArgType: Type.vec3i },\n  'texture_cube<f32>': { coordsArgType: Type.vec3f, levelIsF32: true },\n  'texture_cube_array<f32>': {\n    coordsArgType: Type.vec3f,\n    hasArrayIndexArg: true,\n    levelIsF32: true,\n  },\n  texture_depth_2d: { coordsArgType: Type.vec2f, offsetArgType: Type.vec2i },\n  texture_depth_2d_array: {\n    coordsArgType: Type.vec2f,\n    hasArrayIndexArg: true,\n    offsetArgType: Type.vec2i,\n  },\n  texture_depth_cube: { coordsArgType: Type.vec3f },\n  texture_depth_cube_array: { coordsArgType: Type.vec3f, hasArrayIndexArg: true },\n} as const;\n\nconst kTextureTypes = keysOf(kValidTextureSampleLevelParameterTypes);\nconst kValuesTypes = objectsToRecord(kAllScalarsAndVectors);\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\ng.test('return_type')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesamplelevel')\n  .desc(\n    `\nValidates the return type of ${builtin} is the expected type.\n`\n  )\n  .params(u =>\n    u\n      .combine('returnType', keysOf(kValuesTypes))\n      .combine('textureType', keysOf(kValidTextureSampleLevelParameterTypes))\n      .beginSubcases()\n      .expand('offset', t =>\n        kValidTextureSampleLevelParameterTypes[t.textureType].offsetArgType\n          ? [false, true]\n          : [false]\n      )\n  )\n  .fn(t => {\n    const { returnType, textureType, offset } = t.params;\n    const returnVarType = kValuesTypes[returnType];\n    const { offsetArgType, coordsArgType, hasArrayIndexArg } =\n      kValidTextureSampleLevelParameterTypes[textureType];\n    const returnExpectedType = textureType.includes('depth') ? Type.f32 : Type.vec4f;\n\n    const varWGSL = returnVarType.toString();\n    const coordWGSL = coordsArgType.create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const offsetWGSL = offset ? `, ${offsetArgType?.create(0).wgsl()}` : '';\n\n    const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v: ${varWGSL} = textureSampleLevel(t, s, ${coordWGSL}${arrayWGSL}, 0${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess = isConvertible(returnExpectedType, returnVarType);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('coords_argument')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesamplelevel')\n  .desc(\n    `\nValidates that only incorrect coords arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', keysOf(kValidTextureSampleLevelParameterTypes))\n      .combine('coordType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .combine('value', [-1, 0, 1] as const)\n      // filter out unsigned types with negative values\n      .filter(t => !isUnsignedType(kValuesTypes[t.coordType]) || t.value >= 0)\n      .expand('offset', t =>\n        kValidTextureSampleLevelParameterTypes[t.textureType].offsetArgType\n          ? [false, true]\n          : [false]\n      )\n  )\n  .fn(t => {\n    const { textureType, coordType, offset, value } = t.params;\n    const coordArgType = kValuesTypes[coordType];\n    const {\n      offsetArgType,\n      coordsArgType: coordsRequiredType,\n      hasArrayIndexArg,\n    } = kValidTextureSampleLevelParameterTypes[textureType];\n\n    const coordWGSL = coordArgType.create(value).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const offsetWGSL = offset ? `, ${offsetArgType?.create(0).wgsl()}` : '';\n\n    const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureSampleLevel(t, s, ${coordWGSL}${arrayWGSL}, 0${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess = isConvertible(coordArgType, coordsRequiredType);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('array_index_argument')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesamplelevel')\n  .desc(\n    `\nValidates that only incorrect array_index arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kTextureTypes)\n      // filter out types with no array_index\n      .filter(t => !!kValidTextureSampleLevelParameterTypes[t.textureType].hasArrayIndexArg)\n      .combine('arrayIndexType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .combine('value', [-9, -8, 0, 7, 8])\n      // filter out unsigned types with negative values\n      .filter(t => !isUnsignedType(kValuesTypes[t.arrayIndexType]) || t.value >= 0)\n      .expand('offset', t =>\n        kValidTextureSampleLevelParameterTypes[t.textureType].offsetArgType\n          ? [false, true]\n          : [false]\n      )\n  )\n  .fn(t => {\n    const { textureType, arrayIndexType, value, offset } = t.params;\n    const arrayIndexArgType = kValuesTypes[arrayIndexType];\n    const args = [arrayIndexArgType.create(value)];\n    const { coordsArgType, offsetArgType } = kValidTextureSampleLevelParameterTypes[textureType];\n\n    const coordWGSL = coordsArgType.create(0).wgsl();\n    const arrayWGSL = args.map(arg => arg.wgsl()).join(', ');\n    const offsetWGSL = offset ? `, ${offsetArgType!.create(0).wgsl()}` : '';\n\n    const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureSampleLevel(t, s, ${coordWGSL}, ${arrayWGSL}, 0${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess =\n      isConvertible(arrayIndexArgType, Type.i32) || isConvertible(arrayIndexArgType, Type.u32);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('level_argument')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesamplelevel')\n  .desc(\n    `\nValidates that only incorrect level arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kTextureTypes)\n      .combine('levelType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .combine('value', [-1, 0, 1])\n      // filter out unsigned types with negative values\n      .filter(t => !isUnsignedType(kValuesTypes[t.levelType]) || t.value >= 0)\n      .expand('offset', t =>\n        kValidTextureSampleLevelParameterTypes[t.textureType].offsetArgType\n          ? [false, true]\n          : [false]\n      )\n  )\n  .fn(t => {\n    const { textureType, levelType, value, offset } = t.params;\n    const levelArgType = kValuesTypes[levelType];\n    const args = [levelArgType.create(value)];\n    const { coordsArgType, hasArrayIndexArg, offsetArgType, levelIsF32 } =\n      kValidTextureSampleLevelParameterTypes[textureType];\n\n    const coordWGSL = coordsArgType.create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const levelWGSL = args.map(arg => arg.wgsl()).join(', ');\n    const offsetWGSL = offset ? `, ${offsetArgType!.create(0).wgsl()}` : '';\n\n    const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureSampleLevel(t, s, ${coordWGSL}${arrayWGSL}, ${levelWGSL}${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess = levelIsF32\n      ? isConvertible(levelArgType, Type.f32)\n      : isConvertible(levelArgType, Type.i32) || isConvertible(levelArgType, Type.u32);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('offset_argument')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesamplelevel')\n  .desc(\n    `\nValidates that only incorrect offset arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kTextureTypes)\n      // filter out types with no offset\n      .filter(t => !!kValidTextureSampleLevelParameterTypes[t.textureType].offsetArgType)\n      .combine('offsetType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .combine('value', [-9, -8, 0, 7, 8])\n      // filter out unsigned types with negative values\n      .filter(t => !isUnsignedType(kValuesTypes[t.offsetType]) || t.value >= 0)\n  )\n  .fn(t => {\n    const { textureType, offsetType, value } = t.params;\n    const offsetArgType = kValuesTypes[offsetType];\n    const args = [offsetArgType.create(value)];\n    const {\n      coordsArgType,\n      hasArrayIndexArg,\n      offsetArgType: offsetRequiredType,\n    } = kValidTextureSampleLevelParameterTypes[textureType];\n\n    const coordWGSL = coordsArgType.create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const offsetWGSL = args.map(arg => arg.wgsl()).join(', ');\n\n    const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureSampleLevel(t, s, ${coordWGSL}${arrayWGSL}, 0, ${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess =\n      isConvertible(offsetArgType, offsetRequiredType!) && value >= -8 && value <= 7;\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('offset_argument,non_const')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesamplelevel')\n  .desc(\n    `\nValidates that only non-const offset arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kTextureTypes)\n      .combine('varType', ['c', 'u', 'l'])\n      // filter out types with no offset\n      .filter(t => !!kValidTextureSampleLevelParameterTypes[t.textureType].offsetArgType)\n  )\n  .fn(t => {\n    const { textureType, varType } = t.params;\n    const { coordsArgType, hasArrayIndexArg, offsetArgType } =\n      kValidTextureSampleLevelParameterTypes[textureType];\n\n    const coordWGSL = coordsArgType.create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const offsetWGSL = `${offsetArgType}(${varType})`;\n\n    const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType};\n@group(0) @binding(2) var<uniform> u: ${offsetArgType};\n@fragment fn fs() -> @location(0) vec4f {\n  const c = 1;\n  let l = ${offsetArgType!.create(0).wgsl()};\n  let v = textureSampleLevel(t, s, ${coordWGSL}${arrayWGSL}, 0, ${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess = varType === 'c';\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('texture_type')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesamplelevel')\n  .desc(\n    `\nValidates that incompatible texture types don't work with ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('testTextureType', kTestTextureTypes)\n      .beginSubcases()\n      .combine('textureType', keysOf(kValidTextureSampleLevelParameterTypes))\n      .expand('offset', t =>\n        kValidTextureSampleLevelParameterTypes[t.textureType].offsetArgType\n          ? [false, true]\n          : [false]\n      )\n  )\n  .fn(t => {\n    const { testTextureType, textureType, offset } = t.params;\n    const { coordsArgType, offsetArgType, hasArrayIndexArg } =\n      kValidTextureSampleLevelParameterTypes[textureType];\n\n    const coordWGSL = coordsArgType.create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const offsetWGSL = offset ? `, ${offsetArgType?.create(0).wgsl()}` : '';\n\n    const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${testTextureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureSampleLevel(t, s, ${coordWGSL}${arrayWGSL}, 0${offsetWGSL});\n  return vec4f(0);\n}\n`;\n\n    const types = kValidTextureSampleLevelParameterTypes[testTextureType];\n    const typesMatch = types\n      ? types.coordsArgType === coordsArgType &&\n        types.hasArrayIndexArg === hasArrayIndexArg &&\n        (offset ? types.offsetArgType === offsetArgType : true)\n      : false;\n\n    const expectSuccess = testTextureType === textureType || typesMatch;\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('must_use')\n  .desc('Tests that the result must be used')\n  .params(u => u.combine('use', [true, false] as const))\n  .fn(t => {\n    const code = `\n    @group(0) @binding(0) var t : texture_2d<f32>;\n    @group(0) @binding(1) var s : sampler;\n    fn foo() {\n      ${t.params.use ? '_ =' : ''} textureSampleLevel(t,s,vec2(0,0), 0);\n    }`;\n    t.expectCompileResult(t.params.use, code);\n  });\n"],"mappings":"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"}