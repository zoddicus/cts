{"version":3,"file":"round.spec.js","names":["builtin","description","makeTestGroup","keysOf","objectsToRecord","Type","kConcreteIntegerScalarsAndVectors","kConvertableToFloatScalarsAndVectors","scalarTypeOf","fpTraitsFor","ShaderValidationTest","fullRangeForType","kConstantAndOverrideStages","stageSupportsType","unique","validateConstOrOverrideBuiltinEval","g","kValuesTypes","test","desc","params","u","combine","filter","stage","type","beginSubcases","expand","kind","constants","negative","min","positive","max","beforeAllSubcases","t","f16","selectDeviceOrSkipTestCase","fn","expectedResult","create","value","kIntegerArgumentTypes","f32"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/round.spec.ts"],"sourcesContent":["const builtin = 'round';\nexport const description = `\nValidation tests for the ${builtin}() builtin.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport {\n  Type,\n  kConcreteIntegerScalarsAndVectors,\n  kConvertableToFloatScalarsAndVectors,\n  scalarTypeOf,\n} from '../../../../../util/conversion.js';\nimport { fpTraitsFor } from '../../../../../util/floating_point.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\nimport {\n  fullRangeForType,\n  kConstantAndOverrideStages,\n  stageSupportsType,\n  unique,\n  validateConstOrOverrideBuiltinEval,\n} from './const_override_validation.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\nconst kValuesTypes = objectsToRecord(kConvertableToFloatScalarsAndVectors);\n\ng.test('values')\n  .desc(\n    `\nValidates that constant evaluation and override evaluation of ${builtin}() inputs rejects invalid values\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kConstantAndOverrideStages)\n      .combine('type', keysOf(kValuesTypes))\n      .filter(u => stageSupportsType(u.stage, kValuesTypes[u.type]))\n      .beginSubcases()\n      .expand('value', u => {\n        if (scalarTypeOf(kValuesTypes[u.type]).kind === 'abstract-int') {\n          return fullRangeForType(kValuesTypes[u.type]);\n        } else {\n          const constants = fpTraitsFor(scalarTypeOf(kValuesTypes[u.type])).constants();\n          return unique(fullRangeForType(kValuesTypes[u.type]), [\n            constants.negative.min + 0.1,\n            constants.positive.max - 0.1,\n          ]);\n        }\n      })\n  )\n  .beforeAllSubcases(t => {\n    if (scalarTypeOf(kValuesTypes[t.params.type]) === Type.f16) {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(t => {\n    const expectedResult = true; // Result should always be representable by the type\n    validateConstOrOverrideBuiltinEval(\n      t,\n      builtin,\n      expectedResult,\n      [kValuesTypes[t.params.type].create(t.params.value)],\n      t.params.stage\n    );\n  });\n\nconst kIntegerArgumentTypes = objectsToRecord([Type.f32, ...kConcreteIntegerScalarsAndVectors]);\n\ng.test('integer_argument')\n  .desc(\n    `\nValidates that scalar and vector integer arguments are rejected by ${builtin}()\n`\n  )\n  .params(u => u.combine('type', keysOf(kIntegerArgumentTypes)))\n  .fn(t => {\n    const type = kIntegerArgumentTypes[t.params.type];\n    validateConstOrOverrideBuiltinEval(\n      t,\n      builtin,\n      /* expectedResult */ type === Type.f32,\n      [type.create(1)],\n      'constant'\n    );\n  });\n"],"mappings":"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"}