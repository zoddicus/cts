{"version":3,"file":"distance.spec.js","names":["builtin","description","makeTestGroup","keysOf","objectsToRecord","Type","kConvertableToFloatScalarsAndVectors","scalarTypeOf","quantizeToF16","quantizeToF32","ShaderValidationTest","fullRangeForType","kConstantAndOverrideStages","stageSupportsType","validateConstOrOverrideBuiltinEval","g","kValidArgumentTypes","quantizeFunctionForScalarType","type","f32","f16","v","test","desc","params","u","combine","filter","stage","beginSubcases","expand","beforeAllSubcases","t","selectDeviceOrSkipTestCase","fn","expectedResult","scalarType","quantizeFn","a","Number","b","ab","isFinite","width","ab2","sqrLen","create","kArgCases","good","bad_no_parens","bad_0args","bad_1arg","bad_3arg","bad_0bool","bad_0array","bad_0struct","bad_0int","bad_0vec2i","bad_0vec3i","bad_0vec4i","bad_0uint","bad_0vec2u","bad_0vec3u","bad_0vec4u","bad_1bool","bad_1array","bad_1struct","bad_1int","bad_1vec2i","bad_1vec3i","bad_1vec4i","bad_1uint","bad_1vec2u","bad_1vec3u","bad_1vec4u","expectCompileResult","arg","use_it","use"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/distance.spec.ts"],"sourcesContent":["const builtin = 'distance';\nexport const description = `\nValidation tests for the ${builtin}() builtin.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport {\n  Type,\n  kConvertableToFloatScalarsAndVectors,\n  scalarTypeOf,\n  ScalarType,\n} from '../../../../../util/conversion.js';\nimport { QuantizeFunc, quantizeToF16, quantizeToF32 } from '../../../../../util/math.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\nimport {\n  fullRangeForType,\n  kConstantAndOverrideStages,\n  stageSupportsType,\n  validateConstOrOverrideBuiltinEval,\n} from './const_override_validation.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\nconst kValidArgumentTypes = objectsToRecord(kConvertableToFloatScalarsAndVectors);\n\nfunction quantizeFunctionForScalarType(type: ScalarType): QuantizeFunc<number> {\n  switch (type) {\n    case Type.f32:\n      return quantizeToF32;\n    case Type.f16:\n      return quantizeToF16;\n    default:\n      return (v: number) => v;\n  }\n}\n\ng.test('values')\n  .desc(\n    `\nValidates that constant evaluation and override evaluation of ${builtin}() never errors\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kConstantAndOverrideStages)\n      .combine('type', keysOf(kValidArgumentTypes))\n      .filter(u => stageSupportsType(u.stage, kValidArgumentTypes[u.type]))\n      .beginSubcases()\n      .expand('a', u => fullRangeForType(kValidArgumentTypes[u.type], 5))\n      .expand('b', u => fullRangeForType(kValidArgumentTypes[u.type], 5))\n  )\n  .beforeAllSubcases(t => {\n    if (scalarTypeOf(kValidArgumentTypes[t.params.type]) === Type.f16) {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(t => {\n    let expectedResult = true;\n\n    const scalarType = scalarTypeOf(kValidArgumentTypes[t.params.type]);\n    const quantizeFn = quantizeFunctionForScalarType(scalarType);\n\n    // Distance equation: length(a - b)\n    // Should be invalid if the calculations result in intermediate values that\n    // exceed the maximum representable float value for the given type.\n    const a = Number(t.params.a);\n    const b = Number(t.params.b);\n    const ab = quantizeFn(a - b);\n\n    if (!Number.isFinite(ab)) {\n      expectedResult = false;\n    }\n\n    // Only calculates the full length if the type is a vector. Otherwise abs(a-b) is used.\n    if (kValidArgumentTypes[t.params.type].width > 1) {\n      const ab2 = quantizeFn(ab * ab);\n      const sqrLen = quantizeFn(ab2 * kValidArgumentTypes[t.params.type].width);\n      // Square root does not need to be calculated because it can never fail if\n      // the previous results are finite.\n\n      if (!Number.isFinite(ab2) || !Number.isFinite(sqrLen)) {\n        expectedResult = false;\n      }\n    }\n\n    const type = kValidArgumentTypes[t.params.type];\n\n    // Validates distance(vecN(a), vecN(b)) or distance(a, b);\n    validateConstOrOverrideBuiltinEval(\n      t,\n      builtin,\n      expectedResult,\n      [type.create(t.params.a), type.create(t.params.b)],\n      t.params.stage\n    );\n  });\n\nconst kArgCases = {\n  good: '(vec3(0), vec3(1))',\n  bad_no_parens: '',\n  // Bad number of args\n  bad_0args: '()',\n  bad_1arg: '(vec3(0))',\n  bad_3arg: '(vec3(0), vec3(1), vec3(2))',\n  // Bad value for arg 0\n  bad_0bool: '(false, vec3(1))',\n  bad_0array: '(array(1.1,2.2), vec3(1))',\n  bad_0struct: '(modf(2.2), vec3(1))',\n  bad_0int: '(0i, vec3(1))',\n  bad_0vec2i: '(vec2i(), vec3(1))',\n  bad_0vec3i: '(vec3i(), vec3(1))',\n  bad_0vec4i: '(vec4i(), vec3(1))',\n  bad_0uint: '(0u, vec3(1))',\n  bad_0vec2u: '(vec2u(), vec3(1))',\n  bad_0vec3u: '(vec3u(), vec3(1))',\n  bad_0vec4u: '(vec4u(), vec3(1))',\n  // Bad value type for arg 1\n  bad_1bool: '(vec3(0), true)',\n  bad_1array: '(vec3(0), array(1.1,2.2))',\n  bad_1struct: '(vec3(0), modf(2.2))',\n  bad_1int: '(vec3(0), 0i)',\n  bad_1vec2i: '(vec3(0), vec2i())',\n  bad_1vec3i: '(vec3(0), vec3i())',\n  bad_1vec4i: '(vec3(0), vec4i())',\n  bad_1uint: '(vec3(0), 0u)',\n  bad_1vec2u: '(vec3(0), vec2u())',\n  bad_1vec3u: '(vec3(0), vec3u())',\n  bad_1vec4u: '(vec3(0), vec4u())',\n};\n\ng.test('args')\n  .desc(`Test compilation failure of ${builtin} with variously shaped and typed arguments`)\n  .params(u => u.combine('arg', keysOf(kArgCases)))\n  .fn(t => {\n    t.expectCompileResult(\n      t.params.arg === 'good',\n      `const c = ${builtin}${kArgCases[t.params.arg]};`\n    );\n  });\n\ng.test('must_use')\n  .desc(`Result of ${builtin} must be used`)\n  .params(u => u.combine('use', [true, false]))\n  .fn(t => {\n    const use_it = t.params.use ? '_ = ' : '';\n    t.expectCompileResult(t.params.use, `fn f() { ${use_it}${builtin}${kArgCases['good']}; }`);\n  });\n"],"mappings":"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"}