{"version":3,"file":"const_override_validation.js","names":["assert","unreachable","kValue","Type","elementTypeOf","isAbstractType","scalarElementsOf","scalarTypeOf","scalarF16Range","scalarF32Range","scalarF64Range","linearRange","linearRangeBigInt","rangeForType","number_range","bigint_range","type","kind","minusTwoToTwoRangeForType","minusThreePiToThreePiRangeForType","Math","PI","sparseMinusThreePiToThreePiRangeForType","kConstantAndOverrideStages","stageSupportsType","stage","validateConstOrOverrideBuiltinEval","t","builtin","expectedResult","args","returnType","elTys","map","arg","enables","some","ty","f16","optionalVarType","toString","expectCompileResult","wgsl","join","constants","overrideDecls","callArgs","numOverrides","argOverrides","el","name","push","Number","value","expectPipelineResult","code","reference","validateConstOrOverrideBinaryOpEval","binaryOp","leftStage","left","rightStage","right","allArgs","codeLines","addOperand","elName","leftOperand","rightOperand","fullRangeForType","count","undefined","pos_sub","ceil","pos_norm","i32","negative","min","positive","max","f","floor","u32","i64","unique","arrays","set","Set","arr","item","add"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/const_override_validation.ts"],"sourcesContent":["import { assert, unreachable } from '../../../../../../common/util/util.js';\nimport { kValue } from '../../../../../util/constants.js';\nimport {\n  Type,\n  Value,\n  elementTypeOf,\n  isAbstractType,\n  scalarElementsOf,\n  scalarTypeOf,\n} from '../../../../../util/conversion.js';\nimport {\n  scalarF16Range,\n  scalarF32Range,\n  scalarF64Range,\n  linearRange,\n  linearRangeBigInt,\n} from '../../../../../util/math.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\n/** @returns a function that can select between ranges depending on type */\nexport function rangeForType(\n  number_range: readonly number[],\n  bigint_range: readonly bigint[]\n): (type: Type) => readonly (number | bigint)[] {\n  return (type: Type): readonly (number | bigint)[] => {\n    switch (scalarTypeOf(type).kind) {\n      case 'abstract-float':\n      case 'f32':\n      case 'f16':\n        return number_range;\n      case 'abstract-int':\n        return bigint_range;\n    }\n    unreachable(`Received unexpected type '${type}'`);\n  };\n}\n\n/* @returns a linear sweep between -2 to 2 for type */\n// prettier-ignore\nexport const minusTwoToTwoRangeForType = rangeForType(\n  linearRange(-2, 2, 10),\n  [ -2n, -1n, 0n, 1n, 2n ]\n);\n\n/* @returns array of values ranging from -3π to 3π, with a focus on multiples of π */\nexport const minusThreePiToThreePiRangeForType = rangeForType(\n  [\n    -3 * Math.PI,\n    -2.999 * Math.PI,\n\n    -2.501 * Math.PI,\n    -2.5 * Math.PI,\n    -2.499 * Math.PI,\n\n    -2.001 * Math.PI,\n    -2.0 * Math.PI,\n    -1.999 * Math.PI,\n\n    -1.501 * Math.PI,\n    -1.5 * Math.PI,\n    -1.499 * Math.PI,\n\n    -1.001 * Math.PI,\n    -1.0 * Math.PI,\n    -0.999 * Math.PI,\n\n    -0.501 * Math.PI,\n    -0.5 * Math.PI,\n    -0.499 * Math.PI,\n\n    -0.001,\n    0,\n    0.001,\n\n    0.499 * Math.PI,\n    0.5 * Math.PI,\n    0.501 * Math.PI,\n\n    0.999 * Math.PI,\n    1.0 * Math.PI,\n    1.001 * Math.PI,\n\n    1.499 * Math.PI,\n    1.5 * Math.PI,\n    1.501 * Math.PI,\n\n    1.999 * Math.PI,\n    2.0 * Math.PI,\n    2.001 * Math.PI,\n\n    2.499 * Math.PI,\n    2.5 * Math.PI,\n    2.501 * Math.PI,\n\n    2.999 * Math.PI,\n    3 * Math.PI,\n  ],\n  [-2n, -1n, 0n, 1n, 2n]\n);\n\n/**\n * @returns a minimal array of values ranging from -3π to 3π, with a focus on\n * multiples of π.\n *\n * Used when multiple parameters are being passed in, so the number of cases\n * becomes the square or more of this list. */\nexport const sparseMinusThreePiToThreePiRangeForType = rangeForType(\n  [\n    -3 * Math.PI,\n    -2.5 * Math.PI,\n    -2.0 * Math.PI,\n    -1.5 * Math.PI,\n    -1.0 * Math.PI,\n    -0.5 * Math.PI,\n    0,\n    0.5 * Math.PI,\n    Math.PI,\n    1.5 * Math.PI,\n    2.0 * Math.PI,\n    2.5 * Math.PI,\n    3 * Math.PI,\n  ],\n  [-2n, -1n, 0n, 1n, 2n]\n);\n\n/// The evaluation stages to test\nexport const kConstantAndOverrideStages = ['constant', 'override'] as const;\n\nexport type ConstantOrOverrideStage = 'constant' | 'override';\nexport type ExecutionStage = 'constant' | 'override' | 'runtime';\n\n/**\n * @returns true if evaluation stage `stage` supports expressions of type @p.\n */\nexport function stageSupportsType(stage: ConstantOrOverrideStage, type: Type) {\n  if (stage === 'override' && isAbstractType(elementTypeOf(type)!)) {\n    // Abstract numerics are concretized before being used in an override expression.\n    return false;\n  }\n  return true;\n}\n\n/**\n * Runs a validation test to check that evaluation of `builtin` either evaluates with or without\n * error at shader creation time or pipeline creation time.\n * @param t the ShaderValidationTest\n * @param builtin the name of the builtin\n * @param expectedResult false if an error is expected, true if no error is expected\n * @param args the arguments to pass to the builtin\n * @param stage the evaluation stage\n * @param returnType the explicit return type of the result variable, if provided (implicit otherwise)\n */\nexport function validateConstOrOverrideBuiltinEval(\n  t: ShaderValidationTest,\n  builtin: string,\n  expectedResult: boolean,\n  args: Value[],\n  stage: ConstantOrOverrideStage,\n  returnType?: Type\n) {\n  const elTys = args.map(arg => elementTypeOf(arg.type)!);\n  const enables = elTys.some(ty => ty === Type.f16) ? 'enable f16;' : '';\n  const optionalVarType = returnType ? `: ${returnType.toString()}` : '';\n\n  switch (stage) {\n    case 'constant': {\n      t.expectCompileResult(\n        expectedResult,\n        `${enables}\nconst v ${optionalVarType} = ${builtin}(${args.map(arg => arg.wgsl()).join(', ')});`\n      );\n      break;\n    }\n    case 'override': {\n      assert(!elTys.some(ty => isAbstractType(ty)));\n      const constants: Record<string, number> = {};\n      const overrideDecls: string[] = [];\n      const callArgs: string[] = [];\n      let numOverrides = 0;\n      for (const arg of args) {\n        const argOverrides: string[] = [];\n        for (const el of scalarElementsOf(arg)) {\n          const name = `o${numOverrides++}`;\n          overrideDecls.push(`override ${name} : ${el.type};`);\n          argOverrides.push(name);\n          constants[name] = Number(el.value);\n        }\n        callArgs.push(`${arg.type}(${argOverrides.join(', ')})`);\n      }\n      t.expectPipelineResult({\n        expectedResult,\n        code: `${enables}\n${overrideDecls.join('\\n')}\nvar<private> v ${optionalVarType} = ${builtin}(${callArgs.join(', ')});`,\n        constants,\n        reference: ['v'],\n      });\n      break;\n    }\n  }\n}\n\n/**\n * Runs a validation test to check that evaluation of `binaryOp` either evaluates with or without\n * error at shader creation time or pipeline creation time.\n * @param t the ShaderValidationTest\n * @param binaryOp the symbol of the binary operator\n * @param expectedResult false if an error is expected, true if no error is expected\n * @param leftStage the evaluation stage for the left argument\n * @param left the left-hand side of the binary operation\n * @param rightStage the evaluation stage for the right argument\n * @param right the right-hand side of the binary operation\n */\nexport function validateConstOrOverrideBinaryOpEval(\n  t: ShaderValidationTest,\n  binaryOp: string,\n  expectedResult: boolean,\n  leftStage: ExecutionStage,\n  left: Value,\n  rightStage: ExecutionStage,\n  right: Value\n) {\n  const allArgs = [left, right];\n  const elTys = allArgs.map(arg => elementTypeOf(arg.type)!);\n  const enables = elTys.some(ty => ty === Type.f16) ? 'enable f16;' : '';\n\n  const codeLines = [enables];\n  const constants: Record<string, number> = {};\n  let numOverrides = 0;\n\n  function addOperand(name: string, stage: ExecutionStage, value: Value) {\n    switch (stage) {\n      case 'runtime':\n        assert(!isAbstractType(value.type));\n        codeLines.push(`var<private> ${name} = ${value.wgsl()};`);\n        return name;\n\n      case 'constant':\n        codeLines.push(`const ${name} = ${value.wgsl()};`);\n        return name;\n\n      case 'override': {\n        assert(!isAbstractType(value.type));\n        const argOverrides: string[] = [];\n        for (const el of scalarElementsOf(value)) {\n          const elName = `o${numOverrides++}`;\n          codeLines.push(`override ${elName} : ${el.type};`);\n          constants[elName] = Number(el.value);\n          argOverrides.push(elName);\n        }\n        return `${value.type}(${argOverrides.join(', ')})`;\n      }\n    }\n  }\n\n  const leftOperand = addOperand('left', leftStage, left);\n  const rightOperand = addOperand('right', rightStage, right);\n\n  if (leftStage === 'override' || rightStage === 'override') {\n    t.expectPipelineResult({\n      expectedResult,\n      code: codeLines.join('\\n'),\n      constants,\n      reference: [`${leftOperand} ${binaryOp} ${rightOperand}`],\n    });\n  } else {\n    codeLines.push(`fn f() { _ = ${leftOperand} ${binaryOp} ${rightOperand}; }`);\n    t.expectCompileResult(expectedResult, codeLines.join('\\n'));\n  }\n}\n/** @returns a sweep of the representable values for element type of `type` */\nexport function fullRangeForType(type: Type, count?: number): readonly (number | bigint)[] {\n  if (count === undefined) {\n    count = 25;\n  }\n  switch (scalarTypeOf(type)?.kind) {\n    case 'abstract-float':\n      return scalarF64Range({\n        pos_sub: Math.ceil((count * 1) / 5),\n        pos_norm: Math.ceil((count * 4) / 5),\n      });\n    case 'f32':\n      return scalarF32Range({\n        pos_sub: Math.ceil((count * 1) / 5),\n        pos_norm: Math.ceil((count * 4) / 5),\n      });\n    case 'f16':\n      return scalarF16Range({\n        pos_sub: Math.ceil((count * 1) / 5),\n        pos_norm: Math.ceil((count * 4) / 5),\n      });\n    case 'i32':\n      return linearRange(kValue.i32.negative.min, kValue.i32.positive.max, count).map(f =>\n        Math.floor(f)\n      );\n    case 'u32':\n      return linearRange(0, kValue.u32.max, count).map(f => Math.floor(f));\n    case 'abstract-int':\n      // Returned values are already ints, so don't need to be floored.\n      return linearRangeBigInt(kValue.i64.negative.min, kValue.i64.positive.max, count);\n  }\n  unreachable();\n}\n\n/** @returns all the values in the provided arrays with duplicates removed */\nexport function unique<T>(...arrays: Array<readonly T[]>): T[] {\n  const set = new Set<T>();\n  for (const arr of arrays) {\n    for (const item of arr) {\n      set.add(item);\n    }\n  }\n  return [...set];\n}\n"],"mappings":"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"}