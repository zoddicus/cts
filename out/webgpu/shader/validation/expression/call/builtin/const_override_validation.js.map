{"version":3,"file":"const_override_validation.js","names":["assert","unreachable","kValue","TypeF16","elementType","elementsOf","isAbstractType","scalarF16Range","scalarF32Range","scalarF64Range","linearRange","kMinusTwoToTwo","kMinus3PiTo3Pi","Math","PI","kSparseMinus3PiTo3Pi","kConstantAndOverrideStages","stageSupportsType","stage","type","validateConstOrOverrideBuiltinEval","t","builtin","expectedResult","args","elTys","map","arg","enables","some","ty","expectCompileResult","wgsl","join","constants","overrideDecls","callArgs","numOverrides","argOverrides","el","name","push","Number","value","expectPipelineResult","code","reference","fullRangeForType","count","undefined","kind","pos_sub","ceil","pos_norm","i32","negative","min","positive","max","f","floor","u32","unique","arrays","set","Set","arr","item","add"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/const_override_validation.ts"],"sourcesContent":["import { assert, unreachable } from '../../../../../../common/util/util.js';\nimport { kValue } from '../../../../../util/constants.js';\nimport {\n  Type,\n  TypeF16,\n  Value,\n  elementType,\n  elementsOf,\n  isAbstractType,\n} from '../../../../../util/conversion.js';\nimport {\n  scalarF16Range,\n  scalarF32Range,\n  scalarF64Range,\n  linearRange,\n} from '../../../../../util/math.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\n/// A linear sweep between -2 to 2\nexport const kMinusTwoToTwo = linearRange(-2, 2, 10);\n\n/// An array of values ranging from -3π to 3π, with a focus on multiples of π\nexport const kMinus3PiTo3Pi = [\n  -3 * Math.PI,\n  -2.999 * Math.PI,\n\n  -2.501 * Math.PI,\n  -2.5 * Math.PI,\n  -2.499 * Math.PI,\n\n  -2.001 * Math.PI,\n  -2.0 * Math.PI,\n  -1.999 * Math.PI,\n\n  -1.501 * Math.PI,\n  -1.5 * Math.PI,\n  -1.499 * Math.PI,\n\n  -1.001 * Math.PI,\n  -1.0 * Math.PI,\n  -0.999 * Math.PI,\n\n  -0.501 * Math.PI,\n  -0.5 * Math.PI,\n  -0.499 * Math.PI,\n\n  -0.001,\n  0,\n  0.001,\n\n  0.499 * Math.PI,\n  0.5 * Math.PI,\n  0.501 * Math.PI,\n\n  0.999 * Math.PI,\n  1.0 * Math.PI,\n  1.001 * Math.PI,\n\n  1.499 * Math.PI,\n  1.5 * Math.PI,\n  1.501 * Math.PI,\n\n  1.999 * Math.PI,\n  2.0 * Math.PI,\n  2.001 * Math.PI,\n\n  2.499 * Math.PI,\n  2.5 * Math.PI,\n  2.501 * Math.PI,\n\n  2.999 * Math.PI,\n  3 * Math.PI,\n] as const;\n\n/// A minimal array of values ranging from -3π to 3π, with a focus on multiples\n/// of π. Used when multiple parameters are being passed in, so the number of\n/// cases becomes the square or more of this list.\nexport const kSparseMinus3PiTo3Pi = [\n  -3 * Math.PI,\n  -2.5 * Math.PI,\n  -2.0 * Math.PI,\n  -1.5 * Math.PI,\n  -1.0 * Math.PI,\n  -0.5 * Math.PI,\n  0,\n  0.5 * Math.PI,\n  Math.PI,\n  1.5 * Math.PI,\n  2.0 * Math.PI,\n  2.5 * Math.PI,\n  3 * Math.PI,\n] as const;\n\n/// The evaluation stages to test\nexport const kConstantAndOverrideStages = ['constant', 'override'] as const;\n\nexport type ConstantOrOverrideStage = 'constant' | 'override';\n\n/**\n * @returns true if evaluation stage `stage` supports expressions of type @p.\n */\nexport function stageSupportsType(stage: ConstantOrOverrideStage, type: Type) {\n  if (stage === 'override' && isAbstractType(elementType(type)!)) {\n    // Abstract numerics are concretized before being used in an override expression.\n    return false;\n  }\n  return true;\n}\n\n/**\n * Runs a validation test to check that evaluation of `builtin` either evaluates with or without\n * error at shader creation time or pipeline creation time.\n * @param t the ShaderValidationTest\n * @param builtin the name of the builtin\n * @param expectedResult false if an error is expected, true if no error is expected\n * @param args the arguments to pass to the builtin\n * @param stage the evaluation stage\n */\nexport function validateConstOrOverrideBuiltinEval(\n  t: ShaderValidationTest,\n  builtin: string,\n  expectedResult: boolean,\n  args: Value[],\n  stage: ConstantOrOverrideStage\n) {\n  const elTys = args.map(arg => elementType(arg.type)!);\n  const enables = elTys.some(ty => ty === TypeF16) ? 'enable f16;' : '';\n\n  switch (stage) {\n    case 'constant': {\n      t.expectCompileResult(\n        expectedResult,\n        `${enables}\nconst v = ${builtin}(${args.map(arg => arg.wgsl()).join(', ')});`\n      );\n      break;\n    }\n    case 'override': {\n      assert(!elTys.some(ty => isAbstractType(ty)));\n      const constants: Record<string, number> = {};\n      const overrideDecls: string[] = [];\n      const callArgs: string[] = [];\n      let numOverrides = 0;\n      for (const arg of args) {\n        const argOverrides: string[] = [];\n        for (const el of elementsOf(arg)) {\n          const name = `o${numOverrides++}`;\n          overrideDecls.push(`override ${name} : ${el.type};`);\n          argOverrides.push(name);\n          constants[name] = Number(el.value);\n        }\n        callArgs.push(`${arg.type}(${argOverrides.join(', ')})`);\n      }\n      t.expectPipelineResult({\n        expectedResult,\n        code: `${enables}\n${overrideDecls.join('\\n')}\nvar<private> v = ${builtin}(${callArgs.join(', ')});`,\n        constants,\n        reference: ['v'],\n      });\n      break;\n    }\n  }\n}\n\n/** @returns a sweep of the representable values for element type of `type` */\nexport function fullRangeForType(type: Type, count?: number) {\n  if (count === undefined) {\n    count = 25;\n  }\n  switch (elementType(type)?.kind) {\n    case 'abstract-float':\n      return scalarF64Range({\n        pos_sub: Math.ceil((count * 1) / 5),\n        pos_norm: Math.ceil((count * 4) / 5),\n      });\n    case 'f32':\n      return scalarF32Range({\n        pos_sub: Math.ceil((count * 1) / 5),\n        pos_norm: Math.ceil((count * 4) / 5),\n      });\n    case 'f16':\n      return scalarF16Range({\n        pos_sub: Math.ceil((count * 1) / 5),\n        pos_norm: Math.ceil((count * 4) / 5),\n      });\n    case 'i32':\n      return linearRange(kValue.i32.negative.min, kValue.i32.positive.max, count).map(f =>\n        Math.floor(f)\n      );\n    case 'u32':\n      return linearRange(0, kValue.u32.max, count).map(f => Math.floor(f));\n  }\n  unreachable();\n}\n\n/** @returns all the values in the provided arrays with duplicates removed */\nexport function unique<T>(...arrays: Array<readonly T[]>): T[] {\n  const set = new Set<T>();\n  for (const arr of arrays) {\n    for (const item of arr) {\n      set.add(item);\n    }\n  }\n  return [...set];\n}\n"],"mappings":"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"}