{"version":3,"file":"shader_builtin_utils.js","names":["keysOf","assert","Type","scalarTypeOf","kEntryPointsToValidateFragmentOnlyBuiltins","none","expectSuccess","code","fragment","vertex","compute","fragment_and_compute","compute_without_call","kCommonTexelTypes","vec4f","vec4i","vec4u","kDepthTexelTypes","f32","kExternalTexelTypes","kCommonTextureTypes","texture_1d","texelTypes","texture_2d","texture_2d_array","texture_3d","texture_cube","texture_cube_array","texture_multisampled_2d","kDepthTextureTypes","texture_depth_2d","noSuffix","texture_depth_2d_array","texture_depth_cube","texture_depth_cube_array","texture_depth_multisampled_2d","kNonStorageTextureTypeInfo","texture_external","kNonStorageTextureTypes","getNonStorageTextureTypeWGSL","textureType","texelType","info","kTestTextureTypes","kTextureTypeSuffixToType","u32","getSampleAndBaseTextureTypeForTextureType","match","exec","sampleType"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/shader_builtin_utils.ts"],"sourcesContent":["import { keysOf } from '../../../../../../common/util/data_tables.js';\nimport { assert } from '../../../../../../common/util/util.js';\nimport { Type, scalarTypeOf } from '../../../../../util/conversion.js';\n\n/**\n * Use to test that certain WGSL builtins are only available in the fragment stage.\n * Create WGSL that defines a function \"foo\" and its required variables that uses\n * the builtin being tested. Append it to these code strings then compile. It should\n * succeed or fail based on the value `expectSuccess`.\n *\n * See ./textureSample.spec.ts was one example\n */\nexport const kEntryPointsToValidateFragmentOnlyBuiltins = {\n  none: {\n    expectSuccess: true,\n    code: ``,\n  },\n  fragment: {\n    expectSuccess: true,\n    code: `\n      @fragment\n      fn main() {\n        foo();\n      }\n    `,\n  },\n  vertex: {\n    expectSuccess: false,\n    code: `\n      @vertex\n      fn main() -> @builtin(position) vec4f {\n        foo();\n        return vec4f();\n      }\n    `,\n  },\n  compute: {\n    expectSuccess: false,\n    code: `\n      @compute @workgroup_size(1)\n      fn main() {\n        foo();\n      }\n    `,\n  },\n  fragment_and_compute: {\n    expectSuccess: false,\n    code: `\n      @fragment\n      fn main1() {\n        foo();\n      }\n\n      @compute @workgroup_size(1)\n      fn main2() {\n        foo();\n      }\n    `,\n  },\n  compute_without_call: {\n    expectSuccess: true,\n    code: `\n      @compute @workgroup_size(1)\n      fn main() {\n      }\n    `,\n  },\n};\n\nconst kCommonTexelTypes = [Type.vec4f, Type.vec4i, Type.vec4u];\nconst kDepthTexelTypes = [Type.f32];\nconst kExternalTexelTypes = [Type.vec4f];\n\ntype TextureTypeInfo = {\n  texelTypes: Type[];\n  noSuffix?: boolean;\n};\n\ntype TextureInfos = { [key: string]: TextureTypeInfo };\n\nconst kCommonTextureTypes: TextureInfos = {\n  texture_1d: { texelTypes: kCommonTexelTypes },\n  texture_2d: { texelTypes: kCommonTexelTypes },\n  texture_2d_array: { texelTypes: kCommonTexelTypes },\n  texture_3d: { texelTypes: kCommonTexelTypes },\n  texture_cube: { texelTypes: kCommonTexelTypes },\n  texture_cube_array: { texelTypes: kCommonTexelTypes },\n  texture_multisampled_2d: { texelTypes: kCommonTexelTypes },\n} as const;\n\nconst kDepthTextureTypes: TextureInfos = {\n  texture_depth_2d: { texelTypes: kDepthTexelTypes, noSuffix: true },\n  texture_depth_2d_array: { texelTypes: kDepthTexelTypes, noSuffix: true },\n  texture_depth_cube: { texelTypes: kDepthTexelTypes, noSuffix: true },\n  texture_depth_cube_array: { texelTypes: kDepthTexelTypes, noSuffix: true },\n  texture_depth_multisampled_2d: { texelTypes: kDepthTexelTypes, noSuffix: true },\n} as const;\n\nexport const kNonStorageTextureTypeInfo: TextureInfos = {\n  ...kCommonTextureTypes,\n  ...kDepthTextureTypes,\n  texture_external: { texelTypes: kExternalTexelTypes, noSuffix: true },\n} as const;\n\nexport const kNonStorageTextureTypes = keysOf(kNonStorageTextureTypeInfo);\nexport type NonStorageTextureType = (typeof kNonStorageTextureTypes)[number];\n\n/**\n * @returns the WGSL needed to define a texture based on a textureType (eg: 'texture_2d')\n * and a texelType (eg: Type.vec4f) which would return `texture_2d<f32>`\n */\nexport function getNonStorageTextureTypeWGSL(textureType: NonStorageTextureType, texelType: Type) {\n  const info = kNonStorageTextureTypeInfo[textureType];\n  return info.noSuffix ? textureType : `${textureType}<${scalarTypeOf(texelType)}>`;\n}\n\nexport const kTestTextureTypes = [\n  'texture_1d<f32>',\n  'texture_1d<u32>',\n  'texture_2d<f32>',\n  'texture_2d<u32>',\n  'texture_2d_array<f32>',\n  'texture_2d_array<u32>',\n  'texture_3d<f32>',\n  'texture_3d<u32>',\n  'texture_cube<f32>',\n  'texture_cube<u32>',\n  'texture_cube_array<f32>',\n  'texture_cube_array<u32>',\n  'texture_multisampled_2d<f32>',\n  'texture_multisampled_2d<u32>',\n  'texture_depth_multisampled_2d',\n  'texture_external',\n  'texture_storage_1d<rgba8unorm, read>',\n  'texture_storage_1d<r32uint, read>',\n  'texture_storage_2d<rgba8unorm, read>',\n  'texture_storage_2d<r32uint, read>',\n  'texture_storage_2d_array<rgba8unorm, read>',\n  'texture_storage_2d_array<r32uint, read>',\n  'texture_storage_3d<rgba8unorm, read>',\n  'texture_storage_3d<r32uint, read>',\n  'texture_depth_2d',\n  'texture_depth_2d_array',\n  'texture_depth_cube',\n  'texture_depth_cube_array',\n] as const;\n\nconst kTextureTypeSuffixToType: { [key: string]: Type } = {\n  f32: Type.vec4f,\n  u32: Type.vec4i,\n  'rgba8unorm, read': Type.vec4f,\n  'r32uint, read': Type.vec4u,\n};\n\n/** @returns the base type and sample type for kTestTextureTypes */\nexport function getSampleAndBaseTextureTypeForTextureType(\n  textureType: (typeof kTestTextureTypes)[number]\n): [string, Type] {\n  const match = /^(.*?)<(.*?)>/.exec(textureType);\n  const sampleType = match ? kTextureTypeSuffixToType[match[2]] : Type.vec4f;\n  assert(!!sampleType);\n  return [match ? match[1] : textureType, sampleType];\n}\n"],"mappings":"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"}