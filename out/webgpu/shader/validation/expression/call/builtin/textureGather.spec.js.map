{"version":3,"file":"textureGather.spec.js","names":["builtin","description","makeTestGroup","keysOf","objectsToRecord","Type","kAllScalarsAndVectors","isConvertible","isUnsignedType","scalarTypeOf","stringToType","ShaderValidationTest","getSampleAndBaseTextureTypeForTextureType","kTestTextureTypes","kColorSampleTypes","vec4f","vec4i","vec4u","kDepthSampleTypes","kValidTextureGatherParameterTypes","texture_2d","sampleTypes","hasComponentArg","coordsArgType","vec2f","offsetArgType","vec2i","texture_2d_array","hasArrayIndexArg","texture_cube","vec3f","texture_cube_array","texture_depth_2d","texture_depth_2d_array","texture_depth_cube","texture_depth_cube_array","kTextureTypes","kValuesTypes","g","test","specURL","desc","params","u","combine","expand","t","textureType","map","v","toString","beginSubcases","fn","returnType","sampleType","offset","returnVarType","sampleVarType","sampleTypeWGSL","includes","componentWGSL","varWGSL","coordWGSL","create","wgsl","arrayWGSL","offsetWGSL","code","expectSuccess","expectCompileResult","filter","componentType","value","componentArgType","i32","u32","varType","coordType","coordArgType","coordsRequiredType","arrayIndexType","arrayIndexArgType","args","arg","join","offsetType","offsetRequiredType","testTextureType","baseTestTextureType","types","typesMatch","use"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/textureGather.spec.ts"],"sourcesContent":["const builtin = 'textureGather';\nexport const description = `\nValidation tests for the ${builtin}() builtin.\n\n* test textureGather component parameter must be correct type\n* test textureGather component parameter must be between 0 and 3 inclusive\n* test textureGather component parameter must be a const expression\n* test textureGather coords parameter must be correct type\n* test textureGather array_index parameter must be correct type\n* test textureGather offset parameter must be correct type\n* test textureGather offset parameter must be a const-expression\n* test textureGather offset parameter must be between -8 and +7 inclusive\n* test textureGather returns the correct type\n* test textureGather doesn't work with texture types it's not supposed to\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport {\n  Type,\n  kAllScalarsAndVectors,\n  isConvertible,\n  ScalarType,\n  VectorType,\n  isUnsignedType,\n  scalarTypeOf,\n  stringToType,\n} from '../../../../../util/conversion.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\nimport {\n  getSampleAndBaseTextureTypeForTextureType,\n  kTestTextureTypes,\n} from './shader_builtin_utils.js';\n\nconst kColorSampleTypes = [Type.vec4f, Type.vec4i, Type.vec4u];\nconst kDepthSampleTypes = [Type.vec4f];\n\ntype TextureGatherArguments = {\n  sampleTypes: Type[];\n  hasComponentArg?: boolean;\n  coordsArgType: ScalarType | VectorType;\n  hasArrayIndexArg?: boolean;\n  offsetArgType?: VectorType;\n};\n\nconst kValidTextureGatherParameterTypes: { [n: string]: TextureGatherArguments } = {\n  texture_2d: {\n    sampleTypes: kColorSampleTypes,\n    hasComponentArg: true,\n    coordsArgType: Type.vec2f,\n    offsetArgType: Type.vec2i,\n  },\n  texture_2d_array: {\n    sampleTypes: kColorSampleTypes,\n    hasComponentArg: true,\n    coordsArgType: Type.vec2f,\n    hasArrayIndexArg: true,\n    offsetArgType: Type.vec2i,\n  },\n  texture_cube: {\n    sampleTypes: kColorSampleTypes,\n    hasComponentArg: true,\n    coordsArgType: Type.vec3f,\n  },\n  texture_cube_array: {\n    sampleTypes: kColorSampleTypes,\n    hasComponentArg: true,\n    coordsArgType: Type.vec3f,\n    hasArrayIndexArg: true,\n  },\n  texture_depth_2d: {\n    sampleTypes: kDepthSampleTypes,\n    coordsArgType: Type.vec2f,\n    offsetArgType: Type.vec2i,\n  },\n  texture_depth_2d_array: {\n    sampleTypes: kDepthSampleTypes,\n    coordsArgType: Type.vec2f,\n    hasArrayIndexArg: true,\n    offsetArgType: Type.vec2i,\n  },\n  texture_depth_cube: {\n    sampleTypes: kDepthSampleTypes,\n    coordsArgType: Type.vec3f,\n  },\n  texture_depth_cube_array: {\n    sampleTypes: kDepthSampleTypes,\n    coordsArgType: Type.vec3f,\n    hasArrayIndexArg: true,\n  },\n} as const;\n\nconst kTextureTypes = keysOf(kValidTextureGatherParameterTypes);\nconst kValuesTypes = objectsToRecord(kAllScalarsAndVectors);\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\ng.test('return_type')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturegather')\n  .desc(\n    `\nValidates the return type of ${builtin} is the expected type.\n`\n  )\n  .params(u =>\n    u\n      .combine('returnType', keysOf(kValuesTypes))\n      .combine('textureType', keysOf(kValidTextureGatherParameterTypes))\n      .expand('sampleType', t =>\n        kValidTextureGatherParameterTypes[t.textureType].sampleTypes.map(v => v.toString())\n      )\n      .beginSubcases()\n      .expand('offset', t =>\n        kValidTextureGatherParameterTypes[t.textureType].offsetArgType ? [false, true] : [false]\n      )\n  )\n  .fn(t => {\n    const { returnType, textureType, sampleType, offset } = t.params;\n    const returnVarType = kValuesTypes[returnType];\n    const sampleVarType = stringToType(sampleType);\n    const { hasComponentArg, offsetArgType, coordsArgType, hasArrayIndexArg } =\n      kValidTextureGatherParameterTypes[textureType];\n\n    const sampleTypeWGSL = textureType.includes('depth') ? '' : `<${scalarTypeOf(sampleVarType)}>`;\n    const componentWGSL = hasComponentArg ? '0, ' : '';\n    const varWGSL = returnVarType.toString();\n    const coordWGSL = coordsArgType.create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const offsetWGSL = offset ? `, ${offsetArgType?.create(0).wgsl()}` : '';\n\n    const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType}${sampleTypeWGSL};\n@fragment fn fs() -> @location(0) vec4f {\n  let v: ${varWGSL} = textureGather(${componentWGSL}t, s, ${coordWGSL}${arrayWGSL}${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess = isConvertible(sampleVarType, returnVarType);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('component_argument')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturegather')\n  .desc(\n    `\nValidates that only incorrect components arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', keysOf(kValidTextureGatherParameterTypes))\n      // filter out types with no component argument\n      .filter(t => !!kValidTextureGatherParameterTypes[t.textureType].hasComponentArg)\n      .combine('componentType', keysOf(kValuesTypes))\n      .expand('sampleType', t =>\n        kValidTextureGatherParameterTypes[t.textureType].sampleTypes.map(v => v.toString())\n      )\n      .beginSubcases()\n      .combine('value', [-1, 0, 1, 2, 3, 4] as const)\n      // filter out unsigned types with negative values\n      .filter(t => !isUnsignedType(kValuesTypes[t.componentType]) || t.value >= 0)\n      .expand('offset', t =>\n        kValidTextureGatherParameterTypes[t.textureType].offsetArgType ? [false, true] : [false]\n      )\n  )\n  .fn(t => {\n    const { textureType, componentType, sampleType, offset, value } = t.params;\n    const sampleVarType = stringToType(sampleType);\n    const componentArgType = kValuesTypes[componentType];\n    const { offsetArgType, coordsArgType, hasArrayIndexArg } =\n      kValidTextureGatherParameterTypes[textureType];\n\n    const sampleTypeWGSL = textureType.includes('depth') ? '' : `<${scalarTypeOf(sampleVarType)}>`;\n    const componentWGSL = componentArgType.create(value).wgsl();\n    const coordWGSL = coordsArgType.create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const offsetWGSL = offset ? `, ${offsetArgType?.create(0).wgsl()}` : '';\n\n    const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType}${sampleTypeWGSL};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureGather(${componentWGSL}, t, s, ${coordWGSL}${arrayWGSL}${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess =\n      (isConvertible(componentArgType, Type.i32) || isConvertible(componentArgType, Type.u32)) &&\n      value >= 0 &&\n      value <= 3;\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('component_argument,non_const')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturegather')\n  .desc(\n    `\nValidates that only non-const components arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', keysOf(kValidTextureGatherParameterTypes))\n      // filter out types with no component argument\n      .filter(t => !!kValidTextureGatherParameterTypes[t.textureType].hasComponentArg)\n      .expand('sampleType', t =>\n        kValidTextureGatherParameterTypes[t.textureType].sampleTypes.map(v => v.toString())\n      )\n      .combine('varType', ['c', 'u', 'l'])\n      .beginSubcases()\n      .expand('offset', t =>\n        kValidTextureGatherParameterTypes[t.textureType].offsetArgType ? [false, true] : [false]\n      )\n  )\n  .fn(t => {\n    const { textureType, sampleType, varType, offset } = t.params;\n    const sampleVarType = stringToType(sampleType);\n    const componentArgType = Type.u32;\n    const { coordsArgType, hasArrayIndexArg, offsetArgType } =\n      kValidTextureGatherParameterTypes[textureType];\n\n    const sampleTypeWGSL = textureType.includes('depth') ? '' : `<${scalarTypeOf(sampleVarType)}>`;\n    const componentWGSL = `${componentArgType}(${varType})`;\n    const coordWGSL = coordsArgType.create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const offsetWGSL = offset ? `, ${offsetArgType?.create(0).wgsl()}` : '';\n\n    const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType}${sampleTypeWGSL};\n@group(0) @binding(2) var<uniform> u: ${componentArgType};\n\n@fragment fn fs() -> @location(0) vec4f {\n  const c = 1;\n  let l = 1;\n  let v = textureGather(${componentWGSL}, t, s, ${coordWGSL}${arrayWGSL}${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess = varType === 'c';\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('coords_argument')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturegather')\n  .desc(\n    `\nValidates that only incorrect coords arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', keysOf(kValidTextureGatherParameterTypes))\n      .expand('sampleType', t =>\n        kValidTextureGatherParameterTypes[t.textureType].sampleTypes.map(v => v.toString())\n      )\n      .combine('coordType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .combine('value', [-1, 0, 1] as const)\n      // filter out unsigned types with negative values\n      .filter(t => !isUnsignedType(kValuesTypes[t.coordType]) || t.value >= 0)\n      .expand('offset', t =>\n        kValidTextureGatherParameterTypes[t.textureType].offsetArgType ? [false, true] : [false]\n      )\n  )\n  .fn(t => {\n    const { textureType, sampleType, coordType, offset, value } = t.params;\n    const sampleVarType = stringToType(sampleType);\n    const coordArgType = kValuesTypes[coordType];\n    const {\n      hasComponentArg,\n      offsetArgType,\n      coordsArgType: coordsRequiredType,\n      hasArrayIndexArg,\n    } = kValidTextureGatherParameterTypes[textureType];\n\n    const sampleTypeWGSL = textureType.includes('depth') ? '' : `<${scalarTypeOf(sampleVarType)}>`;\n    const componentWGSL = hasComponentArg ? '0, ' : '';\n    const coordWGSL = coordArgType.create(value).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const offsetWGSL = offset ? `, ${offsetArgType?.create(0).wgsl()}` : '';\n\n    const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType}${sampleTypeWGSL};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureGather(${componentWGSL}t, s, ${coordWGSL}${arrayWGSL}${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess = isConvertible(coordArgType, coordsRequiredType);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('array_index_argument')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturegather')\n  .desc(\n    `\nValidates that only incorrect array_index arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kTextureTypes)\n      // filter out types with no array_index\n      .filter(t => !!kValidTextureGatherParameterTypes[t.textureType].hasArrayIndexArg)\n      .expand('sampleType', t =>\n        kValidTextureGatherParameterTypes[t.textureType].sampleTypes.map(v => v.toString())\n      )\n      .combine('arrayIndexType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .combine('value', [-9, -8, 0, 7, 8])\n      // filter out unsigned types with negative values\n      .filter(t => !isUnsignedType(kValuesTypes[t.arrayIndexType]) || t.value >= 0)\n      .expand('offset', t =>\n        kValidTextureGatherParameterTypes[t.textureType].offsetArgType ? [false, true] : [false]\n      )\n  )\n  .fn(t => {\n    const { textureType, sampleType, arrayIndexType, value, offset } = t.params;\n    const sampleVarType = stringToType(sampleType);\n    const arrayIndexArgType = kValuesTypes[arrayIndexType];\n    const args = [arrayIndexArgType.create(value)];\n    const { hasComponentArg, coordsArgType, offsetArgType } =\n      kValidTextureGatherParameterTypes[textureType];\n\n    const sampleTypeWGSL = textureType.includes('depth') ? '' : `<${scalarTypeOf(sampleVarType)}>`;\n    const componentWGSL = hasComponentArg ? '0, ' : '';\n    const coordWGSL = coordsArgType.create(0).wgsl();\n    const arrayWGSL = args.map(arg => arg.wgsl()).join(', ');\n    const offsetWGSL = offset ? `, ${offsetArgType!.create(0).wgsl()}` : '';\n\n    const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType}${sampleTypeWGSL};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureGather(${componentWGSL}t, s, ${coordWGSL}, ${arrayWGSL}${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess =\n      isConvertible(arrayIndexArgType, Type.i32) || isConvertible(arrayIndexArgType, Type.u32);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('offset_argument')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturegather')\n  .desc(\n    `\nValidates that only incorrect offset arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kTextureTypes)\n      // filter out types with no offset\n      .filter(t => !!kValidTextureGatherParameterTypes[t.textureType].offsetArgType)\n      .expand('sampleType', t =>\n        kValidTextureGatherParameterTypes[t.textureType].sampleTypes.map(v => v.toString())\n      )\n      .combine('offsetType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .combine('value', [-9, -8, 0, 7, 8])\n      // filter out unsigned types with negative values\n      .filter(t => !isUnsignedType(kValuesTypes[t.offsetType]) || t.value >= 0)\n  )\n  .fn(t => {\n    const { textureType, sampleType, offsetType, value } = t.params;\n    const sampleVarType = stringToType(sampleType);\n    const offsetArgType = kValuesTypes[offsetType];\n    const args = [offsetArgType.create(value)];\n    const {\n      hasComponentArg,\n      coordsArgType,\n      hasArrayIndexArg,\n      offsetArgType: offsetRequiredType,\n    } = kValidTextureGatherParameterTypes[textureType];\n\n    const sampleTypeWGSL = textureType.includes('depth') ? '' : `<${scalarTypeOf(sampleVarType)}>`;\n    const componentWGSL = hasComponentArg ? '0, ' : '';\n    const coordWGSL = coordsArgType.create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const offsetWGSL = args.map(arg => arg.wgsl()).join(', ');\n\n    const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType}${sampleTypeWGSL};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureGather(${componentWGSL}t, s, ${coordWGSL}${arrayWGSL}, ${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess =\n      isConvertible(offsetArgType, offsetRequiredType!) && value >= -8 && value <= 7;\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('offset_argument,non_const')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturegather')\n  .desc(\n    `\nValidates that only non-const offset arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kTextureTypes)\n      .expand('sampleType', t =>\n        kValidTextureGatherParameterTypes[t.textureType].sampleTypes.map(v => v.toString())\n      )\n      .combine('varType', ['c', 'u', 'l'])\n      // filter out types with no offset\n      .filter(t => !!kValidTextureGatherParameterTypes[t.textureType].offsetArgType)\n  )\n  .fn(t => {\n    const { textureType, sampleType, varType } = t.params;\n    const sampleVarType = stringToType(sampleType);\n    const { hasComponentArg, coordsArgType, hasArrayIndexArg, offsetArgType } =\n      kValidTextureGatherParameterTypes[textureType];\n\n    const sampleTypeWGSL = textureType.includes('depth') ? '' : `<${scalarTypeOf(sampleVarType)}>`;\n    const componentWGSL = hasComponentArg ? '0, ' : '';\n    const coordWGSL = coordsArgType.create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const offsetWGSL = `${offsetArgType}(${varType})`;\n\n    const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType}${sampleTypeWGSL};\n@group(0) @binding(2) var<uniform> u: ${offsetArgType};\n@fragment fn fs() -> @location(0) vec4f {\n  const c = 1;\n  let l = ${offsetArgType!.create(0).wgsl()};\n  let v = textureGather(${componentWGSL}t, s, ${coordWGSL}${arrayWGSL}, ${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess = varType === 'c';\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('texture_type')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturegather')\n  .desc(\n    `\nValidates that incompatible texture types don't work with ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('testTextureType', kTestTextureTypes)\n      .combine('textureType', keysOf(kValidTextureGatherParameterTypes))\n      .expand('offset', t =>\n        kValidTextureGatherParameterTypes[t.textureType].offsetArgType ? [false, true] : [false]\n      )\n  )\n  .fn(t => {\n    const { testTextureType, textureType, offset } = t.params;\n    const { hasComponentArg, coordsArgType, offsetArgType, hasArrayIndexArg } =\n      kValidTextureGatherParameterTypes[textureType];\n\n    const componentWGSL = hasComponentArg ? '0, ' : '';\n    const coordWGSL = coordsArgType.create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const offsetWGSL = offset ? `, ${offsetArgType?.create(0).wgsl()}` : '';\n\n    const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${testTextureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureGather(${componentWGSL}t, s, ${coordWGSL}${arrayWGSL}${offsetWGSL});\n  return vec4f(0);\n}\n`;\n\n    const [baseTestTextureType] = getSampleAndBaseTextureTypeForTextureType(testTextureType);\n\n    const types = kValidTextureGatherParameterTypes[baseTestTextureType];\n    const typesMatch = types\n      ? types.hasComponentArg === hasComponentArg &&\n        types.coordsArgType === coordsArgType &&\n        types.hasArrayIndexArg === hasArrayIndexArg &&\n        (offset ? types.offsetArgType === offsetArgType : true)\n      : false;\n\n    const expectSuccess = typesMatch;\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('must_use')\n  .desc('Tests that the result must be used')\n  .params(u => u.combine('use', [true, false] as const))\n  .fn(t => {\n    const code = `\n    @group(0) @binding(0) var t : texture_2d<f32>;\n    @group(0) @binding(1) var s : sampler;\n    fn foo() {\n      ${t.params.use ? '_ =' : ''} textureGather(0, t, s, vec2(0,0));\n    }`;\n    t.expectCompileResult(t.params.use, code);\n  });\n"],"mappings":"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"}