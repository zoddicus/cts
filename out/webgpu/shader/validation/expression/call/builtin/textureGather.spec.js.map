{"version":3,"file":"textureGather.spec.js","names":["builtin","description","makeTestGroup","keysOf","objectsToRecord","Type","kAllScalarsAndVectors","isConvertible","isUnsignedType","ShaderValidationTest","kValidTextureGatherParameterTypes","hasComponentArg","coordsArgType","vec2f","offsetArgType","vec2i","hasArrayIndexArg","vec3f","texture_depth_2d","texture_depth_2d_array","texture_depth_cube","texture_depth_cube_array","kTextureTypes","kValuesTypes","g","test","specURL","desc","params","u","combine","filter","t","textureType","beginSubcases","componentType","value","expand","fn","offset","componentArgType","componentWGSL","create","wgsl","coordWGSL","arrayWGSL","offsetWGSL","code","expectSuccess","i32","u32","expectCompileResult","varType","coordType","coordArgType","coordsRequiredType","arrayIndexType","arrayIndexArgType","args","map","arg","join","offsetType","offsetRequiredType"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/textureGather.spec.ts"],"sourcesContent":["const builtin = 'textureGather';\nexport const description = `\nValidation tests for the ${builtin}() builtin.\n\n* test textureGather component parameter must be correct type\n* test textureGather component parameter must be between 0 and 3 inclusive\n* test textureGather component parameter must be a const expression\n* test textureGather coords parameter must be correct type\n* test textureGather array_index parameter must be correct type\n* test textureGather offset parameter must be correct type\n* test textureGather offset parameter must be a const-expression\n* test textureGather offset parameter must be between -8 and +7 inclusive\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport {\n  Type,\n  kAllScalarsAndVectors,\n  isConvertible,\n  ScalarType,\n  VectorType,\n  isUnsignedType,\n} from '../../../../../util/conversion.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\ntype TextureGatherArguments = {\n  hasComponentArg?: boolean;\n  coordsArgType: ScalarType | VectorType;\n  hasArrayIndexArg?: boolean;\n  offsetArgType?: VectorType;\n};\n\nconst kValidTextureGatherParameterTypes: { [n: string]: TextureGatherArguments } = {\n  'texture_2d<f32>': {\n    hasComponentArg: true,\n    coordsArgType: Type.vec2f,\n    offsetArgType: Type.vec2i,\n  },\n  'texture_2d_array<f32>': {\n    hasComponentArg: true,\n    coordsArgType: Type.vec2f,\n    hasArrayIndexArg: true,\n    offsetArgType: Type.vec2i,\n  },\n  'texture_cube<f32>': { hasComponentArg: true, coordsArgType: Type.vec3f },\n  'texture_cube_array<f32>': {\n    hasComponentArg: true,\n    coordsArgType: Type.vec3f,\n    hasArrayIndexArg: true,\n  },\n  texture_depth_2d: { coordsArgType: Type.vec2f, offsetArgType: Type.vec2i },\n  texture_depth_2d_array: {\n    coordsArgType: Type.vec2f,\n    hasArrayIndexArg: true,\n    offsetArgType: Type.vec2i,\n  },\n  texture_depth_cube: { coordsArgType: Type.vec3f },\n  texture_depth_cube_array: { coordsArgType: Type.vec3f, hasArrayIndexArg: true },\n} as const;\n\nconst kTextureTypes = keysOf(kValidTextureGatherParameterTypes);\nconst kValuesTypes = objectsToRecord(kAllScalarsAndVectors);\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\ng.test('component_argument')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturegather')\n  .desc(\n    `\nValidates that only incorrect components arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', keysOf(kValidTextureGatherParameterTypes))\n      // filter out types with no component argument\n      .filter(t => !!kValidTextureGatherParameterTypes[t.textureType].hasComponentArg)\n      .combine('componentType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .combine('value', [-1, 0, 1, 2, 3, 4] as const)\n      // filter out unsigned types with negative values\n      .filter(t => !isUnsignedType(kValuesTypes[t.componentType]) || t.value >= 0)\n      .expand('offset', t =>\n        kValidTextureGatherParameterTypes[t.textureType].offsetArgType ? [false, true] : [false]\n      )\n  )\n  .fn(t => {\n    const { textureType, componentType, offset, value } = t.params;\n    const componentArgType = kValuesTypes[componentType];\n    const { offsetArgType, coordsArgType, hasArrayIndexArg } =\n      kValidTextureGatherParameterTypes[textureType];\n\n    const componentWGSL = componentArgType.create(value).wgsl();\n    const coordWGSL = coordsArgType.create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const offsetWGSL = offset ? `, ${offsetArgType?.create(0).wgsl()}` : '';\n\n    const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureGather(${componentWGSL}, t, s, ${coordWGSL}${arrayWGSL}${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess =\n      (isConvertible(componentArgType, Type.i32) || isConvertible(componentArgType, Type.u32)) &&\n      value >= 0 &&\n      value <= 3;\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('component_argument,non_const')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturegather')\n  .desc(\n    `\nValidates that only non-const components arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', keysOf(kValidTextureGatherParameterTypes))\n      // filter out types with no component argument\n      .filter(t => !!kValidTextureGatherParameterTypes[t.textureType].hasComponentArg)\n      .combine('varType', ['c', 'u', 'l'])\n      .beginSubcases()\n      .expand('offset', t =>\n        kValidTextureGatherParameterTypes[t.textureType].offsetArgType ? [false, true] : [false]\n      )\n  )\n  .fn(t => {\n    const { textureType, varType, offset } = t.params;\n    const componentArgType = Type.u32;\n    const { coordsArgType, hasArrayIndexArg, offsetArgType } =\n      kValidTextureGatherParameterTypes[textureType];\n\n    const componentWGSL = `${componentArgType}(${varType})`;\n    const coordWGSL = coordsArgType.create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const offsetWGSL = offset ? `, ${offsetArgType?.create(0).wgsl()}` : '';\n\n    const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType};\n@group(0) @binding(2) var<uniform> u: ${componentArgType};\n\n@fragment fn fs() -> @location(0) vec4f {\n  const c = 1;\n  let l = 1;\n  let v = textureGather(${componentWGSL}, t, s, ${coordWGSL}${arrayWGSL}${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess = varType === 'c';\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('coords_argument')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturegather')\n  .desc(\n    `\nValidates that only incorrect coords arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', keysOf(kValidTextureGatherParameterTypes))\n      .combine('coordType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .combine('value', [-1, 0, 1] as const)\n      // filter out unsigned types with negative values\n      .filter(t => !isUnsignedType(kValuesTypes[t.coordType]) || t.value >= 0)\n      .expand('offset', t =>\n        kValidTextureGatherParameterTypes[t.textureType].offsetArgType ? [false, true] : [false]\n      )\n  )\n  .fn(t => {\n    const { textureType, coordType, offset, value } = t.params;\n    const coordArgType = kValuesTypes[coordType];\n    const {\n      hasComponentArg,\n      offsetArgType,\n      coordsArgType: coordsRequiredType,\n      hasArrayIndexArg,\n    } = kValidTextureGatherParameterTypes[textureType];\n\n    const componentWGSL = hasComponentArg ? '0, ' : '';\n    const coordWGSL = coordArgType.create(value).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const offsetWGSL = offset ? `, ${offsetArgType?.create(0).wgsl()}` : '';\n\n    const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureGather(${componentWGSL}t, s, ${coordWGSL}${arrayWGSL}${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess = isConvertible(coordArgType, coordsRequiredType);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('array_index_argument')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturegather')\n  .desc(\n    `\nValidates that only incorrect array_index arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kTextureTypes)\n      // filter out types with no array_index\n      .filter(t => !!kValidTextureGatherParameterTypes[t.textureType].hasArrayIndexArg)\n      .combine('arrayIndexType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .combine('value', [-9, -8, 0, 7, 8])\n      // filter out unsigned types with negative values\n      .filter(t => !isUnsignedType(kValuesTypes[t.arrayIndexType]) || t.value >= 0)\n      .expand('offset', t =>\n        kValidTextureGatherParameterTypes[t.textureType].offsetArgType ? [false, true] : [false]\n      )\n  )\n  .fn(t => {\n    const { textureType, arrayIndexType, value, offset } = t.params;\n    const arrayIndexArgType = kValuesTypes[arrayIndexType];\n    const args = [arrayIndexArgType.create(value)];\n    const { hasComponentArg, coordsArgType, offsetArgType } =\n      kValidTextureGatherParameterTypes[textureType];\n\n    const componentWGSL = hasComponentArg ? '0, ' : '';\n    const coordWGSL = coordsArgType.create(0).wgsl();\n    const arrayWGSL = args.map(arg => arg.wgsl()).join(', ');\n    const offsetWGSL = offset ? `, ${offsetArgType!.create(0).wgsl()}` : '';\n\n    const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureGather(${componentWGSL}t, s, ${coordWGSL}, ${arrayWGSL}${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess =\n      isConvertible(arrayIndexArgType, Type.i32) || isConvertible(arrayIndexArgType, Type.u32);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('offset_argument')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturegather')\n  .desc(\n    `\nValidates that only incorrect offset arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kTextureTypes)\n      // filter out types with no offset\n      .filter(t => !!kValidTextureGatherParameterTypes[t.textureType].offsetArgType)\n      .combine('offsetType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .combine('value', [-9, -8, 0, 7, 8])\n      // filter out unsigned types with negative values\n      .filter(t => !isUnsignedType(kValuesTypes[t.offsetType]) || t.value >= 0)\n  )\n  .fn(t => {\n    const { textureType, offsetType, value } = t.params;\n    const offsetArgType = kValuesTypes[offsetType];\n    const args = [offsetArgType.create(value)];\n    const {\n      hasComponentArg,\n      coordsArgType,\n      hasArrayIndexArg,\n      offsetArgType: offsetRequiredType,\n    } = kValidTextureGatherParameterTypes[textureType];\n\n    const componentWGSL = hasComponentArg ? '0, ' : '';\n    const coordWGSL = coordsArgType.create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const offsetWGSL = args.map(arg => arg.wgsl()).join(', ');\n\n    const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureGather(${componentWGSL}t, s, ${coordWGSL}${arrayWGSL}, ${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess =\n      isConvertible(offsetArgType, offsetRequiredType!) && value >= -8 && value <= 7;\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('offset_argument,non_const')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturegather')\n  .desc(\n    `\nValidates that only non-const offset arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kTextureTypes)\n      .combine('varType', ['c', 'u', 'l'])\n      // filter out types with no offset\n      .filter(t => !!kValidTextureGatherParameterTypes[t.textureType].offsetArgType)\n  )\n  .fn(t => {\n    const { textureType, varType } = t.params;\n    const { hasComponentArg, coordsArgType, hasArrayIndexArg, offsetArgType } =\n      kValidTextureGatherParameterTypes[textureType];\n\n    const componentWGSL = hasComponentArg ? '0, ' : '';\n    const coordWGSL = coordsArgType.create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const offsetWGSL = `${offsetArgType}(${varType})`;\n\n    const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType};\n@group(0) @binding(2) var<uniform> u: ${offsetArgType};\n@fragment fn fs() -> @location(0) vec4f {\n  const c = 1;\n  let l = ${offsetArgType!.create(0).wgsl()};\n  let v = textureGather(${componentWGSL}t, s, ${coordWGSL}${arrayWGSL}, ${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess = varType === 'c';\n    t.expectCompileResult(expectSuccess, code);\n  });\n"],"mappings":"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"}