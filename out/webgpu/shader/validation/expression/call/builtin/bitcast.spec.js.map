{"version":3,"file":"bitcast.spec.js","names":["description","makeTestGroup","keysOf","kBit","linearRange","ShaderValidationTest","g","kVectorCases","v1_b0","width","badIndex","v2_b0","v2_b1","v3_b0","v3_b1","v3_b2","v4_b0","v4_b1","v4_b2","v4_b3","numNaNs","f32InfAndNaNInU32","f32","infinity","positive","i32","max","negative","u32","test","specURL","desc","params","u","combine","beginSubcases","fn","t","vectorize","badScalar","fromScalarType","bitBadValue","destType","srcType","components","Array","keys","map","i","join","code","expectCompileResult","f32_matrix_types","j","reduce","a","c","concat","bool_types","T","type","preamble","srcVal","direction","typeOf","s","b","p","var","beforeAllSubcases","selectDeviceOrSkipTestCase","src_type","other_type","dst_type"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/bitcast.spec.ts"],"sourcesContent":["export const description = `\nValidation negative tests for bitcast builtins.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf } from '../../../../../../common/util/data_tables.js';\nimport { kBit } from '../../../../../util/constants.js';\nimport { linearRange } from '../../../../../util/math.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\n// A VectorCase specifies the number of components a vector type has,\n// and which component will have a bad value.\n// Use width = 1 to indicate a scalar.\ntype VectorCase = { width: number; badIndex: number };\nconst kVectorCases: Record<string, VectorCase> = {\n  v1_b0: { width: 1, badIndex: 0 },\n  v2_b0: { width: 2, badIndex: 0 },\n  v2_b1: { width: 2, badIndex: 1 },\n  v3_b0: { width: 3, badIndex: 0 },\n  v3_b1: { width: 3, badIndex: 1 },\n  v3_b2: { width: 3, badIndex: 2 },\n  v4_b0: { width: 4, badIndex: 0 },\n  v4_b1: { width: 4, badIndex: 1 },\n  v4_b2: { width: 4, badIndex: 2 },\n  v4_b3: { width: 4, badIndex: 3 },\n};\n\nconst numNaNs = 4;\nconst f32InfAndNaNInU32: number[] = [\n  // Cover NaNs evenly in integer space.\n  // The positive NaN with the lowest integer representation is the integer\n  // for infinity, plus one.\n  // The positive NaN with the highest integer representation is i32.max (!)\n  ...linearRange(kBit.f32.infinity.positive + 1, kBit.i32.positive.max, numNaNs),\n  // The negative NaN with the lowest integer representation is the integer\n  // for negative infinity, plus one.\n  // The negative NaN with the highest integer representation is u32.max (!)\n  ...linearRange(kBit.f32.infinity.negative + 1, kBit.u32.max, numNaNs),\n  kBit.f32.infinity.positive,\n  kBit.f32.infinity.negative,\n];\n\ng.test('bad_const_to_f32')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nIt is a shader-creation error if any const-expression of floating-point type evaluates to NaN or infinity.\n`\n  )\n  .params(u =>\n    u\n      .combine('fromScalarType', ['i32', 'u32'] as const)\n      .combine('vectorize', keysOf(kVectorCases))\n      .beginSubcases()\n      .combine('bitBadValue', [...f32InfAndNaNInU32] as const)\n  )\n  .fn(t => {\n    // For scalar cases, generate code like:\n    //  const f = bitcast<f32>(i32(u32(0x7f800000)));\n    // For vector cases, generate code where one component is bad. In this case\n    // width=4 and badIndex=2\n    //  const f = bitcast<vec4f>(vec4<32>(0,0,i32(u32(0x7f800000)),0));\n    const vectorize = kVectorCases[t.params.vectorize];\n    const width = vectorize.width;\n    const badIndex = vectorize.badIndex;\n    const badScalar = `${t.params.fromScalarType}(u32(${t.params.bitBadValue}))`;\n    const destType = width === 1 ? 'f32' : `vec${width}f`;\n    const srcType =\n      width === 1 ? t.params.fromScalarType : `vec${width}<${t.params.fromScalarType}>`;\n    const components = [...Array(width).keys()]\n      .map(i => (i === badIndex ? badScalar : '0'))\n      .join(',');\n    const code = `const f = bitcast<${destType}>(${srcType}(${components}));`;\n    t.expectCompileResult(false, code);\n  });\n\nconst f32_matrix_types = [2, 3, 4]\n  .map(i => [2, 3, 4].map(j => `mat${i}x${j}f`))\n  .reduce((a, c) => a.concat(c), []);\nconst bool_types = ['bool', ...[2, 3, 4].map(i => `vec${i}<bool>`)];\n\ng.test('bad_type_constructible')\n  .specURL('https://www.w3.org/TR/WGSL/#bitcast-builtin')\n  .desc(\n    `\nBitcast only applies to concrete numeric scalar or concrete numeric vector.\nTest constructible types.\n`\n  )\n  .params(u =>\n    u\n      .combine('type', [...f32_matrix_types, ...bool_types, 'array<i32,2>', 'S'])\n      .combine('direction', ['to', 'from'])\n  )\n  .fn(t => {\n    const T = t.params.type;\n    const preamble = T === 'S' ? 'struct S { a:i32 } ' : '';\n    // Create a value of type T using zero-construction: T().\n    const srcVal = t.params.direction === 'to' ? '0' : `${T}()`;\n    const destType = t.params.direction === 'to' ? T : 'i32';\n    const code = preamble + `const x = bitcast<${destType}>(${srcVal});`;\n    t.expectCompileResult(false, code);\n  });\n\ng.test('bad_type_nonconstructible')\n  .specURL('https://www.w3.org/TR/WGSL/#bitcast-builtin')\n  .desc(\n    `\nBitcast only applies to concrete numeric scalar or concrete numeric vector.\nTest non-constructible types.\n`\n  )\n  .params(u => u.combine('var', ['s', 't', 'b', 'p']).combine('direction', ['to', 'from']))\n  .fn(t => {\n    const typeOf: Record<string, string> = {\n      s: 'sampler',\n      t: 'texture_depth_2d',\n      b: 'array<i32>',\n      p: 'ptr<private,i32>',\n    };\n    const srcVal = t.params.direction === 'to' ? '0' : t.params.var;\n    const destType = t.params.direction === 'to' ? typeOf[t.params.var] : 'i32';\n    const code = `\n    @group(0) @binding(0) var s: sampler;\n    @group(0) @binding(1) var t: texture_depth_2d;\n    @group(0) @binding(2) var<storage> b: array<i32>;\n    var<private> v: i32;\n    @compute @workgroup_size(1)\n    fn main() {\n      let p = &v;\n      let x = bitcast<${destType}>(${srcVal});\n    }\n    `;\n    t.expectCompileResult(false, code);\n  });\n\ng.test('bad_to_vec3h')\n  .specURL('https://www.w3.org/TR/WGSL/#bitcast-builtin')\n  .desc(\n    `\nCan't cast numeric type to vec3<f16> because it is 48 bits wide\nand no other type is that size.\n`\n  )\n  .params(u =>\n    u\n      .combine('other_type', [\n        'bool',\n        'u32',\n        'i32',\n        'f32',\n        'vec2<bool>',\n        'vec3<bool>',\n        'vec4<bool>',\n        'vec2u',\n        'vec3u',\n        'vec4u',\n        'vec2i',\n        'vec3i',\n        'vec4i',\n        'vec2f',\n        'vec3f',\n        'vec4f',\n        'vec2h',\n        'vec4h',\n      ] as const)\n      .combine('direction', ['to', 'from'] as const)\n      .combine('type', ['vec3<f16>', 'vec3h'])\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  })\n  .fn(t => {\n    const src_type = t.params.direction === 'to' ? t.params.type : t.params.other_type;\n    const dst_type = t.params.direction === 'from' ? t.params.type : t.params.other_type;\n    const code = `\nenable f16;\n@fragment\nfn main() {\n  var src : ${src_type};\n  let dst = bitcast<${dst_type}>(src);\n}`;\n    t.expectCompileResult(false, code);\n  });\n\ng.test('bad_to_f16')\n  .specURL('https://www.w3.org/TR/WGSL/#bitcast-builtin')\n  .desc(\n    `\nCan't cast non-16-bit types to f16 because it is 16 bits wide\nand no other type is that size.\n`\n  )\n  .params(u =>\n    u\n      .combine('other_type', [\n        'bool',\n        'u32',\n        'i32',\n        'f32',\n        'vec2<bool>',\n        'vec3<bool>',\n        'vec4<bool>',\n        'vec2u',\n        'vec3u',\n        'vec4u',\n        'vec2i',\n        'vec3i',\n        'vec4i',\n        'vec2f',\n        'vec3f',\n        'vec4f',\n        'vec2h',\n        'vec3h',\n        'vec4h',\n      ] as const)\n      .combine('direction', ['to', 'from'] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  })\n  .fn(t => {\n    const src_type = t.params.direction === 'to' ? 'f16' : t.params.other_type;\n    const dst_type = t.params.direction === 'from' ? 'f16' : t.params.other_type;\n    const code = `\nenable f16;\n@fragment\nfn main() {\n  var src : ${src_type};\n  let dst = bitcast<${dst_type}>(src);\n}`;\n    t.expectCompileResult(false, code);\n  });\n\ng.test('valid_vec2h')\n  .specURL('https://www.w3.org/TR/WGSL/#bitcast-builtin')\n  .desc(`Check valid vec2<f16> bitcasts`)\n  .params(u =>\n    u\n      .combine('other_type', ['u32', 'i32', 'f32'] as const)\n      .combine('type', ['vec2<f16>', 'vec2h'] as const)\n      .combine('direction', ['to', 'from'] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  })\n  .fn(t => {\n    const src_type = t.params.direction === 'to' ? t.params.type : t.params.other_type;\n    const dst_type = t.params.direction === 'from' ? t.params.type : t.params.other_type;\n    const code = `\nenable f16;\n@fragment\nfn main() {\n  var src : ${src_type};\n  let dst = bitcast<${dst_type}>(src);\n}`;\n    t.expectCompileResult(true, code);\n  });\n\ng.test('valid_vec4h')\n  .specURL('https://www.w3.org/TR/WGSL/#bitcast-builtin')\n  .desc(`Check valid vec2<f16> bitcasts`)\n  .params(u =>\n    u\n      .combine('other_type', [\n        'vec2<u32>',\n        'vec2u',\n        'vec2<i32>',\n        'vec2i',\n        'vec2<f32>',\n        'vec2f',\n      ] as const)\n      .combine('type', ['vec4<f16>', 'vec4h'] as const)\n      .combine('direction', ['to', 'from'] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  })\n  .fn(t => {\n    const src_type = t.params.direction === 'to' ? t.params.type : t.params.other_type;\n    const dst_type = t.params.direction === 'from' ? t.params.type : t.params.other_type;\n    const code = `\nenable f16;\n@fragment\nfn main() {\n  var src : ${src_type};\n  let dst = bitcast<${dst_type}>(src);\n}`;\n    t.expectCompileResult(true, code);\n  });\n"],"mappings":"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"}