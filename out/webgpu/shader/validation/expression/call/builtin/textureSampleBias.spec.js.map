{"version":3,"file":"textureSampleBias.spec.js","names":["builtin","description","makeTestGroup","keysOf","objectsToRecord","Type","kAllScalarsAndVectors","isConvertible","isUnsignedType","scalarTypeOf","isFloatType","ShaderValidationTest","kEntryPointsToValidateFragmentOnlyBuiltins","kTestTextureTypes","kValidTextureSampleBiasParameterTypes","coordsArgType","vec2f","offsetArgType","vec2i","hasArrayIndexArg","vec3f","vec3i","kTextureTypes","kValuesTypes","g","test","specURL","desc","params","u","combine","beginSubcases","expand","t","textureType","fn","returnType","offset","returnVarType","varWGSL","toString","coordWGSL","create","wgsl","arrayWGSL","offsetWGSL","code","expectSuccess","vec4f","expectCompileResult","filter","coordType","value","coordArgType","coordsRequiredType","arrayIndexType","arrayIndexArgType","args","map","arg","join","i32","u32","biasType","Number","isInteger","biasArgType","biasWGSL","f32","offsetType","offsetRequiredType","varType","entryPoint","config","testTextureType","types","typesMatch","use"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/textureSampleBias.spec.ts"],"sourcesContent":["const builtin = 'textureSampleBias';\nexport const description = `\nValidation tests for the ${builtin}() builtin.\n\n* test textureSampleBias coords parameter must be correct type\n* test textureSampleBias array_index parameter must be correct type\n* test textureSampleBias bias parameter must be correct type\n* test textureSampleBias bias parameter must be between -16.0 and 15.99 inclusive if it's a constant\n* test textureSampleBias offset parameter must be correct type\n* test textureSampleBias offset parameter must be a const-expression\n* test textureSampleBias offset parameter must be between -8 and +7 inclusive\n* test textureSampleBias returns the correct type\n* test textureSampleBias doesn't work with texture types it's not supposed to\n\nnote: uniformity validation is covered in src/webgpu/shader/validation/uniformity/uniformity.spec.ts\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport {\n  Type,\n  kAllScalarsAndVectors,\n  isConvertible,\n  ScalarType,\n  VectorType,\n  isUnsignedType,\n  scalarTypeOf,\n  isFloatType,\n} from '../../../../../util/conversion.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\nimport {\n  kEntryPointsToValidateFragmentOnlyBuiltins,\n  kTestTextureTypes,\n} from './shader_builtin_utils.js';\n\ntype TextureSampleBiasArguments = {\n  coordsArgType: ScalarType | VectorType;\n  hasArrayIndexArg?: boolean;\n  offsetArgType?: VectorType;\n};\n\nconst kValidTextureSampleBiasParameterTypes: { [n: string]: TextureSampleBiasArguments } = {\n  'texture_2d<f32>': { coordsArgType: Type.vec2f, offsetArgType: Type.vec2i },\n  'texture_2d_array<f32>': {\n    coordsArgType: Type.vec2f,\n    hasArrayIndexArg: true,\n    offsetArgType: Type.vec2i,\n  },\n  'texture_3d<f32>': { coordsArgType: Type.vec3f, offsetArgType: Type.vec3i },\n  'texture_cube<f32>': { coordsArgType: Type.vec3f },\n  'texture_cube_array<f32>': { coordsArgType: Type.vec3f, hasArrayIndexArg: true },\n} as const;\n\nconst kTextureTypes = keysOf(kValidTextureSampleBiasParameterTypes);\nconst kValuesTypes = objectsToRecord(kAllScalarsAndVectors);\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\ng.test('return_type')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesamplebias')\n  .desc(\n    `\nValidates the return type of ${builtin} is the expected type.\n`\n  )\n  .params(u =>\n    u\n      .combine('returnType', keysOf(kValuesTypes))\n      .combine('textureType', keysOf(kValidTextureSampleBiasParameterTypes))\n      .beginSubcases()\n      .expand('offset', t =>\n        kValidTextureSampleBiasParameterTypes[t.textureType].offsetArgType ? [false, true] : [false]\n      )\n  )\n  .fn(t => {\n    const { returnType, textureType, offset } = t.params;\n    const returnVarType = kValuesTypes[returnType];\n    const { offsetArgType, coordsArgType, hasArrayIndexArg } =\n      kValidTextureSampleBiasParameterTypes[textureType];\n\n    const varWGSL = returnVarType.toString();\n    const coordWGSL = coordsArgType.create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const offsetWGSL = offset ? `, ${offsetArgType?.create(0).wgsl()}` : '';\n\n    const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v: ${varWGSL} = textureSampleBias(t, s, ${coordWGSL}${arrayWGSL}, 0${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess = isConvertible(Type.vec4f, returnVarType);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('coords_argument')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesamplebias')\n  .desc(\n    `\nValidates that only incorrect coords arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', keysOf(kValidTextureSampleBiasParameterTypes))\n      .combine('coordType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .combine('value', [-1, 0, 1] as const)\n      // filter out unsigned types with negative values\n      .filter(t => !isUnsignedType(kValuesTypes[t.coordType]) || t.value >= 0)\n      .expand('offset', t =>\n        kValidTextureSampleBiasParameterTypes[t.textureType].offsetArgType ? [false, true] : [false]\n      )\n  )\n  .fn(t => {\n    const { textureType, coordType, offset, value } = t.params;\n    const coordArgType = kValuesTypes[coordType];\n    const {\n      offsetArgType,\n      coordsArgType: coordsRequiredType,\n      hasArrayIndexArg,\n    } = kValidTextureSampleBiasParameterTypes[textureType];\n\n    const coordWGSL = coordArgType.create(value).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const offsetWGSL = offset ? `, ${offsetArgType?.create(0).wgsl()}` : '';\n\n    const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureSampleBias(t, s, ${coordWGSL}${arrayWGSL}, 0${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess = isConvertible(coordArgType, coordsRequiredType);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('array_index_argument')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesamplebias')\n  .desc(\n    `\nValidates that only incorrect array_index arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kTextureTypes)\n      // filter out types with no array_index\n      .filter(t => !!kValidTextureSampleBiasParameterTypes[t.textureType].hasArrayIndexArg)\n      .combine('arrayIndexType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .combine('value', [-9, -8, 0, 7, 8])\n      // filter out unsigned types with negative values\n      .filter(t => !isUnsignedType(kValuesTypes[t.arrayIndexType]) || t.value >= 0)\n      .expand('offset', t =>\n        kValidTextureSampleBiasParameterTypes[t.textureType].offsetArgType ? [false, true] : [false]\n      )\n  )\n  .fn(t => {\n    const { textureType, arrayIndexType, value, offset } = t.params;\n    const arrayIndexArgType = kValuesTypes[arrayIndexType];\n    const args = [arrayIndexArgType.create(value)];\n    const { coordsArgType, offsetArgType } = kValidTextureSampleBiasParameterTypes[textureType];\n\n    const coordWGSL = coordsArgType.create(0).wgsl();\n    const arrayWGSL = args.map(arg => arg.wgsl()).join(', ');\n    const offsetWGSL = offset ? `, ${offsetArgType!.create(0).wgsl()}` : '';\n\n    const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureSampleBias(t, s, ${coordWGSL}, ${arrayWGSL}, 0${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess =\n      isConvertible(arrayIndexArgType, Type.i32) || isConvertible(arrayIndexArgType, Type.u32);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('bias_argument')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesamplebias')\n  .desc(\n    `\nValidates that only incorrect bias arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kTextureTypes)\n      // filter out types with no offset\n      .filter(t => !!kValidTextureSampleBiasParameterTypes[t.textureType].offsetArgType)\n      .combine('biasType', keysOf(kValuesTypes))\n      .beginSubcases()\n      // The spec mentions limits of > -16 and < 15.99 so pass some values around there\n      // No error is mentioned for out of range values so make sure no error is generated.\n      .combine('value', [-17, -16, -8, 0, 7, 15.99, 16])\n      // filter out unsigned types with negative values\n      .filter(t => !isUnsignedType(kValuesTypes[t.biasType]) || t.value >= 0)\n      // filter out non-integer values passed to integer types.\n      .filter(t => Number.isInteger(t.value) || isFloatType(scalarTypeOf(kValuesTypes[t.biasType])))\n      .expand('offset', t =>\n        kValidTextureSampleBiasParameterTypes[t.textureType].offsetArgType ? [false, true] : [false]\n      )\n  )\n  .fn(t => {\n    const { textureType, biasType, value, offset } = t.params;\n    const biasArgType = kValuesTypes[biasType];\n    const args = [biasArgType.create(value)];\n    const { coordsArgType, hasArrayIndexArg, offsetArgType } =\n      kValidTextureSampleBiasParameterTypes[textureType];\n\n    const coordWGSL = coordsArgType.create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const biasWGSL = args.map(arg => arg.wgsl()).join(', ');\n    const offsetWGSL = offset ? `, ${offsetArgType!.create(0).wgsl()}` : '';\n\n    const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureSampleBias(t, s, ${coordWGSL}${arrayWGSL}, ${biasWGSL}${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess = isConvertible(biasArgType, Type.f32);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('offset_argument')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesamplebias')\n  .desc(\n    `\nValidates that only incorrect offset arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kTextureTypes)\n      // filter out types with no offset\n      .filter(t => !!kValidTextureSampleBiasParameterTypes[t.textureType].offsetArgType)\n      .combine('offsetType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .combine('value', [-9, -8, 0, 7, 8])\n      // filter out unsigned types with negative values\n      .filter(t => !isUnsignedType(kValuesTypes[t.offsetType]) || t.value >= 0)\n  )\n  .fn(t => {\n    const { textureType, offsetType, value } = t.params;\n    const offsetArgType = kValuesTypes[offsetType];\n    const args = [offsetArgType.create(value)];\n    const {\n      coordsArgType,\n      hasArrayIndexArg,\n      offsetArgType: offsetRequiredType,\n    } = kValidTextureSampleBiasParameterTypes[textureType];\n\n    const coordWGSL = coordsArgType.create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const offsetWGSL = args.map(arg => arg.wgsl()).join(', ');\n\n    const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureSampleBias(t, s, ${coordWGSL}${arrayWGSL}, 0, ${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess =\n      isConvertible(offsetArgType, offsetRequiredType!) && value >= -8 && value <= 7;\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('offset_argument,non_const')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesamplebias')\n  .desc(\n    `\nValidates that only non-const offset arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kTextureTypes)\n      .combine('varType', ['c', 'u', 'l'])\n      // filter out types with no offset\n      .filter(t => !!kValidTextureSampleBiasParameterTypes[t.textureType].offsetArgType)\n  )\n  .fn(t => {\n    const { textureType, varType } = t.params;\n    const { coordsArgType, hasArrayIndexArg, offsetArgType } =\n      kValidTextureSampleBiasParameterTypes[textureType];\n\n    const coordWGSL = coordsArgType.create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const offsetWGSL = `${offsetArgType}(${varType})`;\n\n    const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType};\n@group(0) @binding(2) var<uniform> u: ${offsetArgType};\n@fragment fn fs() -> @location(0) vec4f {\n  const c = 1;\n  let l = ${offsetArgType!.create(0).wgsl()};\n  let v = textureSampleBias(t, s, ${coordWGSL}${arrayWGSL}, 0, ${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess = varType === 'c';\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('only_in_fragment')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesample')\n  .desc(\n    `\nValidates that ${builtin} must not be used in a compute or vertex shader.\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kTextureTypes)\n      .combine('entryPoint', keysOf(kEntryPointsToValidateFragmentOnlyBuiltins))\n      .expand('offset', t =>\n        kValidTextureSampleBiasParameterTypes[t.textureType].offsetArgType ? [false, true] : [false]\n      )\n  )\n  .fn(t => {\n    const { textureType, entryPoint, offset } = t.params;\n    const { coordsArgType, hasArrayIndexArg, offsetArgType } =\n      kValidTextureSampleBiasParameterTypes[textureType];\n\n    const coordWGSL = coordsArgType.create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const offsetWGSL = offset ? `, ${offsetArgType?.create(0).wgsl()}` : '';\n\n    const config = kEntryPointsToValidateFragmentOnlyBuiltins[entryPoint];\n    const code = `\n${config.code}\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType};\n\nfn foo() {\n  _ = textureSampleBias(t, s, ${coordWGSL}${arrayWGSL}, 0${offsetWGSL});\n}`;\n    t.expectCompileResult(config.expectSuccess, code);\n  });\n\ng.test('texture_type')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesamplebias')\n  .desc(\n    `\nValidates that incompatible texture types don't work with ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('testTextureType', kTestTextureTypes)\n      .combine('textureType', keysOf(kValidTextureSampleBiasParameterTypes))\n      .beginSubcases()\n      .expand('offset', t =>\n        kValidTextureSampleBiasParameterTypes[t.textureType].offsetArgType ? [false, true] : [false]\n      )\n  )\n  .fn(t => {\n    const { testTextureType, textureType, offset } = t.params;\n    const { coordsArgType, offsetArgType, hasArrayIndexArg } =\n      kValidTextureSampleBiasParameterTypes[textureType];\n\n    const coordWGSL = coordsArgType.create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const offsetWGSL = offset ? `, ${offsetArgType?.create(0).wgsl()}` : '';\n\n    const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${testTextureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureSampleBias(t, s, ${coordWGSL}${arrayWGSL}, 0${offsetWGSL});\n  return vec4f(0);\n}\n`;\n\n    const types = kValidTextureSampleBiasParameterTypes[testTextureType];\n    const typesMatch = types\n      ? types.coordsArgType === coordsArgType &&\n        types.hasArrayIndexArg === hasArrayIndexArg &&\n        (offset ? types.offsetArgType === offsetArgType : true)\n      : false;\n\n    const expectSuccess = testTextureType === textureType || typesMatch;\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('must_use')\n  .desc('Tests that the result must be used')\n  .params(u => u.combine('use', [true, false] as const))\n  .fn(t => {\n    const code = `\n    @group(0) @binding(0) var t : texture_2d<f32>;\n    @group(0) @binding(1) var s : sampler;\n    fn foo() {\n      ${t.params.use ? '_ =' : ''} textureSampleBias(t, s, vec2(0,0), 0);\n    }`;\n    t.expectCompileResult(t.params.use, code);\n  });\n"],"mappings":"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"}