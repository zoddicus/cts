{"version":3,"file":"textureSampleGrad.spec.js","names":["builtin","description","makeTestGroup","keysOf","objectsToRecord","Type","kAllScalarsAndVectors","isConvertible","isUnsignedType","ShaderValidationTest","kValidTextureSampleGradParameterTypes","coordsArgType","vec2f","offsetArgType","vec2i","hasArrayIndexArg","vec3f","vec3i","kTextureTypes","kValuesTypes","g","test","specURL","desc","params","u","combine","beginSubcases","filter","t","coordType","value","expand","textureType","fn","offset","coordArgType","coordsRequiredType","coordWGSL","create","wgsl","arrayWGSL","ddWGSL","offsetWGSL","code","expectSuccess","expectCompileResult","arrayIndexType","arrayIndexArgType","args","map","arg","join","i32","u32","ddxType","ddxArgType","ddxRequiredType","ddXWGSL","ddYWGSL","ddyType","ddyArgType","ddyRequiredType","offsetType","offsetRequiredType","varType"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/textureSampleGrad.spec.ts"],"sourcesContent":["const builtin = 'textureSampleGrad';\nexport const description = `\nValidation tests for the ${builtin}() builtin.\n\n* test textureSampleGrad coords parameter must be correct type\n* test textureSampleGrad array_index parameter must be correct type\n* test textureSampleGrad ddX parameter must be correct type\n* test textureSampleGrad ddY parameter must be correct type\n* test textureSampleGrad coords parameter must be correct type\n* test textureSampleGrad offset parameter must be correct type\n* test textureSampleGrad offset parameter must be a const-expression\n* test textureSampleGrad offset parameter must be between -8 and +7 inclusive\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport {\n  Type,\n  kAllScalarsAndVectors,\n  isConvertible,\n  ScalarType,\n  VectorType,\n  isUnsignedType,\n} from '../../../../../util/conversion.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\n// Note: ddX and ddy parameter types match coords so we'll use coordsArgType for ddX and ddY.\ntype TextureSampleGradArguments = {\n  coordsArgType: ScalarType | VectorType;\n  hasArrayIndexArg?: boolean;\n  offsetArgType?: VectorType;\n};\n\nconst kValidTextureSampleGradParameterTypes: { [n: string]: TextureSampleGradArguments } = {\n  'texture_2d<f32>': {\n    coordsArgType: Type.vec2f,\n    offsetArgType: Type.vec2i,\n  },\n  'texture_2d_array<f32>': {\n    coordsArgType: Type.vec2f,\n    hasArrayIndexArg: true,\n    offsetArgType: Type.vec2i,\n  },\n  'texture_3d<f32>': { coordsArgType: Type.vec3f, offsetArgType: Type.vec3i },\n  'texture_cube<f32>': { coordsArgType: Type.vec3f },\n  'texture_cube_array<f32>': { coordsArgType: Type.vec3f, hasArrayIndexArg: true },\n} as const;\n\nconst kTextureTypes = keysOf(kValidTextureSampleGradParameterTypes);\nconst kValuesTypes = objectsToRecord(kAllScalarsAndVectors);\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\ng.test('coords_argument')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesamplegrad')\n  .desc(\n    `\nValidates that only incorrect coords arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', keysOf(kValidTextureSampleGradParameterTypes))\n      .combine('coordType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .combine('value', [-1, 0, 1] as const)\n      // filter out unsigned types with negative values\n      .filter(t => !isUnsignedType(kValuesTypes[t.coordType]) || t.value >= 0)\n      .expand('offset', t =>\n        kValidTextureSampleGradParameterTypes[t.textureType].offsetArgType ? [false, true] : [false]\n      )\n  )\n  .fn(t => {\n    const { textureType, coordType, offset, value } = t.params;\n    const coordArgType = kValuesTypes[coordType];\n    const {\n      offsetArgType,\n      coordsArgType: coordsRequiredType,\n      hasArrayIndexArg,\n    } = kValidTextureSampleGradParameterTypes[textureType];\n\n    const coordWGSL = coordArgType.create(value).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const ddWGSL = coordsRequiredType.create(0).wgsl();\n    const offsetWGSL = offset ? `, ${offsetArgType?.create(0).wgsl()}` : '';\n\n    const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureSampleGrad(t, s, ${coordWGSL}${arrayWGSL}, ${ddWGSL}, ${ddWGSL}${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess = isConvertible(coordArgType, coordsRequiredType);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('array_index_argument')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesamplegrad')\n  .desc(\n    `\nValidates that only incorrect array_index arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kTextureTypes)\n      // filter out types with no array_index\n      .filter(t => !!kValidTextureSampleGradParameterTypes[t.textureType].hasArrayIndexArg)\n      .combine('arrayIndexType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .combine('value', [-9, -8, 0, 7, 8])\n      // filter out unsigned types with negative values\n      .filter(t => !isUnsignedType(kValuesTypes[t.arrayIndexType]) || t.value >= 0)\n      .expand('offset', t =>\n        kValidTextureSampleGradParameterTypes[t.textureType].offsetArgType ? [false, true] : [false]\n      )\n  )\n  .fn(t => {\n    const { textureType, arrayIndexType, value, offset } = t.params;\n    const arrayIndexArgType = kValuesTypes[arrayIndexType];\n    const args = [arrayIndexArgType.create(value)];\n    const { coordsArgType, offsetArgType } = kValidTextureSampleGradParameterTypes[textureType];\n\n    const coordWGSL = coordsArgType.create(0).wgsl();\n    const arrayWGSL = args.map(arg => arg.wgsl()).join(', ');\n    const ddWGSL = coordsArgType.create(0).wgsl();\n    const offsetWGSL = offset ? `, ${offsetArgType!.create(0).wgsl()}` : '';\n\n    const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureSampleGrad(t, s, ${coordWGSL}, ${arrayWGSL}, ${ddWGSL}, ${ddWGSL}${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess =\n      isConvertible(arrayIndexArgType, Type.i32) || isConvertible(arrayIndexArgType, Type.u32);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('ddX_argument')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesamplegrad')\n  .desc(\n    `\nValidates that only incorrect ddX arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kTextureTypes)\n      .combine('ddxType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .combine('value', [-1, 0, 1])\n      // filter out unsigned types with negative values\n      .filter(t => !isUnsignedType(kValuesTypes[t.ddxType]) || t.value >= 0)\n      .expand('offset', t =>\n        kValidTextureSampleGradParameterTypes[t.textureType].offsetArgType ? [false, true] : [false]\n      )\n  )\n  .fn(t => {\n    const { textureType, ddxType, value, offset } = t.params;\n    const ddxArgType = kValuesTypes[ddxType];\n    const args = [ddxArgType.create(value)];\n    const { coordsArgType, hasArrayIndexArg, offsetArgType } =\n      kValidTextureSampleGradParameterTypes[textureType];\n\n    const ddxRequiredType = coordsArgType;\n    const coordWGSL = coordsArgType.create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const ddXWGSL = args.map(arg => arg.wgsl()).join(', ');\n    const ddYWGSL = coordsArgType.create(0).wgsl();\n    const offsetWGSL = offset ? `, ${offsetArgType?.create(0).wgsl()}` : '';\n\n    const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureSampleGrad(t, s, ${coordWGSL}${arrayWGSL}, ${ddXWGSL}, ${ddYWGSL}${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess = isConvertible(ddxArgType, ddxRequiredType);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('ddY_argument')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesamplegrad')\n  .desc(\n    `\nValidates that only incorrect ddY arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kTextureTypes)\n      .combine('ddyType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .combine('value', [-1, 0, 1])\n      // filter out unsigned types with negative values\n      .filter(t => !isUnsignedType(kValuesTypes[t.ddyType]) || t.value >= 0)\n      .expand('offset', t =>\n        kValidTextureSampleGradParameterTypes[t.textureType].offsetArgType ? [false, true] : [false]\n      )\n  )\n  .fn(t => {\n    const { textureType, ddyType, value, offset } = t.params;\n    const ddyArgType = kValuesTypes[ddyType];\n    const args = [ddyArgType.create(value)];\n    const { coordsArgType, hasArrayIndexArg, offsetArgType } =\n      kValidTextureSampleGradParameterTypes[textureType];\n\n    const ddyRequiredType = coordsArgType;\n    const coordWGSL = coordsArgType.create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const ddXWGSL = coordsArgType.create(0).wgsl();\n    const ddYWGSL = args.map(arg => arg.wgsl()).join(', ');\n    const offsetWGSL = offset ? `, ${offsetArgType?.create(0).wgsl()}` : '';\n\n    const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureSampleGrad(t, s, ${coordWGSL}${arrayWGSL}, ${ddXWGSL}, ${ddYWGSL}${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess = isConvertible(ddyArgType, ddyRequiredType);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('offset_argument')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesamplegrad')\n  .desc(\n    `\nValidates that only incorrect offset arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kTextureTypes)\n      // filter out types with no offset\n      .filter(t => !!kValidTextureSampleGradParameterTypes[t.textureType].offsetArgType)\n      .combine('offsetType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .combine('value', [-9, -8, 0, 7, 8])\n      // filter out unsigned types with negative values\n      .filter(t => !isUnsignedType(kValuesTypes[t.offsetType]) || t.value >= 0)\n  )\n  .fn(t => {\n    const { textureType, offsetType, value } = t.params;\n    const offsetArgType = kValuesTypes[offsetType];\n    const args = [offsetArgType.create(value)];\n    const {\n      coordsArgType,\n      hasArrayIndexArg,\n      offsetArgType: offsetRequiredType,\n    } = kValidTextureSampleGradParameterTypes[textureType];\n\n    const coordWGSL = coordsArgType.create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const ddWGSL = coordsArgType.create(0).wgsl();\n    const offsetWGSL = args.map(arg => arg.wgsl()).join(', ');\n\n    const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureSampleGrad(t, s, ${coordWGSL}${arrayWGSL}, ${ddWGSL}, ${ddWGSL}, ${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess =\n      isConvertible(offsetArgType, offsetRequiredType!) && value >= -8 && value <= 7;\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('offset_argument,non_const')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesamplegrad')\n  .desc(\n    `\nValidates that only non-const offset arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kTextureTypes)\n      .combine('varType', ['c', 'u', 'l'])\n      // filter out types with no offset\n      .filter(t => !!kValidTextureSampleGradParameterTypes[t.textureType].offsetArgType)\n  )\n  .fn(t => {\n    const { textureType, varType } = t.params;\n    const { coordsArgType, hasArrayIndexArg, offsetArgType } =\n      kValidTextureSampleGradParameterTypes[textureType];\n\n    const coordWGSL = coordsArgType.create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const ddWGSL = coordsArgType.create(0).wgsl();\n    const offsetWGSL = `${offsetArgType}(${varType})`;\n\n    const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType};\n@group(0) @binding(2) var<uniform> u: ${offsetArgType};\n@fragment fn fs() -> @location(0) vec4f {\n  const c = 1;\n  let l = ${offsetArgType!.create(0).wgsl()};\n  let v = textureSampleGrad(t, s, ${coordWGSL}${arrayWGSL}, ${ddWGSL}, ${ddWGSL}, ${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess = varType === 'c';\n    t.expectCompileResult(expectSuccess, code);\n  });\n"],"mappings":";;GAAA,MAAMA,OAAO,GAAG,mBAAmB,CACnC,OAAO,MAAMC,WAAW,GAAI;AAC5B,2BAA2BD,OAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,SAASE,aAAa,QAAQ,kDAAkD;AAChF,SAASC,MAAM,EAAEC,eAAe,QAAQ,8CAA8C;AACtF;EACEC,IAAI;EACJC,qBAAqB;EACrBC,aAAa;;;EAGbC,cAAc;AACT,mCAAmC;AAC1C,SAASC,oBAAoB,QAAQ,oCAAoC;;AAEzE;;;;;;;AAOA,MAAMC,qCAAkF,GAAG;EACzF,iBAAiB,EAAE;IACjBC,aAAa,EAAEN,IAAI,CAACO,KAAK;IACzBC,aAAa,EAAER,IAAI,CAACS;EACtB,CAAC;EACD,uBAAuB,EAAE;IACvBH,aAAa,EAAEN,IAAI,CAACO,KAAK;IACzBG,gBAAgB,EAAE,IAAI;IACtBF,aAAa,EAAER,IAAI,CAACS;EACtB,CAAC;EACD,iBAAiB,EAAE,EAAEH,aAAa,EAAEN,IAAI,CAACW,KAAK,EAAEH,aAAa,EAAER,IAAI,CAACY,KAAK,CAAC,CAAC;EAC3E,mBAAmB,EAAE,EAAEN,aAAa,EAAEN,IAAI,CAACW,KAAK,CAAC,CAAC;EAClD,yBAAyB,EAAE,EAAEL,aAAa,EAAEN,IAAI,CAACW,KAAK,EAAED,gBAAgB,EAAE,IAAI,CAAC;AACjF,CAAU;;AAEV,MAAMG,aAAa,GAAGf,MAAM,CAACO,qCAAqC,CAAC;AACnE,MAAMS,YAAY,GAAGf,eAAe,CAACE,qBAAqB,CAAC;;AAE3D,OAAO,MAAMc,CAAC,GAAGlB,aAAa,CAACO,oBAAoB,CAAC;;AAEpDW,CAAC,CAACC,IAAI,CAAC,iBAAiB,CAAC;AACtBC,OAAO,CAAC,yDAAyD,CAAC;AAClEC,IAAI;EACF;AACL,iEAAiEvB,OAAQ;AACzE;AACE,CAAC;AACAwB,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,aAAa,EAAEvB,MAAM,CAACO,qCAAqC,CAAC,CAAC;AACrEgB,OAAO,CAAC,WAAW,EAAEvB,MAAM,CAACgB,YAAY,CAAC,CAAC;AAC1CQ,aAAa,CAAC,CAAC;AACfD,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAU;AACrC;AAAA,CACCE,MAAM,CAAC,CAAAC,CAAC,KAAI,CAACrB,cAAc,CAACW,YAAY,CAACU,CAAC,CAACC,SAAS,CAAC,CAAC,IAAID,CAAC,CAACE,KAAK,IAAI,CAAC,CAAC;AACvEC,MAAM,CAAC,QAAQ,EAAE,CAAAH,CAAC;AACjBnB,qCAAqC,CAACmB,CAAC,CAACI,WAAW,CAAC,CAACpB,aAAa,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK;AAC7F;AACJ,CAAC;AACAqB,EAAE,CAAC,CAAAL,CAAC,KAAI;EACP,MAAM,EAAEI,WAAW,EAAEH,SAAS,EAAEK,MAAM,EAAEJ,KAAK,CAAC,CAAC,GAAGF,CAAC,CAACL,MAAM;EAC1D,MAAMY,YAAY,GAAGjB,YAAY,CAACW,SAAS,CAAC;EAC5C,MAAM;IACJjB,aAAa;IACbF,aAAa,EAAE0B,kBAAkB;IACjCtB;EACF,CAAC,GAAGL,qCAAqC,CAACuB,WAAW,CAAC;;EAEtD,MAAMK,SAAS,GAAGF,YAAY,CAACG,MAAM,CAACR,KAAK,CAAC,CAACS,IAAI,CAAC,CAAC;EACnD,MAAMC,SAAS,GAAG1B,gBAAgB,GAAG,KAAK,GAAG,EAAE;EAC/C,MAAM2B,MAAM,GAAGL,kBAAkB,CAACE,MAAM,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;EAClD,MAAMG,UAAU,GAAGR,MAAM,GAAI,KAAItB,aAAa,EAAE0B,MAAM,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAE,EAAC,GAAG,EAAE;;EAEvE,MAAMI,IAAI,GAAI;AAClB;AACA,+BAA+BX,WAAY;AAC3C;AACA,oCAAoCK,SAAU,GAAEG,SAAU,KAAIC,MAAO,KAAIA,MAAO,GAAEC,UAAW;AAC7F;AACA;AACA,CAAC;EACG,MAAME,aAAa,GAAGtC,aAAa,CAAC6B,YAAY,EAAEC,kBAAkB,CAAC;EACrER,CAAC,CAACiB,mBAAmB,CAACD,aAAa,EAAED,IAAI,CAAC;AAC5C,CAAC,CAAC;;AAEJxB,CAAC,CAACC,IAAI,CAAC,sBAAsB,CAAC;AAC3BC,OAAO,CAAC,yDAAyD,CAAC;AAClEC,IAAI;EACF;AACL,sEAAsEvB,OAAQ;AAC9E;AACE,CAAC;AACAwB,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,aAAa,EAAER,aAAa;AACrC;AAAA,CACCU,MAAM,CAAC,CAAAC,CAAC,KAAI,CAAC,CAACnB,qCAAqC,CAACmB,CAAC,CAACI,WAAW,CAAC,CAAClB,gBAAgB,CAAC;AACpFW,OAAO,CAAC,gBAAgB,EAAEvB,MAAM,CAACgB,YAAY,CAAC,CAAC;AAC/CQ,aAAa,CAAC,CAAC;AACfD,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AACnC;AAAA,CACCE,MAAM,CAAC,CAAAC,CAAC,KAAI,CAACrB,cAAc,CAACW,YAAY,CAACU,CAAC,CAACkB,cAAc,CAAC,CAAC,IAAIlB,CAAC,CAACE,KAAK,IAAI,CAAC,CAAC;AAC5EC,MAAM,CAAC,QAAQ,EAAE,CAAAH,CAAC;AACjBnB,qCAAqC,CAACmB,CAAC,CAACI,WAAW,CAAC,CAACpB,aAAa,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK;AAC7F;AACJ,CAAC;AACAqB,EAAE,CAAC,CAAAL,CAAC,KAAI;EACP,MAAM,EAAEI,WAAW,EAAEc,cAAc,EAAEhB,KAAK,EAAEI,MAAM,CAAC,CAAC,GAAGN,CAAC,CAACL,MAAM;EAC/D,MAAMwB,iBAAiB,GAAG7B,YAAY,CAAC4B,cAAc,CAAC;EACtD,MAAME,IAAI,GAAG,CAACD,iBAAiB,CAACT,MAAM,CAACR,KAAK,CAAC,CAAC;EAC9C,MAAM,EAAEpB,aAAa,EAAEE,aAAa,CAAC,CAAC,GAAGH,qCAAqC,CAACuB,WAAW,CAAC;;EAE3F,MAAMK,SAAS,GAAG3B,aAAa,CAAC4B,MAAM,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;EAChD,MAAMC,SAAS,GAAGQ,IAAI,CAACC,GAAG,CAAC,CAAAC,GAAG,KAAIA,GAAG,CAACX,IAAI,CAAC,CAAC,CAAC,CAACY,IAAI,CAAC,IAAI,CAAC;EACxD,MAAMV,MAAM,GAAG/B,aAAa,CAAC4B,MAAM,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;EAC7C,MAAMG,UAAU,GAAGR,MAAM,GAAI,KAAItB,aAAa,CAAE0B,MAAM,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAE,EAAC,GAAG,EAAE;;EAEvE,MAAMI,IAAI,GAAI;AAClB;AACA,+BAA+BX,WAAY;AAC3C;AACA,oCAAoCK,SAAU,KAAIG,SAAU,KAAIC,MAAO,KAAIA,MAAO,GAAEC,UAAW;AAC/F;AACA;AACA,CAAC;EACG,MAAME,aAAa;EACjBtC,aAAa,CAACyC,iBAAiB,EAAE3C,IAAI,CAACgD,GAAG,CAAC,IAAI9C,aAAa,CAACyC,iBAAiB,EAAE3C,IAAI,CAACiD,GAAG,CAAC;EAC1FzB,CAAC,CAACiB,mBAAmB,CAACD,aAAa,EAAED,IAAI,CAAC;AAC5C,CAAC,CAAC;;AAEJxB,CAAC,CAACC,IAAI,CAAC,cAAc,CAAC;AACnBC,OAAO,CAAC,yDAAyD,CAAC;AAClEC,IAAI;EACF;AACL,8DAA8DvB,OAAQ;AACtE;AACE,CAAC;AACAwB,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,aAAa,EAAER,aAAa,CAAC;AACrCQ,OAAO,CAAC,SAAS,EAAEvB,MAAM,CAACgB,YAAY,CAAC,CAAC;AACxCQ,aAAa,CAAC,CAAC;AACfD,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAC5B;AAAA,CACCE,MAAM,CAAC,CAAAC,CAAC,KAAI,CAACrB,cAAc,CAACW,YAAY,CAACU,CAAC,CAAC0B,OAAO,CAAC,CAAC,IAAI1B,CAAC,CAACE,KAAK,IAAI,CAAC,CAAC;AACrEC,MAAM,CAAC,QAAQ,EAAE,CAAAH,CAAC;AACjBnB,qCAAqC,CAACmB,CAAC,CAACI,WAAW,CAAC,CAACpB,aAAa,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK;AAC7F;AACJ,CAAC;AACAqB,EAAE,CAAC,CAAAL,CAAC,KAAI;EACP,MAAM,EAAEI,WAAW,EAAEsB,OAAO,EAAExB,KAAK,EAAEI,MAAM,CAAC,CAAC,GAAGN,CAAC,CAACL,MAAM;EACxD,MAAMgC,UAAU,GAAGrC,YAAY,CAACoC,OAAO,CAAC;EACxC,MAAMN,IAAI,GAAG,CAACO,UAAU,CAACjB,MAAM,CAACR,KAAK,CAAC,CAAC;EACvC,MAAM,EAAEpB,aAAa,EAAEI,gBAAgB,EAAEF,aAAa,CAAC,CAAC;EACtDH,qCAAqC,CAACuB,WAAW,CAAC;;EAEpD,MAAMwB,eAAe,GAAG9C,aAAa;EACrC,MAAM2B,SAAS,GAAG3B,aAAa,CAAC4B,MAAM,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;EAChD,MAAMC,SAAS,GAAG1B,gBAAgB,GAAG,KAAK,GAAG,EAAE;EAC/C,MAAM2C,OAAO,GAAGT,IAAI,CAACC,GAAG,CAAC,CAAAC,GAAG,KAAIA,GAAG,CAACX,IAAI,CAAC,CAAC,CAAC,CAACY,IAAI,CAAC,IAAI,CAAC;EACtD,MAAMO,OAAO,GAAGhD,aAAa,CAAC4B,MAAM,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;EAC9C,MAAMG,UAAU,GAAGR,MAAM,GAAI,KAAItB,aAAa,EAAE0B,MAAM,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAE,EAAC,GAAG,EAAE;;EAEvE,MAAMI,IAAI,GAAI;AAClB;AACA,+BAA+BX,WAAY;AAC3C;AACA,oCAAoCK,SAAU,GAAEG,SAAU,KAAIiB,OAAQ,KAAIC,OAAQ,GAAEhB,UAAW;AAC/F;AACA;AACA,CAAC;EACG,MAAME,aAAa,GAAGtC,aAAa,CAACiD,UAAU,EAAEC,eAAe,CAAC;EAChE5B,CAAC,CAACiB,mBAAmB,CAACD,aAAa,EAAED,IAAI,CAAC;AAC5C,CAAC,CAAC;;AAEJxB,CAAC,CAACC,IAAI,CAAC,cAAc,CAAC;AACnBC,OAAO,CAAC,yDAAyD,CAAC;AAClEC,IAAI;EACF;AACL,8DAA8DvB,OAAQ;AACtE;AACE,CAAC;AACAwB,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,aAAa,EAAER,aAAa,CAAC;AACrCQ,OAAO,CAAC,SAAS,EAAEvB,MAAM,CAACgB,YAAY,CAAC,CAAC;AACxCQ,aAAa,CAAC,CAAC;AACfD,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAC5B;AAAA,CACCE,MAAM,CAAC,CAAAC,CAAC,KAAI,CAACrB,cAAc,CAACW,YAAY,CAACU,CAAC,CAAC+B,OAAO,CAAC,CAAC,IAAI/B,CAAC,CAACE,KAAK,IAAI,CAAC,CAAC;AACrEC,MAAM,CAAC,QAAQ,EAAE,CAAAH,CAAC;AACjBnB,qCAAqC,CAACmB,CAAC,CAACI,WAAW,CAAC,CAACpB,aAAa,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK;AAC7F;AACJ,CAAC;AACAqB,EAAE,CAAC,CAAAL,CAAC,KAAI;EACP,MAAM,EAAEI,WAAW,EAAE2B,OAAO,EAAE7B,KAAK,EAAEI,MAAM,CAAC,CAAC,GAAGN,CAAC,CAACL,MAAM;EACxD,MAAMqC,UAAU,GAAG1C,YAAY,CAACyC,OAAO,CAAC;EACxC,MAAMX,IAAI,GAAG,CAACY,UAAU,CAACtB,MAAM,CAACR,KAAK,CAAC,CAAC;EACvC,MAAM,EAAEpB,aAAa,EAAEI,gBAAgB,EAAEF,aAAa,CAAC,CAAC;EACtDH,qCAAqC,CAACuB,WAAW,CAAC;;EAEpD,MAAM6B,eAAe,GAAGnD,aAAa;EACrC,MAAM2B,SAAS,GAAG3B,aAAa,CAAC4B,MAAM,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;EAChD,MAAMC,SAAS,GAAG1B,gBAAgB,GAAG,KAAK,GAAG,EAAE;EAC/C,MAAM2C,OAAO,GAAG/C,aAAa,CAAC4B,MAAM,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;EAC9C,MAAMmB,OAAO,GAAGV,IAAI,CAACC,GAAG,CAAC,CAAAC,GAAG,KAAIA,GAAG,CAACX,IAAI,CAAC,CAAC,CAAC,CAACY,IAAI,CAAC,IAAI,CAAC;EACtD,MAAMT,UAAU,GAAGR,MAAM,GAAI,KAAItB,aAAa,EAAE0B,MAAM,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAE,EAAC,GAAG,EAAE;;EAEvE,MAAMI,IAAI,GAAI;AAClB;AACA,+BAA+BX,WAAY;AAC3C;AACA,oCAAoCK,SAAU,GAAEG,SAAU,KAAIiB,OAAQ,KAAIC,OAAQ,GAAEhB,UAAW;AAC/F;AACA;AACA,CAAC;EACG,MAAME,aAAa,GAAGtC,aAAa,CAACsD,UAAU,EAAEC,eAAe,CAAC;EAChEjC,CAAC,CAACiB,mBAAmB,CAACD,aAAa,EAAED,IAAI,CAAC;AAC5C,CAAC,CAAC;;AAEJxB,CAAC,CAACC,IAAI,CAAC,iBAAiB,CAAC;AACtBC,OAAO,CAAC,yDAAyD,CAAC;AAClEC,IAAI;EACF;AACL,iEAAiEvB,OAAQ;AACzE;AACE,CAAC;AACAwB,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,aAAa,EAAER,aAAa;AACrC;AAAA,CACCU,MAAM,CAAC,CAAAC,CAAC,KAAI,CAAC,CAACnB,qCAAqC,CAACmB,CAAC,CAACI,WAAW,CAAC,CAACpB,aAAa,CAAC;AACjFa,OAAO,CAAC,YAAY,EAAEvB,MAAM,CAACgB,YAAY,CAAC,CAAC;AAC3CQ,aAAa,CAAC,CAAC;AACfD,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AACnC;AAAA,CACCE,MAAM,CAAC,CAAAC,CAAC,KAAI,CAACrB,cAAc,CAACW,YAAY,CAACU,CAAC,CAACkC,UAAU,CAAC,CAAC,IAAIlC,CAAC,CAACE,KAAK,IAAI,CAAC;AAC5E,CAAC;AACAG,EAAE,CAAC,CAAAL,CAAC,KAAI;EACP,MAAM,EAAEI,WAAW,EAAE8B,UAAU,EAAEhC,KAAK,CAAC,CAAC,GAAGF,CAAC,CAACL,MAAM;EACnD,MAAMX,aAAa,GAAGM,YAAY,CAAC4C,UAAU,CAAC;EAC9C,MAAMd,IAAI,GAAG,CAACpC,aAAa,CAAC0B,MAAM,CAACR,KAAK,CAAC,CAAC;EAC1C,MAAM;IACJpB,aAAa;IACbI,gBAAgB;IAChBF,aAAa,EAAEmD;EACjB,CAAC,GAAGtD,qCAAqC,CAACuB,WAAW,CAAC;;EAEtD,MAAMK,SAAS,GAAG3B,aAAa,CAAC4B,MAAM,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;EAChD,MAAMC,SAAS,GAAG1B,gBAAgB,GAAG,KAAK,GAAG,EAAE;EAC/C,MAAM2B,MAAM,GAAG/B,aAAa,CAAC4B,MAAM,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;EAC7C,MAAMG,UAAU,GAAGM,IAAI,CAACC,GAAG,CAAC,CAAAC,GAAG,KAAIA,GAAG,CAACX,IAAI,CAAC,CAAC,CAAC,CAACY,IAAI,CAAC,IAAI,CAAC;;EAEzD,MAAMR,IAAI,GAAI;AAClB;AACA,+BAA+BX,WAAY;AAC3C;AACA,oCAAoCK,SAAU,GAAEG,SAAU,KAAIC,MAAO,KAAIA,MAAO,KAAIC,UAAW;AAC/F;AACA;AACA,CAAC;EACG,MAAME,aAAa;EACjBtC,aAAa,CAACM,aAAa,EAAEmD,kBAAmB,CAAC,IAAIjC,KAAK,IAAI,CAAC,CAAC,IAAIA,KAAK,IAAI,CAAC;EAChFF,CAAC,CAACiB,mBAAmB,CAACD,aAAa,EAAED,IAAI,CAAC;AAC5C,CAAC,CAAC;;AAEJxB,CAAC,CAACC,IAAI,CAAC,2BAA2B,CAAC;AAChCC,OAAO,CAAC,yDAAyD,CAAC;AAClEC,IAAI;EACF;AACL,iEAAiEvB,OAAQ;AACzE;AACE,CAAC;AACAwB,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,aAAa,EAAER,aAAa,CAAC;AACrCQ,OAAO,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;AACnC;AAAA,CACCE,MAAM,CAAC,CAAAC,CAAC,KAAI,CAAC,CAACnB,qCAAqC,CAACmB,CAAC,CAACI,WAAW,CAAC,CAACpB,aAAa;AACrF,CAAC;AACAqB,EAAE,CAAC,CAAAL,CAAC,KAAI;EACP,MAAM,EAAEI,WAAW,EAAEgC,OAAO,CAAC,CAAC,GAAGpC,CAAC,CAACL,MAAM;EACzC,MAAM,EAAEb,aAAa,EAAEI,gBAAgB,EAAEF,aAAa,CAAC,CAAC;EACtDH,qCAAqC,CAACuB,WAAW,CAAC;;EAEpD,MAAMK,SAAS,GAAG3B,aAAa,CAAC4B,MAAM,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;EAChD,MAAMC,SAAS,GAAG1B,gBAAgB,GAAG,KAAK,GAAG,EAAE;EAC/C,MAAM2B,MAAM,GAAG/B,aAAa,CAAC4B,MAAM,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;EAC7C,MAAMG,UAAU,GAAI,GAAE9B,aAAc,IAAGoD,OAAQ,GAAE;;EAEjD,MAAMrB,IAAI,GAAI;AAClB;AACA,+BAA+BX,WAAY;AAC3C,wCAAwCpB,aAAc;AACtD;AACA;AACA,YAAYA,aAAa,CAAE0B,MAAM,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAE;AAC5C,oCAAoCF,SAAU,GAAEG,SAAU,KAAIC,MAAO,KAAIA,MAAO,KAAIC,UAAW;AAC/F;AACA;AACA,CAAC;EACG,MAAME,aAAa,GAAGoB,OAAO,KAAK,GAAG;EACrCpC,CAAC,CAACiB,mBAAmB,CAACD,aAAa,EAAED,IAAI,CAAC;AAC5C,CAAC,CAAC"}