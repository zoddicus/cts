{"version":3,"file":"textureLoad.spec.js","names":["builtin","description","makeTestGroup","keysOf","objectsToRecord","assert","kAllTextureFormats","kTextureFormatInfo","Type","kAllScalarsAndVectors","isConvertible","isUnsignedType","ShaderValidationTest","kCoords1DTypes","i32","u32","kCoords2DTypes","vec2i","vec2u","kCoords3DTypes","vec3i","vec3u","kValidTextureLoadParameterTypesForNonStorageTextures","texture_1d","usesMultipleTypes","coordsArgTypes","hasLevelArg","texture_2d","texture_2d_array","hasArrayIndexArg","texture_3d","texture_multisampled_2d","hasSampleIndexArg","texture_depth_2d","texture_depth_2d_array","texture_depth_multisampled_2d","texture_external","kValidTextureLoadParameterTypesForStorageTextures","texture_storage_1d","texture_storage_2d","texture_storage_2d_array","texture_storage_3d","kNonStorageTextureTypes","kStorageTextureTypes","kValuesTypes","kTexelType","f32","vec4f","vec4i","vec4u","kTexelTypes","g","test","specURL","desc","params","u","combine","beginSubcases","expand","t","textureType","filter","coordType","value","fn","texelType","coordArgType","texelTypeWGSL","coordWGSL","create","wgsl","arrayWGSL","levelWGSL","sampleIndexWGSL","code","expectSuccess","expectCompileResult","format","color","storage","beforeAllSubcases","skipIfLanguageFeatureNotSupported","arrayIndexType","arrayIndexArgType","args","map","arg","join","levelType","levelArgType","sampleIndexType","sampleIndexArgType"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/textureLoad.spec.ts"],"sourcesContent":["const builtin = 'textureLoad';\nexport const description = `\nValidation tests for the ${builtin}() builtin.\n\n* test textureLoad coords parameter must be correct type\n* test textureLoad array_index parameter must be correct type\n* test textureLoad level parameter must be correct type\n* test textureLoad sample_index parameter must be correct type\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport { assert } from '../../../../../../common/util/util.js';\nimport { kAllTextureFormats, kTextureFormatInfo } from '../../../../../format_info.js';\nimport {\n  Type,\n  kAllScalarsAndVectors,\n  isConvertible,\n  ScalarType,\n  VectorType,\n  isUnsignedType,\n} from '../../../../../util/conversion.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\ntype TextureLoadArguments = {\n  coordsArgTypes: readonly [ScalarType | VectorType, ScalarType | VectorType];\n  usesMultipleTypes?: boolean; // texture can use f32, i32, u32\n  hasArrayIndexArg?: boolean;\n  hasLevelArg?: boolean;\n  hasSampleIndexArg?: boolean;\n};\n\nconst kCoords1DTypes = [Type.i32, Type.u32] as const;\nconst kCoords2DTypes = [Type.vec2i, Type.vec2u] as const;\nconst kCoords3DTypes = [Type.vec3i, Type.vec3u] as const;\n\nconst kValidTextureLoadParameterTypesForNonStorageTextures: { [n: string]: TextureLoadArguments } =\n  {\n    texture_1d: { usesMultipleTypes: true, coordsArgTypes: kCoords1DTypes, hasLevelArg: true },\n    texture_2d: { usesMultipleTypes: true, coordsArgTypes: kCoords2DTypes, hasLevelArg: true },\n    texture_2d_array: {\n      usesMultipleTypes: true,\n      coordsArgTypes: kCoords2DTypes,\n      hasArrayIndexArg: true,\n      hasLevelArg: true,\n    },\n    texture_3d: { usesMultipleTypes: true, coordsArgTypes: kCoords3DTypes, hasLevelArg: true },\n    texture_multisampled_2d: {\n      usesMultipleTypes: true,\n      coordsArgTypes: kCoords2DTypes,\n      hasSampleIndexArg: true,\n    },\n    texture_depth_2d: { coordsArgTypes: kCoords2DTypes, hasLevelArg: true },\n    texture_depth_2d_array: {\n      coordsArgTypes: kCoords2DTypes,\n      hasArrayIndexArg: true,\n      hasLevelArg: true,\n    },\n    texture_depth_multisampled_2d: { coordsArgTypes: kCoords2DTypes, hasSampleIndexArg: true },\n    texture_external: { coordsArgTypes: kCoords2DTypes },\n  };\n\nconst kValidTextureLoadParameterTypesForStorageTextures: { [n: string]: TextureLoadArguments } = {\n  texture_storage_1d: { coordsArgTypes: [Type.i32, Type.u32] },\n  texture_storage_2d: { coordsArgTypes: [Type.vec2i, Type.vec2u] },\n  texture_storage_2d_array: {\n    coordsArgTypes: [Type.vec2i, Type.vec2u],\n    hasArrayIndexArg: true,\n  },\n  texture_storage_3d: { coordsArgTypes: [Type.vec3i, Type.vec3u] },\n} as const;\n\nconst kNonStorageTextureTypes = keysOf(kValidTextureLoadParameterTypesForNonStorageTextures);\nconst kStorageTextureTypes = keysOf(kValidTextureLoadParameterTypesForStorageTextures);\nconst kValuesTypes = objectsToRecord(kAllScalarsAndVectors);\n\nconst kTexelType: { [n: string]: Type } = {\n  f32: Type.vec4f,\n  i32: Type.vec4i,\n  u32: Type.vec4u,\n} as const;\n\nconst kTexelTypes = keysOf(kTexelType);\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\ng.test('coords_argument,non_storage')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#textureload')\n  .desc(\n    `\nValidates that only incorrect coords arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kNonStorageTextureTypes)\n      .combine('coordType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .expand('texelType', t =>\n        kValidTextureLoadParameterTypesForNonStorageTextures[t.textureType].usesMultipleTypes\n          ? kTexelTypes\n          : ['']\n      )\n      .combine('value', [-1, 0, 1] as const)\n      // filter out unsigned types with negative values\n      .filter(t => !isUnsignedType(kValuesTypes[t.coordType]) || t.value >= 0)\n  )\n  .fn(t => {\n    const { textureType, coordType, texelType, value } = t.params;\n    const coordArgType = kValuesTypes[coordType];\n    const { coordsArgTypes, hasArrayIndexArg, hasLevelArg, hasSampleIndexArg } =\n      kValidTextureLoadParameterTypesForNonStorageTextures[textureType];\n\n    const texelTypeWGSL = texelType ? `<${texelType}>` : '';\n    const coordWGSL = coordArgType.create(value).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const levelWGSL = hasLevelArg ? ', 0' : '';\n    const sampleIndexWGSL = hasSampleIndexArg ? ', 0' : '';\n\n    const code = `\n@group(0) @binding(0) var t: ${textureType}${texelTypeWGSL};\n@fragment fn fs() -> @location(0) vec4f {\n  _ = textureLoad(t, ${coordWGSL}${arrayWGSL}${levelWGSL}${sampleIndexWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess =\n      isConvertible(coordArgType, coordsArgTypes[0]) ||\n      isConvertible(coordArgType, coordsArgTypes[1]);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('coords_argument,storage')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#textureload')\n  .desc(\n    `\nValidates that only incorrect coords arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kStorageTextureTypes)\n      .combine('coordType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .combine('format', kAllTextureFormats)\n      // filter to only storage texture formats.\n      .filter(t => !!kTextureFormatInfo[t.format].color?.storage)\n      .combine('value', [-1, 0, 1] as const)\n      // filter out unsigned types with negative values\n      .filter(t => !isUnsignedType(kValuesTypes[t.coordType]) || t.value >= 0)\n  )\n  .beforeAllSubcases(t =>\n    t.skipIfLanguageFeatureNotSupported('readonly_and_readwrite_storage_textures')\n  )\n  .fn(t => {\n    const { textureType, coordType, format, value } = t.params;\n    const coordArgType = kValuesTypes[coordType];\n    const { coordsArgTypes, hasArrayIndexArg } =\n      kValidTextureLoadParameterTypesForStorageTextures[textureType];\n\n    const coordWGSL = coordArgType.create(value).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n\n    const code = `\n@group(0) @binding(0) var t: ${textureType}<${format}, read>;\n@fragment fn fs() -> @location(0) vec4f {\n  _ = textureLoad(t, ${coordWGSL}${arrayWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess =\n      isConvertible(coordArgType, coordsArgTypes[0]) ||\n      isConvertible(coordArgType, coordsArgTypes[1]);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('array_index_argument,non_storage')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#textureload')\n  .desc(\n    `\nValidates that only incorrect array_index arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kNonStorageTextureTypes)\n      // filter out types with no array_index\n      .filter(\n        t => !!kValidTextureLoadParameterTypesForNonStorageTextures[t.textureType].hasArrayIndexArg\n      )\n      .combine('arrayIndexType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .expand('texelType', t =>\n        kValidTextureLoadParameterTypesForNonStorageTextures[t.textureType].usesMultipleTypes\n          ? kTexelTypes\n          : ['']\n      )\n      .combine('value', [-1, 0, 1])\n      // filter out unsigned types with negative values\n      .filter(t => !isUnsignedType(kValuesTypes[t.arrayIndexType]) || t.value >= 0)\n  )\n  .fn(t => {\n    const { textureType, arrayIndexType, texelType, value } = t.params;\n    const arrayIndexArgType = kValuesTypes[arrayIndexType];\n    const args = [arrayIndexArgType.create(value)];\n    const { coordsArgTypes, hasLevelArg } =\n      kValidTextureLoadParameterTypesForNonStorageTextures[textureType];\n\n    const texelTypeWGSL = texelType ? `<${texelType}>` : '';\n    const coordWGSL = coordsArgTypes[0].create(0).wgsl();\n    const arrayWGSL = args.map(arg => arg.wgsl()).join(', ');\n    const levelWGSL = hasLevelArg ? ', 0' : '';\n\n    const code = `\n@group(0) @binding(0) var t: ${textureType}${texelTypeWGSL};\n@fragment fn fs() -> @location(0) vec4f {\n  _ = textureLoad(t, ${coordWGSL}, ${arrayWGSL}${levelWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess =\n      isConvertible(arrayIndexArgType, Type.i32) || isConvertible(arrayIndexArgType, Type.u32);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('array_index_argument,storage')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#textureload')\n  .desc(\n    `\nValidates that only incorrect array_index arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kStorageTextureTypes)\n      // filter out types with no array_index\n      .filter(\n        t => !!kValidTextureLoadParameterTypesForStorageTextures[t.textureType].hasArrayIndexArg\n      )\n      .combine('arrayIndexType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .combine('format', kAllTextureFormats)\n      // filter to only storage texture formats.\n      .filter(t => !!kTextureFormatInfo[t.format].color?.storage)\n      .combine('value', [-1, 0, 1])\n      // filter out unsigned types with negative values\n      .filter(t => !isUnsignedType(kValuesTypes[t.arrayIndexType]) || t.value >= 0)\n  )\n  .beforeAllSubcases(t =>\n    t.skipIfLanguageFeatureNotSupported('readonly_and_readwrite_storage_textures')\n  )\n  .fn(t => {\n    const { textureType, arrayIndexType, format, value } = t.params;\n    const arrayIndexArgType = kValuesTypes[arrayIndexType];\n    const args = [arrayIndexArgType.create(value)];\n    const { coordsArgTypes, hasLevelArg } =\n      kValidTextureLoadParameterTypesForStorageTextures[textureType];\n\n    const coordWGSL = coordsArgTypes[0].create(0).wgsl();\n    const arrayWGSL = args.map(arg => arg.wgsl()).join(', ');\n    const levelWGSL = hasLevelArg ? ', 0' : '';\n\n    const code = `\n@group(0) @binding(0) var t: ${textureType}<${format}, read>;\n@fragment fn fs() -> @location(0) vec4f {\n  _ = textureLoad(t, ${coordWGSL}, ${arrayWGSL}${levelWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess =\n      isConvertible(arrayIndexArgType, Type.i32) || isConvertible(arrayIndexArgType, Type.u32);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('level_argument,non_storage')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#textureload')\n  .desc(\n    `\nValidates that only incorrect level arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kNonStorageTextureTypes)\n      // filter out types with no level\n      .filter(\n        t => !!kValidTextureLoadParameterTypesForNonStorageTextures[t.textureType].hasLevelArg\n      )\n      .combine('levelType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .expand('texelType', t =>\n        kValidTextureLoadParameterTypesForNonStorageTextures[t.textureType].usesMultipleTypes\n          ? kTexelTypes\n          : ['']\n      )\n      .combine('value', [-1, 0, 1])\n      // filter out unsigned types with negative values\n      .filter(t => !isUnsignedType(kValuesTypes[t.levelType]) || t.value >= 0)\n  )\n  .fn(t => {\n    const { textureType, levelType, texelType, value } = t.params;\n    const levelArgType = kValuesTypes[levelType];\n    const { coordsArgTypes, hasArrayIndexArg } =\n      kValidTextureLoadParameterTypesForNonStorageTextures[textureType];\n\n    const texelTypeWGSL = texelType ? `<${texelType}>` : '';\n    const coordWGSL = coordsArgTypes[0].create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const levelWGSL = levelArgType.create(value).wgsl();\n\n    const code = `\n@group(0) @binding(0) var t: ${textureType}${texelTypeWGSL};\n@fragment fn fs() -> @location(0) vec4f {\n  _ = textureLoad(t, ${coordWGSL}${arrayWGSL}, ${levelWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess =\n      isConvertible(levelArgType, Type.i32) || isConvertible(levelArgType, Type.u32);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('sample_index_argument,non_storage')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#textureload')\n  .desc(\n    `\nValidates that only incorrect sample_index arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kNonStorageTextureTypes)\n      // filter out types with no sample_index\n      .filter(\n        t => !!kValidTextureLoadParameterTypesForNonStorageTextures[t.textureType].hasSampleIndexArg\n      )\n      .combine('sampleIndexType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .expand('texelType', t =>\n        kValidTextureLoadParameterTypesForNonStorageTextures[t.textureType].usesMultipleTypes\n          ? kTexelTypes\n          : ['']\n      )\n      .combine('value', [-1, 0, 1])\n      // filter out unsigned types with negative values\n      .filter(t => !isUnsignedType(kValuesTypes[t.sampleIndexType]) || t.value >= 0)\n  )\n  .fn(t => {\n    const { textureType, sampleIndexType, texelType, value } = t.params;\n    const sampleIndexArgType = kValuesTypes[sampleIndexType];\n    const { coordsArgTypes, hasArrayIndexArg, hasLevelArg } =\n      kValidTextureLoadParameterTypesForNonStorageTextures[textureType];\n    assert(!hasLevelArg);\n\n    const texelTypeWGSL = texelType ? `<${texelType}>` : '';\n    const coordWGSL = coordsArgTypes[0].create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const sampleIndexWGSL = sampleIndexArgType.create(value).wgsl();\n\n    const code = `\n@group(0) @binding(0) var t: ${textureType}${texelTypeWGSL};\n@fragment fn fs() -> @location(0) vec4f {\n  _ = textureLoad(t, ${coordWGSL}${arrayWGSL}, ${sampleIndexWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess =\n      isConvertible(sampleIndexArgType, Type.i32) || isConvertible(sampleIndexArgType, Type.u32);\n    t.expectCompileResult(expectSuccess, code);\n  });\n"],"mappings":"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"}