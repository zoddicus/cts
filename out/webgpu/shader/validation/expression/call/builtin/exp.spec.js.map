{"version":3,"file":"exp.spec.js","names":["builtin","description","makeTestGroup","keysOf","objectsToRecord","kValue","TypeF16","TypeF32","elementType","kAllFloatScalarsAndVectors","kAllIntegerScalarsAndVectors","isRepresentable","ShaderValidationTest","kConstantAndOverrideStages","stageSupportsType","validateConstOrOverrideBuiltinEval","g","kValuesTypes","test","desc","params","u","combine","filter","stage","type","beginSubcases","Math","log2","f16","positive","max","f32","beforeAllSubcases","t","selectDeviceOrSkipTestCase","fn","expectedResult","exp","value","create","kIntegerArgumentTypes"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/exp.spec.ts"],"sourcesContent":["const builtin = 'exp';\nexport const description = `\nValidation tests for the ${builtin}() builtin.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport { kValue } from '../../../../../util/constants.js';\nimport {\n  TypeF16,\n  TypeF32,\n  elementType,\n  kAllFloatScalarsAndVectors,\n  kAllIntegerScalarsAndVectors,\n} from '../../../../../util/conversion.js';\nimport { isRepresentable } from '../../../../../util/floating_point.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\nimport {\n  kConstantAndOverrideStages,\n  stageSupportsType,\n  validateConstOrOverrideBuiltinEval,\n} from './const_override_validation.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\nconst kValuesTypes = objectsToRecord(kAllFloatScalarsAndVectors);\n\ng.test('values')\n  .desc(\n    `\nValidates that constant evaluation and override evaluation of ${builtin}() rejects invalid values\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kConstantAndOverrideStages)\n      .combine('type', keysOf(kValuesTypes))\n      .filter(u => stageSupportsType(u.stage, kValuesTypes[u.type]))\n      .beginSubcases()\n      .combine('value', [\n        -1e2,\n        -1e3,\n        -4,\n        -3,\n        -2,\n        -1,\n        -1e-1,\n        -1e-2,\n        -1e-3,\n        0,\n        1e-3,\n        1e-2,\n        1e-1,\n        1,\n        2,\n        3,\n        4,\n        1e2,\n        1e3,\n        Math.log2(kValue.f16.positive.max) - 0.1,\n        Math.log2(kValue.f16.positive.max) + 0.1,\n        Math.log2(kValue.f32.positive.max) - 0.1,\n        Math.log2(kValue.f32.positive.max) + 0.1,\n      ])\n  )\n  .beforeAllSubcases(t => {\n    if (elementType(kValuesTypes[t.params.type]) === TypeF16) {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(t => {\n    const type = kValuesTypes[t.params.type];\n    const expectedResult = isRepresentable(Math.exp(t.params.value), elementType(type));\n    validateConstOrOverrideBuiltinEval(\n      t,\n      builtin,\n      expectedResult,\n      [type.create(t.params.value)],\n      t.params.stage\n    );\n  });\n\nconst kIntegerArgumentTypes = objectsToRecord([TypeF32, ...kAllIntegerScalarsAndVectors]);\n\ng.test('integer_argument')\n  .desc(\n    `\nValidates that scalar and vector integer arguments are rejected by ${builtin}()\n`\n  )\n  .params(u => u.combine('type', keysOf(kIntegerArgumentTypes)))\n  .fn(t => {\n    const type = kIntegerArgumentTypes[t.params.type];\n    validateConstOrOverrideBuiltinEval(\n      t,\n      builtin,\n      /* expectedResult */ type === TypeF32,\n      [type.create(0)],\n      'constant'\n    );\n  });\n"],"mappings":"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"}