{"version":3,"file":"textureSampleBaseClampToEdge.spec.js","names":["builtin","description","makeTestGroup","keysOf","objectsToRecord","Type","kAllScalarsAndVectors","isConvertible","isUnsignedType","ShaderValidationTest","kTextureSampleBaseClampToEdgeTextureTypes","kValuesTypes","g","test","specURL","desc","params","u","combine","beginSubcases","filter","t","coordType","value","fn","textureType","coordArgType","coordWGSL","create","wgsl","code","expectSuccess","vec2f","expectCompileResult"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/textureSampleBaseClampToEdge.spec.ts"],"sourcesContent":["const builtin = 'textureSampleBaseClampToEdge';\nexport const description = `\nValidation tests for the ${builtin}() builtin.\n\n* test textureSampleBaseClampToEdge coords parameter must be correct type\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport {\n  Type,\n  kAllScalarsAndVectors,\n  isConvertible,\n  isUnsignedType,\n} from '../../../../../util/conversion.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\nconst kTextureSampleBaseClampToEdgeTextureTypes = ['texture_2d<f32>', 'texture_external'] as const;\nconst kValuesTypes = objectsToRecord(kAllScalarsAndVectors);\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\ng.test('coords_argument')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesamplebaseclamptoedge')\n  .desc(\n    `\nValidates that only incorrect coords arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kTextureSampleBaseClampToEdgeTextureTypes)\n      .combine('coordType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .combine('value', [-1, 0, 1] as const)\n      // filter out unsigned types with negative values\n      .filter(t => !isUnsignedType(kValuesTypes[t.coordType]) || t.value >= 0)\n  )\n  .fn(t => {\n    const { textureType, coordType, value } = t.params;\n    const coordArgType = kValuesTypes[coordType];\n    const coordWGSL = coordArgType.create(value).wgsl();\n\n    const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureSampleBaseClampToEdge(t, s, ${coordWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess = isConvertible(coordArgType, Type.vec2f);\n    t.expectCompileResult(expectSuccess, code);\n  });\n"],"mappings":";;GAAA,MAAMA,OAAO,GAAG,8BAA8B,CAC9C,OAAO,MAAMC,WAAW,GAAI;AAC5B,2BAA2BD,OAAQ;AACnC;AACA;AACA,CAAC;AAED,SAASE,aAAa,QAAQ,kDAAkD;AAChF,SAASC,MAAM,EAAEC,eAAe,QAAQ,8CAA8C;AACtF;EACEC,IAAI;EACJC,qBAAqB;EACrBC,aAAa;EACbC,cAAc;AACT,mCAAmC;AAC1C,SAASC,oBAAoB,QAAQ,oCAAoC;;AAEzE,MAAMC,yCAAyC,GAAG,CAAC,iBAAiB,EAAE,kBAAkB,CAAU;AAClG,MAAMC,YAAY,GAAGP,eAAe,CAACE,qBAAqB,CAAC;;AAE3D,OAAO,MAAMM,CAAC,GAAGV,aAAa,CAACO,oBAAoB,CAAC;;AAEpDG,CAAC,CAACC,IAAI,CAAC,iBAAiB,CAAC;AACtBC,OAAO,CAAC,oEAAoE,CAAC;AAC7EC,IAAI;EACF;AACL,iEAAiEf,OAAQ;AACzE;AACE,CAAC;AACAgB,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,aAAa,EAAER,yCAAyC,CAAC;AACjEQ,OAAO,CAAC,WAAW,EAAEf,MAAM,CAACQ,YAAY,CAAC,CAAC;AAC1CQ,aAAa,CAAC,CAAC;AACfD,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAU;AACrC;AAAA,CACCE,MAAM,CAAC,CAAAC,CAAC,KAAI,CAACb,cAAc,CAACG,YAAY,CAACU,CAAC,CAACC,SAAS,CAAC,CAAC,IAAID,CAAC,CAACE,KAAK,IAAI,CAAC;AAC3E,CAAC;AACAC,EAAE,CAAC,CAAAH,CAAC,KAAI;EACP,MAAM,EAAEI,WAAW,EAAEH,SAAS,EAAEC,KAAK,CAAC,CAAC,GAAGF,CAAC,CAACL,MAAM;EAClD,MAAMU,YAAY,GAAGf,YAAY,CAACW,SAAS,CAAC;EAC5C,MAAMK,SAAS,GAAGD,YAAY,CAACE,MAAM,CAACL,KAAK,CAAC,CAACM,IAAI,CAAC,CAAC;;EAEnD,MAAMC,IAAI,GAAI;AAClB;AACA,+BAA+BL,WAAY;AAC3C;AACA,+CAA+CE,SAAU;AACzD;AACA;AACA,CAAC;EACG,MAAMI,aAAa,GAAGxB,aAAa,CAACmB,YAAY,EAAErB,IAAI,CAAC2B,KAAK,CAAC;EAC7DX,CAAC,CAACY,mBAAmB,CAACF,aAAa,EAAED,IAAI,CAAC;AAC5C,CAAC,CAAC"}