{"version":3,"file":"tan.spec.js","names":["builtin","description","makeTestGroup","keysOf","objectsToRecord","TypeF16","TypeF32","elementType","kAllFloatScalarsAndVectors","kAllConcreteIntegerScalarsAndVectors","kAllAbstractIntegerScalarAndVectors","TypeAbstractFloat","fpTraitsFor","ShaderValidationTest","fullRangeForType","kConstantAndOverrideStages","minusThreePiToThreePiRangeForType","stageSupportsType","unique","validateConstOrOverrideBuiltinEval","g","kValuesTypes","test","desc","params","u","combine","filter","stage","type","beginSubcases","expand","beforeAllSubcases","t","selectDeviceOrSkipTestCase","fn","fp","kind","smallestPositive","constants","positive","min","v","quantize","Number","value","expectedResult","Math","abs","cos","create","kIntegerArgumentTypes"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/tan.spec.ts"],"sourcesContent":["const builtin = 'tan';\nexport const description = `\nValidation tests for the ${builtin}() builtin.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport {\n  TypeF16,\n  TypeF32,\n  elementType,\n  kAllFloatScalarsAndVectors,\n  kAllConcreteIntegerScalarsAndVectors,\n  kAllAbstractIntegerScalarAndVectors,\n  TypeAbstractFloat,\n} from '../../../../../util/conversion.js';\nimport { fpTraitsFor } from '../../../../../util/floating_point.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\nimport {\n  fullRangeForType,\n  kConstantAndOverrideStages,\n  minusThreePiToThreePiRangeForType,\n  stageSupportsType,\n  unique,\n  validateConstOrOverrideBuiltinEval,\n} from './const_override_validation.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\nconst kValuesTypes = objectsToRecord([\n  ...kAllAbstractIntegerScalarAndVectors,\n  ...kAllFloatScalarsAndVectors,\n]);\n\ng.test('values')\n  .desc(\n    `\nValidates that constant evaluation and override evaluation of ${builtin}() rejects invalid values\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kConstantAndOverrideStages)\n      .combine('type', keysOf(kValuesTypes))\n      .filter(u => stageSupportsType(u.stage, kValuesTypes[u.type]))\n      .beginSubcases()\n      .expand('value', u =>\n        unique(\n          minusThreePiToThreePiRangeForType(kValuesTypes[u.type]),\n          fullRangeForType(kValuesTypes[u.type])\n        )\n      )\n  )\n  .beforeAllSubcases(t => {\n    if (elementType(kValuesTypes[t.params.type]) === TypeF16) {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(t => {\n    const type = kValuesTypes[t.params.type];\n    const fp = fpTraitsFor(\n      // AbstractInt is converted to AbstractFloat before calling into the builtin\n      elementType(type).kind === 'abstract-int' ? TypeAbstractFloat : elementType(type)\n    );\n    const smallestPositive = fp.constants().positive.min;\n    const v = fp.quantize(Number(t.params.value));\n    const expectedResult = Math.abs(Math.cos(v)) > smallestPositive;\n    validateConstOrOverrideBuiltinEval(\n      t,\n      builtin,\n      expectedResult,\n      [type.create(t.params.value)],\n      t.params.stage\n    );\n  });\n\nconst kIntegerArgumentTypes = objectsToRecord([TypeF32, ...kAllConcreteIntegerScalarsAndVectors]);\n\ng.test('integer_argument')\n  .desc(\n    `\nValidates that scalar and vector integer arguments are rejected by ${builtin}()\n`\n  )\n  .params(u => u.combine('type', keysOf(kIntegerArgumentTypes)))\n  .fn(t => {\n    const type = kIntegerArgumentTypes[t.params.type];\n    validateConstOrOverrideBuiltinEval(\n      t,\n      builtin,\n      /* expectedResult */ type === TypeF32,\n      [type.create(0)],\n      'constant'\n    );\n  });\n"],"mappings":"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"}