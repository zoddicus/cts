{"version":3,"file":"insertBits.spec.js","names":["builtin","description","makeTestGroup","keysOf","objectsToRecord","Type","kConcreteIntegerScalarsAndVectors","kFloatScalarsAndVectors","u32","ShaderValidationTest","fullRangeForType","kConstantAndOverrideStages","stageSupportsType","validateConstOrOverrideBuiltinEval","g","kValuesTypes","test","desc","params","u","combine","filter","stage","type","beginSubcases","expand","combineWithParams","offset","count","fn","t","expectedResult","create","value","newbits","arg0","arg1","typesToArguments","types","pass","reduce","res","toString","arg","wgsl","kInputArgTypes","bool","mat2x2f","alias","vec_bool","atomic","array","preamble","array_runtime","struct","enumerant","ptr","ptr_deref","sampler","texture","input","expectCompileResult","use_it","use"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/insertBits.spec.ts"],"sourcesContent":["const builtin = 'insertBits';\nexport const description = `\nValidation tests for the ${builtin}() builtin.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport {\n  Type,\n  kConcreteIntegerScalarsAndVectors,\n  kFloatScalarsAndVectors,\n  u32,\n} from '../../../../../util/conversion.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\nimport {\n  fullRangeForType,\n  kConstantAndOverrideStages,\n  stageSupportsType,\n  validateConstOrOverrideBuiltinEval,\n} from './const_override_validation.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\nconst kValuesTypes = objectsToRecord(kConcreteIntegerScalarsAndVectors);\n\ng.test('values')\n  .desc(\n    `\nValidates that constant evaluation and override evaluation of ${builtin}() never errors on valid inputs\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kConstantAndOverrideStages)\n      .combine('type', keysOf(kValuesTypes))\n      .filter(u => stageSupportsType(u.stage, kValuesTypes[u.type]))\n      .beginSubcases()\n      .expand('value', u => fullRangeForType(kValuesTypes[u.type], 5))\n      .expand('newbits', u => fullRangeForType(kValuesTypes[u.type], 5))\n      .combineWithParams([\n        { offset: 0, count: 0 },\n        { offset: 0, count: 31 },\n        { offset: 0, count: 32 },\n        { offset: 4, count: 0 },\n        { offset: 4, count: 27 },\n        { offset: 4, count: 28 },\n        { offset: 16, count: 0 },\n        { offset: 16, count: 15 },\n        { offset: 16, count: 16 },\n        { offset: 32, count: 0 },\n      ] as const)\n  )\n  .fn(t => {\n    const expectedResult = true; // insertBits() should never error\n    validateConstOrOverrideBuiltinEval(\n      t,\n      builtin,\n      expectedResult,\n      [\n        kValuesTypes[t.params.type].create(t.params.value),\n        kValuesTypes[t.params.type].create(t.params.newbits),\n        u32(t.params.offset),\n        u32(t.params.count),\n      ],\n      t.params.stage\n    );\n  });\n\ng.test('mismatched')\n  .desc(\n    `\nValidates that even with valid types, if arg0 and arg1 do not match types ${builtin}() errors\n`\n  )\n  .params(u => u.combine('arg0', keysOf(kValuesTypes)).combine('arg1', keysOf(kValuesTypes)))\n  .fn(t => {\n    const arg0 = kValuesTypes[t.params.arg0];\n    const arg1 = kValuesTypes[t.params.arg1];\n    validateConstOrOverrideBuiltinEval(\n      t,\n      builtin,\n      /* expectedResult */ t.params.arg0 === t.params.arg1,\n      [arg0.create(0), arg1.create(1), u32(0), u32(32)],\n      'constant'\n    );\n  });\n\ng.test('count_offset')\n  .desc(\n    `\nValidates that count and offset must be smaller than the size of the primitive.\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kConstantAndOverrideStages)\n      .beginSubcases()\n      .combineWithParams([\n        // offset + count < 32\n        { offset: 0, count: 31 },\n        { offset: 1, count: 30 },\n        { offset: 31, count: 0 },\n        { offset: 30, count: 1 },\n        // offset + count == 32\n        { offset: 0, count: 32 },\n        { offset: 1, count: 31 },\n        { offset: 16, count: 16 },\n        { offset: 31, count: 1 },\n        { offset: 32, count: 0 },\n        // offset + count > 32\n        { offset: 2, count: 31 },\n        { offset: 31, count: 2 },\n        // offset > 32\n        { offset: 33, count: 0 },\n        { offset: 33, count: 1 },\n        // count > 32\n        { offset: 0, count: 33 },\n        { offset: 1, count: 33 },\n      ] as const)\n  )\n  .fn(t => {\n    validateConstOrOverrideBuiltinEval(\n      t,\n      builtin,\n      /* expectedResult */ t.params.offset + t.params.count <= 32,\n      [u32(0), u32(1), u32(t.params.offset), u32(t.params.count)],\n      t.params.stage\n    );\n  });\n\ninterface Argument {\n  /** Argument as a string. */\n  readonly arg: string;\n  /** Is this a valid argument type. Note that all args must be valid for the call to be valid. */\n  readonly pass: boolean;\n  /** Additional setup code necessary for this arg in the function scope. */\n  readonly preamble?: string;\n}\n\nfunction typesToArguments(types: readonly Type[], pass: boolean): Record<string, Argument> {\n  return types.reduce(\n    (res, type) => ({\n      ...res,\n      [type.toString()]: { arg: type.create(0).wgsl(), pass },\n    }),\n    {}\n  );\n}\n\n// u32 is included here to confirm that validation is failing due to a type issue and not something else.\nconst kInputArgTypes: { readonly [name: string]: Argument } = {\n  ...typesToArguments([Type.u32], true),\n  ...typesToArguments([...kFloatScalarsAndVectors, Type.bool, Type.mat2x2f], false),\n  alias: { arg: 'u32_alias(1)', pass: true },\n  vec_bool: { arg: 'vec2<bool>(false,true)', pass: false },\n  atomic: { arg: 'a', pass: false },\n  array: {\n    preamble: 'var arry: array<u32, 5>;',\n    arg: 'arry',\n    pass: false,\n  },\n  array_runtime: { arg: 'k.arry', pass: false },\n  struct: {\n    preamble: 'var x: A;',\n    arg: 'x',\n    pass: false,\n  },\n  enumerant: { arg: 'read_write', pass: false },\n  ptr: {\n    preamble: `var<function> f = 1u;\n               let p: ptr<function, u32> = &f;`,\n    arg: 'p',\n    pass: false,\n  },\n  ptr_deref: {\n    preamble: `var<function> f = 1u;\n               let p: ptr<function, u32> = &f;`,\n    arg: '*p',\n    pass: true,\n  },\n  sampler: { arg: 's', pass: false },\n  texture: { arg: 't', pass: false },\n};\n\ng.test('typed_arguments')\n  .desc(\n    `\nTest compilation validation of ${builtin} with variously typed arguments\n  - The input types are matching to reduce testing permutations. Mismatching input types are\n    validated in 'mismatched' test above.\n  - For failing input types, just use the same type for offset and count to reduce combinations.\n`\n  )\n  .params(u =>\n    u\n      .combine('input', keysOf(kInputArgTypes))\n      .beginSubcases()\n      .combine('offset', keysOf(kInputArgTypes))\n      .expand('count', u => (kInputArgTypes[u.input].pass ? keysOf(kInputArgTypes) : [u.offset]))\n  )\n  .fn(t => {\n    const input = kInputArgTypes[t.params.input];\n    const offset = kInputArgTypes[t.params.offset];\n    const count = kInputArgTypes[t.params.count];\n    t.expectCompileResult(\n      input.pass && offset.pass && count.pass,\n      `alias u32_alias = u32;\n\n      @group(0) @binding(0) var s: sampler;\n      @group(0) @binding(1) var t: texture_2d<f32>;\n\n      var<workgroup> a: atomic<u32>;\n\n      struct A {\n        i: u32,\n      }\n      struct B {\n        arry: array<u32>,\n      }\n      @group(0) @binding(3) var<storage> k: B;\n\n\n      @vertex\n      fn main() -> @builtin(position) vec4<f32> {\n        ${input.preamble ? input.preamble : ''}\n        ${offset.preamble && offset !== input ? offset.preamble : ''}\n        ${count.preamble && count !== input && count !== offset ? count.preamble : ''}\n        _ = ${builtin}(${input.arg},${input.arg},${offset.arg},${count.arg});\n        return vec4<f32>(.4, .2, .3, .1);\n      }`\n    );\n  });\n\ng.test('must_use')\n  .desc(`Result of ${builtin} must be used`)\n  .params(u => u.combine('use', [true, false]))\n  .fn(t => {\n    const use_it = t.params.use ? '_ = ' : '';\n    t.expectCompileResult(t.params.use, `fn f() { ${use_it}${builtin}(0u,1u,0u,1u); }`);\n  });\n"],"mappings":"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"}