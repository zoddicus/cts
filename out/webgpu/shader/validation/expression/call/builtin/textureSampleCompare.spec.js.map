{"version":3,"file":"textureSampleCompare.spec.js","names":["builtin","description","makeTestGroup","keysOf","objectsToRecord","Type","kAllScalarsAndVectors","isConvertible","isUnsignedType","ShaderValidationTest","kEntryPointsToValidateFragmentOnlyBuiltins","kTestTextureTypes","kValidTextureSampleCompareParameterTypes","texture_depth_2d","coordsArgType","vec2f","offsetArgType","vec2i","texture_depth_2d_array","hasArrayIndexArg","texture_depth_cube","vec3f","texture_depth_cube_array","kTextureTypes","kValuesTypes","g","test","specURL","desc","params","u","combine","beginSubcases","expand","t","textureType","fn","returnType","offset","returnVarType","varWGSL","toString","coordWGSL","create","wgsl","arrayWGSL","offsetWGSL","code","expectSuccess","f32","expectCompileResult","filter","coordType","value","coordArgType","coordsRequiredType","arrayIndexType","arrayIndexArgType","args","map","arg","join","i32","u32","depthRefType","depthRefArgType","depthRefWGSL","offsetType","offsetRequiredType","varType","entryPoint","config","testTextureType","types","typesMatch","use"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/textureSampleCompare.spec.ts"],"sourcesContent":["const builtin = 'textureSampleCompare';\nexport const description = `\nValidation tests for the ${builtin}() builtin.\n\n* test textureSampleCompare coords parameter must be correct type\n* test textureSampleCompare array_index parameter must be correct type\n* test textureSampleCompare depth_ref parameter must be correct type\n* test textureSampleCompare offset parameter must be correct type\n* test textureSampleCompare offset parameter must be a const-expression\n* test textureSampleCompare offset parameter must be between -8 and +7 inclusive\n* test textureSampleCompare not usable in a compute or vertex shader\n* test textureSampleCompare returns the correct type\n* test textureSampleCompare doesn't work with texture types it's not supposed to\n\nnote: uniformity validation is covered in src/webgpu/shader/validation/uniformity/uniformity.spec.ts\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport {\n  Type,\n  kAllScalarsAndVectors,\n  isConvertible,\n  ScalarType,\n  VectorType,\n  isUnsignedType,\n} from '../../../../../util/conversion.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\nimport {\n  kEntryPointsToValidateFragmentOnlyBuiltins,\n  kTestTextureTypes,\n} from './shader_builtin_utils.js';\n\ntype TextureSampleCompareArguments = {\n  coordsArgType: ScalarType | VectorType;\n  hasArrayIndexArg?: boolean;\n  offsetArgType?: VectorType;\n};\n\nconst kValidTextureSampleCompareParameterTypes: { [n: string]: TextureSampleCompareArguments } = {\n  texture_depth_2d: { coordsArgType: Type.vec2f, offsetArgType: Type.vec2i },\n  texture_depth_2d_array: {\n    coordsArgType: Type.vec2f,\n    hasArrayIndexArg: true,\n    offsetArgType: Type.vec2i,\n  },\n  texture_depth_cube: { coordsArgType: Type.vec3f },\n  texture_depth_cube_array: { coordsArgType: Type.vec3f, hasArrayIndexArg: true },\n} as const;\n\nconst kTextureTypes = keysOf(kValidTextureSampleCompareParameterTypes);\nconst kValuesTypes = objectsToRecord(kAllScalarsAndVectors);\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\ng.test('return_type')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesamplecompare')\n  .desc(\n    `\nValidates the return type of ${builtin} is the expected type.\n`\n  )\n  .params(u =>\n    u\n      .combine('returnType', keysOf(kValuesTypes))\n      .combine('textureType', keysOf(kValidTextureSampleCompareParameterTypes))\n      .beginSubcases()\n      .expand('offset', t =>\n        kValidTextureSampleCompareParameterTypes[t.textureType].offsetArgType\n          ? [false, true]\n          : [false]\n      )\n  )\n  .fn(t => {\n    const { returnType, textureType, offset } = t.params;\n    const returnVarType = kValuesTypes[returnType];\n    const { offsetArgType, coordsArgType, hasArrayIndexArg } =\n      kValidTextureSampleCompareParameterTypes[textureType];\n\n    const varWGSL = returnVarType.toString();\n    const coordWGSL = coordsArgType.create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const offsetWGSL = offset ? `, ${offsetArgType?.create(0).wgsl()}` : '';\n\n    const code = `\n@group(0) @binding(0) var s: sampler_comparison;\n@group(0) @binding(1) var t: ${textureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v: ${varWGSL} = textureSampleCompare(t, s, ${coordWGSL}${arrayWGSL}, 0${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess = isConvertible(Type.f32, returnVarType);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('coords_argument')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesamplecompare')\n  .desc(\n    `\nValidates that only incorrect coords arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', keysOf(kValidTextureSampleCompareParameterTypes))\n      .combine('coordType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .combine('value', [-1, 0, 1] as const)\n      // filter out unsigned types with negative values\n      .filter(t => !isUnsignedType(kValuesTypes[t.coordType]) || t.value >= 0)\n      .expand('offset', t =>\n        kValidTextureSampleCompareParameterTypes[t.textureType].offsetArgType\n          ? [false, true]\n          : [false]\n      )\n  )\n  .fn(t => {\n    const { textureType, coordType, offset, value } = t.params;\n    const coordArgType = kValuesTypes[coordType];\n    const {\n      offsetArgType,\n      coordsArgType: coordsRequiredType,\n      hasArrayIndexArg,\n    } = kValidTextureSampleCompareParameterTypes[textureType];\n\n    const coordWGSL = coordArgType.create(value).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const offsetWGSL = offset ? `, ${offsetArgType?.create(0).wgsl()}` : '';\n\n    const code = `\n@group(0) @binding(0) var s: sampler_comparison;\n@group(0) @binding(1) var t: ${textureType};\n@fragment fn fs() -> @location(0) vec4f {\n  _ = textureSampleCompare(t, s, ${coordWGSL}${arrayWGSL}, 0${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess = isConvertible(coordArgType, coordsRequiredType);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('array_index_argument')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesamplecompare')\n  .desc(\n    `\nValidates that only incorrect array_index arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kTextureTypes)\n      // filter out types with no array_index\n      .filter(t => !!kValidTextureSampleCompareParameterTypes[t.textureType].hasArrayIndexArg)\n      .combine('arrayIndexType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .combine('value', [-9, -8, 0, 7, 8])\n      // filter out unsigned types with negative values\n      .filter(t => !isUnsignedType(kValuesTypes[t.arrayIndexType]) || t.value >= 0)\n      .expand('offset', t =>\n        kValidTextureSampleCompareParameterTypes[t.textureType].offsetArgType\n          ? [false, true]\n          : [false]\n      )\n  )\n  .fn(t => {\n    const { textureType, arrayIndexType, value, offset } = t.params;\n    const arrayIndexArgType = kValuesTypes[arrayIndexType];\n    const args = [arrayIndexArgType.create(value)];\n    const { coordsArgType, offsetArgType } = kValidTextureSampleCompareParameterTypes[textureType];\n\n    const coordWGSL = coordsArgType.create(0).wgsl();\n    const arrayWGSL = args.map(arg => arg.wgsl()).join(', ');\n    const offsetWGSL = offset ? `, ${offsetArgType!.create(0).wgsl()}` : '';\n\n    const code = `\n@group(0) @binding(0) var s: sampler_comparison;\n@group(0) @binding(1) var t: ${textureType};\n@fragment fn fs() -> @location(0) vec4f {\n  _ = textureSampleCompare(t, s, ${coordWGSL}, ${arrayWGSL}, 0${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess =\n      isConvertible(arrayIndexArgType, Type.i32) || isConvertible(arrayIndexArgType, Type.u32);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('depth_ref_argument')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesamplecompare')\n  .desc(\n    `\nValidates that only incorrect depth_ref arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kTextureTypes)\n      .combine('depthRefType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .combine('value', [-1, 0, 1])\n      // filter out unsigned types with negative values\n      .filter(t => !isUnsignedType(kValuesTypes[t.depthRefType]) || t.value >= 0)\n      .expand('offset', t =>\n        kValidTextureSampleCompareParameterTypes[t.textureType].offsetArgType\n          ? [false, true]\n          : [false]\n      )\n  )\n  .fn(t => {\n    const { textureType, depthRefType, value, offset } = t.params;\n    const depthRefArgType = kValuesTypes[depthRefType];\n    const args = [depthRefArgType.create(value)];\n    const { coordsArgType, hasArrayIndexArg, offsetArgType } =\n      kValidTextureSampleCompareParameterTypes[textureType];\n\n    const coordWGSL = coordsArgType.create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const depthRefWGSL = args.map(arg => arg.wgsl()).join(', ');\n    const offsetWGSL = offset ? `, ${offsetArgType!.create(0).wgsl()}` : '';\n\n    const code = `\n@group(0) @binding(0) var s: sampler_comparison;\n@group(0) @binding(1) var t: ${textureType};\n@fragment fn fs() -> @location(0) vec4f {\n  _ = textureSampleCompare(t, s, ${coordWGSL}${arrayWGSL}, ${depthRefWGSL}${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess = isConvertible(depthRefArgType, Type.f32);\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('offset_argument')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesamplecompare')\n  .desc(\n    `\nValidates that only incorrect offset arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kTextureTypes)\n      // filter out types with no offset\n      .filter(t => !!kValidTextureSampleCompareParameterTypes[t.textureType].offsetArgType)\n      .combine('offsetType', keysOf(kValuesTypes))\n      .beginSubcases()\n      .combine('value', [-9, -8, 0, 7, 8])\n      // filter out unsigned types with negative values\n      .filter(t => !isUnsignedType(kValuesTypes[t.offsetType]) || t.value >= 0)\n  )\n  .fn(t => {\n    const { textureType, offsetType, value } = t.params;\n    const offsetArgType = kValuesTypes[offsetType];\n    const args = [offsetArgType.create(value)];\n    const {\n      coordsArgType,\n      hasArrayIndexArg,\n      offsetArgType: offsetRequiredType,\n    } = kValidTextureSampleCompareParameterTypes[textureType];\n\n    const coordWGSL = coordsArgType.create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const offsetWGSL = args.map(arg => arg.wgsl()).join(', ');\n\n    const code = `\n@group(0) @binding(0) var s: sampler_comparison;\n@group(0) @binding(1) var t: ${textureType};\n@fragment fn fs() -> @location(0) vec4f {\n  _ = textureSampleCompare(t, s, ${coordWGSL}${arrayWGSL}, 0, ${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess =\n      isConvertible(offsetArgType, offsetRequiredType!) && value >= -8 && value <= 7;\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('offset_argument,non_const')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesamplecompare')\n  .desc(\n    `\nValidates that only non-const offset arguments are rejected by ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kTextureTypes)\n      .combine('varType', ['c', 'u', 'l'])\n      // filter out types with no offset\n      .filter(t => !!kValidTextureSampleCompareParameterTypes[t.textureType].offsetArgType)\n  )\n  .fn(t => {\n    const { textureType, varType } = t.params;\n    const { coordsArgType, hasArrayIndexArg, offsetArgType } =\n      kValidTextureSampleCompareParameterTypes[textureType];\n\n    const coordWGSL = coordsArgType.create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const offsetWGSL = `${offsetArgType}(${varType})`;\n\n    const code = `\n@group(0) @binding(0) var s: sampler_comparison;\n@group(0) @binding(1) var t: ${textureType};\n@group(0) @binding(2) var<uniform> u: ${offsetArgType};\n@fragment fn fs() -> @location(0) vec4f {\n  const c = 1;\n  let l = ${offsetArgType?.create(0).wgsl()};\n  _ = textureSampleCompare(t, s, ${coordWGSL}${arrayWGSL}, 0, ${offsetWGSL});\n  return vec4f(0);\n}\n`;\n    const expectSuccess = varType === 'c';\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('only_in_fragment')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesample')\n  .desc(\n    `\nValidates that ${builtin} must not be used in a compute or vertex shader.\n`\n  )\n  .params(u =>\n    u\n      .combine('textureType', kTextureTypes)\n      .combine('entryPoint', keysOf(kEntryPointsToValidateFragmentOnlyBuiltins))\n      .expand('offset', t =>\n        kValidTextureSampleCompareParameterTypes[t.textureType].offsetArgType\n          ? [false, true]\n          : [false]\n      )\n  )\n  .fn(t => {\n    const { textureType, entryPoint, offset } = t.params;\n    const { coordsArgType, hasArrayIndexArg, offsetArgType } =\n      kValidTextureSampleCompareParameterTypes[textureType];\n\n    const coordWGSL = coordsArgType.create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const offsetWGSL = offset ? `, ${offsetArgType?.create(0).wgsl()}` : '';\n\n    const config = kEntryPointsToValidateFragmentOnlyBuiltins[entryPoint];\n    const code = `\n${config.code}\n@group(0) @binding(0) var s: sampler_comparison;\n@group(0) @binding(1) var t: ${textureType};\n\nfn foo() {\n  _ = textureSampleCompare(t, s, ${coordWGSL}${arrayWGSL}, 0${offsetWGSL});\n}`;\n    t.expectCompileResult(config.expectSuccess, code);\n  });\n\ng.test('texture_type')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesamplecompare')\n  .desc(\n    `\nValidates that incompatible texture types don't work with ${builtin}\n`\n  )\n  .params(u =>\n    u\n      .combine('testTextureType', kTestTextureTypes)\n      .beginSubcases()\n      .combine('textureType', keysOf(kValidTextureSampleCompareParameterTypes))\n      .expand('offset', t =>\n        kValidTextureSampleCompareParameterTypes[t.textureType].offsetArgType\n          ? [false, true]\n          : [false]\n      )\n  )\n  .fn(t => {\n    const { testTextureType, textureType, offset } = t.params;\n    const { coordsArgType, offsetArgType, hasArrayIndexArg } =\n      kValidTextureSampleCompareParameterTypes[textureType];\n\n    const coordWGSL = coordsArgType.create(0).wgsl();\n    const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n    const offsetWGSL = offset ? `, ${offsetArgType?.create(0).wgsl()}` : '';\n\n    const code = `\n@group(0) @binding(0) var s: sampler_comparison;\n@group(0) @binding(1) var t: ${testTextureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureSampleCompare(t, s, ${coordWGSL}${arrayWGSL}, 0${offsetWGSL});\n  return vec4f(0);\n}\n`;\n\n    const types = kValidTextureSampleCompareParameterTypes[testTextureType];\n    const typesMatch = types\n      ? types.coordsArgType === coordsArgType &&\n        types.hasArrayIndexArg === hasArrayIndexArg &&\n        (offset ? types.offsetArgType === offsetArgType : true)\n      : false;\n\n    const expectSuccess = testTextureType === textureType || typesMatch;\n    t.expectCompileResult(expectSuccess, code);\n  });\n\ng.test('must_use')\n  .desc('Tests that the result must be used')\n  .params(u => u.combine('use', [true, false] as const))\n  .fn(t => {\n    const code = `\n    @group(0) @binding(0) var t : texture_depth_2d;\n    @group(0) @binding(1) var s : sampler_comparison;\n    fn foo() {\n      ${t.params.use ? '_ =' : ''} textureSampleCompare(t,s,vec2(0,0),0);\n    }`;\n    t.expectCompileResult(t.params.use, code);\n  });\n"],"mappings":"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"}