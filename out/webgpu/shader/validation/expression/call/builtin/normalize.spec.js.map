{"version":3,"file":"normalize.spec.js","names":["builtin","description","makeTestGroup","keysOf","objectsToRecord","Type","kConcreteIntegerScalarsAndVectors","kConvertableToFloatVectors","scalarTypeOf","quantizeToF16","quantizeToF32","ShaderValidationTest","fullRangeForType","kConstantAndOverrideStages","stageSupportsType","validateConstOrOverrideBuiltinEval","g","kValidArgumentTypes","quantizeFunctionForScalarType","type","f32","f16","v","test","desc","params","u","combine","filter","stage","beginSubcases","expand","beforeAllSubcases","t","selectDeviceOrSkipTestCase","fn","expectedResult","scalarType","quantizeFn","Number","value","vv","dp","width","len","Math","sqrt","Infinity","create","kInvalidArgumentTypes","abstractInt","bool","vec","kArgCases","good","bad_no_parens","bad_0args","bad_2args","bad_0array","bad_0struct","expectCompileResult","arg","use_it","use"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/normalize.spec.ts"],"sourcesContent":["const builtin = 'normalize';\nexport const description = `\nValidation tests for the ${builtin}() builtin.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport {\n  Type,\n  kConcreteIntegerScalarsAndVectors,\n  kConvertableToFloatVectors,\n  scalarTypeOf,\n  ScalarType,\n} from '../../../../../util/conversion.js';\nimport { QuantizeFunc, quantizeToF16, quantizeToF32 } from '../../../../../util/math.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\nimport {\n  fullRangeForType,\n  kConstantAndOverrideStages,\n  stageSupportsType,\n  validateConstOrOverrideBuiltinEval,\n} from './const_override_validation.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\nconst kValidArgumentTypes = objectsToRecord(kConvertableToFloatVectors);\n\nfunction quantizeFunctionForScalarType(type: ScalarType): QuantizeFunc<number> {\n  switch (type) {\n    case Type.f32:\n      return quantizeToF32;\n    case Type.f16:\n      return quantizeToF16;\n    default:\n      return (v: number) => v;\n  }\n}\n\ng.test('values')\n  .desc(\n    `\nValidates that constant evaluation and override evaluation of ${builtin}() rejects invalid values\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kConstantAndOverrideStages)\n      .combine('type', keysOf(kValidArgumentTypes))\n      .filter(u => stageSupportsType(u.stage, kValidArgumentTypes[u.type]))\n      .beginSubcases()\n      .expand('value', u => fullRangeForType(kValidArgumentTypes[u.type]))\n  )\n  .beforeAllSubcases(t => {\n    if (scalarTypeOf(kValidArgumentTypes[t.params.type]) === Type.f16) {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(t => {\n    let expectedResult = true;\n\n    const scalarType = scalarTypeOf(kValidArgumentTypes[t.params.type]);\n    const quantizeFn = quantizeFunctionForScalarType(scalarType);\n\n    // Should be invalid if the normalization calculations result in intermediate\n    // values that exceed the maximum representable float value for the given type,\n    // or if the length is smaller than the smallest representable float value.\n    const v = Number(t.params.value);\n    const vv = quantizeFn(v * v);\n    const dp = quantizeFn(vv * kValidArgumentTypes[t.params.type].width);\n    const len = quantizeFn(Math.sqrt(dp));\n    if (vv === Infinity || dp === Infinity || len === 0) {\n      expectedResult = false;\n    }\n\n    validateConstOrOverrideBuiltinEval(\n      t,\n      builtin,\n      expectedResult,\n      [kValidArgumentTypes[t.params.type].create(t.params.value)],\n      t.params.stage\n    );\n  });\n\nconst kInvalidArgumentTypes = objectsToRecord([\n  Type.f32,\n  Type.f16,\n  Type.abstractInt,\n  Type.bool,\n  Type.vec(2, Type.bool),\n  Type.vec(3, Type.bool),\n  Type.vec(4, Type.bool),\n  ...kConcreteIntegerScalarsAndVectors,\n]);\n\ng.test('invalid_argument')\n  .desc(\n    `\nValidates that all scalar arguments and vector integer or boolean arguments are rejected by ${builtin}()\n`\n  )\n  .params(u => u.combine('type', keysOf(kInvalidArgumentTypes)))\n  .beforeAllSubcases(t => {\n    if (kInvalidArgumentTypes[t.params.type] === Type.f16) {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(t => {\n    const expectedResult = false; // should always error with invalid argument types\n    validateConstOrOverrideBuiltinEval(\n      t,\n      builtin,\n      expectedResult,\n      [kInvalidArgumentTypes[t.params.type].create(0)],\n      'constant'\n    );\n  });\n\nconst kArgCases = {\n  good: '(vec3f(1, 0, 0))',\n  bad_no_parens: '',\n  // Bad number of args\n  bad_0args: '()',\n  bad_2args: '(vec3f(),vec3f())',\n  // Bad value for arg 0\n  bad_0array: '(array(1.1,2.2))',\n  bad_0struct: '(modf(2.2))',\n};\n\ng.test('args')\n  .desc(`Test compilation failure of ${builtin}  with variously shaped and typed arguments`)\n  .params(u => u.combine('arg', keysOf(kArgCases)))\n  .fn(t => {\n    t.expectCompileResult(\n      t.params.arg === 'good',\n      `const c = ${builtin}${kArgCases[t.params.arg]};`\n    );\n  });\n\ng.test('must_use')\n  .desc(`Result of ${builtin} must be used`)\n  .params(u => u.combine('use', [true, false]))\n  .fn(t => {\n    const use_it = t.params.use ? '_ = ' : '';\n    t.expectCompileResult(t.params.use, `fn f() { ${use_it}${builtin}${kArgCases['good']}; }`);\n  });\n"],"mappings":"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"}