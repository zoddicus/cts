{"version":3,"file":"precedence.spec.js","names":["description","makeTestGroup","keysOf","ShaderValidationTest","g","kMultiplicative","kAdditive","kShift","kRelational","kBinaryAnd","kBinaryXor","kBinaryOr","kLogical","kCanPrecedeWithoutParens","kBinaryOperators","mul","op","group","div","mod","add","sub","shl","shr","lt","gt","le","ge","eq","ne","bin_and","bin_xor","bin_or","log_and","log_or","test","desc","params","u","combine","filter","p","op1","includes","op2","fn","t","code","valid","expectCompileResult","group1","group2","expr","parens","kExpressions","neg_member","result","comp_member","addr_member","log_and_member","log_or_member","and_addr","and_addr_paren","deref_member","deref_member_paren","deref_idx","deref_idx_paren","wgsl","kLHSExpressions","deref_invalid1","deref_invalid2","deref_valid1","deref_valid2","addr_valid1","addr_valid2","addr_valid3"],"sources":["../../../../../src/webgpu/shader/validation/expression/precedence.spec.ts"],"sourcesContent":["export const description = `\nValidation tests for operator precedence.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { keysOf } from '../../../../common/util/data_tables.js';\nimport { ShaderValidationTest } from '../shader_validation_test.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\n// Bit set for the binary operator groups.\nconst kMultiplicative = 1 << 0;\nconst kAdditive = 1 << 1;\nconst kShift = 1 << 2;\nconst kRelational = 1 << 3;\nconst kBinaryAnd = 1 << 4;\nconst kBinaryXor = 1 << 5;\nconst kBinaryOr = 1 << 6;\nconst kLogical = 1 << 7;\n\n// Set of other operators that each operator can precede without any parentheses.\nconst kCanPrecedeWithoutParens: Record<number, number> = {};\nkCanPrecedeWithoutParens[kMultiplicative] = kMultiplicative | kAdditive | kRelational;\nkCanPrecedeWithoutParens[kAdditive] = kMultiplicative | kAdditive | kRelational;\nkCanPrecedeWithoutParens[kShift] = kRelational | kLogical;\nkCanPrecedeWithoutParens[kRelational] = kMultiplicative | kAdditive | kShift | kLogical;\nkCanPrecedeWithoutParens[kBinaryAnd] = kBinaryAnd;\nkCanPrecedeWithoutParens[kBinaryXor] = kBinaryXor;\nkCanPrecedeWithoutParens[kBinaryOr] = kBinaryOr;\nkCanPrecedeWithoutParens[kLogical] = kRelational;\n\n// The list of binary operators.\ninterface BinaryOperatorInfo {\n  op: string;\n  group: number;\n}\nconst kBinaryOperators: Record<string, BinaryOperatorInfo> = {\n  mul: { op: '*', group: kMultiplicative },\n  div: { op: '/', group: kMultiplicative },\n  mod: { op: '%', group: kMultiplicative },\n\n  add: { op: '+', group: kAdditive },\n  sub: { op: '-', group: kAdditive },\n\n  shl: { op: '<<', group: kShift },\n  shr: { op: '>>', group: kShift },\n\n  lt: { op: '<', group: kRelational },\n  gt: { op: '>', group: kRelational },\n  le: { op: '<=', group: kRelational },\n  ge: { op: '>=', group: kRelational },\n  eq: { op: '==', group: kRelational },\n  ne: { op: '!=', group: kRelational },\n\n  bin_and: { op: '&', group: kBinaryAnd },\n  bin_xor: { op: '^', group: kBinaryXor },\n  bin_or: { op: '|', group: kBinaryOr },\n\n  log_and: { op: '&&', group: kLogical },\n  log_or: { op: '||', group: kLogical },\n};\n\ng.test('binary_requires_parentheses')\n  .desc(\n    `\n  Validates that certain binary operators require parentheses to bind correctly.\n  `\n  )\n  .params(u =>\n    u\n      .combine('op1', keysOf(kBinaryOperators))\n      .combine('op2', keysOf(kBinaryOperators))\n      .filter(p => {\n        // Skip expressions that would parse as template lists.\n        if (p.op1 === 'lt' && ['gt', 'ge', 'shr'].includes(p.op2)) {\n          return false;\n        }\n        // Only combine logical operators with relational operators.\n        if (kBinaryOperators[p.op1].group === kLogical) {\n          return kBinaryOperators[p.op2].group === kRelational;\n        }\n        if (kBinaryOperators[p.op2].group === kLogical) {\n          return kBinaryOperators[p.op1].group === kRelational;\n        }\n        return true;\n      })\n  )\n  .fn(t => {\n    const op1 = kBinaryOperators[t.params.op1];\n    const op2 = kBinaryOperators[t.params.op2];\n    const code = `\nvar<private> a : ${op1.group === kLogical ? 'bool' : 'u32'};\nvar<private> b : u32;\nvar<private> c : ${op2.group === kLogical ? 'bool' : 'u32'};\nfn foo() {\n  let foo = a ${op1.op} b ${op2.op} c;\n}\n`;\n\n    const valid = (kCanPrecedeWithoutParens[op1.group] & op2.group) !== 0;\n    t.expectCompileResult(valid, code);\n  });\n\ng.test('mixed_logical_requires_parentheses')\n  .desc(\n    `\n  Validates that mixed logical operators require parentheses to bind correctly.\n  `\n  )\n  .params(u =>\n    u\n      .combine('op1', keysOf(kBinaryOperators))\n      .combine('op2', keysOf(kBinaryOperators))\n      .combine('parens', ['none', 'left', 'right'])\n      .filter(p => {\n        const group1 = kBinaryOperators[p.op1].group;\n        const group2 = kBinaryOperators[p.op2].group;\n        return group1 === kLogical && group2 === kLogical;\n      })\n  )\n  .fn(t => {\n    const op1 = kBinaryOperators[t.params.op1];\n    const op2 = kBinaryOperators[t.params.op2];\n    let expr = `a ${op1.op} b ${op2.op} c;`;\n    if (t.params.parens === 'left') {\n      expr = `(a ${op1.op} b) ${op2.op} c;`;\n    } else if (t.params.parens === 'right') {\n      expr = `a ${op1.op} (b ${op2.op} c);`;\n    }\n    const code = `\nvar<private> a : bool;\nvar<private> b : bool;\nvar<private> c : bool;\nfn foo() {\n  let bar = ${expr};\n}\n`;\n    const valid = t.params.parens !== 'none' || t.params.op1 === t.params.op2;\n    t.expectCompileResult(valid, code);\n  });\n\n// The list of miscellaneous other test cases.\ninterface Expression {\n  expr: string;\n  result: boolean;\n}\nconst kExpressions: Record<string, Expression> = {\n  neg_member: { expr: '- str . a', result: true },\n  comp_member: { expr: '~ str . a', result: true },\n  addr_member: { expr: '& str . a', result: true },\n  log_and_member: { expr: 'false && str . b', result: true },\n  log_or_member: { expr: 'false || str . b', result: true },\n  and_addr: { expr: '      v &  &str .a', result: false },\n  and_addr_paren: { expr: 'v & (&str).a', result: true },\n  deref_member: { expr: '       * ptr_str  . a', result: false },\n  deref_member_paren: { expr: '(* ptr_str) . a', result: true },\n  deref_idx: { expr: '       * ptr_vec  [0]', result: false },\n  deref_idx_paren: { expr: '(* ptr_vec) [1]', result: true },\n};\n\ng.test('other')\n  .desc(\n    `\n    Test that other operator precedence rules are correctly implemented.\n    `\n  )\n  .params(u => u.combine('expr', keysOf(kExpressions)))\n  .fn(t => {\n    const expr = kExpressions[t.params.expr];\n    const wgsl = `\n      struct S {\n        a: i32,\n        b: bool,\n      }\n\n      fn main() {\n        var v = 42;\n        var vec = vec4();\n        var str = S(42, false);\n        let ptr_vec = &vec;\n        let ptr_str = &str;\n\n        let foo = ${expr.expr};\n      }\n    `;\n\n    t.expectCompileResult(expr.result, wgsl);\n  });\n\nconst kLHSExpressions = {\n  deref_invalid1: { expr: `*p.b`, result: false },\n  deref_invalid2: { expr: `*p.a[0]`, result: false },\n  deref_valid1: { expr: `(*p).b`, result: true },\n  deref_valid2: { expr: `(*p).a[2]`, result: true },\n  addr_valid1: { expr: `*&v.b`, result: true },\n  addr_valid2: { expr: `(*&v).b`, result: true },\n  addr_valid3: { expr: `*&(v.b)`, result: true },\n};\n\ng.test('other_lhs')\n  .desc('Test precedence of * and [] in LHS')\n  .params(u => u.combine('expr', keysOf(kLHSExpressions)))\n  .fn(t => {\n    const expr = kLHSExpressions[t.params.expr];\n    const code = `\n    struct S {\n      a : array<i32, 4>,\n      b : i32,\n    }\n    fn main() {\n      var v : S;\n      let p = &v;\n      let q = &v.a;\n\n      ${expr.expr} = 1i;\n    }`;\n\n    t.expectCompileResult(expr.result, code);\n  });\n"],"mappings":"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"}