{"version":3,"file":"util.js","names":["groupAndBinding","group","binding","undefined","basicEmitter","type","name","kResourceEmitters","Map","kResourceKindsA","kResourceKindsB","declareEntrypoint","stage","body"],"sources":["../../../../../src/webgpu/shader/validation/resource_interface/util.ts"],"sourcesContent":["/**\n * ResourceDeclarationEmitter is a function that emits the WGSL declaring a resource variable with\n * the given group, binding and name.\n */\nexport type ResourceDeclarationEmitter = (name: string, group?: number, binding?: number) => string;\n\n/** Helper function for emitting a resource declaration's group and binding attributes */\nfunction groupAndBinding(group?: number, binding?: number): string {\n  return (\n    `${group !== undefined ? `@group(${group})` : '/* no group */'} ` +\n    `${binding !== undefined ? `@binding(${binding})` : '/* no binding */'}`\n  );\n}\n\n/** Helper function for emitting a resource declaration for the given type */\nfunction basicEmitter(type: string): ResourceDeclarationEmitter {\n  return (name: string, group?: number, binding?: number) =>\n    `${groupAndBinding(group, binding)} var ${name} : ${type};\\n`;\n}\n\n/** Map of resource declaration name, to an emitter. */\nexport const kResourceEmitters = new Map<string, ResourceDeclarationEmitter>([\n  ['texture_1d', basicEmitter('texture_1d<i32>')],\n  ['texture_2d', basicEmitter('texture_2d<i32>')],\n  ['texture_2d_array', basicEmitter('texture_2d_array<f32>')],\n  ['texture_3d', basicEmitter('texture_3d<i32>')],\n  ['texture_cube', basicEmitter('texture_cube<u32>')],\n  ['texture_cube_array', basicEmitter('texture_cube_array<u32>')],\n  ['texture_multisampled_2d', basicEmitter('texture_multisampled_2d<i32>')],\n  ['texture_external', basicEmitter('texture_external')],\n  ['texture_storage_1d', basicEmitter('texture_storage_1d<rgba8unorm, write>')],\n  ['texture_storage_2d', basicEmitter('texture_storage_2d<rgba8sint, write>')],\n  ['texture_storage_2d_array', basicEmitter('texture_storage_2d_array<r32uint, write>')],\n  ['texture_storage_3d', basicEmitter('texture_storage_3d<rg32uint, write>')],\n  ['texture_depth_2d', basicEmitter('texture_depth_2d')],\n  ['texture_depth_2d_array', basicEmitter('texture_depth_2d_array')],\n  ['texture_depth_cube', basicEmitter('texture_depth_cube')],\n  ['texture_depth_cube_array', basicEmitter('texture_depth_cube_array')],\n  ['texture_depth_multisampled_2d', basicEmitter('texture_depth_multisampled_2d')],\n  ['sampler', basicEmitter('sampler')],\n  ['sampler_comparison', basicEmitter('sampler_comparison')],\n  [\n    'uniform',\n    (name: string, group?: number, binding?: number) =>\n      `${groupAndBinding(group, binding)} var<uniform> ${name} : array<vec4<f32>, 16>;\\n`,\n  ],\n  [\n    'storage',\n    (name: string, group?: number, binding?: number) =>\n      `${groupAndBinding(group, binding)} var<storage> ${name} : array<vec4<f32>, 16>;\\n`,\n  ],\n]);\n\n/** A small selection of resource declaration names, which can be used in test permutations */\nexport const kResourceKindsA = ['storage', 'texture_2d', 'texture_external', 'uniform'];\n\n/** A small selection of resource declaration names, which can be used in test permutations */\nexport const kResourceKindsB = ['texture_3d', 'texture_storage_1d', 'uniform'];\n\n/** An enumerator of shader stages */\nexport type ShaderStage = 'vertex' | 'fragment' | 'compute';\n\n/**\n * declareEntrypoint emits the WGSL to declare an entry point with the given name, stage and body.\n * The generated function will have an appropriate return type and return statement, so that @p body\n * does not have to change between stage.\n * @param name the entry point function name\n * @param stage the entry point stage\n * @param body the body of the function (excluding any automatically suffixed return statements)\n * @returns the WGSL string for the entry point\n */\nexport function declareEntrypoint(name: string, stage: ShaderStage, body: string): string {\n  switch (stage) {\n    case 'vertex':\n      return `@vertex\nfn ${name}() -> @builtin(position) vec4f {\n  ${body}\n  return vec4f();\n}`;\n    case 'fragment':\n      return `@fragment\nfn ${name}() {\n  ${body}\n}`;\n    case 'compute':\n      return `@compute @workgroup_size(1)\nfn ${name}() {\n  ${body}\n}`;\n  }\n}\n"],"mappings":"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"}