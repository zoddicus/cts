{"version":3,"file":"var_and_let.spec.js","names":["description","makeTestGroup","ShaderValidationTest","g","kTestTypes","test","desc","params","u","combine","beginSubcases","fn","t","variableOrConstant","lhsType","rhsType","code","expectation","expectCompileResult"],"sources":["../../../../../src/webgpu/shader/validation/parse/var_and_let.spec.ts"],"sourcesContent":["export const description = `\nPositive and negative validation tests for variable and const.\n\nTODO: Find a better way to test arrays than using a single arbitrary size. [1]\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { ShaderValidationTest } from '../shader_validation_test.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\nconst kTestTypes = [\n  'f32',\n  'i32',\n  'u32',\n  'bool',\n  'vec2<f32>',\n  'vec2<i32>',\n  'vec2<u32>',\n  'vec2<bool>',\n  'vec3<f32>',\n  'vec3<i32>',\n  'vec3<u32>',\n  'vec3<bool>',\n  'vec4<f32>',\n  'vec4<i32>',\n  'vec4<u32>',\n  'vec4<bool>',\n  'mat2x2<f32>',\n  'mat2x3<f32>',\n  'mat2x4<f32>',\n  'mat3x2<f32>',\n  'mat3x3<f32>',\n  'mat3x4<f32>',\n  'mat4x2<f32>',\n  'mat4x3<f32>',\n  'mat4x4<f32>',\n  // [1]: 12 is a random number here. find a solution to replace it.\n  'array<f32, 12>',\n  'array<i32, 12>',\n  'array<u32, 12>',\n  'array<bool, 12>',\n] as const;\n\ng.test('initializer_type')\n  .desc(\n    `\n  If present, the initializer's type must match the store type of the variable.\n  Testing scalars, vectors, and matrices of every dimension and type.\n  TODO: add test for: structs - arrays of vectors and matrices - arrays of different length\n`\n  )\n  .params(u =>\n    u\n      .combine('variableOrConstant', ['var', 'let'])\n      .beginSubcases()\n      .combine('lhsType', kTestTypes)\n      .combine('rhsType', kTestTypes)\n  )\n  .fn(t => {\n    const { variableOrConstant, lhsType, rhsType } = t.params;\n\n    const code = `\n      @fragment\n      fn main() {\n        ${variableOrConstant} a : ${lhsType} = ${rhsType}();\n      }\n    `;\n\n    const expectation = lhsType === rhsType;\n    t.expectCompileResult(expectation, code);\n  });\n"],"mappings":";AAAA;AAAA,GAAA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA,CAAC,CAED,SAASC,aAAa,QAAQ,4CAA4C;AAC1E,SAASC,oBAAoB,QAAQ,8BAA8B;;AAEnE,OAAO,MAAMC,CAAC,GAAGF,aAAa,CAACC,oBAAoB,CAAC;;AAEpD,MAAME,UAAU,GAAG;AACjB,KAAK;AACL,KAAK;AACL,KAAK;AACL,MAAM;AACN,WAAW;AACX,WAAW;AACX,WAAW;AACX,YAAY;AACZ,WAAW;AACX,WAAW;AACX,WAAW;AACX,YAAY;AACZ,WAAW;AACX,WAAW;AACX,WAAW;AACX,YAAY;AACZ,aAAa;AACb,aAAa;AACb,aAAa;AACb,aAAa;AACb,aAAa;AACb,aAAa;AACb,aAAa;AACb,aAAa;AACb,aAAa;AACb;AACA,gBAAgB;AAChB,gBAAgB;AAChB,gBAAgB;AAChB,iBAAiB,CACT;;;AAEVD,CAAC,CAACE,IAAI,CAAC,kBAAkB,CAAC;AACvBC,IAAI;AACF;AACL;AACA;AACA;AACA,CAAC,CACE;;AACAC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,oBAAoB,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;AAC7CC,aAAa,EAAE;AACfD,OAAO,CAAC,SAAS,EAAEL,UAAU,CAAC;AAC9BK,OAAO,CAAC,SAAS,EAAEL,UAAU,CAAC,CAClC;;AACAO,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAM,EAAEC,kBAAkB,EAAEC,OAAO,EAAEC,OAAO,CAAC,CAAC,GAAGH,CAAC,CAACL,MAAM;;EAEzD,MAAMS,IAAI,GAAI;AAClB;AACA;AACA,UAAUH,kBAAmB,QAAOC,OAAQ,MAAKC,OAAQ;AACzD;AACA,KAAK;;EAED,MAAME,WAAW,GAAGH,OAAO,KAAKC,OAAO;EACvCH,CAAC,CAACM,mBAAmB,CAACD,WAAW,EAAED,IAAI,CAAC;AAC1C,CAAC,CAAC"}