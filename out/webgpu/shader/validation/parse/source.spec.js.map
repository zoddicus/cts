{"version":3,"file":"source.spec.js","names":["description","makeTestGroup","ShaderValidationTest","g","test","desc","fn","t","code","expectCompileResult"],"sources":["../../../../../src/webgpu/shader/validation/parse/source.spec.ts"],"sourcesContent":["export const description = `Validation tests for source parsing`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { ShaderValidationTest } from '../shader_validation_test.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\ng.test('valid_source')\n  .desc(`Tests that a valid source is consumed successfully.`)\n  .fn(t => {\n    const code = `\n    @fragment\n    fn main() -> @location(0) vec4<f32> {\n      return vec4<f32>(.4, .2, .3, .1);\n    }`;\n    t.expectCompileResult(true, code);\n  });\n\ng.test('empty')\n  .desc(`Test that an empty source is consumed successfully.`)\n  .fn(t => {\n    t.expectCompileResult(true, '');\n  });\n\ng.test('invalid_source')\n  .desc(`Tests that a source which does not match the grammar fails.`)\n  .fn(t => {\n    t.expectCompileResult(false, 'invalid_source');\n  });\n"],"mappings":";;GAAA,OAAO,MAAMA,WAAW,GAAI,qCAAoC,CAEhE,SAASC,aAAa,QAAQ,4CAA4C;AAC1E,SAASC,oBAAoB,QAAQ,8BAA8B;;AAEnE,OAAO,MAAMC,CAAC,GAAGF,aAAa,CAACC,oBAAoB,CAAC;;AAEpDC,CAAC,CAACC,IAAI,CAAC,cAAc,CAAC;AACnBC,IAAI,CAAE,qDAAoD,CAAC;AAC3DC,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAMC,IAAI,GAAI;AAClB;AACA;AACA;AACA,MAAM;EACFD,CAAC,CAACE,mBAAmB,CAAC,IAAI,EAAED,IAAI,CAAC;AACnC,CAAC,CAAC;;AAEJL,CAAC,CAACC,IAAI,CAAC,OAAO,CAAC;AACZC,IAAI,CAAE,qDAAoD,CAAC;AAC3DC,EAAE,CAAC,CAAAC,CAAC,KAAI;EACPA,CAAC,CAACE,mBAAmB,CAAC,IAAI,EAAE,EAAE,CAAC;AACjC,CAAC,CAAC;;AAEJN,CAAC,CAACC,IAAI,CAAC,gBAAgB,CAAC;AACrBC,IAAI,CAAE,6DAA4D,CAAC;AACnEC,EAAE,CAAC,CAAAC,CAAC,KAAI;EACPA,CAAC,CAACE,mBAAmB,CAAC,KAAK,EAAE,gBAAgB,CAAC;AAChD,CAAC,CAAC"}