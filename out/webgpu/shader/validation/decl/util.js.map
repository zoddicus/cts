{"version":3,"file":"util.js","names":["kShaderStages","declareEntryPoint","arg","name","undefined","stage","body"],"sources":["../../../../../src/webgpu/shader/validation/decl/util.ts"],"sourcesContent":["/** An enumerator of shader stages */\nexport type ShaderStage = 'vertex' | 'fragment' | 'compute';\n\n/** The list of all shader stages */\nexport const kShaderStages = ['vertex', 'fragment', 'compute'] as const;\n\n/**\n * declareEntrypoint emits the WGSL to declare an entry point with the name, stage and body.\n * The generated function will have an appropriate return type and return statement, so that @p body\n * does not have to change between stage.\n * @param arg - arg specifies the\n * optional entry point function name, the shader stage, and the body of the\n * function, excluding any automatically generated return statements.\n * @returns the WGSL string for the entry point\n */\nexport function declareEntryPoint(arg: {\n  name?: string;\n  stage: ShaderStage;\n  body: string;\n}): string {\n  if (arg.name === undefined) {\n    arg.name = 'main';\n  }\n  switch (arg.stage) {\n    case 'vertex':\n      return `@vertex\nfn ${arg.name}() -> @builtin(position) vec4f {\n  ${arg.body}\n  return vec4f();\n}`;\n    case 'fragment':\n      return `@fragment\nfn ${arg.name}() {\n  ${arg.body}\n}`;\n    case 'compute':\n      return `@compute @workgroup_size(1)\nfn ${arg.name}() {\n  ${arg.body}\n}`;\n  }\n}\n"],"mappings":";AAAA;AAAA;AAGA;AACA,OAAO,MAAMA,aAAa,GAAG,CAAC,QAAQ,EAAE,UAAU,EAAE,SAAS,CAAU;;AAEvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,iBAAiB,CAACC,GAIjC;;;;AAAU;EACT,IAAIA,GAAG,CAACC,IAAI,KAAKC,SAAS,EAAE;IAC1BF,GAAG,CAACC,IAAI,GAAG,MAAM;EACnB;EACA,QAAQD,GAAG,CAACG,KAAK;IACf,KAAK,QAAQ;MACX,OAAQ;AACd,KAAKH,GAAG,CAACC,IAAK;AACd,IAAID,GAAG,CAACI,IAAK;AACb;AACA,EAAE;IACE,KAAK,UAAU;MACb,OAAQ;AACd,KAAKJ,GAAG,CAACC,IAAK;AACd,IAAID,GAAG,CAACI,IAAK;AACb,EAAE;IACE,KAAK,SAAS;MACZ,OAAQ;AACd,KAAKJ,GAAG,CAACC,IAAK;AACd,IAAID,GAAG,CAACI,IAAK;AACb,EAAE,CAAC;;AAEH"}