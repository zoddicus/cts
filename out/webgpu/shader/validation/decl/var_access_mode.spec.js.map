{"version":3,"file":"var_access_mode.spec.js","names":["description","makeTestGroup","keysOf","kAccessModeInfo","kAddressSpaceInfo","ShaderValidationTest","explicitSpaceExpander","getVarDeclShader","accessModeExpander","supportsRead","supportsWrite","kNonHandleAddressSpaces","filter","as","g","test","desc","specURL","params","u","combine","t","addressSpace","spell","explicitSpace","fn","prog","info","ok","spellAccessMode","accessModes","includes","accessMode","expectCompileResult","expand"],"sources":["../../../../../src/webgpu/shader/validation/decl/var_access_mode.spec.ts"],"sourcesContent":["export const description = `\n7.3 var Declarations\n\nThe access mode always has a default value, and except for variables in the\nstorage address space, must not be specified in the WGSL source. See ยง13.3 Address Spaces.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { keysOf } from '../../../../common/util/data_tables.js';\nimport { AddressSpace, kAccessModeInfo, kAddressSpaceInfo } from '../../types.js';\nimport { ShaderValidationTest } from '../shader_validation_test.js';\n\nimport {\n  explicitSpaceExpander,\n  getVarDeclShader,\n  accessModeExpander,\n  supportsRead,\n  supportsWrite,\n  ShaderStage,\n} from './util.js';\n\n// Address spaces that can hold an i32 variable.\nconst kNonHandleAddressSpaces = keysOf(kAddressSpaceInfo).filter(\n  as => as !== 'handle'\n) as AddressSpace[];\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\ng.test('explicit_access_mode')\n  .desc('Validate uses of an explicit access mode on a var declaration')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#var-decls')\n  .params(\n    u =>\n      u\n        .combine('addressSpace', kNonHandleAddressSpaces)\n        .combine('explicitSpace', [true, false])\n        // Only keep cases where:\n        //   *if* the address space must be specified on a var decl (e.g. var<private>)\n        //   then the address space will actually be specified in this test case.\n        .filter(t => kAddressSpaceInfo[t.addressSpace].spell !== 'must' || t.explicitSpace)\n        .combine('explicitAccess', [true])\n        .combine('accessMode', keysOf(kAccessModeInfo))\n        .combine('stage', ['compute' as ShaderStage]) // Only need to check compute shaders\n  )\n  .fn(t => {\n    const prog = getVarDeclShader(t.params);\n    const info = kAddressSpaceInfo[t.params.addressSpace];\n\n    const ok =\n      // The address space must be explicitly specified.\n      t.params.explicitSpace &&\n      // The address space must allow an access mode to be spelled, and the\n      // access mode must be in the list of modes for the address space.\n      info.spellAccessMode !== 'never' &&\n      info.accessModes.includes(t.params.accessMode);\n\n    t.expectCompileResult(ok, prog);\n  });\n\ng.test('implicit_access_mode')\n  .desc('Validate an implicit access mode on a var declaration')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#var-decls')\n  .params(\n    u =>\n      u\n        .combine('addressSpace', kNonHandleAddressSpaces)\n        .expand('explicitSpace', explicitSpaceExpander)\n        .combine('explicitAccess', [false])\n        .combine('accessMode', [''] as const)\n        .combine('stage', ['compute' as ShaderStage]) // Only need to check compute shaders\n  )\n  .fn(t => {\n    const prog = getVarDeclShader(t.params);\n\n    // 7.3 var Declarations\n    // \"The access mode always has a default value,..\"\n    const ok = true;\n\n    t.expectCompileResult(ok, prog);\n  });\n\ng.test('read_access')\n  .desc('A variable can be read from when the access mode permits')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#var-decls')\n  .params(\n    u =>\n      u\n        .combine('addressSpace', kNonHandleAddressSpaces)\n        .expand('explicitSpace', explicitSpaceExpander)\n        .combine('explicitAccess', [false, true])\n        .expand('accessMode', accessModeExpander)\n        .combine('stage', ['compute' as ShaderStage]) // Only need to check compute shaders\n  )\n  .fn(t => {\n    const prog = getVarDeclShader(t.params, 'let copy = x;');\n    const ok = supportsRead(t.params);\n    t.expectCompileResult(ok, prog);\n  });\n\ng.test('write_access')\n  .desc('A variable can be written to when the access mode permits')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#var-decls')\n  .params(\n    u =>\n      u\n        .combine('addressSpace', kNonHandleAddressSpaces)\n        .expand('explicitSpace', explicitSpaceExpander)\n        .combine('explicitAccess', [false, true])\n        .expand('accessMode', accessModeExpander)\n        .combine('stage', ['compute' as ShaderStage]) // Only need to check compute shaders\n  )\n  .fn(t => {\n    const prog = getVarDeclShader(t.params, 'x = 0;');\n    const ok = supportsWrite(t.params);\n    t.expectCompileResult(ok, prog);\n  });\n"],"mappings":"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"}