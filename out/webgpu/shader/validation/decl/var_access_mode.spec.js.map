{"version":3,"file":"var_access_mode.spec.js","names":["description","makeTestGroup","keysOf","kAccessModeInfo","kAddressSpaceInfo","ShaderValidationTest","explicitSpaceExpander","varDeclCompatibleAddressSpace","getVarDeclShader","accessModeExpander","supportsRead","supportsWrite","kNonHandleAddressSpaces","filter","as","g","test","desc","specURL","params","u","combine","t","fn","prog","info","addressSpace","ok","explicitSpace","spellAccessMode","accessModes","includes","accessMode","expectCompileResult","expand"],"sources":["../../../../../src/webgpu/shader/validation/decl/var_access_mode.spec.ts"],"sourcesContent":["export const description = `\n7.3 var Declarations\n\nThe access mode always has a default value, and except for variables in the\nstorage address space, must not be specified in the WGSL source. See ยง13.3 Address Spaces.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { keysOf } from '../../../../common/util/data_tables.js';\nimport { AddressSpace, kAccessModeInfo, kAddressSpaceInfo } from '../../types.js';\nimport { ShaderValidationTest } from '../shader_validation_test.js';\n\nimport {\n  explicitSpaceExpander,\n  varDeclCompatibleAddressSpace,\n  getVarDeclShader,\n  accessModeExpander,\n  supportsRead,\n  supportsWrite,\n  ShaderStage,\n} from './util.js';\n\n// Address spaces that can hold an i32 variable.\nconst kNonHandleAddressSpaces = keysOf(kAddressSpaceInfo).filter(\n  as => as !== 'handle'\n) as AddressSpace[];\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\ng.test('explicit_access_mode')\n  .desc('Validate uses of an explicit access mode on a var declaration')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#var-decls')\n  .params(\n    u =>\n      u\n        .combine('addressSpace', kNonHandleAddressSpaces)\n        .combine('explicitSpace', [true, false])\n        .filter(t => varDeclCompatibleAddressSpace(t))\n        .combine('explicitAccess', [true])\n        .combine('accessMode', keysOf(kAccessModeInfo))\n        .combine('stage', ['compute' as ShaderStage]) // Only need to check compute shaders\n  )\n  .fn(t => {\n    const prog = getVarDeclShader(t.params);\n    const info = kAddressSpaceInfo[t.params.addressSpace];\n\n    const ok =\n      // The address space must be explicitly specified.\n      t.params.explicitSpace &&\n      // The address space must allow an access mode to be spelled, and the\n      // access mode must be in the list of modes for the address space.\n      info.spellAccessMode !== 'never' &&\n      (info.accessModes as readonly string[]).includes(t.params.accessMode);\n\n    t.expectCompileResult(ok, prog);\n  });\n\ng.test('implicit_access_mode')\n  .desc('Validate an implicit access mode on a var declaration')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#var-decls')\n  .params(\n    u =>\n      u\n        .combine('addressSpace', kNonHandleAddressSpaces)\n        .expand('explicitSpace', explicitSpaceExpander)\n        .combine('explicitAccess', [false])\n        .combine('accessMode', [''] as const)\n        .combine('stage', ['compute' as ShaderStage]) // Only need to check compute shaders\n  )\n  .fn(t => {\n    const prog = getVarDeclShader(t.params);\n\n    // 7.3 var Declarations\n    // \"The access mode always has a default value,..\"\n    const ok = true;\n\n    t.expectCompileResult(ok, prog);\n  });\n\ng.test('read_access')\n  .desc('A variable can be read from when the access mode permits')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#var-decls')\n  .params(\n    u =>\n      u\n        .combine('addressSpace', kNonHandleAddressSpaces)\n        .expand('explicitSpace', explicitSpaceExpander)\n        .combine('explicitAccess', [false, true])\n        .expand('accessMode', accessModeExpander)\n        .combine('stage', ['compute' as ShaderStage]) // Only need to check compute shaders\n  )\n  .fn(t => {\n    const prog = getVarDeclShader(t.params, 'let copy = x;');\n    const ok = supportsRead(t.params);\n    t.expectCompileResult(ok, prog);\n  });\n\ng.test('write_access')\n  .desc('A variable can be written to when the access mode permits')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#var-decls')\n  .params(\n    u =>\n      u\n        .combine('addressSpace', kNonHandleAddressSpaces)\n        .expand('explicitSpace', explicitSpaceExpander)\n        .combine('explicitAccess', [false, true])\n        .expand('accessMode', accessModeExpander)\n        .combine('stage', ['compute' as ShaderStage]) // Only need to check compute shaders\n  )\n  .fn(t => {\n    const prog = getVarDeclShader(t.params, 'x = 0;');\n    const ok = supportsWrite(t.params);\n    t.expectCompileResult(ok, prog);\n  });\n"],"mappings":"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"}