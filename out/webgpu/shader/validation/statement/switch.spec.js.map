{"version":3,"file":"switch.spec.js","names":["description","makeTestGroup","scalarTypeOf","Type","ShaderValidationTest","g","kTestTypes","test","desc","params","u","combine","beforeAllSubcases","t","type","kind","selectDeviceOrSkipTestCase","fn","code","create","wgsl","pass","expectCompileResult","cond_type","case_type","case_a_type","case_b_type"],"sources":["../../../../../src/webgpu/shader/validation/statement/switch.spec.ts"],"sourcesContent":["export const description = `Validation tests for 'switch' statements'`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { scalarTypeOf, Type } from '../../../util/conversion.js';\nimport { ShaderValidationTest } from '../shader_validation_test.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\nconst kTestTypes = [\n  'bool',\n  'i32',\n  'u32',\n  'f32',\n  'f16',\n  'vec2f',\n  'vec3h',\n  'vec4u',\n  'vec3b',\n  'mat2x3f',\n  'mat4x2h',\n  'abstract-int',\n  'abstract-float',\n] as const;\n\ng.test('condition_type')\n  .desc(`Tests that a 'switch' condition must be of an integer type`)\n  .params(u => u.combine('type', kTestTypes))\n  .beforeAllSubcases(t => {\n    if (scalarTypeOf(Type[t.params.type]).kind === 'f16') {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(t => {\n    const type = Type[t.params.type];\n    const code = `\n${scalarTypeOf(type).kind === 'f16' ? 'enable f16;' : ''}\n\nfn f() -> bool {\n  switch ${type.create(1).wgsl()} {\n    case 1: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n`;\n\n    const pass =\n      t.params.type === 'i32' || t.params.type === 'u32' || t.params.type === 'abstract-int';\n    t.expectCompileResult(pass, code);\n  });\n\ng.test('condition_type_match_case_type')\n  .desc(`Tests that a 'switch' condition must have a common type with its case values`)\n  .params(u =>\n    u\n      .combine('cond_type', ['i32', 'u32', 'abstract-int'] as const)\n      .combine('case_type', ['i32', 'u32', 'abstract-int'] as const)\n  )\n  .fn(t => {\n    const code = `\nfn f() -> bool {\nswitch ${Type[t.params.cond_type].create(1).wgsl()} {\n  case ${Type[t.params.case_type].create(2).wgsl()}: {\n    return true;\n  }\n  default: {\n    return false;\n  }\n}\n}\n`;\n\n    const pass =\n      t.params.cond_type === t.params.case_type ||\n      t.params.cond_type === 'abstract-int' ||\n      t.params.case_type === 'abstract-int';\n    t.expectCompileResult(pass, code);\n  });\n\ng.test('case_types_match')\n  .desc(`Tests that switch case types must have a common type`)\n  .params(u =>\n    u\n      .combine('case_a_type', ['i32', 'u32', 'abstract-int'] as const)\n      .combine('case_b_type', ['i32', 'u32', 'abstract-int'] as const)\n  )\n  .fn(t => {\n    const code = `\nfn f() -> bool {\nswitch 1 {\n  case ${Type[t.params.case_a_type].create(1).wgsl()}: {\n    return true;\n  }\n  case ${Type[t.params.case_b_type].create(2).wgsl()}: {\n    return true;\n  }\n  default: {\n    return false;\n  }\n}\n}\n`;\n\n    const pass =\n      t.params.case_a_type === t.params.case_b_type ||\n      t.params.case_a_type === 'abstract-int' ||\n      t.params.case_b_type === 'abstract-int';\n    t.expectCompileResult(pass, code);\n  });\n"],"mappings":"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"}