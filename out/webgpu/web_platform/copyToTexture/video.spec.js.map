{"version":3,"file":"video.spec.js","names":["description","makeTestGroup","GPUTest","TextureTestMixin","startPlayingAndWaitForVideo","getVideoElement","getVideoFrameFromVideoElement","convertToUnorm8","kPredefinedColorSpace","kVideoNames","kVideoInfo","kFormat","g","test","desc","params","u","combine","fn","t","videoName","sourceType","srcDoFlipYDuringCopy","dstColorSpace","VideoFrame","skip","videoElement","source","width","height","codedWidth","codedHeight","videoWidth","videoHeight","dstTexture","device","createTexture","format","size","depthOrArrayLayers","usage","GPUTextureUsage","COPY_SRC","COPY_DST","RENDER_ATTACHMENT","queue","copyExternalImageToTexture","origin","x","y","flipY","texture","colorSpace","premultipliedAlpha","expect","presentColors","expectSinglePixelComparisonsAreOkInTexture","coord","exp","bottomLeftColor","bottomRightColor","topLeftColor","topRightColor","close"],"sources":["../../../../src/webgpu/web_platform/copyToTexture/video.spec.ts"],"sourcesContent":["export const description = `\ncopyToTexture with HTMLVideoElement and VideoFrame.\n\n- videos with various encodings/formats (webm vp8, webm vp9, ogg theora, mp4), video color spaces\n  (bt.601, bt.709, bt.2020) and dst color spaces(display-p3, srgb).\n\n  TODO: Test video in BT.2020 color space\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { GPUTest, TextureTestMixin } from '../../gpu_test.js';\nimport {\n  startPlayingAndWaitForVideo,\n  getVideoElement,\n  getVideoFrameFromVideoElement,\n  convertToUnorm8,\n  kPredefinedColorSpace,\n  kVideoNames,\n  kVideoInfo,\n} from '../../web_platform/util.js';\n\nconst kFormat = 'rgba8unorm';\n\nexport const g = makeTestGroup(TextureTestMixin(GPUTest));\n\ng.test('copy_from_video')\n  .desc(\n    `\nTest HTMLVideoElement and VideoFrame can be copied to WebGPU texture correctly.\n\nIt creates HTMLVideoElement with videos under Resource folder.\n\n  Then call copyExternalImageToTexture() to do a full copy to the 0 mipLevel\n  of dst texture, and read the contents out to compare with the ImageBitmap contents.\n\n  If 'flipY' in 'GPUImageCopyExternalImage' is set to 'true', copy will ensure the result\n  is flipped.\n\n  The tests covers:\n  - Video comes from different color spaces.\n  - Valid 'flipY' config in 'GPUImageCopyExternalImage' (named 'srcDoFlipYDuringCopy' in cases)\n  - TODO: partial copy tests should be added\n  - TODO: all valid dstColorFormat tests should be added.\n`\n  )\n  .params(u =>\n    u //\n      .combine('videoName', kVideoNames)\n      .combine('sourceType', ['VideoElement', 'VideoFrame'] as const)\n      .combine('srcDoFlipYDuringCopy', [true, false])\n      .combine('dstColorSpace', kPredefinedColorSpace)\n  )\n  .fn(async t => {\n    const { videoName, sourceType, srcDoFlipYDuringCopy, dstColorSpace } = t.params;\n\n    if (sourceType === 'VideoFrame' && typeof VideoFrame === 'undefined') {\n      t.skip('WebCodec is not supported');\n    }\n\n    const videoElement = getVideoElement(t, videoName);\n\n    await startPlayingAndWaitForVideo(videoElement, async () => {\n      let source, width, height;\n      if (sourceType === 'VideoFrame') {\n        source = await getVideoFrameFromVideoElement(t, videoElement);\n        width = source.codedWidth;\n        height = source.codedHeight;\n      } else {\n        source = videoElement;\n        width = source.videoWidth;\n        height = source.videoHeight;\n      }\n\n      const dstTexture = t.device.createTexture({\n        format: kFormat,\n        size: { width, height, depthOrArrayLayers: 1 },\n        usage:\n          GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,\n      });\n\n      t.queue.copyExternalImageToTexture(\n        {\n          source,\n          origin: { x: 0, y: 0 },\n          flipY: srcDoFlipYDuringCopy,\n        },\n        {\n          texture: dstTexture,\n          origin: { x: 0, y: 0 },\n          colorSpace: 'srgb',\n          premultipliedAlpha: true,\n        },\n        { width, height, depthOrArrayLayers: 1 }\n      );\n\n      const expect = kVideoInfo[videoName].presentColors[dstColorSpace];\n\n      if (srcDoFlipYDuringCopy) {\n        t.expectSinglePixelComparisonsAreOkInTexture({ texture: dstTexture }, [\n          // Flipped top-left.\n          {\n            coord: { x: width * 0.25, y: height * 0.25 },\n            exp: convertToUnorm8(expect.bottomLeftColor),\n          },\n          // Flipped top-right.\n          {\n            coord: { x: width * 0.75, y: height * 0.25 },\n            exp: convertToUnorm8(expect.bottomRightColor),\n          },\n          // Flipped bottom-left.\n          {\n            coord: { x: width * 0.25, y: height * 0.75 },\n            exp: convertToUnorm8(expect.topLeftColor),\n          },\n          // Flipped bottom-right.\n          {\n            coord: { x: width * 0.75, y: height * 0.75 },\n            exp: convertToUnorm8(expect.topRightColor),\n          },\n        ]);\n      } else {\n        t.expectSinglePixelComparisonsAreOkInTexture({ texture: dstTexture }, [\n          // Top-left.\n          {\n            coord: { x: width * 0.25, y: height * 0.25 },\n            exp: convertToUnorm8(expect.topLeftColor),\n          },\n          // Top-right.\n          {\n            coord: { x: width * 0.75, y: height * 0.25 },\n            exp: convertToUnorm8(expect.topRightColor),\n          },\n          // Bottom-left.\n          {\n            coord: { x: width * 0.25, y: height * 0.75 },\n            exp: convertToUnorm8(expect.bottomLeftColor),\n          },\n          // Bottom-right.\n          {\n            coord: { x: width * 0.75, y: height * 0.75 },\n            exp: convertToUnorm8(expect.bottomRightColor),\n          },\n        ]);\n      }\n\n      if (source instanceof VideoFrame) {\n        source.close();\n      }\n    });\n  });\n"],"mappings":"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"}