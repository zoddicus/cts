{"version":3,"file":"worker.spec.js","names":["description","Fixture","makeTestGroup","assert","g","isNode","process","versions","node","undefined","test","desc","fn","t","skip","url","launchDedicatedWorker","result","error","launchSharedWorker"],"sources":["../../../../src/webgpu/web_platform/worker/worker.spec.ts"],"sourcesContent":["export const description = `\nTests WebGPU is available in a dedicated worker and a shared worker.\n\nNote: The CTS test can be run respectively in a dedicated worker and a shared worker by\npassing in worker=dedicated and worker=shared as a query parameter. These tests\nare specifically to check that WebGPU is available in a dedicated worker and a shared worker.\n`;\n\nimport { Fixture } from '../../../common/framework/fixture.js';\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { assert } from '../../../common/util/util.js';\n\nexport const g = makeTestGroup(Fixture);\n\nfunction isNode(): boolean {\n  return typeof process !== 'undefined' && process?.versions?.node !== undefined;\n}\n\ng.test('dedicated_worker')\n  .desc(`test WebGPU is available in dedicated workers and check for basic functionality`)\n  .fn(async t => {\n    if (isNode()) {\n      t.skip('node does not support 100% compatible workers');\n      return;\n    }\n    // Note: we load worker_launcher dynamically because ts-node support\n    // is using commonjs which doesn't support import.meta. Further,\n    // we need to put the url in a string add pass the string to import\n    // otherwise typescript tries to parse the file which again, fails.\n    // worker_launcher.js is excluded in node.tsconfig.json.\n    const url = './worker_launcher.js';\n    const { launchDedicatedWorker } = await import(url);\n    const result = await launchDedicatedWorker();\n    assert(result.error === undefined, `should be no error from worker but was: ${result.error}`);\n  });\n\ng.test('shared_worker')\n  .desc(`test WebGPU is available in shared workers and check for basic functionality`)\n  .fn(async t => {\n    if (isNode()) {\n      t.skip('node does not support 100% compatible workers');\n      return;\n    }\n    // Note: we load worker_launcher dynamically because ts-node support\n    // is using commonjs which doesn't support import.meta. Further,\n    // we need to put the url in a string add pass the string to import\n    // otherwise typescript tries to parse the file which again, fails.\n    // worker_launcher.js is excluded in node.tsconfig.json.\n    const url = './worker_launcher.js';\n    const { launchSharedWorker } = await import(url);\n    const result = await launchSharedWorker();\n    assert(result.error === undefined, `should be no error from worker but was: ${result.error}`);\n  });\n"],"mappings":";;GAAA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA,CAAC,CAED,SAASC,OAAO,QAAQ,sCAAsC;AAC9D,SAASC,aAAa,QAAQ,yCAAyC;AACvE,SAASC,MAAM,QAAQ,8BAA8B;;AAErD,OAAO,MAAMC,CAAC,GAAGF,aAAa,CAACD,OAAO,CAAC;;AAEvC,SAASI,MAAMA,CAAA,EAAY;EACzB,OAAO,OAAOC,OAAO,KAAK,WAAW,IAAIA,OAAO,EAAEC,QAAQ,EAAEC,IAAI,KAAKC,SAAS;AAChF;;AAEAL,CAAC,CAACM,IAAI,CAAC,kBAAkB,CAAC;AACvBC,IAAI,CAAE,iFAAgF,CAAC;AACvFC,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,IAAIR,MAAM,CAAC,CAAC,EAAE;IACZQ,CAAC,CAACC,IAAI,CAAC,+CAA+C,CAAC;IACvD;EACF;EACA;EACA;EACA;EACA;EACA;EACA,MAAMC,GAAG,GAAG,sBAAsB;EAClC,MAAM,EAAEC,qBAAqB,CAAC,CAAC,GAAG,MAAM,MAAM,CAACD,GAAG,CAAC;EACnD,MAAME,MAAM,GAAG,MAAMD,qBAAqB,CAAC,CAAC;EAC5Cb,MAAM,CAACc,MAAM,CAACC,KAAK,KAAKT,SAAS,EAAG,2CAA0CQ,MAAM,CAACC,KAAM,EAAC,CAAC;AAC/F,CAAC,CAAC;;AAEJd,CAAC,CAACM,IAAI,CAAC,eAAe,CAAC;AACpBC,IAAI,CAAE,8EAA6E,CAAC;AACpFC,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,IAAIR,MAAM,CAAC,CAAC,EAAE;IACZQ,CAAC,CAACC,IAAI,CAAC,+CAA+C,CAAC;IACvD;EACF;EACA;EACA;EACA;EACA;EACA;EACA,MAAMC,GAAG,GAAG,sBAAsB;EAClC,MAAM,EAAEI,kBAAkB,CAAC,CAAC,GAAG,MAAM,MAAM,CAACJ,GAAG,CAAC;EAChD,MAAME,MAAM,GAAG,MAAME,kBAAkB,CAAC,CAAC;EACzChB,MAAM,CAACc,MAAM,CAACC,KAAK,KAAKT,SAAS,EAAG,2CAA0CQ,MAAM,CAACC,KAAM,EAAC,CAAC;AAC/F,CAAC,CAAC"}