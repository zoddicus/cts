{"version":3,"file":"video.spec.js","names":["description","makeTestGroup","GPUTest","TextureTestMixin","startPlayingAndWaitForVideo","getVideoFrameFromVideoElement","getVideoElement","kVideoExpectations","kVideoRotationExpectations","kHeight","kWidth","kFormat","g","createExternalTextureSamplingTestPipeline","t","pipeline","device","createRenderPipeline","layout","vertex","module","createShaderModule","code","entryPoint","fragment","targets","format","primitive","topology","createExternalTextureSamplingTestBindGroup","checkNonStandardIsZeroCopy","source","linearSampler","createSampler","externalTexture","importExternalTexture","expectZeroCopyNonStandard","bindGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","expect","isZeroCopy","checkNonStandardIsZeroCopyIfAvailable","GPUExternalTexture","prototype","hasOwnProperty","test","desc","params","u","combineWithParams","combine","fn","sourceType","VideoFrame","skip","videoElement","videoName","colorAttachment","createTexture","size","width","height","depthOrArrayLayers","usage","GPUTextureUsage","COPY_SRC","RENDER_ATTACHMENT","commandEncoder","createCommandEncoder","passEncoder","beginRenderPass","colorAttachments","view","createView","clearValue","r","b","a","loadOp","storeOp","setPipeline","setBindGroup","draw","end","queue","submit","finish","expectSinglePixelComparisonsAreOkInTexture","texture","coord","x","y","exp","_yellowExpectation","_redExpectation","_blueExpectation","_greenExpectation","close","_topLeftExpectation","_topRightExpectation","_bottomLeftExpectation","_bottomRightExpectation","srcVideoHeight","srcVideoWidth","cropParams","subRect","color","cropParam","visibleRect","outputTexture","STORAGE_BINDING","createComputePipeline","compute","bg","encoder","pass","beginComputePass","dispatchWorkgroups"],"sources":["../../../../src/webgpu/web_platform/external_texture/video.spec.ts"],"sourcesContent":["export const description = `\nTests for external textures from HTMLVideoElement (and other video-type sources?).\n\n- videos with various encodings/formats (webm vp8, webm vp9, ogg theora, mp4), color spaces\n  (bt.601, bt.709, bt.2020)\n\nTODO: consider whether external_texture and copyToTexture video tests should be in the same file\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { GPUTest, TextureTestMixin } from '../../gpu_test.js';\nimport {\n  startPlayingAndWaitForVideo,\n  getVideoFrameFromVideoElement,\n  getVideoElement,\n  kVideoExpectations,\n  kVideoRotationExpectations,\n} from '../../web_platform/util.js';\n\nconst kHeight = 16;\nconst kWidth = 16;\nconst kFormat = 'rgba8unorm';\n\nexport const g = makeTestGroup(TextureTestMixin(GPUTest));\n\nfunction createExternalTextureSamplingTestPipeline(t: GPUTest): GPURenderPipeline {\n  const pipeline = t.device.createRenderPipeline({\n    layout: 'auto',\n    vertex: {\n      module: t.device.createShaderModule({\n        code: `\n        @vertex fn main(@builtin(vertex_index) VertexIndex : u32) -> @builtin(position) vec4<f32> {\n            var pos = array<vec4<f32>, 6>(\n              vec4<f32>( 1.0,  1.0, 0.0, 1.0),\n              vec4<f32>( 1.0, -1.0, 0.0, 1.0),\n              vec4<f32>(-1.0, -1.0, 0.0, 1.0),\n              vec4<f32>( 1.0,  1.0, 0.0, 1.0),\n              vec4<f32>(-1.0, -1.0, 0.0, 1.0),\n              vec4<f32>(-1.0,  1.0, 0.0, 1.0)\n            );\n            return pos[VertexIndex];\n        }\n        `,\n      }),\n      entryPoint: 'main',\n    },\n    fragment: {\n      module: t.device.createShaderModule({\n        code: `\n        @group(0) @binding(0) var s : sampler;\n        @group(0) @binding(1) var t : texture_external;\n\n        @fragment fn main(@builtin(position) FragCoord : vec4<f32>)\n                                 -> @location(0) vec4<f32> {\n            return textureSampleBaseClampToEdge(t, s, FragCoord.xy / vec2<f32>(16.0, 16.0));\n        }\n        `,\n      }),\n      entryPoint: 'main',\n      targets: [\n        {\n          format: kFormat,\n        },\n      ],\n    },\n    primitive: { topology: 'triangle-list' },\n  });\n\n  return pipeline;\n}\n\nfunction createExternalTextureSamplingTestBindGroup(\n  t: GPUTest,\n  checkNonStandardIsZeroCopy: true | undefined,\n  source: HTMLVideoElement | VideoFrame,\n  pipeline: GPURenderPipeline\n): GPUBindGroup {\n  const linearSampler = t.device.createSampler();\n\n  const externalTexture = t.device.importExternalTexture({\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    source: source as any,\n  });\n\n  if (checkNonStandardIsZeroCopy) {\n    expectZeroCopyNonStandard(t, externalTexture);\n  }\n  const bindGroup = t.device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [\n      {\n        binding: 0,\n        resource: linearSampler,\n      },\n      {\n        binding: 1,\n        resource: externalTexture,\n      },\n    ],\n  });\n\n  return bindGroup;\n}\n\n/**\n * Expect the non-standard `externalTexture.isZeroCopy` is true.\n */\nfunction expectZeroCopyNonStandard(t: GPUTest, externalTexture: GPUExternalTexture): void {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  t.expect((externalTexture as any).isZeroCopy, '0-copy import failed.');\n}\n\n/**\n * `externalTexture.isZeroCopy` is a non-standard Chrome API for testing only.\n * It is exposed by enabling chrome://flags/#enable-webgpu-developer-features\n *\n * If the API is available, this function adds a parameter `checkNonStandardIsZeroCopy`.\n * Cases with that parameter set to `true` will fail if `externalTexture.isZeroCopy` is not true.\n */\nfunction checkNonStandardIsZeroCopyIfAvailable(): { checkNonStandardIsZeroCopy?: true }[] {\n  if (\n    typeof GPUExternalTexture !== 'undefined' &&\n    // eslint-disable-next-line no-prototype-builtins\n    GPUExternalTexture.prototype.hasOwnProperty('isZeroCopy')\n  ) {\n    return [{}, { checkNonStandardIsZeroCopy: true }];\n  } else {\n    return [{}];\n  }\n}\n\ng.test('importExternalTexture,sample')\n  .desc(\n    `\nTests that we can import an HTMLVideoElement/VideoFrame into a GPUExternalTexture, sample from it\nfor several combinations of video format and color space.\n`\n  )\n  .params(u =>\n    u //\n      .combineWithParams(checkNonStandardIsZeroCopyIfAvailable())\n      .combine('sourceType', ['VideoElement', 'VideoFrame'] as const)\n      .combineWithParams(kVideoExpectations)\n  )\n  .fn(async t => {\n    const sourceType = t.params.sourceType;\n    if (sourceType === 'VideoFrame' && typeof VideoFrame === 'undefined') {\n      t.skip('WebCodec is not supported');\n    }\n\n    const videoElement = getVideoElement(t, t.params.videoName);\n\n    await startPlayingAndWaitForVideo(videoElement, async () => {\n      const source =\n        sourceType === 'VideoFrame'\n          ? await getVideoFrameFromVideoElement(t, videoElement)\n          : videoElement;\n\n      const colorAttachment = t.device.createTexture({\n        format: kFormat,\n        size: { width: kWidth, height: kHeight, depthOrArrayLayers: 1 },\n        usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n      });\n\n      const pipeline = createExternalTextureSamplingTestPipeline(t);\n      const bindGroup = createExternalTextureSamplingTestBindGroup(\n        t,\n        t.params.checkNonStandardIsZeroCopy,\n        source,\n        pipeline\n      );\n\n      const commandEncoder = t.device.createCommandEncoder();\n      const passEncoder = commandEncoder.beginRenderPass({\n        colorAttachments: [\n          {\n            view: colorAttachment.createView(),\n            clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n            loadOp: 'clear',\n            storeOp: 'store',\n          },\n        ],\n      });\n      passEncoder.setPipeline(pipeline);\n      passEncoder.setBindGroup(0, bindGroup);\n      passEncoder.draw(6);\n      passEncoder.end();\n      t.device.queue.submit([commandEncoder.finish()]);\n\n      // For validation, we sample a few pixels away from the edges to avoid compression\n      // artifacts.\n      t.expectSinglePixelComparisonsAreOkInTexture({ texture: colorAttachment }, [\n        // Top-left should be yellow.\n        { coord: { x: kWidth * 0.25, y: kHeight * 0.25 }, exp: t.params._yellowExpectation },\n        // Top-right should be red.\n        { coord: { x: kWidth * 0.75, y: kHeight * 0.25 }, exp: t.params._redExpectation },\n        // Bottom-left should be blue.\n        { coord: { x: kWidth * 0.25, y: kHeight * 0.75 }, exp: t.params._blueExpectation },\n        // Bottom-right should be green.\n        { coord: { x: kWidth * 0.75, y: kHeight * 0.75 }, exp: t.params._greenExpectation },\n      ]);\n\n      if (sourceType === 'VideoFrame') (source as VideoFrame).close();\n    });\n  });\n\ng.test('importExternalTexture,sampleWithRotationMetadata')\n  .desc(\n    `\nTests that when importing an HTMLVideoElement/VideoFrame into a GPUExternalTexture, sampling from\nit will honor rotation metadata.\n`\n  )\n  .params(u =>\n    u //\n      .combineWithParams(checkNonStandardIsZeroCopyIfAvailable())\n      .combine('sourceType', ['VideoElement', 'VideoFrame'] as const)\n      .combineWithParams(kVideoRotationExpectations)\n  )\n  .fn(async t => {\n    const sourceType = t.params.sourceType;\n    const videoElement = getVideoElement(t, t.params.videoName);\n\n    await startPlayingAndWaitForVideo(videoElement, async () => {\n      const source =\n        sourceType === 'VideoFrame'\n          ? await getVideoFrameFromVideoElement(t, videoElement)\n          : videoElement;\n\n      const colorAttachment = t.device.createTexture({\n        format: kFormat,\n        size: { width: kWidth, height: kHeight, depthOrArrayLayers: 1 },\n        usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n      });\n\n      const pipeline = createExternalTextureSamplingTestPipeline(t);\n      const bindGroup = createExternalTextureSamplingTestBindGroup(\n        t,\n        t.params.checkNonStandardIsZeroCopy,\n        source,\n        pipeline\n      );\n\n      const commandEncoder = t.device.createCommandEncoder();\n      const passEncoder = commandEncoder.beginRenderPass({\n        colorAttachments: [\n          {\n            view: colorAttachment.createView(),\n            clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n            loadOp: 'clear',\n            storeOp: 'store',\n          },\n        ],\n      });\n      passEncoder.setPipeline(pipeline);\n      passEncoder.setBindGroup(0, bindGroup);\n      passEncoder.draw(6);\n      passEncoder.end();\n      t.device.queue.submit([commandEncoder.finish()]);\n\n      // For validation, we sample a few pixels away from the edges to avoid compression\n      // artifacts.\n      t.expectSinglePixelComparisonsAreOkInTexture({ texture: colorAttachment }, [\n        { coord: { x: kWidth * 0.25, y: kHeight * 0.25 }, exp: t.params._topLeftExpectation },\n        { coord: { x: kWidth * 0.75, y: kHeight * 0.25 }, exp: t.params._topRightExpectation },\n        { coord: { x: kWidth * 0.25, y: kHeight * 0.75 }, exp: t.params._bottomLeftExpectation },\n        { coord: { x: kWidth * 0.75, y: kHeight * 0.75 }, exp: t.params._bottomRightExpectation },\n      ]);\n\n      if (sourceType === 'VideoFrame') (source as VideoFrame).close();\n    });\n  });\n\ng.test('importExternalTexture,sampleWithVideoFrameWithVisibleRectParam')\n  .desc(\n    `\nTests that we can import VideoFrames and sample the correct sub-rectangle when visibleRect\nparameters are present.\n`\n  )\n  .params(u =>\n    u //\n      .combineWithParams(checkNonStandardIsZeroCopyIfAvailable())\n      .combineWithParams(kVideoExpectations)\n  )\n  .fn(async t => {\n    const videoElement = getVideoElement(t, t.params.videoName);\n\n    await startPlayingAndWaitForVideo(videoElement, async () => {\n      const source = await getVideoFrameFromVideoElement(t, videoElement);\n\n      // All tested videos are derived from an image showing yellow, red, blue or green in each\n      // quadrant. In this test we crop the video to each quadrant and check that desired color\n      // is sampled from each corner of the cropped image.\n      const srcVideoHeight = 240;\n      const srcVideoWidth = 320;\n      const cropParams = [\n        // Top left (yellow)\n        {\n          subRect: { x: 0, y: 0, width: srcVideoWidth / 2, height: srcVideoHeight / 2 },\n          color: t.params._yellowExpectation,\n        },\n        // Top right (red)\n        {\n          subRect: {\n            x: srcVideoWidth / 2,\n            y: 0,\n            width: srcVideoWidth / 2,\n            height: srcVideoHeight / 2,\n          },\n          color: t.params._redExpectation,\n        },\n        // Bottom left (blue)\n        {\n          subRect: {\n            x: 0,\n            y: srcVideoHeight / 2,\n            width: srcVideoWidth / 2,\n            height: srcVideoHeight / 2,\n          },\n          color: t.params._blueExpectation,\n        },\n        // Bottom right (green)\n        {\n          subRect: {\n            x: srcVideoWidth / 2,\n            y: srcVideoHeight / 2,\n            width: srcVideoWidth / 2,\n            height: srcVideoHeight / 2,\n          },\n          color: t.params._greenExpectation,\n        },\n      ];\n\n      for (const cropParam of cropParams) {\n        // MAINTENANCE_TODO: remove cast with TypeScript 4.9.6+.\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const subRect = new VideoFrame(source as any, { visibleRect: cropParam.subRect });\n\n        const colorAttachment = t.device.createTexture({\n          format: kFormat,\n          size: { width: kWidth, height: kHeight, depthOrArrayLayers: 1 },\n          usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n        });\n\n        const pipeline = createExternalTextureSamplingTestPipeline(t);\n        const bindGroup = createExternalTextureSamplingTestBindGroup(\n          t,\n          t.params.checkNonStandardIsZeroCopy,\n          subRect,\n          pipeline\n        );\n\n        const commandEncoder = t.device.createCommandEncoder();\n        const passEncoder = commandEncoder.beginRenderPass({\n          colorAttachments: [\n            {\n              view: colorAttachment.createView(),\n              clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n              loadOp: 'clear',\n              storeOp: 'store',\n            },\n          ],\n        });\n        passEncoder.setPipeline(pipeline);\n        passEncoder.setBindGroup(0, bindGroup);\n        passEncoder.draw(6);\n        passEncoder.end();\n        t.device.queue.submit([commandEncoder.finish()]);\n\n        // For validation, we sample a few pixels away from the edges to avoid compression\n        // artifacts.\n        t.expectSinglePixelComparisonsAreOkInTexture({ texture: colorAttachment }, [\n          { coord: { x: kWidth * 0.1, y: kHeight * 0.1 }, exp: cropParam.color },\n          { coord: { x: kWidth * 0.9, y: kHeight * 0.1 }, exp: cropParam.color },\n          { coord: { x: kWidth * 0.1, y: kHeight * 0.9 }, exp: cropParam.color },\n          { coord: { x: kWidth * 0.9, y: kHeight * 0.9 }, exp: cropParam.color },\n        ]);\n\n        subRect.close();\n      }\n\n      source.close();\n    });\n  });\ng.test('importExternalTexture,compute')\n  .desc(\n    `\nTests that we can import an HTMLVideoElement/VideoFrame into a GPUExternalTexture and use it in a\ncompute shader, for several combinations of video format and color space.\n`\n  )\n  .params(u =>\n    u //\n      .combineWithParams(checkNonStandardIsZeroCopyIfAvailable())\n      .combine('sourceType', ['VideoElement', 'VideoFrame'] as const)\n      .combineWithParams(kVideoExpectations)\n  )\n  .fn(async t => {\n    const sourceType = t.params.sourceType;\n    if (sourceType === 'VideoFrame' && typeof VideoFrame === 'undefined') {\n      t.skip('WebCodec is not supported');\n    }\n\n    const videoElement = getVideoElement(t, t.params.videoName);\n\n    await startPlayingAndWaitForVideo(videoElement, async () => {\n      const source =\n        sourceType === 'VideoFrame'\n          ? await getVideoFrameFromVideoElement(t, videoElement)\n          : videoElement;\n      const externalTexture = t.device.importExternalTexture({\n        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n        source: source as any,\n      });\n      if (t.params.checkNonStandardIsZeroCopy) {\n        expectZeroCopyNonStandard(t, externalTexture);\n      }\n      const outputTexture = t.device.createTexture({\n        format: 'rgba8unorm',\n        size: [2, 2, 1],\n        usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.STORAGE_BINDING,\n      });\n\n      const pipeline = t.device.createComputePipeline({\n        layout: 'auto',\n        compute: {\n          // Shader loads 4 pixels near each corner, and then store them in a storage texture.\n          module: t.device.createShaderModule({\n            code: `\n              @group(0) @binding(0) var t : texture_external;\n              @group(0) @binding(1) var outImage : texture_storage_2d<rgba8unorm, write>;\n\n              @compute @workgroup_size(1) fn main() {\n                var yellow : vec4<f32> = textureLoad(t, vec2<i32>(80, 60));\n                textureStore(outImage, vec2<i32>(0, 0), yellow);\n                var red : vec4<f32> = textureLoad(t, vec2<i32>(240, 60));\n                textureStore(outImage, vec2<i32>(0, 1), red);\n                var blue : vec4<f32> = textureLoad(t, vec2<i32>(80, 180));\n                textureStore(outImage, vec2<i32>(1, 0), blue);\n                var green : vec4<f32> = textureLoad(t, vec2<i32>(240, 180));\n                textureStore(outImage, vec2<i32>(1, 1), green);\n                return;\n              }\n            `,\n          }),\n          entryPoint: 'main',\n        },\n      });\n\n      const bg = t.device.createBindGroup({\n        entries: [\n          { binding: 0, resource: externalTexture },\n          { binding: 1, resource: outputTexture.createView() },\n        ],\n        layout: pipeline.getBindGroupLayout(0),\n      });\n\n      const encoder = t.device.createCommandEncoder();\n      const pass = encoder.beginComputePass();\n      pass.setPipeline(pipeline);\n      pass.setBindGroup(0, bg);\n      pass.dispatchWorkgroups(1);\n      pass.end();\n      t.device.queue.submit([encoder.finish()]);\n\n      t.expectSinglePixelComparisonsAreOkInTexture({ texture: outputTexture }, [\n        // Top-left should be yellow.\n        { coord: { x: 0, y: 0 }, exp: t.params._yellowExpectation },\n        // Top-right should be red.\n        { coord: { x: 0, y: 1 }, exp: t.params._redExpectation },\n        // Bottom-left should be blue.\n        { coord: { x: 1, y: 0 }, exp: t.params._blueExpectation },\n        // Bottom-right should be green.\n        { coord: { x: 1, y: 1 }, exp: t.params._greenExpectation },\n      ]);\n\n      if (sourceType === 'VideoFrame') (source as VideoFrame).close();\n    });\n  });\n"],"mappings":"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"}