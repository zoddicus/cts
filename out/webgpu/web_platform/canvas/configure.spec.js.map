{"version":3,"file":"configure.spec.js","names":["description","makeTestGroup","assert","kCanvasTextureFormats","kTextureUsages","GPUConst","kAllTextureFormats","kFeaturesForFormats","kTextureFormats","filterFormatsByFeature","viewCompatible","GPUTest","kAllCanvasTypes","createCanvas","g","test","desc","params","u","combine","fn","t","canvasType","canvas","ctx","getContext","GPUCanvasContext","configure","device","format","currentTexture","getCurrentTexture","expect","usage","GPUTextureUsage","RENDER_ATTACHMENT","dimension","width","height","depthOrArrayLayers","mipLevelCount","sampleCount","shouldThrow","unconfigure","beforeAllSubcases","selectDeviceForTextureFormatOrSkipTestCase","validFormat","canvasFormat","expectValidationError","GPUTexture","beginSubcases","expand","usageSet","Set","usage0","usage1","add","TextureUsage","encoder","createCommandEncoder","pass","beginRenderPass","colorAttachments","view","createView","clearValue","loadOp","storeOp","end","queue","submit","finish","TEXTURE_BINDING","bgl","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","FRAGMENT","texture","createBindGroup","layout","resource","STORAGE_BINDING","storageTexture","access","COPY_DST","rgbaData","Uint8Array","writeTexture","COPY_SRC","size","dstTexture","createTexture","copyTextureToTexture","alphaMode","zeroDimension","viewFormatFeature","selectDeviceOrSkipTestCase","viewFormat","skipIfTextureFormatNotSupported","compatible","viewFormats"],"sources":["../../../../src/webgpu/web_platform/canvas/configure.spec.ts"],"sourcesContent":["export const description = `\nTests for GPUCanvasContext.configure.\n\nTODO:\n- Test colorSpace\n- Test viewFormats\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { assert } from '../../../common/util/util.js';\nimport { kCanvasTextureFormats, kTextureUsages } from '../../capability_info.js';\nimport { GPUConst } from '../../constants.js';\nimport {\n  kAllTextureFormats,\n  kFeaturesForFormats,\n  kTextureFormats,\n  filterFormatsByFeature,\n  viewCompatible,\n} from '../../format_info.js';\nimport { GPUTest } from '../../gpu_test.js';\nimport { kAllCanvasTypes, createCanvas } from '../../util/create_elements.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('defaults')\n  .desc(\n    `\n    Ensure that the defaults for GPUCanvasConfiguration are correct.\n    `\n  )\n  .params(u =>\n    u //\n      .combine('canvasType', kAllCanvasTypes)\n  )\n  .fn(t => {\n    const { canvasType } = t.params;\n    const canvas = createCanvas(t, canvasType, 2, 2);\n    const ctx = canvas.getContext('webgpu');\n    assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n    ctx.configure({\n      device: t.device,\n      format: 'rgba8unorm',\n    });\n\n    const currentTexture = ctx.getCurrentTexture();\n    t.expect(currentTexture.format === 'rgba8unorm');\n    t.expect(currentTexture.usage === GPUTextureUsage.RENDER_ATTACHMENT);\n    t.expect(currentTexture.dimension === '2d');\n    t.expect(currentTexture.width === canvas.width);\n    t.expect(currentTexture.height === canvas.height);\n    t.expect(currentTexture.depthOrArrayLayers === 1);\n    t.expect(currentTexture.mipLevelCount === 1);\n    t.expect(currentTexture.sampleCount === 1);\n  });\n\ng.test('device')\n  .desc(\n    `\n    Ensure that configure reacts appropriately to various device states.\n    `\n  )\n  .params(u =>\n    u //\n      .combine('canvasType', kAllCanvasTypes)\n  )\n  .fn(t => {\n    const { canvasType } = t.params;\n    const canvas = createCanvas(t, canvasType, 2, 2);\n    const ctx = canvas.getContext('webgpu');\n    assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n    // Calling configure without a device should throw a TypeError.\n    t.shouldThrow('TypeError', () => {\n      ctx.configure({\n        format: 'rgba8unorm',\n      } as GPUCanvasConfiguration);\n    });\n\n    // Device is not configured, so getCurrentTexture will throw an InvalidStateError.\n    t.shouldThrow('InvalidStateError', () => {\n      ctx.getCurrentTexture();\n    });\n\n    // Calling configure with a device should succeed.\n    ctx.configure({\n      device: t.device,\n      format: 'rgba8unorm',\n    });\n\n    // getCurrentTexture will succeed with a valid device.\n    ctx.getCurrentTexture();\n\n    // Unconfiguring should cause the device to be cleared.\n    ctx.unconfigure();\n    t.shouldThrow('InvalidStateError', () => {\n      ctx.getCurrentTexture();\n    });\n\n    // Should be able to successfully configure again after unconfiguring.\n    ctx.configure({\n      device: t.device,\n      format: 'rgba8unorm',\n    });\n    ctx.getCurrentTexture();\n  });\n\ng.test('format')\n  .desc(\n    `\n    Ensure that only valid texture formats are allowed when calling configure.\n    `\n  )\n  .params(u =>\n    u //\n      .combine('canvasType', kAllCanvasTypes)\n      .combine('format', kAllTextureFormats)\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceForTextureFormatOrSkipTestCase(t.params.format);\n  })\n  .fn(t => {\n    const { canvasType, format } = t.params;\n    const canvas = createCanvas(t, canvasType, 2, 2);\n    const ctx = canvas.getContext('webgpu');\n    assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n    // Would prefer to use kCanvasTextureFormats.includes(format), but that's giving TS errors.\n    let validFormat = false;\n    for (const canvasFormat of kCanvasTextureFormats) {\n      if (format === canvasFormat) {\n        validFormat = true;\n        break;\n      }\n    }\n\n    t.expectValidationError(() => {\n      ctx.configure({\n        device: t.device,\n        format,\n      });\n    }, !validFormat);\n\n    t.expectValidationError(() => {\n      // Should always return a texture, whether the configured format was valid or not.\n      const currentTexture = ctx.getCurrentTexture();\n      t.expect(currentTexture instanceof GPUTexture);\n    }, !validFormat);\n  });\n\ng.test('usage')\n  .desc(\n    `\n    Ensure that getCurrentTexture returns a texture with the configured usages.\n    `\n  )\n  .params(u =>\n    u //\n      .combine('canvasType', kAllCanvasTypes)\n      .beginSubcases()\n      .expand('usage', () => {\n        const usageSet = new Set<number>();\n        for (const usage0 of kTextureUsages) {\n          for (const usage1 of kTextureUsages) {\n            usageSet.add(usage0 | usage1);\n          }\n        }\n        return usageSet;\n      })\n  )\n  .fn(t => {\n    const { canvasType, usage } = t.params;\n    const canvas = createCanvas(t, canvasType, 2, 2);\n    const ctx = canvas.getContext('webgpu');\n    assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n    ctx.configure({\n      device: t.device,\n      format: 'rgba8unorm',\n      usage,\n    });\n\n    const currentTexture = ctx.getCurrentTexture();\n    t.expect(currentTexture instanceof GPUTexture);\n    t.expect(currentTexture.usage === usage);\n\n    // Try to use the texture with the given usage\n\n    if (usage & GPUConst.TextureUsage.RENDER_ATTACHMENT) {\n      const encoder = t.device.createCommandEncoder();\n      const pass = encoder.beginRenderPass({\n        colorAttachments: [\n          {\n            view: currentTexture.createView(),\n            clearValue: [1.0, 0.0, 0.0, 1.0],\n            loadOp: 'clear',\n            storeOp: 'store',\n          },\n        ],\n      });\n      pass.end();\n      t.device.queue.submit([encoder.finish()]);\n    }\n\n    if (usage & GPUConst.TextureUsage.TEXTURE_BINDING) {\n      const bgl = t.device.createBindGroupLayout({\n        entries: [\n          {\n            binding: 0,\n            visibility: GPUShaderStage.FRAGMENT,\n            texture: {},\n          },\n        ],\n      });\n\n      t.device.createBindGroup({\n        layout: bgl,\n        entries: [\n          {\n            binding: 0,\n            resource: currentTexture.createView(),\n          },\n        ],\n      });\n    }\n\n    if (usage & GPUConst.TextureUsage.STORAGE_BINDING) {\n      const bgl = t.device.createBindGroupLayout({\n        entries: [\n          {\n            binding: 0,\n            visibility: GPUShaderStage.FRAGMENT,\n            storageTexture: { access: 'write-only', format: currentTexture.format },\n          },\n        ],\n      });\n\n      t.device.createBindGroup({\n        layout: bgl,\n        entries: [\n          {\n            binding: 0,\n            resource: currentTexture.createView(),\n          },\n        ],\n      });\n    }\n\n    if (usage & GPUConst.TextureUsage.COPY_DST) {\n      const rgbaData = new Uint8Array([255, 0, 0, 255]);\n\n      t.device.queue.writeTexture({ texture: currentTexture }, rgbaData, {}, [1, 1, 1]);\n    }\n\n    if (usage & GPUConst.TextureUsage.COPY_SRC) {\n      const size = [currentTexture.width, currentTexture.height, 1];\n      const dstTexture = t.device.createTexture({\n        format: currentTexture.format,\n        usage: GPUTextureUsage.COPY_DST,\n        size,\n      });\n\n      const encoder = t.device.createCommandEncoder();\n      encoder.copyTextureToTexture({ texture: currentTexture }, { texture: dstTexture }, size);\n      t.device.queue.submit([encoder.finish()]);\n    }\n  });\n\ng.test('alpha_mode')\n  .desc(\n    `\n    Ensure that all valid alphaMode values are allowed when calling configure.\n    `\n  )\n  .params(u =>\n    u //\n      .combine('canvasType', kAllCanvasTypes)\n      .beginSubcases()\n      .combine('alphaMode', ['opaque', 'premultiplied'] as const)\n  )\n  .fn(t => {\n    const { canvasType, alphaMode } = t.params;\n    const canvas = createCanvas(t, canvasType, 2, 2);\n    const ctx = canvas.getContext('webgpu');\n    assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n    ctx.configure({\n      device: t.device,\n      format: 'rgba8unorm',\n      alphaMode,\n    });\n\n    const currentTexture = ctx.getCurrentTexture();\n    t.expect(currentTexture instanceof GPUTexture);\n  });\n\ng.test('size_zero_before_configure')\n  .desc(`Ensure a validation error is raised in configure() if the size of the canvas is zero.`)\n  .params(u =>\n    u //\n      .combine('canvasType', kAllCanvasTypes)\n      .combine('zeroDimension', ['width', 'height'] as const)\n  )\n  .fn(t => {\n    const { canvasType, zeroDimension } = t.params;\n    const canvas = createCanvas(t, canvasType, 1, 1);\n    canvas[zeroDimension] = 0;\n    const ctx = canvas.getContext('webgpu');\n    assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n    // Validation error, the canvas size is 0 which doesn't make a valid GPUTextureDescriptor.\n    t.expectValidationError(() => {\n      ctx.configure({\n        device: t.device,\n        format: 'bgra8unorm',\n        usage: GPUTextureUsage.RENDER_ATTACHMENT,\n      });\n    });\n\n    canvas[zeroDimension] = 1;\n\n    // The size being incorrect doesn't make for an invalid configuration. Now that it is fixed\n    // getting textures from the canvas should work.\n    const currentTexture = ctx.getCurrentTexture();\n\n    // Try rendering to it even!\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: currentTexture.createView(),\n          clearValue: [1.0, 0.0, 0.0, 1.0],\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    });\n    pass.end();\n    t.device.queue.submit([encoder.finish()]);\n  });\n\ng.test('size_zero_after_configure')\n  .desc(\n    `Ensure a validation error is raised after configure() if the size of the canvas becomes zero.`\n  )\n  .params(u =>\n    u //\n      .combine('canvasType', kAllCanvasTypes)\n      .combine('zeroDimension', ['width', 'height'] as const)\n  )\n  .fn(t => {\n    const { canvasType, zeroDimension } = t.params;\n    const canvas = createCanvas(t, canvasType, 1, 1);\n    const ctx = canvas.getContext('webgpu');\n    assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n    ctx.configure({\n      device: t.device,\n      format: 'bgra8unorm',\n      usage: GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    canvas[zeroDimension] = 0;\n\n    // The size is incorrect, we should be getting an error texture and a validation error.\n    let currentTexture: GPUTexture;\n    t.expectValidationError(() => {\n      currentTexture = ctx.getCurrentTexture();\n    });\n\n    t.expect(currentTexture![zeroDimension] === 0);\n\n    // Using the texture should produce a validation error.\n    t.expectValidationError(() => {\n      currentTexture.createView();\n    });\n  });\n\ng.test('viewFormats')\n  .desc(\n    `Test the validation that viewFormats are compatible with the format (for all canvas format / view formats)`\n  )\n  .params(u =>\n    u\n      .combine('canvasType', kAllCanvasTypes)\n      .combine('format', kCanvasTextureFormats)\n      .combine('viewFormatFeature', kFeaturesForFormats)\n      .beginSubcases()\n      .expand('viewFormat', ({ viewFormatFeature }) =>\n        filterFormatsByFeature(viewFormatFeature, kTextureFormats)\n      )\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase([t.params.viewFormatFeature]);\n  })\n  .fn(t => {\n    const { canvasType, format, viewFormat } = t.params;\n\n    t.skipIfTextureFormatNotSupported(viewFormat);\n\n    const canvas = createCanvas(t, canvasType, 1, 1);\n    const ctx = canvas.getContext('webgpu');\n    assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n    const compatible = viewCompatible(format, viewFormat);\n\n    // Test configure() produces an error if the formats aren't compatible.\n    t.expectValidationError(() => {\n      ctx.configure({\n        device: t.device,\n        format,\n        viewFormats: [viewFormat],\n      });\n    }, !compatible);\n\n    // Likewise for getCurrentTexture().\n    let currentTexture: GPUTexture;\n    t.expectValidationError(() => {\n      currentTexture = ctx.getCurrentTexture();\n    }, !compatible);\n\n    // The returned texture is an error texture.\n    t.expectValidationError(() => {\n      currentTexture.createView();\n    }, !compatible);\n  });\n"],"mappings":"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"}