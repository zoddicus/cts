{"version":3,"file":"getCurrentTexture.spec.js","names":["description","SkipTestCase","makeTestGroup","timeout","assert","unreachable","GPUTest","kAllCanvasTypes","createCanvas","kFormat","GPUContextTest","initCanvasContext","canvasType","canvas","onscreencanvas","style","position","top","left","opacity","document","body","appendChild","trackForCleanup","close","removeChild","ctx","getContext","GPUCanvasContext","configure","device","format","usage","GPUTextureUsage","RENDER_ATTACHMENT","COPY_SRC","g","test","desc","params","u","combine","fn","t","shouldThrow","getCurrentTexture","prevTexture","currentTexture","expect","unconfigure","frameTexture","encoder","createCommandEncoder","pass","beginRenderPass","colorAttachments","view","createView","clearValue","loadOp","storeOp","end","queue","submit","finish","expectSingleColor","size","width","height","exp","R","G","B","A","destroy","beginSubcases","beforeAllSubcases","OffscreenCanvas","prototype","clearTexture","Promise","resolve","frameCount","frameCheck","requestAnimationFrame","transferToImageBitmap","prevFrameCallsite","getCurrentTextureAgain","bgl","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","COMPUTE","texture","runInNewCanvasFrame","checkGetCurrentTexture","queueMicrotask","prevTextureView","expectValidationError","createBindGroup","layout","resource"],"sources":["../../../../src/webgpu/web_platform/canvas/getCurrentTexture.spec.ts"],"sourcesContent":["export const description = `\nTests for GPUCanvasContext.getCurrentTexture.\n`;\n\nimport { SkipTestCase } from '../../../common/framework/fixture.js';\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { timeout } from '../../../common/util/timeout.js';\nimport { assert, unreachable } from '../../../common/util/util.js';\nimport { GPUTest } from '../../gpu_test.js';\nimport { kAllCanvasTypes, createCanvas, CanvasType } from '../../util/create_elements.js';\n\nconst kFormat = 'bgra8unorm';\n\nclass GPUContextTest extends GPUTest {\n  initCanvasContext(canvasType: CanvasType = 'onscreen'): GPUCanvasContext {\n    const canvas = createCanvas(this, canvasType, 2, 2);\n    if (canvasType === 'onscreen') {\n      // To make sure onscreen canvas are visible\n      const onscreencanvas = canvas as HTMLCanvasElement;\n      onscreencanvas.style.position = 'fixed';\n      onscreencanvas.style.top = '0';\n      onscreencanvas.style.left = '0';\n      // Set it to transparent so that if multiple canvas are created, they are still visible.\n      onscreencanvas.style.opacity = '50%';\n      document.body.appendChild(onscreencanvas);\n      this.trackForCleanup({\n        close() {\n          document.body.removeChild(onscreencanvas);\n        },\n      });\n    }\n    const ctx = canvas.getContext('webgpu');\n    assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n    ctx.configure({\n      device: this.device,\n      format: kFormat,\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n    });\n\n    return ctx;\n  }\n}\n\nexport const g = makeTestGroup(GPUContextTest);\n\ng.test('configured')\n  .desc(\n    `Checks that calling getCurrentTexture requires the context to be configured first, and\n  that each call to configure causes getCurrentTexture to return a new texture.`\n  )\n  .params(u =>\n    u //\n      .combine('canvasType', kAllCanvasTypes)\n  )\n  .fn(t => {\n    const canvas = createCanvas(t, t.params.canvasType, 2, 2);\n    const ctx = canvas.getContext('webgpu');\n    assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n    // Calling getCurrentTexture prior to configuration should throw an InvalidStateError exception.\n    t.shouldThrow('InvalidStateError', () => {\n      ctx.getCurrentTexture();\n    });\n\n    // Once the context has been configured getCurrentTexture can be called.\n    ctx.configure({\n      device: t.device,\n      format: kFormat,\n    });\n\n    let prevTexture = ctx.getCurrentTexture();\n\n    // Calling configure again with different values will change the texture returned.\n    ctx.configure({\n      device: t.device,\n      format: 'bgra8unorm',\n    });\n\n    let currentTexture = ctx.getCurrentTexture();\n    t.expect(prevTexture !== currentTexture);\n    prevTexture = currentTexture;\n\n    // Calling configure again with the same values will still change the texture returned.\n    ctx.configure({\n      device: t.device,\n      format: 'bgra8unorm',\n    });\n\n    currentTexture = ctx.getCurrentTexture();\n    t.expect(prevTexture !== currentTexture);\n    prevTexture = currentTexture;\n\n    // Calling getCurrentTexture after calling unconfigure should throw an InvalidStateError exception.\n    ctx.unconfigure();\n\n    t.shouldThrow('InvalidStateError', () => {\n      ctx.getCurrentTexture();\n    });\n  });\n\ng.test('single_frames')\n  .desc(`Checks that the value of getCurrentTexture is consistent within a single frame.`)\n  .params(u =>\n    u //\n      .combine('canvasType', kAllCanvasTypes)\n  )\n  .fn(t => {\n    const ctx = t.initCanvasContext(t.params.canvasType);\n    const frameTexture = ctx.getCurrentTexture();\n\n    // Calling getCurrentTexture a second time returns the same texture.\n    t.expect(frameTexture === ctx.getCurrentTexture());\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: frameTexture.createView(),\n          clearValue: [1.0, 0.0, 0.0, 1.0],\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    });\n    pass.end();\n    t.device.queue.submit([encoder.finish()]);\n\n    // Calling getCurrentTexture after performing some work on the texture returns the same texture.\n    t.expect(frameTexture === ctx.getCurrentTexture());\n\n    // Ensure that getCurrentTexture does not clear the texture.\n    t.expectSingleColor(frameTexture, frameTexture.format, {\n      size: [frameTexture.width, frameTexture.height, 1],\n      exp: { R: 1, G: 0, B: 0, A: 1 },\n    });\n\n    frameTexture.destroy();\n\n    // Calling getCurrentTexture after destroying the texture still returns the same texture.\n    t.expect(frameTexture === ctx.getCurrentTexture());\n  });\n\ng.test('multiple_frames')\n  .desc(`Checks that the value of getCurrentTexture differs across multiple frames.`)\n  .params(u =>\n    u //\n      .combine('canvasType', kAllCanvasTypes)\n      .beginSubcases()\n      .combine('clearTexture', [true, false])\n  )\n  .beforeAllSubcases(t => {\n    const { canvasType } = t.params;\n    if (canvasType === 'offscreen' && !('transferToImageBitmap' in OffscreenCanvas.prototype)) {\n      throw new SkipTestCase('transferToImageBitmap not supported');\n    }\n  })\n  .fn(t => {\n    const { canvasType, clearTexture } = t.params;\n\n    return new Promise(resolve => {\n      const ctx = t.initCanvasContext(canvasType);\n      let prevTexture: GPUTexture | undefined;\n      let frameCount = 0;\n\n      function frameCheck() {\n        const currentTexture = ctx.getCurrentTexture();\n\n        if (prevTexture) {\n          // Ensure that each frame a new texture object is returned.\n          t.expect(currentTexture !== prevTexture);\n\n          // Ensure that texture contents are transparent black.\n          t.expectSingleColor(currentTexture, currentTexture.format, {\n            size: [currentTexture.width, currentTexture.height, 1],\n            exp: { R: 0, G: 0, B: 0, A: 0 },\n          });\n        }\n\n        if (clearTexture) {\n          // Clear the texture to test that texture contents don't carry over from frame to frame.\n          const encoder = t.device.createCommandEncoder();\n          const pass = encoder.beginRenderPass({\n            colorAttachments: [\n              {\n                view: currentTexture.createView(),\n                clearValue: [1.0, 0.0, 0.0, 1.0],\n                loadOp: 'clear',\n                storeOp: 'store',\n              },\n            ],\n          });\n          pass.end();\n          t.device.queue.submit([encoder.finish()]);\n        }\n\n        prevTexture = currentTexture;\n\n        if (frameCount++ < 5) {\n          // Which method will be used to begin a new \"frame\"?\n          switch (canvasType) {\n            case 'onscreen':\n              requestAnimationFrame(frameCheck);\n              break;\n            case 'offscreen': {\n              (ctx.canvas as OffscreenCanvas).transferToImageBitmap();\n              frameCheck();\n              break;\n            }\n            default:\n              unreachable();\n          }\n        } else {\n          resolve();\n        }\n      }\n\n      // Call frameCheck for the first time from requestAnimationFrame\n      // To make sure two frameChecks are run in different frames for onscreen canvas.\n      // offscreen canvas doesn't care.\n      requestAnimationFrame(frameCheck);\n    });\n  });\n\ng.test('resize')\n  .desc(`Checks the value of getCurrentTexture differs when the canvas is resized.`)\n  .params(u =>\n    u //\n      .combine('canvasType', kAllCanvasTypes)\n  )\n  .fn(t => {\n    const ctx = t.initCanvasContext(t.params.canvasType);\n    let prevTexture = ctx.getCurrentTexture();\n\n    // Trigger a resize by changing the width.\n    ctx.canvas.width = 4;\n\n    // When the canvas resizes the texture returned by getCurrentTexture should immediately begin\n    // returning a new texture matching the update dimensions.\n    let currentTexture = ctx.getCurrentTexture();\n    t.expect(prevTexture !== currentTexture);\n    t.expect(currentTexture.width === ctx.canvas.width);\n    t.expect(currentTexture.height === ctx.canvas.height);\n\n    // The width and height of the previous texture should remain unchanged.\n    t.expect(prevTexture.width === 2);\n    t.expect(prevTexture.height === 2);\n    prevTexture = currentTexture;\n\n    // Ensure that texture contents are transparent black.\n    t.expectSingleColor(currentTexture, currentTexture.format, {\n      size: [currentTexture.width, currentTexture.height, 1],\n      exp: { R: 0, G: 0, B: 0, A: 0 },\n    });\n\n    // Trigger a resize by changing the height.\n    ctx.canvas.height = 4;\n\n    // Check to ensure the texture is resized again.\n    currentTexture = ctx.getCurrentTexture();\n    t.expect(prevTexture !== currentTexture);\n    t.expect(currentTexture.width === ctx.canvas.width);\n    t.expect(currentTexture.height === ctx.canvas.height);\n    t.expect(prevTexture.width === 4);\n    t.expect(prevTexture.height === 2);\n    prevTexture = currentTexture;\n\n    // Ensure that texture contents are transparent black.\n    t.expectSingleColor(currentTexture, currentTexture.format, {\n      size: [currentTexture.width, currentTexture.height, 1],\n      exp: { R: 0, G: 0, B: 0, A: 0 },\n    });\n\n    // Simply setting the canvas width and height values to their current values should not trigger\n    // a change in the texture.\n    ctx.canvas.width = 4;\n    ctx.canvas.height = 4;\n\n    currentTexture = ctx.getCurrentTexture();\n    t.expect(prevTexture === currentTexture);\n  });\n\ng.test('expiry')\n  .desc(\n    `\nTest automatic WebGPU canvas texture expiry on all canvas types with the following requirements:\n- getCurrentTexture returns the same texture object until the next task:\n  - after previous frame update the rendering\n  - before current frame update the rendering\n  - in a microtask off the current frame task\n- getCurrentTexture returns a new texture object and the old texture object becomes invalid\n  as soon as possible after HTML update the rendering.\n\nTODO: test more canvas types, and ways to update the rendering\n- if on a different thread, expiry happens when the worker updates its rendering (worker \"rPAF\") OR transferToImageBitmap is called\n- [draw, transferControlToOffscreen, then canvas is displayed] on either {main thread, or transferred to worker}\n- [draw, canvas is displayed, then transferControlToOffscreen] on either {main thread, or transferred to worker}\n- reftests for the above 2 (what gets displayed when the canvas is displayed)\n- with canvas element added to DOM or not (applies to other canvas tests as well)\n  - canvas is added to DOM after being rendered\n  - canvas is already in DOM but becomes visible after being rendered\n  `\n  )\n  .params(u =>\n    u //\n      .combine('canvasType', kAllCanvasTypes)\n      .combine('prevFrameCallsite', ['runInNewCanvasFrame', 'requestAnimationFrame'] as const)\n      .combine('getCurrentTextureAgain', [true, false] as const)\n  )\n  .fn(t => {\n    const { canvasType, prevFrameCallsite, getCurrentTextureAgain } = t.params;\n    const ctx = t.initCanvasContext(t.params.canvasType);\n    // Create a bindGroupLayout to test invalid texture view usage later.\n    const bgl = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.COMPUTE,\n          texture: {},\n        },\n      ],\n    });\n\n    // The fn is called immediately after previous frame updating the rendering.\n    // Polyfill by calling the callback by setTimeout, in the requestAnimationFrame callback (for onscreen canvas)\n    // or after transferToImageBitmap (for offscreen canvas).\n    function runInNewCanvasFrame(fn: () => void) {\n      switch (canvasType) {\n        case 'onscreen':\n          requestAnimationFrame(() => timeout(fn));\n          break;\n        case 'offscreen':\n          // for offscreen canvas, after calling transferToImageBitmap, we are in a new frame immediately\n          (ctx.canvas as OffscreenCanvas).transferToImageBitmap();\n          fn();\n          break;\n        default:\n          unreachable();\n      }\n    }\n\n    function checkGetCurrentTexture() {\n      // Call getCurrentTexture on previous frame.\n      const prevTexture = ctx.getCurrentTexture();\n\n      // Call getCurrentTexture immediately after the frame, the texture object should stay the same.\n      queueMicrotask(() => {\n        if (getCurrentTextureAgain) {\n          t.expect(prevTexture === ctx.getCurrentTexture());\n        }\n\n        // Call getCurrentTexture in a new frame.\n        // It should expire the previous texture object return a new texture object by the next frame by then.\n        // Call runInNewCanvasFrame in the micro task to make sure the new frame run after the getCurrentTexture in the micro task for offscreen canvas.\n        runInNewCanvasFrame(() => {\n          if (getCurrentTextureAgain) {\n            t.expect(prevTexture !== ctx.getCurrentTexture());\n          }\n\n          // Event when prevTexture expired, createView should still succeed anyway.\n          const prevTextureView = prevTexture.createView();\n          // Using the invalid view should fail if it expires.\n          t.expectValidationError(() => {\n            t.device.createBindGroup({\n              layout: bgl,\n              entries: [{ binding: 0, resource: prevTextureView }],\n            });\n          });\n        });\n      });\n    }\n\n    switch (prevFrameCallsite) {\n      case 'runInNewCanvasFrame':\n        runInNewCanvasFrame(checkGetCurrentTexture);\n        break;\n      case 'requestAnimationFrame':\n        requestAnimationFrame(checkGetCurrentTexture);\n        break;\n      default:\n        break;\n    }\n  });\n"],"mappings":"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"}