{"version":3,"file":"prng.js","names":["assert","kValue","PRNG","kMat1","kMat2","kTMat","kMask","kMinLoop","kPreLoop","kSH0","kSH1","kSH8","kRandomDivisor","constructor","seed","u32","max","t_vars","Uint32Array","n_vars","state","Math","round","i","imul","next","temper","random","randomU32","uniformInt","N","upperBound","trunc","keepZoneSize","candidate"],"sources":["../../../src/webgpu/util/prng.ts"],"sourcesContent":["import { assert } from '../../common/util/util.js';\n\nimport { kValue } from './constants.js';\n\n/**\n * Seed-able deterministic pseudo random generator for the WebGPU CTS\n *\n * This generator requires setting a seed value and the sequence of values\n * generated is deterministic based on the seed.\n *\n * This generator is intended to be a replacement for Math.random().\n *\n * This generator is not cryptographically secure, though nothing in the CTS\n * should be needing cryptographic security.\n *\n * The current implementation is based on TinyMT\n * (https://github.com/MersenneTwister-Lab/TinyMT), which is a version of\n * Mersenne Twister that has reduced the internal state size at the cost of\n * shortening the period length of the generated sequence. The period is still\n * 2^127 - 1 entries long, so should be sufficient for use in the CTS, but it is\n * less costly to create multiple instances of the class.\n */\nexport class PRNG {\n  // Storing variables for temper() as members, so they don't need to be\n  // reallocated per call to temper()\n  private readonly t_vars: Uint32Array;\n\n  // Storing variables for next() as members, so they don't need to be\n  // reallocated per call to next()\n  private readonly n_vars: Uint32Array;\n\n  // Generator internal state\n  private readonly state: Uint32Array;\n\n  // Default tuning parameters for TinyMT.\n  // These are tested to not generate an all zero initial state.\n  private static readonly kMat1: number = 0x8f7011ee;\n  private static readonly kMat2: number = 0xfc78ff1f;\n  private static readonly kTMat: number = 0x3793fdff;\n\n  // TinyMT algorithm internal magic numbers\n  private static readonly kMask = 0x7fffffff;\n  private static readonly kMinLoop = 8;\n  private static readonly kPreLoop = 8;\n  private static readonly kSH0 = 1;\n  private static readonly kSH1 = 10;\n  private static readonly kSH8 = 8;\n\n  // u32.max + 1, used to scale the u32 value from temper() to [0, 1).\n  private static readonly kRandomDivisor = 4294967296.0;\n\n  /**\n   * constructor\n   *\n   * @param seed value used to initialize random number sequence. Results are\n   *             guaranteed to be deterministic based on this.\n   *             This value must be in the range of unsigned 32-bit integers.\n   *             Non-integers will be rounded.\n   */\n  constructor(seed: number) {\n    assert(seed >= 0 && seed <= kValue.u32.max, 'seed to PRNG needs to a u32');\n\n    this.t_vars = new Uint32Array(2);\n    this.n_vars = new Uint32Array(2);\n\n    this.state = new Uint32Array([Math.round(seed), PRNG.kMat1, PRNG.kMat2, PRNG.kTMat]);\n    for (let i = 1; i < PRNG.kMinLoop; i++) {\n      this.state[i & 3] ^=\n        i + Math.imul(1812433253, this.state[(i - 1) & 3] ^ (this.state[(i - 1) & 3] >>> 30));\n    }\n\n    // Check that the initial state isn't all 0s, since the algorithm assumes\n    // that this never occurs\n    assert(\n      (this.state[0] & PRNG.kMask) !== 0 ||\n        this.state[1] !== 0 ||\n        this.state[2] !== 0 ||\n        this.state[2] !== 0,\n      'Initialization of PRNG unexpectedly generated all 0s initial state, this means the tuning parameters are bad'\n    );\n\n    for (let i = 0; i < PRNG.kPreLoop; i++) {\n      this.next();\n    }\n  }\n\n  /** Advances the internal state to the next values */\n  private next() {\n    this.n_vars[0] = (this.state[0] & PRNG.kMask) ^ this.state[1] ^ this.state[2];\n    this.n_vars[1] = this.state[3];\n    this.n_vars[0] ^= this.n_vars[0] << PRNG.kSH0;\n    this.n_vars[1] ^= (this.n_vars[1] >>> PRNG.kSH0) ^ this.n_vars[0];\n    this.state[0] = this.state[1];\n    this.state[1] = this.state[2];\n    this.state[2] = this.n_vars[0] ^ (this.n_vars[1] << PRNG.kSH1);\n    this.state[3] = this.n_vars[1];\n    if ((this.n_vars[1] & 1) !== 0) {\n      this.state[1] ^= PRNG.kMat1;\n      this.state[2] ^= PRNG.kMat2;\n    }\n  }\n\n  /** @returns a 32-bit unsigned integer based on the current state */\n  private temper(): number {\n    this.t_vars[0] = this.state[3];\n    this.t_vars[1] = this.state[0] + (this.state[2] >>> PRNG.kSH8);\n    this.t_vars[0] ^= this.t_vars[1];\n    if ((this.t_vars[1] & 1) !== 0) {\n      this.t_vars[0] ^= PRNG.kTMat;\n    }\n    return this.t_vars[0];\n  }\n\n  /** @returns a value on the range of [0, 1)  and advances the state */\n  public random(): number {\n    this.next();\n    return this.temper() / PRNG.kRandomDivisor;\n  }\n\n  /** @returns a 32-bit unsigned integer value and advances the state */\n  public randomU32(): number {\n    this.next();\n    return this.temper();\n  }\n\n  /** @returns a uniformly selected integer in [0, N-1].  N must be at least 1 and at most 2**32. */\n  public uniformInt(N: number) {\n    const upperBound = (1 << 16) * (1 << 16);\n    assert(N === Math.trunc(N)); // It's an integer\n    assert(N > 0, `${N} must be positive`);\n    assert(N <= upperBound, `${N} is too big, should be at most ${upperBound}`);\n\n    // Use a method described in The Stanford GraphBase,\n    // Donald E. Knuth (New York: ACM Press, 1994), viii+576pp.\n    // Co-published by Addison-Wesley Publishing Company.\n    // See GB_FLIP, section 12, Uniform Integers.\n\n    // A naive algorithm would take a random u32 value X, and then\n    // return (X % N).  But this is biased toward smaller values\n    // when N is not a power of 2.  As Knuth writes, if N is\n    // (2**32) / 3, this naive algorithm would return values\n    // less than N/2 about 2/3 of the time.\n\n    // Instead, we eliminate the bias by discarding samples when\n    // they would have been biased. The \"keep zone\", so to speak,\n    // must be a multiple of N.  We make the algorithm efficient\n    // by maximizing the size of the keep zone: Find the largest\n    // multiple of N that fits within a u32.\n    // On average, this algorithm will discard 2 or fewer samples.\n\n    // Find the largest multiple of N that fits below upperBound.\n    const keepZoneSize = upperBound - (upperBound % N);\n    assert(keepZoneSize % N === 0);\n    // It covers a big chunk of the whole u32 range.\n    assert(keepZoneSize >= upperBound / 2);\n    // Draw u32 values until we find one in the keep zone.\n    let candidate: number;\n    do {\n      candidate = this.randomU32();\n    } while (candidate >= keepZoneSize);\n    // Now return the candidate, but folding away multiples of N.\n    return candidate % N;\n  }\n}\n"],"mappings":"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"}