{"version":3,"file":"constants.js","names":["Float16Array","kBit","i32","positive","min","max","negative","u32","f64","BigInt","zero","nearest_max","less_than_one","pi","whole","three_quarters","half","third","quarter","sixth","e","nearest_min","subnormal","infinity","max_ulp","f32","f16","powTwo","to0","to1","to2","to3","to4","to5","to6","to7","to8","to9","to10","to11","to12","to13","to14","to15","to16","to17","to18","to19","to20","to21","to22","to23","to24","to25","to26","to27","to28","to29","to30","to31","negPowTwo","reinterpretU64AsF64","input","Float64Array","BigUint64Array","buffer","reinterpretF64AsU64","reinterpretU32AsF32","Float32Array","Uint32Array","reinterpretU16AsF16","Uint16Array","kValue","first_non_castable_pipeline_override","last_castable_pipeline_override","emax","i16","u16","i8","u8"],"sources":["../../../src/webgpu/util/constants.ts"],"sourcesContent":["import { Float16Array } from '../../external/petamoriken/float16/float16.js';\n\nexport const kBit = {\n  // Limits of int32\n  i32: {\n    positive: {\n      min: 0x0000_0000, // 0\n      max: 0x7fff_ffff, // 2147483647\n    },\n    negative: {\n      min: 0x8000_0000, // -2147483648\n      max: 0x0000_0000, // 0\n    },\n  },\n\n  // Limits of uint32\n  u32: {\n    min: 0x0000_0000,\n    max: 0xffff_ffff,\n  },\n\n  // Limits of f64\n  // Have to be stored as a BigInt hex value, since number is a f64 internally,\n  // so 64-bit hex values are not guaranteed to be precisely representable.\n  f64: {\n    positive: {\n      min: BigInt(0x0010_0000_0000_0000n),\n      max: BigInt(0x7fef_ffff_ffff_ffffn),\n      zero: BigInt(0x0000_0000_0000_0000n),\n      nearest_max: BigInt(0x7fef_ffff_ffff_fffen),\n      less_than_one: BigInt(0x3fef_ffff_ffff_ffffn),\n      pi: {\n        whole: BigInt(0x4009_21fb_5444_2d18n),\n        three_quarters: BigInt(0x4002_d97c_7f33_21d2n),\n        half: BigInt(0x3ff9_21fb_5444_2d18n),\n        third: BigInt(0x3ff0_c152_382d_7365n),\n        quarter: BigInt(0x3fe9_21fb_5444_2d18n),\n        sixth: BigInt(0x3fe0_c152_382d_7365n),\n      },\n      e: BigInt(0x4005_bf0a_8b14_5769n),\n    },\n    negative: {\n      max: BigInt(0x8010_0000_0000_0000n),\n      min: BigInt(0xffef_ffff_ffff_ffffn),\n      zero: BigInt(0x8000_0000_0000_0000n),\n      nearest_min: BigInt(0xffef_ffff_ffff_fffen),\n      less_than_one: BigInt(0xbfef_ffff_ffff_ffffn),\n      pi: {\n        whole: BigInt(0xc009_21fb_5444_2d18n),\n        three_quarters: BigInt(0xc002_d97c_7f33_21d2n),\n        half: BigInt(0xbff9_21fb_5444_2d18n),\n        third: BigInt(0xbff0_c152_382d_7365n),\n        quarter: BigInt(0xbfe9_21fb_5444_2d18n),\n        sixth: BigInt(0xbfe0_c152_382d_7365n),\n      },\n    },\n    subnormal: {\n      positive: {\n        min: BigInt(0x0000_0000_0000_0001n),\n        max: BigInt(0x000f_ffff_ffff_ffffn),\n      },\n      negative: {\n        max: BigInt(0x8000_0000_0000_0001n),\n        min: BigInt(0x800f_ffff_ffff_ffffn),\n      },\n    },\n    infinity: {\n      positive: BigInt(0x7ff0_0000_0000_0000n),\n      negative: BigInt(0xfff0_0000_0000_0000n),\n    },\n    max_ulp: BigInt(0x7ca0_0000_0000_0000n),\n  },\n\n  // Limits of f32\n  f32: {\n    positive: {\n      min: 0x0080_0000,\n      max: 0x7f7f_ffff,\n      zero: 0x0000_0000,\n      nearest_max: 0x7f7f_fffe,\n      less_than_one: 0x3f7f_ffff,\n      pi: {\n        whole: 0x4049_0fdb,\n        three_quarters: 0x4016_cbe4,\n        half: 0x3fc9_0fdb,\n        third: 0x3f86_0a92,\n        quarter: 0x3f49_0fdb,\n        sixth: 0x3f06_0a92,\n      },\n      e: 0x402d_f854,\n    },\n    negative: {\n      max: 0x8080_0000,\n      min: 0xff7f_ffff,\n      zero: 0x8000_0000,\n      nearest_min: 0xff7f_fffe,\n      less_than_one: 0xbf7f_ffff,\n      pi: {\n        whole: 0xc04_90fdb,\n        three_quarters: 0xc016_cbe4,\n        half: 0xbfc9_0fdb,\n        third: 0xbf86_0a92,\n        quarter: 0xbf49_0fdb,\n        sixth: 0xbf06_0a92,\n      },\n    },\n    subnormal: {\n      positive: {\n        min: 0x0000_0001,\n        max: 0x007f_ffff,\n      },\n      negative: {\n        max: 0x8000_0001,\n        min: 0x807f_ffff,\n      },\n    },\n    infinity: {\n      positive: 0x7f80_0000,\n      negative: 0xff80_0000,\n    },\n    max_ulp: 0x7380_0000,\n  },\n\n  // Limits of f16\n  f16: {\n    positive: {\n      min: 0x0400,\n      max: 0x7bff,\n      zero: 0x0000,\n      nearest_max: 0x7bfe,\n      less_than_one: 0x3bff,\n      pi: {\n        whole: 0x4248,\n        three_quarters: 0x40b6,\n        half: 0x3e48,\n        third: 0x3c30,\n        quarter: 0x3a48,\n        sixth: 0x3830,\n      },\n      e: 0x416f,\n    },\n    negative: {\n      max: 0x8400,\n      min: 0xfbff,\n      zero: 0x8000,\n      nearest_min: 0xfbfe,\n      less_than_one: 0xbbff,\n      pi: {\n        whole: 0xc248,\n        three_quarters: 0xc0b6,\n        half: 0xbe48,\n        third: 0xbc30,\n        quarter: 0xba48,\n        sixth: 0xb830,\n      },\n    },\n    subnormal: {\n      positive: {\n        min: 0x0001,\n        max: 0x03ff,\n      },\n      negative: {\n        max: 0x8001,\n        min: 0x83ff,\n      },\n    },\n    infinity: {\n      positive: 0x7c00,\n      negative: 0xfc00,\n    },\n    max_ulp: 0x5000,\n  },\n\n  // Uint32 representation of power(2, n) n = {0, ..., 31}\n  // Stored as a JS `number`\n  // {to0, ..., to31} ie. {0, ..., 31}\n  powTwo: {\n    to0: 0x0000_0001,\n    to1: 0x0000_0002,\n    to2: 0x0000_0004,\n    to3: 0x0000_0008,\n    to4: 0x0000_0010,\n    to5: 0x0000_0020,\n    to6: 0x0000_0040,\n    to7: 0x0000_0080,\n    to8: 0x0000_0100,\n    to9: 0x0000_0200,\n    to10: 0x0000_0400,\n    to11: 0x0000_0800,\n    to12: 0x0000_1000,\n    to13: 0x0000_2000,\n    to14: 0x0000_4000,\n    to15: 0x0000_8000,\n    to16: 0x0001_0000,\n    to17: 0x0002_0000,\n    to18: 0x0004_0000,\n    to19: 0x0008_0000,\n    to20: 0x0010_0000,\n    to21: 0x0020_0000,\n    to22: 0x0040_0000,\n    to23: 0x0080_0000,\n    to24: 0x0100_0000,\n    to25: 0x0200_0000,\n    to26: 0x0400_0000,\n    to27: 0x0800_0000,\n    to28: 0x1000_0000,\n    to29: 0x2000_0000,\n    to30: 0x4000_0000,\n    to31: 0x8000_0000,\n  },\n\n  // Int32 representation of  of -1 * power(2, n) n = {0, ..., 31}\n  // Stored as a JS `number`\n  // {to0, ..., to31} ie. {0, ..., 31}\n  negPowTwo: {\n    to0: 0xffff_ffff,\n    to1: 0xffff_fffe,\n    to2: 0xffff_fffc,\n    to3: 0xffff_fff8,\n    to4: 0xffff_fff0,\n    to5: 0xffff_ffe0,\n    to6: 0xffff_ffc0,\n    to7: 0xffff_ff80,\n    to8: 0xffff_ff00,\n    to9: 0xffff_fe00,\n    to10: 0xffff_fc00,\n    to11: 0xffff_f800,\n    to12: 0xffff_f000,\n    to13: 0xffff_e000,\n    to14: 0xffff_c000,\n    to15: 0xffff_8000,\n    to16: 0xffff_0000,\n    to17: 0xfffe_0000,\n    to18: 0xfffc_0000,\n    to19: 0xfff8_0000,\n    to20: 0xfff0_0000,\n    to21: 0xffe0_0000,\n    to22: 0xffc0_0000,\n    to23: 0xff80_0000,\n    to24: 0xff00_0000,\n    to25: 0xfe00_0000,\n    to26: 0xfc00_0000,\n    to27: 0xf800_0000,\n    to28: 0xf000_0000,\n    to29: 0xe000_0000,\n    to30: 0xc000_0000,\n    to31: 0x8000_0000,\n  },\n} as const;\n\n/**\n * @returns a 64-bit float value via interpreting the input as the bit\n * representation as a 64-bit integer\n *\n * Using a locally defined function here to avoid compile time dependency\n * issues.\n */\nfunction reinterpretU64AsF64(input: bigint): number {\n  return new Float64Array(new BigUint64Array([input]).buffer)[0];\n}\n\n/**\n * @returns the 64-bit integer bit representation of 64-bit float value\n *\n * Using a locally defined function here to avoid compile time dependency\n * issues.\n */\nfunction reinterpretF64AsU64(input: number): bigint {\n  return new BigUint64Array(new Float64Array([input]).buffer)[0];\n}\n\n/**\n * @returns a 32-bit float value via interpreting the input as the bit\n * representation as a 32-bit integer\n *\n * Using a locally defined function here to avoid compile time dependency\n * issues.\n */\nfunction reinterpretU32AsF32(input: number): number {\n  return new Float32Array(new Uint32Array([input]).buffer)[0];\n}\n\n/**\n * @returns a 16-bit float value via interpreting the input as the bit\n * representation as a 64-bit integer\n *\n * Using a locally defined function here to avoid compile time dependency\n * issues.\n */\nfunction reinterpretU16AsF16(input: number): number {\n  return new Float16Array(new Uint16Array([input]).buffer)[0];\n}\n\nexport const kValue = {\n  // Limits of i32\n  i32: {\n    positive: {\n      min: 0,\n      max: 2147483647,\n    },\n    negative: {\n      min: -2147483648,\n      max: 0,\n    },\n  },\n\n  // Limits of u32\n  u32: {\n    min: 0,\n    max: 4294967295,\n  },\n\n  // Limits of f64\n  f64: {\n    positive: {\n      min: reinterpretU64AsF64(kBit.f64.positive.min),\n      max: reinterpretU64AsF64(kBit.f64.positive.max),\n      zero: reinterpretU64AsF64(kBit.f64.positive.zero),\n      nearest_max: reinterpretU64AsF64(kBit.f64.positive.nearest_max),\n      less_than_one: reinterpretU64AsF64(kBit.f64.positive.less_than_one),\n      pi: {\n        whole: reinterpretU64AsF64(kBit.f64.positive.pi.whole),\n        three_quarters: reinterpretU64AsF64(kBit.f64.positive.pi.three_quarters),\n        half: reinterpretU64AsF64(kBit.f64.positive.pi.half),\n        third: reinterpretU64AsF64(kBit.f64.positive.pi.third),\n        quarter: reinterpretU64AsF64(kBit.f64.positive.pi.quarter),\n        sixth: reinterpretU64AsF64(kBit.f64.positive.pi.sixth),\n      },\n      e: reinterpretU64AsF64(kBit.f64.positive.e),\n    },\n    negative: {\n      max: reinterpretU64AsF64(kBit.f64.negative.max),\n      min: reinterpretU64AsF64(kBit.f64.negative.min),\n      zero: reinterpretU64AsF64(kBit.f64.negative.zero),\n      nearest_min: reinterpretU64AsF64(kBit.f64.negative.nearest_min),\n      less_than_one: reinterpretU64AsF64(kBit.f64.negative.less_than_one), // -0.999999940395\n      pi: {\n        whole: reinterpretU64AsF64(kBit.f64.negative.pi.whole),\n        three_quarters: reinterpretU64AsF64(kBit.f64.negative.pi.three_quarters),\n        half: reinterpretU64AsF64(kBit.f64.negative.pi.half),\n        third: reinterpretU64AsF64(kBit.f64.negative.pi.third),\n        quarter: reinterpretU64AsF64(kBit.f64.negative.pi.quarter),\n        sixth: reinterpretU64AsF64(kBit.f64.negative.pi.sixth),\n      },\n    },\n    subnormal: {\n      positive: {\n        min: reinterpretU64AsF64(kBit.f64.subnormal.positive.min),\n        max: reinterpretU64AsF64(kBit.f64.subnormal.positive.max),\n      },\n      negative: {\n        max: reinterpretU64AsF64(kBit.f64.subnormal.negative.max),\n        min: reinterpretU64AsF64(kBit.f64.subnormal.negative.min),\n      },\n    },\n    infinity: {\n      positive: reinterpretU64AsF64(kBit.f64.infinity.positive),\n      negative: reinterpretU64AsF64(kBit.f64.infinity.negative),\n    },\n    max_ulp: reinterpretU64AsF64(kBit.f64.max_ulp),\n  },\n\n  // Limits of f32\n  f32: {\n    positive: {\n      min: reinterpretU32AsF32(kBit.f32.positive.min),\n      max: reinterpretU32AsF32(kBit.f32.positive.max),\n      zero: reinterpretU32AsF32(kBit.f32.positive.zero),\n      nearest_max: reinterpretU32AsF32(kBit.f32.positive.nearest_max),\n      less_than_one: reinterpretU32AsF32(kBit.f32.positive.less_than_one),\n      pi: {\n        whole: reinterpretU32AsF32(kBit.f32.positive.pi.whole),\n        three_quarters: reinterpretU32AsF32(kBit.f32.positive.pi.three_quarters),\n        half: reinterpretU32AsF32(kBit.f32.positive.pi.half),\n        third: reinterpretU32AsF32(kBit.f32.positive.pi.third),\n        quarter: reinterpretU32AsF32(kBit.f32.positive.pi.quarter),\n        sixth: reinterpretU32AsF32(kBit.f32.positive.pi.sixth),\n      },\n      e: reinterpretU32AsF32(kBit.f32.positive.e),\n      // The positive pipeline-overridable constant with the smallest magnitude\n      // which when cast to f32 will produce infinity. This comes from WGSL\n      // conversion rules and the rounding rules of WebIDL.\n      first_non_castable_pipeline_override:\n        reinterpretU32AsF32(kBit.f32.positive.max) / 2 + 2 ** 127,\n      // The positive pipeline-overridable constant with the largest magnitude\n      // which when cast to f32 will not produce infinity. This comes from WGSL\n      // conversion rules and the rounding rules of WebIDL\n      last_castable_pipeline_override: reinterpretU64AsF64(\n        reinterpretF64AsU64(reinterpretU32AsF32(kBit.f32.positive.max) / 2 + 2 ** 127) - BigInt(1)\n      ),\n    },\n    negative: {\n      max: reinterpretU32AsF32(kBit.f32.negative.max),\n      min: reinterpretU32AsF32(kBit.f32.negative.min),\n      zero: reinterpretU32AsF32(kBit.f32.negative.zero),\n      nearest_min: reinterpretU32AsF32(kBit.f32.negative.nearest_min),\n      less_than_one: reinterpretU32AsF32(kBit.f32.negative.less_than_one), // -0.999999940395\n      pi: {\n        whole: reinterpretU32AsF32(kBit.f32.negative.pi.whole),\n        three_quarters: reinterpretU32AsF32(kBit.f32.negative.pi.three_quarters),\n        half: reinterpretU32AsF32(kBit.f32.negative.pi.half),\n        third: reinterpretU32AsF32(kBit.f32.negative.pi.third),\n        quarter: reinterpretU32AsF32(kBit.f32.negative.pi.quarter),\n        sixth: reinterpretU32AsF32(kBit.f32.negative.pi.sixth),\n      },\n      // The negative pipeline-overridable constant with the smallest magnitude\n      // which when cast to f32 will produce infinity. This comes from WGSL\n      // conversion rules and the rounding rules of WebIDL.\n      first_non_castable_pipeline_override: -(\n        reinterpretU32AsF32(kBit.f32.positive.max) / 2 +\n        2 ** 127\n      ),\n      // The negative pipeline-overridable constant with the largest magnitude\n      // which when cast to f32 will not produce infinity. This comes from WGSL\n      // conversion rules and the rounding rules of WebIDL.\n      last_castable_pipeline_override: -reinterpretU64AsF64(\n        reinterpretF64AsU64(reinterpretU32AsF32(kBit.f32.positive.max) / 2 + 2 ** 127) - BigInt(1)\n      ),\n    },\n    subnormal: {\n      positive: {\n        min: reinterpretU32AsF32(kBit.f32.subnormal.positive.min),\n        max: reinterpretU32AsF32(kBit.f32.subnormal.positive.max),\n      },\n      negative: {\n        max: reinterpretU32AsF32(kBit.f32.subnormal.negative.max),\n        min: reinterpretU32AsF32(kBit.f32.subnormal.negative.min),\n      },\n    },\n    infinity: {\n      positive: reinterpretU32AsF32(kBit.f32.infinity.positive),\n      negative: reinterpretU32AsF32(kBit.f32.infinity.negative),\n    },\n    max_ulp: reinterpretU32AsF32(kBit.f32.max_ulp),\n    emax: 127,\n  },\n\n  // Limits of i16\n  i16: {\n    positive: {\n      min: 0,\n      max: 32767,\n    },\n    negative: {\n      min: -32768,\n      max: 0,\n    },\n  },\n\n  // Limits of u16\n  u16: {\n    min: 0,\n    max: 65535,\n  },\n\n  // Limits of f16\n  f16: {\n    positive: {\n      min: reinterpretU16AsF16(kBit.f16.positive.min),\n      max: reinterpretU16AsF16(kBit.f16.positive.max),\n      zero: reinterpretU16AsF16(kBit.f16.positive.zero),\n      nearest_max: reinterpretU16AsF16(kBit.f16.positive.nearest_max),\n      less_than_one: reinterpretU16AsF16(kBit.f16.positive.less_than_one),\n      pi: {\n        whole: reinterpretU16AsF16(kBit.f16.positive.pi.whole),\n        three_quarters: reinterpretU16AsF16(kBit.f16.positive.pi.three_quarters),\n        half: reinterpretU16AsF16(kBit.f16.positive.pi.half),\n        third: reinterpretU16AsF16(kBit.f16.positive.pi.third),\n        quarter: reinterpretU16AsF16(kBit.f16.positive.pi.quarter),\n        sixth: reinterpretU16AsF16(kBit.f16.positive.pi.sixth),\n      },\n      e: reinterpretU16AsF16(kBit.f16.positive.e),\n      // The positive pipeline-overridable constant with the smallest magnitude\n      // which when cast to f16 will produce infinity. This comes from WGSL\n      // conversion rules and the rounding rules of WebIDL.\n      first_non_castable_pipeline_override:\n        reinterpretU16AsF16(kBit.f16.positive.max) / 2 + 2 ** 15,\n      // The positive pipeline-overridable constant with the largest magnitude\n      // which when cast to f16 will not produce infinity. This comes from WGSL\n      // conversion rules and the rounding rules of WebIDL\n      last_castable_pipeline_override: reinterpretU64AsF64(\n        reinterpretF64AsU64(reinterpretU16AsF16(kBit.f16.positive.max) / 2 + 2 ** 15) - BigInt(1)\n      ),\n    },\n    negative: {\n      max: reinterpretU16AsF16(kBit.f16.negative.max),\n      min: reinterpretU16AsF16(kBit.f16.negative.min),\n      zero: reinterpretU16AsF16(kBit.f16.negative.zero),\n      nearest_min: reinterpretU16AsF16(kBit.f16.negative.nearest_min),\n      less_than_one: reinterpretU16AsF16(kBit.f16.negative.less_than_one), // -0.9996\n      pi: {\n        whole: reinterpretU16AsF16(kBit.f16.negative.pi.whole),\n        three_quarters: reinterpretU16AsF16(kBit.f16.negative.pi.three_quarters),\n        half: reinterpretU16AsF16(kBit.f16.negative.pi.half),\n        third: reinterpretU16AsF16(kBit.f16.negative.pi.third),\n        quarter: reinterpretU16AsF16(kBit.f16.negative.pi.quarter),\n        sixth: reinterpretU16AsF16(kBit.f16.negative.pi.sixth),\n      },\n      // The negative pipeline-overridable constant with the smallest magnitude\n      // which when cast to f16 will produce infinity. This comes from WGSL\n      // conversion rules and the rounding rules of WebIDL.\n      first_non_castable_pipeline_override: -(\n        reinterpretU16AsF16(kBit.f16.positive.max) / 2 +\n        2 ** 15\n      ),\n      // The negative pipeline-overridable constant with the largest magnitude\n      // which when cast to f16 will not produce infinity. This comes from WGSL\n      // conversion rules and the rounding rules of WebIDL.\n      last_castable_pipeline_override: -reinterpretU64AsF64(\n        reinterpretF64AsU64(reinterpretU16AsF16(kBit.f16.positive.max) / 2 + 2 ** 15) - BigInt(1)\n      ),\n    },\n    subnormal: {\n      positive: {\n        min: reinterpretU16AsF16(kBit.f16.subnormal.positive.min),\n        max: reinterpretU16AsF16(kBit.f16.subnormal.positive.max),\n      },\n      negative: {\n        max: reinterpretU16AsF16(kBit.f16.subnormal.negative.max),\n        min: reinterpretU16AsF16(kBit.f16.subnormal.negative.min),\n      },\n    },\n    infinity: {\n      positive: reinterpretU16AsF16(kBit.f16.infinity.positive),\n      negative: reinterpretU16AsF16(kBit.f16.infinity.negative),\n    },\n    max_ulp: reinterpretU16AsF16(kBit.f16.max_ulp),\n    emax: 15,\n  },\n\n  // Limits of i8\n  i8: {\n    positive: {\n      min: 0,\n      max: 127,\n    },\n    negative: {\n      min: -128,\n      max: 0,\n    },\n  },\n\n  // Limits of u8\n  u8: {\n    min: 0,\n    max: 255,\n  },\n} as const;\n"],"mappings":"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"}