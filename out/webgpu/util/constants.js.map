{"version":3,"file":"constants.js","names":["reinterpretU64AsF64","reinterpretF64AsU64","reinterpretU32AsF32","reinterpretU16AsF16","kBit","i32","positive","min","max","negative","u32","f64","BigInt","zero","subnormal","infinity","nearest_max","less_than_one","pi","whole","three_quarters","half","third","quarter","sixth","e","nearest_min","max_ulp","f32","f16","powTwo","to0","to1","to2","to3","to4","to5","to6","to7","to8","to9","to10","to11","to12","to13","to14","to15","to16","to17","to18","to19","to20","to21","to22","to23","to24","to25","to26","to27","to28","to29","to30","to31","negPowTwo","kValue","i64","isOOB","val","first_non_castable_pipeline_override","last_castable_pipeline_override","emax","i16","u16","i8","u8"],"sources":["../../../src/webgpu/util/constants.ts"],"sourcesContent":["import {\n  reinterpretU64AsF64,\n  reinterpretF64AsU64,\n  reinterpretU32AsF32,\n  reinterpretU16AsF16,\n} from './reinterpret.js';\n\nexport const kBit = {\n  // Limits of int32\n  i32: {\n    positive: {\n      min: 0x0000_0000, // 0\n      max: 0x7fff_ffff, // 2147483647\n    },\n    negative: {\n      min: 0x8000_0000, // -2147483648\n      max: 0x0000_0000, // 0\n    },\n  },\n\n  // Limits of uint32\n  u32: {\n    min: 0x0000_0000,\n    max: 0xffff_ffff,\n  },\n\n  // Limits of f64\n  // Have to be stored as a BigInt hex value, since number is a f64 internally,\n  // so 64-bit hex values are not guaranteed to be precisely representable.\n  f64: {\n    positive: {\n      min: BigInt(0x0010_0000_0000_0000n),\n      max: BigInt(0x7fef_ffff_ffff_ffffn),\n      zero: BigInt(0x0000_0000_0000_0000n),\n      subnormal: {\n        min: BigInt(0x0000_0000_0000_0001n),\n        max: BigInt(0x000f_ffff_ffff_ffffn),\n      },\n      infinity: BigInt(0x7ff0_0000_0000_0000n),\n      nearest_max: BigInt(0x7fef_ffff_ffff_fffen),\n      less_than_one: BigInt(0x3fef_ffff_ffff_ffffn),\n      pi: {\n        whole: BigInt(0x4009_21fb_5444_2d18n),\n        three_quarters: BigInt(0x4002_d97c_7f33_21d2n),\n        half: BigInt(0x3ff9_21fb_5444_2d18n),\n        third: BigInt(0x3ff0_c152_382d_7365n),\n        quarter: BigInt(0x3fe9_21fb_5444_2d18n),\n        sixth: BigInt(0x3fe0_c152_382d_7365n),\n      },\n      e: BigInt(0x4005_bf0a_8b14_5769n),\n    },\n    negative: {\n      max: BigInt(0x8010_0000_0000_0000n),\n      min: BigInt(0xffef_ffff_ffff_ffffn),\n      zero: BigInt(0x8000_0000_0000_0000n),\n      subnormal: {\n        max: BigInt(0x8000_0000_0000_0001n),\n        min: BigInt(0x800f_ffff_ffff_ffffn),\n      },\n      infinity: BigInt(0xfff0_0000_0000_0000n),\n      nearest_min: BigInt(0xffef_ffff_ffff_fffen),\n      less_than_one: BigInt(0xbfef_ffff_ffff_ffffn),\n      pi: {\n        whole: BigInt(0xc009_21fb_5444_2d18n),\n        three_quarters: BigInt(0xc002_d97c_7f33_21d2n),\n        half: BigInt(0xbff9_21fb_5444_2d18n),\n        third: BigInt(0xbff0_c152_382d_7365n),\n        quarter: BigInt(0xbfe9_21fb_5444_2d18n),\n        sixth: BigInt(0xbfe0_c152_382d_7365n),\n      },\n    },\n    max_ulp: BigInt(0x7ca0_0000_0000_0000n),\n  },\n\n  // Limits of f32\n  f32: {\n    positive: {\n      min: 0x0080_0000,\n      max: 0x7f7f_ffff,\n      zero: 0x0000_0000,\n      subnormal: {\n        min: 0x0000_0001,\n        max: 0x007f_ffff,\n      },\n      infinity: 0x7f80_0000,\n      nearest_max: 0x7f7f_fffe,\n      less_than_one: 0x3f7f_ffff,\n      pi: {\n        whole: 0x4049_0fdb,\n        three_quarters: 0x4016_cbe4,\n        half: 0x3fc9_0fdb,\n        third: 0x3f86_0a92,\n        quarter: 0x3f49_0fdb,\n        sixth: 0x3f06_0a92,\n      },\n      e: 0x402d_f854,\n    },\n    negative: {\n      max: 0x8080_0000,\n      min: 0xff7f_ffff,\n      zero: 0x8000_0000,\n      subnormal: {\n        max: 0x8000_0001,\n        min: 0x807f_ffff,\n      },\n      infinity: 0xff80_0000,\n      nearest_min: 0xff7f_fffe,\n      less_than_one: 0xbf7f_ffff,\n      pi: {\n        whole: 0xc04_90fdb,\n        three_quarters: 0xc016_cbe4,\n        half: 0xbfc9_0fdb,\n        third: 0xbf86_0a92,\n        quarter: 0xbf49_0fdb,\n        sixth: 0xbf06_0a92,\n      },\n    },\n    max_ulp: 0x7380_0000,\n  },\n\n  // Limits of f16\n  f16: {\n    positive: {\n      min: 0x0400,\n      max: 0x7bff,\n      zero: 0x0000,\n      subnormal: {\n        min: 0x0001,\n        max: 0x03ff,\n      },\n      infinity: 0x7c00,\n      nearest_max: 0x7bfe,\n      less_than_one: 0x3bff,\n      pi: {\n        whole: 0x4248,\n        three_quarters: 0x40b6,\n        half: 0x3e48,\n        third: 0x3c30,\n        quarter: 0x3a48,\n        sixth: 0x3830,\n      },\n      e: 0x416f,\n    },\n    negative: {\n      max: 0x8400,\n      min: 0xfbff,\n      zero: 0x8000,\n      subnormal: {\n        max: 0x8001,\n        min: 0x83ff,\n      },\n      infinity: 0xfc00,\n      nearest_min: 0xfbfe,\n      less_than_one: 0xbbff,\n      pi: {\n        whole: 0xc248,\n        three_quarters: 0xc0b6,\n        half: 0xbe48,\n        third: 0xbc30,\n        quarter: 0xba48,\n        sixth: 0xb830,\n      },\n    },\n    max_ulp: 0x5000,\n  },\n\n  // Uint32 representation of power(2, n) n = {0, ..., 31}\n  // Stored as a JS `number`\n  // {to0, ..., to31} ie. {0, ..., 31}\n  powTwo: {\n    to0: 0x0000_0001,\n    to1: 0x0000_0002,\n    to2: 0x0000_0004,\n    to3: 0x0000_0008,\n    to4: 0x0000_0010,\n    to5: 0x0000_0020,\n    to6: 0x0000_0040,\n    to7: 0x0000_0080,\n    to8: 0x0000_0100,\n    to9: 0x0000_0200,\n    to10: 0x0000_0400,\n    to11: 0x0000_0800,\n    to12: 0x0000_1000,\n    to13: 0x0000_2000,\n    to14: 0x0000_4000,\n    to15: 0x0000_8000,\n    to16: 0x0001_0000,\n    to17: 0x0002_0000,\n    to18: 0x0004_0000,\n    to19: 0x0008_0000,\n    to20: 0x0010_0000,\n    to21: 0x0020_0000,\n    to22: 0x0040_0000,\n    to23: 0x0080_0000,\n    to24: 0x0100_0000,\n    to25: 0x0200_0000,\n    to26: 0x0400_0000,\n    to27: 0x0800_0000,\n    to28: 0x1000_0000,\n    to29: 0x2000_0000,\n    to30: 0x4000_0000,\n    to31: 0x8000_0000,\n  },\n\n  // Int32 representation of  of -1 * power(2, n) n = {0, ..., 31}\n  // Stored as a JS `number`\n  // {to0, ..., to31} ie. {0, ..., 31}\n  negPowTwo: {\n    to0: 0xffff_ffff,\n    to1: 0xffff_fffe,\n    to2: 0xffff_fffc,\n    to3: 0xffff_fff8,\n    to4: 0xffff_fff0,\n    to5: 0xffff_ffe0,\n    to6: 0xffff_ffc0,\n    to7: 0xffff_ff80,\n    to8: 0xffff_ff00,\n    to9: 0xffff_fe00,\n    to10: 0xffff_fc00,\n    to11: 0xffff_f800,\n    to12: 0xffff_f000,\n    to13: 0xffff_e000,\n    to14: 0xffff_c000,\n    to15: 0xffff_8000,\n    to16: 0xffff_0000,\n    to17: 0xfffe_0000,\n    to18: 0xfffc_0000,\n    to19: 0xfff8_0000,\n    to20: 0xfff0_0000,\n    to21: 0xffe0_0000,\n    to22: 0xffc0_0000,\n    to23: 0xff80_0000,\n    to24: 0xff00_0000,\n    to25: 0xfe00_0000,\n    to26: 0xfc00_0000,\n    to27: 0xf800_0000,\n    to28: 0xf000_0000,\n    to29: 0xe000_0000,\n    to30: 0xc000_0000,\n    to31: 0x8000_0000,\n  },\n} as const;\n\nexport const kValue = {\n  // Limits of i64\n  i64: {\n    positive: {\n      min: BigInt(0n),\n      max: BigInt(9223372036854775807n),\n    },\n    negative: {\n      min: BigInt(-9223372036854775808n),\n      max: BigInt(0n),\n    },\n    isOOB: (val: bigint): boolean => {\n      return val > kValue.i64.positive.max || val < kValue.i64.negative.min;\n    },\n  },\n\n  // Limits of i32\n  i32: {\n    positive: {\n      min: 0,\n      max: 2147483647,\n    },\n    negative: {\n      min: -2147483648,\n      max: 0,\n    },\n  },\n\n  // Limits of u32\n  u32: {\n    min: 0,\n    max: 4294967295,\n  },\n\n  // Limits of f64\n  f64: {\n    positive: {\n      min: reinterpretU64AsF64(kBit.f64.positive.min),\n      max: reinterpretU64AsF64(kBit.f64.positive.max),\n      zero: reinterpretU64AsF64(kBit.f64.positive.zero),\n      subnormal: {\n        min: reinterpretU64AsF64(kBit.f64.positive.subnormal.min),\n        max: reinterpretU64AsF64(kBit.f64.positive.subnormal.max),\n      },\n      infinity: reinterpretU64AsF64(kBit.f64.positive.infinity),\n      nearest_max: reinterpretU64AsF64(kBit.f64.positive.nearest_max),\n      less_than_one: reinterpretU64AsF64(kBit.f64.positive.less_than_one),\n      pi: {\n        whole: reinterpretU64AsF64(kBit.f64.positive.pi.whole),\n        three_quarters: reinterpretU64AsF64(kBit.f64.positive.pi.three_quarters),\n        half: reinterpretU64AsF64(kBit.f64.positive.pi.half),\n        third: reinterpretU64AsF64(kBit.f64.positive.pi.third),\n        quarter: reinterpretU64AsF64(kBit.f64.positive.pi.quarter),\n        sixth: reinterpretU64AsF64(kBit.f64.positive.pi.sixth),\n      },\n      e: reinterpretU64AsF64(kBit.f64.positive.e),\n    },\n    negative: {\n      max: reinterpretU64AsF64(kBit.f64.negative.max),\n      min: reinterpretU64AsF64(kBit.f64.negative.min),\n      zero: reinterpretU64AsF64(kBit.f64.negative.zero),\n      subnormal: {\n        max: reinterpretU64AsF64(kBit.f64.negative.subnormal.max),\n        min: reinterpretU64AsF64(kBit.f64.negative.subnormal.min),\n      },\n      infinity: reinterpretU64AsF64(kBit.f64.negative.infinity),\n      nearest_min: reinterpretU64AsF64(kBit.f64.negative.nearest_min),\n      less_than_one: reinterpretU64AsF64(kBit.f64.negative.less_than_one), // -0.999999940395\n      pi: {\n        whole: reinterpretU64AsF64(kBit.f64.negative.pi.whole),\n        three_quarters: reinterpretU64AsF64(kBit.f64.negative.pi.three_quarters),\n        half: reinterpretU64AsF64(kBit.f64.negative.pi.half),\n        third: reinterpretU64AsF64(kBit.f64.negative.pi.third),\n        quarter: reinterpretU64AsF64(kBit.f64.negative.pi.quarter),\n        sixth: reinterpretU64AsF64(kBit.f64.negative.pi.sixth),\n      },\n    },\n    max_ulp: reinterpretU64AsF64(kBit.f64.max_ulp),\n  },\n\n  // Limits of f32\n  f32: {\n    positive: {\n      min: reinterpretU32AsF32(kBit.f32.positive.min),\n      max: reinterpretU32AsF32(kBit.f32.positive.max),\n      zero: reinterpretU32AsF32(kBit.f32.positive.zero),\n      subnormal: {\n        min: reinterpretU32AsF32(kBit.f32.positive.subnormal.min),\n        max: reinterpretU32AsF32(kBit.f32.positive.subnormal.max),\n      },\n      infinity: reinterpretU32AsF32(kBit.f32.positive.infinity),\n\n      nearest_max: reinterpretU32AsF32(kBit.f32.positive.nearest_max),\n      less_than_one: reinterpretU32AsF32(kBit.f32.positive.less_than_one),\n      pi: {\n        whole: reinterpretU32AsF32(kBit.f32.positive.pi.whole),\n        three_quarters: reinterpretU32AsF32(kBit.f32.positive.pi.three_quarters),\n        half: reinterpretU32AsF32(kBit.f32.positive.pi.half),\n        third: reinterpretU32AsF32(kBit.f32.positive.pi.third),\n        quarter: reinterpretU32AsF32(kBit.f32.positive.pi.quarter),\n        sixth: reinterpretU32AsF32(kBit.f32.positive.pi.sixth),\n      },\n      e: reinterpretU32AsF32(kBit.f32.positive.e),\n      // The positive pipeline-overridable constant with the smallest magnitude\n      // which when cast to f32 will produce infinity. This comes from WGSL\n      // conversion rules and the rounding rules of WebIDL.\n      first_non_castable_pipeline_override:\n        reinterpretU32AsF32(kBit.f32.positive.max) / 2 + 2 ** 127,\n      // The positive pipeline-overridable constant with the largest magnitude\n      // which when cast to f32 will not produce infinity. This comes from WGSL\n      // conversion rules and the rounding rules of WebIDL\n      last_castable_pipeline_override: reinterpretU64AsF64(\n        reinterpretF64AsU64(reinterpretU32AsF32(kBit.f32.positive.max) / 2 + 2 ** 127) - BigInt(1)\n      ),\n    },\n    negative: {\n      max: reinterpretU32AsF32(kBit.f32.negative.max),\n      min: reinterpretU32AsF32(kBit.f32.negative.min),\n      zero: reinterpretU32AsF32(kBit.f32.negative.zero),\n      subnormal: {\n        max: reinterpretU32AsF32(kBit.f32.negative.subnormal.max),\n        min: reinterpretU32AsF32(kBit.f32.negative.subnormal.min),\n      },\n      infinity: reinterpretU32AsF32(kBit.f32.negative.infinity),\n      nearest_min: reinterpretU32AsF32(kBit.f32.negative.nearest_min),\n      less_than_one: reinterpretU32AsF32(kBit.f32.negative.less_than_one), // -0.999999940395\n      pi: {\n        whole: reinterpretU32AsF32(kBit.f32.negative.pi.whole),\n        three_quarters: reinterpretU32AsF32(kBit.f32.negative.pi.three_quarters),\n        half: reinterpretU32AsF32(kBit.f32.negative.pi.half),\n        third: reinterpretU32AsF32(kBit.f32.negative.pi.third),\n        quarter: reinterpretU32AsF32(kBit.f32.negative.pi.quarter),\n        sixth: reinterpretU32AsF32(kBit.f32.negative.pi.sixth),\n      },\n      // The negative pipeline-overridable constant with the smallest magnitude\n      // which when cast to f32 will produce infinity. This comes from WGSL\n      // conversion rules and the rounding rules of WebIDL.\n      first_non_castable_pipeline_override: -(\n        reinterpretU32AsF32(kBit.f32.positive.max) / 2 +\n        2 ** 127\n      ),\n      // The negative pipeline-overridable constant with the largest magnitude\n      // which when cast to f32 will not produce infinity. This comes from WGSL\n      // conversion rules and the rounding rules of WebIDL.\n      last_castable_pipeline_override: -reinterpretU64AsF64(\n        reinterpretF64AsU64(reinterpretU32AsF32(kBit.f32.positive.max) / 2 + 2 ** 127) - BigInt(1)\n      ),\n    },\n    max_ulp: reinterpretU32AsF32(kBit.f32.max_ulp),\n    emax: 127,\n  },\n\n  // Limits of i16\n  i16: {\n    positive: {\n      min: 0,\n      max: 32767,\n    },\n    negative: {\n      min: -32768,\n      max: 0,\n    },\n  },\n\n  // Limits of u16\n  u16: {\n    min: 0,\n    max: 65535,\n  },\n\n  // Limits of f16\n  f16: {\n    positive: {\n      min: reinterpretU16AsF16(kBit.f16.positive.min),\n      max: reinterpretU16AsF16(kBit.f16.positive.max),\n      zero: reinterpretU16AsF16(kBit.f16.positive.zero),\n      subnormal: {\n        min: reinterpretU16AsF16(kBit.f16.positive.subnormal.min),\n        max: reinterpretU16AsF16(kBit.f16.positive.subnormal.max),\n      },\n      infinity: reinterpretU16AsF16(kBit.f16.positive.infinity),\n      nearest_max: reinterpretU16AsF16(kBit.f16.positive.nearest_max),\n      less_than_one: reinterpretU16AsF16(kBit.f16.positive.less_than_one),\n      pi: {\n        whole: reinterpretU16AsF16(kBit.f16.positive.pi.whole),\n        three_quarters: reinterpretU16AsF16(kBit.f16.positive.pi.three_quarters),\n        half: reinterpretU16AsF16(kBit.f16.positive.pi.half),\n        third: reinterpretU16AsF16(kBit.f16.positive.pi.third),\n        quarter: reinterpretU16AsF16(kBit.f16.positive.pi.quarter),\n        sixth: reinterpretU16AsF16(kBit.f16.positive.pi.sixth),\n      },\n      e: reinterpretU16AsF16(kBit.f16.positive.e),\n      // The positive pipeline-overridable constant with the smallest magnitude\n      // which when cast to f16 will produce infinity. This comes from WGSL\n      // conversion rules and the rounding rules of WebIDL.\n      first_non_castable_pipeline_override:\n        reinterpretU16AsF16(kBit.f16.positive.max) / 2 + 2 ** 15,\n      // The positive pipeline-overridable constant with the largest magnitude\n      // which when cast to f16 will not produce infinity. This comes from WGSL\n      // conversion rules and the rounding rules of WebIDL\n      last_castable_pipeline_override: reinterpretU64AsF64(\n        reinterpretF64AsU64(reinterpretU16AsF16(kBit.f16.positive.max) / 2 + 2 ** 15) - BigInt(1)\n      ),\n    },\n    negative: {\n      max: reinterpretU16AsF16(kBit.f16.negative.max),\n      min: reinterpretU16AsF16(kBit.f16.negative.min),\n      zero: reinterpretU16AsF16(kBit.f16.negative.zero),\n      subnormal: {\n        max: reinterpretU16AsF16(kBit.f16.negative.subnormal.max),\n        min: reinterpretU16AsF16(kBit.f16.negative.subnormal.min),\n      },\n      infinity: reinterpretU16AsF16(kBit.f16.negative.infinity),\n      nearest_min: reinterpretU16AsF16(kBit.f16.negative.nearest_min),\n      less_than_one: reinterpretU16AsF16(kBit.f16.negative.less_than_one), // -0.9996\n      pi: {\n        whole: reinterpretU16AsF16(kBit.f16.negative.pi.whole),\n        three_quarters: reinterpretU16AsF16(kBit.f16.negative.pi.three_quarters),\n        half: reinterpretU16AsF16(kBit.f16.negative.pi.half),\n        third: reinterpretU16AsF16(kBit.f16.negative.pi.third),\n        quarter: reinterpretU16AsF16(kBit.f16.negative.pi.quarter),\n        sixth: reinterpretU16AsF16(kBit.f16.negative.pi.sixth),\n      },\n      // The negative pipeline-overridable constant with the smallest magnitude\n      // which when cast to f16 will produce infinity. This comes from WGSL\n      // conversion rules and the rounding rules of WebIDL.\n      first_non_castable_pipeline_override: -(\n        reinterpretU16AsF16(kBit.f16.positive.max) / 2 +\n        2 ** 15\n      ),\n      // The negative pipeline-overridable constant with the largest magnitude\n      // which when cast to f16 will not produce infinity. This comes from WGSL\n      // conversion rules and the rounding rules of WebIDL.\n      last_castable_pipeline_override: -reinterpretU64AsF64(\n        reinterpretF64AsU64(reinterpretU16AsF16(kBit.f16.positive.max) / 2 + 2 ** 15) - BigInt(1)\n      ),\n    },\n    max_ulp: reinterpretU16AsF16(kBit.f16.max_ulp),\n    emax: 15,\n  },\n\n  // Limits of i8\n  i8: {\n    positive: {\n      min: 0,\n      max: 127,\n    },\n    negative: {\n      min: -128,\n      max: 0,\n    },\n  },\n\n  // Limits of u8\n  u8: {\n    min: 0,\n    max: 255,\n  },\n} as const;\n"],"mappings":"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"}