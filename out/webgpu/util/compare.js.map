{"version":3,"file":"compare.js","names":["getIsBuildingDataCache","Colors","assert","unreachable","deserializeExpectation","serializeExpectation","toComparator","isFloatValue","Matrix","Scalar","Vector","FPInterval","compareValue","got","expected","gTy","type","eTy","bothFloatTypes","matched","red","toString","g","e","isFloat","kind","value","green","gLen","elements","length","eLen","every","_","i","compare","gCols","cols","eCols","gRows","rows","eRows","c","j","Error","compareInterval","contains","compareVector","elementType","results","map","idx","match","index","failures","filter","v","expected_string","convertArrayToString","m","join","compareMatrix","expected_strings","Array","forEach","r","anyOf","expectations","failed","Set","cmp","add","data","skipUndefined","expectation","undefined","alwaysPass","msg","serializeComparator","d","reason","deserializeComparator","s"],"sources":["../../../src/webgpu/util/compare.ts"],"sourcesContent":["import { getIsBuildingDataCache } from '../../common/framework/data_cache.js';\nimport { Colors } from '../../common/util/colors.js';\nimport { assert, unreachable } from '../../common/util/util.js';\nimport {\n  deserializeExpectation,\n  SerializedExpectation,\n  serializeExpectation,\n} from '../shader/execution/expression/case_cache.js';\nimport { Expectation, toComparator } from '../shader/execution/expression/expression.js';\n\nimport { isFloatValue, Matrix, Scalar, Value, Vector } from './conversion.js';\nimport { FPInterval } from './floating_point.js';\n\n/** Comparison describes the result of a Comparator function. */\nexport interface Comparison {\n  matched: boolean; // True if the two values were considered a match\n  got: string; // The string representation of the 'got' value (possibly with markup)\n  expected: string; // The string representation of the 'expected' value (possibly with markup)\n}\n\n// All Comparators must be serializable to be used in the CaseCache.\n// New Comparators should add a new entry to SerializableComparatorKind and\n// define functionality in serialize/deserializeComparator as needed.\n//\n// 'value' and 'packed' are internal framework Comparators that exist, so that\n// the whole Case type hierarchy doesn't need to be split into Serializable vs\n// non-Serializable paths. Passing them into the CaseCache will cause a runtime\n// error.\n// 'value' and 'packed' should never be used in .spec.ts files.\n//\nexport type SerializableComparatorKind = 'anyOf' | 'skipUndefined' | 'alwaysPass';\ntype InternalComparatorKind = 'value' | 'packed';\nexport type ComparatorKind = SerializableComparatorKind | InternalComparatorKind;\nexport type ComparatorImpl = (got: Value) => Comparison;\n\n/** Comparator is a function that compares whether the provided value matches an expectation. */\nexport interface Comparator {\n  compare: ComparatorImpl;\n  kind: ComparatorKind;\n  data?: Expectation | Expectation[] | string;\n}\n\n/**\n * compares 'got' Value  to 'expected' Value, returning the Comparison information.\n * @param got the Value obtained from the test\n * @param expected the expected Value\n * @returns the comparison results\n */\n// NOTE: This function does not use objectEquals, since that does not handle FP\n// specific corners cases correctly, i.e. that f64/f32/f16 are all considered\n// the same type for this comparison.\nfunction compareValue(got: Value, expected: Value): Comparison {\n  {\n    // Check types\n    const gTy = got.type;\n    const eTy = expected.type;\n    const bothFloatTypes = isFloatValue(got) && isFloatValue(expected);\n    if (gTy !== eTy && !bothFloatTypes) {\n      return {\n        matched: false,\n        got: `${Colors.red(gTy.toString())}(${got})`,\n        expected: `${Colors.red(eTy.toString())}(${expected})`,\n      };\n    }\n  }\n\n  if (got instanceof Scalar) {\n    const g = got;\n    const e = expected as Scalar;\n    const isFloat = g.type.kind === 'f64' || g.type.kind === 'f32' || g.type.kind === 'f16';\n    const matched =\n      (isFloat && (g.value as number) === (e.value as number)) || (!isFloat && g.value === e.value);\n    return {\n      matched,\n      got: g.toString(),\n      expected: matched ? Colors.green(e.toString()) : Colors.red(e.toString()),\n    };\n  }\n\n  if (got instanceof Vector) {\n    const e = expected as Vector;\n    const gLen = got.elements.length;\n    const eLen = e.elements.length;\n    let matched = gLen === eLen;\n    if (matched) {\n      // Iterating and calling compare instead of just using objectEquals to use the FP specific logic from above\n      matched = got.elements.every((_, i) => {\n        return compare(got.elements[i], e.elements[i]).matched;\n      });\n    }\n\n    return {\n      matched,\n      got: `${got.toString()}`,\n      expected: matched ? Colors.green(e.toString()) : Colors.red(e.toString()),\n    };\n  }\n\n  if (got instanceof Matrix) {\n    const e = expected as Matrix;\n    const gCols = got.type.cols;\n    const eCols = e.type.cols;\n    const gRows = got.type.rows;\n    const eRows = e.type.rows;\n    let matched = gCols === eCols && gRows === eRows;\n    if (matched) {\n      // Iterating and calling compare instead of just using objectEquals to use the FP specific logic from above\n      matched = got.elements.every((c, i) => {\n        return c.every((_, j) => {\n          return compare(got.elements[i][j], e.elements[i][j]).matched;\n        });\n      });\n    }\n\n    return {\n      matched,\n      got: `${got.toString()}`,\n      expected: matched ? Colors.green(e.toString()) : Colors.red(e.toString()),\n    };\n  }\n\n  throw new Error(`unhandled type '${typeof got}`);\n}\n\n/**\n * Tests it a 'got' Value is contained in 'expected' interval, returning the Comparison information.\n * @param got the Value obtained from the test\n * @param expected the expected FPInterval\n * @returns the comparison results\n */\nfunction compareInterval(got: Value, expected: FPInterval): Comparison {\n  {\n    // Check type\n    const gTy = got.type;\n    if (!isFloatValue(got)) {\n      return {\n        matched: false,\n        got: `${Colors.red(gTy.toString())}(${got})`,\n        expected: `floating point value`,\n      };\n    }\n  }\n\n  if (got instanceof Scalar) {\n    const g = got.value as number;\n    const matched = expected.contains(g);\n    return {\n      matched,\n      got: g.toString(),\n      expected: matched ? Colors.green(expected.toString()) : Colors.red(expected.toString()),\n    };\n  }\n\n  // Vector results are currently not handled\n  throw new Error(`unhandled type '${typeof got}`);\n}\n\n/**\n * Tests it a 'got' Value is contained in 'expected' vector, returning the Comparison information.\n * @param got the Value obtained from the test, is expected to be a Vector\n * @param expected the expected array of FPIntervals, one for each element of the vector\n * @returns the comparison results\n */\nfunction compareVector(got: Value, expected: FPInterval[]): Comparison {\n  // Check got type\n  if (!(got instanceof Vector)) {\n    return {\n      matched: false,\n      got: `${Colors.red((typeof got).toString())}(${got})`,\n      expected: `Vector`,\n    };\n  }\n\n  // Check element type\n  {\n    const gTy = got.type.elementType;\n    if (!isFloatValue(got.elements[0])) {\n      return {\n        matched: false,\n        got: `${Colors.red(gTy.toString())}(${got})`,\n        expected: `floating point elements`,\n      };\n    }\n  }\n\n  if (got.elements.length !== expected.length) {\n    return {\n      matched: false,\n      got: `Vector of ${got.elements.length} elements`,\n      expected: `${expected.length} elements`,\n    };\n  }\n\n  const results = got.elements.map((_, idx) => {\n    const g = got.elements[idx].value as number;\n    return { match: expected[idx].contains(g), index: idx };\n  });\n\n  const failures = results.filter(v => !v.match).map(v => v.index);\n  if (failures.length !== 0) {\n    const expected_string = expected.map((v, idx) =>\n      idx in failures ? Colors.red(`[${v}]`) : Colors.green(`[${v}]`)\n    );\n    return {\n      matched: false,\n      got: `[${got.elements}]`,\n      expected: `[${expected_string}]`,\n    };\n  }\n\n  return {\n    matched: true,\n    got: `[${got.elements}]`,\n    expected: `[${Colors.green(expected.toString())}]`,\n  };\n}\n\n// Utility to get arround not being able to nest `` blocks\nfunction convertArrayToString<T>(m: T[]): string {\n  return `[${m.join(',')}]`;\n}\n\n/**\n * Tests it a 'got' Value is contained in 'expected' matrix, returning the Comparison information.\n * @param got the Value obtained from the test, is expected to be a Matrix\n * @param expected the expected array of array of FPIntervals, representing a column-major matrix\n * @returns the comparison results\n */\nfunction compareMatrix(got: Value, expected: FPInterval[][]): Comparison {\n  // Check got type\n  if (!(got instanceof Matrix)) {\n    return {\n      matched: false,\n      got: `${Colors.red((typeof got).toString())}(${got})`,\n      expected: `Matrix`,\n    };\n  }\n\n  // Check element type\n  {\n    const gTy = got.type.elementType;\n    if (!isFloatValue(got.elements[0][0])) {\n      return {\n        matched: false,\n        got: `${Colors.red(gTy.toString())}(${got})`,\n        expected: `floating point elements`,\n      };\n    }\n  }\n\n  // Check matrix dimensions\n  {\n    const gCols = got.elements.length;\n    const gRows = got.elements[0].length;\n    const eCols = expected.length;\n    const eRows = expected[0].length;\n\n    if (gCols !== eCols || gRows !== eRows) {\n      assert(false);\n      return {\n        matched: false,\n        got: `Matrix of ${gCols}x${gRows} elements`,\n        expected: `Matrix of ${eCols}x${eRows} elements`,\n      };\n    }\n  }\n\n  // Check that got values fall in expected intervals\n  let matched = true;\n  const expected_strings: string[][] = [...Array(got.elements.length)].map(_ => [\n    ...Array(got.elements[0].length),\n  ]);\n\n  got.elements.forEach((c, i) => {\n    c.forEach((r, j) => {\n      const g = r.value as number;\n      if (expected[i][j].contains(g)) {\n        expected_strings[i][j] = Colors.green(`[${expected[i][j]}]`);\n      } else {\n        matched = false;\n        expected_strings[i][j] = Colors.red(`[${expected[i][j]}]`);\n      }\n    });\n  });\n\n  return {\n    matched,\n    got: convertArrayToString(got.elements.map(convertArrayToString)),\n    expected: convertArrayToString(expected_strings.map(convertArrayToString)),\n  };\n}\n\n/**\n * compare() compares 'got' to 'expected', returning the Comparison information.\n * @param got the result obtained from the test\n * @param expected the expected result\n * @returns the comparison results\n */\nexport function compare(\n  got: Value,\n  expected: Value | FPInterval | FPInterval[] | FPInterval[][]\n): Comparison {\n  if (expected instanceof Array) {\n    if (expected[0] instanceof Array) {\n      expected = expected as FPInterval[][];\n      return compareMatrix(got, expected);\n    } else {\n      expected = expected as FPInterval[];\n      return compareVector(got, expected);\n    }\n  }\n\n  if (expected instanceof FPInterval) {\n    return compareInterval(got, expected);\n  }\n\n  return compareValue(got, expected);\n}\n\n/** @returns a Comparator that checks whether a test value matches any of the provided options */\nexport function anyOf(...expectations: Expectation[]): Comparator {\n  const c: Comparator = {\n    compare: (got: Value) => {\n      const failed = new Set<string>();\n      for (const e of expectations) {\n        const cmp = toComparator(e).compare(got);\n        if (cmp.matched) {\n          return cmp;\n        }\n        failed.add(cmp.expected);\n      }\n      return { matched: false, got: got.toString(), expected: [...failed].join(' or ') };\n    },\n    kind: 'anyOf',\n  };\n\n  if (getIsBuildingDataCache()) {\n    // If there's an active DataCache, and it supports storing, then append the\n    // Expectations to the result, so it can be serialized.\n    c.data = expectations;\n  }\n  return c;\n}\n\n/** @returns a Comparator that skips the test if the expectation is undefined */\nexport function skipUndefined(expectation: Expectation | undefined): Comparator {\n  const c: Comparator = {\n    compare: (got: Value) => {\n      if (expectation !== undefined) {\n        return toComparator(expectation).compare(got);\n      }\n      return { matched: true, got: got.toString(), expected: `Treating 'undefined' as Any` };\n    },\n    kind: 'skipUndefined',\n  };\n\n  if (expectation !== undefined && getIsBuildingDataCache()) {\n    // If there's an active DataCache, and it supports storing, then append the\n    // Expectation to the result, so it can be serialized.\n    c.data = expectation;\n  }\n  return c;\n}\n\n/**\n * @returns a Comparator that always passes, used to test situations where the\n * result of computation doesn't matter, but the fact it finishes is being\n * tested.\n */\nexport function alwaysPass(msg: string = 'always pass'): Comparator {\n  const c: Comparator = {\n    compare: (got: Value) => {\n      return { matched: true, got: got.toString(), expected: msg };\n    },\n    kind: 'alwaysPass',\n  };\n\n  if (getIsBuildingDataCache()) {\n    // If there's an active DataCache, and it supports storing, then append the\n    // message string to the result, so it can be serialized.\n    c.data = msg;\n  }\n  return c;\n}\n\n/** SerializedComparatorAnyOf is the serialized type of `anyOf` comparator. */\ntype SerializedComparatorAnyOf = {\n  kind: 'anyOf';\n  data: SerializedExpectation[];\n};\n\n/** SerializedComparatorSkipUndefined is the serialized type of `skipUndefined` comparator. */\ntype SerializedComparatorSkipUndefined = {\n  kind: 'skipUndefined';\n  data?: SerializedExpectation;\n};\n\n/** SerializedComparatorAlwaysPass is the serialized type of `alwaysPass` comparator. */\ntype SerializedComparatorAlwaysPass = {\n  kind: 'alwaysPass';\n  reason: string;\n};\n\n// Serialized forms of 'value' and 'packed' are intentionally omitted, so should\n// not be put into the cache. Attempting to will cause a runtime assert.\n\n/** SerializedComparator is a union of all the possible serialized comparator types. */\nexport type SerializedComparator =\n  | SerializedComparatorAnyOf\n  | SerializedComparatorSkipUndefined\n  | SerializedComparatorAlwaysPass;\n\n/**\n * Serializes a Comparator to a SerializedComparator.\n * @param c the Comparator\n * @returns a serialized comparator\n */\nexport function serializeComparator(c: Comparator): SerializedComparator {\n  switch (c.kind) {\n    case 'anyOf': {\n      const d = c.data as Expectation[];\n      return { kind: 'anyOf', data: d.map(serializeExpectation) };\n    }\n    case 'skipUndefined': {\n      if (c.data !== undefined) {\n        const d = c.data as Expectation;\n        return { kind: 'skipUndefined', data: serializeExpectation(d) };\n      }\n      return { kind: 'skipUndefined', data: undefined };\n    }\n    case 'alwaysPass': {\n      const d = c.data as string;\n      return { kind: 'alwaysPass', reason: d };\n    }\n    case 'value':\n    case 'packed': {\n      unreachable(`Serializing '${c.kind}' comparators is not allowed (${c})`);\n      break;\n    }\n  }\n  unreachable(`Unable serialize comparator '${c}'`);\n}\n\n/**\n * Deserializes a Comparator from a SerializedComparator.\n * @param s the SerializedComparator\n * @returns the deserialized comparator.\n */\nexport function deserializeComparator(s: SerializedComparator): Comparator {\n  switch (s.kind) {\n    case 'anyOf': {\n      return anyOf(...s.data.map(e => deserializeExpectation(e)));\n    }\n    case 'skipUndefined': {\n      return skipUndefined(s.data !== undefined ? deserializeExpectation(s.data) : undefined);\n    }\n    case 'alwaysPass': {\n      return alwaysPass(s.reason);\n    }\n  }\n  unreachable(`Unable deserialize comparator '${s}'`);\n}\n"],"mappings":";AAAA;AAAA,GAAA,SAASA,sBAAsB,QAAQ,sCAAsC,CAC7E,SAASC,MAAM,QAAQ,6BAA6B,CACpD,SAASC,MAAM,EAAEC,WAAW,QAAQ,2BAA2B;AAC/D;AACEC,sBAAsB;;AAEtBC,oBAAoB;AACf,8CAA8C;AACrD,SAAsBC,YAAY,QAAQ,8CAA8C;;AAExF,SAASC,YAAY,EAAEC,MAAM,EAAEC,MAAM,EAASC,MAAM,QAAQ,iBAAiB;AAC7E,SAASC,UAAU,QAAQ,qBAAqB;;AAEhD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,YAAY,CAACC,GAAU,EAAEC,QAAe,EAAc;EAC7D;IACE;IACA,MAAMC,GAAG,GAAGF,GAAG,CAACG,IAAI;IACpB,MAAMC,GAAG,GAAGH,QAAQ,CAACE,IAAI;IACzB,MAAME,cAAc,GAAGX,YAAY,CAACM,GAAG,CAAC,IAAIN,YAAY,CAACO,QAAQ,CAAC;IAClE,IAAIC,GAAG,KAAKE,GAAG,IAAI,CAACC,cAAc,EAAE;MAClC,OAAO;QACLC,OAAO,EAAE,KAAK;QACdN,GAAG,EAAG,GAAEZ,MAAM,CAACmB,GAAG,CAACL,GAAG,CAACM,QAAQ,EAAE,CAAE,IAAGR,GAAI,GAAE;QAC5CC,QAAQ,EAAG,GAAEb,MAAM,CAACmB,GAAG,CAACH,GAAG,CAACI,QAAQ,EAAE,CAAE,IAAGP,QAAS;MACtD,CAAC;IACH;EACF;;EAEA,IAAID,GAAG,YAAYJ,MAAM,EAAE;IACzB,MAAMa,CAAC,GAAGT,GAAG;IACb,MAAMU,CAAC,GAAGT,QAAkB;IAC5B,MAAMU,OAAO,GAAGF,CAAC,CAACN,IAAI,CAACS,IAAI,KAAK,KAAK,IAAIH,CAAC,CAACN,IAAI,CAACS,IAAI,KAAK,KAAK,IAAIH,CAAC,CAACN,IAAI,CAACS,IAAI,KAAK,KAAK;IACvF,MAAMN,OAAO;IACVK,OAAO,IAAKF,CAAC,CAACI,KAAK,KAAiBH,CAAC,CAACG,KAAgB,IAAM,CAACF,OAAO,IAAIF,CAAC,CAACI,KAAK,KAAKH,CAAC,CAACG,KAAM;IAC/F,OAAO;MACLP,OAAO;MACPN,GAAG,EAAES,CAAC,CAACD,QAAQ,EAAE;MACjBP,QAAQ,EAAEK,OAAO,GAAGlB,MAAM,CAAC0B,KAAK,CAACJ,CAAC,CAACF,QAAQ,EAAE,CAAC,GAAGpB,MAAM,CAACmB,GAAG,CAACG,CAAC,CAACF,QAAQ,EAAE;IAC1E,CAAC;EACH;;EAEA,IAAIR,GAAG,YAAYH,MAAM,EAAE;IACzB,MAAMa,CAAC,GAAGT,QAAkB;IAC5B,MAAMc,IAAI,GAAGf,GAAG,CAACgB,QAAQ,CAACC,MAAM;IAChC,MAAMC,IAAI,GAAGR,CAAC,CAACM,QAAQ,CAACC,MAAM;IAC9B,IAAIX,OAAO,GAAGS,IAAI,KAAKG,IAAI;IAC3B,IAAIZ,OAAO,EAAE;MACX;MACAA,OAAO,GAAGN,GAAG,CAACgB,QAAQ,CAACG,KAAK,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;QACrC,OAAOC,OAAO,CAACtB,GAAG,CAACgB,QAAQ,CAACK,CAAC,CAAC,EAAEX,CAAC,CAACM,QAAQ,CAACK,CAAC,CAAC,CAAC,CAACf,OAAO;MACxD,CAAC,CAAC;IACJ;;IAEA,OAAO;MACLA,OAAO;MACPN,GAAG,EAAG,GAAEA,GAAG,CAACQ,QAAQ,EAAG,EAAC;MACxBP,QAAQ,EAAEK,OAAO,GAAGlB,MAAM,CAAC0B,KAAK,CAACJ,CAAC,CAACF,QAAQ,EAAE,CAAC,GAAGpB,MAAM,CAACmB,GAAG,CAACG,CAAC,CAACF,QAAQ,EAAE;IAC1E,CAAC;EACH;;EAEA,IAAIR,GAAG,YAAYL,MAAM,EAAE;IACzB,MAAMe,CAAC,GAAGT,QAAkB;IAC5B,MAAMsB,KAAK,GAAGvB,GAAG,CAACG,IAAI,CAACqB,IAAI;IAC3B,MAAMC,KAAK,GAAGf,CAAC,CAACP,IAAI,CAACqB,IAAI;IACzB,MAAME,KAAK,GAAG1B,GAAG,CAACG,IAAI,CAACwB,IAAI;IAC3B,MAAMC,KAAK,GAAGlB,CAAC,CAACP,IAAI,CAACwB,IAAI;IACzB,IAAIrB,OAAO,GAAGiB,KAAK,KAAKE,KAAK,IAAIC,KAAK,KAAKE,KAAK;IAChD,IAAItB,OAAO,EAAE;MACX;MACAA,OAAO,GAAGN,GAAG,CAACgB,QAAQ,CAACG,KAAK,CAAC,CAACU,CAAC,EAAER,CAAC,KAAK;QACrC,OAAOQ,CAAC,CAACV,KAAK,CAAC,CAACC,CAAC,EAAEU,CAAC,KAAK;UACvB,OAAOR,OAAO,CAACtB,GAAG,CAACgB,QAAQ,CAACK,CAAC,CAAC,CAACS,CAAC,CAAC,EAAEpB,CAAC,CAACM,QAAQ,CAACK,CAAC,CAAC,CAACS,CAAC,CAAC,CAAC,CAACxB,OAAO;QAC9D,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ;;IAEA,OAAO;MACLA,OAAO;MACPN,GAAG,EAAG,GAAEA,GAAG,CAACQ,QAAQ,EAAG,EAAC;MACxBP,QAAQ,EAAEK,OAAO,GAAGlB,MAAM,CAAC0B,KAAK,CAACJ,CAAC,CAACF,QAAQ,EAAE,CAAC,GAAGpB,MAAM,CAACmB,GAAG,CAACG,CAAC,CAACF,QAAQ,EAAE;IAC1E,CAAC;EACH;;EAEA,MAAM,IAAIuB,KAAK,CAAE,mBAAkB,OAAO/B,GAAI,EAAC,CAAC;AAClD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASgC,eAAe,CAAChC,GAAU,EAAEC,QAAoB,EAAc;EACrE;IACE;IACA,MAAMC,GAAG,GAAGF,GAAG,CAACG,IAAI;IACpB,IAAI,CAACT,YAAY,CAACM,GAAG,CAAC,EAAE;MACtB,OAAO;QACLM,OAAO,EAAE,KAAK;QACdN,GAAG,EAAG,GAAEZ,MAAM,CAACmB,GAAG,CAACL,GAAG,CAACM,QAAQ,EAAE,CAAE,IAAGR,GAAI,GAAE;QAC5CC,QAAQ,EAAG;MACb,CAAC;IACH;EACF;;EAEA,IAAID,GAAG,YAAYJ,MAAM,EAAE;IACzB,MAAMa,CAAC,GAAGT,GAAG,CAACa,KAAe;IAC7B,MAAMP,OAAO,GAAGL,QAAQ,CAACgC,QAAQ,CAACxB,CAAC,CAAC;IACpC,OAAO;MACLH,OAAO;MACPN,GAAG,EAAES,CAAC,CAACD,QAAQ,EAAE;MACjBP,QAAQ,EAAEK,OAAO,GAAGlB,MAAM,CAAC0B,KAAK,CAACb,QAAQ,CAACO,QAAQ,EAAE,CAAC,GAAGpB,MAAM,CAACmB,GAAG,CAACN,QAAQ,CAACO,QAAQ,EAAE;IACxF,CAAC;EACH;;EAEA;EACA,MAAM,IAAIuB,KAAK,CAAE,mBAAkB,OAAO/B,GAAI,EAAC,CAAC;AAClD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASkC,aAAa,CAAClC,GAAU,EAAEC,QAAsB,EAAc;EACrE;EACA,IAAI,EAAED,GAAG,YAAYH,MAAM,CAAC,EAAE;IAC5B,OAAO;MACLS,OAAO,EAAE,KAAK;MACdN,GAAG,EAAG,GAAEZ,MAAM,CAACmB,GAAG,CAAC,CAAC,OAAOP,GAAG,EAAEQ,QAAQ,EAAE,CAAE,IAAGR,GAAI,GAAE;MACrDC,QAAQ,EAAG;IACb,CAAC;EACH;;EAEA;EACA;IACE,MAAMC,GAAG,GAAGF,GAAG,CAACG,IAAI,CAACgC,WAAW;IAChC,IAAI,CAACzC,YAAY,CAACM,GAAG,CAACgB,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE;MAClC,OAAO;QACLV,OAAO,EAAE,KAAK;QACdN,GAAG,EAAG,GAAEZ,MAAM,CAACmB,GAAG,CAACL,GAAG,CAACM,QAAQ,EAAE,CAAE,IAAGR,GAAI,GAAE;QAC5CC,QAAQ,EAAG;MACb,CAAC;IACH;EACF;;EAEA,IAAID,GAAG,CAACgB,QAAQ,CAACC,MAAM,KAAKhB,QAAQ,CAACgB,MAAM,EAAE;IAC3C,OAAO;MACLX,OAAO,EAAE,KAAK;MACdN,GAAG,EAAG,aAAYA,GAAG,CAACgB,QAAQ,CAACC,MAAO,WAAU;MAChDhB,QAAQ,EAAG,GAAEA,QAAQ,CAACgB,MAAO;IAC/B,CAAC;EACH;;EAEA,MAAMmB,OAAO,GAAGpC,GAAG,CAACgB,QAAQ,CAACqB,GAAG,CAAC,CAACjB,CAAC,EAAEkB,GAAG,KAAK;IAC3C,MAAM7B,CAAC,GAAGT,GAAG,CAACgB,QAAQ,CAACsB,GAAG,CAAC,CAACzB,KAAe;IAC3C,OAAO,EAAE0B,KAAK,EAAEtC,QAAQ,CAACqC,GAAG,CAAC,CAACL,QAAQ,CAACxB,CAAC,CAAC,EAAE+B,KAAK,EAAEF,GAAG,CAAC,CAAC;EACzD,CAAC,CAAC;;EAEF,MAAMG,QAAQ,GAAGL,OAAO,CAACM,MAAM,CAAC,CAAAC,CAAC,KAAI,CAACA,CAAC,CAACJ,KAAK,CAAC,CAACF,GAAG,CAAC,CAAAM,CAAC,KAAIA,CAAC,CAACH,KAAK,CAAC;EAChE,IAAIC,QAAQ,CAACxB,MAAM,KAAK,CAAC,EAAE;IACzB,MAAM2B,eAAe,GAAG3C,QAAQ,CAACoC,GAAG,CAAC,CAACM,CAAC,EAAEL,GAAG;IAC1CA,GAAG,IAAIG,QAAQ,GAAGrD,MAAM,CAACmB,GAAG,CAAE,IAAGoC,CAAE,GAAE,CAAC,GAAGvD,MAAM,CAAC0B,KAAK,CAAE,IAAG6B,CAAE,GAAE,CAAC,CAChE;;IACD,OAAO;MACLrC,OAAO,EAAE,KAAK;MACdN,GAAG,EAAG,IAAGA,GAAG,CAACgB,QAAS,GAAE;MACxBf,QAAQ,EAAG,IAAG2C,eAAgB;IAChC,CAAC;EACH;;EAEA,OAAO;IACLtC,OAAO,EAAE,IAAI;IACbN,GAAG,EAAG,IAAGA,GAAG,CAACgB,QAAS,GAAE;IACxBf,QAAQ,EAAG,IAAGb,MAAM,CAAC0B,KAAK,CAACb,QAAQ,CAACO,QAAQ,EAAE,CAAE;EAClD,CAAC;AACH;;AAEA;AACA,SAASqC,oBAAoB,CAAIC,CAAM,EAAU;EAC/C,OAAQ,IAAGA,CAAC,CAACC,IAAI,CAAC,GAAG,CAAE,GAAE;AAC3B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,aAAa,CAAChD,GAAU,EAAEC,QAAwB,EAAc;EACvE;EACA,IAAI,EAAED,GAAG,YAAYL,MAAM,CAAC,EAAE;IAC5B,OAAO;MACLW,OAAO,EAAE,KAAK;MACdN,GAAG,EAAG,GAAEZ,MAAM,CAACmB,GAAG,CAAC,CAAC,OAAOP,GAAG,EAAEQ,QAAQ,EAAE,CAAE,IAAGR,GAAI,GAAE;MACrDC,QAAQ,EAAG;IACb,CAAC;EACH;;EAEA;EACA;IACE,MAAMC,GAAG,GAAGF,GAAG,CAACG,IAAI,CAACgC,WAAW;IAChC,IAAI,CAACzC,YAAY,CAACM,GAAG,CAACgB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;MACrC,OAAO;QACLV,OAAO,EAAE,KAAK;QACdN,GAAG,EAAG,GAAEZ,MAAM,CAACmB,GAAG,CAACL,GAAG,CAACM,QAAQ,EAAE,CAAE,IAAGR,GAAI,GAAE;QAC5CC,QAAQ,EAAG;MACb,CAAC;IACH;EACF;;EAEA;EACA;IACE,MAAMsB,KAAK,GAAGvB,GAAG,CAACgB,QAAQ,CAACC,MAAM;IACjC,MAAMS,KAAK,GAAG1B,GAAG,CAACgB,QAAQ,CAAC,CAAC,CAAC,CAACC,MAAM;IACpC,MAAMQ,KAAK,GAAGxB,QAAQ,CAACgB,MAAM;IAC7B,MAAMW,KAAK,GAAG3B,QAAQ,CAAC,CAAC,CAAC,CAACgB,MAAM;;IAEhC,IAAIM,KAAK,KAAKE,KAAK,IAAIC,KAAK,KAAKE,KAAK,EAAE;MACtCvC,MAAM,CAAC,KAAK,CAAC;MACb,OAAO;QACLiB,OAAO,EAAE,KAAK;QACdN,GAAG,EAAG,aAAYuB,KAAM,IAAGG,KAAM,WAAU;QAC3CzB,QAAQ,EAAG,aAAYwB,KAAM,IAAGG,KAAM;MACxC,CAAC;IACH;EACF;;EAEA;EACA,IAAItB,OAAO,GAAG,IAAI;EAClB,MAAM2C,gBAA4B,GAAG,CAAC,GAAGC,KAAK,CAAClD,GAAG,CAACgB,QAAQ,CAACC,MAAM,CAAC,CAAC,CAACoB,GAAG,CAAC,CAAAjB,CAAC,KAAI;EAC5E,GAAG8B,KAAK,CAAClD,GAAG,CAACgB,QAAQ,CAAC,CAAC,CAAC,CAACC,MAAM,CAAC,CACjC,CAAC;;;EAEFjB,GAAG,CAACgB,QAAQ,CAACmC,OAAO,CAAC,CAACtB,CAAC,EAAER,CAAC,KAAK;IAC7BQ,CAAC,CAACsB,OAAO,CAAC,CAACC,CAAC,EAAEtB,CAAC,KAAK;MAClB,MAAMrB,CAAC,GAAG2C,CAAC,CAACvC,KAAe;MAC3B,IAAIZ,QAAQ,CAACoB,CAAC,CAAC,CAACS,CAAC,CAAC,CAACG,QAAQ,CAACxB,CAAC,CAAC,EAAE;QAC9BwC,gBAAgB,CAAC5B,CAAC,CAAC,CAACS,CAAC,CAAC,GAAG1C,MAAM,CAAC0B,KAAK,CAAE,IAAGb,QAAQ,CAACoB,CAAC,CAAC,CAACS,CAAC,CAAE,GAAE,CAAC;MAC9D,CAAC,MAAM;QACLxB,OAAO,GAAG,KAAK;QACf2C,gBAAgB,CAAC5B,CAAC,CAAC,CAACS,CAAC,CAAC,GAAG1C,MAAM,CAACmB,GAAG,CAAE,IAAGN,QAAQ,CAACoB,CAAC,CAAC,CAACS,CAAC,CAAE,GAAE,CAAC;MAC5D;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;;EAEF,OAAO;IACLxB,OAAO;IACPN,GAAG,EAAE6C,oBAAoB,CAAC7C,GAAG,CAACgB,QAAQ,CAACqB,GAAG,CAACQ,oBAAoB,CAAC,CAAC;IACjE5C,QAAQ,EAAE4C,oBAAoB,CAACI,gBAAgB,CAACZ,GAAG,CAACQ,oBAAoB,CAAC;EAC3E,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASvB,OAAO;AACrBtB,GAAU;AACVC,QAA4D;AAChD;EACZ,IAAIA,QAAQ,YAAYiD,KAAK,EAAE;IAC7B,IAAIjD,QAAQ,CAAC,CAAC,CAAC,YAAYiD,KAAK,EAAE;MAChCjD,QAAQ,GAAGA,QAA0B;MACrC,OAAO+C,aAAa,CAAChD,GAAG,EAAEC,QAAQ,CAAC;IACrC,CAAC,MAAM;MACLA,QAAQ,GAAGA,QAAwB;MACnC,OAAOiC,aAAa,CAAClC,GAAG,EAAEC,QAAQ,CAAC;IACrC;EACF;;EAEA,IAAIA,QAAQ,YAAYH,UAAU,EAAE;IAClC,OAAOkC,eAAe,CAAChC,GAAG,EAAEC,QAAQ,CAAC;EACvC;;EAEA,OAAOF,YAAY,CAACC,GAAG,EAAEC,QAAQ,CAAC;AACpC;;AAEA;AACA,OAAO,SAASoD,KAAK,CAAC,GAAGC,YAA2B,EAAc;EAChE,MAAMzB,CAAa,GAAG;IACpBP,OAAO,EAAE,CAACtB,GAAU,KAAK;MACvB,MAAMuD,MAAM,GAAG,IAAIC,GAAG,EAAU;MAChC,KAAK,MAAM9C,CAAC,IAAI4C,YAAY,EAAE;QAC5B,MAAMG,GAAG,GAAGhE,YAAY,CAACiB,CAAC,CAAC,CAACY,OAAO,CAACtB,GAAG,CAAC;QACxC,IAAIyD,GAAG,CAACnD,OAAO,EAAE;UACf,OAAOmD,GAAG;QACZ;QACAF,MAAM,CAACG,GAAG,CAACD,GAAG,CAACxD,QAAQ,CAAC;MAC1B;MACA,OAAO,EAAEK,OAAO,EAAE,KAAK,EAAEN,GAAG,EAAEA,GAAG,CAACQ,QAAQ,EAAE,EAAEP,QAAQ,EAAE,CAAC,GAAGsD,MAAM,CAAC,CAACR,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;IACpF,CAAC;IACDnC,IAAI,EAAE;EACR,CAAC;;EAED,IAAIzB,sBAAsB,EAAE,EAAE;IAC5B;IACA;IACA0C,CAAC,CAAC8B,IAAI,GAAGL,YAAY;EACvB;EACA,OAAOzB,CAAC;AACV;;AAEA;AACA,OAAO,SAAS+B,aAAa,CAACC,WAAoC,EAAc;EAC9E,MAAMhC,CAAa,GAAG;IACpBP,OAAO,EAAE,CAACtB,GAAU,KAAK;MACvB,IAAI6D,WAAW,KAAKC,SAAS,EAAE;QAC7B,OAAOrE,YAAY,CAACoE,WAAW,CAAC,CAACvC,OAAO,CAACtB,GAAG,CAAC;MAC/C;MACA,OAAO,EAAEM,OAAO,EAAE,IAAI,EAAEN,GAAG,EAAEA,GAAG,CAACQ,QAAQ,EAAE,EAAEP,QAAQ,EAAG,6BAA4B,CAAC,CAAC;IACxF,CAAC;IACDW,IAAI,EAAE;EACR,CAAC;;EAED,IAAIiD,WAAW,KAAKC,SAAS,IAAI3E,sBAAsB,EAAE,EAAE;IACzD;IACA;IACA0C,CAAC,CAAC8B,IAAI,GAAGE,WAAW;EACtB;EACA,OAAOhC,CAAC;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASkC,UAAU,CAACC,GAAW,GAAG,aAAa,EAAc;EAClE,MAAMnC,CAAa,GAAG;IACpBP,OAAO,EAAE,CAACtB,GAAU,KAAK;MACvB,OAAO,EAAEM,OAAO,EAAE,IAAI,EAAEN,GAAG,EAAEA,GAAG,CAACQ,QAAQ,EAAE,EAAEP,QAAQ,EAAE+D,GAAG,CAAC,CAAC;IAC9D,CAAC;IACDpD,IAAI,EAAE;EACR,CAAC;;EAED,IAAIzB,sBAAsB,EAAE,EAAE;IAC5B;IACA;IACA0C,CAAC,CAAC8B,IAAI,GAAGK,GAAG;EACd;EACA,OAAOnC,CAAC;AACV;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASoC,mBAAmB,CAACpC,CAAa,EAAwB;EACvE,QAAQA,CAAC,CAACjB,IAAI;IACZ,KAAK,OAAO,CAAE;QACZ,MAAMsD,CAAC,GAAGrC,CAAC,CAAC8B,IAAqB;QACjC,OAAO,EAAE/C,IAAI,EAAE,OAAO,EAAE+C,IAAI,EAAEO,CAAC,CAAC7B,GAAG,CAAC7C,oBAAoB,CAAC,CAAC,CAAC;MAC7D;IACA,KAAK,eAAe,CAAE;QACpB,IAAIqC,CAAC,CAAC8B,IAAI,KAAKG,SAAS,EAAE;UACxB,MAAMI,CAAC,GAAGrC,CAAC,CAAC8B,IAAmB;UAC/B,OAAO,EAAE/C,IAAI,EAAE,eAAe,EAAE+C,IAAI,EAAEnE,oBAAoB,CAAC0E,CAAC,CAAC,CAAC,CAAC;QACjE;QACA,OAAO,EAAEtD,IAAI,EAAE,eAAe,EAAE+C,IAAI,EAAEG,SAAS,CAAC,CAAC;MACnD;IACA,KAAK,YAAY,CAAE;QACjB,MAAMI,CAAC,GAAGrC,CAAC,CAAC8B,IAAc;QAC1B,OAAO,EAAE/C,IAAI,EAAE,YAAY,EAAEuD,MAAM,EAAED,CAAC,CAAC,CAAC;MAC1C;IACA,KAAK,OAAO;IACZ,KAAK,QAAQ,CAAE;QACb5E,WAAW,CAAE,gBAAeuC,CAAC,CAACjB,IAAK,iCAAgCiB,CAAE,GAAE,CAAC;QACxE;MACF,CAAC;;EAEHvC,WAAW,CAAE,gCAA+BuC,CAAE,GAAE,CAAC;AACnD;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASuC,qBAAqB,CAACC,CAAuB,EAAc;EACzE,QAAQA,CAAC,CAACzD,IAAI;IACZ,KAAK,OAAO,CAAE;QACZ,OAAOyC,KAAK,CAAC,GAAGgB,CAAC,CAACV,IAAI,CAACtB,GAAG,CAAC,CAAA3B,CAAC,KAAInB,sBAAsB,CAACmB,CAAC,CAAC,CAAC,CAAC;MAC7D;IACA,KAAK,eAAe,CAAE;QACpB,OAAOkD,aAAa,CAACS,CAAC,CAACV,IAAI,KAAKG,SAAS,GAAGvE,sBAAsB,CAAC8E,CAAC,CAACV,IAAI,CAAC,GAAGG,SAAS,CAAC;MACzF;IACA,KAAK,YAAY,CAAE;QACjB,OAAOC,UAAU,CAACM,CAAC,CAACF,MAAM,CAAC;MAC7B,CAAC;;EAEH7E,WAAW,CAAE,kCAAiC+E,CAAE,GAAE,CAAC;AACrD"}