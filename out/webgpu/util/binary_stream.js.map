{"version":3,"file":"binary_stream.js","names":["assert","float16ToUint16","uint16ToFloat16","align","BinaryStream","constructor","buffer","offset","view","DataView","Uint8Array","writeBool","value","setUint8","readBool","val","getUint8","writeU8","readU8","writeU16","setUint16","alignedOffset","readU16","getUint16","writeU32","setUint32","readU32","getUint32","writeI8","setInt8","readI8","getInt8","writeI16","setInt16","readI16","getInt16","writeI64","setBigInt64","readI64","getBigInt64","writeI32","setInt32","readI32","getInt32","writeF16","readF16","writeF32","setFloat32","readF32","getFloat32","writeF64","setFloat64","readF64","getFloat64","writeString","length","i","charCodeAt","readString","len","codes","Array","String","fromCharCode","writeArray","writeElement","element","readArray","readElement","array","writeCond","cond","fns","if_true","if_false","readCond","bytes","aligned"],"sources":["../../../src/webgpu/util/binary_stream.ts"],"sourcesContent":["import { assert } from '../../common/util/util.js';\n\nimport { float16ToUint16, uint16ToFloat16 } from './conversion.js';\nimport { align } from './math.js';\n\n/**\n * BinaryStream is a utility to efficiently encode and decode numbers to / from a Uint8Array.\n * BinaryStream uses a number of internal typed arrays to avoid small array allocations when reading\n * and writing.\n */\nexport default class BinaryStream {\n  /**\n   * Constructor\n   * @param buffer the buffer to read from / write to. Array length must be a multiple of 8 bytes.\n   */\n  constructor(buffer: ArrayBufferLike) {\n    this.offset = 0;\n    this.view = new DataView(buffer);\n  }\n\n  /** buffer() returns the stream's buffer sliced to the 8-byte rounded read or write offset */\n  buffer(): Uint8Array {\n    return new Uint8Array(this.view.buffer, 0, align(this.offset, 8));\n  }\n\n  /** writeBool() writes a boolean as 255 or 0 to the buffer at the next byte offset */\n  writeBool(value: boolean) {\n    this.view.setUint8(this.offset++, value ? 255 : 0);\n  }\n\n  /** readBool() reads a boolean from the buffer at the next byte offset */\n  readBool(): boolean {\n    const val = this.view.getUint8(this.offset++);\n    assert(val === 0 || val === 255);\n    return val !== 0;\n  }\n\n  /** writeU8() writes a uint8 to the buffer at the next byte offset */\n  writeU8(value: number) {\n    this.view.setUint8(this.offset++, value);\n  }\n\n  /** readU8() reads a uint8 from the buffer at the next byte offset */\n  readU8(): number {\n    return this.view.getUint8(this.offset++);\n  }\n\n  /** writeU16() writes a uint16 to the buffer at the next 16-bit aligned offset */\n  writeU16(value: number) {\n    this.view.setUint16(this.alignedOffset(2), value, /* littleEndian */ true);\n  }\n\n  /** readU16() reads a uint16 from the buffer at the next 16-bit aligned offset */\n  readU16(): number {\n    return this.view.getUint16(this.alignedOffset(2), /* littleEndian */ true);\n  }\n\n  /** writeU32() writes a uint32 to the buffer at the next 32-bit aligned offset */\n  writeU32(value: number) {\n    this.view.setUint32(this.alignedOffset(4), value, /* littleEndian */ true);\n  }\n\n  /** readU32() reads a uint32 from the buffer at the next 32-bit aligned offset */\n  readU32(): number {\n    return this.view.getUint32(this.alignedOffset(4), /* littleEndian */ true);\n  }\n\n  /** writeI8() writes a int8 to the buffer at the next byte offset */\n  writeI8(value: number) {\n    this.view.setInt8(this.offset++, value);\n  }\n\n  /** readI8() reads a int8 from the buffer at the next byte offset */\n  readI8(): number {\n    return this.view.getInt8(this.offset++);\n  }\n\n  /** writeI16() writes a int16 to the buffer at the next 16-bit aligned offset */\n  writeI16(value: number) {\n    this.view.setInt16(this.alignedOffset(2), value, /* littleEndian */ true);\n  }\n\n  /** readI16() reads a int16 from the buffer at the next 16-bit aligned offset */\n  readI16(): number {\n    return this.view.getInt16(this.alignedOffset(2), /* littleEndian */ true);\n  }\n\n  /** writeI64() writes a bitint to the buffer at the next 64-bit aligned offset */\n  writeI64(value: bigint) {\n    this.view.setBigInt64(this.alignedOffset(8), value, /* littleEndian */ true);\n  }\n\n  /** readI64() reads a bigint from the buffer at the next 64-bit aligned offset */\n  readI64(): bigint {\n    return this.view.getBigInt64(this.alignedOffset(8), /* littleEndian */ true);\n  }\n\n  /** writeI32() writes a int32 to the buffer at the next 32-bit aligned offset */\n  writeI32(value: number) {\n    this.view.setInt32(this.alignedOffset(4), value, /* littleEndian */ true);\n  }\n\n  /** readI32() reads a int32 from the buffer at the next 32-bit aligned offset */\n  readI32(): number {\n    return this.view.getInt32(this.alignedOffset(4), /* littleEndian */ true);\n  }\n\n  /** writeF16() writes a float16 to the buffer at the next 16-bit aligned offset */\n  writeF16(value: number) {\n    this.writeU16(float16ToUint16(value));\n  }\n\n  /** readF16() reads a float16 from the buffer at the next 16-bit aligned offset */\n  readF16(): number {\n    return uint16ToFloat16(this.readU16());\n  }\n\n  /** writeF32() writes a float32 to the buffer at the next 32-bit aligned offset */\n  writeF32(value: number) {\n    this.view.setFloat32(this.alignedOffset(4), value, /* littleEndian */ true);\n  }\n\n  /** readF32() reads a float32 from the buffer at the next 32-bit aligned offset */\n  readF32(): number {\n    return this.view.getFloat32(this.alignedOffset(4), /* littleEndian */ true);\n  }\n\n  /** writeF64() writes a float64 to the buffer at the next 64-bit aligned offset */\n  writeF64(value: number) {\n    this.view.setFloat64(this.alignedOffset(8), value, /* littleEndian */ true);\n  }\n\n  /** readF64() reads a float64 from the buffer at the next 64-bit aligned offset */\n  readF64(): number {\n    return this.view.getFloat64(this.alignedOffset(8), /* littleEndian */ true);\n  }\n\n  /**\n   * writeString() writes a length-prefixed UTF-16 string to the buffer at the next 32-bit aligned\n   * offset\n   */\n  writeString(value: string) {\n    this.writeU32(value.length);\n    for (let i = 0; i < value.length; i++) {\n      this.writeU16(value.charCodeAt(i));\n    }\n  }\n\n  /**\n   * readString() writes a length-prefixed UTF-16 string from the buffer at the next 32-bit aligned\n   * offset\n   */\n  readString(): string {\n    const len = this.readU32();\n    const codes = new Array<number>(len);\n    for (let i = 0; i < len; i++) {\n      codes[i] = this.readU16();\n    }\n    return String.fromCharCode(...codes);\n  }\n\n  /**\n   * writeArray() writes a length-prefixed array of T elements to the buffer at the next 32-bit\n   * aligned offset, using the provided callback to write the individual elements\n   */\n  writeArray<T>(value: readonly T[], writeElement: (s: BinaryStream, element: T) => void) {\n    this.writeU32(value.length);\n    for (const element of value) {\n      writeElement(this, element);\n    }\n  }\n\n  /**\n   * readArray() reads a length-prefixed array of T elements from the buffer at the next 32-bit\n   * aligned offset, using the provided callback to read the individual elements\n   */\n  readArray<T>(readElement: (s: BinaryStream) => T): T[] {\n    const len = this.readU32();\n    const array = new Array<T>(len);\n    for (let i = 0; i < len; i++) {\n      array[i] = readElement(this);\n    }\n    return array;\n  }\n\n  /**\n   * writeCond() writes the boolean condition `cond` to the buffer, then either calls if_true if\n   * `cond` is true, otherwise if_false\n   */\n  writeCond<T, F>(cond: boolean, fns: { if_true: () => T; if_false: () => F }) {\n    this.writeBool(cond);\n    if (cond) {\n      return fns.if_true();\n    } else {\n      return fns.if_false();\n    }\n  }\n\n  /**\n   * readCond() reads a boolean condition from the buffer, then either calls if_true if\n   * the condition was is true, otherwise if_false\n   */\n  readCond<T, F>(fns: { if_true: () => T; if_false: () => F }) {\n    if (this.readBool()) {\n      return fns.if_true();\n    } else {\n      return fns.if_false();\n    }\n  }\n\n  /**\n   * alignedOffset() aligns this.offset to `bytes`, then increments this.offset by `bytes`.\n   * @returns the old offset aligned to the next multiple of `bytes`.\n   */\n  private alignedOffset(bytes: number) {\n    const aligned = align(this.offset, bytes);\n    this.offset = aligned + bytes;\n    return aligned;\n  }\n\n  private offset: number;\n  private view: DataView;\n}\n"],"mappings":"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"}