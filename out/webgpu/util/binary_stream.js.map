{"version":3,"file":"binary_stream.js","names":["assert","Float16Array","align","BinaryStream","constructor","buffer","offset","u8","u16","Uint16Array","u32","Uint32Array","i8","Int8Array","i16","Int16Array","i32","Int32Array","f16","f32","Float32Array","f64","Float64Array","slice","writeBool","value","readBool","val","writeU8","readU8","u8View","at","Uint8Array","writeU16","bumpWord","readU16","u16View","writeU32","readU32","u32View","writeI8","readI8","i8View","writeI16","readI16","i16View","writeI32","readI32","i32View","writeF16","readF16","f16View","writeF32","readF32","f32View","writeF64","readF64","f64View","writeString","length","i","charCodeAt","readString","len","codes","Array","String","fromCharCode","writeArray","writeElement","element","readArray","readElement","array","writeCond","cond","fns","if_true","if_false","readCond","bytes","multiple","Math","floor"],"sources":["../../../src/webgpu/util/binary_stream.ts"],"sourcesContent":["import { assert } from '../../common/util/util.js';\nimport { Float16Array } from '../../external/petamoriken/float16/float16.js';\n\nimport { align } from './math.js';\n\n/**\n * BinaryStream is a utility to efficiently encode and decode numbers to / from a Uint8Array.\n * BinaryStream uses a number of internal typed arrays to avoid small array allocations when reading\n * and writing.\n */\nexport default class BinaryStream {\n  /**\n   * Constructor\n   * @param buffer the buffer to read from / write to. Array length must be a multiple of 8 bytes.\n   */\n  constructor(buffer: Uint8Array) {\n    this.offset = 0;\n    this.u8 = buffer;\n    this.u16 = new Uint16Array(this.u8.buffer);\n    this.u32 = new Uint32Array(this.u8.buffer);\n    this.i8 = new Int8Array(this.u8.buffer);\n    this.i16 = new Int16Array(this.u8.buffer);\n    this.i32 = new Int32Array(this.u8.buffer);\n    this.f16 = new Float16Array(this.u8.buffer);\n    this.f32 = new Float32Array(this.u8.buffer);\n    this.f64 = new Float64Array(this.u8.buffer);\n  }\n\n  /** buffer() returns the stream's buffer sliced to the 8-byte rounded read or write offset */\n  buffer(): Uint8Array {\n    return this.u8.slice(0, align(this.offset, 8));\n  }\n\n  /** writeBool() writes a boolean as 255 or 0 to the buffer at the next byte offset */\n  writeBool(value: boolean) {\n    this.u8[this.offset++] = value ? 255 : 0;\n  }\n\n  /** readBool() reads a boolean from the buffer at the next byte offset */\n  readBool(): boolean {\n    const val = this.u8[this.offset++];\n    assert(val === 0 || val === 255);\n    return val !== 0;\n  }\n\n  /** writeU8() writes a uint8 to the buffer at the next byte offset */\n  writeU8(value: number) {\n    this.u8[this.offset++] = value;\n  }\n\n  /** readU8() reads a uint8 from the buffer at the next byte offset */\n  readU8(): number {\n    return this.u8[this.offset++];\n  }\n\n  /** u8View() returns a Uint8Array view of the uint8 at the next byte offset */\n  u8View(): Uint8Array {\n    const at = this.offset++;\n    return new Uint8Array(this.u8.buffer, at, 1);\n  }\n\n  /** writeU16() writes a uint16 to the buffer at the next 16-bit aligned offset */\n  writeU16(value: number) {\n    this.u16[this.bumpWord(2)] = value;\n  }\n\n  /** readU16() reads a uint16 from the buffer at the next 16-bit aligned offset */\n  readU16(): number {\n    return this.u16[this.bumpWord(2)];\n  }\n\n  /** u16View() returns a Uint16Array view of the uint16 at the next 16-bit aligned offset */\n  u16View(): Uint16Array {\n    const at = this.bumpWord(2);\n    return new Uint16Array(this.u16.buffer, at * 2, 1);\n  }\n\n  /** writeU32() writes a uint32 to the buffer at the next 32-bit aligned offset */\n  writeU32(value: number) {\n    this.u32[this.bumpWord(4)] = value;\n  }\n\n  /** readU32() reads a uint32 from the buffer at the next 32-bit aligned offset */\n  readU32(): number {\n    return this.u32[this.bumpWord(4)];\n  }\n\n  /** u32View() returns a Uint32Array view of the uint32 at the next 32-bit aligned offset */\n  u32View(): Uint32Array {\n    const at = this.bumpWord(4);\n    return new Uint32Array(this.u32.buffer, at * 4, 1);\n  }\n\n  /** writeI8() writes a int8 to the buffer at the next byte offset */\n  writeI8(value: number) {\n    this.i8[this.offset++] = value;\n  }\n\n  /** readI8() reads a int8 from the buffer at the next byte offset */\n  readI8(): number {\n    return this.i8[this.offset++];\n  }\n\n  /** i8View() returns a Uint8Array view of the uint8 at the next byte offset */\n  i8View(): Int8Array {\n    const at = this.offset++;\n    return new Int8Array(this.i8.buffer, at, 1);\n  }\n\n  /** writeI16() writes a int16 to the buffer at the next 16-bit aligned offset */\n  writeI16(value: number) {\n    this.i16[this.bumpWord(2)] = value;\n  }\n\n  /** readI16() reads a int16 from the buffer at the next 16-bit aligned offset */\n  readI16(): number {\n    return this.i16[this.bumpWord(2)];\n  }\n\n  /** i16View() returns a Int16Array view of the uint16 at the next 16-bit aligned offset */\n  i16View(): Int16Array {\n    const at = this.bumpWord(2);\n    return new Int16Array(this.i16.buffer, at * 2, 1);\n  }\n\n  /** writeI32() writes a int32 to the buffer at the next 32-bit aligned offset */\n  writeI32(value: number) {\n    this.i32[this.bumpWord(4)] = value;\n  }\n\n  /** readI32() reads a int32 from the buffer at the next 32-bit aligned offset */\n  readI32(): number {\n    return this.i32[this.bumpWord(4)];\n  }\n\n  /** i32View() returns a Int32Array view of the uint32 at the next 32-bit aligned offset */\n  i32View(): Int32Array {\n    const at = this.bumpWord(4);\n    return new Int32Array(this.i32.buffer, at * 4, 1);\n  }\n\n  /** writeF16() writes a float16 to the buffer at the next 16-bit aligned offset */\n  writeF16(value: number) {\n    this.f16[this.bumpWord(2)] = value;\n  }\n\n  /** readF16() reads a float16 from the buffer at the next 16-bit aligned offset */\n  readF16(): number {\n    return this.f16[this.bumpWord(2)];\n  }\n\n  /** f16View() returns a Float16Array view of the uint16 at the next 16-bit aligned offset */\n  f16View(): Float16Array {\n    const at = this.bumpWord(2);\n    return new Float16Array(this.f16.buffer, at * 2, 1);\n  }\n\n  /** writeF32() writes a float32 to the buffer at the next 32-bit aligned offset */\n  writeF32(value: number) {\n    this.f32[this.bumpWord(4)] = value;\n  }\n\n  /** readF32() reads a float32 from the buffer at the next 32-bit aligned offset */\n  readF32(): number {\n    return this.f32[this.bumpWord(4)];\n  }\n\n  /** f32View() returns a Float32Array view of the uint32 at the next 32-bit aligned offset */\n  f32View(): Float32Array {\n    const at = this.bumpWord(4);\n    return new Float32Array(this.f32.buffer, at * 4, 1);\n  }\n\n  /** writeF64() writes a float64 to the buffer at the next 64-bit aligned offset */\n  writeF64(value: number) {\n    this.f64[this.bumpWord(8)] = value;\n  }\n\n  /** readF64() reads a float64 from the buffer at the next 64-bit aligned offset */\n  readF64(): number {\n    return this.f64[this.bumpWord(8)];\n  }\n\n  /** f64View() returns a Float64Array view of the uint64 at the next 64-bit aligned offset */\n  f64View(): Float64Array {\n    const at = this.bumpWord(8);\n    return new Float64Array(this.f64.buffer, at * 8, 1);\n  }\n\n  /**\n   * writeString() writes a length-prefixed UTF-16 string to the buffer at the next 32-bit aligned\n   * offset\n   */\n  writeString(value: string) {\n    this.writeU32(value.length);\n    for (let i = 0; i < value.length; i++) {\n      this.writeU16(value.charCodeAt(i));\n    }\n  }\n\n  /**\n   * readString() writes a length-prefixed UTF-16 string from the buffer at the next 32-bit aligned\n   * offset\n   */\n  readString(): string {\n    const len = this.readU32();\n    const codes = new Array<number>(len);\n    for (let i = 0; i < len; i++) {\n      codes[i] = this.readU16();\n    }\n    return String.fromCharCode(...codes);\n  }\n\n  /**\n   * writeArray() writes a length-prefixed array of T elements to the buffer at the next 32-bit\n   * aligned offset, using the provided callback to write the individual elements\n   */\n  writeArray<T>(value: readonly T[], writeElement: (s: BinaryStream, element: T) => void) {\n    this.writeU32(value.length);\n    for (const element of value) {\n      writeElement(this, element);\n    }\n  }\n\n  /**\n   * readArray() reads a length-prefixed array of T elements from the buffer at the next 32-bit\n   * aligned offset, using the provided callback to read the individual elements\n   */\n  readArray<T>(readElement: (s: BinaryStream) => T): T[] {\n    const len = this.readU32();\n    const array = new Array<T>(len);\n    for (let i = 0; i < len; i++) {\n      array[i] = readElement(this);\n    }\n    return array;\n  }\n\n  /**\n   * writeCond() writes the boolean condition `cond` to the buffer, then either calls if_true if\n   * `cond` is true, otherwise if_false\n   */\n  writeCond<T, F>(cond: boolean, fns: { if_true: () => T; if_false: () => F }) {\n    this.writeBool(cond);\n    if (cond) {\n      return fns.if_true();\n    } else {\n      return fns.if_false();\n    }\n  }\n\n  /**\n   * readCond() reads a boolean condition from the buffer, then either calls if_true if\n   * the condition was is true, otherwise if_false\n   */\n  readCond<T, F>(fns: { if_true: () => T; if_false: () => F }) {\n    if (this.readBool()) {\n      return fns.if_true();\n    } else {\n      return fns.if_false();\n    }\n  }\n\n  /**\n   * bumpWord() increments this.offset by `bytes`, after first aligning this.offset to `bytes`.\n   * @returns the old offset aligned to the next multiple of `bytes`, divided by `bytes`.\n   */\n  private bumpWord(bytes: number) {\n    const multiple = Math.floor((this.offset + bytes - 1) / bytes);\n    this.offset = (multiple + 1) * bytes;\n    return multiple;\n  }\n\n  private offset: number;\n  private u8: Uint8Array;\n  private u16: Uint16Array;\n  private u32: Uint32Array;\n  private i8: Int8Array;\n  private i16: Int16Array;\n  private i32: Int32Array;\n  private f16: Float16Array;\n  private f32: Float32Array;\n  private f64: Float64Array;\n}\n"],"mappings":"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"}