{"version":3,"file":"color_space_conversion.js","names":["assert","unreachable","multiplyMatrices","lin_sRGB","RGB","map","val","sign","abs","Math","pow","gam_sRGB","lin_sRGB_to_XYZ","rgb","M","XYZ_to_lin_sRGB","XYZ","lin_P3","gam_P3","lin_P3_to_XYZ","XYZ_to_lin_P3","displayP3ToSrgb","pixel","R","undefined","G","B","rgbVec","rgbMatrix","A","srgbToDisplayP3","makeInPlaceColorConversion","srcPremultiplied","dstPremultiplied","srcColorSpace","dstColorSpace","requireColorSpaceConversion","requireUnpremultiplyAlpha","requirePremultiplyAlpha","rgba"],"sources":["../../../src/webgpu/util/color_space_conversion.ts"],"sourcesContent":["import { assert, unreachable } from '../../common/util/util.js';\n\nimport { multiplyMatrices } from './math.js';\n\n// These color space conversion function definitions are copied directly from\n// CSS Color Module Level 4 Sample Code: https://drafts.csswg.org/css-color/#color-conversion-code\n// *EXCEPT* the conversion matrices are replaced with exact rational forms computed here:\n// https://github.com/kainino0x/exact_css_xyz_matrices\n//   using this Rust crate: https://crates.io/crates/rgb_derivation\n//   as described for sRGB on this page: https://mina86.com/2019/srgb-xyz-matrix/\n//   but using the numbers from the CSS spec: https://www.w3.org/TR/css-color-4/#predefined\n\n// Sample code for color conversions\n// Conversion can also be done using ICC profiles and a Color Management System\n// For clarity, a library is used for matrix multiplication (multiply-matrices.js)\n\n// sRGB-related functions\n\n/**\n * convert an array of sRGB values\n * where in-gamut values are in the range [0 - 1]\n * to linear light (un-companded) form.\n * https://en.wikipedia.org/wiki/SRGB\n * Extended transfer function:\n * for negative values,  linear portion is extended on reflection of axis,\n * then reflected power function is used.\n */\nfunction lin_sRGB(RGB: Array<number>) {\n  return RGB.map(val => {\n    const sign = val < 0 ? -1 : 1;\n    const abs = Math.abs(val);\n\n    if (abs < 0.04045) {\n      return val / 12.92;\n    }\n\n    return sign * Math.pow((abs + 0.055) / 1.055, 2.4);\n  });\n}\n\n/**\n * convert an array of linear-light sRGB values in the range 0.0-1.0\n * to gamma corrected form\n * https://en.wikipedia.org/wiki/SRGB\n * Extended transfer function:\n * For negative values, linear portion extends on reflection\n * of axis, then uses reflected pow below that\n */\nfunction gam_sRGB(RGB: Array<number>) {\n  return RGB.map(val => {\n    const sign = val < 0 ? -1 : 1;\n    const abs = Math.abs(val);\n\n    if (abs > 0.0031308) {\n      return sign * (1.055 * Math.pow(abs, 1 / 2.4) - 0.055);\n    }\n\n    return 12.92 * val;\n  });\n}\n\n/**\n * convert an array of linear-light sRGB values to CIE XYZ\n * using sRGB's own white, D65 (no chromatic adaptation)\n */\nfunction lin_sRGB_to_XYZ(rgb: Array<Array<number>>) {\n  /* prettier-ignore */\n  const M = [\n    [506752 / 1228815,  87881 / 245763,   12673 /   70218],\n    [ 87098 /  409605, 175762 / 245763,   12673 /  175545],\n    [  7918 /  409605,  87881 / 737289, 1001167 / 1053270],\n  ];\n  return multiplyMatrices(M, rgb);\n}\n\n/**\n * convert XYZ to linear-light sRGB\n * using sRGB's own white, D65 (no chromatic adaptation)\n */\nfunction XYZ_to_lin_sRGB(XYZ: Array<Array<number>>) {\n  /* prettier-ignore */\n  const M = [\n    [  12831 /   3959,    -329 /    214, -1974 /   3959],\n    [-851781 / 878810, 1648619 / 878810, 36519 / 878810],\n    [    705 /  12673,   -2585 /  12673,   705 /    667],\n  ];\n\n  return multiplyMatrices(M, XYZ);\n}\n\n//  display-p3-related functions\n\n/**\n * convert an array of display-p3 RGB values in the range 0.0 - 1.0\n * to linear light (un-companded) form.\n */\nfunction lin_P3(RGB: Array<number>) {\n  return lin_sRGB(RGB); // same as sRGB\n}\n\n/**\n * convert an array of linear-light display-p3 RGB  in the range 0.0-1.0\n * to gamma corrected form\n */\nfunction gam_P3(RGB: Array<number>) {\n  return gam_sRGB(RGB); // same as sRGB\n}\n\n/**\n * convert an array of linear-light display-p3 values to CIE XYZ\n * using display-p3's D65 (no chromatic adaptation)\n */\nfunction lin_P3_to_XYZ(rgb: Array<Array<number>>) {\n  /* prettier-ignore */\n  const M = [\n    [608311 / 1250200, 189793 / 714400,  198249 / 1000160],\n    [ 35783 /  156275, 247089 / 357200,  198249 / 2500400],\n    [     0 /       1,  32229 / 714400, 5220557 / 5000800],\n  ];\n\n  return multiplyMatrices(M, rgb);\n}\n\n/**\n * convert XYZ to linear-light P3\n * using display-p3's own white, D65 (no chromatic adaptation)\n */\nfunction XYZ_to_lin_P3(XYZ: Array<Array<number>>) {\n  /* prettier-ignore */\n  const M = [\n    [446124 / 178915, -333277 / 357830, -72051 / 178915],\n    [-14852 /  17905,   63121 /  35810,    423 /  17905],\n    [ 11844 / 330415,  -50337 / 660830, 316169 / 330415],\n  ];\n\n  return multiplyMatrices(M, XYZ);\n}\n\n/**\n * @returns the converted pixels in `{R: number, G: number, B: number, A: number}`.\n *\n * Follow conversion steps in CSS Color Module Level 4\n * https://drafts.csswg.org/css-color/#predefined-to-predefined\n * display-p3 and sRGB share the same white points.\n */\nexport function displayP3ToSrgb(pixel: Readonly<RGBA>): RGBA {\n  assert(\n    pixel.R !== undefined && pixel.G !== undefined && pixel.B !== undefined,\n    'color space conversion requires all of R, G and B components'\n  );\n\n  let rgbVec = [pixel.R, pixel.G, pixel.B];\n  rgbVec = lin_P3(rgbVec);\n  let rgbMatrix = [[rgbVec[0]], [rgbVec[1]], [rgbVec[2]]];\n  rgbMatrix = XYZ_to_lin_sRGB(lin_P3_to_XYZ(rgbMatrix));\n  rgbVec = [rgbMatrix[0][0], rgbMatrix[1][0], rgbMatrix[2][0]];\n  rgbVec = gam_sRGB(rgbVec);\n\n  return { R: rgbVec[0], G: rgbVec[1], B: rgbVec[2], A: pixel.A };\n}\n/**\n * @returns the converted pixels in `{R: number, G: number, B: number, A: number}`.\n *\n * Follow conversion steps in CSS Color Module Level 4\n * https://drafts.csswg.org/css-color/#predefined-to-predefined\n * display-p3 and sRGB share the same white points.\n */\nexport function srgbToDisplayP3(pixel: Readonly<RGBA>): RGBA {\n  assert(\n    pixel.R !== undefined && pixel.G !== undefined && pixel.B !== undefined,\n    'color space conversion requires all of R, G and B components'\n  );\n\n  let rgbVec = [pixel.R, pixel.G, pixel.B];\n  rgbVec = lin_sRGB(rgbVec);\n  let rgbMatrix = [[rgbVec[0]], [rgbVec[1]], [rgbVec[2]]];\n  rgbMatrix = XYZ_to_lin_P3(lin_sRGB_to_XYZ(rgbMatrix));\n  rgbVec = [rgbMatrix[0][0], rgbMatrix[1][0], rgbMatrix[2][0]];\n  rgbVec = gam_P3(rgbVec);\n\n  return { R: rgbVec[0], G: rgbVec[1], B: rgbVec[2], A: pixel.A };\n}\n\nexport type RGBA = { R: number; G: number; B: number; A: number };\ntype InPlaceColorConversion = (rgba: {\n  R: number;\n  G: number;\n  B: number;\n  readonly A: number; // Alpha never changes during a conversion.\n}) => void;\n\n/**\n * Returns a function which applies the specified colorspace/premultiplication conversion.\n * Does not clamp, so may return values outside of the `dstColorSpace` gamut, due to either\n * color space conversion or alpha premultiplication.\n */\nexport function makeInPlaceColorConversion({\n  srcPremultiplied,\n  dstPremultiplied,\n  srcColorSpace = 'srgb',\n  dstColorSpace = 'srgb',\n}: {\n  srcPremultiplied: boolean;\n  dstPremultiplied: boolean;\n  srcColorSpace?: PredefinedColorSpace;\n  dstColorSpace?: PredefinedColorSpace;\n}): InPlaceColorConversion {\n  const requireColorSpaceConversion = srcColorSpace !== dstColorSpace;\n  const requireUnpremultiplyAlpha =\n    srcPremultiplied && (requireColorSpaceConversion || srcPremultiplied !== dstPremultiplied);\n  const requirePremultiplyAlpha =\n    dstPremultiplied && (requireColorSpaceConversion || srcPremultiplied !== dstPremultiplied);\n\n  return rgba => {\n    assert(rgba.A >= 0.0 && rgba.A <= 1.0, 'rgba.A out of bounds');\n\n    if (requireUnpremultiplyAlpha) {\n      if (rgba.A !== 0.0) {\n        rgba.R /= rgba.A;\n        rgba.G /= rgba.A;\n        rgba.B /= rgba.A;\n      } else {\n        assert(\n          rgba.R === 0.0 && rgba.G === 0.0 && rgba.B === 0.0 && rgba.A === 0.0,\n          'Unpremultiply ops with alpha value 0.0 requires all channels equals to 0.0'\n        );\n      }\n    }\n    // It's possible RGB are now > 1.\n    // This technically represents colors outside the src gamut, so no clamping yet.\n\n    if (requireColorSpaceConversion) {\n      // WebGPU currently only supports dstColorSpace = 'srgb'.\n      if (srcColorSpace === 'display-p3' && dstColorSpace === 'srgb') {\n        rgba = displayP3ToSrgb(rgba);\n      } else {\n        unreachable();\n      }\n    }\n    // Now RGB may also be negative if the src gamut is larger than the dst gamut.\n\n    if (requirePremultiplyAlpha) {\n      rgba.R *= rgba.A;\n      rgba.G *= rgba.A;\n      rgba.B *= rgba.A;\n    }\n  };\n}\n"],"mappings":"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"}