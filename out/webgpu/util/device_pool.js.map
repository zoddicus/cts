{"version":3,"file":"device_pool.js","names":["SkipTestCase","attemptGarbageCollection","getGPU","getDefaultRequestAdapterOptions","assert","raceWithRejectOnTimeout","assertReject","unreachable","getDefaultLimits","kLimits","TestFailedButDeviceReusable","Error","FeaturesNotSupported","TestOOMedShouldAttemptGC","DevicePool","holders","DescriptorToHolderMap","requestAdapter","recorder","gpu","adapter","acquire","descriptor","holder","getOrCreate","state","beginTestScope","release","DeviceHolder","endTestScope","lostInfo","undefined","reason","message","ex","delete","device","destroy","releaseGPUDevice","expectedDeviceLost","expectedLostReason","unsupported","Set","Map","k","v","uncanonicalizedDescriptor","key","canonicalizeDescriptor","has","JSON","stringify","value","get","set","create","add","insertAndCleanUp","kMaxEntries","size","desc","featuresCanonicalized","requiredFeatures","Array","from","sort","limitsCanonicalized","adapterOptions","featureLevel","compatibilityMode","defaultLimits","requiredLimits","limit","requestedValue","defaultValue","default","descriptorCanonicalized","defaultQueue","supportsFeature","feature","features","requestDevice","constructor","_device","lost","then","ev","pushErrorScope","expectDeviceLost","kTimeout","attemptEndTestScope","gpuValidationError","gpuInternalError","gpuOutOfMemoryError","queue","submit","Promise","all","popErrorScope","onSubmittedWorkDone","allowMissingStack","GPUOutOfMemoryError","GPUInternalError","GPUValidationError"],"sources":["../../../src/webgpu/util/device_pool.ts"],"sourcesContent":["import { SkipTestCase, TestCaseRecorder } from '../../common/framework/fixture.js';\nimport { attemptGarbageCollection } from '../../common/util/collect_garbage.js';\nimport { getGPU, getDefaultRequestAdapterOptions } from '../../common/util/navigator_gpu.js';\nimport {\n  assert,\n  raceWithRejectOnTimeout,\n  assertReject,\n  unreachable,\n} from '../../common/util/util.js';\nimport { getDefaultLimits, kLimits } from '../capability_info.js';\n\n// MUST_NOT_BE_IMPORTED_BY_DATA_CACHE\n// This file should not be transitively imported by .cache.ts files\n\nexport interface DeviceProvider {\n  readonly device: GPUDevice;\n  expectDeviceLost(reason: GPUDeviceLostReason): void;\n}\n\nclass TestFailedButDeviceReusable extends Error {}\nclass FeaturesNotSupported extends Error {}\nexport class TestOOMedShouldAttemptGC extends Error {}\n\nexport class DevicePool {\n  private holders = new DescriptorToHolderMap();\n\n  async requestAdapter(recorder: TestCaseRecorder) {\n    const gpu = getGPU(recorder);\n    const adapter = await gpu.requestAdapter();\n    assert(adapter !== null, 'requestAdapter returned null');\n    return adapter;\n  }\n\n  /** Acquire a device from the pool and begin the error scopes. */\n  async acquire(\n    adapter: GPUAdapter,\n    descriptor?: UncanonicalizedDeviceDescriptor\n  ): Promise<DeviceProvider> {\n    const holder = await this.holders.getOrCreate(adapter, descriptor);\n    assert(holder.state === 'free', 'Device was in use on DevicePool.acquire');\n    holder.state = 'acquired';\n    holder.beginTestScope();\n    return holder;\n  }\n\n  /**\n   * End the error scopes and check for errors.\n   * Then, if the device seems reusable, release it back into the pool. Otherwise, drop it.\n   */\n  async release(holder: DeviceProvider): Promise<void> {\n    assert(this.holders instanceof DescriptorToHolderMap, 'DevicePool got into a bad state');\n    assert(holder instanceof DeviceHolder, 'DeviceProvider should always be a DeviceHolder');\n\n    assert(holder.state === 'acquired', 'trying to release a device while already released');\n    try {\n      await holder.endTestScope();\n\n      // (Hopefully if the device was lost, it has been reported by the time endErrorScopes()\n      // has finished (or timed out). If not, it could cause a finite number of extra test\n      // failures following this one (but should recover eventually).)\n      assert(\n        holder.lostInfo === undefined,\n        `Device was unexpectedly lost. Reason: ${holder.lostInfo?.reason}, Message: ${holder.lostInfo?.message}`\n      );\n    } catch (ex) {\n      // Any error that isn't explicitly TestFailedButDeviceReusable forces a new device to be\n      // created for the next test.\n      if (!(ex instanceof TestFailedButDeviceReusable)) {\n        this.holders.delete(holder);\n        if ('destroy' in holder.device) {\n          holder.device.destroy();\n        }\n\n        // Release the (hopefully only) ref to the GPUDevice.\n        holder.releaseGPUDevice();\n\n        // Try to clean up, in case there are stray GPU resources in need of collection.\n        if (ex instanceof TestOOMedShouldAttemptGC) {\n          await attemptGarbageCollection();\n        }\n      }\n      // In the try block, we may throw an error if the device is lost in order to force device\n      // reinitialization, however, if the device lost was expected we want to suppress the error\n      // The device lost is expected when `holder.expectedLostReason` is equal to\n      // `holder.lostInfo.reason`.\n      const expectedDeviceLost =\n        holder.expectedLostReason !== undefined &&\n        holder.lostInfo !== undefined &&\n        holder.expectedLostReason === holder.lostInfo.reason;\n      if (!expectedDeviceLost) {\n        throw ex;\n      }\n    } finally {\n      // Mark the holder as free so the device can be reused (if it's still in this.devices).\n      holder.state = 'free';\n    }\n  }\n}\n\n/**\n * Map from GPUDeviceDescriptor to DeviceHolder.\n */\nclass DescriptorToHolderMap {\n  /** Map keys that are known to be unsupported and can be rejected quickly. */\n  private unsupported: Set<string> = new Set();\n  private holders: Map<string, DeviceHolder> = new Map();\n\n  /** Deletes an item from the map by DeviceHolder value. */\n  delete(holder: DeviceHolder): void {\n    for (const [k, v] of this.holders) {\n      if (v === holder) {\n        this.holders.delete(k);\n        return;\n      }\n    }\n    unreachable(\"internal error: couldn't find DeviceHolder to delete\");\n  }\n\n  /**\n   * Gets a DeviceHolder from the map if it exists; otherwise, calls create() to create one,\n   * inserts it, and returns it.\n   *\n   * If an `uncanonicalizedDescriptor` is provided, it is canonicalized and used as the map key.\n   * If one is not provided, the map key is `\"\"` (empty string).\n   *\n   * Throws SkipTestCase if devices with this descriptor are unsupported.\n   */\n  async getOrCreate(\n    adapter: GPUAdapter,\n    uncanonicalizedDescriptor: UncanonicalizedDeviceDescriptor | undefined\n  ): Promise<DeviceHolder> {\n    const [descriptor, key] = canonicalizeDescriptor(uncanonicalizedDescriptor);\n    // Quick-reject descriptors that are known to be unsupported already.\n    if (this.unsupported.has(key)) {\n      throw new SkipTestCase(\n        `GPUDeviceDescriptor previously failed: ${JSON.stringify(descriptor)}`\n      );\n    }\n\n    // Search for an existing device with the same descriptor.\n    {\n      const value = this.holders.get(key);\n      if (value) {\n        // Move it to the end of the Map (most-recently-used).\n        this.holders.delete(key);\n        this.holders.set(key, value);\n        return value;\n      }\n    }\n\n    // No existing item was found; add a new one.\n    let value;\n    try {\n      value = await DeviceHolder.create(adapter, descriptor);\n    } catch (ex) {\n      if (ex instanceof FeaturesNotSupported) {\n        this.unsupported.add(key);\n        throw new SkipTestCase(\n          `GPUDeviceDescriptor not supported: ${JSON.stringify(descriptor)}\\n${ex?.message ?? ''}`\n        );\n      }\n\n      throw ex;\n    }\n    this.insertAndCleanUp(key, value);\n    return value;\n  }\n\n  /** Insert an entry, then remove the least-recently-used items if there are too many. */\n  private insertAndCleanUp(key: string, value: DeviceHolder) {\n    this.holders.set(key, value);\n\n    const kMaxEntries = 5;\n    if (this.holders.size > kMaxEntries) {\n      // Delete the first (least recently used) item in the set.\n      for (const [key] of this.holders) {\n        this.holders.delete(key);\n        return;\n      }\n    }\n  }\n}\n\nexport type UncanonicalizedDeviceDescriptor = {\n  requiredFeatures?: Iterable<GPUFeatureName>;\n  requiredLimits?: Record<string, GPUSize32>;\n  /** @deprecated this field cannot be used */\n  nonGuaranteedFeatures?: undefined;\n  /** @deprecated this field cannot be used */\n  nonGuaranteedLimits?: undefined;\n  /** @deprecated this field cannot be used */\n  extensions?: undefined;\n  /** @deprecated this field cannot be used */\n  features?: undefined;\n};\ntype CanonicalDeviceDescriptor = Omit<\n  Required<GPUDeviceDescriptor>,\n  'label' | 'nonGuaranteedFeatures' | 'nonGuaranteedLimits'\n>;\n/**\n * Make a stringified map-key from a GPUDeviceDescriptor.\n * Tries to make sure all defaults are resolved, first - but it's okay if some are missed\n * (it just means some GPUDevice objects won't get deduplicated).\n *\n * This does **not** canonicalize `undefined` (the \"default\" descriptor) into a fully-qualified\n * GPUDeviceDescriptor. This is just because `undefined` is a common case and we want to use it\n * as a sanity check that WebGPU is working.\n */\nfunction canonicalizeDescriptor(\n  desc: UncanonicalizedDeviceDescriptor | undefined\n): [CanonicalDeviceDescriptor | undefined, string] {\n  if (desc === undefined) {\n    return [undefined, ''];\n  }\n\n  const featuresCanonicalized = desc.requiredFeatures\n    ? Array.from(new Set(desc.requiredFeatures)).sort()\n    : [];\n\n  /** Canonicalized version of the requested limits: in canonical order, with only values which are\n   * specified _and_ non-default. */\n  const limitsCanonicalized: Record<string, number> = {};\n  // MAINTENANCE_TODO: Remove cast when @webgpu/types includes compatibilityMode\n  const adapterOptions = getDefaultRequestAdapterOptions() as unknown as {\n    compatibilityMode?: boolean;\n  };\n  const featureLevel = adapterOptions?.compatibilityMode ? 'compatibility' : 'core';\n  const defaultLimits = getDefaultLimits(featureLevel);\n  if (desc.requiredLimits) {\n    for (const limit of kLimits) {\n      const requestedValue = desc.requiredLimits[limit];\n      const defaultValue = defaultLimits[limit].default;\n      // Skip adding a limit to limitsCanonicalized if it is the same as the default.\n      if (requestedValue !== undefined && requestedValue !== defaultValue) {\n        limitsCanonicalized[limit] = requestedValue;\n      }\n    }\n  }\n\n  // Type ensures every field is carried through.\n  const descriptorCanonicalized: CanonicalDeviceDescriptor = {\n    requiredFeatures: featuresCanonicalized,\n    requiredLimits: limitsCanonicalized,\n    defaultQueue: {},\n  };\n  return [descriptorCanonicalized, JSON.stringify(descriptorCanonicalized)];\n}\n\nfunction supportsFeature(\n  adapter: GPUAdapter,\n  descriptor: CanonicalDeviceDescriptor | undefined\n): boolean {\n  if (descriptor === undefined) {\n    return true;\n  }\n\n  for (const feature of descriptor.requiredFeatures) {\n    if (!adapter.features.has(feature)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * DeviceHolder has three states:\n * - 'free': Free to be used for a new test.\n * - 'acquired': In use by a running test.\n */\ntype DeviceHolderState = 'free' | 'acquired';\n\n/**\n * Holds a GPUDevice and tracks its state (free/acquired) and handles device loss.\n */\nclass DeviceHolder implements DeviceProvider {\n  /** The device. Will be cleared during cleanup if there were unexpected errors. */\n  private _device: GPUDevice | undefined;\n  /** Whether the device is in use by a test or not. */\n  state: DeviceHolderState = 'free';\n  /** initially undefined; becomes set when the device is lost */\n  lostInfo?: GPUDeviceLostInfo;\n  /** Set if the device is expected to be lost. */\n  expectedLostReason?: GPUDeviceLostReason;\n\n  // Gets a device and creates a DeviceHolder.\n  // If the device is lost, DeviceHolder.lost gets set.\n  static async create(\n    adapter: GPUAdapter,\n    descriptor: CanonicalDeviceDescriptor | undefined\n  ): Promise<DeviceHolder> {\n    assert(adapter !== null, 'requestAdapter is null');\n    if (!supportsFeature(adapter, descriptor)) {\n      throw new FeaturesNotSupported('One or more features are not supported');\n    }\n\n    const device = await adapter.requestDevice(descriptor);\n    assert(device !== null, 'requestDevice returned null');\n\n    return new DeviceHolder(device);\n  }\n\n  private constructor(device: GPUDevice) {\n    this._device = device;\n    void this._device.lost.then(ev => {\n      this.lostInfo = ev;\n    });\n  }\n\n  get device() {\n    assert(this._device !== undefined);\n    return this._device;\n  }\n\n  /** Push error scopes that surround test execution. */\n  beginTestScope(): void {\n    assert(this.state === 'acquired');\n    this.device.pushErrorScope('validation');\n    this.device.pushErrorScope('internal');\n    this.device.pushErrorScope('out-of-memory');\n  }\n\n  /** Mark the DeviceHolder as expecting a device loss when the test scope ends. */\n  expectDeviceLost(reason: GPUDeviceLostReason) {\n    assert(this.state === 'acquired');\n    this.expectedLostReason = reason;\n  }\n\n  /**\n   * Attempt to end test scopes: Check that there are no extra error scopes, and that no\n   * otherwise-uncaptured errors occurred during the test. Time out if it takes too long.\n   */\n  endTestScope(): Promise<void> {\n    assert(this.state === 'acquired');\n    const kTimeout = 5000;\n\n    // Time out if attemptEndTestScope (popErrorScope or onSubmittedWorkDone) never completes. If\n    // this rejects, the device won't be reused, so it's OK that popErrorScope calls may not have\n    // finished.\n    //\n    // This could happen due to a browser bug - e.g.,\n    // as of this writing, on Chrome GPU process crash, popErrorScope just hangs.\n    return raceWithRejectOnTimeout(this.attemptEndTestScope(), kTimeout, 'endTestScope timed out');\n  }\n\n  private async attemptEndTestScope(): Promise<void> {\n    let gpuValidationError: GPUError | null;\n    let gpuInternalError: GPUError | null;\n    let gpuOutOfMemoryError: GPUError | null;\n\n    // Submit to the queue to attempt to force a GPU flush.\n    this.device.queue.submit([]);\n\n    try {\n      // May reject if the device was lost.\n      [gpuOutOfMemoryError, gpuInternalError, gpuValidationError] = await Promise.all([\n        this.device.popErrorScope(),\n        this.device.popErrorScope(),\n        this.device.popErrorScope(),\n      ]);\n    } catch (ex) {\n      assert(this.lostInfo !== undefined, 'popErrorScope failed; did beginTestScope get missed?');\n      throw ex;\n    }\n\n    // Attempt to wait for the queue to be idle.\n    if (this.device.queue.onSubmittedWorkDone) {\n      await this.device.queue.onSubmittedWorkDone();\n    }\n\n    await assertReject('OperationError', this.device.popErrorScope(), {\n      allowMissingStack: true,\n      message: 'There was an extra error scope on the stack after a test',\n    });\n\n    if (gpuOutOfMemoryError !== null) {\n      assert(gpuOutOfMemoryError instanceof GPUOutOfMemoryError);\n      // Don't allow the device to be reused; unexpected OOM could break the device.\n      throw new TestOOMedShouldAttemptGC('Unexpected out-of-memory error occurred');\n    }\n    if (gpuInternalError !== null) {\n      assert(gpuInternalError instanceof GPUInternalError);\n      // Allow the device to be reused.\n      throw new TestFailedButDeviceReusable(\n        `Unexpected internal error occurred: ${gpuInternalError.message}`\n      );\n    }\n    if (gpuValidationError !== null) {\n      assert(gpuValidationError instanceof GPUValidationError);\n      // Allow the device to be reused.\n      throw new TestFailedButDeviceReusable(\n        `Unexpected validation error occurred: ${gpuValidationError.message}`\n      );\n    }\n  }\n\n  /**\n   * Release the ref to the GPUDevice. This should be the only ref held by the DevicePool or\n   * GPUTest, so in theory it can get garbage collected.\n   */\n  releaseGPUDevice(): void {\n    this._device = undefined;\n  }\n}\n"],"mappings":"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"}