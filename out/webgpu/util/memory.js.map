{"version":3,"file":"memory.js","names":["exhaustVramUntilUnder64MB","device","allocateUntilOom","size","buffers","pushErrorScope","buffer","createBuffer","usage","GPUBufferUsage","STORAGE","popErrorScope","push","kLargeChunkSize","kSmallChunkSize","forEach","destroy"],"sources":["../../../src/webgpu/util/memory.ts"],"sourcesContent":["/**\n * Helper to exhaust VRAM until there is less than 64 MB of capacity. Returns\n * an opaque closure which can be called to free the allocated resources later.\n */\nexport async function exhaustVramUntilUnder64MB(device: GPUDevice) {\n  const allocateUntilOom = async (device: GPUDevice, size: number) => {\n    const buffers = [];\n    for (;;) {\n      device.pushErrorScope('out-of-memory');\n      const buffer = device.createBuffer({ size, usage: GPUBufferUsage.STORAGE });\n      if (await device.popErrorScope()) {\n        return buffers;\n      }\n      buffers.push(buffer);\n    }\n  };\n\n  const kLargeChunkSize = 512 * 1024 * 1024;\n  const kSmallChunkSize = 64 * 1024 * 1024;\n  const buffers = await allocateUntilOom(device, kLargeChunkSize);\n  buffers.push(...(await allocateUntilOom(device, kSmallChunkSize)));\n  return () => {\n    buffers.forEach(buffer => buffer.destroy());\n  };\n}\n"],"mappings":";;IAAA;AACA;AACA;AACA,GACA,OAAO,eAAeA,yBAAyBA,CAACC,MAAiB,EAAE,CACjE,MAAMC,gBAAgB,GAAG,MAAAA,CAAOD,MAAiB,EAAEE,IAAY,KAAK;IAClE,MAAMC,OAAO,GAAG,EAAE;IAClB,SAAS;MACPH,MAAM,CAACI,cAAc,CAAC,eAAe,CAAC;MACtC,MAAMC,MAAM,GAAGL,MAAM,CAACM,YAAY,CAAC,EAAEJ,IAAI,EAAEK,KAAK,EAAEC,cAAc,CAACC,OAAO,CAAC,CAAC,CAAC;MAC3E,IAAI,MAAMT,MAAM,CAACU,aAAa,CAAC,CAAC,EAAE;QAChC,OAAOP,OAAO;MAChB;MACAA,OAAO,CAACQ,IAAI,CAACN,MAAM,CAAC;IACtB;EACF,CAAC;;EAED,MAAMO,eAAe,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI;EACzC,MAAMC,eAAe,GAAG,EAAE,GAAG,IAAI,GAAG,IAAI;EACxC,MAAMV,OAAO,GAAG,MAAMF,gBAAgB,CAACD,MAAM,EAAEY,eAAe,CAAC;EAC/DT,OAAO,CAACQ,IAAI,CAAC,IAAI,MAAMV,gBAAgB,CAACD,MAAM,EAAEa,eAAe,CAAC,CAAC,CAAC;EAClE,OAAO,MAAM;IACXV,OAAO,CAACW,OAAO,CAAC,CAAAT,MAAM,KAAIA,MAAM,CAACU,OAAO,CAAC,CAAC,CAAC;EAC7C,CAAC;AACH"}