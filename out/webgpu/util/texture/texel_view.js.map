{"version":3,"file":"texel_view.js","names":["assert","memcpy","kTextureFormatInfo","generatePrettyTable","numericToStringBuilder","reifyExtent3D","reifyOrigin3D","fullSubrectCoordinates","kTexelRepresentationInfo","makeClampToRange","TexelView","constructor","format","bytes","ulpFromZero","color","fromTextureDataByReference","subrectData","bytesPerRow","rowsPerImage","subrectOrigin","subrectSize","origin","size","info","blockWidth","blockHeight","fromTexelsAsBytes","coords","x","y","z","width","height","depthOrArrayLayers","imageOffsetInRows","rowOffset","offset","bytesPerBlock","subarray","generator","repr","bitsToULPFromZero","unpackBits","bitsToNumber","fromTexelsAsColors","clampToFormatRange","applyClamp","oldGenerator","Uint8Array","pack","encode","numberToBits","writeTextureData","subrectOrigin_","subrectSize_","start","src","dst","toString","printAsInteger","includes","type","depth","numericToString","componentOrderStr","componentOrder","join","subrectCoords","printCoords","printActualBytes","t","Array","from","b","padStart","printActualColors","pixel","map","ch","opts","fillToWidth"],"sources":["../../../../src/webgpu/util/texture/texel_view.ts"],"sourcesContent":["import { assert, memcpy } from '../../../common/util/util.js';\nimport { kTextureFormatInfo, EncodableTextureFormat } from '../../format_info.js';\nimport { generatePrettyTable, numericToStringBuilder } from '../pretty_diff_tables.js';\nimport { reifyExtent3D, reifyOrigin3D } from '../unions.js';\n\nimport { fullSubrectCoordinates } from './base.js';\nimport { kTexelRepresentationInfo, makeClampToRange, PerTexelComponent } from './texel_data.js';\n\n/** Function taking some x,y,z coordinates and returning `Readonly<T>`. */\nexport type PerPixelAtLevel<T> = (coords: Required<GPUOrigin3DDict>) => Readonly<T>;\n\n/**\n * Wrapper to view various representations of texture data in other ways. E.g., can:\n * - Provide a mapped buffer, containing copied texture data, and read color values.\n * - Provide a function that generates color values by coordinate, and convert to ULPs-from-zero.\n *\n * MAINTENANCE_TODO: Would need some refactoring to support block formats, which could be partially\n * supported if useful.\n */\nexport class TexelView {\n  /** The GPUTextureFormat of the TexelView. */\n  readonly format: EncodableTextureFormat;\n  /** Generates the bytes for the texel at the given coordinates. */\n  readonly bytes: PerPixelAtLevel<Uint8Array>;\n  /** Generates the ULPs-from-zero for the texel at the given coordinates. */\n  readonly ulpFromZero: PerPixelAtLevel<PerTexelComponent<number>>;\n  /** Generates the color for the texel at the given coordinates. */\n  readonly color: PerPixelAtLevel<PerTexelComponent<number>>;\n\n  private constructor(\n    format: EncodableTextureFormat,\n    {\n      bytes,\n      ulpFromZero,\n      color,\n    }: {\n      bytes: PerPixelAtLevel<Uint8Array>;\n      ulpFromZero: PerPixelAtLevel<PerTexelComponent<number>>;\n      color: PerPixelAtLevel<PerTexelComponent<number>>;\n    }\n  ) {\n    this.format = format;\n    this.bytes = bytes;\n    this.ulpFromZero = ulpFromZero;\n    this.color = color;\n  }\n\n  /**\n   * Produces a TexelView from \"linear image data\", i.e. the `writeTexture` format. Takes a\n   * reference to the input `subrectData`, so any changes to it will be visible in the TexelView.\n   */\n  static fromTextureDataByReference(\n    format: EncodableTextureFormat,\n    subrectData: Uint8Array | Uint8ClampedArray,\n    {\n      bytesPerRow,\n      rowsPerImage,\n      subrectOrigin,\n      subrectSize,\n    }: {\n      bytesPerRow: number;\n      rowsPerImage: number;\n      subrectOrigin: GPUOrigin3D;\n      subrectSize: GPUExtent3D;\n    }\n  ) {\n    const origin = reifyOrigin3D(subrectOrigin);\n    const size = reifyExtent3D(subrectSize);\n\n    const info = kTextureFormatInfo[format];\n    assert(info.blockWidth === 1 && info.blockHeight === 1, 'unimplemented for block formats');\n\n    return TexelView.fromTexelsAsBytes(format, coords => {\n      assert(\n        coords.x >= origin.x &&\n          coords.y >= origin.y &&\n          coords.z >= origin.z &&\n          coords.x < origin.x + size.width &&\n          coords.y < origin.y + size.height &&\n          coords.z < origin.z + size.depthOrArrayLayers,\n        () => `coordinate (${coords.x},${coords.y},${coords.z}) out of bounds`\n      );\n\n      const imageOffsetInRows = (coords.z - origin.z) * rowsPerImage;\n      const rowOffset = (imageOffsetInRows + (coords.y - origin.y)) * bytesPerRow;\n      const offset = rowOffset + (coords.x - origin.x) * info.bytesPerBlock;\n\n      // MAINTENANCE_TODO: To support block formats, decode the block and then index into the result.\n      return subrectData.subarray(offset, offset + info.bytesPerBlock) as Uint8Array;\n    });\n  }\n\n  /** Produces a TexelView from a generator of bytes for individual texel blocks. */\n  static fromTexelsAsBytes(\n    format: EncodableTextureFormat,\n    generator: PerPixelAtLevel<Uint8Array>\n  ): TexelView {\n    const info = kTextureFormatInfo[format];\n    assert(info.blockWidth === 1 && info.blockHeight === 1, 'unimplemented for block formats');\n\n    const repr = kTexelRepresentationInfo[format];\n    return new TexelView(format, {\n      bytes: generator,\n      ulpFromZero: coords => repr.bitsToULPFromZero(repr.unpackBits(generator(coords))),\n      color: coords => repr.bitsToNumber(repr.unpackBits(generator(coords))),\n    });\n  }\n\n  /** Produces a TexelView from a generator of numeric \"color\" values for each texel. */\n  static fromTexelsAsColors(\n    format: EncodableTextureFormat,\n    generator: PerPixelAtLevel<PerTexelComponent<number>>,\n    { clampToFormatRange = false }: { clampToFormatRange?: boolean } = {}\n  ): TexelView {\n    const info = kTextureFormatInfo[format];\n    assert(info.blockWidth === 1 && info.blockHeight === 1, 'unimplemented for block formats');\n\n    if (clampToFormatRange) {\n      const applyClamp = makeClampToRange(format);\n      const oldGenerator = generator;\n      generator = coords => applyClamp(oldGenerator(coords));\n    }\n\n    const repr = kTexelRepresentationInfo[format];\n    return new TexelView(format, {\n      bytes: coords => new Uint8Array(repr.pack(repr.encode(generator(coords)))),\n      ulpFromZero: coords => repr.bitsToULPFromZero(repr.numberToBits(generator(coords))),\n      color: generator,\n    });\n  }\n\n  /** Writes the contents of a TexelView as \"linear image data\", i.e. the `writeTexture` format. */\n  writeTextureData(\n    subrectData: Uint8Array | Uint8ClampedArray,\n    {\n      bytesPerRow,\n      rowsPerImage,\n      subrectOrigin: subrectOrigin_,\n      subrectSize: subrectSize_,\n    }: {\n      bytesPerRow: number;\n      rowsPerImage: number;\n      subrectOrigin: GPUOrigin3D;\n      subrectSize: GPUExtent3D;\n    }\n  ): void {\n    const subrectOrigin = reifyOrigin3D(subrectOrigin_);\n    const subrectSize = reifyExtent3D(subrectSize_);\n\n    const info = kTextureFormatInfo[this.format];\n    assert(info.blockWidth === 1 && info.blockHeight === 1, 'unimplemented for block formats');\n\n    for (let z = subrectOrigin.z; z < subrectOrigin.z + subrectSize.depthOrArrayLayers; ++z) {\n      for (let y = subrectOrigin.y; y < subrectOrigin.y + subrectSize.height; ++y) {\n        for (let x = subrectOrigin.x; x < subrectOrigin.x + subrectSize.width; ++x) {\n          const start = (z * rowsPerImage + y) * bytesPerRow + x * info.bytesPerBlock;\n          memcpy({ src: this.bytes({ x, y, z }) }, { dst: subrectData, start });\n        }\n      }\n    }\n  }\n\n  /** Returns a pretty table string of the given coordinates and their values. */\n  // MAINTENANCE_TODO: Unify some internal helpers with those in texture_ok.ts.\n  toString(subrectOrigin: Required<GPUOrigin3DDict>, subrectSize: Required<GPUExtent3DDict>) {\n    const info = kTextureFormatInfo[this.format];\n    const repr = kTexelRepresentationInfo[this.format];\n\n    // MAINTENANCE_TODO: Print depth-stencil formats as float+int instead of float+float.\n    const printAsInteger = info.color\n      ? // For color, pick the type based on the format type\n        ['uint', 'sint'].includes(info.color.type)\n      : // Print depth as \"float\", depth-stencil as \"float,float\", stencil as \"int\".\n        !info.depth;\n    const numericToString = numericToStringBuilder(printAsInteger);\n\n    const componentOrderStr = repr.componentOrder.join(',') + ':';\n    const subrectCoords = [...fullSubrectCoordinates(subrectOrigin, subrectSize)];\n\n    const printCoords = (function* () {\n      yield* [' coords', '==', 'X,Y,Z:'];\n      for (const coords of subrectCoords) yield `${coords.x},${coords.y},${coords.z}`;\n    })();\n    const printActualBytes = (function* (t: TexelView) {\n      yield* [' act. texel bytes (little-endian)', '==', '0x:'];\n      for (const coords of subrectCoords) {\n        yield Array.from(t.bytes(coords), b => b.toString(16).padStart(2, '0')).join(' ');\n      }\n    })(this);\n    const printActualColors = (function* (t: TexelView) {\n      yield* [' act. colors', '==', componentOrderStr];\n      for (const coords of subrectCoords) {\n        const pixel = t.color(coords);\n        yield `${repr.componentOrder.map(ch => numericToString(pixel[ch]!)).join(',')}`;\n      }\n    })(this);\n\n    const opts = {\n      fillToWidth: 120,\n      numericToString,\n    };\n    return `${generatePrettyTable(opts, [printCoords, printActualBytes, printActualColors])}`;\n  }\n}\n"],"mappings":"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"}