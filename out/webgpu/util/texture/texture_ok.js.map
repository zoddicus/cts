{"version":3,"file":"texture_ok.js","names":["assert","ErrorWithExtra","unreachable","kTextureFormatInfo","numbersApproximatelyEqual","generatePrettyTable","reifyExtent3D","reifyOrigin3D","getTextureSubCopyLayout","kTexelRepresentationInfo","TexelView","makeTexelViewComparer","format","actTexelView","expTexelView","opts","maxIntDiff","maxFractionalDiff","maxDiffULPsForNormFormat","maxDiffULPsForFloatFormat","undefined","fmtIsInt","includes","fmtIsNorm","fmtIsFloat","tvc","predicate","coords","comparePerComponent","color","ulpFromZero","repr","tableRows","failedCoords","act","exp","componentOrder","map","ch","join","toleranceULPs","toPrecision","actual","expected","maxDiff","Object","keys","every","key","k","createTextureCopyForMapRead","t","source","copySize","byteLength","bytesPerRow","rowsPerImage","aspect","buffer","device","createBuffer","usage","GPUBufferUsage","COPY_DST","MAP_READ","size","trackForCleanup","cmd","createCommandEncoder","copyTextureToBuffer","queue","submit","finish","fullSubrectCoordinates","subrectOrigin","subrectSize","z","depthOrArrayLayers","y","height","x","width","findFailedPixels","texelCompareOptions","comparer","lowerCorner","upperCorner","failedPixels","coord","push","Math","min","max","length","info","integerSampleType","sampleType","numberToString","n","toFixed","componentOrderStr","printCoords","printActualBytes","Array","from","bytes","b","toString","padStart","printActualColors","pixel","printExpectedColors","printActualULPs","printExpectedULPs","fillToWidth","textureContentIsOKByT2B","copySize_","origin","mapAsync","GPUMapMode","READ","data","Uint8Array","getMappedRange","texelViewConfig","fromTextureDataByReference","failedPixelsMessage","msg","slice"],"sources":["../../../../src/webgpu/util/texture/texture_ok.ts"],"sourcesContent":["import { assert, ErrorWithExtra, unreachable } from '../../../common/util/util.js';\nimport { kTextureFormatInfo, EncodableTextureFormat } from '../../format_info.js';\nimport { GPUTest } from '../../gpu_test.js';\nimport { numbersApproximatelyEqual } from '../conversion.js';\nimport { generatePrettyTable } from '../pretty_diff_tables.js';\nimport { reifyExtent3D, reifyOrigin3D } from '../unions.js';\n\nimport { getTextureSubCopyLayout } from './layout.js';\nimport { kTexelRepresentationInfo, PerTexelComponent, TexelComponent } from './texel_data.js';\nimport { TexelView } from './texel_view.js';\n\ntype PerPixelAtLevel<T> = (coords: Required<GPUOrigin3DDict>) => T;\n\n/** Threshold options for comparing texels of different formats (norm/float/int). */\nexport type TexelCompareOptions = {\n  /** Threshold for integer texture formats. Defaults to 0. */\n  maxIntDiff?: number;\n  /** Threshold for non-integer (norm/float) texture formats, if not overridden. */\n  maxFractionalDiff?: number;\n  /** Threshold in ULPs for unorm/snorm texture formats. Overrides `maxFractionalDiff`. */\n  maxDiffULPsForNormFormat?: number;\n  /** Threshold in ULPs for float/ufloat texture formats. Overrides `maxFractionalDiff`. */\n  maxDiffULPsForFloatFormat?: number;\n};\n\nexport type PixelExpectation = PerTexelComponent<number> | Uint8Array;\n\nexport type PerPixelComparison<E extends PixelExpectation> = {\n  coord: GPUOrigin3D;\n  exp: E;\n};\n\ntype TexelViewComparer = {\n  /** Given coords, returns whether the two texel views are considered matching at that point. */\n  predicate: PerPixelAtLevel<boolean>;\n  /**\n   * Given a list of failed coords, returns table rows for `generatePrettyTable` that\n   * display the actual/expected values and diffs for debugging.\n   */\n  tableRows: (failedCoords: readonly Required<GPUOrigin3DDict>[]) => Iterable<string>[];\n};\n\nfunction makeTexelViewComparer(\n  format: EncodableTextureFormat,\n  { actTexelView, expTexelView }: { actTexelView: TexelView; expTexelView: TexelView },\n  opts: TexelCompareOptions\n): TexelViewComparer {\n  const {\n    maxIntDiff = 0,\n    maxFractionalDiff,\n    maxDiffULPsForNormFormat,\n    maxDiffULPsForFloatFormat,\n  } = opts;\n\n  assert(maxIntDiff >= 0, 'threshold must be non-negative');\n  if (maxFractionalDiff !== undefined) {\n    assert(maxFractionalDiff >= 0, 'threshold must be non-negative');\n  }\n  if (maxDiffULPsForFloatFormat !== undefined) {\n    assert(maxDiffULPsForFloatFormat >= 0, 'threshold must be non-negative');\n  }\n  if (maxDiffULPsForNormFormat !== undefined) {\n    assert(maxDiffULPsForNormFormat >= 0, 'threshold must be non-negative');\n  }\n\n  const fmtIsInt = format.includes('int');\n  const fmtIsNorm = format.includes('norm');\n  const fmtIsFloat = format.includes('float');\n\n  const tvc = {} as TexelViewComparer;\n  if (fmtIsInt) {\n    tvc.predicate = coords =>\n      comparePerComponent(actTexelView.color(coords), expTexelView.color(coords), maxIntDiff);\n  } else if (fmtIsNorm && maxDiffULPsForNormFormat !== undefined) {\n    tvc.predicate = coords =>\n      comparePerComponent(\n        actTexelView.ulpFromZero(coords),\n        expTexelView.ulpFromZero(coords),\n        maxDiffULPsForNormFormat\n      );\n  } else if (fmtIsFloat && maxDiffULPsForFloatFormat !== undefined) {\n    tvc.predicate = coords =>\n      comparePerComponent(\n        actTexelView.ulpFromZero(coords),\n        expTexelView.ulpFromZero(coords),\n        maxDiffULPsForFloatFormat\n      );\n  } else if (maxFractionalDiff !== undefined) {\n    tvc.predicate = coords =>\n      comparePerComponent(\n        actTexelView.color(coords),\n        expTexelView.color(coords),\n        maxFractionalDiff\n      );\n  } else {\n    if (fmtIsNorm) {\n      unreachable('need maxFractionalDiff or maxDiffULPsForNormFormat to compare norm textures');\n    } else if (fmtIsFloat) {\n      unreachable('need maxFractionalDiff or maxDiffULPsForFloatFormat to compare float textures');\n    } else {\n      unreachable();\n    }\n  }\n\n  const repr = kTexelRepresentationInfo[format];\n  if (fmtIsInt) {\n    tvc.tableRows = failedCoords => [\n      [`tolerance ± ${maxIntDiff}`],\n      (function* () {\n        yield* [` diff (act - exp)`, '==', ''];\n        for (const coords of failedCoords) {\n          const act = actTexelView.color(coords);\n          const exp = expTexelView.color(coords);\n          yield repr.componentOrder.map(ch => act[ch]! - exp[ch]!).join(',');\n        }\n      })(),\n    ];\n  } else if (\n    (fmtIsNorm && maxDiffULPsForNormFormat !== undefined) ||\n    (fmtIsFloat && maxDiffULPsForFloatFormat !== undefined)\n  ) {\n    const toleranceULPs = fmtIsNorm ? maxDiffULPsForNormFormat! : maxDiffULPsForFloatFormat!;\n    tvc.tableRows = failedCoords => [\n      [`tolerance ± ${toleranceULPs} normal-ULPs`],\n      (function* () {\n        yield* [` diff (act - exp) in normal-ULPs`, '==', ''];\n        for (const coords of failedCoords) {\n          const act = actTexelView.ulpFromZero(coords);\n          const exp = expTexelView.ulpFromZero(coords);\n          yield repr.componentOrder.map(ch => act[ch]! - exp[ch]!).join(',');\n        }\n      })(),\n    ];\n  } else {\n    assert(maxFractionalDiff !== undefined);\n    tvc.tableRows = failedCoords => [\n      [`tolerance ± ${maxFractionalDiff}`],\n      (function* () {\n        yield* [` diff (act - exp)`, '==', ''];\n        for (const coords of failedCoords) {\n          const act = actTexelView.color(coords);\n          const exp = expTexelView.color(coords);\n          yield repr.componentOrder.map(ch => (act[ch]! - exp[ch]!).toPrecision(4)).join(',');\n        }\n      })(),\n    ];\n  }\n\n  return tvc;\n}\n\nfunction comparePerComponent(\n  actual: PerTexelComponent<number>,\n  expected: PerTexelComponent<number>,\n  maxDiff: number\n) {\n  return Object.keys(actual).every(key => {\n    const k = key as TexelComponent;\n    const act = actual[k]!;\n    const exp = expected[k];\n    if (exp === undefined) return false;\n    return numbersApproximatelyEqual(act, exp, maxDiff);\n  });\n}\n\n/** Create a new mappable GPUBuffer, and copy a subrectangle of GPUTexture data into it. */\nfunction createTextureCopyForMapRead(\n  t: GPUTest,\n  source: GPUImageCopyTexture,\n  copySize: GPUExtent3D,\n  { format }: { format: EncodableTextureFormat }\n): { buffer: GPUBuffer; bytesPerRow: number; rowsPerImage: number } {\n  const { byteLength, bytesPerRow, rowsPerImage } = getTextureSubCopyLayout(format, copySize, {\n    aspect: source.aspect,\n  });\n\n  const buffer = t.device.createBuffer({\n    usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ,\n    size: byteLength,\n  });\n  t.trackForCleanup(buffer);\n\n  const cmd = t.device.createCommandEncoder();\n  cmd.copyTextureToBuffer(source, { buffer, bytesPerRow, rowsPerImage }, copySize);\n  t.device.queue.submit([cmd.finish()]);\n\n  return { buffer, bytesPerRow, rowsPerImage };\n}\n\nfunction* fullSubrectCoordinates(\n  subrectOrigin: Required<GPUOrigin3DDict>,\n  subrectSize: Required<GPUExtent3DDict>\n): Generator<Required<GPUOrigin3DDict>> {\n  for (let z = subrectOrigin.z; z < subrectOrigin.z + subrectSize.depthOrArrayLayers; ++z) {\n    for (let y = subrectOrigin.y; y < subrectOrigin.y + subrectSize.height; ++y) {\n      for (let x = subrectOrigin.x; x < subrectOrigin.x + subrectSize.width; ++x) {\n        yield { x, y, z };\n      }\n    }\n  }\n}\n\nexport function findFailedPixels(\n  format: EncodableTextureFormat,\n  subrectOrigin: Required<GPUOrigin3DDict>,\n  subrectSize: Required<GPUExtent3DDict>,\n  { actTexelView, expTexelView }: { actTexelView: TexelView; expTexelView: TexelView },\n  texelCompareOptions: TexelCompareOptions,\n  coords?: Generator<Required<GPUOrigin3DDict>>\n) {\n  const comparer = makeTexelViewComparer(\n    format,\n    { actTexelView, expTexelView },\n    texelCompareOptions\n  );\n\n  const lowerCorner = [subrectSize.width, subrectSize.height, subrectSize.depthOrArrayLayers];\n  const upperCorner = [0, 0, 0];\n  const failedPixels: Required<GPUOrigin3DDict>[] = [];\n  for (const coord of coords ?? fullSubrectCoordinates(subrectOrigin, subrectSize)) {\n    const { x, y, z } = coord;\n    if (!comparer.predicate(coord)) {\n      failedPixels.push(coord);\n      lowerCorner[0] = Math.min(lowerCorner[0], x);\n      lowerCorner[1] = Math.min(lowerCorner[1], y);\n      lowerCorner[2] = Math.min(lowerCorner[2], z);\n      upperCorner[0] = Math.max(upperCorner[0], x);\n      upperCorner[1] = Math.max(upperCorner[1], y);\n      upperCorner[2] = Math.max(upperCorner[2], z);\n    }\n  }\n  if (failedPixels.length === 0) {\n    return undefined;\n  }\n\n  const info = kTextureFormatInfo[format];\n  const repr = kTexelRepresentationInfo[format];\n\n  const integerSampleType = info.sampleType === 'uint' || info.sampleType === 'sint';\n  const numberToString = integerSampleType\n    ? (n: number) => n.toFixed()\n    : (n: number) => n.toPrecision(6);\n\n  const componentOrderStr = repr.componentOrder.join(',') + ':';\n\n  const printCoords = (function* () {\n    yield* [' coords', '==', 'X,Y,Z:'];\n    for (const coords of failedPixels) yield `${coords.x},${coords.y},${coords.z}`;\n  })();\n  const printActualBytes = (function* () {\n    yield* [' act. texel bytes (little-endian)', '==', '0x:'];\n    for (const coords of failedPixels) {\n      yield Array.from(actTexelView.bytes(coords), b => b.toString(16).padStart(2, '0')).join(' ');\n    }\n  })();\n  const printActualColors = (function* () {\n    yield* [' act. colors', '==', componentOrderStr];\n    for (const coords of failedPixels) {\n      const pixel = actTexelView.color(coords);\n      yield `${repr.componentOrder.map(ch => numberToString(pixel[ch]!)).join(',')}`;\n    }\n  })();\n  const printExpectedColors = (function* () {\n    yield* [' exp. colors', '==', componentOrderStr];\n    for (const coords of failedPixels) {\n      const pixel = expTexelView.color(coords);\n      yield `${repr.componentOrder.map(ch => numberToString(pixel[ch]!)).join(',')}`;\n    }\n  })();\n  const printActualULPs = (function* () {\n    yield* [' act. normal-ULPs-from-zero', '==', componentOrderStr];\n    for (const coords of failedPixels) {\n      const pixel = actTexelView.ulpFromZero(coords);\n      yield `${repr.componentOrder.map(ch => pixel[ch]).join(',')}`;\n    }\n  })();\n  const printExpectedULPs = (function* () {\n    yield* [` exp. normal-ULPs-from-zero`, '==', componentOrderStr];\n    for (const coords of failedPixels) {\n      const pixel = expTexelView.ulpFromZero(coords);\n      yield `${repr.componentOrder.map(ch => pixel[ch]).join(',')}`;\n    }\n  })();\n\n  const opts = {\n    fillToWidth: 120,\n    numberToString,\n  };\n  return `\\\n between ${lowerCorner} and ${upperCorner} inclusive:\n${generatePrettyTable(opts, [\n  printCoords,\n  printActualBytes,\n  printActualColors,\n  printExpectedColors,\n  printActualULPs,\n  printExpectedULPs,\n  ...comparer.tableRows(failedPixels),\n])}`;\n}\n\n/**\n * Check the contents of a GPUTexture by reading it back (with copyTextureToBuffer+mapAsync), then\n * comparing the data with the data in `expTexelView`.\n *\n * The actual and expected texture data are both converted to the \"NormalULPFromZero\" format,\n * which is a signed number representing how far the number is from zero, in ULPs, skipping\n * subnormal numbers (where ULP is defined for float, normalized, and integer formats).\n */\nexport async function textureContentIsOKByT2B(\n  t: GPUTest,\n  source: GPUImageCopyTexture,\n  copySize_: GPUExtent3D,\n  { expTexelView }: { expTexelView: TexelView },\n  texelCompareOptions: TexelCompareOptions,\n  coords?: Generator<Required<GPUOrigin3DDict>>\n): Promise<ErrorWithExtra | undefined> {\n  const subrectOrigin = reifyOrigin3D(source.origin ?? [0, 0, 0]);\n  const subrectSize = reifyExtent3D(copySize_);\n  const format = expTexelView.format;\n\n  const { buffer, bytesPerRow, rowsPerImage } = createTextureCopyForMapRead(\n    t,\n    source,\n    subrectSize,\n    { format }\n  );\n\n  await buffer.mapAsync(GPUMapMode.READ);\n  const data = new Uint8Array(buffer.getMappedRange());\n\n  const texelViewConfig = {\n    bytesPerRow,\n    rowsPerImage,\n    subrectOrigin,\n    subrectSize,\n  } as const;\n\n  const actTexelView = TexelView.fromTextureDataByReference(format, data, texelViewConfig);\n\n  const failedPixelsMessage = findFailedPixels(\n    format,\n    subrectOrigin,\n    subrectSize,\n    { actTexelView, expTexelView },\n    texelCompareOptions,\n    coords\n  );\n\n  if (failedPixelsMessage === undefined) {\n    return undefined;\n  }\n\n  const msg = 'Texture level had unexpected contents:\\n' + failedPixelsMessage;\n  return new ErrorWithExtra(msg, () => ({\n    expTexelView,\n    // Make a new TexelView with a copy of the data so we can unmap the buffer (debug mode only).\n    actTexelView: TexelView.fromTextureDataByReference(format, data.slice(), texelViewConfig),\n  }));\n}\n"],"mappings":"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"}