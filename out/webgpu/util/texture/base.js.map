{"version":3,"file":"base.js","names":["assert","unreachable","kTextureFormatInfo","align","reifyExtent3D","maxMipLevelCount","size","dimension","sizeDict","maxMippedDimension","Math","max","width","height","depthOrArrayLayers","floor","log2","physicalMipSize","baseSize","format","level","virtualWidthAtLevel","virtualHeightAtLevel","physicalWidthAtLevel","blockWidth","physicalHeightAtLevel","blockHeight","physicalMipSizeFromTexture","texture","mipLevel","virtualMipSize","shiftMinOne","n","getTextureDimensionFromView","viewDimension","viewDimensionsForTextureDimension","textureDimension","effectiveViewDimensionForDimension","undefined","effectiveViewDimensionForTexture","defaultViewDimensionsForTexture","textureDescriptor","reifyTextureDescriptor","desc","mipLevelCount","sampleCount","reifyTextureViewDescriptor","view","baseMipLevel","baseArrayLayer","aspect","arrayLayerCount","fullSubrectCoordinates","subrectOrigin","subrectSize","z","y","x"],"sources":["../../../../src/webgpu/util/texture/base.ts"],"sourcesContent":["import { assert, unreachable } from '../../../common/util/util.js';\nimport { kTextureFormatInfo } from '../../format_info.js';\nimport { align } from '../../util/math.js';\nimport { reifyExtent3D } from '../../util/unions.js';\n\n/**\n * Compute the maximum mip level count allowed for a given texture size and texture dimension.\n */\nexport function maxMipLevelCount({\n  size,\n  dimension = '2d',\n}: {\n  readonly size: Readonly<GPUExtent3DDict> | readonly number[];\n  readonly dimension?: GPUTextureDimension;\n}): number {\n  const sizeDict = reifyExtent3D(size);\n\n  let maxMippedDimension = 0;\n  switch (dimension) {\n    case '1d':\n      maxMippedDimension = 1; // No mipmaps allowed.\n      break;\n    case '2d':\n      maxMippedDimension = Math.max(sizeDict.width, sizeDict.height);\n      break;\n    case '3d':\n      maxMippedDimension = Math.max(sizeDict.width, sizeDict.height, sizeDict.depthOrArrayLayers);\n      break;\n  }\n\n  return Math.floor(Math.log2(maxMippedDimension)) + 1;\n}\n\n/**\n * Compute the \"physical size\" of a mip level: the size of the level, rounded up to a\n * multiple of the texel block size.\n */\nexport function physicalMipSize(\n  baseSize: Required<GPUExtent3DDict>,\n  format: GPUTextureFormat,\n  dimension: GPUTextureDimension,\n  level: number\n): Required<GPUExtent3DDict> {\n  switch (dimension) {\n    case '1d':\n      assert(level === 0, '1d textures cannot be mipmapped');\n      assert(baseSize.height === 1 && baseSize.depthOrArrayLayers === 1, '1d texture not Wx1x1');\n      return { width: baseSize.width, height: 1, depthOrArrayLayers: 1 };\n\n    case '2d': {\n      assert(\n        Math.max(baseSize.width, baseSize.height) >> level > 0,\n        () => `level (${level}) too large for base size (${baseSize.width}x${baseSize.height})`\n      );\n\n      const virtualWidthAtLevel = Math.max(baseSize.width >> level, 1);\n      const virtualHeightAtLevel = Math.max(baseSize.height >> level, 1);\n      const physicalWidthAtLevel = align(\n        virtualWidthAtLevel,\n        kTextureFormatInfo[format].blockWidth\n      );\n      const physicalHeightAtLevel = align(\n        virtualHeightAtLevel,\n        kTextureFormatInfo[format].blockHeight\n      );\n      return {\n        width: physicalWidthAtLevel,\n        height: physicalHeightAtLevel,\n        depthOrArrayLayers: baseSize.depthOrArrayLayers,\n      };\n    }\n\n    case '3d': {\n      assert(\n        Math.max(baseSize.width, baseSize.height, baseSize.depthOrArrayLayers) >> level > 0,\n        () =>\n          `level (${level}) too large for base size (${baseSize.width}x${baseSize.height}x${baseSize.depthOrArrayLayers})`\n      );\n      assert(\n        kTextureFormatInfo[format].blockWidth === 1 && kTextureFormatInfo[format].blockHeight === 1,\n        'not implemented for 3d block formats'\n      );\n      return {\n        width: Math.max(baseSize.width >> level, 1),\n        height: Math.max(baseSize.height >> level, 1),\n        depthOrArrayLayers: Math.max(baseSize.depthOrArrayLayers >> level, 1),\n      };\n    }\n  }\n}\n\n/**\n * Compute the \"physical size\" of a mip level: the size of the level, rounded up to a\n * multiple of the texel block size.\n */\nexport function physicalMipSizeFromTexture(\n  texture: GPUTexture,\n  mipLevel: number\n): [number, number, number] {\n  const size = physicalMipSize(texture, texture.format, texture.dimension, mipLevel);\n  return [size.width, size.height, size.depthOrArrayLayers];\n}\n\n/**\n * Compute the \"virtual size\" of a mip level of a texture (not accounting for texel block rounding).\n *\n * MAINTENANCE_TODO: Change input/output to Required<GPUExtent3DDict> for consistency.\n */\nexport function virtualMipSize(\n  dimension: GPUTextureDimension,\n  size: readonly [number, number, number],\n  mipLevel: number\n): [number, number, number] {\n  const shiftMinOne = (n: number) => Math.max(1, n >> mipLevel);\n  switch (dimension) {\n    case '1d':\n      assert(size[2] === 1);\n      return [shiftMinOne(size[0]), size[1], size[2]];\n    case '2d':\n      return [shiftMinOne(size[0]), shiftMinOne(size[1]), size[2]];\n    case '3d':\n      return [shiftMinOne(size[0]), shiftMinOne(size[1]), shiftMinOne(size[2])];\n    default:\n      unreachable();\n  }\n}\n\n/**\n * Get texture dimension from view dimension in order to create an compatible texture for a given\n * view dimension.\n */\nexport function getTextureDimensionFromView(viewDimension: GPUTextureViewDimension) {\n  switch (viewDimension) {\n    case '1d':\n      return '1d';\n    case '2d':\n    case '2d-array':\n    case 'cube':\n    case 'cube-array':\n      return '2d';\n    case '3d':\n      return '3d';\n    default:\n      unreachable();\n  }\n}\n\n/** Returns the possible valid view dimensions for a given texture dimension. */\nexport function viewDimensionsForTextureDimension(textureDimension: GPUTextureDimension) {\n  switch (textureDimension) {\n    case '1d':\n      return ['1d'] as const;\n    case '2d':\n      return ['2d', '2d-array', 'cube', 'cube-array'] as const;\n    case '3d':\n      return ['3d'] as const;\n  }\n}\n\n/** Returns the effective view dimension for a given texture dimension and depthOrArrayLayers */\nexport function effectiveViewDimensionForDimension(\n  viewDimension: GPUTextureViewDimension | undefined,\n  dimension: GPUTextureDimension | undefined,\n  depthOrArrayLayers: number\n) {\n  if (viewDimension) {\n    return viewDimension;\n  }\n\n  switch (dimension || '2d') {\n    case '1d':\n      return '1d';\n    case '2d':\n    case undefined:\n      return depthOrArrayLayers > 1 ? '2d-array' : '2d';\n      break;\n    case '3d':\n      return '3d';\n    default:\n      unreachable();\n  }\n}\n\n/** Returns the effective view dimension for a given texture */\nexport function effectiveViewDimensionForTexture(\n  texture: GPUTexture,\n  viewDimension: GPUTextureViewDimension | undefined\n) {\n  return effectiveViewDimensionForDimension(\n    viewDimension,\n    texture.dimension,\n    texture.depthOrArrayLayers\n  );\n}\n\n/** Returns the default view dimension for a given texture descriptor. */\nexport function defaultViewDimensionsForTexture(textureDescriptor: Readonly<GPUTextureDescriptor>) {\n  const sizeDict = reifyExtent3D(textureDescriptor.size);\n  return effectiveViewDimensionForDimension(\n    undefined,\n    textureDescriptor.dimension,\n    sizeDict.depthOrArrayLayers\n  );\n}\n\n/** Reifies the optional fields of `GPUTextureDescriptor`.\n * MAINTENANCE_TODO: viewFormats should not be omitted here, but it seems likely that the\n * @webgpu/types definition will have to change before we can include it again.\n */\nexport function reifyTextureDescriptor(\n  desc: Readonly<GPUTextureDescriptor>\n): Required<Omit<GPUTextureDescriptor, 'label' | 'viewFormats'>> {\n  return { dimension: '2d' as const, mipLevelCount: 1, sampleCount: 1, ...desc };\n}\n\n/** Reifies the optional fields of `GPUTextureViewDescriptor` (given a `GPUTextureDescriptor`). */\nexport function reifyTextureViewDescriptor(\n  textureDescriptor: Readonly<GPUTextureDescriptor>,\n  view: Readonly<GPUTextureViewDescriptor>\n): Required<Omit<GPUTextureViewDescriptor, 'label'>> {\n  const texture = reifyTextureDescriptor(textureDescriptor);\n\n  // IDL defaulting\n\n  const baseMipLevel = view.baseMipLevel ?? 0;\n  const baseArrayLayer = view.baseArrayLayer ?? 0;\n  const aspect = view.aspect ?? 'all';\n\n  // Spec defaulting\n\n  const format = view.format ?? texture.format;\n  const mipLevelCount = view.mipLevelCount ?? texture.mipLevelCount - baseMipLevel;\n  const dimension = view.dimension ?? defaultViewDimensionsForTexture(texture);\n\n  let arrayLayerCount = view.arrayLayerCount;\n  if (arrayLayerCount === undefined) {\n    if (dimension === '2d-array' || dimension === 'cube-array') {\n      arrayLayerCount = reifyExtent3D(texture.size).depthOrArrayLayers - baseArrayLayer;\n    } else if (dimension === 'cube') {\n      arrayLayerCount = 6;\n    } else {\n      arrayLayerCount = 1;\n    }\n  }\n\n  return {\n    format,\n    dimension,\n    aspect,\n    baseMipLevel,\n    mipLevelCount,\n    baseArrayLayer,\n    arrayLayerCount,\n  };\n}\n\n/**\n * Get generator of all the coordinates in a subrect.\n * @param subrectOrigin - Subrect origin\n * @param subrectSize - Subrect size\n */\nexport function* fullSubrectCoordinates(\n  subrectOrigin: Required<GPUOrigin3DDict>,\n  subrectSize: Required<GPUExtent3DDict>\n): Generator<Required<GPUOrigin3DDict>> {\n  for (let z = subrectOrigin.z; z < subrectOrigin.z + subrectSize.depthOrArrayLayers; ++z) {\n    for (let y = subrectOrigin.y; y < subrectOrigin.y + subrectSize.height; ++y) {\n      for (let x = subrectOrigin.x; x < subrectOrigin.x + subrectSize.width; ++x) {\n        yield { x, y, z };\n      }\n    }\n  }\n}\n"],"mappings":"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"}