{"version":3,"file":"texel_data.spec.js","names":["description","makeTestGroup","assert","kEncodableTextureFormats","kTextureFormatInfo","GPUTest","kTexelRepresentationInfo","getSingleDataType","getComponentReadbackTraits","g","doTest","t","format","params","componentData","rep","texelData","pack","texture","device","createTexture","size","usage","GPUTextureUsage","COPY_DST","TEXTURE_BINDING","queue","writeTexture","bytesPerRow","byteLength","ReadbackTypedArray","shaderType","shader","componentOrder","map","C","join","toLowerCase","pipeline","createComputePipeline","layout","compute","module","createShaderModule","code","entryPoint","outputBuffer","createBuffer","length","GPUBufferUsage","STORAGE","COPY_SRC","bindGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","createView","buffer","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","submit","finish","expectGPUBufferValuesEqual","c","value","decode","undefined","makeParam","fn","R","componentInfo","bitLength","G","B","A","test","u","combine","filter","info","color","copyDst","beginSubcases","expand","max","Math","pow","floor","i","offset","beforeAllSubcases","skipIfTextureFormatNotSupported","range","desc"],"sources":["../../../../src/webgpu/util/texture/texel_data.spec.ts"],"sourcesContent":["export const description = 'Test helpers for texel data produce the expected data in the shader';\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { assert } from '../../../common/util/util.js';\nimport {\n  kEncodableTextureFormats,\n  kTextureFormatInfo,\n  EncodableTextureFormat,\n} from '../../format_info.js';\nimport { GPUTest } from '../../gpu_test.js';\n\nimport {\n  kTexelRepresentationInfo,\n  getSingleDataType,\n  getComponentReadbackTraits,\n} from './texel_data.js';\n\nexport const g = makeTestGroup(GPUTest);\n\nfunction doTest(\n  t: GPUTest & {\n    params: {\n      format: EncodableTextureFormat;\n      componentData: {\n        R?: number;\n        G?: number;\n        B?: number;\n        A?: number;\n      };\n    };\n  }\n) {\n  const { format } = t.params;\n  const componentData = t.params.componentData;\n\n  const rep = kTexelRepresentationInfo[format];\n  const texelData = rep.pack(componentData);\n  const texture = t.device.createTexture({\n    format,\n    size: [1, 1, 1],\n    usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n  });\n\n  t.device.queue.writeTexture(\n    { texture },\n    texelData,\n    {\n      bytesPerRow: texelData.byteLength,\n    },\n    [1]\n  );\n\n  const { ReadbackTypedArray, shaderType } = getComponentReadbackTraits(getSingleDataType(format));\n\n  const shader = `\n  @group(0) @binding(0) var tex : texture_2d<${shaderType}>;\n\n  struct Output {\n    ${rep.componentOrder.map(C => `result${C} : ${shaderType},`).join('\\n')}\n  };\n  @group(0) @binding(1) var<storage, read_write> output : Output;\n\n  @compute @workgroup_size(1)\n  fn main() {\n      var texel : vec4<${shaderType}> = textureLoad(tex, vec2<i32>(0, 0), 0);\n      ${rep.componentOrder.map(C => `output.result${C} = texel.${C.toLowerCase()};`).join('\\n')}\n      return;\n  }`;\n\n  const pipeline = t.device.createComputePipeline({\n    layout: 'auto',\n    compute: {\n      module: t.device.createShaderModule({\n        code: shader,\n      }),\n      entryPoint: 'main',\n    },\n  });\n\n  const outputBuffer = t.device.createBuffer({\n    size: rep.componentOrder.length * 4,\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n  });\n\n  const bindGroup = t.device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [\n      {\n        binding: 0,\n        resource: texture.createView(),\n      },\n      {\n        binding: 1,\n        resource: {\n          buffer: outputBuffer,\n        },\n      },\n    ],\n  });\n\n  const encoder = t.device.createCommandEncoder();\n  const pass = encoder.beginComputePass();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, bindGroup);\n  pass.dispatchWorkgroups(1);\n  pass.end();\n  t.device.queue.submit([encoder.finish()]);\n\n  t.expectGPUBufferValuesEqual(\n    outputBuffer,\n    new ReadbackTypedArray(\n      rep.componentOrder.map(c => {\n        const value = rep.decode(componentData)[c];\n        assert(value !== undefined);\n        return value;\n      })\n    )\n  );\n}\n\n// Make a test parameter by mapping a format and each component to a texel component\n// data value.\nfunction makeParam(\n  format: EncodableTextureFormat,\n  fn: (bitLength: number, index: number) => number\n) {\n  const rep = kTexelRepresentationInfo[format];\n  return {\n    R: rep.componentInfo.R ? fn(rep.componentInfo.R.bitLength, 0) : undefined,\n    G: rep.componentInfo.G ? fn(rep.componentInfo.G.bitLength, 1) : undefined,\n    B: rep.componentInfo.B ? fn(rep.componentInfo.B.bitLength, 2) : undefined,\n    A: rep.componentInfo.A ? fn(rep.componentInfo.A.bitLength, 3) : undefined,\n  };\n}\n\ng.test('unorm_texel_data_in_shader')\n  .params(u =>\n    u\n      .combine('format', kEncodableTextureFormats)\n      .filter(({ format }) => {\n        const info = kTextureFormatInfo[format];\n        return !!info.color && info.color.copyDst && getSingleDataType(format) === 'unorm';\n      })\n      .beginSubcases()\n      .expand('componentData', ({ format }) => {\n        const max = (bitLength: number) => Math.pow(2, bitLength) - 1;\n        return [\n          // Test extrema\n          makeParam(format, () => 0),\n          makeParam(format, bitLength => max(bitLength)),\n\n          // Test a middle value\n          makeParam(format, bitLength => Math.floor(max(bitLength) / 2)),\n\n          // Test mixed values\n          makeParam(format, (bitLength, i) => {\n            const offset = [0.13, 0.63, 0.42, 0.89];\n            return Math.floor(offset[i] * max(bitLength));\n          }),\n        ];\n      })\n  )\n  .beforeAllSubcases(t => {\n    t.skipIfTextureFormatNotSupported(t.params.format);\n  })\n  .fn(doTest);\n\ng.test('snorm_texel_data_in_shader')\n  .params(u =>\n    u\n      .combine('format', kEncodableTextureFormats)\n      .filter(({ format }) => {\n        const info = kTextureFormatInfo[format];\n        return !!info.color && info.color.copyDst && getSingleDataType(format) === 'snorm';\n      })\n      .beginSubcases()\n      .expand('componentData', ({ format }) => {\n        const max = (bitLength: number) => Math.pow(2, bitLength - 1) - 1;\n        return [\n          // Test extrema\n          makeParam(format, () => 0),\n          makeParam(format, bitLength => max(bitLength)),\n          makeParam(format, bitLength => -max(bitLength)),\n          makeParam(format, bitLength => -max(bitLength) - 1),\n\n          // Test a middle value\n          makeParam(format, bitLength => Math.floor(max(bitLength) / 2)),\n\n          // Test mixed values\n          makeParam(format, (bitLength, i) => {\n            const offset = [0.13, 0.63, 0.42, 0.89];\n            const range = 2 * max(bitLength);\n            return -max(bitLength) + Math.floor(offset[i] * range);\n          }),\n        ];\n      })\n  )\n  .fn(doTest);\n\ng.test('uint_texel_data_in_shader')\n  .params(u =>\n    u\n      .combine('format', kEncodableTextureFormats)\n      .filter(({ format }) => {\n        const info = kTextureFormatInfo[format];\n        return !!info.color && info.color.copyDst && getSingleDataType(format) === 'uint';\n      })\n      .beginSubcases()\n      .expand('componentData', ({ format }) => {\n        const max = (bitLength: number) => Math.pow(2, bitLength) - 1;\n        return [\n          // Test extrema\n          makeParam(format, () => 0),\n          makeParam(format, bitLength => max(bitLength)),\n\n          // Test a middle value\n          makeParam(format, bitLength => Math.floor(max(bitLength) / 2)),\n\n          // Test mixed values\n          makeParam(format, (bitLength, i) => {\n            const offset = [0.13, 0.63, 0.42, 0.89];\n            return Math.floor(offset[i] * max(bitLength));\n          }),\n        ];\n      })\n  )\n  .fn(doTest);\n\ng.test('sint_texel_data_in_shader')\n  .params(u =>\n    u\n      .combine('format', kEncodableTextureFormats)\n      .filter(({ format }) => {\n        const info = kTextureFormatInfo[format];\n        return !!info.color && info.color.copyDst && getSingleDataType(format) === 'sint';\n      })\n      .beginSubcases()\n      .expand('componentData', ({ format }) => {\n        const max = (bitLength: number) => Math.pow(2, bitLength - 1) - 1;\n        return [\n          // Test extrema\n          makeParam(format, () => 0),\n          makeParam(format, bitLength => max(bitLength)),\n          makeParam(format, bitLength => -max(bitLength) - 1),\n\n          // Test a middle value\n          makeParam(format, bitLength => Math.floor(max(bitLength) / 2)),\n\n          // Test mixed values\n          makeParam(format, (bitLength, i) => {\n            const offset = [0.13, 0.63, 0.42, 0.89];\n            const range = 2 * max(bitLength);\n            return -max(bitLength) + Math.floor(offset[i] * range);\n          }),\n        ];\n      })\n  )\n  .fn(doTest);\n\ng.test('float_texel_data_in_shader')\n  .desc(\n    `\nTODO: Test NaN, Infinity, -Infinity [1]`\n  )\n  .params(u =>\n    u\n      .combine('format', kEncodableTextureFormats)\n      .filter(({ format }) => {\n        const info = kTextureFormatInfo[format];\n        return !!info.color && info.color.copyDst && getSingleDataType(format) === 'float';\n      })\n      .beginSubcases()\n      .expand('componentData', ({ format }) => {\n        return [\n          // Test extrema\n          makeParam(format, () => 0),\n\n          // [1]: Test NaN, Infinity, -Infinity\n\n          // Test some values\n          makeParam(format, () => 0.1199951171875),\n          makeParam(format, () => 1.4072265625),\n          makeParam(format, () => 24928),\n          makeParam(format, () => -0.1319580078125),\n          makeParam(format, () => -323.25),\n          makeParam(format, () => -7440),\n\n          // Test mixed values\n          makeParam(format, (bitLength, i) => {\n            return [24896, -0.1319580078125, -323.25, -234.375][i];\n          }),\n        ];\n      })\n  )\n  .fn(doTest);\n\ng.test('ufloat_texel_data_in_shader')\n  .desc(\n    `\nTODO: Test NaN, Infinity [1]`\n  )\n  .params(u =>\n    u\n      .combine('format', kEncodableTextureFormats)\n      .filter(({ format }) => {\n        const info = kTextureFormatInfo[format];\n        return !!info.color && info.color.copyDst && getSingleDataType(format) === 'ufloat';\n      })\n      .beginSubcases()\n      .expand('componentData', ({ format }) => {\n        return [\n          // Test extrema\n          makeParam(format, () => 0),\n\n          // [2]: Test NaN, Infinity\n\n          // Test some values\n          makeParam(format, () => 0.119140625),\n          makeParam(format, () => 1.40625),\n          makeParam(format, () => 24896),\n\n          // Test scattered mixed values\n          makeParam(format, (bitLength, i) => {\n            return [24896, 1.40625, 0.119140625, 0.23095703125][i];\n          }),\n\n          // Test mixed values that are close in magnitude.\n          makeParam(format, (bitLength, i) => {\n            return [0.1337890625, 0.17919921875, 0.119140625, 0.125][i];\n          }),\n        ];\n      })\n  )\n  .fn(doTest);\n"],"mappings":"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"}