{"version":3,"file":"texture_ok.spec.js","names":["description","makeTestGroup","GPUTest","TexelView","textureContentIsOKByT2B","g","test","desc","params","u","combineWithParams","format","beginSubcases","data","opts","maxFractionalDiff","_ok","maxDiffULPsForFloatFormat","fn","t","size","texture","device","createTexture","usage","GPUTextureUsage","COPY_DST","COPY_SRC","trackForCleanup","queue","writeTexture","Float32Array","expColor","R","G","B","A","expTexelView","fromTexelsAsColors","coords","result","expect","undefined","combine","_maxValue","mode","Int8Array","fromTexelsAsBytes","Uint8Array","maxDiffULPsForNormFormat","message","exp","x","expectOK"],"sources":["../../../../src/webgpu/util/texture/texture_ok.spec.ts"],"sourcesContent":["export const description = 'checkPixels helpers behave as expected against real textures';\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { GPUTest } from '../../gpu_test.js';\n\nimport { TexelView } from './texel_view.js';\nimport { textureContentIsOKByT2B } from './texture_ok.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('float32')\n  .desc(`Basic test that actual/expected must match, for float32.`)\n  .params(u =>\n    u\n      .combineWithParams([\n        { format: 'rgba32float' }, //\n        { format: 'rg32float' },\n      ] as const)\n      .beginSubcases()\n      .combineWithParams([\n        // Expected data is 0.6 in all channels\n        { data: 0.6, opts: { maxFractionalDiff: 0.0000001 }, _ok: true },\n        { data: 0.6, opts: { maxDiffULPsForFloatFormat: 1 }, _ok: true },\n\n        { data: 0.5999, opts: { maxFractionalDiff: 0 }, _ok: false },\n        { data: 0.5999, opts: { maxFractionalDiff: 0.0001001 }, _ok: true },\n\n        { data: 0.6001, opts: { maxFractionalDiff: 0 }, _ok: false },\n        { data: 0.6001, opts: { maxFractionalDiff: 0.0001001 }, _ok: true },\n\n        { data: 0.5999, opts: { maxDiffULPsForFloatFormat: 1677 }, _ok: false },\n        { data: 0.5999, opts: { maxDiffULPsForFloatFormat: 1678 }, _ok: true },\n\n        { data: 0.6001, opts: { maxDiffULPsForFloatFormat: 1676 }, _ok: false },\n        { data: 0.6001, opts: { maxDiffULPsForFloatFormat: 1677 }, _ok: true },\n      ])\n  )\n  .fn(async t => {\n    const { format, data, opts, _ok } = t.params;\n\n    const size = [1, 1];\n    const texture = t.device.createTexture({\n      format,\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC,\n    });\n    t.trackForCleanup(texture);\n    t.device.queue.writeTexture({ texture }, new Float32Array([data, data, data, data]), {}, size);\n\n    const expColor = { R: 0.6, G: 0.6, B: 0.6, A: 0.6 };\n    const expTexelView = TexelView.fromTexelsAsColors(format, coords => expColor);\n\n    const result = await textureContentIsOKByT2B(t, { texture }, size, { expTexelView }, opts);\n    t.expect((result === undefined) === _ok, `expected ${_ok}, got ${result === undefined}`);\n  });\n\ng.test('norm')\n  .desc(`Basic test that actual/expected must match, for unorm/snorm.`)\n  .params(u =>\n    u\n      .combine('mode', ['bytes', 'colors'] as const)\n      .combineWithParams([\n        { format: 'r8unorm', _maxValue: 255 },\n        { format: 'r8snorm', _maxValue: 127 },\n      ] as const)\n      .beginSubcases()\n      .combineWithParams([\n        // Expected data is [10, 10]\n        { data: [10, 10], _ok: true },\n        { data: [10, 11], _ok: false },\n        { data: [11, 10], _ok: false },\n        { data: [11, 11], _ok: false },\n      ])\n  )\n  .fn(async t => {\n    const { mode, format, _maxValue, data, _ok } = t.params;\n\n    const size = [2, 1];\n    const texture = t.device.createTexture({\n      format,\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC,\n    });\n    t.trackForCleanup(texture);\n    t.device.queue.writeTexture({ texture }, new Int8Array(data), {}, size);\n\n    let expTexelView;\n    switch (mode) {\n      case 'bytes':\n        expTexelView = TexelView.fromTexelsAsBytes(format, coords => new Uint8Array([10]));\n        break;\n      case 'colors':\n        expTexelView = TexelView.fromTexelsAsColors(format, coords => ({ R: 10 / _maxValue }));\n        break;\n    }\n\n    const result = await textureContentIsOKByT2B(\n      t,\n      { texture },\n      size,\n      { expTexelView },\n      { maxDiffULPsForNormFormat: 0 }\n    );\n    t.expect((result === undefined) === _ok, result?.message);\n  });\n\ng.test('snorm_min')\n  .desc(\n    `The minimum snorm value has two possible representations (e.g. -127 and -128). Ensure that\n    actual/expected can mismatch in both directions and pass the test.`\n  )\n  .params(u =>\n    u //\n      .combine('mode', ['bytes', 'colors'] as const)\n      .combineWithParams([\n        //\n        { format: 'r8snorm', _maxValue: 127 },\n      ] as const)\n  )\n  .fn(async t => {\n    const { mode, format, _maxValue } = t.params;\n\n    const data = [-_maxValue, -_maxValue - 1];\n\n    const size = [2, 1];\n    const texture = t.device.createTexture({\n      format,\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC,\n    });\n    t.trackForCleanup(texture);\n    t.device.queue.writeTexture({ texture }, new Int8Array(data), {}, size);\n\n    let expTexelView;\n    switch (mode) {\n      case 'bytes':\n        {\n          // Actual value should be [-127,-128], expected value is [-128,-127], both should pass.\n          const exp = [-_maxValue - 1, -_maxValue];\n          expTexelView = TexelView.fromTexelsAsBytes(\n            format,\n            coords => new Uint8Array([exp[coords.x]])\n          );\n        }\n        break;\n      case 'colors':\n        expTexelView = TexelView.fromTexelsAsColors(format, coords => ({ R: -1 }));\n        break;\n    }\n\n    const result = await textureContentIsOKByT2B(\n      t,\n      { texture },\n      size,\n      { expTexelView },\n      { maxDiffULPsForNormFormat: 0 }\n    );\n    t.expectOK(result);\n  });\n"],"mappings":"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"}