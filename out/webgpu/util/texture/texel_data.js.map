{"version":3,"file":"texel_data.js","names":["assert","unreachable","kValue","assertInIntegerRange","float32ToFloatBits","float32ToFloat16Bits","floatAsNormalizedInteger","gammaCompress","gammaDecompress","normalizedIntegerAsFloat","packRGB9E5UFloat","floatBitsToNumber","float16BitsToFloat32","floatBitsToNormalULPFromZero","kFloat32Format","kFloat16Format","kUFloat9e5Format","numberToFloat32Bits","float32BitsToNumber","numberToFloatBits","ufloatM9E5BitsToNumber","clamp","signExtend","TexelComponent","makePerTexelComponent","components","value","values","c","applyEach","fn","Object","assign","undefined","encodeSRGB","R","G","B","kRGB","decodeSRGB","makeClampToRange","format","repr","kTexelRepresentationInfo","numericRange","x","componentOrder","smallComponentDataViews","Map","getComponentDataView","byteLength","buffer","ArrayBuffer","DataView","dataView","get","set","packComponents","bitLengths","componentDataTypes","bitLengthMap","totalBitLength","length","entries","reduce","acc","componentDataTypeMap","bitOffset","type","bitLength","byteOffset","Math","floor","ceil","setUint8","setUint16","setUint32","currentValue","getUint32","mask","bitsToClearRight","bitsToClearLeft","newValue","setInt8","setInt16","setInt32","setFloat32","unpackComponentsBits","byteView","index","shortView","Uint16Array","longView","Uint32Array","getUint8","getUint16","word","makeNormalizedInfo","opt","encodeNonSRGB","n","signed","decodeNonSRGB","numberToBitsNonSRGB","bitsToNumberNonSRGB","encode","decode","numberToBits","bitsToNumber","sRGB","bitsToULPFromZero","maxValue","max","dataType","min","componentInfo","pack","unpackBits","data","finiteMin","finiteMax","makeIntegerInfo","maxUnsignedValue","decodedN","bitMask","v","makeFloatInfo","restrictedDepth","Float32Array","identity","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","f32","negative","f16","positive","kR","kRG","kRGBA","A","kBGRA","kFloat11Format","exponentBits","mantissaBits","bias","kFloat10Format","rgb10a2uint","rgb10a2unorm","rg11b10ufloat","componentsBits","rgb9e5ufloat","encoded","redMantissa","greenMantissa","blueMantissa","exponentSharedBits","depth32float","Depth","depth16unorm","depth24plus","stencil8","Stencil","getSingleDataType","infos","cur","getComponentReadbackTraits","ReadbackTypedArray","shaderType","Int32Array"],"sources":["../../../../src/webgpu/util/texture/texel_data.ts"],"sourcesContent":["import { assert, unreachable } from '../../../common/util/util.js';\nimport { UncompressedTextureFormat, EncodableTextureFormat } from '../../format_info.js';\nimport { kValue } from '../constants.js';\nimport {\n  assertInIntegerRange,\n  float32ToFloatBits,\n  float32ToFloat16Bits,\n  floatAsNormalizedInteger,\n  gammaCompress,\n  gammaDecompress,\n  normalizedIntegerAsFloat,\n  packRGB9E5UFloat,\n  floatBitsToNumber,\n  float16BitsToFloat32,\n  floatBitsToNormalULPFromZero,\n  kFloat32Format,\n  kFloat16Format,\n  kUFloat9e5Format,\n  numberToFloat32Bits,\n  float32BitsToNumber,\n  numberToFloatBits,\n  ufloatM9E5BitsToNumber,\n} from '../conversion.js';\nimport { clamp, signExtend } from '../math.js';\n\n/** A component of a texture format: R, G, B, A, Depth, or Stencil. */\nexport const enum TexelComponent {\n  R = 'R',\n  G = 'G',\n  B = 'B',\n  A = 'A',\n  Depth = 'Depth',\n  Stencil = 'Stencil',\n}\n\n/** Arbitrary data, per component of a texel format. */\nexport type PerTexelComponent<T> = { [c in TexelComponent]?: T };\n\n/** How a component is encoded in its bit range of a texel format. */\nexport type ComponentDataType = 'uint' | 'sint' | 'unorm' | 'snorm' | 'float' | 'ufloat' | null;\n\n/**\n * Maps component values to component values\n * @param {PerTexelComponent<number>} components - The input components.\n * @returns {PerTexelComponent<number>} The new output components.\n */\ntype ComponentMapFn = (components: PerTexelComponent<number>) => PerTexelComponent<number>;\n\n/**\n * Packs component values as an ArrayBuffer\n * @param {PerTexelComponent<number>} components - The input components.\n * @returns {ArrayBuffer} The packed data.\n */\ntype ComponentPackFn = (components: PerTexelComponent<number>) => ArrayBuffer;\n\n/** Unpacks component values from a Uint8Array */\ntype ComponentUnpackFn = (data: Uint8Array) => PerTexelComponent<number>;\n\n/**\n * Create a PerTexelComponent object filled with the same value for all components.\n * @param {TexelComponent[]} components - The component names.\n * @param {T} value - The value to assign to each component.\n * @returns {PerTexelComponent<T>}\n */\nfunction makePerTexelComponent<T>(components: TexelComponent[], value: T): PerTexelComponent<T> {\n  const values: PerTexelComponent<T> = {};\n  for (const c of components) {\n    values[c] = value;\n  }\n  return values;\n}\n\n/**\n * Create a function which applies clones a `PerTexelComponent<number>` and then applies the\n * function `fn` to each component of `components`.\n * @param {(value: number) => number} fn - The mapping function to apply to component values.\n * @param {TexelComponent[]} components - The component names.\n * @returns {ComponentMapFn} The map function which clones the input component values, and applies\n *                           `fn` to each of component of `components`.\n */\nfunction applyEach(fn: (value: number) => number, components: TexelComponent[]): ComponentMapFn {\n  return (values: PerTexelComponent<number>) => {\n    values = Object.assign({}, values);\n    for (const c of components) {\n      assert(values[c] !== undefined);\n      values[c] = fn(values[c]!);\n    }\n    return values;\n  };\n}\n\n/**\n * A `ComponentMapFn` for encoding sRGB.\n * @param {PerTexelComponent<number>} components - The input component values.\n * @returns {TexelComponent<number>} Gamma-compressed copy of `components`.\n */\nconst encodeSRGB: ComponentMapFn = components => {\n  assert(\n    components.R !== undefined && components.G !== undefined && components.B !== undefined,\n    'sRGB requires all of R, G, and B components'\n  );\n  return applyEach(gammaCompress, kRGB)(components);\n};\n\n/**\n * A `ComponentMapFn` for decoding sRGB.\n * @param {PerTexelComponent<number>} components - The input component values.\n * @returns {TexelComponent<number>} Gamma-decompressed copy of `components`.\n */\nconst decodeSRGB: ComponentMapFn = components => {\n  components = Object.assign({}, components);\n  assert(\n    components.R !== undefined && components.G !== undefined && components.B !== undefined,\n    'sRGB requires all of R, G, and B components'\n  );\n  return applyEach(gammaDecompress, kRGB)(components);\n};\n\n/**\n * Makes a `ComponentMapFn` for clamping values to the specified range.\n */\nexport function makeClampToRange(format: EncodableTextureFormat): ComponentMapFn {\n  const repr = kTexelRepresentationInfo[format];\n  assert(repr.numericRange !== null, 'Format has unknown numericRange');\n  return applyEach(x => clamp(x, repr.numericRange!), repr.componentOrder);\n}\n\n// MAINTENANCE_TODO: Look into exposing this map to the test fixture so that it can be GCed at the\n// end of each test group. That would allow for caching of larger buffers (though it's unclear how\n// ofter larger buffers are used by packComponents.)\nconst smallComponentDataViews = new Map();\nfunction getComponentDataView(byteLength: number): DataView {\n  if (byteLength > 32) {\n    const buffer = new ArrayBuffer(byteLength);\n    return new DataView(buffer);\n  }\n  let dataView = smallComponentDataViews.get(byteLength);\n  if (!dataView) {\n    const buffer = new ArrayBuffer(byteLength);\n    dataView = new DataView(buffer);\n    smallComponentDataViews.set(byteLength, dataView);\n  }\n  return dataView;\n}\n\n/**\n * Helper function to pack components as an ArrayBuffer.\n * @param {TexelComponent[]} componentOrder - The order of the component data.\n * @param {PerTexelComponent<number>} components - The input component values.\n * @param {number | PerTexelComponent<number>} bitLengths - The length in bits of each component.\n *   If a single number, all components are the same length, otherwise this is a dictionary of\n *   per-component bit lengths.\n * @param {ComponentDataType | PerTexelComponent<ComponentDataType>} componentDataTypes -\n *   The type of the data in `components`. If a single value, all components have the same value.\n *   Otherwise, this is a dictionary of per-component data types.\n * @returns {ArrayBuffer} The packed component data.\n */\nfunction packComponents(\n  componentOrder: TexelComponent[],\n  components: PerTexelComponent<number>,\n  bitLengths: number | PerTexelComponent<number>,\n  componentDataTypes: ComponentDataType | PerTexelComponent<ComponentDataType>\n): ArrayBuffer {\n  let bitLengthMap;\n  let totalBitLength;\n  if (typeof bitLengths === 'number') {\n    bitLengthMap = makePerTexelComponent(componentOrder, bitLengths);\n    totalBitLength = bitLengths * componentOrder.length;\n  } else {\n    bitLengthMap = bitLengths;\n    totalBitLength = Object.entries(bitLengthMap).reduce((acc, [, value]) => {\n      assert(value !== undefined);\n      return acc + value;\n    }, 0);\n  }\n  assert(totalBitLength % 8 === 0);\n\n  const componentDataTypeMap =\n    typeof componentDataTypes === 'string' || componentDataTypes === null\n      ? makePerTexelComponent(componentOrder, componentDataTypes)\n      : componentDataTypes;\n\n  const dataView = getComponentDataView(totalBitLength / 8);\n  let bitOffset = 0;\n  for (const c of componentOrder) {\n    const value = components[c];\n    const type = componentDataTypeMap[c];\n    const bitLength = bitLengthMap[c];\n    assert(value !== undefined);\n    assert(type !== undefined);\n    assert(bitLength !== undefined);\n\n    const byteOffset = Math.floor(bitOffset / 8);\n    const byteLength = Math.ceil(bitLength / 8);\n    switch (type) {\n      case 'uint':\n      case 'unorm':\n        if (byteOffset === bitOffset / 8 && byteLength === bitLength / 8) {\n          switch (byteLength) {\n            case 1:\n              dataView.setUint8(byteOffset, value);\n              break;\n            case 2:\n              dataView.setUint16(byteOffset, value, true);\n              break;\n            case 4:\n              dataView.setUint32(byteOffset, value, true);\n              break;\n            default:\n              unreachable();\n          }\n        } else {\n          // Packed representations are all 32-bit and use Uint as the data type.\n          // ex.) rg10b11float, rgb10a2unorm\n          switch (dataView.byteLength) {\n            case 4: {\n              const currentValue = dataView.getUint32(0, true);\n\n              let mask = 0xffffffff;\n              const bitsToClearRight = bitOffset;\n              const bitsToClearLeft = 32 - (bitLength + bitOffset);\n\n              mask = (mask >>> bitsToClearRight) << bitsToClearRight;\n              mask = (mask << bitsToClearLeft) >>> bitsToClearLeft;\n\n              const newValue = (currentValue & ~mask) | (value << bitOffset);\n\n              dataView.setUint32(0, newValue, true);\n              break;\n            }\n            default:\n              unreachable();\n          }\n        }\n        break;\n      case 'sint':\n      case 'snorm':\n        assert(byteOffset === bitOffset / 8 && byteLength === bitLength / 8);\n        switch (byteLength) {\n          case 1:\n            dataView.setInt8(byteOffset, value);\n            break;\n          case 2:\n            dataView.setInt16(byteOffset, value, true);\n            break;\n          case 4:\n            dataView.setInt32(byteOffset, value, true);\n            break;\n          default:\n            unreachable();\n        }\n        break;\n      case 'float':\n        assert(byteOffset === bitOffset / 8 && byteLength === bitLength / 8);\n        switch (byteLength) {\n          case 4:\n            dataView.setFloat32(byteOffset, value, true);\n            break;\n          default:\n            unreachable();\n        }\n        break;\n      case 'ufloat':\n      case null:\n        unreachable();\n    }\n\n    bitOffset += bitLength;\n  }\n\n  return dataView.buffer;\n}\n\n/**\n * Unpack substrings of bits from a Uint8Array, e.g. [8,8,8,8] or [9,9,9,5].\n */\nfunction unpackComponentsBits(\n  componentOrder: TexelComponent[],\n  byteView: Uint8Array,\n  bitLengths: number | PerTexelComponent<number>\n): PerTexelComponent<number> {\n  const components = makePerTexelComponent(componentOrder, 0);\n\n  let bitLengthMap;\n  let totalBitLength;\n  if (typeof bitLengths === 'number') {\n    let index = 0;\n    // Optimized cases for when the bit lengths are all a well aligned value.\n    switch (bitLengths) {\n      case 8:\n        for (const c of componentOrder) {\n          components[c] = byteView[index++];\n        }\n        return components;\n      case 16: {\n        const shortView = new Uint16Array(byteView.buffer, byteView.byteOffset);\n        for (const c of componentOrder) {\n          components[c] = shortView[index++];\n        }\n        return components;\n      }\n      case 32: {\n        const longView = new Uint32Array(byteView.buffer, byteView.byteOffset);\n        for (const c of componentOrder) {\n          components[c] = longView[index++];\n        }\n        return components;\n      }\n    }\n\n    bitLengthMap = makePerTexelComponent(componentOrder, bitLengths);\n    totalBitLength = bitLengths * componentOrder.length;\n  } else {\n    bitLengthMap = bitLengths;\n    totalBitLength = Object.entries(bitLengthMap).reduce((acc, [, value]) => {\n      assert(value !== undefined);\n      return acc + value;\n    }, 0);\n  }\n\n  assert(totalBitLength % 8 === 0);\n\n  const dataView = new DataView(byteView.buffer, byteView.byteOffset, byteView.byteLength);\n  let bitOffset = 0;\n  for (const c of componentOrder) {\n    const bitLength = bitLengthMap[c];\n    assert(bitLength !== undefined);\n\n    let value: number;\n\n    const byteOffset = Math.floor(bitOffset / 8);\n    const byteLength = Math.ceil(bitLength / 8);\n    if (byteOffset === bitOffset / 8 && byteLength === bitLength / 8) {\n      switch (byteLength) {\n        case 1:\n          value = dataView.getUint8(byteOffset);\n          break;\n        case 2:\n          value = dataView.getUint16(byteOffset, true);\n          break;\n        case 4:\n          value = dataView.getUint32(byteOffset, true);\n          break;\n        default:\n          unreachable();\n      }\n    } else {\n      // Packed representations are all 32-bit and use Uint as the data type.\n      // ex.) rg10b11float, rgb10a2unorm\n      assert(dataView.byteLength === 4);\n      const word = dataView.getUint32(0, true);\n      value = (word >>> bitOffset) & ((1 << bitLength) - 1);\n    }\n\n    bitOffset += bitLength;\n    components[c] = value;\n  }\n\n  return components;\n}\n\n/**\n * Create an entry in `kTexelRepresentationInfo` for normalized integer texel data with constant\n * bitlength.\n * @param {TexelComponent[]} componentOrder - The order of the component data.\n * @param {number} bitLength - The number of bits in each component.\n * @param {{signed: boolean; sRGB: boolean}} opt - Boolean flags for `signed` and `sRGB`.\n */\nfunction makeNormalizedInfo(\n  componentOrder: TexelComponent[],\n  bitLength: number,\n  opt: { signed: boolean; sRGB: boolean }\n): TexelRepresentationInfo {\n  const encodeNonSRGB = applyEach(\n    (n: number) => floatAsNormalizedInteger(n, bitLength, opt.signed),\n    componentOrder\n  );\n  const decodeNonSRGB = applyEach(\n    (n: number) => normalizedIntegerAsFloat(n, bitLength, opt.signed),\n    componentOrder\n  );\n\n  const numberToBitsNonSRGB = applyEach(\n    n => floatAsNormalizedInteger(n, bitLength, opt.signed),\n    componentOrder\n  );\n  let bitsToNumberNonSRGB: ComponentMapFn;\n  if (opt.signed) {\n    bitsToNumberNonSRGB = applyEach(\n      n => normalizedIntegerAsFloat(signExtend(n, bitLength), bitLength, opt.signed),\n      componentOrder\n    );\n  } else {\n    bitsToNumberNonSRGB = applyEach(\n      n => normalizedIntegerAsFloat(n, bitLength, opt.signed),\n      componentOrder\n    );\n  }\n\n  let encode: ComponentMapFn;\n  let decode: ComponentMapFn;\n  let numberToBits: ComponentMapFn;\n  let bitsToNumber: ComponentMapFn;\n  if (opt.sRGB) {\n    encode = components => encodeNonSRGB(encodeSRGB(components));\n    decode = components => decodeSRGB(decodeNonSRGB(components));\n    numberToBits = components => numberToBitsNonSRGB(encodeSRGB(components));\n    bitsToNumber = components => decodeSRGB(bitsToNumberNonSRGB(components));\n  } else {\n    encode = encodeNonSRGB;\n    decode = decodeNonSRGB;\n    numberToBits = numberToBitsNonSRGB;\n    bitsToNumber = bitsToNumberNonSRGB;\n  }\n\n  let bitsToULPFromZero: ComponentMapFn;\n  if (opt.signed) {\n    const maxValue = (1 << (bitLength - 1)) - 1; // e.g. 127 for snorm8\n    bitsToULPFromZero = applyEach(\n      n => Math.max(-maxValue, signExtend(n, bitLength)),\n      componentOrder\n    );\n  } else {\n    bitsToULPFromZero = components => components;\n  }\n\n  const dataType: ComponentDataType = opt.signed ? 'snorm' : 'unorm';\n  const min = opt.signed ? -1 : 0;\n  const max = 1;\n  return {\n    componentOrder,\n    componentInfo: makePerTexelComponent(componentOrder, {\n      dataType,\n      bitLength,\n    }),\n    encode,\n    decode,\n    pack: (components: PerTexelComponent<number>) =>\n      packComponents(componentOrder, components, bitLength, dataType),\n    unpackBits: (data: Uint8Array) => unpackComponentsBits(componentOrder, data, bitLength),\n    numberToBits,\n    bitsToNumber,\n    bitsToULPFromZero,\n    numericRange: { min, max, finiteMin: min, finiteMax: max },\n  };\n}\n\n/**\n * Create an entry in `kTexelRepresentationInfo` for integer texel data with constant bitlength.\n * @param {TexelComponent[]} componentOrder - The order of the component data.\n * @param {number} bitLength - The number of bits in each component.\n * @param {{signed: boolean}} opt - Boolean flag for `signed`.\n */\nfunction makeIntegerInfo(\n  componentOrder: TexelComponent[],\n  bitLength: number,\n  opt: { signed: boolean }\n): TexelRepresentationInfo {\n  assert(bitLength <= 32);\n  const min = opt.signed ? -(2 ** (bitLength - 1)) : 0;\n  const max = opt.signed ? 2 ** (bitLength - 1) - 1 : 2 ** bitLength - 1;\n  const numericRange = { min, max, finiteMin: min, finiteMax: max };\n  const maxUnsignedValue = 2 ** bitLength;\n  const encode = applyEach(\n    (n: number) => (assertInIntegerRange(n, bitLength, opt.signed), n),\n    componentOrder\n  );\n  const decode = applyEach(\n    (n: number) => (assertInIntegerRange(n, bitLength, opt.signed), n),\n    componentOrder\n  );\n  const bitsToNumber = applyEach((n: number) => {\n    const decodedN = opt.signed ? (n > numericRange.max ? n - maxUnsignedValue : n) : n;\n    assertInIntegerRange(decodedN, bitLength, opt.signed);\n    return decodedN;\n  }, componentOrder);\n\n  let bitsToULPFromZero: ComponentMapFn;\n  if (opt.signed) {\n    bitsToULPFromZero = applyEach(n => signExtend(n, bitLength), componentOrder);\n  } else {\n    bitsToULPFromZero = components => components;\n  }\n\n  const dataType: ComponentDataType = opt.signed ? 'sint' : 'uint';\n  const bitMask = (1 << bitLength) - 1;\n  return {\n    componentOrder,\n    componentInfo: makePerTexelComponent(componentOrder, {\n      dataType,\n      bitLength,\n    }),\n    encode,\n    decode,\n    pack: (components: PerTexelComponent<number>) =>\n      packComponents(componentOrder, components, bitLength, dataType),\n    unpackBits: (data: Uint8Array) => unpackComponentsBits(componentOrder, data, bitLength),\n    numberToBits: applyEach(v => v & bitMask, componentOrder),\n    bitsToNumber,\n    bitsToULPFromZero,\n    numericRange,\n  };\n}\n\n/**\n * Create an entry in `kTexelRepresentationInfo` for floating point texel data with constant\n * bitlength.\n * @param {TexelComponent[]} componentOrder - The order of the component data.\n * @param {number} bitLength - The number of bits in each component.\n */\nfunction makeFloatInfo(\n  componentOrder: TexelComponent[],\n  bitLength: number,\n  { restrictedDepth = false }: { restrictedDepth?: boolean } = {}\n): TexelRepresentationInfo {\n  let encode: ComponentMapFn;\n  let numberToBits;\n  let bitsToNumber;\n  let bitsToULPFromZero;\n  switch (bitLength) {\n    case 32:\n      if (restrictedDepth) {\n        encode = applyEach(v => {\n          assert(v >= 0.0 && v <= 1.0, 'depth out of range');\n          return new Float32Array([v])[0];\n        }, componentOrder);\n      } else {\n        encode = applyEach(v => new Float32Array([v])[0], componentOrder);\n      }\n      numberToBits = applyEach(numberToFloat32Bits, componentOrder);\n      bitsToNumber = applyEach(float32BitsToNumber, componentOrder);\n      bitsToULPFromZero = applyEach(\n        v => floatBitsToNormalULPFromZero(v, kFloat32Format),\n        componentOrder\n      );\n      break;\n    case 16:\n      if (restrictedDepth) {\n        encode = applyEach(v => {\n          assert(v >= 0.0 && v <= 1.0, 'depth out of range');\n          return float16BitsToFloat32(float32ToFloat16Bits(v));\n        }, componentOrder);\n      } else {\n        encode = applyEach(v => float16BitsToFloat32(float32ToFloat16Bits(v)), componentOrder);\n      }\n      numberToBits = applyEach(float32ToFloat16Bits, componentOrder);\n      bitsToNumber = applyEach(float16BitsToFloat32, componentOrder);\n      bitsToULPFromZero = applyEach(\n        v => floatBitsToNormalULPFromZero(v, kFloat16Format),\n        componentOrder\n      );\n      break;\n    default:\n      unreachable();\n  }\n  const decode = applyEach(identity, componentOrder);\n\n  return {\n    componentOrder,\n    componentInfo: makePerTexelComponent(componentOrder, {\n      dataType: 'float' as const,\n      bitLength,\n    }),\n    encode,\n    decode,\n    pack: (components: PerTexelComponent<number>) => {\n      switch (bitLength) {\n        case 16:\n          components = applyEach(float32ToFloat16Bits, componentOrder)(components);\n          return packComponents(componentOrder, components, 16, 'uint');\n        case 32:\n          return packComponents(componentOrder, components, bitLength, 'float');\n        default:\n          unreachable();\n      }\n    },\n    unpackBits: (data: Uint8Array) => unpackComponentsBits(componentOrder, data, bitLength),\n    numberToBits,\n    bitsToNumber,\n    bitsToULPFromZero,\n    numericRange: restrictedDepth\n      ? { min: 0, max: 1, finiteMin: 0, finiteMax: 1 }\n      : {\n          min: Number.NEGATIVE_INFINITY,\n          max: Number.POSITIVE_INFINITY,\n          finiteMin: bitLength === 32 ? kValue.f32.negative.min : kValue.f16.negative.min,\n          finiteMax: bitLength === 32 ? kValue.f32.positive.max : kValue.f16.positive.max,\n        },\n  };\n}\n\nconst kR = [TexelComponent.R];\nconst kRG = [TexelComponent.R, TexelComponent.G];\nconst kRGB = [TexelComponent.R, TexelComponent.G, TexelComponent.B];\nconst kRGBA = [TexelComponent.R, TexelComponent.G, TexelComponent.B, TexelComponent.A];\nconst kBGRA = [TexelComponent.B, TexelComponent.G, TexelComponent.R, TexelComponent.A];\n\nconst identity = (n: number) => n;\n\nconst kFloat11Format = { signed: 0, exponentBits: 5, mantissaBits: 6, bias: 15 } as const;\nconst kFloat10Format = { signed: 0, exponentBits: 5, mantissaBits: 5, bias: 15 } as const;\n\nexport type PerComponentFiniteMax = Record<TexelComponent, number>;\nexport type TexelRepresentationInfo = {\n  /** Order of components in the packed representation. */\n  readonly componentOrder: TexelComponent[];\n  /** Data type and bit length of each component in the format. */\n  readonly componentInfo: PerTexelComponent<{\n    dataType: ComponentDataType;\n    bitLength: number;\n  }>;\n  /** Encode shader values into their data representation. ex.) float 1.0 -> unorm8 255 */\n  // MAINTENANCE_TODO: Replace with numberToBits?\n  readonly encode: ComponentMapFn;\n  /** Decode the data representation into the shader values. ex.) unorm8 255 -> float 1.0 */\n  // MAINTENANCE_TODO: Replace with bitsToNumber?\n  readonly decode: ComponentMapFn;\n  /** Pack texel component values into an ArrayBuffer. ex.) rg8unorm `{r: 0, g: 255}` -> 0xFF00 */\n  // MAINTENANCE_TODO: Replace with packBits?\n  readonly pack: ComponentPackFn;\n\n  /** Convert integer bit representations into numeric values, e.g. unorm8 255 -> numeric 1.0 */\n  readonly bitsToNumber: ComponentMapFn;\n  /** Convert numeric values into integer bit representations, e.g. numeric 1.0 -> unorm8 255 */\n  readonly numberToBits: ComponentMapFn;\n  /** Unpack integer bit representations from an ArrayBuffer, e.g. 0xFF00 -> rg8unorm [0,255] */\n  readonly unpackBits: ComponentUnpackFn;\n  /** Convert integer bit representations into ULPs-from-zero, e.g. unorm8 255 -> 255 ULPs */\n  readonly bitsToULPFromZero: ComponentMapFn;\n  /** The valid range of numeric \"color\" values, e.g. [0, Infinity] for ufloat. */\n  readonly numericRange: null | {\n    min: number;\n    max: number;\n    finiteMin: number;\n    finiteMax: number | PerComponentFiniteMax;\n  };\n\n  // Add fields as needed\n};\nexport const kTexelRepresentationInfo: {\n  readonly [k in UncompressedTextureFormat]: TexelRepresentationInfo;\n} = {\n  .../* prettier-ignore */ {\n    'r8unorm':               makeNormalizedInfo(   kR,  8, { signed: false, sRGB: false }),\n    'r8snorm':               makeNormalizedInfo(   kR,  8, { signed:  true, sRGB: false }),\n    'r8uint':                makeIntegerInfo(      kR,  8, { signed: false }),\n    'r8sint':                makeIntegerInfo(      kR,  8, { signed:  true }),\n    'r16uint':               makeIntegerInfo(      kR, 16, { signed: false }),\n    'r16sint':               makeIntegerInfo(      kR, 16, { signed:  true }),\n    'r16float':              makeFloatInfo(        kR, 16),\n    'rg8unorm':              makeNormalizedInfo(  kRG,  8, { signed: false, sRGB: false }),\n    'rg8snorm':              makeNormalizedInfo(  kRG,  8, { signed:  true, sRGB: false }),\n    'rg8uint':               makeIntegerInfo(     kRG,  8, { signed: false }),\n    'rg8sint':               makeIntegerInfo(     kRG,  8, { signed:  true }),\n    'r32uint':               makeIntegerInfo(      kR, 32, { signed: false }),\n    'r32sint':               makeIntegerInfo(      kR, 32, { signed:  true }),\n    'r32float':              makeFloatInfo(        kR, 32),\n    'rg16uint':              makeIntegerInfo(     kRG, 16, { signed: false }),\n    'rg16sint':              makeIntegerInfo(     kRG, 16, { signed:  true }),\n    'rg16float':             makeFloatInfo(       kRG, 16),\n    'rgba8unorm':            makeNormalizedInfo(kRGBA,  8, { signed: false, sRGB: false }),\n    'rgba8unorm-srgb':       makeNormalizedInfo(kRGBA,  8, { signed: false, sRGB:  true }),\n    'rgba8snorm':            makeNormalizedInfo(kRGBA,  8, { signed:  true, sRGB: false }),\n    'rgba8uint':             makeIntegerInfo(   kRGBA,  8, { signed: false }),\n    'rgba8sint':             makeIntegerInfo(   kRGBA,  8, { signed:  true }),\n    'bgra8unorm':            makeNormalizedInfo(kBGRA,  8, { signed: false, sRGB: false }),\n    'bgra8unorm-srgb':       makeNormalizedInfo(kBGRA,  8, { signed: false, sRGB:  true }),\n    'rg32uint':              makeIntegerInfo(     kRG, 32, { signed: false }),\n    'rg32sint':              makeIntegerInfo(     kRG, 32, { signed:  true }),\n    'rg32float':             makeFloatInfo(       kRG, 32),\n    'rgba16uint':            makeIntegerInfo(   kRGBA, 16, { signed: false }),\n    'rgba16sint':            makeIntegerInfo(   kRGBA, 16, { signed:  true }),\n    'rgba16float':           makeFloatInfo(     kRGBA, 16),\n    'rgba32uint':            makeIntegerInfo(   kRGBA, 32, { signed: false }),\n    'rgba32sint':            makeIntegerInfo(   kRGBA, 32, { signed:  true }),\n    'rgba32float':           makeFloatInfo(     kRGBA, 32),\n  },\n  ...{\n    rgb10a2uint: {\n      componentOrder: kRGBA,\n      componentInfo: {\n        R: { dataType: 'uint', bitLength: 10 },\n        G: { dataType: 'uint', bitLength: 10 },\n        B: { dataType: 'uint', bitLength: 10 },\n        A: { dataType: 'uint', bitLength: 2 },\n      },\n      encode: components => {\n        assertInIntegerRange(components.R!, 10, false);\n        assertInIntegerRange(components.G!, 10, false);\n        assertInIntegerRange(components.B!, 10, false);\n        assertInIntegerRange(components.A!, 2, false);\n        return components;\n      },\n      decode: components => {\n        assertInIntegerRange(components.R!, 10, false);\n        assertInIntegerRange(components.G!, 10, false);\n        assertInIntegerRange(components.B!, 10, false);\n        assertInIntegerRange(components.A!, 2, false);\n        return components;\n      },\n      pack: components =>\n        packComponents(\n          kRGBA,\n          components,\n          {\n            R: 10,\n            G: 10,\n            B: 10,\n            A: 2,\n          },\n          'uint'\n        ),\n      unpackBits: (data: Uint8Array) =>\n        unpackComponentsBits(kRGBA, data, { R: 10, G: 10, B: 10, A: 2 }),\n      numberToBits: components => ({\n        R: components.R! & 0x3ff,\n        G: components.G! & 0x3ff,\n        B: components.B! & 0x3ff,\n        A: components.A! & 0x3,\n      }),\n      bitsToNumber: components => {\n        assertInIntegerRange(components.R!, 10, false);\n        assertInIntegerRange(components.G!, 10, false);\n        assertInIntegerRange(components.B!, 10, false);\n        assertInIntegerRange(components.A!, 2, false);\n        return components;\n      },\n      bitsToULPFromZero: components => components,\n      numericRange: null,\n    },\n    rgb10a2unorm: {\n      componentOrder: kRGBA,\n      componentInfo: {\n        R: { dataType: 'unorm', bitLength: 10 },\n        G: { dataType: 'unorm', bitLength: 10 },\n        B: { dataType: 'unorm', bitLength: 10 },\n        A: { dataType: 'unorm', bitLength: 2 },\n      },\n      encode: components => {\n        return {\n          R: floatAsNormalizedInteger(components.R ?? unreachable(), 10, false),\n          G: floatAsNormalizedInteger(components.G ?? unreachable(), 10, false),\n          B: floatAsNormalizedInteger(components.B ?? unreachable(), 10, false),\n          A: floatAsNormalizedInteger(components.A ?? unreachable(), 2, false),\n        };\n      },\n      decode: components => {\n        return {\n          R: normalizedIntegerAsFloat(components.R ?? unreachable(), 10, false),\n          G: normalizedIntegerAsFloat(components.G ?? unreachable(), 10, false),\n          B: normalizedIntegerAsFloat(components.B ?? unreachable(), 10, false),\n          A: normalizedIntegerAsFloat(components.A ?? unreachable(), 2, false),\n        };\n      },\n      pack: components =>\n        packComponents(\n          kRGBA,\n          components,\n          {\n            R: 10,\n            G: 10,\n            B: 10,\n            A: 2,\n          },\n          'uint'\n        ),\n      unpackBits: (data: Uint8Array) =>\n        unpackComponentsBits(kRGBA, data, { R: 10, G: 10, B: 10, A: 2 }),\n      numberToBits: components => ({\n        R: floatAsNormalizedInteger(components.R ?? unreachable(), 10, false),\n        G: floatAsNormalizedInteger(components.G ?? unreachable(), 10, false),\n        B: floatAsNormalizedInteger(components.B ?? unreachable(), 10, false),\n        A: floatAsNormalizedInteger(components.A ?? unreachable(), 2, false),\n      }),\n      bitsToNumber: components => ({\n        R: normalizedIntegerAsFloat(components.R!, 10, false),\n        G: normalizedIntegerAsFloat(components.G!, 10, false),\n        B: normalizedIntegerAsFloat(components.B!, 10, false),\n        A: normalizedIntegerAsFloat(components.A!, 2, false),\n      }),\n      bitsToULPFromZero: components => components,\n      numericRange: { min: 0, max: 1, finiteMin: 0, finiteMax: 1 },\n    },\n    rg11b10ufloat: {\n      componentOrder: kRGB,\n      encode: applyEach(identity, kRGB),\n      decode: applyEach(identity, kRGB),\n      componentInfo: {\n        R: { dataType: 'ufloat', bitLength: 11 },\n        G: { dataType: 'ufloat', bitLength: 11 },\n        B: { dataType: 'ufloat', bitLength: 10 },\n      },\n      pack: components => {\n        const componentsBits = {\n          R: float32ToFloatBits(components.R ?? unreachable(), 0, 5, 6, 15),\n          G: float32ToFloatBits(components.G ?? unreachable(), 0, 5, 6, 15),\n          B: float32ToFloatBits(components.B ?? unreachable(), 0, 5, 5, 15),\n        };\n        return packComponents(\n          kRGB,\n          componentsBits,\n          {\n            R: 11,\n            G: 11,\n            B: 10,\n          },\n          'uint'\n        );\n      },\n      unpackBits: (data: Uint8Array) => unpackComponentsBits(kRGB, data, { R: 11, G: 11, B: 10 }),\n      numberToBits: components => ({\n        R: numberToFloatBits(components.R ?? unreachable(), kFloat11Format),\n        G: numberToFloatBits(components.G ?? unreachable(), kFloat11Format),\n        B: numberToFloatBits(components.B ?? unreachable(), kFloat10Format),\n      }),\n      bitsToNumber: components => ({\n        R: floatBitsToNumber(components.R!, kFloat11Format),\n        G: floatBitsToNumber(components.G!, kFloat11Format),\n        B: floatBitsToNumber(components.B!, kFloat10Format),\n      }),\n      bitsToULPFromZero: components => ({\n        R: floatBitsToNormalULPFromZero(components.R!, kFloat11Format),\n        G: floatBitsToNormalULPFromZero(components.G!, kFloat11Format),\n        B: floatBitsToNormalULPFromZero(components.B!, kFloat10Format),\n      }),\n      numericRange: {\n        min: 0,\n        max: Number.POSITIVE_INFINITY,\n        finiteMin: 0,\n        finiteMax: {\n          R: floatBitsToNumber(0b111_1011_1111, kFloat11Format),\n          G: floatBitsToNumber(0b111_1011_1111, kFloat11Format),\n          B: floatBitsToNumber(0b11_1101_1111, kFloat10Format),\n        } as PerComponentFiniteMax,\n      },\n    },\n    rgb9e5ufloat: {\n      componentOrder: kRGB,\n      componentInfo: makePerTexelComponent(kRGB, {\n        dataType: 'ufloat',\n        bitLength: -1, // Components don't really have a bitLength since the format is packed.\n      }),\n      encode: applyEach(identity, kRGB),\n      decode: applyEach(identity, kRGB),\n      pack: components =>\n        new Uint32Array([\n          packRGB9E5UFloat(\n            components.R ?? unreachable(),\n            components.G ?? unreachable(),\n            components.B ?? unreachable()\n          ),\n        ]).buffer,\n      unpackBits: (data: Uint8Array) => {\n        const encoded = (data[3] << 24) | (data[2] << 16) | (data[1] << 8) | data[0];\n        const redMantissa = (encoded >>> 0) & 0b111111111;\n        const greenMantissa = (encoded >>> 9) & 0b111111111;\n        const blueMantissa = (encoded >>> 18) & 0b111111111;\n        const exponentSharedBits = ((encoded >>> 27) & 0b11111) << 9;\n        return {\n          R: exponentSharedBits | redMantissa,\n          G: exponentSharedBits | greenMantissa,\n          B: exponentSharedBits | blueMantissa,\n        };\n      },\n      numberToBits: components => ({\n        R: float32ToFloatBits(components.R ?? unreachable(), 0, 5, 9, 15),\n        G: float32ToFloatBits(components.G ?? unreachable(), 0, 5, 9, 15),\n        B: float32ToFloatBits(components.B ?? unreachable(), 0, 5, 9, 15),\n      }),\n      bitsToNumber: components => ({\n        R: ufloatM9E5BitsToNumber(components.R!, kUFloat9e5Format),\n        G: ufloatM9E5BitsToNumber(components.G!, kUFloat9e5Format),\n        B: ufloatM9E5BitsToNumber(components.B!, kUFloat9e5Format),\n      }),\n      bitsToULPFromZero: components => ({\n        R: floatBitsToNormalULPFromZero(components.R!, kUFloat9e5Format),\n        G: floatBitsToNormalULPFromZero(components.G!, kUFloat9e5Format),\n        B: floatBitsToNormalULPFromZero(components.B!, kUFloat9e5Format),\n      }),\n      numericRange: {\n        min: 0,\n        max: Number.POSITIVE_INFINITY,\n        finiteMin: 0,\n        finiteMax: ufloatM9E5BitsToNumber(0b11_1111_1111_1111, kUFloat9e5Format),\n      },\n    },\n    depth32float: makeFloatInfo([TexelComponent.Depth], 32, { restrictedDepth: true }),\n    depth16unorm: makeNormalizedInfo([TexelComponent.Depth], 16, { signed: false, sRGB: false }),\n    depth24plus: {\n      componentOrder: [TexelComponent.Depth],\n      componentInfo: { Depth: { dataType: null, bitLength: 24 } },\n      encode: applyEach(() => unreachable('depth24plus cannot be encoded'), [TexelComponent.Depth]),\n      decode: applyEach(() => unreachable('depth24plus cannot be decoded'), [TexelComponent.Depth]),\n      pack: () => unreachable('depth24plus data cannot be packed'),\n      unpackBits: () => unreachable('depth24plus data cannot be unpacked'),\n      numberToBits: () => unreachable('depth24plus has no representation'),\n      bitsToNumber: () => unreachable('depth24plus has no representation'),\n      bitsToULPFromZero: () => unreachable('depth24plus has no representation'),\n      numericRange: { min: 0, max: 1, finiteMin: 0, finiteMax: 1 },\n    },\n    stencil8: makeIntegerInfo([TexelComponent.Stencil], 8, { signed: false }),\n    'depth32float-stencil8': {\n      componentOrder: [TexelComponent.Depth, TexelComponent.Stencil],\n      componentInfo: {\n        Depth: {\n          dataType: 'float',\n          bitLength: 32,\n        },\n        Stencil: {\n          dataType: 'uint',\n          bitLength: 8,\n        },\n      },\n      encode: components => {\n        assert(components.Stencil !== undefined);\n        assertInIntegerRange(components.Stencil, 8, false);\n        return components;\n      },\n      decode: components => {\n        assert(components.Stencil !== undefined);\n        assertInIntegerRange(components.Stencil, 8, false);\n        return components;\n      },\n      pack: () => unreachable('depth32float-stencil8 data cannot be packed'),\n      unpackBits: () => unreachable('depth32float-stencil8 data cannot be unpacked'),\n      numberToBits: () => unreachable('not implemented'),\n      bitsToNumber: () => unreachable('not implemented'),\n      bitsToULPFromZero: () => unreachable('not implemented'),\n      numericRange: null,\n    },\n    'depth24plus-stencil8': {\n      componentOrder: [TexelComponent.Depth, TexelComponent.Stencil],\n      componentInfo: {\n        Depth: {\n          dataType: null,\n          bitLength: 24,\n        },\n        Stencil: {\n          dataType: 'uint',\n          bitLength: 8,\n        },\n      },\n      encode: components => {\n        assert(components.Depth === undefined, 'depth24plus cannot be encoded');\n        assert(components.Stencil !== undefined);\n        assertInIntegerRange(components.Stencil, 8, false);\n        return components;\n      },\n      decode: components => {\n        assert(components.Depth === undefined, 'depth24plus cannot be decoded');\n        assert(components.Stencil !== undefined);\n        assertInIntegerRange(components.Stencil, 8, false);\n        return components;\n      },\n      pack: () => unreachable('depth24plus-stencil8 data cannot be packed'),\n      unpackBits: () => unreachable('depth24plus-stencil8 data cannot be unpacked'),\n      numberToBits: () => unreachable('depth24plus-stencil8 has no representation'),\n      bitsToNumber: () => unreachable('depth24plus-stencil8 has no representation'),\n      bitsToULPFromZero: () => unreachable('depth24plus-stencil8 has no representation'),\n      numericRange: null,\n    },\n  },\n};\n\n/**\n * Get the `ComponentDataType` for a format. All components must have the same type.\n * @param {UncompressedTextureFormat} format - The input format.\n * @returns {ComponentDataType} The data of the components.\n */\nexport function getSingleDataType(format: UncompressedTextureFormat): ComponentDataType {\n  const infos = Object.values(kTexelRepresentationInfo[format].componentInfo);\n  assert(infos.length > 0);\n  return infos.reduce((acc, cur) => {\n    assert(cur !== undefined);\n    assert(acc === undefined || acc === cur.dataType);\n    return cur.dataType;\n  }, infos[0]!.dataType);\n}\n\n/**\n * Get traits for generating code to readback data from a component.\n * @param {ComponentDataType} dataType - The input component data type.\n * @returns A dictionary containing the respective `ReadbackTypedArray` and `shaderType`.\n */\nexport function getComponentReadbackTraits(dataType: ComponentDataType) {\n  switch (dataType) {\n    case 'ufloat':\n    case 'float':\n    case 'unorm':\n    case 'snorm':\n      return {\n        ReadbackTypedArray: Float32Array,\n        shaderType: 'f32' as const,\n      };\n    case 'uint':\n      return {\n        ReadbackTypedArray: Uint32Array,\n        shaderType: 'u32' as const,\n      };\n    case 'sint':\n      return {\n        ReadbackTypedArray: Int32Array,\n        shaderType: 'i32' as const,\n      };\n    default:\n      unreachable();\n  }\n}\n"],"mappings":"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"}