{"version":3,"file":"texture.js","names":["assert","getTextureCopyLayout","reifyExtent3D","createTextureFromTexelViews","t","texelViews","desc","length","every","e","format","width","height","depthOrArrayLayers","size","texture","createTextureTracked","usage","GPUTextureUsage","COPY_DST","mipLevelCount","commandEncoder","device","createCommandEncoder","stagingBuffers","mipLevel","bytesPerRow","rowsPerImage","mipSize","mipWidth","mipHeight","mipDepthOrArray","dimension","stagingBuffer","createBufferTracked","mappedAtCreation","GPUBufferUsage","COPY_SRC","push","writeTextureData","Uint8Array","getMappedRange","subrectOrigin","subrectSize","unmap","copyBufferToTexture","buffer","queue","submit","finish","forEach","value","destroy"],"sources":["../../../src/webgpu/util/texture.ts"],"sourcesContent":["import { assert } from '../../common/util/util.js';\nimport { GPUTest } from '../gpu_test.js';\n\nimport { getTextureCopyLayout } from './texture/layout.js';\nimport { TexelView } from './texture/texel_view.js';\nimport { reifyExtent3D } from './unions.js';\n\n/**\n * Creates a mipmapped texture where each mipmap level's (`i`) content is\n * from `texelViews[i]`.\n */\nexport function createTextureFromTexelViews(\n  t: GPUTest,\n  texelViews: TexelView[],\n  desc: Omit<GPUTextureDescriptor, 'format'>\n): GPUTexture {\n  // All texel views must be the same format for mipmaps.\n  assert(texelViews.length > 0 && texelViews.every(e => e.format === texelViews[0].format));\n  const format = texelViews[0].format;\n  const { width, height, depthOrArrayLayers } = reifyExtent3D(desc.size);\n\n  // Create the texture and then initialize each mipmap level separately.\n  const texture = t.createTextureTracked({\n    ...desc,\n    format: texelViews[0].format,\n    usage: desc.usage | GPUTextureUsage.COPY_DST,\n    mipLevelCount: texelViews.length,\n  });\n\n  // Copy the texel view into each mip level layer.\n  const commandEncoder = t.device.createCommandEncoder();\n  const stagingBuffers = [];\n  for (let mipLevel = 0; mipLevel < texelViews.length; mipLevel++) {\n    const {\n      bytesPerRow,\n      rowsPerImage,\n      mipSize: [mipWidth, mipHeight, mipDepthOrArray],\n    } = getTextureCopyLayout(format, desc.dimension ?? '2d', [width, height, depthOrArrayLayers], {\n      mipLevel,\n    });\n\n    // Create a staging buffer to upload the texture mip level contents.\n    const stagingBuffer = t.createBufferTracked({\n      mappedAtCreation: true,\n      size: bytesPerRow * mipHeight * mipDepthOrArray,\n      usage: GPUBufferUsage.COPY_SRC,\n    });\n    stagingBuffers.push(stagingBuffer);\n\n    // Write the texels into the staging buffer.\n    texelViews[mipLevel].writeTextureData(new Uint8Array(stagingBuffer.getMappedRange()), {\n      bytesPerRow,\n      rowsPerImage: mipHeight,\n      subrectOrigin: [0, 0, 0],\n      subrectSize: [mipWidth, mipHeight, mipDepthOrArray],\n    });\n    stagingBuffer.unmap();\n\n    // Copy from the staging buffer into the texture.\n    commandEncoder.copyBufferToTexture(\n      { buffer: stagingBuffer, bytesPerRow, rowsPerImage },\n      { texture, mipLevel },\n      [mipWidth, mipHeight, mipDepthOrArray]\n    );\n  }\n  t.device.queue.submit([commandEncoder.finish()]);\n\n  // Cleanup the staging buffers.\n  stagingBuffers.forEach(value => value.destroy());\n\n  return texture;\n}\n"],"mappings":";;GAAA,SAASA,MAAM,QAAQ,2BAA2B;AAGlD,SAASC,oBAAoB,QAAQ,qBAAqB;;AAE1D,SAASC,aAAa,QAAQ,aAAa;;AAE3C;AACA;AACA;AACA;AACA,OAAO,SAASC,2BAA2BA;AACzCC,CAAU;AACVC,UAAuB;AACvBC,IAA0C;AAC9B;EACZ;EACAN,MAAM,CAACK,UAAU,CAACE,MAAM,GAAG,CAAC,IAAIF,UAAU,CAACG,KAAK,CAAC,CAAAC,CAAC,KAAIA,CAAC,CAACC,MAAM,KAAKL,UAAU,CAAC,CAAC,CAAC,CAACK,MAAM,CAAC,CAAC;EACzF,MAAMA,MAAM,GAAGL,UAAU,CAAC,CAAC,CAAC,CAACK,MAAM;EACnC,MAAM,EAAEC,KAAK,EAAEC,MAAM,EAAEC,kBAAkB,CAAC,CAAC,GAAGX,aAAa,CAACI,IAAI,CAACQ,IAAI,CAAC;;EAEtE;EACA,MAAMC,OAAO,GAAGX,CAAC,CAACY,oBAAoB,CAAC;IACrC,GAAGV,IAAI;IACPI,MAAM,EAAEL,UAAU,CAAC,CAAC,CAAC,CAACK,MAAM;IAC5BO,KAAK,EAAEX,IAAI,CAACW,KAAK,GAAGC,eAAe,CAACC,QAAQ;IAC5CC,aAAa,EAAEf,UAAU,CAACE;EAC5B,CAAC,CAAC;;EAEF;EACA,MAAMc,cAAc,GAAGjB,CAAC,CAACkB,MAAM,CAACC,oBAAoB,CAAC,CAAC;EACtD,MAAMC,cAAc,GAAG,EAAE;EACzB,KAAK,IAAIC,QAAQ,GAAG,CAAC,EAAEA,QAAQ,GAAGpB,UAAU,CAACE,MAAM,EAAEkB,QAAQ,EAAE,EAAE;IAC/D,MAAM;MACJC,WAAW;MACXC,YAAY;MACZC,OAAO,EAAE,CAACC,QAAQ,EAAEC,SAAS,EAAEC,eAAe;IAChD,CAAC,GAAG9B,oBAAoB,CAACS,MAAM,EAAEJ,IAAI,CAAC0B,SAAS,IAAI,IAAI,EAAE,CAACrB,KAAK,EAAEC,MAAM,EAAEC,kBAAkB,CAAC,EAAE;MAC5FY;IACF,CAAC,CAAC;;IAEF;IACA,MAAMQ,aAAa,GAAG7B,CAAC,CAAC8B,mBAAmB,CAAC;MAC1CC,gBAAgB,EAAE,IAAI;MACtBrB,IAAI,EAAEY,WAAW,GAAGI,SAAS,GAAGC,eAAe;MAC/Cd,KAAK,EAAEmB,cAAc,CAACC;IACxB,CAAC,CAAC;IACFb,cAAc,CAACc,IAAI,CAACL,aAAa,CAAC;;IAElC;IACA5B,UAAU,CAACoB,QAAQ,CAAC,CAACc,gBAAgB,CAAC,IAAIC,UAAU,CAACP,aAAa,CAACQ,cAAc,CAAC,CAAC,CAAC,EAAE;MACpFf,WAAW;MACXC,YAAY,EAAEG,SAAS;MACvBY,aAAa,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MACxBC,WAAW,EAAE,CAACd,QAAQ,EAAEC,SAAS,EAAEC,eAAe;IACpD,CAAC,CAAC;IACFE,aAAa,CAACW,KAAK,CAAC,CAAC;;IAErB;IACAvB,cAAc,CAACwB,mBAAmB;MAChC,EAAEC,MAAM,EAAEb,aAAa,EAAEP,WAAW,EAAEC,YAAY,CAAC,CAAC;MACpD,EAAEZ,OAAO,EAAEU,QAAQ,CAAC,CAAC;MACrB,CAACI,QAAQ,EAAEC,SAAS,EAAEC,eAAe;IACvC,CAAC;EACH;EACA3B,CAAC,CAACkB,MAAM,CAACyB,KAAK,CAACC,MAAM,CAAC,CAAC3B,cAAc,CAAC4B,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEhD;EACAzB,cAAc,CAAC0B,OAAO,CAAC,CAAAC,KAAK,KAAIA,KAAK,CAACC,OAAO,CAAC,CAAC,CAAC;;EAEhD,OAAOrC,OAAO;AAChB"}