{"version":3,"file":"conversion.js","names":["Colors","assert","objectEquals","unreachable","Float16Array","kBit","cartesianProduct","clamp","correctlyRoundedF16","isFiniteF16","isSubnormalNumberF16","isSubnormalNumberF32","isSubnormalNumberF64","floatAsNormalizedInteger","float","bits","signed","max","Math","pow","round","normalizedIntegerAsFloat","integer","Number","isInteger","numbersApproximatelyEqual","a","b","maxDiff","isNaN","POSITIVE_INFINITY","NEGATIVE_INFINITY","abs","workingData","ArrayBuffer","workingDataU32","Uint32Array","workingDataU16","Uint16Array","workingDataU8","Uint8Array","workingDataF32","Float32Array","workingDataF16","workingDataI16","Int16Array","workingDataI32","Int32Array","workingDataI8","Int8Array","workingDataF64","Float64Array","workingDataView","DataView","float32ToFloatBits","n","signBits","exponentBits","mantissaBits","bias","setFloat32","getUint32","sign","isFinite","mantissaBitsToDiscard","exp","newBiasedExp","newMantissa","float32ToFloat16Bits","float16BitsToFloat32","float16Bits","floatBitsToNumber","kFloat16Format","kFloat32Format","kUFloat9e5Format","float32BitsToNumber","numberToFloat32Bits","number","fmt","kNonSignBits","kNonSignBitsMask","exponentAndMantissaBits","exponentMask","infinityOrNaN","mantissaMask","signBit","isNegative","NaN","f32BitsWithWrongBias","numberWithWrongBias","ufloatM9E5BitsToNumber","exponent","mantissa","numberToFloatBits","floatBitsToNormalULPFromZero","mask_sign","mask_expt","mask_mant","mask_rest","rest","subnormal_or_zero","infinity_or_nan","abs_ulp_from_zero","packRGB9E5UFloat","r","g","N","Emax","B","sharedexp_max","red_c","min","green_c","blue_c","max_c","exp_shared_p","floor","log2","max_s","exp_shared","scalar","red_s","green_s","blue_s","unpackRGB9E5UFloat","encoded","R","G","pack2x16float","x","y","generateU16s","contains_subnormals","n_f16s","some","n_u16s","map","f16","contains_poszero","u","positive","zero","contains_negzero","negative","push","undefined","results","Array","p","length","pack2x16snorm","generateI16","pack2x16unorm","generateU16","pack4x8snorm","vals","generateI8","idx","pack4x8unorm","generateU8","assertInIntegerRange","gammaCompress","gammaDecompress","float32ToUint32","f32","uint32ToFloat32","u32","float32ToInt32","uint32ToInt32","float16ToUint16","uint16ToFloat16","u16","float16ToInt16","ScalarType","constructor","kind","size","read","_size","toString","create","value","abstractFloat","f64","u8","i32","i16","i8","bool","VectorType","width","elementType","buf","offset","elements","i","Vector","fill","v","vectorTypes","Map","TypeVec","key","ty","get","set","MatrixType","cols","rows","_","c","Matrix","matrixTypes","TypeMat","valueFromBytes","workingDataOut","BYTES_PER_ELEMENT","TypeI32","TypeU32","TypeAbstractFloat","TypeF64","TypeF32","TypeI16","TypeU16","TypeF16","f16Bits","TypeI8","TypeU8","TypeBool","scalarType","numElementsOf","Error","elementsOf","Scalar","flat","scalarTypeOf","type","bits1","bits0","copyTo","buffer","wgsl","withPoint","str","indexOf","bold","Infinity","hex","padStart","isFloatValue","valueOf","scalarFromValue","workingDataArray","scalarFromBits","workingDataStoreArray","workingDataLoadArray","f32Bits","i32Bits","i16Bits","i8Bits","u32Bits","u16Bits","u8Bits","True","False","element","els","join","e","z","w","vec2","vec3","vec4","toVector","op","num_cols","num_rows","every","elem_type","j","flatMap","toMatrix","m","SerializedScalarKind","serializeScalarKind","s","writeU8","AbstractFloat","F64","F32","F16","U32","U16","U8","I32","I16","I8","Bool","deserializeScalarKind","readU8","SerializedValueKind","serializeValue","serializeScalar","writeF64","writeF32","writeF16","writeU32","writeU16","writeI32","writeI16","writeI8","writeBool","column","deserializeValue","deserializeScalar","readF64","readF32","readF16","readU32","readU16","readI32","readI16","readI8","readBool","valueKind","scalarKind","scalars","numCols","numRows","columns","isFloatType","isAbstractType","kAllFloatScalars","kAllFloatVector2","kAllFloatVector3","kAllFloatVector4","kAllFloatVectors","kAllFloatScalarsAndVectors","kAllIntegerScalarsAndVectors","kAllSignedIntegerScalarsAndVectors","kAllUnsignedIntegerScalarsAndVectors","kAllFloatAndIntegerScalarsAndVectors","kAllFloatAndSignedIntegerScalarsAndVectors","t"],"sources":["../../../src/webgpu/util/conversion.ts"],"sourcesContent":["import { Colors } from '../../common/util/colors.js';\nimport { ROArrayArray } from '../../common/util/types.js';\nimport { assert, objectEquals, TypedArrayBufferView, unreachable } from '../../common/util/util.js';\nimport { Float16Array } from '../../external/petamoriken/float16/float16.js';\n\nimport BinaryStream from './binary_stream.js';\nimport { kBit } from './constants.js';\nimport {\n  cartesianProduct,\n  clamp,\n  correctlyRoundedF16,\n  isFiniteF16,\n  isSubnormalNumberF16,\n  isSubnormalNumberF32,\n  isSubnormalNumberF64,\n} from './math.js';\n\n/**\n * Encodes a JS `number` into a \"normalized\" (unorm/snorm) integer representation with `bits` bits.\n * Input must be between -1 and 1 if signed, or 0 and 1 if unsigned.\n *\n * MAINTENANCE_TODO: See if performance of texel_data improves if this function is pre-specialized\n * for a particular `bits`/`signed`.\n */\nexport function floatAsNormalizedInteger(float: number, bits: number, signed: boolean): number {\n  if (signed) {\n    assert(float >= -1 && float <= 1, () => `${float} out of bounds of snorm`);\n    const max = Math.pow(2, bits - 1) - 1;\n    return Math.round(float * max);\n  } else {\n    assert(float >= 0 && float <= 1, () => `${float} out of bounds of unorm`);\n    const max = Math.pow(2, bits) - 1;\n    return Math.round(float * max);\n  }\n}\n\n/**\n * Decodes a JS `number` from a \"normalized\" (unorm/snorm) integer representation with `bits` bits.\n * Input must be an integer in the range of the specified unorm/snorm type.\n */\nexport function normalizedIntegerAsFloat(integer: number, bits: number, signed: boolean): number {\n  assert(Number.isInteger(integer));\n  if (signed) {\n    const max = Math.pow(2, bits - 1) - 1;\n    assert(integer >= -max - 1 && integer <= max);\n    if (integer === -max - 1) {\n      integer = -max;\n    }\n    return integer / max;\n  } else {\n    const max = Math.pow(2, bits) - 1;\n    assert(integer >= 0 && integer <= max);\n    return integer / max;\n  }\n}\n\n/**\n * Compares 2 numbers. Returns true if their absolute value is\n * less than or equal to maxDiff or if they are both NaN or the\n * same sign infinity.\n */\nexport function numbersApproximatelyEqual(a: number, b: number, maxDiff: number = 0) {\n  return (\n    (Number.isNaN(a) && Number.isNaN(b)) ||\n    (a === Number.POSITIVE_INFINITY && b === Number.POSITIVE_INFINITY) ||\n    (a === Number.NEGATIVE_INFINITY && b === Number.NEGATIVE_INFINITY) ||\n    Math.abs(a - b) <= maxDiff\n  );\n}\n\n/**\n * Once-allocated ArrayBuffer/views to avoid overhead of allocation when converting between numeric formats\n *\n * workingData* is shared between multiple functions in this file, so to avoid re-entrancy problems, make sure in\n * functions that use it that they don't call themselves or other functions that use workingData*.\n */\nconst workingData = new ArrayBuffer(8);\nconst workingDataU32 = new Uint32Array(workingData);\nconst workingDataU16 = new Uint16Array(workingData);\nconst workingDataU8 = new Uint8Array(workingData);\nconst workingDataF32 = new Float32Array(workingData);\nconst workingDataF16 = new Float16Array(workingData);\nconst workingDataI16 = new Int16Array(workingData);\nconst workingDataI32 = new Int32Array(workingData);\nconst workingDataI8 = new Int8Array(workingData);\nconst workingDataF64 = new Float64Array(workingData);\nconst workingDataView = new DataView(workingData);\n\n/**\n * Encodes a JS `number` into an IEEE754 floating point number with the specified number of\n * sign, exponent, mantissa bits, and exponent bias.\n * Returns the result as an integer-valued JS `number`.\n *\n * Does not handle clamping, overflow, or denormal inputs.\n * On underflow (result is subnormal), rounds to (signed) zero.\n *\n * MAINTENANCE_TODO: Replace usages of this with numberToFloatBits.\n */\nexport function float32ToFloatBits(\n  n: number,\n  signBits: 0 | 1,\n  exponentBits: number,\n  mantissaBits: number,\n  bias: number\n): number {\n  assert(exponentBits <= 8);\n  assert(mantissaBits <= 23);\n\n  if (Number.isNaN(n)) {\n    // NaN = all exponent bits true, 1 or more mantissia bits true\n    return (((1 << exponentBits) - 1) << mantissaBits) | ((1 << mantissaBits) - 1);\n  }\n\n  workingDataView.setFloat32(0, n, true);\n  const bits = workingDataView.getUint32(0, true);\n  // bits (32): seeeeeeeefffffffffffffffffffffff\n\n  // 0 or 1\n  const sign = (bits >> 31) & signBits;\n\n  if (n === 0) {\n    if (sign === 1) {\n      // Handle negative zero.\n      return 1 << (exponentBits + mantissaBits);\n    }\n    return 0;\n  }\n\n  if (signBits === 0) {\n    assert(n >= 0);\n  }\n\n  if (!Number.isFinite(n)) {\n    // Infinity = all exponent bits true, no mantissa bits true\n    // plus the sign bit.\n    return (\n      (((1 << exponentBits) - 1) << mantissaBits) | (n < 0 ? 2 ** (exponentBits + mantissaBits) : 0)\n    );\n  }\n\n  const mantissaBitsToDiscard = 23 - mantissaBits;\n\n  // >> to remove mantissa, & to remove sign, - 127 to remove bias.\n  const exp = ((bits >> 23) & 0xff) - 127;\n\n  // Convert to the new biased exponent.\n  const newBiasedExp = bias + exp;\n  assert(newBiasedExp < 1 << exponentBits, () => `input number ${n} overflows target type`);\n\n  if (newBiasedExp <= 0) {\n    // Result is subnormal or zero. Round to (signed) zero.\n    return sign << (exponentBits + mantissaBits);\n  } else {\n    // Mask only the mantissa, and discard the lower bits.\n    const newMantissa = (bits & 0x7fffff) >> mantissaBitsToDiscard;\n    return (sign << (exponentBits + mantissaBits)) | (newBiasedExp << mantissaBits) | newMantissa;\n  }\n}\n\n/**\n * Encodes a JS `number` into an IEEE754 16 bit floating point number.\n * Returns the result as an integer-valued JS `number`.\n *\n * Does not handle clamping, overflow, or denormal inputs.\n * On underflow (result is subnormal), rounds to (signed) zero.\n */\nexport function float32ToFloat16Bits(n: number) {\n  return float32ToFloatBits(n, 1, 5, 10, 15);\n}\n\n/**\n * Decodes an IEEE754 16 bit floating point number into a JS `number` and returns.\n */\nexport function float16BitsToFloat32(float16Bits: number): number {\n  return floatBitsToNumber(float16Bits, kFloat16Format);\n}\n\ntype FloatFormat = { signed: 0 | 1; exponentBits: number; mantissaBits: number; bias: number };\n\n/** FloatFormat defining IEEE754 32-bit float. */\nexport const kFloat32Format = { signed: 1, exponentBits: 8, mantissaBits: 23, bias: 127 } as const;\n/** FloatFormat defining IEEE754 16-bit float. */\nexport const kFloat16Format = { signed: 1, exponentBits: 5, mantissaBits: 10, bias: 15 } as const;\n/** FloatFormat for 9 bit mantissa, 5 bit exponent unsigned float */\nexport const kUFloat9e5Format = { signed: 0, exponentBits: 5, mantissaBits: 9, bias: 15 } as const;\n\n/** Bitcast u32 (represented as integer Number) to f32 (represented as floating-point Number). */\nexport function float32BitsToNumber(bits: number): number {\n  workingDataU32[0] = bits;\n  return workingDataF32[0];\n}\n/** Bitcast f32 (represented as floating-point Number) to u32 (represented as integer Number). */\nexport function numberToFloat32Bits(number: number): number {\n  workingDataF32[0] = number;\n  return workingDataU32[0];\n}\n\n/**\n * Decodes an IEEE754 float with the supplied format specification into a JS number.\n *\n * The format MUST be no larger than a 32-bit float.\n */\nexport function floatBitsToNumber(bits: number, fmt: FloatFormat): number {\n  // Pad the provided bits out to f32, then convert to a `number` with the wrong bias.\n  // E.g. for f16 to f32:\n  // - f16: S    EEEEE MMMMMMMMMM\n  //        ^ 000^^^^^ ^^^^^^^^^^0000000000000\n  // - f32: S eeeEEEEE MMMMMMMMMMmmmmmmmmmmmmm\n\n  const kNonSignBits = fmt.exponentBits + fmt.mantissaBits;\n  const kNonSignBitsMask = (1 << kNonSignBits) - 1;\n  const exponentAndMantissaBits = bits & kNonSignBitsMask;\n  const exponentMask = ((1 << fmt.exponentBits) - 1) << fmt.mantissaBits;\n  const infinityOrNaN = (bits & exponentMask) === exponentMask;\n  if (infinityOrNaN) {\n    const mantissaMask = (1 << fmt.mantissaBits) - 1;\n    const signBit = 2 ** kNonSignBits;\n    const isNegative = (bits & signBit) !== 0;\n    return bits & mantissaMask\n      ? Number.NaN\n      : isNegative\n      ? Number.NEGATIVE_INFINITY\n      : Number.POSITIVE_INFINITY;\n  }\n  let f32BitsWithWrongBias =\n    exponentAndMantissaBits << (kFloat32Format.mantissaBits - fmt.mantissaBits);\n  f32BitsWithWrongBias |= (bits << (31 - kNonSignBits)) & 0x8000_0000;\n  const numberWithWrongBias = float32BitsToNumber(f32BitsWithWrongBias);\n  return numberWithWrongBias * 2 ** (kFloat32Format.bias - fmt.bias);\n}\n\n/**\n * Convert ufloat9e5 bits from rgb9e5ufloat to a JS number\n *\n * The difference between `floatBitsToNumber` and `ufloatBitsToNumber`\n * is that the latter doesn't use an implicit leading bit:\n *\n * floatBitsToNumber      = 2^(exponent - bias) * (1 + mantissa / 2 ^ numMantissaBits)\n * ufloatM9E5BitsToNumber = 2^(exponent - bias) * (mantissa / 2 ^ numMantissaBits)\n *                        = 2^(exponent - bias - numMantissaBits) * mantissa\n */\nexport function ufloatM9E5BitsToNumber(bits: number, fmt: FloatFormat): number {\n  const exponent = bits >> fmt.mantissaBits;\n  const mantissaMask = (1 << fmt.mantissaBits) - 1;\n  const mantissa = bits & mantissaMask;\n  return mantissa * 2 ** (exponent - fmt.bias - fmt.mantissaBits);\n}\n\n/**\n * Encodes a JS `number` into an IEEE754 floating point number with the specified format.\n * Returns the result as an integer-valued JS `number`.\n *\n * Does not handle clamping, overflow, or denormal inputs.\n * On underflow (result is subnormal), rounds to (signed) zero.\n */\nexport function numberToFloatBits(number: number, fmt: FloatFormat): number {\n  return float32ToFloatBits(number, fmt.signed, fmt.exponentBits, fmt.mantissaBits, fmt.bias);\n}\n\n/**\n * Given a floating point number (as an integer representing its bits), computes how many ULPs it is\n * from zero.\n *\n * Subnormal numbers are skipped, so that 0 is one ULP from the minimum normal number.\n * Subnormal values are flushed to 0.\n * Positive and negative 0 are both considered to be 0 ULPs from 0.\n */\nexport function floatBitsToNormalULPFromZero(bits: number, fmt: FloatFormat): number {\n  const mask_sign = fmt.signed << (fmt.exponentBits + fmt.mantissaBits);\n  const mask_expt = ((1 << fmt.exponentBits) - 1) << fmt.mantissaBits;\n  const mask_mant = (1 << fmt.mantissaBits) - 1;\n  const mask_rest = mask_expt | mask_mant;\n\n  assert(fmt.exponentBits + fmt.mantissaBits <= 31);\n\n  const sign = bits & mask_sign ? -1 : 1;\n  const rest = bits & mask_rest;\n  const subnormal_or_zero = (bits & mask_expt) === 0;\n  const infinity_or_nan = (bits & mask_expt) === mask_expt;\n  assert(!infinity_or_nan, 'no ulp representation for infinity/nan');\n\n  // The first normal number is mask_mant+1, so subtract mask_mant to make min_normal - zero = 1ULP.\n  const abs_ulp_from_zero = subnormal_or_zero ? 0 : rest - mask_mant;\n  return sign * abs_ulp_from_zero;\n}\n\n/**\n * Encodes three JS `number` values into RGB9E5, returned as an integer-valued JS `number`.\n *\n * RGB9E5 represents three partial-precision floating-point numbers encoded into a single 32-bit\n * value all sharing the same 5-bit exponent.\n * There is no sign bit, and there is a shared 5-bit biased (15) exponent and a 9-bit\n * mantissa for each channel. The mantissa does NOT have an implicit leading \"1.\",\n * and instead has an implicit leading \"0.\".\n *\n * @see https://registry.khronos.org/OpenGL/extensions/EXT/EXT_texture_shared_exponent.txt\n */\nexport function packRGB9E5UFloat(r: number, g: number, b: number): number {\n  const N = 9; // number of mantissa bits\n  const Emax = 31; // max exponent\n  const B = 15; // exponent bias\n  const sharedexp_max = (((1 << N) - 1) / (1 << N)) * 2 ** (Emax - B);\n  const red_c = clamp(r, { min: 0, max: sharedexp_max });\n  const green_c = clamp(g, { min: 0, max: sharedexp_max });\n  const blue_c = clamp(b, { min: 0, max: sharedexp_max });\n  const max_c = Math.max(red_c, green_c, blue_c);\n  const exp_shared_p = Math.max(-B - 1, Math.floor(Math.log2(max_c))) + 1 + B;\n  const max_s = Math.floor(max_c / 2 ** (exp_shared_p - B - N) + 0.5);\n  const exp_shared = max_s === 1 << N ? exp_shared_p + 1 : exp_shared_p;\n  const scalar = 1 / 2 ** (exp_shared - B - N);\n  const red_s = Math.floor(red_c * scalar + 0.5);\n  const green_s = Math.floor(green_c * scalar + 0.5);\n  const blue_s = Math.floor(blue_c * scalar + 0.5);\n  assert(red_s >= 0 && red_s <= 0b111111111);\n  assert(green_s >= 0 && green_s <= 0b111111111);\n  assert(blue_s >= 0 && blue_s <= 0b111111111);\n  assert(exp_shared >= 0 && exp_shared <= 0b11111);\n  return ((exp_shared << 27) | (blue_s << 18) | (green_s << 9) | red_s) >>> 0;\n}\n\n/**\n * Decodes a RGB9E5 encoded color.\n * @see packRGB9E5UFloat\n */\nexport function unpackRGB9E5UFloat(encoded: number): { R: number; G: number; B: number } {\n  const N = 9; // number of mantissa bits\n  const B = 15; // exponent bias\n  const red_s = (encoded >>> 0) & 0b111111111;\n  const green_s = (encoded >>> 9) & 0b111111111;\n  const blue_s = (encoded >>> 18) & 0b111111111;\n  const exp_shared = (encoded >>> 27) & 0b11111;\n  const exp = Math.pow(2, exp_shared - B - N);\n  return {\n    R: exp * red_s,\n    G: exp * green_s,\n    B: exp * blue_s,\n  };\n}\n\n/**\n * Quantizes two f32s to f16 and then packs them in a u32\n *\n * This should implement the same behaviour as the builtin `pack2x16float` from\n * WGSL.\n *\n * Caller is responsible to ensuring inputs are f32s\n *\n * @param x first f32 to be packed\n * @param y second f32 to be packed\n * @returns an array of possible results for pack2x16float. Elements are either\n *          a number or undefined.\n *          undefined indicates that any value is valid, since the input went\n *          out of bounds.\n */\nexport function pack2x16float(x: number, y: number): (number | undefined)[] {\n  // Generates all possible valid u16 bit fields for a given f32 to f16 conversion.\n  // Assumes FTZ for both the f32 and f16 value is allowed.\n  const generateU16s = (n: number): readonly number[] => {\n    let contains_subnormals = isSubnormalNumberF32(n);\n    const n_f16s = correctlyRoundedF16(n);\n    contains_subnormals ||= n_f16s.some(isSubnormalNumberF16);\n\n    const n_u16s = n_f16s.map(f16 => {\n      workingDataF16[0] = f16;\n      return workingDataU16[0];\n    });\n\n    const contains_poszero = n_u16s.some(u => u === kBit.f16.positive.zero);\n    const contains_negzero = n_u16s.some(u => u === kBit.f16.negative.zero);\n    if (!contains_negzero && (contains_poszero || contains_subnormals)) {\n      n_u16s.push(kBit.f16.negative.zero);\n    }\n\n    if (!contains_poszero && (contains_negzero || contains_subnormals)) {\n      n_u16s.push(kBit.f16.positive.zero);\n    }\n\n    return n_u16s;\n  };\n\n  if (!isFiniteF16(x) || !isFiniteF16(y)) {\n    // This indicates any value is valid, so it isn't worth bothering\n    // calculating the more restrictive possibilities.\n    return [undefined];\n  }\n\n  const results = new Array<number>();\n  for (const p of cartesianProduct(generateU16s(x), generateU16s(y))) {\n    assert(p.length === 2, 'cartesianProduct of 2 arrays returned an entry with not 2 elements');\n    workingDataU16[0] = p[0];\n    workingDataU16[1] = p[1];\n    results.push(workingDataU32[0]);\n  }\n\n  return results;\n}\n\n/**\n * Converts two normalized f32s to i16s and then packs them in a u32\n *\n * This should implement the same behaviour as the builtin `pack2x16snorm` from\n * WGSL.\n *\n * Caller is responsible to ensuring inputs are normalized f32s\n *\n * @param x first f32 to be packed\n * @param y second f32 to be packed\n * @returns a number that is expected result of pack2x16snorm.\n */\nexport function pack2x16snorm(x: number, y: number): number {\n  // Converts f32 to i16 via the pack2x16snorm formula.\n  // FTZ is not explicitly handled, because all subnormals will produce a value\n  // between 0 and 1, but significantly away from the edges, so floor goes to 0.\n  const generateI16 = (n: number): number => {\n    return Math.floor(0.5 + 32767 * Math.min(1, Math.max(-1, n)));\n  };\n\n  workingDataI16[0] = generateI16(x);\n  workingDataI16[1] = generateI16(y);\n\n  return workingDataU32[0];\n}\n\n/**\n * Converts two normalized f32s to u16s and then packs them in a u32\n *\n * This should implement the same behaviour as the builtin `pack2x16unorm` from\n * WGSL.\n *\n * Caller is responsible to ensuring inputs are normalized f32s\n *\n * @param x first f32 to be packed\n * @param y second f32 to be packed\n * @returns an number that is expected result of pack2x16unorm.\n */\nexport function pack2x16unorm(x: number, y: number): number {\n  // Converts f32 to u16 via the pack2x16unorm formula.\n  // FTZ is not explicitly handled, because all subnormals will produce a value\n  // between 0.5 and much less than 1, so floor goes to 0.\n  const generateU16 = (n: number): number => {\n    return Math.floor(0.5 + 65535 * Math.min(1, Math.max(0, n)));\n  };\n\n  workingDataU16[0] = generateU16(x);\n  workingDataU16[1] = generateU16(y);\n\n  return workingDataU32[0];\n}\n\n/**\n * Converts four normalized f32s to i8s and then packs them in a u32\n *\n * This should implement the same behaviour as the builtin `pack4x8snorm` from\n * WGSL.\n *\n * Caller is responsible to ensuring inputs are normalized f32s\n *\n * @param vals four f32s to be packed\n * @returns a number that is expected result of pack4x8usorm.\n */\nexport function pack4x8snorm(...vals: [number, number, number, number]): number {\n  // Converts f32 to u8 via the pack4x8snorm formula.\n  // FTZ is not explicitly handled, because all subnormals will produce a value\n  // between 0 and 1, so floor goes to 0.\n  const generateI8 = (n: number): number => {\n    return Math.floor(0.5 + 127 * Math.min(1, Math.max(-1, n)));\n  };\n\n  for (const idx in vals) {\n    workingDataI8[idx] = generateI8(vals[idx]);\n  }\n\n  return workingDataU32[0];\n}\n\n/**\n * Converts four normalized f32s to u8s and then packs them in a u32\n *\n * This should implement the same behaviour as the builtin `pack4x8unorm` from\n * WGSL.\n *\n * Caller is responsible to ensuring inputs are normalized f32s\n *\n * @param vals four f32s to be packed\n * @returns a number that is expected result of pack4x8unorm.\n */\nexport function pack4x8unorm(...vals: [number, number, number, number]): number {\n  // Converts f32 to u8 via the pack4x8unorm formula.\n  // FTZ is not explicitly handled, because all subnormals will produce a value\n  // between 0.5 and much less than 1, so floor goes to 0.\n  const generateU8 = (n: number): number => {\n    return Math.floor(0.5 + 255 * Math.min(1, Math.max(0, n)));\n  };\n\n  for (const idx in vals) {\n    workingDataU8[idx] = generateU8(vals[idx]);\n  }\n\n  return workingDataU32[0];\n}\n\n/**\n * Asserts that a number is within the representable (inclusive) of the integer type with the\n * specified number of bits and signedness.\n *\n * MAINTENANCE_TODO: Assert isInteger? Then this function \"asserts that a number is representable\"\n * by the type.\n */\nexport function assertInIntegerRange(n: number, bits: number, signed: boolean): void {\n  if (signed) {\n    const min = -Math.pow(2, bits - 1);\n    const max = Math.pow(2, bits - 1) - 1;\n    assert(n >= min && n <= max);\n  } else {\n    const max = Math.pow(2, bits) - 1;\n    assert(n >= 0 && n <= max);\n  }\n}\n\n/**\n * Converts a linear value into a \"gamma\"-encoded value using the sRGB-clamped transfer function.\n */\nexport function gammaCompress(n: number): number {\n  n = n <= 0.0031308 ? (323 * n) / 25 : (211 * Math.pow(n, 5 / 12) - 11) / 200;\n  return clamp(n, { min: 0, max: 1 });\n}\n\n/**\n * Converts a \"gamma\"-encoded value into a linear value using the sRGB-clamped transfer function.\n */\nexport function gammaDecompress(n: number): number {\n  n = n <= 0.04045 ? (n * 25) / 323 : Math.pow((200 * n + 11) / 211, 12 / 5);\n  return clamp(n, { min: 0, max: 1 });\n}\n\n/** Converts a 32-bit float value to a 32-bit unsigned integer value */\nexport function float32ToUint32(f32: number): number {\n  workingDataF32[0] = f32;\n  return workingDataU32[0];\n}\n\n/** Converts a 32-bit unsigned integer value to a 32-bit float value */\nexport function uint32ToFloat32(u32: number): number {\n  workingDataU32[0] = u32;\n  return workingDataF32[0];\n}\n\n/** Converts a 32-bit float value to a 32-bit signed integer value */\nexport function float32ToInt32(f32: number): number {\n  workingDataF32[0] = f32;\n  return workingDataI32[0];\n}\n\n/** Converts a 32-bit unsigned integer value to a 32-bit signed integer value */\nexport function uint32ToInt32(u32: number): number {\n  workingDataU32[0] = u32;\n  return workingDataI32[0];\n}\n\n/** Converts a 16-bit float value to a 16-bit unsigned integer value */\nexport function float16ToUint16(f16: number): number {\n  workingDataF16[0] = f16;\n  return workingDataU16[0];\n}\n\n/** Converts a 16-bit unsigned integer value to a 16-bit float value */\nexport function uint16ToFloat16(u16: number): number {\n  workingDataU16[0] = u16;\n  return workingDataF16[0];\n}\n\n/** Converts a 16-bit float value to a 16-bit signed integer value */\nexport function float16ToInt16(f16: number): number {\n  workingDataF16[0] = f16;\n  return workingDataI16[0];\n}\n\n/** A type of number representable by Scalar. */\nexport type ScalarKind =\n  | 'abstract-float'\n  | 'f64'\n  | 'f32'\n  | 'f16'\n  | 'u32'\n  | 'u16'\n  | 'u8'\n  | 'i32'\n  | 'i16'\n  | 'i8'\n  | 'bool';\n\n/** ScalarType describes the type of WGSL Scalar. */\nexport class ScalarType {\n  readonly kind: ScalarKind; // The named type\n  readonly _size: number; // In bytes\n  readonly read: (buf: Uint8Array, offset: number) => Scalar; // reads a scalar from a buffer\n\n  constructor(kind: ScalarKind, size: number, read: (buf: Uint8Array, offset: number) => Scalar) {\n    this.kind = kind;\n    this._size = size;\n    this.read = read;\n  }\n\n  public toString(): string {\n    return this.kind;\n  }\n\n  public get size(): number {\n    return this._size;\n  }\n\n  /** Constructs a Scalar of this type with `value` */\n  public create(value: number): Scalar {\n    switch (this.kind) {\n      case 'abstract-float':\n        return abstractFloat(value);\n      case 'f64':\n        return f64(value);\n      case 'f32':\n        return f32(value);\n      case 'f16':\n        return f16(value);\n      case 'u32':\n        return u32(value);\n      case 'u16':\n        return u16(value);\n      case 'u8':\n        return u8(value);\n      case 'i32':\n        return i32(value);\n      case 'i16':\n        return i16(value);\n      case 'i8':\n        return i8(value);\n      case 'bool':\n        return bool(value !== 0);\n    }\n  }\n}\n\n/** VectorType describes the type of WGSL Vector. */\nexport class VectorType {\n  readonly width: number; // Number of elements in the vector\n  readonly elementType: ScalarType; // Element type\n\n  constructor(width: number, elementType: ScalarType) {\n    this.width = width;\n    this.elementType = elementType;\n  }\n\n  /**\n   * @returns a vector constructed from the values read from the buffer at the\n   * given byte offset\n   */\n  public read(buf: Uint8Array, offset: number): Vector {\n    const elements: Array<Scalar> = [];\n    for (let i = 0; i < this.width; i++) {\n      elements[i] = this.elementType.read(buf, offset);\n      offset += this.elementType.size;\n    }\n    return new Vector(elements);\n  }\n\n  public toString(): string {\n    return `vec${this.width}<${this.elementType}>`;\n  }\n\n  public get size(): number {\n    return this.elementType.size * this.width;\n  }\n\n  /** Constructs a Vector of this type with the given values */\n  public create(value: number | readonly number[]): Vector {\n    if (value instanceof Array) {\n      assert(value.length === this.width);\n    } else {\n      value = Array(this.width).fill(value);\n    }\n    return new Vector(value.map(v => this.elementType.create(v)));\n  }\n}\n\n// Maps a string representation of a vector type to vector type.\nconst vectorTypes = new Map<string, VectorType>();\n\nexport function TypeVec(width: number, elementType: ScalarType): VectorType {\n  const key = `${elementType.toString()} ${width}}`;\n  let ty = vectorTypes.get(key);\n  if (ty !== undefined) {\n    return ty;\n  }\n  ty = new VectorType(width, elementType);\n  vectorTypes.set(key, ty);\n  return ty;\n}\n\n/** MatrixType describes the type of WGSL Matrix. */\nexport class MatrixType {\n  readonly cols: number; // Number of columns in the Matrix\n  readonly rows: number; // Number of elements per column in the Matrix\n  readonly elementType: ScalarType; // Element type\n\n  constructor(cols: number, rows: number, elementType: ScalarType) {\n    this.cols = cols;\n    this.rows = rows;\n    assert(\n      elementType.kind === 'f32' ||\n        elementType.kind === 'f16' ||\n        elementType.kind === 'abstract-float',\n      \"MatrixType can only have elementType of 'f32' or 'f16' or 'abstract-float'\"\n    );\n    this.elementType = elementType;\n  }\n\n  /**\n   * @returns a Matrix constructed from the values read from the buffer at the\n   * given byte offset\n   */\n  public read(buf: Uint8Array, offset: number): Matrix {\n    const elements: Scalar[][] = [...Array(this.cols)].map(_ => [...Array(this.rows)]);\n    for (let c = 0; c < this.cols; c++) {\n      for (let r = 0; r < this.rows; r++) {\n        elements[c][r] = this.elementType.read(buf, offset);\n        offset += this.elementType.size;\n      }\n\n      // vec3 have one padding element, so need to skip in matrices\n      if (this.rows === 3) {\n        offset += this.elementType.size;\n      }\n    }\n    return new Matrix(elements);\n  }\n\n  public toString(): string {\n    return `mat${this.cols}x${this.rows}<${this.elementType}>`;\n  }\n}\n\n// Maps a string representation of a Matrix type to Matrix type.\nconst matrixTypes = new Map<string, MatrixType>();\n\nexport function TypeMat(cols: number, rows: number, elementType: ScalarType): MatrixType {\n  const key = `${elementType.toString()} ${cols} ${rows}`;\n  let ty = matrixTypes.get(key);\n  if (ty !== undefined) {\n    return ty;\n  }\n  ty = new MatrixType(cols, rows, elementType);\n  matrixTypes.set(key, ty);\n  return ty;\n}\n\n/** Type is a ScalarType, VectorType, or MatrixType. */\nexport type Type = ScalarType | VectorType | MatrixType;\n\n/** Copy bytes from `buf` at `offset` into the working data, then read it out using `workingDataOut` */\nfunction valueFromBytes(workingDataOut: TypedArrayBufferView, buf: Uint8Array, offset: number) {\n  for (let i = 0; i < workingDataOut.BYTES_PER_ELEMENT; ++i) {\n    workingDataU8[i] = buf[offset + i];\n  }\n  return workingDataOut[0];\n}\n\nexport const TypeI32 = new ScalarType('i32', 4, (buf: Uint8Array, offset: number) =>\n  i32(valueFromBytes(workingDataI32, buf, offset))\n);\nexport const TypeU32 = new ScalarType('u32', 4, (buf: Uint8Array, offset: number) =>\n  u32(valueFromBytes(workingDataU32, buf, offset))\n);\nexport const TypeAbstractFloat = new ScalarType(\n  'abstract-float',\n  8,\n  (buf: Uint8Array, offset: number) => abstractFloat(valueFromBytes(workingDataF64, buf, offset))\n);\nexport const TypeF64 = new ScalarType('f64', 8, (buf: Uint8Array, offset: number) =>\n  f64(valueFromBytes(workingDataF64, buf, offset))\n);\nexport const TypeF32 = new ScalarType('f32', 4, (buf: Uint8Array, offset: number) =>\n  f32(valueFromBytes(workingDataF32, buf, offset))\n);\nexport const TypeI16 = new ScalarType('i16', 2, (buf: Uint8Array, offset: number) =>\n  i16(valueFromBytes(workingDataI16, buf, offset))\n);\nexport const TypeU16 = new ScalarType('u16', 2, (buf: Uint8Array, offset: number) =>\n  u16(valueFromBytes(workingDataU16, buf, offset))\n);\nexport const TypeF16 = new ScalarType('f16', 2, (buf: Uint8Array, offset: number) =>\n  f16Bits(valueFromBytes(workingDataU16, buf, offset))\n);\nexport const TypeI8 = new ScalarType('i8', 1, (buf: Uint8Array, offset: number) =>\n  i8(valueFromBytes(workingDataI8, buf, offset))\n);\nexport const TypeU8 = new ScalarType('u8', 1, (buf: Uint8Array, offset: number) =>\n  u8(valueFromBytes(workingDataU8, buf, offset))\n);\nexport const TypeBool = new ScalarType('bool', 4, (buf: Uint8Array, offset: number) =>\n  bool(valueFromBytes(workingDataU32, buf, offset) !== 0)\n);\n\n/** @returns the ScalarType from the ScalarKind */\nexport function scalarType(kind: ScalarKind): ScalarType {\n  switch (kind) {\n    case 'abstract-float':\n      return TypeAbstractFloat;\n    case 'f64':\n      return TypeF64;\n    case 'f32':\n      return TypeF32;\n    case 'f16':\n      return TypeF16;\n    case 'u32':\n      return TypeU32;\n    case 'u16':\n      return TypeU16;\n    case 'u8':\n      return TypeU8;\n    case 'i32':\n      return TypeI32;\n    case 'i16':\n      return TypeI16;\n    case 'i8':\n      return TypeI8;\n    case 'bool':\n      return TypeBool;\n  }\n}\n\n/** @returns the number of scalar (element) types of the given Type */\nexport function numElementsOf(ty: Type): number {\n  if (ty instanceof ScalarType) {\n    return 1;\n  }\n  if (ty instanceof VectorType) {\n    return ty.width;\n  }\n  if (ty instanceof MatrixType) {\n    return ty.cols * ty.rows;\n  }\n  throw new Error(`unhandled type ${ty}`);\n}\n\n/** @returns the scalar elements of the given Value */\nexport function elementsOf(value: Value): Scalar[] {\n  if (value instanceof Scalar) {\n    return [value];\n  }\n  if (value instanceof Vector) {\n    return value.elements;\n  }\n  if (value instanceof Matrix) {\n    return value.elements.flat();\n  }\n  throw new Error(`unhandled value ${value}`);\n}\n\n/** @returns the scalar (element) type of the given Type */\nexport function scalarTypeOf(ty: Type): ScalarType {\n  if (ty instanceof ScalarType) {\n    return ty;\n  }\n  if (ty instanceof VectorType) {\n    return ty.elementType;\n  }\n  if (ty instanceof MatrixType) {\n    return ty.elementType;\n  }\n  throw new Error(`unhandled type ${ty}`);\n}\n\n/** ScalarValue is the JS type that can be held by a Scalar */\ntype ScalarValue = boolean | number;\n\n/** Class that encapsulates a single scalar value of various types. */\nexport class Scalar {\n  readonly value: ScalarValue; // The scalar value\n  readonly type: ScalarType; // The type of the scalar\n\n  // The scalar value, packed in one or two 32-bit unsigned integers.\n  // Whether or not the bits1 is used depends on `this.type.size`.\n  readonly bits1: number;\n  readonly bits0: number;\n\n  public constructor(type: ScalarType, value: ScalarValue, bits1: number, bits0: number) {\n    this.value = value;\n    this.type = type;\n    this.bits1 = bits1;\n    this.bits0 = bits0;\n  }\n\n  /**\n   * Copies the scalar value to the buffer at the provided byte offset.\n   * @param buffer the destination buffer\n   * @param offset the offset in buffer, in units of `buffer`\n   */\n  public copyTo(buffer: TypedArrayBufferView, offset: number) {\n    assert(this.type.kind !== 'f64', `Copying f64 values to/from buffers is not defined`);\n    workingDataU32[1] = this.bits1;\n    workingDataU32[0] = this.bits0;\n    for (let i = 0; i < this.type.size; i++) {\n      buffer[offset + i] = workingDataU8[i];\n    }\n  }\n\n  /**\n   * @returns the WGSL representation of this scalar value\n   */\n  public wgsl(): string {\n    const withPoint = (x: number) => {\n      const str = `${x}`;\n      return str.indexOf('.') > 0 || str.indexOf('e') > 0 ? str : `${str}.0`;\n    };\n    if (isFinite(this.value as number)) {\n      switch (this.type.kind) {\n        case 'abstract-float':\n          return `${withPoint(this.value as number)}`;\n        case 'f64':\n          return `${withPoint(this.value as number)}`;\n        case 'f32':\n          return `${withPoint(this.value as number)}f`;\n        case 'f16':\n          return `${withPoint(this.value as number)}h`;\n        case 'u32':\n          return `${this.value}u`;\n        case 'i32':\n          return `i32(${this.value})`;\n        case 'bool':\n          return `${this.value}`;\n      }\n    }\n    throw new Error(\n      `scalar of value ${this.value} and type ${this.type} has no WGSL representation`\n    );\n  }\n\n  public toString(): string {\n    if (this.type.kind === 'bool') {\n      return Colors.bold(this.value.toString());\n    }\n    switch (this.value) {\n      case Infinity:\n      case -Infinity:\n        return Colors.bold(this.value.toString());\n      default: {\n        workingDataU32[1] = this.bits1;\n        workingDataU32[0] = this.bits0;\n        let hex = '';\n        for (let i = 0; i < this.type.size; ++i) {\n          hex = workingDataU8[i].toString(16).padStart(2, '0') + hex;\n        }\n        const n = this.value as Number;\n        if (n !== null && isFloatValue(this)) {\n          let str = this.value.toString();\n          str = str.indexOf('.') > 0 || str.indexOf('e') > 0 ? str : `${str}.0`;\n          switch (this.type.kind) {\n            case 'abstract-float':\n              return isSubnormalNumberF64(n.valueOf())\n                ? `${Colors.bold(str)} (0x${hex} subnormal)`\n                : `${Colors.bold(str)} (0x${hex})`;\n            case 'f64':\n              return isSubnormalNumberF64(n.valueOf())\n                ? `${Colors.bold(str)} (0x${hex} subnormal)`\n                : `${Colors.bold(str)} (0x${hex})`;\n            case 'f32':\n              return isSubnormalNumberF32(n.valueOf())\n                ? `${Colors.bold(str)} (0x${hex} subnormal)`\n                : `${Colors.bold(str)} (0x${hex})`;\n            case 'f16':\n              return isSubnormalNumberF16(n.valueOf())\n                ? `${Colors.bold(str)} (0x${hex} subnormal)`\n                : `${Colors.bold(str)} (0x${hex})`;\n            default:\n              unreachable(\n                `Printing of floating point kind ${this.type.kind} is not implemented...`\n              );\n          }\n        }\n        return `${Colors.bold(this.value.toString())} (0x${hex})`;\n      }\n    }\n  }\n}\n\nexport interface ScalarBuilder {\n  (value: number): Scalar;\n}\n\n/** Create a Scalar of `type` by storing `value` as an element of `workingDataArray` and retrieving it.\n * The working data array *must* be an alias of `workingData`.\n */\nfunction scalarFromValue(\n  type: ScalarType,\n  workingDataArray: TypedArrayBufferView,\n  value: number\n): Scalar {\n  // Clear all bits of the working data since `value` may be smaller; the upper bits should be 0.\n  workingDataU32[1] = 0;\n  workingDataU32[0] = 0;\n  workingDataArray[0] = value;\n  return new Scalar(type, workingDataArray[0], workingDataU32[1], workingDataU32[0]);\n}\n\n/** Create a Scalar of `type` by storing `value` as an element of `workingDataStoreArray` and\n * reinterpreting it as an element of `workingDataLoadArray`.\n * Both working data arrays *must* be aliases of `workingData`.\n */\nfunction scalarFromBits(\n  type: ScalarType,\n  workingDataStoreArray: TypedArrayBufferView,\n  workingDataLoadArray: TypedArrayBufferView,\n  bits: number\n): Scalar {\n  // Clear all bits of the working data since `value` may be smaller; the upper bits should be 0.\n  workingDataU32[1] = 0;\n  workingDataU32[0] = 0;\n  workingDataStoreArray[0] = bits;\n  return new Scalar(type, workingDataLoadArray[0], workingDataU32[1], workingDataU32[0]);\n}\n\n/** Create an AbstractFloat from a numeric value, a JS `number`. */\nexport const abstractFloat = (value: number): Scalar =>\n  scalarFromValue(TypeAbstractFloat, workingDataF64, value);\n\n/** Create an f64 from a numeric value, a JS `number`. */\nexport const f64 = (value: number): Scalar => scalarFromValue(TypeF64, workingDataF64, value);\n\n/** Create an f32 from a numeric value, a JS `number`. */\nexport const f32 = (value: number): Scalar => scalarFromValue(TypeF32, workingDataF32, value);\n\n/** Create an f16 from a numeric value, a JS `number`. */\nexport const f16 = (value: number): Scalar => scalarFromValue(TypeF16, workingDataF16, value);\n\n/** Create an f32 from a bit representation, a uint32 represented as a JS `number`. */\nexport const f32Bits = (bits: number): Scalar =>\n  scalarFromBits(TypeF32, workingDataU32, workingDataF32, bits);\n\n/** Create an f16 from a bit representation, a uint16 represented as a JS `number`. */\nexport const f16Bits = (bits: number): Scalar =>\n  scalarFromBits(TypeF16, workingDataU16, workingDataF16, bits);\n\n/** Create an i32 from a numeric value, a JS `number`. */\nexport const i32 = (value: number): Scalar => scalarFromValue(TypeI32, workingDataI32, value);\n\n/** Create an i16 from a numeric value, a JS `number`. */\nexport const i16 = (value: number): Scalar => scalarFromValue(TypeI16, workingDataI16, value);\n\n/** Create an i8 from a numeric value, a JS `number`. */\nexport const i8 = (value: number): Scalar => scalarFromValue(TypeI8, workingDataI8, value);\n\n/** Create an i32 from a bit representation, a uint32 represented as a JS `number`. */\nexport const i32Bits = (bits: number): Scalar =>\n  scalarFromBits(TypeI32, workingDataU32, workingDataI32, bits);\n\n/** Create an i16 from a bit representation, a uint16 represented as a JS `number`. */\nexport const i16Bits = (bits: number): Scalar =>\n  scalarFromBits(TypeI16, workingDataU16, workingDataI16, bits);\n\n/** Create an i8 from a bit representation, a uint8 represented as a JS `number`. */\nexport const i8Bits = (bits: number): Scalar =>\n  scalarFromBits(TypeI8, workingDataU8, workingDataI8, bits);\n\n/** Create a u32 from a numeric value, a JS `number`. */\nexport const u32 = (value: number): Scalar => scalarFromValue(TypeU32, workingDataU32, value);\n\n/** Create a u16 from a numeric value, a JS `number`. */\nexport const u16 = (value: number): Scalar => scalarFromValue(TypeU16, workingDataU16, value);\n\n/** Create a u8 from a numeric value, a JS `number`. */\nexport const u8 = (value: number): Scalar => scalarFromValue(TypeU8, workingDataU8, value);\n\n/** Create an u32 from a bit representation, a uint32 represented as a JS `number`. */\nexport const u32Bits = (bits: number): Scalar =>\n  scalarFromBits(TypeU32, workingDataU32, workingDataU32, bits);\n\n/** Create an u16 from a bit representation, a uint16 represented as a JS `number`. */\nexport const u16Bits = (bits: number): Scalar =>\n  scalarFromBits(TypeU16, workingDataU16, workingDataU16, bits);\n\n/** Create an u8 from a bit representation, a uint8 represented as a JS `number`. */\nexport const u8Bits = (bits: number): Scalar =>\n  scalarFromBits(TypeU8, workingDataU8, workingDataU8, bits);\n\n/** Create a boolean value. */\nexport function bool(value: boolean): Scalar {\n  // WGSL does not support using 'bool' types directly in storage / uniform\n  // buffers, so instead we pack booleans in a u32, where 'false' is zero and\n  // 'true' is any non-zero value.\n  workingDataU32[0] = value ? 1 : 0;\n  workingDataU32[1] = 0;\n  return new Scalar(TypeBool, value, workingDataU32[1], workingDataU32[0]);\n}\n\n/** A 'true' literal value */\nexport const True = bool(true);\n\n/** A 'false' literal value */\nexport const False = bool(false);\n\n/**\n * Class that encapsulates a vector value.\n */\nexport class Vector {\n  readonly elements: Array<Scalar>;\n  readonly type: VectorType;\n\n  public constructor(elements: Array<Scalar>) {\n    if (elements.length < 2 || elements.length > 4) {\n      throw new Error(`vector element count must be between 2 and 4, got ${elements.length}`);\n    }\n    for (let i = 1; i < elements.length; i++) {\n      const a = elements[0].type;\n      const b = elements[i].type;\n      if (a !== b) {\n        throw new Error(\n          `cannot mix vector element types. Found elements with types '${a}' and '${b}'`\n        );\n      }\n    }\n    this.elements = elements;\n    this.type = TypeVec(elements.length, elements[0].type);\n  }\n\n  /**\n   * Copies the vector value to the Uint8Array buffer at the provided byte offset.\n   * @param buffer the destination buffer\n   * @param offset the byte offset within buffer\n   */\n  public copyTo(buffer: Uint8Array, offset: number) {\n    for (const element of this.elements) {\n      element.copyTo(buffer, offset);\n      offset += this.type.elementType.size;\n    }\n  }\n\n  /**\n   * @returns the WGSL representation of this vector value\n   */\n  public wgsl(): string {\n    const els = this.elements.map(v => v.wgsl()).join(', ');\n    return `vec${this.type.width}(${els})`;\n  }\n\n  public toString(): string {\n    return `${this.type}(${this.elements.map(e => e.toString()).join(', ')})`;\n  }\n\n  public get x() {\n    assert(0 < this.elements.length);\n    return this.elements[0];\n  }\n\n  public get y() {\n    assert(1 < this.elements.length);\n    return this.elements[1];\n  }\n\n  public get z() {\n    assert(2 < this.elements.length);\n    return this.elements[2];\n  }\n\n  public get w() {\n    assert(3 < this.elements.length);\n    return this.elements[3];\n  }\n}\n\n/** Helper for constructing a new two-element vector with the provided values */\nexport function vec2(x: Scalar, y: Scalar) {\n  return new Vector([x, y]);\n}\n\n/** Helper for constructing a new three-element vector with the provided values */\nexport function vec3(x: Scalar, y: Scalar, z: Scalar) {\n  return new Vector([x, y, z]);\n}\n\n/** Helper for constructing a new four-element vector with the provided values */\nexport function vec4(x: Scalar, y: Scalar, z: Scalar, w: Scalar) {\n  return new Vector([x, y, z, w]);\n}\n\n/**\n * Helper for constructing Vectors from arrays of numbers\n *\n * @param v array of numbers to be converted, must contain 2, 3 or 4 elements\n * @param op function to convert from number to Scalar, e.g. 'f32`\n */\nexport function toVector(v: readonly number[], op: (n: number) => Scalar): Vector {\n  switch (v.length) {\n    case 2:\n      return vec2(op(v[0]), op(v[1]));\n    case 3:\n      return vec3(op(v[0]), op(v[1]), op(v[2]));\n    case 4:\n      return vec4(op(v[0]), op(v[1]), op(v[2]), op(v[3]));\n  }\n  unreachable(`input to 'toVector' must contain 2, 3, or 4 elements`);\n}\n\n/**\n * Class that encapsulates a Matrix value.\n */\nexport class Matrix {\n  readonly elements: Scalar[][];\n  readonly type: MatrixType;\n\n  public constructor(elements: Array<Array<Scalar>>) {\n    const num_cols = elements.length;\n    if (num_cols < 2 || num_cols > 4) {\n      throw new Error(`matrix cols count must be between 2 and 4, got ${num_cols}`);\n    }\n\n    const num_rows = elements[0].length;\n    if (!elements.every(c => c.length === num_rows)) {\n      throw new Error(`cannot mix matrix column lengths`);\n    }\n\n    if (num_rows < 2 || num_rows > 4) {\n      throw new Error(`matrix rows count must be between 2 and 4, got ${num_rows}`);\n    }\n\n    const elem_type = elements[0][0].type;\n    if (!elements.every(c => c.every(r => objectEquals(r.type, elem_type)))) {\n      throw new Error(`cannot mix matrix element types`);\n    }\n\n    this.elements = elements;\n    this.type = TypeMat(num_cols, num_rows, elem_type);\n  }\n\n  /**\n   * Copies the matrix value to the Uint8Array buffer at the provided byte offset.\n   * @param buffer the destination buffer\n   * @param offset the byte offset within buffer\n   */\n  public copyTo(buffer: Uint8Array, offset: number) {\n    for (let i = 0; i < this.type.cols; i++) {\n      for (let j = 0; j < this.type.rows; j++) {\n        this.elements[i][j].copyTo(buffer, offset);\n        offset += this.type.elementType.size;\n      }\n\n      // vec3 have one padding element, so need to skip in matrices\n      if (this.type.rows === 3) {\n        offset += this.type.elementType.size;\n      }\n    }\n  }\n\n  /**\n   * @returns the WGSL representation of this matrix value\n   */\n  public wgsl(): string {\n    const els = this.elements.flatMap(c => c.map(r => r.wgsl())).join(', ');\n    return `mat${this.type.cols}x${this.type.rows}(${els})`;\n  }\n\n  public toString(): string {\n    return `${this.type}(${this.elements.map(c => c.join(', ')).join(', ')})`;\n  }\n}\n\n/**\n * Helper for constructing Matrices from arrays of numbers\n *\n * @param m array of array of numbers to be converted, all Array of number must\n *          be of the same length. All Arrays must have 2, 3, or 4 elements.\n * @param op function to convert from number to Scalar, e.g. 'f32`\n */\nexport function toMatrix(m: ROArrayArray<number>, op: (n: number) => Scalar): Matrix {\n  const cols = m.length;\n  const rows = m[0].length;\n  const elements: Scalar[][] = [...Array<Scalar[]>(cols)].map(_ => [...Array<Scalar>(rows)]);\n  for (let i = 0; i < cols; i++) {\n    for (let j = 0; j < rows; j++) {\n      elements[i][j] = op(m[i][j]);\n    }\n  }\n\n  return new Matrix(elements);\n}\n\n/** Value is a Scalar or Vector value. */\nexport type Value = Scalar | Vector | Matrix;\n\nexport type SerializedValueScalar = {\n  kind: 'scalar';\n  type: ScalarKind;\n  value: boolean | number;\n};\n\nexport type SerializedValueVector = {\n  kind: 'vector';\n  type: ScalarKind;\n  value: boolean[] | readonly number[];\n};\n\nexport type SerializedValueMatrix = {\n  kind: 'matrix';\n  type: ScalarKind;\n  value: ROArrayArray<number>;\n};\n\nenum SerializedScalarKind {\n  AbstractFloat,\n  F64,\n  F32,\n  F16,\n  U32,\n  U16,\n  U8,\n  I32,\n  I16,\n  I8,\n  Bool,\n}\n\n/** serializeScalarKind() serializes a ScalarKind to a BinaryStream */\nfunction serializeScalarKind(s: BinaryStream, v: ScalarKind) {\n  switch (v) {\n    case 'abstract-float':\n      s.writeU8(SerializedScalarKind.AbstractFloat);\n      return;\n    case 'f64':\n      s.writeU8(SerializedScalarKind.F64);\n      return;\n    case 'f32':\n      s.writeU8(SerializedScalarKind.F32);\n      return;\n    case 'f16':\n      s.writeU8(SerializedScalarKind.F16);\n      return;\n    case 'u32':\n      s.writeU8(SerializedScalarKind.U32);\n      return;\n    case 'u16':\n      s.writeU8(SerializedScalarKind.U16);\n      return;\n    case 'u8':\n      s.writeU8(SerializedScalarKind.U8);\n      return;\n    case 'i32':\n      s.writeU8(SerializedScalarKind.I32);\n      return;\n    case 'i16':\n      s.writeU8(SerializedScalarKind.I16);\n      return;\n    case 'i8':\n      s.writeU8(SerializedScalarKind.I8);\n      return;\n    case 'bool':\n      s.writeU8(SerializedScalarKind.Bool);\n      return;\n  }\n}\n\n/** deserializeScalarKind() deserializes a ScalarKind from a BinaryStream */\nfunction deserializeScalarKind(s: BinaryStream): ScalarKind {\n  const kind = s.readU8();\n  switch (kind) {\n    case SerializedScalarKind.AbstractFloat:\n      return 'abstract-float';\n    case SerializedScalarKind.F64:\n      return 'f64';\n    case SerializedScalarKind.F32:\n      return 'f32';\n    case SerializedScalarKind.F16:\n      return 'f16';\n    case SerializedScalarKind.U32:\n      return 'u32';\n    case SerializedScalarKind.U16:\n      return 'u16';\n    case SerializedScalarKind.U8:\n      return 'u8';\n    case SerializedScalarKind.I32:\n      return 'i32';\n    case SerializedScalarKind.I16:\n      return 'i16';\n    case SerializedScalarKind.I8:\n      return 'i8';\n    case SerializedScalarKind.Bool:\n      return 'bool';\n    default:\n      unreachable(`invalid serialized ScalarKind: ${kind}`);\n  }\n}\n\nenum SerializedValueKind {\n  Scalar,\n  Vector,\n  Matrix,\n}\n\n/** serializeValue() serializes a Value to a BinaryStream */\nexport function serializeValue(s: BinaryStream, v: Value) {\n  const serializeScalar = (scalar: Scalar, kind: ScalarKind) => {\n    switch (kind) {\n      case 'abstract-float':\n        s.writeF64(scalar.value as number);\n        return;\n      case 'f64':\n        s.writeF64(scalar.value as number);\n        return;\n      case 'f32':\n        s.writeF32(scalar.value as number);\n        return;\n      case 'f16':\n        s.writeF16(scalar.value as number);\n        return;\n      case 'u32':\n        s.writeU32(scalar.value as number);\n        return;\n      case 'u16':\n        s.writeU16(scalar.value as number);\n        return;\n      case 'u8':\n        s.writeU8(scalar.value as number);\n        return;\n      case 'i32':\n        s.writeI32(scalar.value as number);\n        return;\n      case 'i16':\n        s.writeI16(scalar.value as number);\n        return;\n      case 'i8':\n        s.writeI8(scalar.value as number);\n        return;\n      case 'bool':\n        s.writeBool(scalar.value as boolean);\n        return;\n    }\n  };\n\n  if (v instanceof Scalar) {\n    s.writeU8(SerializedValueKind.Scalar);\n    serializeScalarKind(s, v.type.kind);\n    serializeScalar(v, v.type.kind);\n    return;\n  }\n  if (v instanceof Vector) {\n    s.writeU8(SerializedValueKind.Vector);\n    serializeScalarKind(s, v.type.elementType.kind);\n    s.writeU8(v.type.width);\n    for (const element of v.elements) {\n      serializeScalar(element, v.type.elementType.kind);\n    }\n    return;\n  }\n  if (v instanceof Matrix) {\n    s.writeU8(SerializedValueKind.Matrix);\n    serializeScalarKind(s, v.type.elementType.kind);\n    s.writeU8(v.type.cols);\n    s.writeU8(v.type.rows);\n    for (const column of v.elements) {\n      for (const element of column) {\n        serializeScalar(element, v.type.elementType.kind);\n      }\n    }\n    return;\n  }\n\n  unreachable(`unhandled value type: ${v}`);\n}\n\n/** deserializeValue() deserializes a Value from a BinaryStream */\nexport function deserializeValue(s: BinaryStream): Value {\n  const deserializeScalar = (kind: ScalarKind) => {\n    switch (kind) {\n      case 'abstract-float':\n        return abstractFloat(s.readF64());\n      case 'f64':\n        return f64(s.readF64());\n      case 'f32':\n        return f32(s.readF32());\n      case 'f16':\n        return f16(s.readF16());\n      case 'u32':\n        return u32(s.readU32());\n      case 'u16':\n        return u16(s.readU16());\n      case 'u8':\n        return u8(s.readU8());\n      case 'i32':\n        return i32(s.readI32());\n      case 'i16':\n        return i16(s.readI16());\n      case 'i8':\n        return i8(s.readI8());\n      case 'bool':\n        return bool(s.readBool());\n    }\n  };\n  const valueKind = s.readU8();\n  const scalarKind = deserializeScalarKind(s);\n  switch (valueKind) {\n    case SerializedValueKind.Scalar:\n      return deserializeScalar(scalarKind);\n    case SerializedValueKind.Vector: {\n      const width = s.readU8();\n      const scalars = new Array<Scalar>(width);\n      for (let i = 0; i < width; i++) {\n        scalars[i] = deserializeScalar(scalarKind);\n      }\n      return new Vector(scalars);\n    }\n    case SerializedValueKind.Matrix: {\n      const numCols = s.readU8();\n      const numRows = s.readU8();\n      const columns = new Array<Scalar[]>(numCols);\n      for (let c = 0; c < numCols; c++) {\n        columns[c] = new Array<Scalar>(numRows);\n        for (let i = 0; i < numRows; i++) {\n          columns[c][i] = deserializeScalar(scalarKind);\n        }\n      }\n      return new Matrix(columns);\n    }\n    default:\n      unreachable(`invalid serialized value kind: ${valueKind}`);\n  }\n}\n\n/** @returns if the Value is a float scalar type */\nexport function isFloatValue(v: Value): boolean {\n  return isFloatType(v.type);\n}\n\n/**\n * @returns if `ty` is an abstract numeric type.\n * @note this does not consider composite types.\n * Use elementType() if you want to test the element type.\n */\nexport function isAbstractType(ty: Type): boolean {\n  if (ty instanceof ScalarType) {\n    return ty.kind === 'abstract-float';\n  }\n  return false;\n}\n\n/**\n * @returns if `ty` is a floating point type.\n * @note this does not consider composite types.\n * Use elementType() if you want to test the element type.\n */\nexport function isFloatType(ty: Type): boolean {\n  if (ty instanceof ScalarType) {\n    return (\n      ty.kind === 'abstract-float' || ty.kind === 'f64' || ty.kind === 'f32' || ty.kind === 'f16'\n    );\n  }\n  return false;\n}\n\n/// All floating-point scalar types\nexport const kAllFloatScalars = [TypeAbstractFloat, TypeF32, TypeF16] as const;\n\n/// All floating-point vec2 types\nexport const kAllFloatVector2 = [\n  TypeVec(2, TypeAbstractFloat),\n  TypeVec(2, TypeF32),\n  TypeVec(2, TypeF16),\n] as const;\n\n/// All floating-point vec3 types\nexport const kAllFloatVector3 = [\n  TypeVec(3, TypeAbstractFloat),\n  TypeVec(3, TypeF32),\n  TypeVec(3, TypeF16),\n] as const;\n\n/// All floating-point vec4 types\nexport const kAllFloatVector4 = [\n  TypeVec(4, TypeAbstractFloat),\n  TypeVec(4, TypeF32),\n  TypeVec(4, TypeF16),\n] as const;\n\n/// All floating-point vector types\nexport const kAllFloatVectors = [\n  ...kAllFloatVector2,\n  ...kAllFloatVector3,\n  ...kAllFloatVector4,\n] as const;\n\n/// All floating-point scalar and vector types\nexport const kAllFloatScalarsAndVectors = [...kAllFloatScalars, ...kAllFloatVectors] as const;\n\n/// All integer scalar and vector types\nexport const kAllIntegerScalarsAndVectors = [\n  TypeI32,\n  TypeVec(2, TypeI32),\n  TypeVec(3, TypeI32),\n  TypeVec(4, TypeI32),\n  TypeU32,\n  TypeVec(2, TypeU32),\n  TypeVec(3, TypeU32),\n  TypeVec(4, TypeU32),\n] as const;\n\n/// All signed integer scalar and vector types\nexport const kAllSignedIntegerScalarsAndVectors = [\n  TypeI32,\n  TypeVec(2, TypeI32),\n  TypeVec(3, TypeI32),\n  TypeVec(4, TypeI32),\n] as const;\n\n/// All unsigned integer scalar and vector types\nexport const kAllUnsignedIntegerScalarsAndVectors = [\n  TypeU32,\n  TypeVec(2, TypeU32),\n  TypeVec(3, TypeU32),\n  TypeVec(4, TypeU32),\n] as const;\n\n/// All floating-point and integer scalar and vector types\nexport const kAllFloatAndIntegerScalarsAndVectors = [\n  ...kAllFloatScalarsAndVectors,\n  ...kAllIntegerScalarsAndVectors,\n] as const;\n\n/// All floating-point and signed integer scalar and vector types\nexport const kAllFloatAndSignedIntegerScalarsAndVectors = [\n  ...kAllFloatScalarsAndVectors,\n  ...kAllSignedIntegerScalarsAndVectors,\n] as const;\n\n/** @returns the inner element type of the given type */\nexport function elementType(t: ScalarType | VectorType | MatrixType) {\n  if (t instanceof ScalarType) {\n    return t;\n  }\n  return t.elementType;\n}\n"],"mappings":"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"}