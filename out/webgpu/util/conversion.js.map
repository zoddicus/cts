{"version":3,"file":"conversion.js","names":["Colors","assert","objectEquals","unreachable","Float16Array","kBit","align","cartesianProduct","clamp","correctlyRoundedF16","isFiniteF16","isSubnormalNumberF16","isSubnormalNumberF32","isSubnormalNumberF64","floatAsNormalizedInteger","float","bits","signed","max","Math","pow","round","normalizedIntegerAsFloat","integer","Number","isInteger","numbersApproximatelyEqual","a","b","maxDiff","isNaN","POSITIVE_INFINITY","NEGATIVE_INFINITY","abs","workingData","ArrayBuffer","workingDataU32","Uint32Array","workingDataU16","Uint16Array","workingDataU8","Uint8Array","workingDataF32","Float32Array","workingDataF16","workingDataI16","Int16Array","workingDataI32","Int32Array","workingDataI8","Int8Array","workingDataF64","Float64Array","workingDataI64","BigInt64Array","workingDataU64","BigUint64Array","workingDataView","DataView","float32ToFloatBits","n","signBits","exponentBits","mantissaBits","bias","setFloat32","getUint32","sign","isFinite","mantissaBitsToDiscard","exp","newBiasedExp","newMantissa","float32ToFloat16Bits","float16BitsToFloat32","float16Bits","floatBitsToNumber","kFloat16Format","kFloat32Format","kUFloat9e5Format","float32BitsToNumber","numberToFloat32Bits","number","fmt","kNonSignBits","kNonSignBitsMask","exponentAndMantissaBits","exponentMask","infinityOrNaN","mantissaMask","signBit","isNegative","NaN","f32BitsWithWrongBias","numberWithWrongBias","ufloatM9E5BitsToNumber","exponent","mantissa","numberToFloatBits","floatBitsToNormalULPFromZero","mask_sign","mask_expt","mask_mant","mask_rest","rest","subnormal_or_zero","infinity_or_nan","abs_ulp_from_zero","packRGB9E5UFloat","r","g","N","Emax","B","sharedexp_max","red_c","min","green_c","blue_c","max_c","exp_shared_p","floor","log2","max_s","exp_shared","scalar","red_s","green_s","blue_s","unpackRGB9E5UFloat","encoded","R","G","pack2x16float","x","y","generateU16s","contains_subnormals","n_f16s","some","n_u16s","map","f16","contains_poszero","u","positive","zero","contains_negzero","negative","push","undefined","results","Array","p","length","pack2x16snorm","generateI16","pack2x16unorm","generateU16","pack4x8snorm","vals","generateI8","idx","pack4x8unorm","generateU8","assertInIntegerRange","gammaCompress","gammaDecompress","float32ToUint32","f32","uint32ToFloat32","u32","float32ToInt32","uint32ToInt32","float16ToUint16","uint16ToFloat16","u16","float16ToInt16","ScalarType","constructor","kind","size","read","_size","_signed","toString","alignment","create","value","abstractFloat","abstractInt","BigInt","f64","u8","i32","i16","i8","bool","VectorType","instances","Map","width","elementType","key","ty","get","set","buf","offset","elements","i","VectorValue","alignmentOf","fill","v","MatrixType","cols","rows","_","c","MatrixValue","columns","start","slice","ArrayType","count","stride","ArrayValue","valueFromBytes","workingDataOut","BYTES_PER_ELEMENT","abstractIntType","i32Type","u32Type","i16Type","u16Type","i8Type","u8Type","abstractFloatType","f64Type","f32Type","f16Type","f16Bits","boolType","Type","vec","vec2ai","vec2i","vec2u","vec2af","vec2f","vec2h","vec3ai","vec3i","vec3u","vec3af","vec3f","vec3h","vec4ai","vec4i","vec4u","vec4af","vec4f","vec4h","mat","mat2x2f","mat2x2h","mat3x2f","mat3x2h","mat4x2f","mat4x2h","mat2x3f","mat2x3h","mat3x3f","mat3x3h","mat4x3f","mat4x3h","mat2x4f","mat2x4h","mat3x4f","mat3x4h","mat4x4f","mat4x4h","array","scalarType","numElementsOf","Error","elementsOf","isScalarValue","flat","scalarElementsOf","els","elementTypeOf","t","scalarTypeOf","hex","sizeInBytes","bitsLow","bitsHigh","padStart","withPoint","str","indexOf","AbstractIntValue","type","copyTo","buffer","wgsl","bold","AbstractFloatValue","Infinity","valueOf","I32Value","U32Value","I16Value","U16Value","I8Value","U8Value","F64Value","F32Value","F16Value","BoolValue","abstractIntBits","i32Bits","u32Bits","f32Bits","True","False","element","join","e","z","w","vec2","vec3","vec4","toVector","op","num_cols","num_rows","every","elem_type","j","flatMap","isAbstractType","toMatrix","m","SerializedScalarKind","serializeScalarKind","s","writeU8","AbstractFloat","F64","F32","F16","U32","U16","U8","AbstractInt","I32","I16","I8","Bool","deserializeScalarKind","readU8","SerializedValueKind","serializeValue","serializeScalar","writeF64","writeF32","writeF16","writeU32","writeU16","writeI32","writeI16","writeI8","writeI64","writeBool","Scalar","Vector","Matrix","column","deserializeValue","deserializeScalar","readF64","readF32","readF16","readU32","readU16","readI64","readI32","readI16","readI8","readBool","valueKind","scalarKind","scalars","numCols","numRows","isFloatValue","isFloatType","isUnsignedType","isConvertible","src","dst","widthOf","elSrc","elDst","kFloatScalars","kFloatVec2","kFloatVec3","kFloatVec4","kConcreteF32ScalarsAndVectors","kConcreteF16ScalarsAndVectors","kFloatVectors","kFloatScalarsAndVectors","kConcreteSignedIntegerVectors","kConcreteUnsignedIntegerVectors","kConcreteIntegerVectors","kConcreteSignedIntegerScalarsAndVectors","kConcreteUnsignedIntegerScalarsAndVectors","kConcreteIntegerScalarsAndVectors","kConvertableToFloatScalar","kConvertableToFloatVec2","kConvertableToFloatVec3","kConvertableToFloatVec4","kConvertableToFloatVectors","kConvertableToFloatScalarsAndVectors","kAllNumericScalarsAndVectors","kConcreteNumericScalarsAndVectors","kAllScalarsAndVectors"],"sources":["../../../src/webgpu/util/conversion.ts"],"sourcesContent":["import { Colors } from '../../common/util/colors.js';\nimport { ROArrayArray } from '../../common/util/types.js';\nimport { assert, objectEquals, TypedArrayBufferView, unreachable } from '../../common/util/util.js';\nimport { Float16Array } from '../../external/petamoriken/float16/float16.js';\n\nimport BinaryStream from './binary_stream.js';\nimport { kBit } from './constants.js';\nimport {\n  align,\n  cartesianProduct,\n  clamp,\n  correctlyRoundedF16,\n  isFiniteF16,\n  isSubnormalNumberF16,\n  isSubnormalNumberF32,\n  isSubnormalNumberF64,\n} from './math.js';\n\n/**\n * Encodes a JS `number` into a \"normalized\" (unorm/snorm) integer representation with `bits` bits.\n * Input must be between -1 and 1 if signed, or 0 and 1 if unsigned.\n *\n * MAINTENANCE_TODO: See if performance of texel_data improves if this function is pre-specialized\n * for a particular `bits`/`signed`.\n */\nexport function floatAsNormalizedInteger(float: number, bits: number, signed: boolean): number {\n  if (signed) {\n    assert(float >= -1 && float <= 1, () => `${float} out of bounds of snorm`);\n    const max = Math.pow(2, bits - 1) - 1;\n    return Math.round(float * max);\n  } else {\n    assert(float >= 0 && float <= 1, () => `${float} out of bounds of unorm`);\n    const max = Math.pow(2, bits) - 1;\n    return Math.round(float * max);\n  }\n}\n\n/**\n * Decodes a JS `number` from a \"normalized\" (unorm/snorm) integer representation with `bits` bits.\n * Input must be an integer in the range of the specified unorm/snorm type.\n */\nexport function normalizedIntegerAsFloat(integer: number, bits: number, signed: boolean): number {\n  assert(Number.isInteger(integer));\n  if (signed) {\n    const max = Math.pow(2, bits - 1) - 1;\n    assert(integer >= -max - 1 && integer <= max);\n    if (integer === -max - 1) {\n      integer = -max;\n    }\n    return integer / max;\n  } else {\n    const max = Math.pow(2, bits) - 1;\n    assert(integer >= 0 && integer <= max);\n    return integer / max;\n  }\n}\n\n/**\n * Compares 2 numbers. Returns true if their absolute value is\n * less than or equal to maxDiff or if they are both NaN or the\n * same sign infinity.\n */\nexport function numbersApproximatelyEqual(a: number, b: number, maxDiff: number = 0) {\n  return (\n    (Number.isNaN(a) && Number.isNaN(b)) ||\n    (a === Number.POSITIVE_INFINITY && b === Number.POSITIVE_INFINITY) ||\n    (a === Number.NEGATIVE_INFINITY && b === Number.NEGATIVE_INFINITY) ||\n    Math.abs(a - b) <= maxDiff\n  );\n}\n\n/**\n * Once-allocated ArrayBuffer/views to avoid overhead of allocation when converting between numeric formats\n *\n * workingData* is shared between multiple functions in this file, so to avoid re-entrancy problems, make sure in\n * functions that use it that they don't call themselves or other functions that use workingData*.\n */\nconst workingData = new ArrayBuffer(8);\nconst workingDataU32 = new Uint32Array(workingData);\nconst workingDataU16 = new Uint16Array(workingData);\nconst workingDataU8 = new Uint8Array(workingData);\nconst workingDataF32 = new Float32Array(workingData);\nconst workingDataF16 = new Float16Array(workingData);\nconst workingDataI16 = new Int16Array(workingData);\nconst workingDataI32 = new Int32Array(workingData);\nconst workingDataI8 = new Int8Array(workingData);\nconst workingDataF64 = new Float64Array(workingData);\nconst workingDataI64 = new BigInt64Array(workingData);\nconst workingDataU64 = new BigUint64Array(workingData);\nconst workingDataView = new DataView(workingData);\n\n/**\n * Encodes a JS `number` into an IEEE754 floating point number with the specified number of\n * sign, exponent, mantissa bits, and exponent bias.\n * Returns the result as an integer-valued JS `number`.\n *\n * Does not handle clamping, overflow, or denormal inputs.\n * On underflow (result is subnormal), rounds to (signed) zero.\n *\n * MAINTENANCE_TODO: Replace usages of this with numberToFloatBits.\n */\nexport function float32ToFloatBits(\n  n: number,\n  signBits: 0 | 1,\n  exponentBits: number,\n  mantissaBits: number,\n  bias: number\n): number {\n  assert(exponentBits <= 8);\n  assert(mantissaBits <= 23);\n\n  if (Number.isNaN(n)) {\n    // NaN = all exponent bits true, 1 or more mantissa bits true\n    return (((1 << exponentBits) - 1) << mantissaBits) | ((1 << mantissaBits) - 1);\n  }\n\n  workingDataView.setFloat32(0, n, true);\n  const bits = workingDataView.getUint32(0, true);\n  // bits (32): seeeeeeeefffffffffffffffffffffff\n\n  // 0 or 1\n  const sign = (bits >> 31) & signBits;\n\n  if (n === 0) {\n    if (sign === 1) {\n      // Handle negative zero.\n      return 1 << (exponentBits + mantissaBits);\n    }\n    return 0;\n  }\n\n  if (signBits === 0) {\n    assert(n >= 0);\n  }\n\n  if (!Number.isFinite(n)) {\n    // Infinity = all exponent bits true, no mantissa bits true\n    // plus the sign bit.\n    return (\n      (((1 << exponentBits) - 1) << mantissaBits) | (n < 0 ? 2 ** (exponentBits + mantissaBits) : 0)\n    );\n  }\n\n  const mantissaBitsToDiscard = 23 - mantissaBits;\n\n  // >> to remove mantissa, & to remove sign, - 127 to remove bias.\n  const exp = ((bits >> 23) & 0xff) - 127;\n\n  // Convert to the new biased exponent.\n  const newBiasedExp = bias + exp;\n  assert(newBiasedExp < 1 << exponentBits, () => `input number ${n} overflows target type`);\n\n  if (newBiasedExp <= 0) {\n    // Result is subnormal or zero. Round to (signed) zero.\n    return sign << (exponentBits + mantissaBits);\n  } else {\n    // Mask only the mantissa, and discard the lower bits.\n    const newMantissa = (bits & 0x7fffff) >> mantissaBitsToDiscard;\n    return (sign << (exponentBits + mantissaBits)) | (newBiasedExp << mantissaBits) | newMantissa;\n  }\n}\n\n/**\n * Encodes a JS `number` into an IEEE754 16 bit floating point number.\n * Returns the result as an integer-valued JS `number`.\n *\n * Does not handle clamping, overflow, or denormal inputs.\n * On underflow (result is subnormal), rounds to (signed) zero.\n */\nexport function float32ToFloat16Bits(n: number) {\n  return float32ToFloatBits(n, 1, 5, 10, 15);\n}\n\n/**\n * Decodes an IEEE754 16 bit floating point number into a JS `number` and returns.\n */\nexport function float16BitsToFloat32(float16Bits: number): number {\n  return floatBitsToNumber(float16Bits, kFloat16Format);\n}\n\ntype FloatFormat = { signed: 0 | 1; exponentBits: number; mantissaBits: number; bias: number };\n\n/** FloatFormat defining IEEE754 32-bit float. */\nexport const kFloat32Format = { signed: 1, exponentBits: 8, mantissaBits: 23, bias: 127 } as const;\n/** FloatFormat defining IEEE754 16-bit float. */\nexport const kFloat16Format = { signed: 1, exponentBits: 5, mantissaBits: 10, bias: 15 } as const;\n/** FloatFormat for 9 bit mantissa, 5 bit exponent unsigned float */\nexport const kUFloat9e5Format = { signed: 0, exponentBits: 5, mantissaBits: 9, bias: 15 } as const;\n\n/** Bitcast u32 (represented as integer Number) to f32 (represented as floating-point Number). */\nexport function float32BitsToNumber(bits: number): number {\n  workingDataU32[0] = bits;\n  return workingDataF32[0];\n}\n/** Bitcast f32 (represented as floating-point Number) to u32 (represented as integer Number). */\nexport function numberToFloat32Bits(number: number): number {\n  workingDataF32[0] = number;\n  return workingDataU32[0];\n}\n\n/**\n * Decodes an IEEE754 float with the supplied format specification into a JS number.\n *\n * The format MUST be no larger than a 32-bit float.\n */\nexport function floatBitsToNumber(bits: number, fmt: FloatFormat): number {\n  // Pad the provided bits out to f32, then convert to a `number` with the wrong bias.\n  // E.g. for f16 to f32:\n  // - f16: S    EEEEE MMMMMMMMMM\n  //        ^ 000^^^^^ ^^^^^^^^^^0000000000000\n  // - f32: S eeeEEEEE MMMMMMMMMMmmmmmmmmmmmmm\n\n  const kNonSignBits = fmt.exponentBits + fmt.mantissaBits;\n  const kNonSignBitsMask = (1 << kNonSignBits) - 1;\n  const exponentAndMantissaBits = bits & kNonSignBitsMask;\n  const exponentMask = ((1 << fmt.exponentBits) - 1) << fmt.mantissaBits;\n  const infinityOrNaN = (bits & exponentMask) === exponentMask;\n  if (infinityOrNaN) {\n    const mantissaMask = (1 << fmt.mantissaBits) - 1;\n    const signBit = 2 ** kNonSignBits;\n    const isNegative = (bits & signBit) !== 0;\n    return bits & mantissaMask\n      ? Number.NaN\n      : isNegative\n      ? Number.NEGATIVE_INFINITY\n      : Number.POSITIVE_INFINITY;\n  }\n  let f32BitsWithWrongBias =\n    exponentAndMantissaBits << (kFloat32Format.mantissaBits - fmt.mantissaBits);\n  f32BitsWithWrongBias |= (bits << (31 - kNonSignBits)) & 0x8000_0000;\n  const numberWithWrongBias = float32BitsToNumber(f32BitsWithWrongBias);\n  return numberWithWrongBias * 2 ** (kFloat32Format.bias - fmt.bias);\n}\n\n/**\n * Convert ufloat9e5 bits from rgb9e5ufloat to a JS number\n *\n * The difference between `floatBitsToNumber` and `ufloatBitsToNumber`\n * is that the latter doesn't use an implicit leading bit:\n *\n * floatBitsToNumber      = 2^(exponent - bias) * (1 + mantissa / 2 ^ numMantissaBits)\n * ufloatM9E5BitsToNumber = 2^(exponent - bias) * (mantissa / 2 ^ numMantissaBits)\n *                        = 2^(exponent - bias - numMantissaBits) * mantissa\n */\nexport function ufloatM9E5BitsToNumber(bits: number, fmt: FloatFormat): number {\n  const exponent = bits >> fmt.mantissaBits;\n  const mantissaMask = (1 << fmt.mantissaBits) - 1;\n  const mantissa = bits & mantissaMask;\n  return mantissa * 2 ** (exponent - fmt.bias - fmt.mantissaBits);\n}\n\n/**\n * Encodes a JS `number` into an IEEE754 floating point number with the specified format.\n * Returns the result as an integer-valued JS `number`.\n *\n * Does not handle clamping, overflow, or denormal inputs.\n * On underflow (result is subnormal), rounds to (signed) zero.\n */\nexport function numberToFloatBits(number: number, fmt: FloatFormat): number {\n  return float32ToFloatBits(number, fmt.signed, fmt.exponentBits, fmt.mantissaBits, fmt.bias);\n}\n\n/**\n * Given a floating point number (as an integer representing its bits), computes how many ULPs it is\n * from zero.\n *\n * Subnormal numbers are skipped, so that 0 is one ULP from the minimum normal number.\n * Subnormal values are flushed to 0.\n * Positive and negative 0 are both considered to be 0 ULPs from 0.\n */\nexport function floatBitsToNormalULPFromZero(bits: number, fmt: FloatFormat): number {\n  const mask_sign = fmt.signed << (fmt.exponentBits + fmt.mantissaBits);\n  const mask_expt = ((1 << fmt.exponentBits) - 1) << fmt.mantissaBits;\n  const mask_mant = (1 << fmt.mantissaBits) - 1;\n  const mask_rest = mask_expt | mask_mant;\n\n  assert(fmt.exponentBits + fmt.mantissaBits <= 31);\n\n  const sign = bits & mask_sign ? -1 : 1;\n  const rest = bits & mask_rest;\n  const subnormal_or_zero = (bits & mask_expt) === 0;\n  const infinity_or_nan = (bits & mask_expt) === mask_expt;\n  assert(!infinity_or_nan, 'no ulp representation for infinity/nan');\n\n  // The first normal number is mask_mant+1, so subtract mask_mant to make min_normal - zero = 1ULP.\n  const abs_ulp_from_zero = subnormal_or_zero ? 0 : rest - mask_mant;\n  return sign * abs_ulp_from_zero;\n}\n\n/**\n * Encodes three JS `number` values into RGB9E5, returned as an integer-valued JS `number`.\n *\n * RGB9E5 represents three partial-precision floating-point numbers encoded into a single 32-bit\n * value all sharing the same 5-bit exponent.\n * There is no sign bit, and there is a shared 5-bit biased (15) exponent and a 9-bit\n * mantissa for each channel. The mantissa does NOT have an implicit leading \"1.\",\n * and instead has an implicit leading \"0.\".\n *\n * @see https://registry.khronos.org/OpenGL/extensions/EXT/EXT_texture_shared_exponent.txt\n */\nexport function packRGB9E5UFloat(r: number, g: number, b: number): number {\n  const N = 9; // number of mantissa bits\n  const Emax = 31; // max exponent\n  const B = 15; // exponent bias\n  const sharedexp_max = (((1 << N) - 1) / (1 << N)) * 2 ** (Emax - B);\n  const red_c = clamp(r, { min: 0, max: sharedexp_max });\n  const green_c = clamp(g, { min: 0, max: sharedexp_max });\n  const blue_c = clamp(b, { min: 0, max: sharedexp_max });\n  const max_c = Math.max(red_c, green_c, blue_c);\n  const exp_shared_p = Math.max(-B - 1, Math.floor(Math.log2(max_c))) + 1 + B;\n  const max_s = Math.floor(max_c / 2 ** (exp_shared_p - B - N) + 0.5);\n  const exp_shared = max_s === 1 << N ? exp_shared_p + 1 : exp_shared_p;\n  const scalar = 1 / 2 ** (exp_shared - B - N);\n  const red_s = Math.floor(red_c * scalar + 0.5);\n  const green_s = Math.floor(green_c * scalar + 0.5);\n  const blue_s = Math.floor(blue_c * scalar + 0.5);\n  assert(red_s >= 0 && red_s <= 0b111111111);\n  assert(green_s >= 0 && green_s <= 0b111111111);\n  assert(blue_s >= 0 && blue_s <= 0b111111111);\n  assert(exp_shared >= 0 && exp_shared <= 0b11111);\n  return ((exp_shared << 27) | (blue_s << 18) | (green_s << 9) | red_s) >>> 0;\n}\n\n/**\n * Decodes a RGB9E5 encoded color.\n * @see packRGB9E5UFloat\n */\nexport function unpackRGB9E5UFloat(encoded: number): { R: number; G: number; B: number } {\n  const N = 9; // number of mantissa bits\n  const B = 15; // exponent bias\n  const red_s = (encoded >>> 0) & 0b111111111;\n  const green_s = (encoded >>> 9) & 0b111111111;\n  const blue_s = (encoded >>> 18) & 0b111111111;\n  const exp_shared = (encoded >>> 27) & 0b11111;\n  const exp = Math.pow(2, exp_shared - B - N);\n  return {\n    R: exp * red_s,\n    G: exp * green_s,\n    B: exp * blue_s,\n  };\n}\n\n/**\n * Quantizes two f32s to f16 and then packs them in a u32\n *\n * This should implement the same behaviour as the builtin `pack2x16float` from\n * WGSL.\n *\n * Caller is responsible to ensuring inputs are f32s\n *\n * @param x first f32 to be packed\n * @param y second f32 to be packed\n * @returns an array of possible results for pack2x16float. Elements are either\n *          a number or undefined.\n *          undefined indicates that any value is valid, since the input went\n *          out of bounds.\n */\nexport function pack2x16float(x: number, y: number): (number | undefined)[] {\n  // Generates all possible valid u16 bit fields for a given f32 to f16 conversion.\n  // Assumes FTZ for both the f32 and f16 value is allowed.\n  const generateU16s = (n: number): readonly number[] => {\n    let contains_subnormals = isSubnormalNumberF32(n);\n    const n_f16s = correctlyRoundedF16(n);\n    contains_subnormals ||= n_f16s.some(isSubnormalNumberF16);\n\n    const n_u16s = n_f16s.map(f16 => {\n      workingDataF16[0] = f16;\n      return workingDataU16[0];\n    });\n\n    const contains_poszero = n_u16s.some(u => u === kBit.f16.positive.zero);\n    const contains_negzero = n_u16s.some(u => u === kBit.f16.negative.zero);\n    if (!contains_negzero && (contains_poszero || contains_subnormals)) {\n      n_u16s.push(kBit.f16.negative.zero);\n    }\n\n    if (!contains_poszero && (contains_negzero || contains_subnormals)) {\n      n_u16s.push(kBit.f16.positive.zero);\n    }\n\n    return n_u16s;\n  };\n\n  if (!isFiniteF16(x) || !isFiniteF16(y)) {\n    // This indicates any value is valid, so it isn't worth bothering\n    // calculating the more restrictive possibilities.\n    return [undefined];\n  }\n\n  const results = new Array<number>();\n  for (const p of cartesianProduct(generateU16s(x), generateU16s(y))) {\n    assert(p.length === 2, 'cartesianProduct of 2 arrays returned an entry with not 2 elements');\n    workingDataU16[0] = p[0];\n    workingDataU16[1] = p[1];\n    results.push(workingDataU32[0]);\n  }\n\n  return results;\n}\n\n/**\n * Converts two normalized f32s to i16s and then packs them in a u32\n *\n * This should implement the same behaviour as the builtin `pack2x16snorm` from\n * WGSL.\n *\n * Caller is responsible to ensuring inputs are normalized f32s\n *\n * @param x first f32 to be packed\n * @param y second f32 to be packed\n * @returns a number that is expected result of pack2x16snorm.\n */\nexport function pack2x16snorm(x: number, y: number): number {\n  // Converts f32 to i16 via the pack2x16snorm formula.\n  // FTZ is not explicitly handled, because all subnormals will produce a value\n  // between 0 and 1, but significantly away from the edges, so floor goes to 0.\n  const generateI16 = (n: number): number => {\n    return Math.floor(0.5 + 32767 * Math.min(1, Math.max(-1, n)));\n  };\n\n  workingDataI16[0] = generateI16(x);\n  workingDataI16[1] = generateI16(y);\n\n  return workingDataU32[0];\n}\n\n/**\n * Converts two normalized f32s to u16s and then packs them in a u32\n *\n * This should implement the same behaviour as the builtin `pack2x16unorm` from\n * WGSL.\n *\n * Caller is responsible to ensuring inputs are normalized f32s\n *\n * @param x first f32 to be packed\n * @param y second f32 to be packed\n * @returns an number that is expected result of pack2x16unorm.\n */\nexport function pack2x16unorm(x: number, y: number): number {\n  // Converts f32 to u16 via the pack2x16unorm formula.\n  // FTZ is not explicitly handled, because all subnormals will produce a value\n  // between 0.5 and much less than 1, so floor goes to 0.\n  const generateU16 = (n: number): number => {\n    return Math.floor(0.5 + 65535 * Math.min(1, Math.max(0, n)));\n  };\n\n  workingDataU16[0] = generateU16(x);\n  workingDataU16[1] = generateU16(y);\n\n  return workingDataU32[0];\n}\n\n/**\n * Converts four normalized f32s to i8s and then packs them in a u32\n *\n * This should implement the same behaviour as the builtin `pack4x8snorm` from\n * WGSL.\n *\n * Caller is responsible to ensuring inputs are normalized f32s\n *\n * @param vals four f32s to be packed\n * @returns a number that is expected result of pack4x8usorm.\n */\nexport function pack4x8snorm(...vals: [number, number, number, number]): number {\n  // Converts f32 to u8 via the pack4x8snorm formula.\n  // FTZ is not explicitly handled, because all subnormals will produce a value\n  // between 0 and 1, so floor goes to 0.\n  const generateI8 = (n: number): number => {\n    return Math.floor(0.5 + 127 * Math.min(1, Math.max(-1, n)));\n  };\n\n  for (const idx in vals) {\n    workingDataI8[idx] = generateI8(vals[idx]);\n  }\n\n  return workingDataU32[0];\n}\n\n/**\n * Converts four normalized f32s to u8s and then packs them in a u32\n *\n * This should implement the same behaviour as the builtin `pack4x8unorm` from\n * WGSL.\n *\n * Caller is responsible to ensuring inputs are normalized f32s\n *\n * @param vals four f32s to be packed\n * @returns a number that is expected result of pack4x8unorm.\n */\nexport function pack4x8unorm(...vals: [number, number, number, number]): number {\n  // Converts f32 to u8 via the pack4x8unorm formula.\n  // FTZ is not explicitly handled, because all subnormals will produce a value\n  // between 0.5 and much less than 1, so floor goes to 0.\n  const generateU8 = (n: number): number => {\n    return Math.floor(0.5 + 255 * Math.min(1, Math.max(0, n)));\n  };\n\n  for (const idx in vals) {\n    workingDataU8[idx] = generateU8(vals[idx]);\n  }\n\n  return workingDataU32[0];\n}\n\n/**\n * Asserts that a number is within the representable (inclusive) of the integer type with the\n * specified number of bits and signedness.\n *\n * MAINTENANCE_TODO: Assert isInteger? Then this function \"asserts that a number is representable\"\n * by the type.\n */\nexport function assertInIntegerRange(n: number, bits: number, signed: boolean): void {\n  if (signed) {\n    const min = -Math.pow(2, bits - 1);\n    const max = Math.pow(2, bits - 1) - 1;\n    assert(n >= min && n <= max);\n  } else {\n    const max = Math.pow(2, bits) - 1;\n    assert(n >= 0 && n <= max);\n  }\n}\n\n/**\n * Converts a linear value into a \"gamma\"-encoded value using the sRGB-clamped transfer function.\n */\nexport function gammaCompress(n: number): number {\n  n = n <= 0.0031308 ? (323 * n) / 25 : (211 * Math.pow(n, 5 / 12) - 11) / 200;\n  return clamp(n, { min: 0, max: 1 });\n}\n\n/**\n * Converts a \"gamma\"-encoded value into a linear value using the sRGB-clamped transfer function.\n */\nexport function gammaDecompress(n: number): number {\n  n = n <= 0.04045 ? (n * 25) / 323 : Math.pow((200 * n + 11) / 211, 12 / 5);\n  return clamp(n, { min: 0, max: 1 });\n}\n\n/** Converts a 32-bit float value to a 32-bit unsigned integer value */\nexport function float32ToUint32(f32: number): number {\n  workingDataF32[0] = f32;\n  return workingDataU32[0];\n}\n\n/** Converts a 32-bit unsigned integer value to a 32-bit float value */\nexport function uint32ToFloat32(u32: number): number {\n  workingDataU32[0] = u32;\n  return workingDataF32[0];\n}\n\n/** Converts a 32-bit float value to a 32-bit signed integer value */\nexport function float32ToInt32(f32: number): number {\n  workingDataF32[0] = f32;\n  return workingDataI32[0];\n}\n\n/** Converts a 32-bit unsigned integer value to a 32-bit signed integer value */\nexport function uint32ToInt32(u32: number): number {\n  workingDataU32[0] = u32;\n  return workingDataI32[0];\n}\n\n/** Converts a 16-bit float value to a 16-bit unsigned integer value */\nexport function float16ToUint16(f16: number): number {\n  workingDataF16[0] = f16;\n  return workingDataU16[0];\n}\n\n/** Converts a 16-bit unsigned integer value to a 16-bit float value */\nexport function uint16ToFloat16(u16: number): number {\n  workingDataU16[0] = u16;\n  return workingDataF16[0];\n}\n\n/** Converts a 16-bit float value to a 16-bit signed integer value */\nexport function float16ToInt16(f16: number): number {\n  workingDataF16[0] = f16;\n  return workingDataI16[0];\n}\n\n/** A type of number representable by Scalar. */\nexport type ScalarKind =\n  | 'abstract-float'\n  | 'f64'\n  | 'f32'\n  | 'f16'\n  | 'u32'\n  | 'u16'\n  | 'u8'\n  | 'abstract-int'\n  | 'i32'\n  | 'i16'\n  | 'i8'\n  | 'bool';\n\n/** ScalarType describes the type of WGSL Scalar. */\nexport class ScalarType {\n  readonly kind: ScalarKind; // The named type\n  readonly _size: number; // In bytes\n  readonly _signed: boolean;\n  readonly read: (buf: Uint8Array, offset: number) => ScalarValue; // reads a scalar from a buffer\n\n  constructor(\n    kind: ScalarKind,\n    size: number,\n    signed: boolean,\n    read: (buf: Uint8Array, offset: number) => ScalarValue\n  ) {\n    this.kind = kind;\n    this._size = size;\n    this._signed = signed;\n    this.read = read;\n  }\n\n  public toString(): string {\n    return this.kind;\n  }\n\n  public get size(): number {\n    return this._size;\n  }\n\n  public get alignment(): number {\n    return this._size;\n  }\n\n  public get signed(): boolean {\n    return this._signed;\n  }\n\n  /** Constructs a ScalarValue of this type with `value` */\n  public create(value: number | bigint): ScalarValue {\n    switch (typeof value) {\n      case 'number':\n        switch (this.kind) {\n          case 'abstract-float':\n            return abstractFloat(value);\n          case 'abstract-int':\n            return abstractInt(BigInt(value));\n          case 'f64':\n            return f64(value);\n          case 'f32':\n            return f32(value);\n          case 'f16':\n            return f16(value);\n          case 'u32':\n            return u32(value);\n          case 'u16':\n            return u16(value);\n          case 'u8':\n            return u8(value);\n          case 'i32':\n            return i32(value);\n          case 'i16':\n            return i16(value);\n          case 'i8':\n            return i8(value);\n          case 'bool':\n            return bool(value !== 0);\n        }\n        break;\n      case 'bigint':\n        switch (this.kind) {\n          case 'abstract-int':\n            return abstractInt(value);\n          case 'bool':\n            return bool(value !== 0n);\n        }\n        break;\n    }\n    unreachable(`Scalar<${this.kind}>.create() does not support ${typeof value}`);\n  }\n}\n\n/** VectorType describes the type of WGSL Vector. */\nexport class VectorType {\n  readonly width: number; // Number of elements in the vector\n  readonly elementType: ScalarType; // Element type\n\n  // Maps a string representation of a vector type to vector type.\n  private static instances = new Map<string, VectorType>();\n\n  static create(width: number, elementType: ScalarType): VectorType {\n    const key = `${elementType.toString()} ${width}}`;\n    let ty = this.instances.get(key);\n    if (ty !== undefined) {\n      return ty;\n    }\n    ty = new VectorType(width, elementType);\n    this.instances.set(key, ty);\n    return ty;\n  }\n\n  constructor(width: number, elementType: ScalarType) {\n    this.width = width;\n    this.elementType = elementType;\n  }\n\n  /**\n   * @returns a vector constructed from the values read from the buffer at the\n   * given byte offset\n   */\n  public read(buf: Uint8Array, offset: number): VectorValue {\n    const elements: Array<ScalarValue> = [];\n    for (let i = 0; i < this.width; i++) {\n      elements[i] = this.elementType.read(buf, offset);\n      offset += this.elementType.size;\n    }\n    return new VectorValue(elements);\n  }\n\n  public toString(): string {\n    return `vec${this.width}<${this.elementType}>`;\n  }\n\n  public get size(): number {\n    return this.elementType.size * this.width;\n  }\n\n  public get alignment(): number {\n    return VectorType.alignmentOf(this.width, this.elementType);\n  }\n\n  public static alignmentOf(width: number, elementType: ScalarType) {\n    return elementType.size * (width === 3 ? 4 : width);\n  }\n\n  /** Constructs a Vector of this type with the given values */\n  public create(value: (number | bigint) | readonly (number | bigint)[]): VectorValue {\n    if (value instanceof Array) {\n      assert(value.length === this.width);\n    } else {\n      value = Array(this.width).fill(value);\n    }\n    return new VectorValue(value.map(v => this.elementType.create(v)));\n  }\n}\n\n/** MatrixType describes the type of WGSL Matrix. */\nexport class MatrixType {\n  readonly cols: number; // Number of columns in the Matrix\n  readonly rows: number; // Number of elements per column in the Matrix\n  readonly elementType: ScalarType; // Element type\n\n  // Maps a string representation of a Matrix type to Matrix type.\n  private static instances = new Map<string, MatrixType>();\n\n  static create(cols: number, rows: number, elementType: ScalarType): MatrixType {\n    const key = `${elementType.toString()} ${cols} ${rows}`;\n    let ty = this.instances.get(key);\n    if (ty !== undefined) {\n      return ty;\n    }\n    ty = new MatrixType(cols, rows, elementType);\n    this.instances.set(key, ty);\n    return ty;\n  }\n\n  constructor(cols: number, rows: number, elementType: ScalarType) {\n    this.cols = cols;\n    this.rows = rows;\n    assert(\n      elementType.kind === 'f32' ||\n        elementType.kind === 'f16' ||\n        elementType.kind === 'abstract-float',\n      \"MatrixType can only have elementType of 'f32' or 'f16' or 'abstract-float'\"\n    );\n    this.elementType = elementType;\n  }\n\n  /**\n   * @returns a Matrix constructed from the values read from the buffer at the\n   * given byte offset\n   */\n  public read(buf: Uint8Array, offset: number): MatrixValue {\n    const elements: ScalarValue[][] = [...Array(this.cols)].map(_ => [...Array(this.rows)]);\n    for (let c = 0; c < this.cols; c++) {\n      for (let r = 0; r < this.rows; r++) {\n        elements[c][r] = this.elementType.read(buf, offset);\n        offset += this.elementType.size;\n      }\n\n      // vec3 have one padding element, so need to skip in matrices\n      if (this.rows === 3) {\n        offset += this.elementType.size;\n      }\n    }\n    return new MatrixValue(elements);\n  }\n\n  public toString(): string {\n    return `mat${this.cols}x${this.rows}<${this.elementType}>`;\n  }\n\n  public get size(): number {\n    return VectorType.alignmentOf(this.rows, this.elementType) * this.cols;\n  }\n\n  public get alignment(): number {\n    return VectorType.alignmentOf(this.rows, this.elementType);\n  }\n\n  /** Constructs a Matrix of this type with the given values */\n  public create(value: (number | bigint) | readonly (number | bigint)[]): MatrixValue {\n    if (value instanceof Array) {\n      assert(value.length === this.cols * this.rows);\n    } else {\n      value = Array(this.cols * this.rows).fill(value);\n    }\n    const columns: (number | bigint)[][] = [];\n    for (let i = 0; i < this.cols; i++) {\n      const start = i * this.rows;\n      columns.push(value.slice(start, start + this.rows));\n    }\n    return new MatrixValue(columns.map(c => c.map(v => this.elementType.create(v))));\n  }\n}\n\n/** ArrayType describes the type of WGSL Array. */\nexport class ArrayType {\n  readonly count: number; // Number of elements in the array. Zero represents a runtime-sized array.\n  readonly elementType: Type; // Element type\n\n  // Maps a string representation of a array type to array type.\n  private static instances = new Map<string, ArrayType>();\n\n  static create(count: number, elementType: Type): ArrayType {\n    const key = `${elementType.toString()} ${count}`;\n    let ty = this.instances.get(key);\n    if (ty !== undefined) {\n      return ty;\n    }\n    ty = new ArrayType(count, elementType);\n    this.instances.set(key, ty);\n    return ty;\n  }\n\n  constructor(count: number, elementType: Type) {\n    this.count = count;\n    this.elementType = elementType;\n  }\n\n  /**\n   * @returns a array constructed from the values read from the buffer at the\n   * given byte offset\n   */\n  public read(buf: Uint8Array, offset: number): ArrayValue {\n    const elements: Array<Value> = [];\n\n    for (let i = 0; i < this.count; i++) {\n      elements[i] = this.elementType.read(buf, offset);\n      offset += this.stride;\n    }\n    return new ArrayValue(elements);\n  }\n\n  public toString(): string {\n    return this.count !== 0\n      ? `array<${this.elementType}, ${this.count}>`\n      : `array<${this.elementType}>`;\n  }\n\n  public get stride(): number {\n    return align(this.elementType.size, this.elementType.alignment);\n  }\n\n  public get size(): number {\n    return this.stride * this.count;\n  }\n\n  public get alignment(): number {\n    return this.elementType.alignment;\n  }\n\n  /** Constructs an Array of this type with the given values */\n  public create(value: (number | bigint) | readonly (number | bigint)[]): ArrayValue {\n    if (value instanceof Array) {\n      assert(value.length === this.count);\n    } else {\n      value = Array(this.count).fill(value);\n    }\n    return new ArrayValue(value.map(v => this.elementType.create(v)));\n  }\n}\n\n/** ArrayElementType infers the element type of the indexable type A */\ntype ArrayElementType<A> = A extends { [index: number]: infer T } ? T : never;\n\n/** Copy bytes from `buf` at `offset` into the working data, then read it out using `workingDataOut` */\nfunction valueFromBytes<A extends TypedArrayBufferView>(\n  workingDataOut: A,\n  buf: Uint8Array,\n  offset: number\n): ArrayElementType<A> {\n  for (let i = 0; i < workingDataOut.BYTES_PER_ELEMENT; ++i) {\n    workingDataU8[i] = buf[offset + i];\n  }\n  return workingDataOut[0] as ArrayElementType<A>;\n}\n\nconst abstractIntType = new ScalarType('abstract-int', 8, true, (buf: Uint8Array, offset: number) =>\n  abstractInt(valueFromBytes(workingDataI64, buf, offset))\n);\nconst i32Type = new ScalarType('i32', 4, true, (buf: Uint8Array, offset: number) =>\n  i32(valueFromBytes(workingDataI32, buf, offset))\n);\nconst u32Type = new ScalarType('u32', 4, false, (buf: Uint8Array, offset: number) =>\n  u32(valueFromBytes(workingDataU32, buf, offset))\n);\nconst i16Type = new ScalarType('i16', 2, true, (buf: Uint8Array, offset: number) =>\n  i16(valueFromBytes(workingDataI16, buf, offset))\n);\nconst u16Type = new ScalarType('u16', 2, false, (buf: Uint8Array, offset: number) =>\n  u16(valueFromBytes(workingDataU16, buf, offset))\n);\nconst i8Type = new ScalarType('i8', 1, true, (buf: Uint8Array, offset: number) =>\n  i8(valueFromBytes(workingDataI8, buf, offset))\n);\nconst u8Type = new ScalarType('u8', 1, false, (buf: Uint8Array, offset: number) =>\n  u8(valueFromBytes(workingDataU8, buf, offset))\n);\nconst abstractFloatType = new ScalarType(\n  'abstract-float',\n  8,\n  true,\n  (buf: Uint8Array, offset: number) => abstractFloat(valueFromBytes(workingDataF64, buf, offset))\n);\nconst f64Type = new ScalarType('f64', 8, true, (buf: Uint8Array, offset: number) =>\n  f64(valueFromBytes(workingDataF64, buf, offset))\n);\nconst f32Type = new ScalarType('f32', 4, true, (buf: Uint8Array, offset: number) =>\n  f32(valueFromBytes(workingDataF32, buf, offset))\n);\nconst f16Type = new ScalarType('f16', 2, true, (buf: Uint8Array, offset: number) =>\n  f16Bits(valueFromBytes(workingDataU16, buf, offset))\n);\nconst boolType = new ScalarType('bool', 4, false, (buf: Uint8Array, offset: number) =>\n  bool(valueFromBytes(workingDataU32, buf, offset) !== 0)\n);\n\n/** Type is a ScalarType, VectorType, MatrixType or ArrayType. */\nexport type Type = ScalarType | VectorType | MatrixType | ArrayType;\n\n/** Type holds pre-declared Types along with helper constructor functions. */\nexport const Type = {\n  abstractInt: abstractIntType,\n  'abstract-int': abstractIntType,\n  i32: i32Type,\n  u32: u32Type,\n  i16: i16Type,\n  u16: u16Type,\n  i8: i8Type,\n  u8: u8Type,\n\n  abstractFloat: abstractFloatType,\n  'abstract-float': abstractFloatType,\n  f64: f64Type,\n  f32: f32Type,\n  f16: f16Type,\n\n  bool: boolType,\n\n  vec: (width: number, elementType: ScalarType) => VectorType.create(width, elementType),\n\n  vec2ai: VectorType.create(2, abstractIntType),\n  vec2i: VectorType.create(2, i32Type),\n  vec2u: VectorType.create(2, u32Type),\n  vec2af: VectorType.create(2, abstractFloatType),\n  vec2f: VectorType.create(2, f32Type),\n  vec2h: VectorType.create(2, f16Type),\n  vec3ai: VectorType.create(3, abstractIntType),\n  vec3i: VectorType.create(3, i32Type),\n  vec3u: VectorType.create(3, u32Type),\n  vec3af: VectorType.create(3, abstractFloatType),\n  vec3f: VectorType.create(3, f32Type),\n  vec3h: VectorType.create(3, f16Type),\n  vec4ai: VectorType.create(4, abstractIntType),\n  vec4i: VectorType.create(4, i32Type),\n  vec4u: VectorType.create(4, u32Type),\n  vec4af: VectorType.create(4, abstractFloatType),\n  vec4f: VectorType.create(4, f32Type),\n  vec4h: VectorType.create(4, f16Type),\n\n  mat: (cols: number, rows: number, elementType: ScalarType) =>\n    MatrixType.create(cols, rows, elementType),\n\n  mat2x2f: MatrixType.create(2, 2, f32Type),\n  mat2x2h: MatrixType.create(2, 2, f16Type),\n  mat3x2f: MatrixType.create(3, 2, f32Type),\n  mat3x2h: MatrixType.create(3, 2, f16Type),\n  mat4x2f: MatrixType.create(4, 2, f32Type),\n  mat4x2h: MatrixType.create(4, 2, f16Type),\n  mat2x3f: MatrixType.create(2, 3, f32Type),\n  mat2x3h: MatrixType.create(2, 3, f16Type),\n  mat3x3f: MatrixType.create(3, 3, f32Type),\n  mat3x3h: MatrixType.create(3, 3, f16Type),\n  mat4x3f: MatrixType.create(4, 3, f32Type),\n  mat4x3h: MatrixType.create(4, 3, f16Type),\n  mat2x4f: MatrixType.create(2, 4, f32Type),\n  mat2x4h: MatrixType.create(2, 4, f16Type),\n  mat3x4f: MatrixType.create(3, 4, f32Type),\n  mat3x4h: MatrixType.create(3, 4, f16Type),\n  mat4x4f: MatrixType.create(4, 4, f32Type),\n  mat4x4h: MatrixType.create(4, 4, f16Type),\n\n  array: (count: number, elementType: Type) => ArrayType.create(count, elementType),\n};\n\n/** @returns the ScalarType from the ScalarKind */\nexport function scalarType(kind: ScalarKind): ScalarType {\n  switch (kind) {\n    case 'abstract-float':\n      return Type.abstractFloat;\n    case 'f64':\n      return Type.f64;\n    case 'f32':\n      return Type.f32;\n    case 'f16':\n      return Type.f16;\n    case 'u32':\n      return Type.u32;\n    case 'u16':\n      return Type.u16;\n    case 'u8':\n      return Type.u8;\n    case 'abstract-int':\n      return Type.abstractInt;\n    case 'i32':\n      return Type.i32;\n    case 'i16':\n      return Type.i16;\n    case 'i8':\n      return Type.i8;\n    case 'bool':\n      return Type.bool;\n  }\n}\n\n/** @returns the number of scalar (element) types of the given Type */\nexport function numElementsOf(ty: Type): number {\n  if (ty instanceof ScalarType) {\n    return 1;\n  }\n  if (ty instanceof VectorType) {\n    return ty.width;\n  }\n  if (ty instanceof MatrixType) {\n    return ty.cols * ty.rows;\n  }\n  if (ty instanceof ArrayType) {\n    return ty.count;\n  }\n  throw new Error(`unhandled type ${ty}`);\n}\n\n/** @returns the scalar elements of the given Value */\nexport function elementsOf(value: Value): Value[] {\n  if (isScalarValue(value)) {\n    return [value];\n  }\n  if (value instanceof VectorValue) {\n    return value.elements;\n  }\n  if (value instanceof MatrixValue) {\n    return value.elements.flat();\n  }\n  if (value instanceof ArrayValue) {\n    return value.elements;\n  }\n  throw new Error(`unhandled value ${value}`);\n}\n\n/** @returns the scalar elements of the given Value */\nexport function scalarElementsOf(value: Value): ScalarValue[] {\n  if (isScalarValue(value)) {\n    return [value];\n  }\n  if (value instanceof VectorValue) {\n    return value.elements;\n  }\n  if (value instanceof MatrixValue) {\n    return value.elements.flat();\n  }\n  if (value instanceof ArrayValue) {\n    return value.elements.map(els => scalarElementsOf(els)).flat();\n  }\n  throw new Error(`unhandled value ${value}`);\n}\n\n/** @returns the inner element type of the given type */\nexport function elementTypeOf(t: Type) {\n  if (t instanceof ScalarType) {\n    return t;\n  }\n  return t.elementType;\n}\n\n/** @returns the scalar (element) type of the given Type */\nexport function scalarTypeOf(ty: Type): ScalarType {\n  if (ty instanceof ScalarType) {\n    return ty;\n  }\n  if (ty instanceof VectorType) {\n    return ty.elementType;\n  }\n  if (ty instanceof MatrixType) {\n    return ty.elementType;\n  }\n  if (ty instanceof ArrayType) {\n    return scalarTypeOf(ty.elementType);\n  }\n  throw new Error(`unhandled type ${ty}`);\n}\n\nfunction hex(sizeInBytes: number, bitsLow: number, bitsHigh?: number) {\n  let hex = '';\n  workingDataU32[0] = bitsLow;\n  if (bitsHigh !== undefined) {\n    workingDataU32[1] = bitsHigh;\n  }\n  for (let i = 0; i < sizeInBytes; ++i) {\n    hex = workingDataU8[i].toString(16).padStart(2, '0') + hex;\n  }\n  return `0x${hex}`;\n}\n\nfunction withPoint(x: number) {\n  const str = `${x}`;\n  return str.indexOf('.') > 0 || str.indexOf('e') > 0 ? str : `${str}.0`;\n}\n\n/** Class that encapsulates a single abstract-int value. */\nexport class AbstractIntValue {\n  readonly value: bigint; // The abstract-integer value\n  readonly bitsLow: number; // The low 32 bits of the abstract-integer value.\n  readonly bitsHigh: number; // The high 32 bits of the abstract-integer value.\n  readonly type = Type.abstractInt; // The type of the value.\n\n  public constructor(value: bigint, bitsLow: number, bitsHigh: number) {\n    this.value = value;\n    this.bitsLow = bitsLow;\n    this.bitsHigh = bitsHigh;\n  }\n\n  /**\n   * Copies the scalar value to the buffer at the provided byte offset.\n   * @param buffer the destination buffer\n   * @param offset the offset in buffer, in units of `buffer`\n   */\n  public copyTo(buffer: TypedArrayBufferView, offset: number) {\n    workingDataU32[0] = this.bitsLow;\n    workingDataU32[1] = this.bitsHigh;\n    for (let i = 0; i < 8; i++) {\n      buffer[offset + i] = workingDataU8[i];\n    }\n  }\n\n  /** @returns the WGSL representation of this scalar value */\n  public wgsl(): string {\n    // WGSL parses negative numbers as a negated positive.\n    // This means '-9223372036854775808' parses as `-' & '9223372036854775808', so must be written as\n    // '(-9223372036854775807 - 1)' in WGSL, because '9223372036854775808' is not a valid AbstractInt.\n    if (this.value === -9223372036854775808n) {\n      return `(-9223372036854775807 - 1)`;\n    }\n    return `${this.value}`;\n  }\n\n  public toString(): string {\n    return `${Colors.bold(this.value.toString())} (${hex(8, this.bitsLow, this.bitsHigh)})`;\n  }\n}\n\n/** Class that encapsulates a single abstract-float value. */\nexport class AbstractFloatValue {\n  readonly value: number; // The f32 value\n  readonly bitsLow: number; // The low 32 bits of the abstract-float value.\n  readonly bitsHigh: number; // The high 32 bits of the abstract-float value.\n  readonly type = Type.abstractFloat; // The type of the value.\n\n  public constructor(value: number, bitsLow: number, bitsHigh: number) {\n    this.value = value;\n    this.bitsLow = bitsLow;\n    this.bitsHigh = bitsHigh;\n  }\n\n  /**\n   * Copies the scalar value to the buffer at the provided byte offset.\n   * @param buffer the destination buffer\n   * @param offset the offset in buffer, in units of `buffer`\n   */\n  public copyTo(buffer: TypedArrayBufferView, offset: number) {\n    workingDataU32[0] = this.bitsLow;\n    workingDataU32[1] = this.bitsHigh;\n    for (let i = 0; i < 8; i++) {\n      buffer[offset + i] = workingDataU8[i];\n    }\n  }\n\n  /** @returns the WGSL representation of this scalar value */\n  public wgsl(): string {\n    return `${withPoint(this.value)}`;\n  }\n\n  public toString(): string {\n    switch (this.value) {\n      case Infinity:\n      case -Infinity:\n        return Colors.bold(this.value.toString());\n      default: {\n        let str = this.value.toString();\n        str = str.indexOf('.') > 0 || str.indexOf('e') > 0 ? str : `${str}.0`;\n        return isSubnormalNumberF64(this.value.valueOf())\n          ? `${Colors.bold(str)} (${hex(8, this.bitsLow, this.bitsHigh)} subnormal)`\n          : `${Colors.bold(str)} (${hex(8, this.bitsLow, this.bitsHigh)})`;\n      }\n    }\n  }\n}\n\n/** Class that encapsulates a single i32 value. */\nexport class I32Value {\n  readonly value: number; // The i32 value\n  readonly bits: number; // The i32 value, bitcast to a 32-bit integer.\n  readonly type = Type.i32; // The type of the value.\n\n  public constructor(value: number, bits: number) {\n    this.value = value;\n    this.bits = bits;\n  }\n\n  /**\n   * Copies the scalar value to the buffer at the provided byte offset.\n   * @param buffer the destination buffer\n   * @param offset the offset in buffer, in units of `buffer`\n   */\n  public copyTo(buffer: TypedArrayBufferView, offset: number) {\n    workingDataU32[0] = this.bits;\n    for (let i = 0; i < 4; i++) {\n      buffer[offset + i] = workingDataU8[i];\n    }\n  }\n\n  /** @returns the WGSL representation of this scalar value */\n  public wgsl(): string {\n    return `i32(${this.value})`;\n  }\n\n  public toString(): string {\n    return `${Colors.bold(this.value.toString())} (${hex(4, this.bits)})`;\n  }\n}\n\n/** Class that encapsulates a single u32 value. */\nexport class U32Value {\n  readonly value: number; // The u32 value\n  readonly type = Type.u32; // The type of the value.\n\n  public constructor(value: number) {\n    this.value = value;\n  }\n\n  /**\n   * Copies the scalar value to the buffer at the provided byte offset.\n   * @param buffer the destination buffer\n   * @param offset the offset in buffer, in units of `buffer`\n   */\n  public copyTo(buffer: TypedArrayBufferView, offset: number) {\n    workingDataU32[0] = this.value;\n    for (let i = 0; i < 4; i++) {\n      buffer[offset + i] = workingDataU8[i];\n    }\n  }\n\n  /** @returns the WGSL representation of this scalar value */\n  public wgsl(): string {\n    return `${this.value}u`;\n  }\n\n  public toString(): string {\n    return `${Colors.bold(this.value.toString())} (${hex(4, this.value)})`;\n  }\n}\n\n/**\n * Class that encapsulates a single i16 value.\n * @note type does not exist in WGSL yet\n */\nexport class I16Value {\n  readonly value: number; // The i16 value\n  readonly bits: number; // The i16 value, bitcast to a 16-bit integer.\n  readonly type = Type.i16; // The type of the value.\n\n  public constructor(value: number, bits: number) {\n    this.value = value;\n    this.bits = bits;\n  }\n\n  /**\n   * Copies the scalar value to the buffer at the provided byte offset.\n   * @param buffer the destination buffer\n   * @param offset the offset in buffer, in units of `buffer`\n   */\n  public copyTo(buffer: TypedArrayBufferView, offset: number) {\n    workingDataU16[0] = this.bits;\n    for (let i = 0; i < 4; i++) {\n      buffer[offset + i] = workingDataU8[i];\n    }\n  }\n\n  /** @returns the WGSL representation of this scalar value */\n  public wgsl(): string {\n    return `i16(${this.value})`;\n  }\n\n  public toString(): string {\n    return `${Colors.bold(this.value.toString())} (${hex(2, this.bits)})`;\n  }\n}\n\n/**\n * Class that encapsulates a single u16 value.\n * @note type does not exist in WGSL yet\n */\nexport class U16Value {\n  readonly value: number; // The u16 value\n  readonly type = Type.u16; // The type of the value.\n\n  public constructor(value: number) {\n    this.value = value;\n  }\n\n  /**\n   * Copies the scalar value to the buffer at the provided byte offset.\n   * @param buffer the destination buffer\n   * @param offset the offset in buffer, in units of `buffer`\n   */\n  public copyTo(buffer: TypedArrayBufferView, offset: number) {\n    workingDataU16[0] = this.value;\n    for (let i = 0; i < 2; i++) {\n      buffer[offset + i] = workingDataU8[i];\n    }\n  }\n\n  /** @returns the WGSL representation of this scalar value */\n  public wgsl(): string {\n    assert(false, 'u16 is not a WGSL type');\n    return `u16(${this.value})`;\n  }\n\n  public toString(): string {\n    return `${Colors.bold(this.value.toString())} (${hex(2, this.value)})`;\n  }\n}\n\n/**\n * Class that encapsulates a single i8 value.\n * @note type does not exist in WGSL yet\n */\nexport class I8Value {\n  readonly value: number; // The i8 value\n  readonly bits: number; // The i8 value, bitcast to a 8-bit integer.\n  readonly type = Type.i8; // The type of the value.\n\n  public constructor(value: number, bits: number) {\n    this.value = value;\n    this.bits = bits;\n  }\n\n  /**\n   * Copies the scalar value to the buffer at the provided byte offset.\n   * @param buffer the destination buffer\n   * @param offset the offset in buffer, in units of `buffer`\n   */\n  public copyTo(buffer: TypedArrayBufferView, offset: number) {\n    workingDataU8[0] = this.bits;\n    for (let i = 0; i < 4; i++) {\n      buffer[offset + i] = workingDataU8[i];\n    }\n  }\n\n  /** @returns the WGSL representation of this scalar value */\n  public wgsl(): string {\n    return `i8(${this.value})`;\n  }\n\n  public toString(): string {\n    return `${Colors.bold(this.value.toString())} (${hex(2, this.bits)})`;\n  }\n}\n\n/**\n * Class that encapsulates a single u8 value.\n * @note type does not exist in WGSL yet\n */\nexport class U8Value {\n  readonly value: number; // The u8 value\n  readonly type = Type.u8; // The type of the value.\n\n  public constructor(value: number) {\n    this.value = value;\n  }\n\n  /**\n   * Copies the scalar value to the buffer at the provided byte offset.\n   * @param buffer the destination buffer\n   * @param offset the offset in buffer, in units of `buffer`\n   */\n  public copyTo(buffer: TypedArrayBufferView, offset: number) {\n    workingDataU8[0] = this.value;\n    for (let i = 0; i < 2; i++) {\n      buffer[offset + i] = workingDataU8[i];\n    }\n  }\n\n  /** @returns the WGSL representation of this scalar value */\n  public wgsl(): string {\n    assert(false, 'u8 is not a WGSL type');\n    return `u8(${this.value})`;\n  }\n\n  public toString(): string {\n    return `${Colors.bold(this.value.toString())} (${hex(2, this.value)})`;\n  }\n}\n\n/**\n * Class that encapsulates a single f64 value\n * @note type does not exist in WGSL yet\n */\nexport class F64Value {\n  readonly value: number; // The f32 value\n  readonly bitsLow: number; // The low 32 bits of the abstract-float value.\n  readonly bitsHigh: number; // The high 32 bits of the abstract-float value.\n  readonly type = Type.f64; // The type of the value.\n\n  public constructor(value: number, bitsLow: number, bitsHigh: number) {\n    this.value = value;\n    this.bitsLow = bitsLow;\n    this.bitsHigh = bitsHigh;\n  }\n\n  /**\n   * Copies the scalar value to the buffer at the provided byte offset.\n   * @param buffer the destination buffer\n   * @param offset the offset in buffer, in units of `buffer`\n   */\n  public copyTo(buffer: TypedArrayBufferView, offset: number) {\n    workingDataU32[0] = this.bitsLow;\n    workingDataU32[1] = this.bitsHigh;\n    for (let i = 0; i < 8; i++) {\n      buffer[offset + i] = workingDataU8[i];\n    }\n  }\n\n  /** @returns the WGSL representation of this scalar value */\n  public wgsl(): string {\n    assert(false, 'f64 is not a WGSL type');\n    return `${withPoint(this.value)}`;\n  }\n\n  public toString(): string {\n    switch (this.value) {\n      case Infinity:\n      case -Infinity:\n        return Colors.bold(this.value.toString());\n      default: {\n        let str = this.value.toString();\n        str = str.indexOf('.') > 0 || str.indexOf('e') > 0 ? str : `${str}.0`;\n        return isSubnormalNumberF64(this.value.valueOf())\n          ? `${Colors.bold(str)} (${hex(8, this.bitsLow, this.bitsHigh)} subnormal)`\n          : `${Colors.bold(str)} (${hex(8, this.bitsLow, this.bitsHigh)})`;\n      }\n    }\n  }\n}\n\n/** Class that encapsulates a single f32 value. */\nexport class F32Value {\n  readonly value: number; // The f32 value\n  readonly bits: number; // The f32 value, bitcast to a 32-bit integer.\n  readonly type = Type.f32; // The type of the value.\n\n  public constructor(value: number, bits: number) {\n    this.value = value;\n    this.bits = bits;\n  }\n\n  /**\n   * Copies the scalar value to the buffer at the provided byte offset.\n   * @param buffer the destination buffer\n   * @param offset the offset in buffer, in units of `buffer`\n   */\n  public copyTo(buffer: TypedArrayBufferView, offset: number) {\n    workingDataU32[0] = this.bits;\n    for (let i = 0; i < 4; i++) {\n      buffer[offset + i] = workingDataU8[i];\n    }\n  }\n\n  /** @returns the WGSL representation of this scalar value */\n  public wgsl(): string {\n    return `${withPoint(this.value)}f`;\n  }\n\n  public toString(): string {\n    switch (this.value) {\n      case Infinity:\n      case -Infinity:\n        return Colors.bold(this.value.toString());\n      default: {\n        let str = this.value.toString();\n        str = str.indexOf('.') > 0 || str.indexOf('e') > 0 ? str : `${str}.0`;\n        return isSubnormalNumberF32(this.value.valueOf())\n          ? `${Colors.bold(str)} (${hex(4, this.bits)} subnormal)`\n          : `${Colors.bold(str)} (${hex(4, this.bits)})`;\n      }\n    }\n  }\n}\n\n/** Class that encapsulates a single f16 value. */\nexport class F16Value {\n  readonly value: number; // The f16 value\n  readonly bits: number; // The f16 value, bitcast to a 16-bit integer.\n  readonly type = Type.f16; // The type of the value.\n\n  public constructor(value: number, bits: number) {\n    this.value = value;\n    this.bits = bits;\n  }\n\n  /**\n   * Copies the scalar value to the buffer at the provided byte offset.\n   * @param buffer the destination buffer\n   * @param offset the offset in buffer, in units of `buffer`\n   */\n  public copyTo(buffer: TypedArrayBufferView, offset: number) {\n    workingDataU16[0] = this.bits;\n    for (let i = 0; i < 2; i++) {\n      buffer[offset + i] = workingDataU8[i];\n    }\n  }\n\n  /** @returns the WGSL representation of this scalar value */\n  public wgsl(): string {\n    return `${withPoint(this.value)}h`;\n  }\n\n  public toString(): string {\n    switch (this.value) {\n      case Infinity:\n      case -Infinity:\n        return Colors.bold(this.value.toString());\n      default: {\n        let str = this.value.toString();\n        str = str.indexOf('.') > 0 || str.indexOf('e') > 0 ? str : `${str}.0`;\n        return isSubnormalNumberF16(this.value.valueOf())\n          ? `${Colors.bold(str)} (${hex(2, this.bits)} subnormal)`\n          : `${Colors.bold(str)} (${hex(2, this.bits)})`;\n      }\n    }\n  }\n}\n/** Class that encapsulates a single bool value. */\nexport class BoolValue {\n  readonly value: boolean; // The bool value\n  readonly type = Type.bool; // The type of the value.\n\n  public constructor(value: boolean) {\n    this.value = value;\n  }\n\n  /**\n   * Copies the scalar value to the buffer at the provided byte offset.\n   * @param buffer the destination buffer\n   * @param offset the offset in buffer, in units of `buffer`\n   */\n  public copyTo(buffer: TypedArrayBufferView, offset: number) {\n    buffer[offset] = this.value ? 1 : 0;\n  }\n\n  /** @returns the WGSL representation of this scalar value */\n  public wgsl(): string {\n    return this.value.toString();\n  }\n\n  public toString(): string {\n    return Colors.bold(this.value.toString());\n  }\n}\n\n/** Scalar represents all the scalar value types */\nexport type ScalarValue =\n  | AbstractIntValue\n  | AbstractFloatValue\n  | I32Value\n  | U32Value\n  | I16Value\n  | U16Value\n  | I8Value\n  | U8Value\n  | F64Value\n  | F32Value\n  | F16Value\n  | BoolValue;\n\nexport interface ScalarBuilder<T> {\n  (value: T): ScalarValue;\n}\n\nexport function isScalarValue(value: object): value is ScalarValue {\n  return (\n    value instanceof AbstractIntValue ||\n    value instanceof AbstractFloatValue ||\n    value instanceof I32Value ||\n    value instanceof U32Value ||\n    value instanceof I16Value ||\n    value instanceof U16Value ||\n    value instanceof I8Value ||\n    value instanceof U8Value ||\n    value instanceof F64Value ||\n    value instanceof F32Value ||\n    value instanceof F16Value ||\n    value instanceof BoolValue\n  );\n}\n\n/** Create an AbstractInt from a numeric value, a JS `bigint`. */\nexport function abstractInt(value: bigint) {\n  workingDataI64[0] = value;\n  return new AbstractIntValue(workingDataI64[0], workingDataU32[0], workingDataU32[1]);\n}\n\n/** Create an AbstractInt from a bit representation, a uint64 represented as a JS `bigint`. */\nexport function abstractIntBits(value: bigint) {\n  workingDataU64[0] = value;\n  return new AbstractIntValue(workingDataI64[0], workingDataU32[0], workingDataU32[1]);\n}\n\n/** Create an AbstractFloat from a numeric value, a JS `number`. */\nexport function abstractFloat(value: number) {\n  workingDataF64[0] = value;\n  return new AbstractFloatValue(workingDataF64[0], workingDataU32[0], workingDataU32[1]);\n}\n\n/** Create an i32 from a numeric value, a JS `number`. */\nexport function i32(value: number) {\n  workingDataI32[0] = value;\n  return new I32Value(workingDataI32[0], workingDataU32[0]);\n}\n\n/** Create an i32 from a bit representation, a uint32 represented as a JS `number`. */\nexport function i32Bits(bits: number) {\n  workingDataU32[0] = bits;\n  return new I32Value(workingDataI32[0], workingDataU32[0]);\n}\n\n/** Create a u32 from a numeric value, a JS `number`. */\nexport function u32(value: number) {\n  workingDataU32[0] = value;\n  return new U32Value(workingDataU32[0]);\n}\n\n/** Create a u32 from a bit representation, a uint32 represented as a JS `number`. */\nexport function u32Bits(bits: number) {\n  workingDataU32[0] = bits;\n  return new U32Value(workingDataU32[0]);\n}\n\n/** Create an i16 from a numeric value, a JS `number`. */\nexport function i16(value: number) {\n  workingDataI16[0] = value;\n  return new I16Value(workingDataI16[0], workingDataU16[0]);\n}\n\n/** Create a u16 from a numeric value, a JS `number`. */\nexport function u16(value: number) {\n  workingDataU16[0] = value;\n  return new U16Value(workingDataU16[0]);\n}\n\n/** Create an i8 from a numeric value, a JS `number`. */\nexport function i8(value: number) {\n  workingDataI8[0] = value;\n  return new I8Value(workingDataI8[0], workingDataU8[0]);\n}\n\n/** Create a u8 from a numeric value, a JS `number`. */\nexport function u8(value: number) {\n  workingDataU8[0] = value;\n  return new U8Value(workingDataU8[0]);\n}\n\n/** Create an f64 from a numeric value, a JS `number`. */\nexport function f64(value: number) {\n  workingDataF64[0] = value;\n  return new F64Value(workingDataF64[0], workingDataU32[0], workingDataU32[1]);\n}\n\n/** Create an f32 from a numeric value, a JS `number`. */\nexport function f32(value: number) {\n  workingDataF32[0] = value;\n  return new F32Value(workingDataF32[0], workingDataU32[0]);\n}\n\n/** Create an f32 from a bit representation, a uint32 represented as a JS `number`. */\nexport function f32Bits(bits: number) {\n  workingDataU32[0] = bits;\n  return new F32Value(workingDataF32[0], workingDataU32[0]);\n}\n\n/** Create an f16 from a numeric value, a JS `number`. */\nexport function f16(value: number) {\n  workingDataF16[0] = value;\n  return new F16Value(workingDataF16[0], workingDataU16[0]);\n}\n\n/** Create an f16 from a bit representation, a uint16 represented as a JS `number`. */\nexport function f16Bits(bits: number) {\n  workingDataU16[0] = bits;\n  return new F16Value(workingDataF16[0], workingDataU16[0]);\n}\n\n/** Create a boolean value. */\nexport function bool(value: boolean): ScalarValue {\n  return new BoolValue(value);\n}\n\n/** A 'true' literal value */\nexport const True = bool(true);\n\n/** A 'false' literal value */\nexport const False = bool(false);\n\n/**\n * Class that encapsulates a vector value.\n */\nexport class VectorValue {\n  readonly elements: Array<ScalarValue>;\n  readonly type: VectorType;\n\n  public constructor(elements: Array<ScalarValue>) {\n    if (elements.length < 2 || elements.length > 4) {\n      throw new Error(`vector element count must be between 2 and 4, got ${elements.length}`);\n    }\n    for (let i = 1; i < elements.length; i++) {\n      const a = elements[0].type;\n      const b = elements[i].type;\n      if (a !== b) {\n        throw new Error(\n          `cannot mix vector element types. Found elements with types '${a}' and '${b}'`\n        );\n      }\n    }\n    this.elements = elements;\n    this.type = VectorType.create(elements.length, elements[0].type);\n  }\n\n  /**\n   * Copies the vector value to the Uint8Array buffer at the provided byte offset.\n   * @param buffer the destination buffer\n   * @param offset the byte offset within buffer\n   */\n  public copyTo(buffer: Uint8Array, offset: number) {\n    for (const element of this.elements) {\n      element.copyTo(buffer, offset);\n      offset += this.type.elementType.size;\n    }\n  }\n\n  /**\n   * @returns the WGSL representation of this vector value\n   */\n  public wgsl(): string {\n    const els = this.elements.map(v => v.wgsl()).join(', ');\n    return `vec${this.type.width}(${els})`;\n  }\n\n  public toString(): string {\n    return `${this.type}(${this.elements.map(e => e.toString()).join(', ')})`;\n  }\n\n  public get x() {\n    assert(0 < this.elements.length);\n    return this.elements[0];\n  }\n\n  public get y() {\n    assert(1 < this.elements.length);\n    return this.elements[1];\n  }\n\n  public get z() {\n    assert(2 < this.elements.length);\n    return this.elements[2];\n  }\n\n  public get w() {\n    assert(3 < this.elements.length);\n    return this.elements[3];\n  }\n}\n\n/** Helper for constructing a new vector with the provided values */\nexport function vec(...elements: ScalarValue[]) {\n  return new VectorValue(elements);\n}\n\n/** Helper for constructing a new two-element vector with the provided values */\nexport function vec2(x: ScalarValue, y: ScalarValue) {\n  return new VectorValue([x, y]);\n}\n\n/** Helper for constructing a new three-element vector with the provided values */\nexport function vec3(x: ScalarValue, y: ScalarValue, z: ScalarValue) {\n  return new VectorValue([x, y, z]);\n}\n\n/** Helper for constructing a new four-element vector with the provided values */\nexport function vec4(x: ScalarValue, y: ScalarValue, z: ScalarValue, w: ScalarValue) {\n  return new VectorValue([x, y, z, w]);\n}\n\n/**\n * Helper for constructing Vectors from arrays of numbers\n *\n * @param v array of numbers to be converted, must contain 2, 3 or 4 elements\n * @param op function to convert from number to Scalar, e.g. 'f32`\n */\nexport function toVector(v: readonly number[], op: (n: number) => ScalarValue): VectorValue {\n  switch (v.length) {\n    case 2:\n      return vec2(op(v[0]), op(v[1]));\n    case 3:\n      return vec3(op(v[0]), op(v[1]), op(v[2]));\n    case 4:\n      return vec4(op(v[0]), op(v[1]), op(v[2]), op(v[3]));\n  }\n  unreachable(`input to 'toVector' must contain 2, 3, or 4 elements`);\n}\n\n/**\n * Class that encapsulates a Matrix value.\n */\nexport class MatrixValue {\n  readonly elements: ScalarValue[][];\n  readonly type: MatrixType;\n\n  public constructor(elements: Array<Array<ScalarValue>>) {\n    const num_cols = elements.length;\n    if (num_cols < 2 || num_cols > 4) {\n      throw new Error(`matrix cols count must be between 2 and 4, got ${num_cols}`);\n    }\n\n    const num_rows = elements[0].length;\n    if (!elements.every(c => c.length === num_rows)) {\n      throw new Error(`cannot mix matrix column lengths`);\n    }\n\n    if (num_rows < 2 || num_rows > 4) {\n      throw new Error(`matrix rows count must be between 2 and 4, got ${num_rows}`);\n    }\n\n    const elem_type = elements[0][0].type;\n    if (!elements.every(c => c.every(r => objectEquals(r.type, elem_type)))) {\n      throw new Error(`cannot mix matrix element types`);\n    }\n\n    this.elements = elements;\n    this.type = MatrixType.create(num_cols, num_rows, elem_type);\n  }\n\n  /**\n   * Copies the matrix value to the Uint8Array buffer at the provided byte offset.\n   * @param buffer the destination buffer\n   * @param offset the byte offset within buffer\n   */\n  public copyTo(buffer: Uint8Array, offset: number) {\n    for (let i = 0; i < this.type.cols; i++) {\n      for (let j = 0; j < this.type.rows; j++) {\n        this.elements[i][j].copyTo(buffer, offset);\n        offset += this.type.elementType.size;\n      }\n\n      // vec3 have one padding element, so need to skip in matrices\n      if (this.type.rows === 3) {\n        offset += this.type.elementType.size;\n      }\n    }\n  }\n\n  /**\n   * @returns the WGSL representation of this matrix value\n   */\n  public wgsl(): string {\n    const els = this.elements.flatMap(c => c.map(r => r.wgsl())).join(', ');\n    return `mat${this.type.cols}x${this.type.rows}(${els})`;\n  }\n\n  public toString(): string {\n    return `${this.type}(${this.elements.map(c => c.join(', ')).join(', ')})`;\n  }\n}\n\n/**\n * Class that encapsulates an Array value.\n */\nexport class ArrayValue {\n  readonly elements: Value[];\n  readonly type: ArrayType;\n\n  public constructor(elements: Array<Value>) {\n    const elem_type = elements[0].type;\n    if (!elements.every(c => elements.every(r => objectEquals(r.type, elem_type)))) {\n      throw new Error(`cannot mix array element types`);\n    }\n\n    this.elements = elements;\n    this.type = ArrayType.create(elements.length, elem_type);\n  }\n\n  /**\n   * Copies the array value to the Uint8Array buffer at the provided byte offset.\n   * @param buffer the destination buffer\n   * @param offset the byte offset within buffer\n   */\n  public copyTo(buffer: Uint8Array, offset: number) {\n    for (const element of this.elements) {\n      element.copyTo(buffer, offset);\n      offset += this.type.elementType.size;\n    }\n  }\n\n  /**\n   * @returns the WGSL representation of this array value\n   */\n  public wgsl(): string {\n    const els = this.elements.map(r => r.wgsl()).join(', ');\n    return isAbstractType(this.type.elementType) ? `array(${els})` : `${this.type}(${els})`;\n  }\n\n  public toString(): string {\n    return this.wgsl();\n  }\n}\n\n/** Helper for constructing an ArrayValue with the provided values */\nexport function array(...elements: Value[]) {\n  return new ArrayValue(elements);\n}\n\n/**\n * Helper for constructing Matrices from arrays of numbers\n *\n * @param m array of array of numbers to be converted, all Array of number must\n *          be of the same length. All Arrays must have 2, 3, or 4 elements.\n * @param op function to convert from number to Scalar, e.g. 'f32`\n */\nexport function toMatrix(m: ROArrayArray<number>, op: (n: number) => ScalarValue): MatrixValue {\n  const cols = m.length;\n  const rows = m[0].length;\n  const elements: ScalarValue[][] = [...Array<ScalarValue[]>(cols)].map(_ => [\n    ...Array<ScalarValue>(rows),\n  ]);\n  for (let i = 0; i < cols; i++) {\n    for (let j = 0; j < rows; j++) {\n      elements[i][j] = op(m[i][j]);\n    }\n  }\n\n  return new MatrixValue(elements);\n}\n\n/** Value is a Scalar, Vector, Matrix or Array value. */\nexport type Value = ScalarValue | VectorValue | MatrixValue | ArrayValue;\n\nexport type SerializedScalarValue = {\n  kind: 'scalar';\n  type: ScalarKind;\n  value: boolean | number;\n};\n\nexport type SerializedVectorValue = {\n  kind: 'vector';\n  type: ScalarKind;\n  value: boolean[] | readonly number[];\n};\n\nexport type SerializedMatrixValue = {\n  kind: 'matrix';\n  type: ScalarKind;\n  value: ROArrayArray<number>;\n};\n\nenum SerializedScalarKind {\n  AbstractFloat,\n  F64,\n  F32,\n  F16,\n  U32,\n  U16,\n  U8,\n  I32,\n  I16,\n  I8,\n  Bool,\n  AbstractInt,\n}\n\n/** serializeScalarKind() serializes a ScalarKind to a BinaryStream */\nfunction serializeScalarKind(s: BinaryStream, v: ScalarKind) {\n  switch (v) {\n    case 'abstract-float':\n      s.writeU8(SerializedScalarKind.AbstractFloat);\n      return;\n    case 'f64':\n      s.writeU8(SerializedScalarKind.F64);\n      return;\n    case 'f32':\n      s.writeU8(SerializedScalarKind.F32);\n      return;\n    case 'f16':\n      s.writeU8(SerializedScalarKind.F16);\n      return;\n    case 'u32':\n      s.writeU8(SerializedScalarKind.U32);\n      return;\n    case 'u16':\n      s.writeU8(SerializedScalarKind.U16);\n      return;\n    case 'u8':\n      s.writeU8(SerializedScalarKind.U8);\n      return;\n    case 'abstract-int':\n      s.writeU8(SerializedScalarKind.AbstractInt);\n      return;\n    case 'i32':\n      s.writeU8(SerializedScalarKind.I32);\n      return;\n    case 'i16':\n      s.writeU8(SerializedScalarKind.I16);\n      return;\n    case 'i8':\n      s.writeU8(SerializedScalarKind.I8);\n      return;\n    case 'bool':\n      s.writeU8(SerializedScalarKind.Bool);\n      return;\n  }\n  unreachable(`Do not know what to write scalar kind = ${v}`);\n}\n\n/** deserializeScalarKind() deserializes a ScalarKind from a BinaryStream */\nfunction deserializeScalarKind(s: BinaryStream): ScalarKind {\n  const kind = s.readU8();\n  switch (kind) {\n    case SerializedScalarKind.AbstractFloat:\n      return 'abstract-float';\n    case SerializedScalarKind.F64:\n      return 'f64';\n    case SerializedScalarKind.F32:\n      return 'f32';\n    case SerializedScalarKind.F16:\n      return 'f16';\n    case SerializedScalarKind.U32:\n      return 'u32';\n    case SerializedScalarKind.U16:\n      return 'u16';\n    case SerializedScalarKind.U8:\n      return 'u8';\n    case SerializedScalarKind.AbstractInt:\n      return 'abstract-int';\n    case SerializedScalarKind.I32:\n      return 'i32';\n    case SerializedScalarKind.I16:\n      return 'i16';\n    case SerializedScalarKind.I8:\n      return 'i8';\n    case SerializedScalarKind.Bool:\n      return 'bool';\n    default:\n      unreachable(`invalid serialized ScalarKind: ${kind}`);\n  }\n}\n\nenum SerializedValueKind {\n  Scalar,\n  Vector,\n  Matrix,\n}\n\n/** serializeValue() serializes a Value to a BinaryStream */\nexport function serializeValue(s: BinaryStream, v: Value) {\n  const serializeScalar = (scalar: ScalarValue, kind: ScalarKind) => {\n    switch (typeof scalar.value) {\n      case 'number':\n        switch (kind) {\n          case 'abstract-float':\n            s.writeF64(scalar.value);\n            return;\n          case 'f64':\n            s.writeF64(scalar.value);\n            return;\n          case 'f32':\n            s.writeF32(scalar.value);\n            return;\n          case 'f16':\n            s.writeF16(scalar.value);\n            return;\n          case 'u32':\n            s.writeU32(scalar.value);\n            return;\n          case 'u16':\n            s.writeU16(scalar.value);\n            return;\n          case 'u8':\n            s.writeU8(scalar.value);\n            return;\n          case 'i32':\n            s.writeI32(scalar.value);\n            return;\n          case 'i16':\n            s.writeI16(scalar.value);\n            return;\n          case 'i8':\n            s.writeI8(scalar.value);\n            return;\n        }\n        break;\n      case 'bigint':\n        switch (kind) {\n          case 'abstract-int':\n            s.writeI64(scalar.value);\n            return;\n        }\n        break;\n      case 'boolean':\n        switch (kind) {\n          case 'bool':\n            s.writeBool(scalar.value);\n            return;\n        }\n        break;\n    }\n  };\n\n  if (isScalarValue(v)) {\n    s.writeU8(SerializedValueKind.Scalar);\n    serializeScalarKind(s, v.type.kind);\n    serializeScalar(v, v.type.kind);\n    return;\n  }\n  if (v instanceof VectorValue) {\n    s.writeU8(SerializedValueKind.Vector);\n    serializeScalarKind(s, v.type.elementType.kind);\n    s.writeU8(v.type.width);\n    for (const element of v.elements) {\n      serializeScalar(element, v.type.elementType.kind);\n    }\n    return;\n  }\n  if (v instanceof MatrixValue) {\n    s.writeU8(SerializedValueKind.Matrix);\n    serializeScalarKind(s, v.type.elementType.kind);\n    s.writeU8(v.type.cols);\n    s.writeU8(v.type.rows);\n    for (const column of v.elements) {\n      for (const element of column) {\n        serializeScalar(element, v.type.elementType.kind);\n      }\n    }\n    return;\n  }\n\n  unreachable(`unhandled value type: ${v}`);\n}\n\n/** deserializeValue() deserializes a Value from a BinaryStream */\nexport function deserializeValue(s: BinaryStream): Value {\n  const deserializeScalar = (kind: ScalarKind) => {\n    switch (kind) {\n      case 'abstract-float':\n        return abstractFloat(s.readF64());\n      case 'f64':\n        return f64(s.readF64());\n      case 'f32':\n        return f32(s.readF32());\n      case 'f16':\n        return f16(s.readF16());\n      case 'u32':\n        return u32(s.readU32());\n      case 'u16':\n        return u16(s.readU16());\n      case 'u8':\n        return u8(s.readU8());\n      case 'abstract-int':\n        return abstractInt(s.readI64());\n      case 'i32':\n        return i32(s.readI32());\n      case 'i16':\n        return i16(s.readI16());\n      case 'i8':\n        return i8(s.readI8());\n      case 'bool':\n        return bool(s.readBool());\n    }\n  };\n  const valueKind = s.readU8();\n  const scalarKind = deserializeScalarKind(s);\n  switch (valueKind) {\n    case SerializedValueKind.Scalar:\n      return deserializeScalar(scalarKind);\n    case SerializedValueKind.Vector: {\n      const width = s.readU8();\n      const scalars = new Array<ScalarValue>(width);\n      for (let i = 0; i < width; i++) {\n        scalars[i] = deserializeScalar(scalarKind);\n      }\n      return new VectorValue(scalars);\n    }\n    case SerializedValueKind.Matrix: {\n      const numCols = s.readU8();\n      const numRows = s.readU8();\n      const columns = new Array<ScalarValue[]>(numCols);\n      for (let c = 0; c < numCols; c++) {\n        columns[c] = new Array<ScalarValue>(numRows);\n        for (let i = 0; i < numRows; i++) {\n          columns[c][i] = deserializeScalar(scalarKind);\n        }\n      }\n      return new MatrixValue(columns);\n    }\n    default:\n      unreachable(`invalid serialized value kind: ${valueKind}`);\n  }\n}\n\n/** @returns if the Value is a float scalar type */\nexport function isFloatValue(v: Value): boolean {\n  return isFloatType(v.type);\n}\n\n/**\n * @returns if `ty` is an abstract numeric type.\n * @note this does not consider composite types.\n * Use elementType() if you want to test the element type.\n */\nexport function isAbstractType(ty: Type): boolean {\n  if (ty instanceof ScalarType) {\n    return ty.kind === 'abstract-float' || ty.kind === 'abstract-int';\n  }\n  return false;\n}\n\n/**\n * @returns if `ty` is a floating point type.\n * @note this does not consider composite types.\n * Use elementType() if you want to test the element type.\n */\nexport function isFloatType(ty: Type): boolean {\n  if (ty instanceof ScalarType) {\n    return (\n      ty.kind === 'abstract-float' || ty.kind === 'f64' || ty.kind === 'f32' || ty.kind === 'f16'\n    );\n  }\n  return false;\n}\n\n/**\n * @returns if `ty` is an unsigned type.\n */\nexport function isUnsignedType(ty: Type): boolean {\n  if (ty instanceof ScalarType) {\n    return ty.kind === 'u8' || ty.kind === 'u16' || ty.kind === 'u32';\n  } else {\n    return isUnsignedType(ty.elementType);\n  }\n}\n\n/** @returns true if an argument of type 'src' can be used for a parameter of type 'dst' */\nexport function isConvertible(src: Type, dst: Type) {\n  if (src === dst) {\n    return true;\n  }\n\n  const widthOf = (ty: Type) => {\n    return ty instanceof VectorType ? ty.width : 1;\n  };\n\n  if (widthOf(src) !== widthOf(dst)) {\n    return false;\n  }\n\n  const elSrc = scalarTypeOf(src);\n  const elDst = scalarTypeOf(dst);\n\n  switch (elSrc.kind) {\n    case 'abstract-float':\n      switch (elDst.kind) {\n        case 'abstract-float':\n        case 'f16':\n        case 'f32':\n        case 'f64':\n          return true;\n        default:\n          return false;\n      }\n    case 'abstract-int':\n      switch (elDst.kind) {\n        case 'abstract-int':\n        case 'abstract-float':\n        case 'f16':\n        case 'f32':\n        case 'f64':\n        case 'u16':\n        case 'u32':\n        case 'u8':\n        case 'i16':\n        case 'i32':\n        case 'i8':\n          return true;\n        default:\n          return false;\n      }\n    default:\n      return false;\n  }\n}\n\n/// All floating-point scalar types\nconst kFloatScalars = [Type.abstractFloat, Type.f32, Type.f16] as const;\n\n/// All floating-point vec2 types\nconst kFloatVec2 = [Type.vec(2, Type.abstractFloat), Type.vec2f, Type.vec2h] as const;\n\n/// All floating-point vec3 types\nconst kFloatVec3 = [Type.vec(3, Type.abstractFloat), Type.vec3f, Type.vec3h] as const;\n\n/// All floating-point vec4 types\nconst kFloatVec4 = [Type.vec(4, Type.abstractFloat), Type.vec4f, Type.vec4h] as const;\n\nexport const kConcreteF32ScalarsAndVectors = [\n  Type.f32,\n  Type.vec2f,\n  Type.vec3f,\n  Type.vec4f,\n] as const;\n\n/// All f16 floating-point scalar and vector types\nexport const kConcreteF16ScalarsAndVectors = [\n  Type.f16,\n  Type.vec2h,\n  Type.vec3h,\n  Type.vec4h,\n] as const;\n\n/// All floating-point vector types\nexport const kFloatVectors = [...kFloatVec2, ...kFloatVec3, ...kFloatVec4] as const;\n\n/// All floating-point scalar and vector types\nexport const kFloatScalarsAndVectors = [...kFloatScalars, ...kFloatVectors] as const;\n\n// Abstract and concrete integer types are not grouped into an 'all' type,\n// because for many validation tests there is a valid conversion of\n// AbstractInt -> AbstractFloat, but not one for the concrete integers. Thus, an\n// AbstractInt literal will be a potentially valid input, whereas the concrete\n// integers will not be. For many tests the pattern is to have separate fixtures\n// for the things that might be valid and those that are never valid.\n\n/// All signed integer vector types\nexport const kConcreteSignedIntegerVectors = [Type.vec2i, Type.vec3i, Type.vec4i] as const;\n\n/// All unsigned integer vector types\nexport const kConcreteUnsignedIntegerVectors = [Type.vec2u, Type.vec3u, Type.vec4u] as const;\n\n/// All concrete integer vector types\nexport const kConcreteIntegerVectors = [\n  ...kConcreteSignedIntegerVectors,\n  ...kConcreteUnsignedIntegerVectors,\n] as const;\n\n/// All signed integer scalar and vector types\nexport const kConcreteSignedIntegerScalarsAndVectors = [\n  Type.i32,\n  ...kConcreteSignedIntegerVectors,\n] as const;\n\n/// All unsigned integer scalar and vector types\nexport const kConcreteUnsignedIntegerScalarsAndVectors = [\n  Type.u32,\n  ...kConcreteUnsignedIntegerVectors,\n] as const;\n\n/// All concrete integer scalar and vector types\nexport const kConcreteIntegerScalarsAndVectors = [\n  ...kConcreteSignedIntegerScalarsAndVectors,\n  ...kConcreteUnsignedIntegerScalarsAndVectors,\n] as const;\n\n/// All types which are convertable to floating-point scalar types.\nexport const kConvertableToFloatScalar = [Type.abstractInt, ...kFloatScalars] as const;\n\n/// All types which are convertable to floating-point vector 2 types.\nexport const kConvertableToFloatVec2 = [Type.vec(2, Type.abstractInt), ...kFloatVec2] as const;\n\n/// All types which are convertable to floating-point vector 3 types.\nexport const kConvertableToFloatVec3 = [Type.vec(3, Type.abstractInt), ...kFloatVec3] as const;\n\n/// All types which are convertable to floating-point vector 4 types.\nexport const kConvertableToFloatVec4 = [Type.vec(4, Type.abstractInt), ...kFloatVec4] as const;\n\n/// All the types which are convertable to floating-point vector types.\nexport const kConvertableToFloatVectors = [\n  Type.vec(2, Type.abstractInt),\n  Type.vec(3, Type.abstractInt),\n  Type.vec(4, Type.abstractInt),\n  ...kFloatVectors,\n] as const;\n\n/// All types which are convertable to floating-point scalar or vector types.\nexport const kConvertableToFloatScalarsAndVectors = [\n  Type.abstractInt,\n  ...kFloatScalars,\n  ...kConvertableToFloatVectors,\n] as const;\n\n/// All the numeric scalar and vector types.\nexport const kAllNumericScalarsAndVectors = [\n  ...kConvertableToFloatScalarsAndVectors,\n  ...kConcreteIntegerScalarsAndVectors,\n] as const;\n\n/// All the concrete integer and floating point scalars and vectors.\nexport const kConcreteNumericScalarsAndVectors = [\n  ...kConcreteIntegerScalarsAndVectors,\n  ...kConcreteF16ScalarsAndVectors,\n  ...kConcreteF32ScalarsAndVectors,\n] as const;\n\n/// All the scalar and vector types.\nexport const kAllScalarsAndVectors = [\n  Type.bool,\n  Type.vec(2, Type.bool),\n  Type.vec(3, Type.bool),\n  Type.vec(4, Type.bool),\n  ...kAllNumericScalarsAndVectors,\n] as const;\n"],"mappings":"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"}