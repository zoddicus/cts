{"version":3,"file":"conversion.js","names":["Colors","assert","objectEquals","unreachable","Float16Array","kBit","cartesianProduct","clamp","correctlyRoundedF16","isFiniteF16","isSubnormalNumberF16","isSubnormalNumberF32","floatAsNormalizedInteger","float","bits","signed","max","Math","pow","round","normalizedIntegerAsFloat","integer","Number","isInteger","float32ToFloatBits","n","signBits","exponentBits","mantissaBits","bias","isFinite","buf","DataView","ArrayBuffer","Float32Array","BYTES_PER_ELEMENT","setFloat32","getUint32","mantissaBitsToDiscard","sign","exp","newBiasedExp","newMantissa","float32ToFloat16Bits","float16BitsToFloat32","float16Bits","floatBitsToNumber","kFloat16Format","kFloat32Format","workingData","workingDataU32","Uint32Array","workingDataU16","Uint16Array","workingDataU8","Uint8Array","workingDataF32","workingDataF16","workingDataI16","Int16Array","workingDataI8","Int8Array","float32BitsToNumber","numberToFloat32Bits","number","fmt","kNonSignBits","kNonSignBitsMask","expAndMantBits","f32BitsWithWrongBias","numberWithWrongBias","numberToFloatBits","floatBitsToNormalULPFromZero","mask_sign","mask_expt","mask_mant","mask_rest","rest","subnormal_or_zero","infinity_or_nan","abs_ulp_from_zero","packRGB9E5UFloat","r","g","b","v","extractMantissaAndExponent","biasedExponent","mantissa","rExp","rOrigMantissa","gExp","gOrigMantissa","bExp","bOrigMantissa","rMantissa","gMantissa","bMantissa","biasedExp","pack2x16float","x","y","generateU16s","contains_subnormals","n_f16s","some","n_u16s","map","f16","contains_poszero","u","positive","zero","contains_negzero","negative","push","undefined","results","Array","p","length","pack2x16snorm","generateI16","floor","min","pack2x16unorm","generateU16","pack4x8snorm","vals","generateI8","idx","pack4x8unorm","generateU8","assertInIntegerRange","gammaCompress","gammaDecompress","float32ToUint32","f32","f32Arr","u32Arr","buffer","uint32ToFloat32","u32","float32ToInt32","i32Arr","Int32Array","uint32ToInt32","float16ToUint16","f16Arr","u16Arr","uint16ToFloat16","u16","float16ToInt16","i16Arr","ScalarType","constructor","kind","size","read","_size","toString","VectorType","width","elementType","offset","elements","i","Vector","vectorTypes","Map","TypeVec","key","ty","get","set","MatrixType","cols","rows","_","c","Matrix","matrixTypes","TypeMat","TypeI32","i32","TypeU32","TypeAbstractFloat","abstractFloat","Float64Array","TypeF64","f64","TypeF32","TypeI16","i16","TypeU16","TypeF16","f16Bits","TypeI8","i8","TypeU8","u8","TypeBool","bool","scalarType","numElementsOf","Error","scalarTypeOf","Scalar","type","value","copyTo","wgsl","withPoint","str","indexOf","bold","Infinity","hex","from","reverse","padStart","join","isFloatValue","valueOf","arr","f32Bits","i32Bits","i16Bits","i8Bits","u32Bits","u16Bits","u8Bits","True","False","reinterpretF64AsU32s","array","u32s","reinterpretU32sAsF64","reinterpretF32AsU32","reinterpretF32AsI32","reinterpretU32AsF32","reinterpretU32AsI32","reinterpretI32AsU32","reinterpretI32AsF32","reinterpretF16AsU16","reinterpretU16AsF16","a","element","els","e","z","w","vec2","vec3","vec4","toVector","op","num_cols","num_rows","every","elem_type","j","flatMap","toMatrix","m","serializeValue","s","deserializeValue","data","buildScalar"],"sources":["../../../src/webgpu/util/conversion.ts"],"sourcesContent":["import { Colors } from '../../common/util/colors.js';\nimport { assert, objectEquals, TypedArrayBufferView, unreachable } from '../../common/util/util.js';\nimport { Float16Array } from '../../external/petamoriken/float16/float16.js';\n\nimport { kBit } from './constants.js';\nimport {\n  cartesianProduct,\n  clamp,\n  correctlyRoundedF16,\n  isFiniteF16,\n  isSubnormalNumberF16,\n  isSubnormalNumberF32,\n} from './math.js';\n\n/**\n * Encodes a JS `number` into a \"normalized\" (unorm/snorm) integer representation with `bits` bits.\n * Input must be between -1 and 1 if signed, or 0 and 1 if unsigned.\n *\n * MAINTENANCE_TODO: See if performance of texel_data improves if this function is pre-specialized\n * for a particular `bits`/`signed`.\n */\nexport function floatAsNormalizedInteger(float: number, bits: number, signed: boolean): number {\n  if (signed) {\n    assert(float >= -1 && float <= 1, () => `${float} out of bounds of snorm`);\n    const max = Math.pow(2, bits - 1) - 1;\n    return Math.round(float * max);\n  } else {\n    assert(float >= 0 && float <= 1, () => `${float} out of bounds of unorm`);\n    const max = Math.pow(2, bits) - 1;\n    return Math.round(float * max);\n  }\n}\n\n/**\n * Decodes a JS `number` from a \"normalized\" (unorm/snorm) integer representation with `bits` bits.\n * Input must be an integer in the range of the specified unorm/snorm type.\n */\nexport function normalizedIntegerAsFloat(integer: number, bits: number, signed: boolean): number {\n  assert(Number.isInteger(integer));\n  if (signed) {\n    const max = Math.pow(2, bits - 1) - 1;\n    assert(integer >= -max - 1 && integer <= max);\n    if (integer === -max - 1) {\n      integer = -max;\n    }\n    return integer / max;\n  } else {\n    const max = Math.pow(2, bits) - 1;\n    assert(integer >= 0 && integer <= max);\n    return integer / max;\n  }\n}\n\n/**\n * Encodes a JS `number` into an IEEE754 floating point number with the specified number of\n * sign, exponent, mantissa bits, and exponent bias.\n * Returns the result as an integer-valued JS `number`.\n *\n * Does not handle clamping, overflow, or denormal inputs.\n * On underflow (result is subnormal), rounds to (signed) zero.\n *\n * MAINTENANCE_TODO: Replace usages of this with numberToFloatBits.\n */\nexport function float32ToFloatBits(\n  n: number,\n  signBits: 0 | 1,\n  exponentBits: number,\n  mantissaBits: number,\n  bias: number\n): number {\n  assert(exponentBits <= 8);\n  assert(mantissaBits <= 23);\n  assert(Number.isFinite(n));\n\n  if (n === 0) {\n    return 0;\n  }\n\n  if (signBits === 0) {\n    assert(n >= 0);\n  }\n\n  const buf = new DataView(new ArrayBuffer(Float32Array.BYTES_PER_ELEMENT));\n  buf.setFloat32(0, n, true);\n  const bits = buf.getUint32(0, true);\n  // bits (32): seeeeeeeefffffffffffffffffffffff\n\n  const mantissaBitsToDiscard = 23 - mantissaBits;\n\n  // 0 or 1\n  const sign = (bits >> 31) & signBits;\n\n  // >> to remove mantissa, & to remove sign, - 127 to remove bias.\n  const exp = ((bits >> 23) & 0xff) - 127;\n\n  // Convert to the new biased exponent.\n  const newBiasedExp = bias + exp;\n  assert(newBiasedExp < 1 << exponentBits, () => `input number ${n} overflows target type`);\n\n  if (newBiasedExp <= 0) {\n    // Result is subnormal or zero. Round to (signed) zero.\n    return sign << (exponentBits + mantissaBits);\n  } else {\n    // Mask only the mantissa, and discard the lower bits.\n    const newMantissa = (bits & 0x7fffff) >> mantissaBitsToDiscard;\n    return (sign << (exponentBits + mantissaBits)) | (newBiasedExp << mantissaBits) | newMantissa;\n  }\n}\n\n/**\n * Encodes a JS `number` into an IEEE754 16 bit floating point number.\n * Returns the result as an integer-valued JS `number`.\n *\n * Does not handle clamping, overflow, or denormal inputs.\n * On underflow (result is subnormal), rounds to (signed) zero.\n */\nexport function float32ToFloat16Bits(n: number) {\n  return float32ToFloatBits(n, 1, 5, 10, 15);\n}\n\n/**\n * Decodes an IEEE754 16 bit floating point number into a JS `number` and returns.\n */\nexport function float16BitsToFloat32(float16Bits: number): number {\n  return floatBitsToNumber(float16Bits, kFloat16Format);\n}\n\ntype FloatFormat = { signed: 0 | 1; exponentBits: number; mantissaBits: number; bias: number };\n\n/** FloatFormat defining IEEE754 32-bit float. */\nexport const kFloat32Format = { signed: 1, exponentBits: 8, mantissaBits: 23, bias: 127 } as const;\n/** FloatFormat defining IEEE754 16-bit float. */\nexport const kFloat16Format = { signed: 1, exponentBits: 5, mantissaBits: 10, bias: 15 } as const;\n\n/**\n * Once-allocated ArrayBuffer/views to avoid overhead of allocation when converting between numeric formats\n *\n * workingData* is shared between multiple functions in this file, so to avoid re-entrancy problems, make sure in\n * functions that use it that they don't call themselves or other functions that use workingData*.\n */\nconst workingData = new ArrayBuffer(4);\nconst workingDataU32 = new Uint32Array(workingData);\nconst workingDataU16 = new Uint16Array(workingData);\nconst workingDataU8 = new Uint8Array(workingData);\nconst workingDataF32 = new Float32Array(workingData);\nconst workingDataF16 = new Float16Array(workingData);\nconst workingDataI16 = new Int16Array(workingData);\nconst workingDataI8 = new Int8Array(workingData);\n\n/** Bitcast u32 (represented as integer Number) to f32 (represented as floating-point Number). */\nexport function float32BitsToNumber(bits: number): number {\n  workingDataU32[0] = bits;\n  return workingDataF32[0];\n}\n/** Bitcast f32 (represented as floating-point Number) to u32 (represented as integer Number). */\nexport function numberToFloat32Bits(number: number): number {\n  workingDataF32[0] = number;\n  return workingDataU32[0];\n}\n\n/**\n * Decodes an IEEE754 float with the supplied format specification into a JS number.\n *\n * The format MUST be no larger than a 32-bit float.\n */\nexport function floatBitsToNumber(bits: number, fmt: FloatFormat): number {\n  // Pad the provided bits out to f32, then convert to a `number` with the wrong bias.\n  // E.g. for f16 to f32:\n  // - f16: S    EEEEE MMMMMMMMMM\n  //        ^ 000^^^^^ ^^^^^^^^^^0000000000000\n  // - f32: S eeeEEEEE MMMMMMMMMMmmmmmmmmmmmmm\n\n  const kNonSignBits = fmt.exponentBits + fmt.mantissaBits;\n  const kNonSignBitsMask = (1 << kNonSignBits) - 1;\n  const expAndMantBits = bits & kNonSignBitsMask;\n  let f32BitsWithWrongBias = expAndMantBits << (kFloat32Format.mantissaBits - fmt.mantissaBits);\n  f32BitsWithWrongBias |= (bits << (31 - kNonSignBits)) & 0x8000_0000;\n  const numberWithWrongBias = float32BitsToNumber(f32BitsWithWrongBias);\n  return numberWithWrongBias * 2 ** (kFloat32Format.bias - fmt.bias);\n}\n\n/**\n * Encodes a JS `number` into an IEEE754 floating point number with the specified format.\n * Returns the result as an integer-valued JS `number`.\n *\n * Does not handle clamping, overflow, or denormal inputs.\n * On underflow (result is subnormal), rounds to (signed) zero.\n */\nexport function numberToFloatBits(number: number, fmt: FloatFormat): number {\n  return float32ToFloatBits(number, fmt.signed, fmt.exponentBits, fmt.mantissaBits, fmt.bias);\n}\n\n/**\n * Given a floating point number (as an integer representing its bits), computes how many ULPs it is\n * from zero.\n *\n * Subnormal numbers are skipped, so that 0 is one ULP from the minimum normal number.\n * Subnormal values are flushed to 0.\n * Positive and negative 0 are both considered to be 0 ULPs from 0.\n */\nexport function floatBitsToNormalULPFromZero(bits: number, fmt: FloatFormat): number {\n  const mask_sign = fmt.signed << (fmt.exponentBits + fmt.mantissaBits);\n  const mask_expt = ((1 << fmt.exponentBits) - 1) << fmt.mantissaBits;\n  const mask_mant = (1 << fmt.mantissaBits) - 1;\n  const mask_rest = mask_expt | mask_mant;\n\n  assert(fmt.exponentBits + fmt.mantissaBits <= 31);\n\n  const sign = bits & mask_sign ? -1 : 1;\n  const rest = bits & mask_rest;\n  const subnormal_or_zero = (bits & mask_expt) === 0;\n  const infinity_or_nan = (bits & mask_expt) === mask_expt;\n  assert(!infinity_or_nan, 'no ulp representation for infinity/nan');\n\n  // The first normal number is mask_mant+1, so subtract mask_mant to make min_normal - zero = 1ULP.\n  const abs_ulp_from_zero = subnormal_or_zero ? 0 : rest - mask_mant;\n  return sign * abs_ulp_from_zero;\n}\n\n/**\n * Encodes three JS `number` values into RGB9E5, returned as an integer-valued JS `number`.\n *\n * RGB9E5 represents three partial-precision floating-point numbers encoded into a single 32-bit\n * value all sharing the same 5-bit exponent.\n * There is no sign bit, and there is a shared 5-bit biased (15) exponent and a 9-bit\n * mantissa for each channel. The mantissa does NOT have an implicit leading \"1.\",\n * and instead has an implicit leading \"0.\".\n */\nexport function packRGB9E5UFloat(r: number, g: number, b: number): number {\n  for (const v of [r, g, b]) {\n    assert(v >= 0 && v < Math.pow(2, 16));\n  }\n\n  const buf = new DataView(new ArrayBuffer(Float32Array.BYTES_PER_ELEMENT));\n  const extractMantissaAndExponent = (n: number) => {\n    const mantissaBits = 9;\n    buf.setFloat32(0, n, true);\n    const bits = buf.getUint32(0, true);\n    // >> to remove mantissa, & to remove sign\n    let biasedExponent = (bits >> 23) & 0xff;\n    const mantissaBitsToDiscard = 23 - mantissaBits;\n    let mantissa = (bits & 0x7fffff) >> mantissaBitsToDiscard;\n\n    // RGB9E5UFloat has an implicit leading 0. instead of a leading 1.,\n    // so we need to move the 1. into the mantissa and bump the exponent.\n    // For float32 encoding, the leading 1 is only present if the biased\n    // exponent is non-zero.\n    if (biasedExponent !== 0) {\n      mantissa = (mantissa >> 1) | 0b100000000;\n      biasedExponent += 1;\n    }\n    return { biasedExponent, mantissa };\n  };\n\n  const { biasedExponent: rExp, mantissa: rOrigMantissa } = extractMantissaAndExponent(r);\n  const { biasedExponent: gExp, mantissa: gOrigMantissa } = extractMantissaAndExponent(g);\n  const { biasedExponent: bExp, mantissa: bOrigMantissa } = extractMantissaAndExponent(b);\n\n  // Use the largest exponent, and shift the mantissa accordingly\n  const exp = Math.max(rExp, gExp, bExp);\n  const rMantissa = rOrigMantissa >> (exp - rExp);\n  const gMantissa = gOrigMantissa >> (exp - gExp);\n  const bMantissa = bOrigMantissa >> (exp - bExp);\n\n  const bias = 15;\n  const biasedExp = exp === 0 ? 0 : exp - 127 + bias;\n  assert(biasedExp >= 0 && biasedExp <= 31);\n  return rMantissa | (gMantissa << 9) | (bMantissa << 18) | (biasedExp << 27);\n}\n\n/**\n * Quantizes two f32s to f16 and then packs them in a u32\n *\n * This should implement the same behaviour as the builtin `pack2x16float` from\n * WGSL.\n *\n * Caller is responsible to ensuring inputs are f32s\n *\n * @param x first f32 to be packed\n * @param y second f32 to be packed\n * @returns an array of possible results for pack2x16float. Elements are either\n *          a number or undefined.\n *          undefined indicates that any value is valid, since the input went\n *          out of bounds.\n */\nexport function pack2x16float(x: number, y: number): (number | undefined)[] {\n  // Generates all possible valid u16 bit fields for a given f32 to f16 conversion.\n  // Assumes FTZ for both the f32 and f16 value is allowed.\n  const generateU16s = (n: number): number[] => {\n    let contains_subnormals = isSubnormalNumberF32(n);\n    const n_f16s = correctlyRoundedF16(n);\n    contains_subnormals ||= n_f16s.some(isSubnormalNumberF16);\n\n    const n_u16s = n_f16s.map(f16 => {\n      workingDataF16[0] = f16;\n      return workingDataU16[0];\n    });\n\n    const contains_poszero = n_u16s.some(u => u === kBit.f16.positive.zero);\n    const contains_negzero = n_u16s.some(u => u === kBit.f16.negative.zero);\n    if (!contains_negzero && (contains_poszero || contains_subnormals)) {\n      n_u16s.push(kBit.f16.negative.zero);\n    }\n\n    if (!contains_poszero && (contains_negzero || contains_subnormals)) {\n      n_u16s.push(kBit.f16.positive.zero);\n    }\n\n    return n_u16s;\n  };\n\n  if (!isFiniteF16(x) || !isFiniteF16(y)) {\n    // This indicates any value is valid, so it isn't worth bothering\n    // calculating the more restrictive possibilities.\n    return [undefined];\n  }\n\n  const results = new Array<number>();\n  for (const p of cartesianProduct(generateU16s(x), generateU16s(y))) {\n    assert(p.length === 2, 'cartesianProduct of 2 arrays returned an entry with not 2 elements');\n    workingDataU16[0] = p[0];\n    workingDataU16[1] = p[1];\n    results.push(workingDataU32[0]);\n  }\n\n  return results;\n}\n\n/**\n * Converts two normalized f32s to i16s and then packs them in a u32\n *\n * This should implement the same behaviour as the builtin `pack2x16snorm` from\n * WGSL.\n *\n * Caller is responsible to ensuring inputs are normalized f32s\n *\n * @param x first f32 to be packed\n * @param y second f32 to be packed\n * @returns a number that is expected result of pack2x16snorm.\n */\nexport function pack2x16snorm(x: number, y: number): number {\n  // Converts f32 to i16 via the pack2x16snorm formula.\n  // FTZ is not explicitly handled, because all subnormals will produce a value\n  // between 0 and 1, but significantly away from the edges, so floor goes to 0.\n  const generateI16 = (n: number): number => {\n    return Math.floor(0.5 + 32767 * Math.min(1, Math.max(-1, n)));\n  };\n\n  workingDataI16[0] = generateI16(x);\n  workingDataI16[1] = generateI16(y);\n\n  return workingDataU32[0];\n}\n\n/**\n * Converts two normalized f32s to u16s and then packs them in a u32\n *\n * This should implement the same behaviour as the builtin `pack2x16unorm` from\n * WGSL.\n *\n * Caller is responsible to ensuring inputs are normalized f32s\n *\n * @param x first f32 to be packed\n * @param y second f32 to be packed\n * @returns an number that is expected result of pack2x16unorm.\n */\nexport function pack2x16unorm(x: number, y: number): number {\n  // Converts f32 to u16 via the pack2x16unorm formula.\n  // FTZ is not explicitly handled, because all subnormals will produce a value\n  // between 0.5 and much less than 1, so floor goes to 0.\n  const generateU16 = (n: number): number => {\n    return Math.floor(0.5 + 65535 * Math.min(1, Math.max(0, n)));\n  };\n\n  workingDataU16[0] = generateU16(x);\n  workingDataU16[1] = generateU16(y);\n\n  return workingDataU32[0];\n}\n\n/**\n * Converts four normalized f32s to i8s and then packs them in a u32\n *\n * This should implement the same behaviour as the builtin `pack4x8snorm` from\n * WGSL.\n *\n * Caller is responsible to ensuring inputs are normalized f32s\n *\n * @param vals four f32s to be packed\n * @returns a number that is expected result of pack4x8usorm.\n */\nexport function pack4x8snorm(...vals: [number, number, number, number]): number {\n  // Converts f32 to u8 via the pack4x8snorm formula.\n  // FTZ is not explicitly handled, because all subnormals will produce a value\n  // between 0 and 1, so floor goes to 0.\n  const generateI8 = (n: number): number => {\n    return Math.floor(0.5 + 127 * Math.min(1, Math.max(-1, n)));\n  };\n\n  for (const idx in vals) {\n    workingDataI8[idx] = generateI8(vals[idx]);\n  }\n\n  return workingDataU32[0];\n}\n\n/**\n * Converts four normalized f32s to u8s and then packs them in a u32\n *\n * This should implement the same behaviour as the builtin `pack4x8unorm` from\n * WGSL.\n *\n * Caller is responsible to ensuring inputs are normalized f32s\n *\n * @param vals four f32s to be packed\n * @returns a number that is expected result of pack4x8unorm.\n */\nexport function pack4x8unorm(...vals: [number, number, number, number]): number {\n  // Converts f32 to u8 via the pack4x8unorm formula.\n  // FTZ is not explicitly handled, because all subnormals will produce a value\n  // between 0.5 and much less than 1, so floor goes to 0.\n  const generateU8 = (n: number): number => {\n    return Math.floor(0.5 + 255 * Math.min(1, Math.max(0, n)));\n  };\n\n  for (const idx in vals) {\n    workingDataU8[idx] = generateU8(vals[idx]);\n  }\n\n  return workingDataU32[0];\n}\n\n/**\n * Asserts that a number is within the representable (inclusive) of the integer type with the\n * specified number of bits and signedness.\n *\n * MAINTENANCE_TODO: Assert isInteger? Then this function \"asserts that a number is representable\"\n * by the type.\n */\nexport function assertInIntegerRange(n: number, bits: number, signed: boolean): void {\n  if (signed) {\n    const min = -Math.pow(2, bits - 1);\n    const max = Math.pow(2, bits - 1) - 1;\n    assert(n >= min && n <= max);\n  } else {\n    const max = Math.pow(2, bits) - 1;\n    assert(n >= 0 && n <= max);\n  }\n}\n\n/**\n * Converts a linear value into a \"gamma\"-encoded value using the sRGB-clamped transfer function.\n */\nexport function gammaCompress(n: number): number {\n  n = n <= 0.0031308 ? (323 * n) / 25 : (211 * Math.pow(n, 5 / 12) - 11) / 200;\n  return clamp(n, { min: 0, max: 1 });\n}\n\n/**\n * Converts a \"gamma\"-encoded value into a linear value using the sRGB-clamped transfer function.\n */\nexport function gammaDecompress(n: number): number {\n  n = n <= 0.04045 ? (n * 25) / 323 : Math.pow((200 * n + 11) / 211, 12 / 5);\n  return clamp(n, { min: 0, max: 1 });\n}\n\n/** Converts a 32-bit float value to a 32-bit unsigned integer value */\nexport function float32ToUint32(f32: number): number {\n  const f32Arr = new Float32Array(1);\n  f32Arr[0] = f32;\n  const u32Arr = new Uint32Array(f32Arr.buffer);\n  return u32Arr[0];\n}\n\n/** Converts a 32-bit unsigned integer value to a 32-bit float value */\nexport function uint32ToFloat32(u32: number): number {\n  const u32Arr = new Uint32Array(1);\n  u32Arr[0] = u32;\n  const f32Arr = new Float32Array(u32Arr.buffer);\n  return f32Arr[0];\n}\n\n/** Converts a 32-bit float value to a 32-bit signed integer value */\nexport function float32ToInt32(f32: number): number {\n  const f32Arr = new Float32Array(1);\n  f32Arr[0] = f32;\n  const i32Arr = new Int32Array(f32Arr.buffer);\n  return i32Arr[0];\n}\n\n/** Converts a 32-bit unsigned integer value to a 32-bit signed integer value */\nexport function uint32ToInt32(u32: number): number {\n  const u32Arr = new Uint32Array(1);\n  u32Arr[0] = u32;\n  const i32Arr = new Int32Array(u32Arr.buffer);\n  return i32Arr[0];\n}\n\n/** Converts a 16-bit float value to a 16-bit unsigned integer value */\nexport function float16ToUint16(f16: number): number {\n  const f16Arr = new Float16Array(1);\n  f16Arr[0] = f16;\n  const u16Arr = new Uint16Array(f16Arr.buffer);\n  return u16Arr[0];\n}\n\n/** Converts a 16-bit unsigned integer value to a 16-bit float value */\nexport function uint16ToFloat16(u16: number): number {\n  const u16Arr = new Uint16Array(1);\n  u16Arr[0] = u16;\n  const f16Arr = new Float16Array(u16Arr.buffer);\n  return f16Arr[0];\n}\n\n/** Converts a 16-bit float value to a 16-bit signed integer value */\nexport function float16ToInt16(f16: number): number {\n  const f16Arr = new Float16Array(1);\n  f16Arr[0] = f16;\n  const i16Arr = new Int16Array(f16Arr.buffer);\n  return i16Arr[0];\n}\n\n/** A type of number representable by Scalar. */\nexport type ScalarKind =\n  | 'abstract-float'\n  | 'f64'\n  | 'f32'\n  | 'f16'\n  | 'u32'\n  | 'u16'\n  | 'u8'\n  | 'i32'\n  | 'i16'\n  | 'i8'\n  | 'bool';\n\n/** ScalarType describes the type of WGSL Scalar. */\nexport class ScalarType {\n  readonly kind: ScalarKind; // The named type\n  readonly _size: number; // In bytes\n  readonly read: (buf: Uint8Array, offset: number) => Scalar; // reads a scalar from a buffer\n\n  constructor(kind: ScalarKind, size: number, read: (buf: Uint8Array, offset: number) => Scalar) {\n    this.kind = kind;\n    this._size = size;\n    this.read = read;\n  }\n\n  public toString(): string {\n    return this.kind;\n  }\n\n  public get size(): number {\n    return this._size;\n  }\n}\n\n/** VectorType describes the type of WGSL Vector. */\nexport class VectorType {\n  readonly width: number; // Number of elements in the vector\n  readonly elementType: ScalarType; // Element type\n\n  constructor(width: number, elementType: ScalarType) {\n    this.width = width;\n    this.elementType = elementType;\n  }\n\n  /**\n   * @returns a vector constructed from the values read from the buffer at the\n   * given byte offset\n   */\n  public read(buf: Uint8Array, offset: number): Vector {\n    const elements: Array<Scalar> = [];\n    for (let i = 0; i < this.width; i++) {\n      elements[i] = this.elementType.read(buf, offset);\n      offset += this.elementType.size;\n    }\n    return new Vector(elements);\n  }\n\n  public toString(): string {\n    return `vec${this.width}<${this.elementType}>`;\n  }\n\n  public get size(): number {\n    return this.elementType.size * this.width;\n  }\n}\n\n// Maps a string representation of a vector type to vector type.\nconst vectorTypes = new Map<string, VectorType>();\n\nexport function TypeVec(width: number, elementType: ScalarType): VectorType {\n  const key = `${elementType.toString()} ${width}}`;\n  let ty = vectorTypes.get(key);\n  if (ty !== undefined) {\n    return ty;\n  }\n  ty = new VectorType(width, elementType);\n  vectorTypes.set(key, ty);\n  return ty;\n}\n\n/** MatrixType describes the type of WGSL Matrix. */\nexport class MatrixType {\n  readonly cols: number; // Number of columns in the Matrix\n  readonly rows: number; // Number of elements per column in the Matrix\n  readonly elementType: ScalarType; // Element type\n\n  constructor(cols: number, rows: number, elementType: ScalarType) {\n    this.cols = cols;\n    this.rows = rows;\n    assert(\n      elementType.kind === 'f32' || elementType.kind === 'f16',\n      \"MatrixType can only have elementType of 'f32' or 'f16'\"\n    );\n    this.elementType = elementType;\n  }\n\n  /**\n   * @returns a Matrix constructed from the values read from the buffer at the\n   * given byte offset\n   */\n  public read(buf: Uint8Array, offset: number): Matrix {\n    const elements: Scalar[][] = [...Array(this.cols)].map(_ => [...Array(this.rows)]);\n    for (let c = 0; c < this.cols; c++) {\n      for (let r = 0; r < this.rows; r++) {\n        elements[c][r] = this.elementType.read(buf, offset);\n        offset += this.elementType.size;\n      }\n\n      // vec3 have one padding element, so need to skip in matrices\n      if (this.rows === 3) {\n        offset += this.elementType.size;\n      }\n    }\n    return new Matrix(elements);\n  }\n\n  public toString(): string {\n    return `mat${this.cols}x${this.rows}<${this.elementType}>`;\n  }\n}\n\n// Maps a string representation of a Matrix type to Matrix type.\nconst matrixTypes = new Map<string, MatrixType>();\n\nexport function TypeMat(cols: number, rows: number, elementType: ScalarType): MatrixType {\n  const key = `${elementType.toString()} ${cols} ${rows}`;\n  let ty = matrixTypes.get(key);\n  if (ty !== undefined) {\n    return ty;\n  }\n  ty = new MatrixType(cols, rows, elementType);\n  matrixTypes.set(key, ty);\n  return ty;\n}\n\n/** Type is a ScalarType, VectorType, or MatrixType. */\nexport type Type = ScalarType | VectorType | MatrixType;\n\nexport const TypeI32 = new ScalarType('i32', 4, (buf: Uint8Array, offset: number) =>\n  i32(new Int32Array(buf.buffer, offset)[0])\n);\nexport const TypeU32 = new ScalarType('u32', 4, (buf: Uint8Array, offset: number) =>\n  u32(new Uint32Array(buf.buffer, offset)[0])\n);\nexport const TypeAbstractFloat = new ScalarType(\n  'abstract-float',\n  8,\n  (buf: Uint8Array, offset: number) => abstractFloat(new Float64Array(buf.buffer, offset)[0])\n);\nexport const TypeF64 = new ScalarType('f64', 8, (buf: Uint8Array, offset: number) =>\n  f64(new Float64Array(buf.buffer, offset)[0])\n);\nexport const TypeF32 = new ScalarType('f32', 4, (buf: Uint8Array, offset: number) =>\n  f32(new Float32Array(buf.buffer, offset)[0])\n);\nexport const TypeI16 = new ScalarType('i16', 2, (buf: Uint8Array, offset: number) =>\n  i16(new Int16Array(buf.buffer, offset)[0])\n);\nexport const TypeU16 = new ScalarType('u16', 2, (buf: Uint8Array, offset: number) =>\n  u16(new Uint16Array(buf.buffer, offset)[0])\n);\nexport const TypeF16 = new ScalarType('f16', 2, (buf: Uint8Array, offset: number) =>\n  f16Bits(new Uint16Array(buf.buffer, offset)[0])\n);\nexport const TypeI8 = new ScalarType('i8', 1, (buf: Uint8Array, offset: number) =>\n  i8(new Int8Array(buf.buffer, offset)[0])\n);\nexport const TypeU8 = new ScalarType('u8', 1, (buf: Uint8Array, offset: number) =>\n  u8(new Uint8Array(buf.buffer, offset)[0])\n);\nexport const TypeBool = new ScalarType('bool', 4, (buf: Uint8Array, offset: number) =>\n  bool(new Uint32Array(buf.buffer, offset)[0] !== 0)\n);\n\n/** @returns the ScalarType from the ScalarKind */\nexport function scalarType(kind: ScalarKind): ScalarType {\n  switch (kind) {\n    case 'abstract-float':\n      return TypeAbstractFloat;\n    case 'f64':\n      return TypeF64;\n    case 'f32':\n      return TypeF32;\n    case 'f16':\n      return TypeF16;\n    case 'u32':\n      return TypeU32;\n    case 'u16':\n      return TypeU16;\n    case 'u8':\n      return TypeU8;\n    case 'i32':\n      return TypeI32;\n    case 'i16':\n      return TypeI16;\n    case 'i8':\n      return TypeI8;\n    case 'bool':\n      return TypeBool;\n  }\n}\n\n/** @returns the number of scalar (element) types of the given Type */\nexport function numElementsOf(ty: Type): number {\n  if (ty instanceof ScalarType) {\n    return 1;\n  }\n  if (ty instanceof VectorType) {\n    return ty.width;\n  }\n  if (ty instanceof MatrixType) {\n    return ty.cols * ty.rows;\n  }\n  throw new Error(`unhandled type ${ty}`);\n}\n\n/** @returns the scalar (element) type of the given Type */\nexport function scalarTypeOf(ty: Type): ScalarType {\n  if (ty instanceof ScalarType) {\n    return ty;\n  }\n  if (ty instanceof VectorType) {\n    return ty.elementType;\n  }\n  if (ty instanceof MatrixType) {\n    return ty.elementType;\n  }\n  throw new Error(`unhandled type ${ty}`);\n}\n\n/** ScalarValue is the JS type that can be held by a Scalar */\ntype ScalarValue = boolean | number;\n\n/** Class that encapsulates a single scalar value of various types. */\nexport class Scalar {\n  readonly value: ScalarValue; // The scalar value\n  readonly type: ScalarType; // The type of the scalar\n  readonly bits: Uint8Array; // The scalar value packed in a Uint8Array\n\n  public constructor(type: ScalarType, value: ScalarValue, bits: TypedArrayBufferView) {\n    this.value = value;\n    this.type = type;\n    this.bits = new Uint8Array(bits.buffer);\n  }\n\n  /**\n   * Copies the scalar value to the Uint8Array buffer at the provided byte offset.\n   * @param buffer the destination buffer\n   * @param offset the byte offset within buffer\n   */\n  public copyTo(buffer: Uint8Array, offset: number) {\n    for (let i = 0; i < this.bits.length; i++) {\n      buffer[offset + i] = this.bits[i];\n    }\n  }\n\n  /**\n   * @returns the WGSL representation of this scalar value\n   */\n  public wgsl(): string {\n    const withPoint = (x: number) => {\n      const str = `${x}`;\n      return str.indexOf('.') > 0 || str.indexOf('e') > 0 ? str : `${str}.0`;\n    };\n    if (isFinite(this.value as number)) {\n      switch (this.type.kind) {\n        case 'abstract-float':\n          return `${withPoint(this.value as number)}`;\n        case 'f64':\n          return `${withPoint(this.value as number)}`;\n        case 'f32':\n          return `${withPoint(this.value as number)}f`;\n        case 'f16':\n          return `${withPoint(this.value as number)}h`;\n        case 'u32':\n          return `${this.value}u`;\n        case 'i32':\n          return `i32(${this.value})`;\n        case 'bool':\n          return `${this.value}`;\n      }\n    }\n    throw new Error(\n      `scalar of value ${this.value} and type ${this.type} has no WGSL representation`\n    );\n  }\n\n  public toString(): string {\n    if (this.type.kind === 'bool') {\n      return Colors.bold(this.value.toString());\n    }\n    switch (this.value) {\n      case Infinity:\n      case -Infinity:\n        return Colors.bold(this.value.toString());\n      default: {\n        // Uint8Array.map returns a Uint8Array, so cannot use .map directly\n        const hex = Array.from(this.bits)\n          .reverse()\n          .map(x => x.toString(16).padStart(2, '0'))\n          .join('');\n        const n = this.value as Number;\n        if (n !== null && isFloatValue(this)) {\n          let str = this.value.toString();\n          str = str.indexOf('.') > 0 || str.indexOf('e') > 0 ? str : `${str}.0`;\n          return isSubnormalNumberF32(n.valueOf())\n            ? `${Colors.bold(str)} (0x${hex} subnormal)`\n            : `${Colors.bold(str)} (0x${hex})`;\n        }\n        return `${Colors.bold(this.value.toString())} (0x${hex})`;\n      }\n    }\n  }\n}\n\nexport interface ScalarBuilder {\n  (value: number): Scalar;\n}\n\n/** Create an AbstractFloat from a numeric value, a JS `number`. */\nexport function abstractFloat(value: number): Scalar {\n  const arr = new Float64Array([value]);\n  return new Scalar(TypeAbstractFloat, arr[0], arr);\n}\n/** Create an f64 from a numeric value, a JS `number`. */\nexport function f64(value: number): Scalar {\n  const arr = new Float64Array([value]);\n  return new Scalar(TypeF64, arr[0], arr);\n}\n/** Create an f32 from a numeric value, a JS `number`. */\nexport function f32(value: number): Scalar {\n  const arr = new Float32Array([value]);\n  return new Scalar(TypeF32, arr[0], arr);\n}\n/** Create an f16 from a numeric value, a JS `number`. */\nexport function f16(value: number): Scalar {\n  const arr = new Float16Array([value]);\n  return new Scalar(TypeF16, arr[0], arr);\n}\n/** Create an f32 from a bit representation, a uint32 represented as a JS `number`. */\nexport function f32Bits(bits: number): Scalar {\n  const arr = new Uint32Array([bits]);\n  return new Scalar(TypeF32, new Float32Array(arr.buffer)[0], arr);\n}\n/** Create an f16 from a bit representation, a uint16 represented as a JS `number`. */\nexport function f16Bits(bits: number): Scalar {\n  const arr = new Uint16Array([bits]);\n  return new Scalar(TypeF16, new Float16Array(arr.buffer)[0], arr);\n}\n\n/** Create an i32 from a numeric value, a JS `number`. */\nexport function i32(value: number): Scalar {\n  const arr = new Int32Array([value]);\n  return new Scalar(TypeI32, arr[0], arr);\n}\n/** Create an i16 from a numeric value, a JS `number`. */\nexport function i16(value: number): Scalar {\n  const arr = new Int16Array([value]);\n  return new Scalar(TypeI16, arr[0], arr);\n}\n/** Create an i8 from a numeric value, a JS `number`. */\nexport function i8(value: number): Scalar {\n  const arr = new Int8Array([value]);\n  return new Scalar(TypeI8, arr[0], arr);\n}\n\n/** Create an i32 from a bit representation, a uint32 represented as a JS `number`. */\nexport function i32Bits(bits: number): Scalar {\n  const arr = new Uint32Array([bits]);\n  return new Scalar(TypeI32, new Int32Array(arr.buffer)[0], arr);\n}\n/** Create an i16 from a bit representation, a uint16 represented as a JS `number`. */\nexport function i16Bits(bits: number): Scalar {\n  const arr = new Uint16Array([bits]);\n  return new Scalar(TypeI16, new Int16Array(arr.buffer)[0], arr);\n}\n/** Create an i8 from a bit representation, a uint8 represented as a JS `number`. */\nexport function i8Bits(bits: number): Scalar {\n  const arr = new Uint8Array([bits]);\n  return new Scalar(TypeI8, new Int8Array(arr.buffer)[0], arr);\n}\n\n/** Create a u32 from a numeric value, a JS `number`. */\nexport function u32(value: number): Scalar {\n  const arr = new Uint32Array([value]);\n  return new Scalar(TypeU32, arr[0], arr);\n}\n/** Create a u16 from a numeric value, a JS `number`. */\nexport function u16(value: number): Scalar {\n  const arr = new Uint16Array([value]);\n  return new Scalar(TypeU16, arr[0], arr);\n}\n/** Create a u8 from a numeric value, a JS `number`. */\nexport function u8(value: number): Scalar {\n  const arr = new Uint8Array([value]);\n  return new Scalar(TypeU8, arr[0], arr);\n}\n\n/** Create an u32 from a bit representation, a uint32 represented as a JS `number`. */\nexport function u32Bits(bits: number): Scalar {\n  const arr = new Uint32Array([bits]);\n  return new Scalar(TypeU32, bits, arr);\n}\n/** Create an u16 from a bit representation, a uint16 represented as a JS `number`. */\nexport function u16Bits(bits: number): Scalar {\n  const arr = new Uint16Array([bits]);\n  return new Scalar(TypeU16, bits, arr);\n}\n/** Create an u8 from a bit representation, a uint8 represented as a JS `number`. */\nexport function u8Bits(bits: number): Scalar {\n  const arr = new Uint8Array([bits]);\n  return new Scalar(TypeU8, bits, arr);\n}\n\n/** Create a boolean value. */\nexport function bool(value: boolean): Scalar {\n  // WGSL does not support using 'bool' types directly in storage / uniform\n  // buffers, so instead we pack booleans in a u32, where 'false' is zero and\n  // 'true' is any non-zero value.\n  const arr = new Uint32Array([value ? 1 : 0]);\n  return new Scalar(TypeBool, value, arr);\n}\n\n/** A 'true' literal value */\nexport const True = bool(true);\n\n/** A 'false' literal value */\nexport const False = bool(false);\n\n// Encoding to u32s, instead of BigInt, for serialization\nexport function reinterpretF64AsU32s(f64: number): [number, number] {\n  const array = new Float64Array(1);\n  array[0] = f64;\n  const u32s = new Uint32Array(array.buffer);\n  return [u32s[0], u32s[1]];\n}\n\n// De-encoding from u32s, instead of BigInt, for serialization\nexport function reinterpretU32sAsF64(u32s: [number, number]): number {\n  const array = new Uint32Array(2);\n  array[0] = u32s[0];\n  array[1] = u32s[1];\n  return new Float64Array(array.buffer)[0];\n}\n\n/**\n * @returns a number representing the u32 interpretation\n * of the bits of a number assumed to be an f32 value.\n */\nexport function reinterpretF32AsU32(f32: number): number {\n  const array = new Float32Array(1);\n  array[0] = f32;\n  return new Uint32Array(array.buffer)[0];\n}\n\n/**\n * @returns a number representing the i32 interpretation\n * of the bits of a number assumed to be an f32 value.\n */\nexport function reinterpretF32AsI32(f32: number): number {\n  const array = new Float32Array(1);\n  array[0] = f32;\n  return new Int32Array(array.buffer)[0];\n}\n\n/**\n * @returns a number representing the f32 interpretation\n * of the bits of a number assumed to be an u32 value.\n */\nexport function reinterpretU32AsF32(u32: number): number {\n  const array = new Uint32Array(1);\n  array[0] = u32;\n  return new Float32Array(array.buffer)[0];\n}\n\n/**\n * @returns a number representing the i32 interpretation\n * of the bits of a number assumed to be an u32 value.\n */\nexport function reinterpretU32AsI32(u32: number): number {\n  const array = new Uint32Array(1);\n  array[0] = u32;\n  return new Int32Array(array.buffer)[0];\n}\n\n/**\n * @returns a number representing the u32 interpretation\n * of the bits of a number assumed to be an i32 value.\n */\nexport function reinterpretI32AsU32(i32: number): number {\n  const array = new Int32Array(1);\n  array[0] = i32;\n  return new Uint32Array(array.buffer)[0];\n}\n\n/**\n * @returns a number representing the f32 interpretation\n * of the bits of a number assumed to be an i32 value.\n */\nexport function reinterpretI32AsF32(i32: number): number {\n  const array = new Int32Array(1);\n  array[0] = i32;\n  return new Float32Array(array.buffer)[0];\n}\n\n/**\n * @returns a number representing the u16 interpretation\n * of the bits of a number assumed to be an f16 value.\n */\nexport function reinterpretF16AsU16(f16: number): number {\n  const array = new Float16Array(1);\n  array[0] = f16;\n  return new Uint16Array(array.buffer)[0];\n}\n\n/**\n * @returns a number representing the f16 interpretation\n * of the bits of a number assumed to be an u16 value.\n */\nexport function reinterpretU16AsF16(u16: number): number {\n  const array = new Uint16Array(1);\n  array[0] = u16;\n  return new Float16Array(array.buffer)[0];\n}\n\n/**\n * Class that encapsulates a vector value.\n */\nexport class Vector {\n  readonly elements: Array<Scalar>;\n  readonly type: VectorType;\n\n  public constructor(elements: Array<Scalar>) {\n    if (elements.length < 2 || elements.length > 4) {\n      throw new Error(`vector element count must be between 2 and 4, got ${elements.length}`);\n    }\n    for (let i = 1; i < elements.length; i++) {\n      const a = elements[0].type;\n      const b = elements[i].type;\n      if (a !== b) {\n        throw new Error(\n          `cannot mix vector element types. Found elements with types '${a}' and '${b}'`\n        );\n      }\n    }\n    this.elements = elements;\n    this.type = TypeVec(elements.length, elements[0].type);\n  }\n\n  /**\n   * Copies the vector value to the Uint8Array buffer at the provided byte offset.\n   * @param buffer the destination buffer\n   * @param offset the byte offset within buffer\n   */\n  public copyTo(buffer: Uint8Array, offset: number) {\n    for (const element of this.elements) {\n      element.copyTo(buffer, offset);\n      offset += this.type.elementType.size;\n    }\n  }\n\n  /**\n   * @returns the WGSL representation of this vector value\n   */\n  public wgsl(): string {\n    const els = this.elements.map(v => v.wgsl()).join(', ');\n    return `vec${this.type.width}(${els})`;\n  }\n\n  public toString(): string {\n    return `${this.type}(${this.elements.map(e => e.toString()).join(', ')})`;\n  }\n\n  public get x() {\n    assert(0 < this.elements.length);\n    return this.elements[0];\n  }\n\n  public get y() {\n    assert(1 < this.elements.length);\n    return this.elements[1];\n  }\n\n  public get z() {\n    assert(2 < this.elements.length);\n    return this.elements[2];\n  }\n\n  public get w() {\n    assert(3 < this.elements.length);\n    return this.elements[3];\n  }\n}\n\n/** Helper for constructing a new two-element vector with the provided values */\nexport function vec2(x: Scalar, y: Scalar) {\n  return new Vector([x, y]);\n}\n\n/** Helper for constructing a new three-element vector with the provided values */\nexport function vec3(x: Scalar, y: Scalar, z: Scalar) {\n  return new Vector([x, y, z]);\n}\n\n/** Helper for constructing a new four-element vector with the provided values */\nexport function vec4(x: Scalar, y: Scalar, z: Scalar, w: Scalar) {\n  return new Vector([x, y, z, w]);\n}\n\n/**\n * Helper for constructing Vectors from arrays of numbers\n *\n * @param v array of numbers to be converted, must contain 2, 3 or 4 elements\n * @param op function to convert from number to Scalar, e.g. 'f32`\n */\nexport function toVector(v: number[], op: (n: number) => Scalar): Vector {\n  switch (v.length) {\n    case 2:\n      return vec2(op(v[0]), op(v[1]));\n    case 3:\n      return vec3(op(v[0]), op(v[1]), op(v[2]));\n    case 4:\n      return vec4(op(v[0]), op(v[1]), op(v[2]), op(v[3]));\n  }\n  unreachable(`input to 'toVector' must contain 2, 3, or 4 elements`);\n}\n\n/**\n * Class that encapsulates a Matrix value.\n */\nexport class Matrix {\n  readonly elements: Scalar[][];\n  readonly type: MatrixType;\n\n  public constructor(elements: Array<Array<Scalar>>) {\n    const num_cols = elements.length;\n    if (num_cols < 2 || num_cols > 4) {\n      throw new Error(`matrix cols count must be between 2 and 4, got ${num_cols}`);\n    }\n\n    const num_rows = elements[0].length;\n    if (!elements.every(c => c.length === num_rows)) {\n      throw new Error(`cannot mix matrix column lengths`);\n    }\n\n    if (num_rows < 2 || num_rows > 4) {\n      throw new Error(`matrix rows count must be between 2 and 4, got ${num_rows}`);\n    }\n\n    const elem_type = elements[0][0].type;\n    if (!elements.every(c => c.every(r => objectEquals(r.type, elem_type)))) {\n      throw new Error(`cannot mix matrix element types`);\n    }\n\n    this.elements = elements;\n    this.type = TypeMat(num_cols, num_rows, elem_type);\n  }\n\n  /**\n   * Copies the matrix value to the Uint8Array buffer at the provided byte offset.\n   * @param buffer the destination buffer\n   * @param offset the byte offset within buffer\n   */\n  public copyTo(buffer: Uint8Array, offset: number) {\n    for (let i = 0; i < this.type.cols; i++) {\n      for (let j = 0; j < this.type.rows; j++) {\n        this.elements[i][j].copyTo(buffer, offset);\n        offset += this.type.elementType.size;\n      }\n\n      // vec3 have one padding element, so need to skip in matrices\n      if (this.type.rows === 3) {\n        offset += this.type.elementType.size;\n      }\n    }\n  }\n\n  /**\n   * @returns the WGSL representation of this matrix value\n   */\n  public wgsl(): string {\n    const els = this.elements.flatMap(c => c.map(r => r.wgsl())).join(', ');\n    return `mat${this.type.cols}x${this.type.rows}(${els})`;\n  }\n\n  public toString(): string {\n    return `${this.type}(${this.elements.map(c => c.join(', ')).join(', ')})`;\n  }\n}\n\n/**\n * Helper for constructing Matrices from arrays of numbers\n *\n * @param m array of array of numbers to be converted, all Array of number must\n *          be of the same length. All Arrays must have 2, 3, or 4 elements.\n * @param op function to convert from number to Scalar, e.g. 'f32`\n */\nexport function toMatrix(m: number[][], op: (n: number) => Scalar): Matrix {\n  const cols = m.length;\n  const rows = m[0].length;\n  const elements: Scalar[][] = [...Array<Scalar[]>(cols)].map(_ => [...Array<Scalar>(rows)]);\n  for (let i = 0; i < cols; i++) {\n    for (let j = 0; j < rows; j++) {\n      elements[i][j] = op(m[i][j]);\n    }\n  }\n\n  return new Matrix(elements);\n}\n\n/** Value is a Scalar or Vector value. */\nexport type Value = Scalar | Vector | Matrix;\n\nexport type SerializedValueScalar = {\n  kind: 'scalar';\n  type: ScalarKind;\n  value: boolean | number;\n};\n\nexport type SerializedValueVector = {\n  kind: 'vector';\n  type: ScalarKind;\n  value: boolean[] | number[];\n};\n\nexport type SerializedValueMatrix = {\n  kind: 'matrix';\n  type: ScalarKind;\n  value: number[][];\n};\n\nexport type SerializedValue = SerializedValueScalar | SerializedValueVector | SerializedValueMatrix;\n\nexport function serializeValue(v: Value): SerializedValue {\n  const value = (kind: ScalarKind, s: Scalar) => {\n    switch (kind) {\n      case 'f32':\n        return new Uint32Array(s.bits.buffer)[0];\n      case 'f16':\n        return new Uint16Array(s.bits.buffer)[0];\n      default:\n        return s.value;\n    }\n  };\n  if (v instanceof Scalar) {\n    const kind = v.type.kind;\n    return {\n      kind: 'scalar',\n      type: kind,\n      value: value(kind, v),\n    };\n  }\n  if (v instanceof Vector) {\n    const kind = v.type.elementType.kind;\n    return {\n      kind: 'vector',\n      type: kind,\n      value: v.elements.map(e => value(kind, e)) as boolean[] | number[],\n    };\n  }\n  if (v instanceof Matrix) {\n    const kind = v.type.elementType.kind;\n    return {\n      kind: 'matrix',\n      type: kind,\n      value: v.elements.map(c => c.map(r => value(kind, r))) as number[][],\n    };\n  }\n\n  unreachable(`unhandled value type: ${v}`);\n}\n\nexport function deserializeValue(data: SerializedValue): Value {\n  const buildScalar = (v: ScalarValue): Scalar => {\n    switch (data.type) {\n      case 'abstract-float':\n        return abstractFloat(v as number);\n      case 'f64':\n        return f64(v as number);\n      case 'i32':\n        return i32(v as number);\n      case 'u32':\n        return u32(v as number);\n      case 'f32':\n        return f32Bits(v as number);\n      case 'i16':\n        return i16(v as number);\n      case 'u16':\n        return u16(v as number);\n      case 'f16':\n        return f16Bits(v as number);\n      case 'i8':\n        return i8(v as number);\n      case 'u8':\n        return u8(v as number);\n      case 'bool':\n        return bool(v as boolean);\n      default:\n        unreachable(`unhandled value type: ${data.type}`);\n    }\n  };\n  switch (data.kind) {\n    case 'scalar': {\n      return buildScalar(data.value);\n    }\n    case 'vector': {\n      return new Vector(data.value.map(v => buildScalar(v)));\n    }\n    case 'matrix': {\n      return new Matrix(data.value.map(c => c.map(buildScalar)));\n    }\n  }\n}\n\n/** @returns if the Value is a float scalar type */\nexport function isFloatValue(v: Value): boolean {\n  if (v instanceof Scalar) {\n    const s = v;\n    return (\n      s.type.kind === 'abstract-float' ||\n      s.type.kind === 'f64' ||\n      s.type.kind === 'f32' ||\n      s.type.kind === 'f16'\n    );\n  }\n  return false;\n}\n"],"mappings":"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"}