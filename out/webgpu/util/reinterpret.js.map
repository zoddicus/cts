{"version":3,"file":"reinterpret.js","names":["Float16Array","workingData","ArrayBuffer","workingDataU32","Uint32Array","workingDataU16","Uint16Array","workingDataF32","Float32Array","workingDataF16","workingDataI32","Int32Array","workingDataF64","Float64Array","workingDataU64","BigUint64Array","reinterpretU64AsF64","input","reinterpretF64AsU64","reinterpretF64AsU32s","f64","reinterpretU32sAsF64","u32s","reinterpretF32AsU32","f32","reinterpretF32AsI32","reinterpretU32AsF32","u32","reinterpretU32AsI32","reinterpretI32AsU32","i32","reinterpretI32AsF32","reinterpretF16AsU16","f16","reinterpretU16AsF16","u16"],"sources":["../../../src/webgpu/util/reinterpret.ts"],"sourcesContent":["import { Float16Array } from '../../external/petamoriken/float16/float16.js';\n\n/**\n * Once-allocated ArrayBuffer/views to avoid overhead of allocation when converting between numeric formats\n *\n * workingData* is shared between multiple functions in this file, so to avoid re-entrancy problems, make sure in\n * functions that use it that they don't call themselves or other functions that use workingData*.\n */\nconst workingData = new ArrayBuffer(8);\nconst workingDataU32 = new Uint32Array(workingData);\nconst workingDataU16 = new Uint16Array(workingData);\nconst workingDataF32 = new Float32Array(workingData);\nconst workingDataF16 = new Float16Array(workingData);\nconst workingDataI32 = new Int32Array(workingData);\nconst workingDataF64 = new Float64Array(workingData);\nconst workingDataU64 = new BigUint64Array(workingData);\n\n/**\n * @returns a 64-bit float value via interpreting the input as the bit\n * representation as a 64-bit integer\n */\nexport function reinterpretU64AsF64(input: bigint): number {\n  workingDataU64[0] = input;\n  return workingDataF64[0];\n}\n\n/**\n * @returns the 64-bit integer bit representation of 64-bit float value\n */\nexport function reinterpretF64AsU64(input: number): bigint {\n  workingDataF64[0] = input;\n  return workingDataU64[0];\n}\n\n// Encoding to u32s, instead of BigInt, for serialization\nexport function reinterpretF64AsU32s(f64: number): [number, number] {\n  workingDataF64[0] = f64;\n  return [workingDataU32[0], workingDataU32[1]];\n}\n\n// De-encoding from u32s, instead of BigInt, for serialization\nexport function reinterpretU32sAsF64(u32s: [number, number]): number {\n  workingDataU32[0] = u32s[0];\n  workingDataU32[1] = u32s[1];\n  return workingDataF64[0];\n}\n\n/**\n * @returns a number representing the u32 interpretation\n * of the bits of a number assumed to be an f32 value.\n */\nexport function reinterpretF32AsU32(f32: number): number {\n  workingDataF32[0] = f32;\n  return workingDataU32[0];\n}\n\n/**\n * @returns a number representing the i32 interpretation\n * of the bits of a number assumed to be an f32 value.\n */\nexport function reinterpretF32AsI32(f32: number): number {\n  workingDataF32[0] = f32;\n  return workingDataI32[0];\n}\n\n/**\n * @returns a number representing the f32 interpretation\n * of the bits of a number assumed to be an u32 value.\n */\nexport function reinterpretU32AsF32(u32: number): number {\n  workingDataU32[0] = u32;\n  return workingDataF32[0];\n}\n\n/**\n * @returns a number representing the i32 interpretation\n * of the bits of a number assumed to be an u32 value.\n */\nexport function reinterpretU32AsI32(u32: number): number {\n  workingDataU32[0] = u32;\n  return workingDataI32[0];\n}\n\n/**\n * @returns a number representing the u32 interpretation\n * of the bits of a number assumed to be an i32 value.\n */\nexport function reinterpretI32AsU32(i32: number): number {\n  workingDataI32[0] = i32;\n  return workingDataU32[0];\n}\n\n/**\n * @returns a number representing the f32 interpretation\n * of the bits of a number assumed to be an i32 value.\n */\nexport function reinterpretI32AsF32(i32: number): number {\n  workingDataI32[0] = i32;\n  return workingDataF32[0];\n}\n\n/**\n * @returns a number representing the u16 interpretation\n * of the bits of a number assumed to be an f16 value.\n */\nexport function reinterpretF16AsU16(f16: number): number {\n  workingDataF16[0] = f16;\n  return workingDataU16[0];\n}\n\n/**\n * @returns a number representing the f16 interpretation\n * of the bits of a number assumed to be an u16 value.\n */\nexport function reinterpretU16AsF16(u16: number): number {\n  workingDataU16[0] = u16;\n  return workingDataF16[0];\n}\n"],"mappings":"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"}