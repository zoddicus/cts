{"version":3,"file":"floating_point.js","names":["assert","unreachable","Float16Array","anyOf","kValue","f16","f32","f64","isFloatType","reinterpretF16AsU16","reinterpretF32AsU32","reinterpretF64AsU32s","reinterpretU16AsF16","reinterpretU32AsF32","reinterpretU32sAsF64","toMatrix","toVector","u32","calculatePermutations","cartesianProduct","correctlyRoundedF16","correctlyRoundedF32","correctlyRoundedF64","flatten2DArray","flushSubnormalNumberF16","flushSubnormalNumberF32","flushSubnormalNumberF64","isFiniteF16","isFiniteF32","isSubnormalNumberF16","isSubnormalNumberF32","isSubnormalNumberF64","map2DArray","oneULPF16","oneULPF32","oneULPF64","quantizeToF32","quantizeToF16","unflatten2DArray","FPInterval","constructor","kind","bounds","begin","end","length","Number","isNaN","traits","FP","isPoint","contains","n","NEGATIVE_INFINITY","POSITIVE_INFINITY","containsZeroOrSubnormals","constants","negative","subnormal","min","positive","max","isFinite","toString","map","scalarBuilder","serializeFPInterval","i","unboundedInterval","unbounded","deserializeFPInterval","data","toInterval","addFlushedIfNeededF16","values","some","v","concat","FPTraits","k","Array","toParam","interval","fromParam","p","param","spanIntervals","intervals","every","forEach","Math","isVector","e","f","spanVectors","vectors","vector_length","result","isMatrix","m","c","num_rows","bind","spanMatrices","matrices","ms","num_cols","r","_","j","addFlushedIfNeeded","subnormals","filter","isSubnormal","needs_zero","s","limitScalarToIntervalDomain","domain","impl","limitScalarPairToIntervalDomain","x","y","d","unimplementedScalarToInterval","_x","unimplementedScalarPairToInterval","_y","unimplementedScalarTripleToInterval","_z","unimplementedScalarToVector","unimplementedVectorToInterval","unimplementedVectorPairToInterval","unimplementedVectorToVector","unimplementedVectorPairToVector","unimplementedVectorScalarToVector","unimplementedScalarVectorToVector","unimplementedMatrixToInterval","unimplementedMatrixToMatrix","unimplementedMatrixPairToMatrix","unimplementedMatrixScalarToMatrix","unimplementedScalarMatrixToMatrix","unimplementedMatrixVectorToVector","unimplementedVectorMatrixToVector","unimplementedDistance","unimplementedFaceForward","unimplementedLength","unimplementedModf","unimplementedRefract","_i","_s","_r","unboundedAbsoluteErrorInterval","_n","_error_range","unboundedUlpInterval","_numULP","makeScalarToIntervalCase","ops","quantize","o","undefined","input","expected","generateScalarToIntervalCases","params","reduce","cases","push","makeScalarPairToIntervalCase","param0","param1","generateScalarPairToIntervalCases","param0s","param1s","makeScalarTripleToIntervalCase","param2","generateScalarTripleToIntervalCases","param2s","makeVectorToIntervalCase","generateVectorToIntervalCases","makeVectorPairToIntervalCase","generateVectorPairToIntervalCases","makeVectorToVectorCase","generateVectorToVectorCases","makeScalarVectorToVectorCase","scalar","vector","results","generateScalarVectorToVectorCases","scalars","makeVectorScalarToVectorCase","generateVectorScalarToVectorCases","makeVectorPairToVectorCase","generateVectorPairToVectorCases","makeMatrixToScalarCase","generateMatrixToScalarCases","makeMatrixToMatrixCase","generateMatrixToMatrixCases","makeMatrixPairToMatrixCase","generateMatrixPairToMatrixCases","makeMatrixScalarToMatrixCase","mat","generateMatrixScalarToMatrixCases","mats","makeScalarMatrixToMatrixCase","generateScalarMatrixToMatrixCases","makeMatrixVectorToVectorCase","vec","generateMatrixVectorToVectorCases","vecs","makeVectorMatrixToVectorCase","generateVectorMatrixToVectorCases","roundAndFlushScalarToInterval","op","correctlyRounded","inputs","Set","roundAndFlushScalarPairToInterval","x_values","y_values","x_inputs","y_inputs","inner_x","inner_y","add","roundAndFlushScalarTripleToInterval","z","z_values","z_inputs","inner_z","roundAndFlushVectorToInterval","x_rounded","x_flushed","roundAndFlushVectorPairToInterval","y_rounded","y_flushed","roundAndFlushVectorToVector","interval_vectors","roundAndFlushVectorPairToVector","roundAndFlushMatrixToMatrix","m_flat","m_rounded","m_flushed","m_options","m_inputs","interval_matrices","inner_m","runScalarToIntervalOp","extrema","b","runScalarPairToIntervalOp","outputs","runScalarTripleToIntervalOp","runVectorToIntervalOp","runVectorPairToIntervalOp","runVectorToVectorOp","unboundedVector","runScalarToIntervalOpComponentWise","runVectorPairToVectorOp","runScalarPairToIntervalOpVectorComponentWise","idx","runMatrixToMatrixOp","unboundedMatrix","m_values","unflat_m","result_cols","result_rows","runScalarPairToIntervalOpMatrixComponentWise","cols","rows","flat_x","flat_y","AbsoluteErrorIntervalOp","error_range","absoluteErrorIntervalImpl","abs","CorrectlyRoundedIntervalOp","correctlyRoundedIntervalImpl","correctlyRoundedMatrixImpl","correctlyRoundedInterval","ULPIntervalOp","numULP","ulp","oneULP","flushSubnormal","ulpIntervalImpl","AbsIntervalOp","absIntervalImpl","AcosIntervalOp","sqrtInterval","subtractionInterval","multiplicationInterval","approx_abs_error","atan2Interval","absoluteErrorInterval","acos","acosIntervalImpl","AcoshAlternativeIntervalOp","inner_value","additionInterval","sqrt_value","logInterval","acoshAlternativeIntervalImpl","AcoshPrimaryIntervalOp","acoshPrimaryIntervalImpl","AdditionIntervalOp","additionIntervalImpl","additionMatrixMatrixIntervalImpl","AsinIntervalOp","asin","asinIntervalImpl","AsinhIntervalOp","asinhIntervalImpl","AtanIntervalOp","ulp_error","ulpInterval","atan","atanIntervalImpl","Atan2IntervalOpBuilder","domain_x","domain_y","atan_yx","pi","whole","atan2IntervalImpl","AtanhIntervalOp","numerator","denominator","log_interval","divisionInterval","atanhIntervalImpl","CeilIntervalOp","ceil","ceilIntervalImpl","ClampMedianIntervalOp","sort","a","clampMedianIntervalImpl","ClampMinMaxIntervalOp","low","high","minInterval","maxInterval","clampMinMaxIntervalImpl","CosIntervalOp","negPiToPiInterval","abs_error","cos","cosIntervalImpl","CoshIntervalOp","minus_n","negationInterval","expInterval","coshIntervalImpl","CrossIntervalOp","r0","r1","r2","crossIntervalImpl","DegreesIntervalOp","degreesIntervalImpl","minorNxN","col","row","dim","col_indices","keys","row_indices","determinant2x2Interval","determinant3x3Interval","A","B","C","permutations","prev","cur","determinant4x4Interval","D","determinantIntervalImpl","DistanceIntervalScalarOp","lengthInterval","DistanceIntervalVectorOp","SubtractionIntervalOp","distanceIntervalImpl","DivisionIntervalOpBuilder","divisionIntervalImpl","DotIntervalOp","multiplications","MultiplicationIntervalOp","dotIntervalImpl","ExpIntervalOp","exp","expIntervalImpl","Exp2IntervalOp","pow","exp2IntervalImpl","faceForwardIntervalsImpl","x_vec","positive_x","negative_x","NegationIntervalOp","dot_interval","dotInterval","FloorIntervalOp","floor","floorIntervalImpl","FmaIntervalOp","fmaIntervalImpl","FractIntervalOp","floorInterval","less_than_one","fractIntervalImpl","InverseSqrtIntervalOp","greaterThanZeroInterval","sqrt","inverseSqrtIntervalImpl","LdexpIntervalOp","e1","e2","ldexpIntervalImpl","LengthIntervalScalarOp","LengthIntervalVectorOp","lengthIntervalImpl","LogIntervalOp","log","logIntervalImpl","Log2IntervalOp","log2","log2IntervalImpl","MaxIntervalOp","maxIntervalImpl","MinIntervalOp","minIntervalImpl","MixImpreciseIntervalOp","t","mixImpreciseIntervalImpl","MixPreciseIntervalOp","mixPreciseIntervalImpl","modfIntervalImpl","fract","MultiplicationInnerOp","multiplicationIntervalImpl","multiplyVectorByScalar","multiplicationMatrixScalarIntervalImpl","multiplicationScalarMatrixIntervalImpl","multiplicationMatrixMatrixIntervalImpl","mat_x","mat_y","x_cols","x_rows","y_cols","y_rows","x_transposed","transposeInterval","multiplicationMatrixVectorIntervalImpl","multiplicationVectorMatrixIntervalImpl","negationIntervalImpl","NormalizeIntervalOp","normalizeIntervalImpl","PowIntervalOp","exp2Interval","log2Interval","powIntervalImpl","RadiansIntervalOp","radiansIntervalImpl","ReflectIntervalOp","rhs","reflectIntervalImpl","refractIntervalImpl","r_squared","dot","dot_squared","one_minus_dot_squared","zeroVector","dot_times_r","k_sqrt","RemainderIntervalOp","truncInterval","remainderIntervalImpl","RoundIntervalOp","diff_before","diff_after","roundIntervalImpl","saturateIntervalImpl","SignIntervalOp","signIntervalImpl","SinIntervalOp","sin","sinIntervalImpl","SinhIntervalOp","sinhIntervalImpl","SmoothStepOp","clampMedianInterval","smoothStepIntervalImpl","SqrtIntervalOp","inverseSqrtInterval","sqrtIntervalImpl","StepIntervalOp","edge","stepIntervalImpl","subtractionIntervalImpl","subtractionMatrixMatrixIntervalImpl","TanIntervalOp","sinInterval","cosInterval","tanIntervalImpl","TanhIntervalOp","sinhInterval","coshInterval","tanhIntervalImpl","TransposeIntervalOp","transposeIntervalImpl","TruncIntervalOp","trunc","truncIntervalImpl","kF32UnboundedInterval","kF32ZeroInterval","F32Traits","_constants","infinity","nearest_max","three_quarters","half","third","quarter","sixth","nearest_min","zeroInterval","correctlyRoundedMatrix","absInterval","acosInterval","acoshAlternativeInterval","acoshPrimaryInterval","acoshIntervals","additionMatrixMatrixInterval","asinInterval","asinhInterval","atanInterval","atanhInterval","ceilInterval","clampMinMaxInterval","clampIntervals","crossInterval","degreesInterval","determinantInterval","distanceInterval","faceForwardIntervals","fmaInterval","fractInterval","ldexpInterval","mixImpreciseInterval","mixPreciseInterval","mixIntervals","modfInterval","multiplicationMatrixMatrixInterval","multiplicationMatrixScalarInterval","multiplicationScalarMatrixInterval","multiplicationMatrixVectorInterval","multiplicationVectorMatrixInterval","normalizeInterval","powInterval","radiansInterval","reflectInterval","refractInterval","remainderInterval","roundInterval","saturateInterval","signInterval","smoothStepInterval","stepInterval","subtractionMatrixMatrixInterval","tanInterval","tanhInterval","makeU32ToVectorCase","generateU32ToIntervalCases","unpackData","ArrayBuffer","unpackDataU32","Uint32Array","unpackDataU16","Uint16Array","unpackDataU8","Uint8Array","unpackDataI16","Int16Array","unpackDataI8","Int8Array","unpackDataF16","unpack2x16floatIntervalImpl","quantizeToF16Interval","unpack2x16floatInterval","unpack2x16snormIntervalImpl","unpack2x16snormInterval","unpack2x16unormIntervalImpl","unpack2x16unormInterval","unpack4x8snormIntervalImpl","unpack4x8snormInterval","unpack4x8unormIntervalImpl","unpack4x8unormInterval","QuantizeToF16IntervalOp","rounded","flushed","quantizeToF16IntervalImpl","kAbstractUnboundedInterval","kAbstractZeroInterval","FPAbstractTraits","kF16UnboundedInterval","kF16ZeroInterval","F16Traits","quantizeToF16IntervalNotAvailable","abstract","fpTraitsFor","type","isRepresentable","value"],"sources":["../../../src/webgpu/util/floating_point.ts"],"sourcesContent":["import { assert, unreachable } from '../../common/util/util.js';\nimport { Float16Array } from '../../external/petamoriken/float16/float16.js';\nimport { Case, IntervalFilter } from '../shader/execution/expression/expression.js';\n\nimport { anyOf } from './compare.js';\nimport { kValue } from './constants.js';\nimport {\n  f16,\n  f32,\n  f64,\n  isFloatType,\n  reinterpretF16AsU16,\n  reinterpretF32AsU32,\n  reinterpretF64AsU32s,\n  reinterpretU16AsF16,\n  reinterpretU32AsF32,\n  reinterpretU32sAsF64,\n  Scalar,\n  ScalarType,\n  toMatrix,\n  toVector,\n  u32,\n} from './conversion.js';\nimport {\n  calculatePermutations,\n  cartesianProduct,\n  correctlyRoundedF16,\n  correctlyRoundedF32,\n  correctlyRoundedF64,\n  flatten2DArray,\n  FlushMode,\n  flushSubnormalNumberF16,\n  flushSubnormalNumberF32,\n  flushSubnormalNumberF64,\n  isFiniteF16,\n  isFiniteF32,\n  isSubnormalNumberF16,\n  isSubnormalNumberF32,\n  isSubnormalNumberF64,\n  map2DArray,\n  oneULPF16,\n  oneULPF32,\n  oneULPF64,\n  quantizeToF32,\n  quantizeToF16,\n  unflatten2DArray,\n} from './math.js';\n\n/** Indicate the kind of WGSL floating point numbers being operated on */\nexport type FPKind = 'f32' | 'f16' | 'abstract';\n\n// Containers\n\n/**\n * Representation of bounds for an interval as an array with either one or two\n * elements. Single element indicates that the interval is a single point. For\n * two elements, the first is the lower bound of the interval and the second is\n * the upper bound.\n */\nexport type IntervalBounds = [number] | [number, number];\n\n/** Represents a closed interval of floating point numbers */\nexport class FPInterval {\n  public readonly kind: FPKind;\n  public readonly begin: number;\n  public readonly end: number;\n\n  /**\n   * Constructor\n   *\n   * `FPTraits.toInterval` is the preferred way to create FPIntervals\n   *\n   * @param kind the floating point number type this is an interval for\n   * @param bounds beginning and end of the interval\n   */\n  public constructor(kind: FPKind, ...bounds: IntervalBounds) {\n    this.kind = kind;\n\n    const [begin, end] = bounds.length === 2 ? bounds : [bounds[0], bounds[0]];\n    assert(!Number.isNaN(begin) && !Number.isNaN(end), `bounds need to be non-NaN`);\n    assert(begin <= end, `bounds[0] (${begin}) must be less than or equal to bounds[1]  (${end})`);\n\n    this.begin = begin;\n    this.end = end;\n  }\n\n  /** @returns the floating point traits for this interval */\n  public traits(): FPTraits {\n    return FP[this.kind];\n  }\n\n  /** @returns begin and end if non-point interval, otherwise just begin */\n  public bounds(): IntervalBounds {\n    return this.isPoint() ? [this.begin] : [this.begin, this.end];\n  }\n\n  /** @returns if a point or interval is completely contained by this interval */\n  public contains(n: number | FPInterval): boolean {\n    if (Number.isNaN(n)) {\n      // Being the 'any' interval indicates that accuracy is not defined for this\n      // test, so the test is just checking that this input doesn't cause the\n      // implementation to misbehave, so NaN is accepted.\n      return this.begin === Number.NEGATIVE_INFINITY && this.end === Number.POSITIVE_INFINITY;\n    }\n\n    if (n instanceof FPInterval) {\n      return this.begin <= n.begin && this.end >= n.end;\n    }\n    return this.begin <= n && this.end >= n;\n  }\n\n  /** @returns if any values in the interval may be flushed to zero, this\n   *           includes any subnormals and zero itself.\n   */\n  public containsZeroOrSubnormals(): boolean {\n    return !(\n      this.end < this.traits().constants().negative.subnormal.min ||\n      this.begin > this.traits().constants().positive.subnormal.max\n    );\n  }\n\n  /** @returns if this interval contains a single point */\n  public isPoint(): boolean {\n    return this.begin === this.end;\n  }\n\n  /** @returns if this interval only contains finite values */\n  public isFinite(): boolean {\n    return this.traits().isFinite(this.begin) && this.traits().isFinite(this.end);\n  }\n\n  /** @returns a string representation for logging purposes */\n  public toString(): string {\n    return `{ '${this.kind}', [${this.bounds().map(this.traits().scalarBuilder)}] }`;\n  }\n}\n\n/**\n * SerializedFPInterval holds the serialized form of a FPInterval.\n * This form can be safely encoded to JSON.\n */\nexport type SerializedFPInterval =\n  | { kind: 'f32'; unbounded: false; begin: number; end: number }\n  | { kind: 'f32'; unbounded: true }\n  | { kind: 'f16'; unbounded: false; begin: number; end: number }\n  | { kind: 'f16'; unbounded: true }\n  | { kind: 'abstract'; unbounded: false; begin: [number, number]; end: [number, number] }\n  | { kind: 'abstract'; unbounded: true };\n\n/** serializeFPInterval() converts a FPInterval to a SerializedFPInterval */\nexport function serializeFPInterval(i: FPInterval): SerializedFPInterval {\n  const traits = FP[i.kind];\n  switch (i.kind) {\n    case 'abstract': {\n      if (i === traits.constants().unboundedInterval) {\n        return { kind: 'abstract', unbounded: true };\n      } else {\n        return {\n          kind: 'abstract',\n          unbounded: false,\n          begin: reinterpretF64AsU32s(i.begin),\n          end: reinterpretF64AsU32s(i.end),\n        };\n      }\n    }\n    case 'f32': {\n      if (i === traits.constants().unboundedInterval) {\n        return { kind: 'f32', unbounded: true };\n      } else {\n        return {\n          kind: 'f32',\n          unbounded: false,\n          begin: reinterpretF32AsU32(i.begin),\n          end: reinterpretF32AsU32(i.end),\n        };\n      }\n    }\n    case 'f16': {\n      if (i === traits.constants().unboundedInterval) {\n        return { kind: 'f16', unbounded: true };\n      } else {\n        return {\n          kind: 'f16',\n          unbounded: false,\n          begin: reinterpretF16AsU16(i.begin),\n          end: reinterpretF16AsU16(i.end),\n        };\n      }\n    }\n  }\n  unreachable(`Unable to serialize FPInterval ${i}`);\n}\n\n/** serializeFPInterval() converts a SerializedFPInterval to a FPInterval */\nexport function deserializeFPInterval(data: SerializedFPInterval): FPInterval {\n  const kind = data.kind;\n  const traits = FP[kind];\n  if (data.unbounded) {\n    return traits.constants().unboundedInterval;\n  }\n  switch (kind) {\n    case 'abstract': {\n      return traits.toInterval([reinterpretU32sAsF64(data.begin), reinterpretU32sAsF64(data.end)]);\n    }\n    case 'f32': {\n      return traits.toInterval([reinterpretU32AsF32(data.begin), reinterpretU32AsF32(data.end)]);\n    }\n    case 'f16': {\n      return traits.toInterval([reinterpretU16AsF16(data.begin), reinterpretU16AsF16(data.end)]);\n    }\n  }\n  unreachable(`Unable to deserialize data ${data}`);\n}\n\n/**\n * Representation of a vec2/3/4 of floating point intervals as an array of\n * FPIntervals.\n */\nexport type FPVector =\n  | [FPInterval, FPInterval]\n  | [FPInterval, FPInterval, FPInterval]\n  | [FPInterval, FPInterval, FPInterval, FPInterval];\n\n/** Shorthand for an Array of Arrays that contains a column-major matrix */\ntype Array2D<T> = T[][];\n\n/**\n * Representation of a matCxR of floating point intervals as an array of arrays\n * of FPIntervals. This maps onto the WGSL concept of matrix. Internally\n */\nexport type FPMatrix =\n  | [[FPInterval, FPInterval], [FPInterval, FPInterval]]\n  | [[FPInterval, FPInterval], [FPInterval, FPInterval], [FPInterval, FPInterval]]\n  | [\n      [FPInterval, FPInterval],\n      [FPInterval, FPInterval],\n      [FPInterval, FPInterval],\n      [FPInterval, FPInterval]\n    ]\n  | [[FPInterval, FPInterval, FPInterval], [FPInterval, FPInterval, FPInterval]]\n  | [\n      [FPInterval, FPInterval, FPInterval],\n      [FPInterval, FPInterval, FPInterval],\n      [FPInterval, FPInterval, FPInterval]\n    ]\n  | [\n      [FPInterval, FPInterval, FPInterval],\n      [FPInterval, FPInterval, FPInterval],\n      [FPInterval, FPInterval, FPInterval],\n      [FPInterval, FPInterval, FPInterval]\n    ]\n  | [\n      [FPInterval, FPInterval, FPInterval, FPInterval],\n      [FPInterval, FPInterval, FPInterval, FPInterval]\n    ]\n  | [\n      [FPInterval, FPInterval, FPInterval, FPInterval],\n      [FPInterval, FPInterval, FPInterval, FPInterval],\n      [FPInterval, FPInterval, FPInterval, FPInterval]\n    ]\n  | [\n      [FPInterval, FPInterval, FPInterval, FPInterval],\n      [FPInterval, FPInterval, FPInterval, FPInterval],\n      [FPInterval, FPInterval, FPInterval, FPInterval],\n      [FPInterval, FPInterval, FPInterval, FPInterval]\n    ];\n\n// Utilities\n\n/** @returns input with an appended 0, if inputs contains non-zero subnormals */\n// When f16 traits is defined, this can be replaced with something like\n// `FP.f16..addFlushIfNeeded`\nfunction addFlushedIfNeededF16(values: number[]): number[] {\n  return values.some(v => v !== 0 && isSubnormalNumberF16(v)) ? values.concat(0) : values;\n}\n\n// Operations\n\n/**\n * A function that converts a point to an acceptance interval.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface ScalarToInterval {\n  (x: number): FPInterval;\n}\n\n/** Operation used to implement a ScalarToInterval */\ninterface ScalarToIntervalOp {\n  /** @returns acceptance interval for a function at point x */\n  impl: ScalarToInterval;\n\n  /**\n   * Calculates where in the domain defined by x the min/max extrema of impl\n   * occur and returns a span of those points to be used as the domain instead.\n   *\n   * Used by this.runScalarToIntervalOp before invoking impl.\n   * If not defined, the bounds of the existing domain are assumed to be the\n   * extrema.\n   *\n   * This is only implemented for operations that meet all the following\n   * criteria:\n   *   a) non-monotonic\n   *   b) used in inherited accuracy calculations\n   *   c) need to take in an interval for b)\n   *      i.e. fooInterval takes in x: number | FPInterval, not x: number\n   */\n  extrema?: (x: FPInterval) => FPInterval;\n}\n\n/**\n * A function that converts a pair of points to an acceptance interval.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface ScalarPairToInterval {\n  (x: number, y: number): FPInterval;\n}\n\n/** Operation used to implement a ScalarPairToInterval */\ninterface ScalarPairToIntervalOp {\n  /** @returns acceptance interval for a function at point (x, y) */\n  impl: ScalarPairToInterval;\n  /**\n   * Calculates where in domain defined by x & y the min/max extrema of impl\n   * occur and returns spans of those points to be used as the domain instead.\n   *\n   * Used by runScalarPairToIntervalOp before invoking impl.\n   * If not defined, the bounds of the existing domain are assumed to be the\n   * extrema.\n   *\n   * This is only implemented for functions that meet all of the following\n   * criteria:\n   *   a) non-monotonic\n   *   b) used in inherited accuracy calculations\n   *   c) need to take in an interval for b)\n   */\n  extrema?: (x: FPInterval, y: FPInterval) => [FPInterval, FPInterval];\n}\n\n/** Domain for a ScalarPairToInterval implementation */\ninterface ScalarPairToIntervalDomain {\n  // Arrays to support discrete valid domain intervals\n  x: FPInterval[];\n  y: FPInterval[];\n}\n\n/**\n * A function that converts a triplet of points to an acceptance interval.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface ScalarTripleToInterval {\n  (x: number, y: number, z: number): FPInterval;\n}\n\n/** Operation used to implement a ScalarTripleToInterval */\ninterface ScalarTripleToIntervalOp {\n  // Re-using the *Op interface pattern for symmetry with the other operations.\n  /** @returns acceptance interval for a function at point (x, y, z) */\n  impl: ScalarTripleToInterval;\n}\n\n// Currently ScalarToVector is not integrated with the rest of the floating point\n// framework, because the only builtins that use it are actually\n// u32 -> [f32, f32, f32, f32] functions, so the whole rounding and interval\n// process doesn't get applied to the inputs.\n// They do use the framework internally by invoking divisionInterval on segments\n// of the input.\n/**\n * A function that converts a point to a vector of acceptance intervals.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface ScalarToVector {\n  (n: number): FPVector;\n}\n\n/**\n * A function that converts a vector to an acceptance interval.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface VectorToInterval {\n  (x: number[]): FPInterval;\n}\n\n/** Operation used to implement a VectorToInterval */\ninterface VectorToIntervalOp {\n  // Re-using the *Op interface pattern for symmetry with the other operations.\n  /** @returns acceptance interval for a function on vector x */\n  impl: VectorToInterval;\n}\n\n/**\n * A function that converts a pair of vectors to an acceptance interval.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface VectorPairToInterval {\n  (x: number[], y: number[]): FPInterval;\n}\n\n/** Operation used to implement a VectorPairToInterval */\ninterface VectorPairToIntervalOp {\n  // Re-using the *Op interface pattern for symmetry with the other operations.\n  /** @returns acceptance interval for a function on vectors (x, y) */\n  impl: VectorPairToInterval;\n}\n\n/**\n * A function that converts a vector to a vector of acceptance intervals.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface VectorToVector {\n  (x: number[]): FPVector;\n}\n\n/** Operation used to implement a VectorToVector */\ninterface VectorToVectorOp {\n  // Re-using the *Op interface pattern for symmetry with the other operations.\n  /** @returns a vector of acceptance intervals for a function on vector x */\n  impl: VectorToVector;\n}\n\n/**\n * A function that converts a pair of vectors to a vector of acceptance\n * intervals.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface VectorPairToVector {\n  (x: number[], y: number[]): FPVector;\n}\n\n/** Operation used to implement a VectorPairToVector */\ninterface VectorPairToVectorOp {\n  // Re-using the *Op interface pattern for symmetry with the other operations.\n  /** @returns a vector of acceptance intervals for a function on vectors (x, y) */\n  impl: VectorPairToVector;\n}\n\n/**\n * A function that converts a vector and a scalar to a vector of acceptance\n * intervals.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface VectorScalarToVector {\n  (x: number[], y: number): FPVector;\n}\n\n/**\n * A function that converts a scalar and a vector  to a vector of acceptance\n * intervals.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface ScalarVectorToVector {\n  (x: number, y: number[]): FPVector;\n}\n\n/**\n * A function that converts a matrix to an acceptance interval.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface MatrixToScalar {\n  (m: Array2D<number>): FPInterval;\n}\n\n/** Operation used to implement a MatrixToMatrix */\ninterface MatrixToMatrixOp {\n  // Re-using the *Op interface pattern for symmetry with the other operations.\n  /** @returns a matrix of acceptance intervals for a function on matrix x */\n  impl: MatrixToMatrix;\n}\n\n/**\n * A function that converts a matrix to a matrix of acceptance intervals.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface MatrixToMatrix {\n  (m: Array2D<number>): FPMatrix;\n}\n\n/**\n * A function that converts a pair of matrices to a matrix of acceptance\n * intervals.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface MatrixPairToMatrix {\n  (x: Array2D<number>, y: Array2D<number>): FPMatrix;\n}\n\n/**\n * A function that converts a matrix and a scalar to a matrix of acceptance\n * intervals.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface MatrixScalarToMatrix {\n  (x: Array2D<number>, y: number): FPMatrix;\n}\n\n/**\n * A function that converts a scalar and a matrix to a matrix of acceptance\n * intervals.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface ScalarMatrixToMatrix {\n  (x: number, y: Array2D<number>): FPMatrix;\n}\n\n/**\n * A function that converts a matrix and a vector to a vector of acceptance\n * intervals.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface MatrixVectorToVector {\n  (x: Array2D<number>, y: number[]): FPVector;\n}\n\n/**\n * A function that converts a vector and a matrix to a vector of acceptance\n * intervals.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface VectorMatrixToVector {\n  (x: number[], y: Array2D<number>): FPVector;\n}\n\n// Traits\n\n/**\n * Typed structure containing all the limits/constants defined for each\n * WGSL floating point kind\n */\ninterface FPConstants {\n  positive: {\n    min: number;\n    max: number;\n    infinity: number;\n    nearest_max: number;\n    less_than_one: number;\n    subnormal: {\n      min: number;\n      max: number;\n    };\n    pi: {\n      whole: number;\n      three_quarters: number;\n      half: number;\n      third: number;\n      quarter: number;\n      sixth: number;\n    };\n    e: number;\n  };\n  negative: {\n    min: number;\n    max: number;\n    infinity: number;\n    nearest_min: number;\n    less_than_one: number;\n    subnormal: {\n      min: number;\n      max: number;\n    };\n    pi: {\n      whole: number;\n      three_quarters: number;\n      half: number;\n      third: number;\n      quarter: number;\n      sixth: number;\n    };\n  };\n  unboundedInterval: FPInterval;\n  zeroInterval: FPInterval;\n  negPiToPiInterval: FPInterval;\n  greaterThanZeroInterval: FPInterval;\n  zeroVector: {\n    2: FPVector;\n    3: FPVector;\n    4: FPVector;\n  };\n  unboundedVector: {\n    2: FPVector;\n    3: FPVector;\n    4: FPVector;\n  };\n  unboundedMatrix: {\n    2: {\n      2: FPMatrix;\n      3: FPMatrix;\n      4: FPMatrix;\n    };\n    3: {\n      2: FPMatrix;\n      3: FPMatrix;\n      4: FPMatrix;\n    };\n    4: {\n      2: FPMatrix;\n      3: FPMatrix;\n      4: FPMatrix;\n    };\n  };\n}\n\n/** A representation of an FPInterval for a case param */\nexport type FPIntervalParam = {\n  kind: FPKind;\n  interval: number | IntervalBounds;\n};\n\n/** Abstract base class for all floating-point traits */\nexport abstract class FPTraits {\n  public readonly kind: FPKind;\n  protected constructor(k: FPKind) {\n    this.kind = k;\n  }\n\n  public abstract constants(): FPConstants;\n\n  // Utilities - Implemented\n  /** @returns an interval containing the point or the original interval */\n  public toInterval(n: number | IntervalBounds | FPInterval): FPInterval {\n    if (n instanceof FPInterval) {\n      if (n.kind === this.kind) {\n        return n;\n      }\n      return new FPInterval(this.kind, ...n.bounds());\n    }\n\n    if (n instanceof Array) {\n      return new FPInterval(this.kind, ...n);\n    }\n\n    return new FPInterval(this.kind, n, n);\n  }\n\n  /**\n   * Makes a param that can be turned into an interval\n   */\n  public toParam(n: number | IntervalBounds): FPIntervalParam {\n    return {\n      kind: this.kind,\n      interval: n,\n    };\n  }\n\n  /**\n   * Converts p into an FPInterval if it is an FPIntervalPAram\n   */\n  public fromParam(\n    p: number | IntervalBounds | FPIntervalParam\n  ): number | IntervalBounds | FPInterval {\n    const param = p as FPIntervalParam;\n    if (param.interval && param.kind) {\n      assert(param.kind === this.kind);\n      return this.toInterval(param.interval);\n    }\n    return p as number | IntervalBounds;\n  }\n\n  /**\n   * @returns an interval with the tightest bounds that includes all provided\n   *          intervals\n   */\n  public spanIntervals(...intervals: FPInterval[]): FPInterval {\n    assert(intervals.length > 0, `span of an empty list of FPIntervals is not allowed`);\n    assert(\n      intervals.every(i => i.kind === this.kind),\n      `span is only defined for intervals with the same kind`\n    );\n    let begin = Number.POSITIVE_INFINITY;\n    let end = Number.NEGATIVE_INFINITY;\n    intervals.forEach(i => {\n      begin = Math.min(i.begin, begin);\n      end = Math.max(i.end, end);\n    });\n    return this.toInterval([begin, end]);\n  }\n\n  /** Narrow an array of values to FPVector if possible */\n  public isVector(v: (number | IntervalBounds | FPInterval)[]): v is FPVector {\n    if (v.every(e => e instanceof FPInterval && e.kind === this.kind)) {\n      return v.length === 2 || v.length === 3 || v.length === 4;\n    }\n    return false;\n  }\n\n  /** @returns an FPVector representation of an array of values if possible */\n  public toVector(v: (number | IntervalBounds | FPInterval)[]): FPVector {\n    if (this.isVector(v)) {\n      return v;\n    }\n\n    const f = v.map(e => this.toInterval(e));\n    // The return of the map above is a FPInterval[], which needs to be narrowed\n    // to FPVector, since FPVector is defined as fixed length tuples.\n    if (this.isVector(f)) {\n      return f;\n    }\n    unreachable(`Cannot convert [${v}] to FPVector`);\n  }\n\n  /**\n   * @returns a FPVector where each element is the span for corresponding\n   *          elements at the same index in the input vectors\n   */\n  public spanVectors(...vectors: FPVector[]): FPVector {\n    assert(\n      vectors.every(e => this.isVector(e)),\n      'Vector span is not defined for vectors of differing floating point kinds'\n    );\n\n    const vector_length = vectors[0].length;\n    assert(\n      vectors.every(e => e.length === vector_length),\n      `Vector span is not defined for vectors of differing lengths`\n    );\n\n    const result: FPInterval[] = new Array<FPInterval>(vector_length);\n\n    for (let i = 0; i < vector_length; i++) {\n      result[i] = this.spanIntervals(...vectors.map(v => v[i]));\n    }\n    return this.toVector(result);\n  }\n\n  /** Narrow an array of an array of values to FPMatrix if possible */\n  public isMatrix(m: Array2D<number | IntervalBounds | FPInterval> | FPVector[]): m is FPMatrix {\n    if (!m.every(c => c.every(e => e instanceof FPInterval && e.kind === this.kind))) {\n      return false;\n    }\n    // At this point m guaranteed to be a FPInterval[][], but maybe typed as a\n    // FPVector[].\n    // Coercing the type since FPVector[] is functionally equivalent to\n    // FPInterval[][] for .length and .every, but they are type compatible,\n    // since tuples are not equivalent to arrays, so TS considers c in .every to\n    // be unresolvable below, even though our usage is safe.\n    m = m as FPInterval[][];\n\n    if (m.length > 4 || m.length < 2) {\n      return false;\n    }\n\n    const num_rows = m[0].length;\n    if (num_rows > 4 || num_rows < 2) {\n      return false;\n    }\n\n    return m.every(c => c.length === num_rows);\n  }\n\n  /** @returns an FPMatrix representation of an array of an array of values if possible */\n  public toMatrix(m: Array2D<number | IntervalBounds | FPInterval> | FPVector[]): FPMatrix {\n    if (this.isMatrix(m)) {\n      return m;\n    }\n\n    const result = map2DArray(m, this.toInterval.bind(this));\n\n    // The return of the map above is a FPInterval[][], which needs to be\n    // narrowed to FPMatrix, since FPMatrix is defined as fixed length tuples.\n    if (this.isMatrix(result)) {\n      return result;\n    }\n    unreachable(`Cannot convert ${m} to FPMatrix`);\n  }\n\n  /**\n   * @returns a FPMatrix where each element is the span for corresponding\n   *          elements at the same index in the input matrices\n   */\n  public spanMatrices(...matrices: FPMatrix[]): FPMatrix {\n    // Coercing the type of matrices, since tuples are not generally compatible\n    // with Arrays, but they are functionally equivalent for the usages in this\n    // function.\n    const ms = matrices as Array2D<FPInterval>[];\n    const num_cols = ms[0].length;\n    const num_rows = ms[0][0].length;\n    assert(\n      ms.every(m => m.length === num_cols && m.every(r => r.length === num_rows)),\n      `Matrix span is not defined for Matrices of differing dimensions`\n    );\n\n    const result: Array2D<FPInterval> = [...Array(num_cols)].map(_ => [...Array(num_rows)]);\n    for (let i = 0; i < num_cols; i++) {\n      for (let j = 0; j < num_rows; j++) {\n        result[i][j] = this.spanIntervals(...ms.map(m => m[i][j]));\n      }\n    }\n\n    return this.toMatrix(result);\n  }\n\n  /** @returns input with an appended 0, if inputs contains non-zero subnormals */\n  public addFlushedIfNeeded(values: number[]): number[] {\n    const subnormals = values.filter(this.isSubnormal);\n    const needs_zero = subnormals.length > 0 && subnormals.every(s => s !== 0);\n    return needs_zero ? values.concat(0) : values;\n  }\n\n  /**\n   * Restrict the inputs to an ScalarToInterval operation\n   *\n   * Only used for operations that have tighter domain requirements than 'must\n   * be finite'.\n   *\n   * @param domain interval to restrict inputs to\n   * @param impl operation implementation to run if input is within the required domain\n   * @returns a ScalarToInterval that calls impl if domain contains the input,\n   *          otherwise it returns an unbounded interval */\n  protected limitScalarToIntervalDomain(\n    domain: FPInterval,\n    impl: ScalarToInterval\n  ): ScalarToInterval {\n    return (n: number): FPInterval => {\n      return domain.contains(n) ? impl(n) : this.constants().unboundedInterval;\n    };\n  }\n\n  /**\n   * Restrict the inputs to a ScalarPairToInterval\n   *\n   * Only used for operations that have tighter domain requirements than 'must be\n   * finite'.\n   *\n   * @param domain set of intervals to restrict inputs to\n   * @param impl operation implementation to run if input is within the required domain\n   * @returns a ScalarPairToInterval that calls impl if domain contains the input,\n   *          otherwise it returns an unbounded interval */\n  protected limitScalarPairToIntervalDomain(\n    domain: ScalarPairToIntervalDomain,\n    impl: ScalarPairToInterval\n  ): ScalarPairToInterval {\n    return (x: number, y: number): FPInterval => {\n      if (!domain.x.some(d => d.contains(x)) || !domain.y.some(d => d.contains(y))) {\n        return this.constants().unboundedInterval;\n      }\n\n      return impl(x, y);\n    };\n  }\n\n  /** Stub for scalar to interval generator */\n  protected unimplementedScalarToInterval(_x: number | FPInterval): FPInterval {\n    unreachable(`Not yet implemented for ${this.kind}`);\n  }\n\n  /** Stub for scalar pair to interval generator */\n  protected unimplementedScalarPairToInterval(\n    _x: number | FPInterval,\n    _y: number | FPInterval\n  ): FPInterval {\n    unreachable(`Not yet implemented for ${this.kind}`);\n  }\n\n  /** Stub for scalar triple to interval generator */\n  protected unimplementedScalarTripleToInterval(\n    _x: number | FPInterval,\n    _y: number | FPInterval,\n    _z: number | FPInterval\n  ): FPInterval {\n    unreachable(`Not yet implemented for ${this.kind}`);\n  }\n\n  /** Stub for scalar to vector generator */\n  protected unimplementedScalarToVector(_x: number | FPInterval): FPVector {\n    unreachable(`Not yet implemented for ${this.kind}`);\n  }\n\n  /** Stub for vector to interval generator */\n  protected unimplementedVectorToInterval(_x: (number | FPInterval)[]): FPInterval {\n    unreachable(`Not yet implemented for ${this.kind}`);\n  }\n\n  /** Stub for vector pair to interval generator */\n  protected unimplementedVectorPairToInterval(\n    _x: (number | FPInterval)[],\n    _y: (number | FPInterval)[]\n  ): FPInterval {\n    unreachable(`Not yet implemented for ${this.kind}`);\n  }\n\n  /** Stub for vector to vector generator */\n  protected unimplementedVectorToVector(_x: (number | FPInterval)[]): FPVector {\n    unreachable(`Not yet implemented for ${this.kind}`);\n  }\n\n  /** Stub for vector pair to vector generator */\n  protected unimplementedVectorPairToVector(\n    _x: (number | FPInterval)[],\n    _y: (number | FPInterval)[]\n  ): FPVector {\n    unreachable(`Not yet implemented for ${this.kind}`);\n  }\n\n  /** Stub for vector-scalar to vector generator */\n  protected unimplementedVectorScalarToVector(\n    _x: (number | FPInterval)[],\n    _y: number | FPInterval\n  ): FPVector {\n    unreachable(`Not yet implemented for ${this.kind}`);\n  }\n\n  /** Stub for scalar-vector to vector generator */\n  protected unimplementedScalarVectorToVector(\n    _x: number | FPInterval,\n    _y: (number | FPInterval)[]\n  ): FPVector {\n    unreachable(`Not yet implemented for ${this.kind}`);\n  }\n\n  /** Stub for matrix to interval generator */\n  protected unimplementedMatrixToInterval(_x: Array2D<number>): FPInterval {\n    unreachable(`Not yet implemented for ${this.kind}`);\n  }\n\n  /** Stub for matrix to matix generator */\n  protected unimplementedMatrixToMatrix(_x: Array2D<number>): FPMatrix {\n    unreachable(`Not yet implemented for ${this.kind}`);\n  }\n\n  /** Stub for matrix pair to matrix generator */\n  protected unimplementedMatrixPairToMatrix(_x: Array2D<number>, _y: Array2D<number>): FPMatrix {\n    unreachable(`Not yet implemented for ${this.kind}`);\n  }\n\n  /** Stub for matrix-scalar to matrix generator  */\n  protected unimplementedMatrixScalarToMatrix(\n    _x: Array2D<number>,\n    _y: number | FPInterval\n  ): FPMatrix {\n    unreachable(`Not yet implemented for ${this.kind}`);\n  }\n\n  /** Stub for scalar-matrix to matrix generator  */\n  protected unimplementedScalarMatrixToMatrix(\n    _x: number | FPInterval,\n    _y: Array2D<number>\n  ): FPMatrix {\n    unreachable(`Not yet implemented for ${this.kind}`);\n  }\n\n  /** Stub for matrix-vector to vector generator  */\n  protected unimplementedMatrixVectorToVector(\n    _x: Array2D<number>,\n    _y: (number | FPInterval)[]\n  ): FPVector {\n    unreachable(`Not yet implemented for ${this.kind}`);\n  }\n\n  /** Stub for vector-matrix to vector generator  */\n  protected unimplementedVectorMatrixToVector(\n    _x: (number | FPInterval)[],\n    _y: Array2D<number>\n  ): FPVector {\n    unreachable(`Not yet implemented for ${this.kind}`);\n  }\n\n  /** Stub for distance generator */\n  protected unimplementedDistance(_x: number | number[], _y: number | number[]): FPInterval {\n    unreachable(`Not yet implemented for ${this.kind}`);\n  }\n\n  /** Stub for faceForward */\n  protected unimplementedFaceForward(\n    _x: number[],\n    _y: number[],\n    _z: number[]\n  ): (FPVector | undefined)[] {\n    unreachable(`Not yet implemented for ${this.kind}`);\n  }\n\n  /** Stub for length generator */\n  protected unimplementedLength(_x: number | FPInterval | number[] | FPVector): FPInterval {\n    unreachable(`Not yet implemented for ${this.kind}`);\n  }\n\n  /** Stub for modf generator */\n  protected unimplementedModf(_x: number): { fract: FPInterval; whole: FPInterval } {\n    unreachable(`Not yet implemented for ${this.kind}`);\n  }\n\n  /** Stub for refract generator */\n  protected unimplementedRefract(_i: number[], _s: number[], _r: number): FPVector {\n    unreachable(`Not yet implemented for ${this.kind}`);\n  }\n\n  /** Version of absoluteErrorInterval that always returns the unboundedInterval */\n  protected unboundedAbsoluteErrorInterval(_n: number, _error_range: number): FPInterval {\n    return this.constants().unboundedInterval;\n  }\n\n  /** Version of ulpInterval that always returns the unboundedInterval */\n  protected unboundedUlpInterval(_n: number, _numULP: number): FPInterval {\n    return this.constants().unboundedInterval;\n  }\n\n  // Utilities - Defined by subclass\n  /**\n   * @returns the nearest precise value to the input. Rounding should be IEEE\n   *          'roundTiesToEven'.\n   */\n  public abstract readonly quantize: (n: number) => number;\n  /** @returns all valid roundings of input */\n  public abstract readonly correctlyRounded: (n: number) => number[];\n  /** @returns true if input is considered finite, otherwise false */\n  public abstract readonly isFinite: (n: number) => boolean;\n  /** @returns true if input is considered subnormal, otherwise false */\n  public abstract readonly isSubnormal: (n: number) => boolean;\n  /** @returns 0 if the provided number is subnormal, otherwise returns the proved number */\n  public abstract readonly flushSubnormal: (n: number) => number;\n  /** @returns 1 * ULP: (number) */\n  public abstract readonly oneULP: (target: number, mode?: FlushMode) => number;\n  /** @returns a builder for converting numbers to Scalars */\n  public abstract readonly scalarBuilder: (n: number) => Scalar;\n\n  // Framework - Cases\n\n  /**\n   * @returns a Case for the param and the interval generator provided.\n   * The Case will use an interval comparator for matching results.\n   * @param param the param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating an acceptance interval\n   */\n  private makeScalarToIntervalCase(\n    param: number,\n    filter: IntervalFilter,\n    ...ops: ScalarToInterval[]\n  ): Case | undefined {\n    param = this.quantize(param);\n\n    const intervals = ops.map(o => o(param));\n    if (filter === 'finite' && intervals.some(i => !i.isFinite())) {\n      return undefined;\n    }\n    return { input: [this.scalarBuilder(param)], expected: anyOf(...intervals) };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param params array of inputs to try\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating an acceptance interval\n   */\n  public generateScalarToIntervalCases(\n    params: number[],\n    filter: IntervalFilter,\n    ...ops: ScalarToInterval[]\n  ): Case[] {\n    return params.reduce((cases, e) => {\n      const c = this.makeScalarToIntervalCase(e, filter, ...ops);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n      return cases;\n    }, new Array<Case>());\n  }\n\n  /**\n   * @returns a Case for the params and the interval generator provided.\n   * The Case will use an interval comparator for matching results.\n   * @param param0 the first param to pass in\n   * @param param1 the second param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating an acceptance interval\n   */\n  private makeScalarPairToIntervalCase(\n    param0: number,\n    param1: number,\n    filter: IntervalFilter,\n    ...ops: ScalarPairToInterval[]\n  ): Case | undefined {\n    param0 = this.quantize(param0);\n    param1 = this.quantize(param1);\n\n    const intervals = ops.map(o => o(param0, param1));\n    if (filter === 'finite' && intervals.some(i => !i.isFinite())) {\n      return undefined;\n    }\n    return {\n      input: [this.scalarBuilder(param0), this.scalarBuilder(param1)],\n      expected: anyOf(...intervals),\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param param0s array of inputs to try for the first input\n   * @param param1s array of inputs to try for the second input\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating an acceptance interval\n   */\n  public generateScalarPairToIntervalCases(\n    param0s: number[],\n    param1s: number[],\n    filter: IntervalFilter,\n    ...ops: ScalarPairToInterval[]\n  ): Case[] {\n    return cartesianProduct(param0s, param1s).reduce((cases, e) => {\n      const c = this.makeScalarPairToIntervalCase(e[0], e[1], filter, ...ops);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n      return cases;\n    }, new Array<Case>());\n  }\n\n  /**\n   * @returns a Case for the params and the interval generator provided.\n   * The Case will use an interval comparator for matching results.\n   * @param param0 the first param to pass in\n   * @param param1 the second param to pass in\n   * @param param2 the third param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating an acceptance interval\n   */\n  public makeScalarTripleToIntervalCase(\n    param0: number,\n    param1: number,\n    param2: number,\n    filter: IntervalFilter,\n    ...ops: ScalarTripleToInterval[]\n  ): Case | undefined {\n    param0 = this.quantize(param0);\n    param1 = this.quantize(param1);\n    param2 = this.quantize(param2);\n\n    const intervals = ops.map(o => o(param0, param1, param2));\n    if (filter === 'finite' && intervals.some(i => !i.isFinite())) {\n      return undefined;\n    }\n    return {\n      input: [this.scalarBuilder(param0), this.scalarBuilder(param1), this.scalarBuilder(param2)],\n      expected: anyOf(...intervals),\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param param0s array of inputs to try for the first input\n   * @param param1s array of inputs to try for the second input\n   * @param param2s array of inputs to try for the third input\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating an acceptance interval\n   */\n  public generateScalarTripleToIntervalCases(\n    param0s: number[],\n    param1s: number[],\n    param2s: number[],\n    filter: IntervalFilter,\n    ...ops: ScalarTripleToInterval[]\n  ): Case[] {\n    return cartesianProduct(param0s, param1s, param2s).reduce((cases, e) => {\n      const c = this.makeScalarTripleToIntervalCase(e[0], e[1], e[2], filter, ...ops);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n      return cases;\n    }, new Array<Case>());\n  }\n\n  /**\n   * @returns a Case for the params and the interval generator provided.\n   * The Case will use an interval comparator for matching results.\n   * @param param the param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating an acceptance interval\n   */\n  private makeVectorToIntervalCase(\n    param: number[],\n    filter: IntervalFilter,\n    ...ops: VectorToInterval[]\n  ): Case | undefined {\n    param = param.map(this.quantize);\n\n    const intervals = ops.map(o => o(param));\n    if (filter === 'finite' && intervals.some(i => !i.isFinite())) {\n      return undefined;\n    }\n    return {\n      input: [toVector(param, this.scalarBuilder)],\n      expected: anyOf(...intervals),\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param params array of inputs to try\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating an acceptance interval\n   */\n  public generateVectorToIntervalCases(\n    params: number[][],\n    filter: IntervalFilter,\n    ...ops: VectorToInterval[]\n  ): Case[] {\n    return params.reduce((cases, e) => {\n      const c = this.makeVectorToIntervalCase(e, filter, ...ops);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n      return cases;\n    }, new Array<Case>());\n  }\n\n  /**\n   * @returns a Case for the params and the interval generator provided.\n   * The Case will use an interval comparator for matching results.\n   * @param param0 the first param to pass in\n   * @param param1 the second param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating an acceptance interval\n   */\n  private makeVectorPairToIntervalCase(\n    param0: number[],\n    param1: number[],\n    filter: IntervalFilter,\n    ...ops: VectorPairToInterval[]\n  ): Case | undefined {\n    param0 = param0.map(this.quantize);\n    param1 = param1.map(this.quantize);\n\n    const intervals = ops.map(o => o(param0, param1));\n    if (filter === 'finite' && intervals.some(i => !i.isFinite())) {\n      return undefined;\n    }\n    return {\n      input: [toVector(param0, this.scalarBuilder), toVector(param1, this.scalarBuilder)],\n      expected: anyOf(...intervals),\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param param0s array of inputs to try for the first input\n   * @param param1s array of inputs to try for the second input\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating an acceptance interval\n   */\n  public generateVectorPairToIntervalCases(\n    param0s: number[][],\n    param1s: number[][],\n    filter: IntervalFilter,\n    ...ops: VectorPairToInterval[]\n  ): Case[] {\n    return cartesianProduct(param0s, param1s).reduce((cases, e) => {\n      const c = this.makeVectorPairToIntervalCase(e[0], e[1], filter, ...ops);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n      return cases;\n    }, new Array<Case>());\n  }\n\n  /**\n   * @returns a Case for the param and vector of intervals generator provided\n   * @param param the param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a vector of acceptance\n   *            intervals.\n   */\n  private makeVectorToVectorCase(\n    param: number[],\n    filter: IntervalFilter,\n    ...ops: VectorToVector[]\n  ): Case | undefined {\n    param = param.map(this.quantize);\n\n    const vectors = ops.map(o => o(param));\n    if (filter === 'finite' && vectors.some(v => v.some(e => !e.isFinite()))) {\n      return undefined;\n    }\n    return {\n      input: [toVector(param, this.scalarBuilder)],\n      expected: anyOf(...vectors),\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param params array of inputs to try\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a vector of acceptance\n   *            intervals.\n   */\n  public generateVectorToVectorCases(\n    params: number[][],\n    filter: IntervalFilter,\n    ...ops: VectorToVector[]\n  ): Case[] {\n    return params.reduce((cases, e) => {\n      const c = this.makeVectorToVectorCase(e, filter, ...ops);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n      return cases;\n    }, new Array<Case>());\n  }\n\n  /**\n   * @returns a Case for the params and the interval vector generator provided.\n   * The Case will use an interval comparator for matching results.\n   * @param scalar the scalar param to pass in\n   * @param vector the vector param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a vector of acceptance intervals\n   */\n  private makeScalarVectorToVectorCase(\n    scalar: number,\n    vector: number[],\n    filter: IntervalFilter,\n    ...ops: ScalarVectorToVector[]\n  ): Case | undefined {\n    scalar = this.quantize(scalar);\n    vector = vector.map(this.quantize);\n\n    const results = ops.map(o => o(scalar, vector));\n    if (filter === 'finite' && results.some(r => r.some(e => !e.isFinite()))) {\n      return undefined;\n    }\n    return {\n      input: [this.scalarBuilder(scalar), toVector(vector, this.scalarBuilder)],\n      expected: anyOf(...results),\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param scalars array of scalar inputs to try\n   * @param vectors array of vector inputs to try\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a vector of acceptance intervals\n   */\n  public generateScalarVectorToVectorCases(\n    scalars: number[],\n    vectors: number[][],\n    filter: IntervalFilter,\n    ...ops: ScalarVectorToVector[]\n  ): Case[] {\n    // Cannot use cartesianProduct here, due to heterogeneous types\n    const cases: Case[] = [];\n    scalars.forEach(scalar => {\n      vectors.forEach(vector => {\n        const c = this.makeScalarVectorToVectorCase(scalar, vector, filter, ...ops);\n        if (c !== undefined) {\n          cases.push(c);\n        }\n      });\n    });\n    return cases;\n  }\n\n  /**\n   * @returns a Case for the params and the interval vector generator provided.\n   * The Case will use an interval comparator for matching results.\n   * @param vector the vector param to pass in\n   * @param scalar the scalar param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a vector of acceptance intervals\n   */\n  private makeVectorScalarToVectorCase(\n    vector: number[],\n    scalar: number,\n    filter: IntervalFilter,\n    ...ops: VectorScalarToVector[]\n  ): Case | undefined {\n    vector = vector.map(this.quantize);\n    scalar = this.quantize(scalar);\n\n    const results = ops.map(o => o(vector, scalar));\n    if (filter === 'finite' && results.some(r => r.some(e => !e.isFinite()))) {\n      return undefined;\n    }\n    return {\n      input: [toVector(vector, this.scalarBuilder), this.scalarBuilder(scalar)],\n      expected: anyOf(...results),\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param vectors array of vector inputs to try\n   * @param scalars array of scalar inputs to try\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a vector of acceptance intervals\n   */\n  public generateVectorScalarToVectorCases(\n    vectors: number[][],\n    scalars: number[],\n    filter: IntervalFilter,\n    ...ops: VectorScalarToVector[]\n  ): Case[] {\n    // Cannot use cartesianProduct here, due to heterogeneous types\n    const cases: Case[] = [];\n    vectors.forEach(vector => {\n      scalars.forEach(scalar => {\n        const c = this.makeVectorScalarToVectorCase(vector, scalar, filter, ...ops);\n        if (c !== undefined) {\n          cases.push(c);\n        }\n      });\n    });\n    return cases;\n  }\n\n  /**\n   * @returns a Case for the param and vector of intervals generator provided\n   * @param param0 the first param to pass in\n   * @param param1 the second param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a vector of acceptance\n   *            intervals.\n   */\n  private makeVectorPairToVectorCase(\n    param0: number[],\n    param1: number[],\n    filter: IntervalFilter,\n    ...ops: VectorPairToVector[]\n  ): Case | undefined {\n    param0 = param0.map(this.quantize);\n    param1 = param1.map(this.quantize);\n    const vectors = ops.map(o => o(param0, param1));\n    if (filter === 'finite' && vectors.some(v => v.some(e => !e.isFinite()))) {\n      return undefined;\n    }\n    return {\n      input: [toVector(param0, this.scalarBuilder), toVector(param1, this.scalarBuilder)],\n      expected: anyOf(...vectors),\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param param0s array of inputs to try for the first input\n   * @param param1s array of inputs to try for the second input\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a vector of acceptance\n   *            intervals.\n   */\n  public generateVectorPairToVectorCases(\n    param0s: number[][],\n    param1s: number[][],\n    filter: IntervalFilter,\n    ...ops: VectorPairToVector[]\n  ): Case[] {\n    return cartesianProduct(param0s, param1s).reduce((cases, e) => {\n      const c = this.makeVectorPairToVectorCase(e[0], e[1], filter, ...ops);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n      return cases;\n    }, new Array<Case>());\n  }\n\n  /**\n   * @returns a Case for the param and an array of interval generators provided\n   * @param param the param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating an acceptance interval\n   */\n  private makeMatrixToScalarCase(\n    param: number[][],\n    filter: IntervalFilter,\n    ...ops: MatrixToScalar[]\n  ): Case | undefined {\n    param = map2DArray(param, this.quantize);\n\n    const results = ops.map(o => o(param));\n    if (filter === 'finite' && results.some(e => !e.isFinite())) {\n      return undefined;\n    }\n\n    return {\n      input: [toMatrix(param, this.scalarBuilder)],\n      expected: anyOf(...results),\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param params array of inputs to try\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating an acceptance interval\n   */\n  public generateMatrixToScalarCases(\n    params: number[][][],\n    filter: IntervalFilter,\n    ...ops: MatrixToScalar[]\n  ): Case[] {\n    return params.reduce((cases, e) => {\n      const c = this.makeMatrixToScalarCase(e, filter, ...ops);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n      return cases;\n    }, new Array<Case>());\n  }\n\n  /**\n   * @returns a Case for the param and an array of interval generators provided\n   * @param param the param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a matrix of acceptance\n   *            intervals\n   */\n  private makeMatrixToMatrixCase(\n    param: number[][],\n    filter: IntervalFilter,\n    ...ops: MatrixToMatrix[]\n  ): Case | undefined {\n    param = map2DArray(param, this.quantize);\n\n    const results = ops.map(o => o(param));\n    if (filter === 'finite' && results.some(m => m.some(c => c.some(r => !r.isFinite())))) {\n      return undefined;\n    }\n\n    return {\n      input: [toMatrix(param, this.scalarBuilder)],\n      expected: anyOf(...results),\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param params array of inputs to try\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a matrix of acceptance\n   *            intervals\n   */\n  public generateMatrixToMatrixCases(\n    params: number[][][],\n    filter: IntervalFilter,\n    ...ops: MatrixToMatrix[]\n  ): Case[] {\n    return params.reduce((cases, e) => {\n      const c = this.makeMatrixToMatrixCase(e, filter, ...ops);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n      return cases;\n    }, new Array<Case>());\n  }\n\n  /**\n   * @returns a Case for the params and matrix of intervals generator provided\n   * @param param0 the first param to pass in\n   * @param param1 the second param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a matrix of acceptance\n   *            intervals\n   */\n  private makeMatrixPairToMatrixCase(\n    param0: number[][],\n    param1: number[][],\n    filter: IntervalFilter,\n    ...ops: MatrixPairToMatrix[]\n  ): Case | undefined {\n    param0 = map2DArray(param0, this.quantize);\n    param1 = map2DArray(param1, this.quantize);\n\n    const results = ops.map(o => o(param0, param1));\n    if (filter === 'finite' && results.some(m => m.some(c => c.some(r => !r.isFinite())))) {\n      return undefined;\n    }\n    return {\n      input: [toMatrix(param0, this.scalarBuilder), toMatrix(param1, this.scalarBuilder)],\n      expected: anyOf(...results),\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param param0s array of inputs to try for the first input\n   * @param param1s array of inputs to try for the second input\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a matrix of acceptance\n   *            intervals\n   */\n  public generateMatrixPairToMatrixCases(\n    param0s: number[][][],\n    param1s: number[][][],\n    filter: IntervalFilter,\n    ...ops: MatrixPairToMatrix[]\n  ): Case[] {\n    return cartesianProduct(param0s, param1s).reduce((cases, e) => {\n      const c = this.makeMatrixPairToMatrixCase(e[0], e[1], filter, ...ops);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n      return cases;\n    }, new Array<Case>());\n  }\n\n  /**\n   * @returns a Case for the params and matrix of intervals generator provided\n   * @param mat the matrix param to pass in\n   * @param scalar the scalar to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a matrix of acceptance\n   *            intervals\n   */\n  private makeMatrixScalarToMatrixCase(\n    mat: number[][],\n    scalar: number,\n    filter: IntervalFilter,\n    ...ops: MatrixScalarToMatrix[]\n  ): Case | undefined {\n    mat = map2DArray(mat, this.quantize);\n    scalar = this.quantize(scalar);\n\n    const results = ops.map(o => o(mat, scalar));\n    if (filter === 'finite' && results.some(m => m.some(c => c.some(r => !r.isFinite())))) {\n      return undefined;\n    }\n    return {\n      input: [toMatrix(mat, this.scalarBuilder), this.scalarBuilder(scalar)],\n      expected: anyOf(...results),\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param mats array of inputs to try for the matrix input\n   * @param scalars array of inputs to try for the scalar input\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a matrix of acceptance\n   *            intervals\n   */\n  public generateMatrixScalarToMatrixCases(\n    mats: number[][][],\n    scalars: number[],\n    filter: IntervalFilter,\n    ...ops: MatrixScalarToMatrix[]\n  ): Case[] {\n    // Cannot use cartesianProduct here, due to heterogeneous types\n    const cases: Case[] = [];\n    mats.forEach(mat => {\n      scalars.forEach(scalar => {\n        const c = this.makeMatrixScalarToMatrixCase(mat, scalar, filter, ...ops);\n        if (c !== undefined) {\n          cases.push(c);\n        }\n      });\n    });\n    return cases;\n  }\n\n  /**\n   * @returns a Case for the params and matrix of intervals generator provided\n   * @param scalar the scalar to pass in\n   * @param mat the matrix param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a matrix of acceptance\n   *            intervals\n   */\n  private makeScalarMatrixToMatrixCase(\n    scalar: number,\n    mat: number[][],\n    filter: IntervalFilter,\n    ...ops: ScalarMatrixToMatrix[]\n  ): Case | undefined {\n    scalar = this.quantize(scalar);\n    mat = map2DArray(mat, this.quantize);\n\n    const results = ops.map(o => o(scalar, mat));\n    if (filter === 'finite' && results.some(m => m.some(c => c.some(r => !r.isFinite())))) {\n      return undefined;\n    }\n    return {\n      input: [this.scalarBuilder(scalar), toMatrix(mat, this.scalarBuilder)],\n      expected: anyOf(...results),\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param scalars array of inputs to try for the scalar input\n   * @param mats array of inputs to try for the matrix input\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a matrix of acceptance\n   *            intervals\n   */\n  public generateScalarMatrixToMatrixCases(\n    scalars: number[],\n    mats: number[][][],\n    filter: IntervalFilter,\n    ...ops: ScalarMatrixToMatrix[]\n  ): Case[] {\n    // Cannot use cartesianProduct here, due to heterogeneous types\n    const cases: Case[] = [];\n    mats.forEach(mat => {\n      scalars.forEach(scalar => {\n        const c = this.makeScalarMatrixToMatrixCase(scalar, mat, filter, ...ops);\n        if (c !== undefined) {\n          cases.push(c);\n        }\n      });\n    });\n    return cases;\n  }\n\n  /**\n   * @returns a Case for the params and the vector of intervals generator provided\n   * @param mat the matrix param to pass in\n   * @param vec the vector to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a vector of acceptance\n   *            intervals\n   */\n  private makeMatrixVectorToVectorCase(\n    mat: number[][],\n    vec: number[],\n    filter: IntervalFilter,\n    ...ops: MatrixVectorToVector[]\n  ): Case | undefined {\n    mat = map2DArray(mat, this.quantize);\n    vec = vec.map(this.quantize);\n\n    const results = ops.map(o => o(mat, vec));\n    if (filter === 'finite' && results.some(v => v.some(e => !e.isFinite()))) {\n      return undefined;\n    }\n    return {\n      input: [toMatrix(mat, this.scalarBuilder), toVector(vec, this.scalarBuilder)],\n      expected: anyOf(...results),\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param mats array of inputs to try for the matrix input\n   * @param vecs array of inputs to try for the vector input\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a vector of acceptance\n   *            intervals\n   */\n  public generateMatrixVectorToVectorCases(\n    mats: number[][][],\n    vecs: number[][],\n    filter: IntervalFilter,\n    ...ops: MatrixVectorToVector[]\n  ): Case[] {\n    // Cannot use cartesianProduct here, due to heterogeneous types\n    const cases: Case[] = [];\n    mats.forEach(mat => {\n      vecs.forEach(vec => {\n        const c = this.makeMatrixVectorToVectorCase(mat, vec, filter, ...ops);\n        if (c !== undefined) {\n          cases.push(c);\n        }\n      });\n    });\n    return cases;\n  }\n\n  /**\n   * @returns a Case for the params and the vector of intervals generator provided\n   * @param vec the vector to pass in\n   * @param mat the matrix param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a vector of acceptance\n   *            intervals\n   */\n  private makeVectorMatrixToVectorCase(\n    vec: number[],\n    mat: number[][],\n    filter: IntervalFilter,\n    ...ops: VectorMatrixToVector[]\n  ): Case | undefined {\n    vec = vec.map(this.quantize);\n    mat = map2DArray(mat, this.quantize);\n\n    const results = ops.map(o => o(vec, mat));\n    if (filter === 'finite' && results.some(v => v.some(e => !e.isFinite()))) {\n      return undefined;\n    }\n    return {\n      input: [toVector(vec, this.scalarBuilder), toMatrix(mat, this.scalarBuilder)],\n      expected: anyOf(...results),\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param vecs array of inputs to try for the vector input\n   * @param mats array of inputs to try for the matrix input\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a vector of acceptance\n   *            intervals\n   */\n  public generateVectorMatrixToVectorCases(\n    vecs: number[][],\n    mats: number[][][],\n    filter: IntervalFilter,\n    ...ops: VectorMatrixToVector[]\n  ): Case[] {\n    // Cannot use cartesianProduct here, due to heterogeneous types\n    const cases: Case[] = [];\n    vecs.forEach(vec => {\n      mats.forEach(mat => {\n        const c = this.makeVectorMatrixToVectorCase(vec, mat, filter, ...ops);\n        if (c !== undefined) {\n          cases.push(c);\n        }\n      });\n    });\n    return cases;\n  }\n\n  // Framework - Intervals\n\n  /**\n   * Converts a point to an acceptance interval, using a specific function\n   *\n   * This handles correctly rounding and flushing inputs as needed.\n   * Duplicate inputs are pruned before invoking op.impl.\n   * op.extrema is invoked before this point in the call stack.\n   * op.domain is tested before this point in the call stack.\n   *\n   * @param n value to flush & round then invoke op.impl on\n   * @param op operation defining the function being run\n   * @returns a span over all the outputs of op.impl\n   */\n  private roundAndFlushScalarToInterval(n: number, op: ScalarToIntervalOp) {\n    assert(!Number.isNaN(n), `flush not defined for NaN`);\n    const values = this.correctlyRounded(n);\n    const inputs = this.addFlushedIfNeeded(values);\n    const results = new Set<FPInterval>(inputs.map(op.impl));\n    return this.spanIntervals(...results);\n  }\n\n  /**\n   * Converts a pair to an acceptance interval, using a specific function\n   *\n   * This handles correctly rounding and flushing inputs as needed.\n   * Duplicate inputs are pruned before invoking op.impl.\n   * All unique combinations of x & y are run.\n   * op.extrema is invoked before this point in the call stack.\n   * op.domain is tested before this point in the call stack.\n   *\n   * @param x first param to flush & round then invoke op.impl on\n   * @param y second param to flush & round then invoke op.impl on\n   * @param op operation defining the function being run\n   * @returns a span over all the outputs of op.impl\n   */\n  private roundAndFlushScalarPairToInterval(\n    x: number,\n    y: number,\n    op: ScalarPairToIntervalOp\n  ): FPInterval {\n    assert(!Number.isNaN(x), `flush not defined for NaN`);\n    assert(!Number.isNaN(y), `flush not defined for NaN`);\n    const x_values = this.correctlyRounded(x);\n    const y_values = this.correctlyRounded(y);\n    const x_inputs = this.addFlushedIfNeeded(x_values);\n    const y_inputs = this.addFlushedIfNeeded(y_values);\n    const intervals = new Set<FPInterval>();\n    x_inputs.forEach(inner_x => {\n      y_inputs.forEach(inner_y => {\n        intervals.add(op.impl(inner_x, inner_y));\n      });\n    });\n    return this.spanIntervals(...intervals);\n  }\n\n  /**\n   * Converts a triplet to an acceptance interval, using a specific function\n   *\n   * This handles correctly rounding and flushing inputs as needed.\n   * Duplicate inputs are pruned before invoking op.impl.\n   * All unique combinations of x, y & z are run.\n   *\n   * @param x first param to flush & round then invoke op.impl on\n   * @param y second param to flush & round then invoke op.impl on\n   * @param z third param to flush & round then invoke op.impl on\n   * @param op operation defining the function being run\n   * @returns a span over all the outputs of op.impl\n   */\n  private roundAndFlushScalarTripleToInterval(\n    x: number,\n    y: number,\n    z: number,\n    op: ScalarTripleToIntervalOp\n  ): FPInterval {\n    assert(!Number.isNaN(x), `flush not defined for NaN`);\n    assert(!Number.isNaN(y), `flush not defined for NaN`);\n    assert(!Number.isNaN(z), `flush not defined for NaN`);\n    const x_values = this.correctlyRounded(x);\n    const y_values = this.correctlyRounded(y);\n    const z_values = this.correctlyRounded(z);\n    const x_inputs = this.addFlushedIfNeeded(x_values);\n    const y_inputs = this.addFlushedIfNeeded(y_values);\n    const z_inputs = this.addFlushedIfNeeded(z_values);\n    const intervals = new Set<FPInterval>();\n    // prettier-ignore\n    x_inputs.forEach(inner_x => {\n      y_inputs.forEach(inner_y => {\n        z_inputs.forEach(inner_z => {\n          intervals.add(op.impl(inner_x, inner_y, inner_z));\n        });\n      });\n    });\n\n    return this.spanIntervals(...intervals);\n  }\n\n  /**\n   * Converts a vector to an acceptance interval using a specific function\n   *\n   * This handles correctly rounding and flushing inputs as needed.\n   * Duplicate inputs are pruned before invoking op.impl.\n   *\n   * @param x param to flush & round then invoke op.impl on\n   * @param op operation defining the function being run\n   * @returns a span over all the outputs of op.impl\n   */\n  private roundAndFlushVectorToInterval(x: number[], op: VectorToIntervalOp): FPInterval {\n    assert(\n      x.every(e => !Number.isNaN(e)),\n      `flush not defined for NaN`\n    );\n\n    const x_rounded: number[][] = x.map(this.correctlyRounded);\n    const x_flushed: number[][] = x_rounded.map(this.addFlushedIfNeeded.bind(this));\n    const x_inputs = cartesianProduct<number>(...x_flushed);\n\n    const intervals = new Set<FPInterval>();\n    x_inputs.forEach(inner_x => {\n      intervals.add(op.impl(inner_x));\n    });\n    return this.spanIntervals(...intervals);\n  }\n\n  /**\n   * Converts a pair of vectors to an acceptance interval using a specific\n   * function\n   *\n   * This handles correctly rounding and flushing inputs as needed.\n   * Duplicate inputs are pruned before invoking op.impl.\n   * All unique combinations of x & y are run.\n   *\n   * @param x first param to flush & round then invoke op.impl on\n   * @param y second param to flush & round then invoke op.impl on\n   * @param op operation defining the function being run\n   * @returns a span over all the outputs of op.impl\n   */\n  private roundAndFlushVectorPairToInterval(\n    x: number[],\n    y: number[],\n    op: VectorPairToIntervalOp\n  ): FPInterval {\n    assert(\n      x.every(e => !Number.isNaN(e)),\n      `flush not defined for NaN`\n    );\n    assert(\n      y.every(e => !Number.isNaN(e)),\n      `flush not defined for NaN`\n    );\n\n    const x_rounded: number[][] = x.map(this.correctlyRounded);\n    const y_rounded: number[][] = y.map(this.correctlyRounded);\n    const x_flushed: number[][] = x_rounded.map(this.addFlushedIfNeeded.bind(this));\n    const y_flushed: number[][] = y_rounded.map(this.addFlushedIfNeeded.bind(this));\n    const x_inputs = cartesianProduct<number>(...x_flushed);\n    const y_inputs = cartesianProduct<number>(...y_flushed);\n\n    const intervals = new Set<FPInterval>();\n    x_inputs.forEach(inner_x => {\n      y_inputs.forEach(inner_y => {\n        intervals.add(op.impl(inner_x, inner_y));\n      });\n    });\n    return this.spanIntervals(...intervals);\n  }\n\n  /**\n   * Converts a vector to a vector of acceptance intervals using a specific\n   * function\n   *\n   * This handles correctly rounding and flushing inputs as needed.\n   * Duplicate inputs are pruned before invoking op.impl.\n   *\n   * @param x param to flush & round then invoke op.impl on\n   * @param op operation defining the function being run\n   * @returns a vector of spans for each outputs of op.impl\n   */\n  private roundAndFlushVectorToVector(x: number[], op: VectorToVectorOp): FPVector {\n    assert(\n      x.every(e => !Number.isNaN(e)),\n      `flush not defined for NaN`\n    );\n\n    const x_rounded: number[][] = x.map(this.correctlyRounded);\n    const x_flushed: number[][] = x_rounded.map(this.addFlushedIfNeeded.bind(this));\n    const x_inputs = cartesianProduct<number>(...x_flushed);\n\n    const interval_vectors = new Set<FPVector>();\n    x_inputs.forEach(inner_x => {\n      interval_vectors.add(op.impl(inner_x));\n    });\n\n    return this.spanVectors(...interval_vectors);\n  }\n\n  /**\n   * Converts a pair of vectors to a vector of acceptance intervals using a\n   * specific function\n   *\n   * This handles correctly rounding and flushing inputs as needed.\n   * Duplicate inputs are pruned before invoking op.impl.\n   *\n   * @param x first param to flush & round then invoke op.impl on\n   * @param y second param to flush & round then invoke op.impl on\n   * @param op operation defining the function being run\n   * @returns a vector of spans for each output of op.impl\n   */\n  private roundAndFlushVectorPairToVector(\n    x: number[],\n    y: number[],\n    op: VectorPairToVectorOp\n  ): FPVector {\n    assert(\n      x.every(e => !Number.isNaN(e)),\n      `flush not defined for NaN`\n    );\n    assert(\n      y.every(e => !Number.isNaN(e)),\n      `flush not defined for NaN`\n    );\n\n    const x_rounded: number[][] = x.map(this.correctlyRounded);\n    const y_rounded: number[][] = y.map(this.correctlyRounded);\n    const x_flushed: number[][] = x_rounded.map(this.addFlushedIfNeeded.bind(this));\n    const y_flushed: number[][] = y_rounded.map(this.addFlushedIfNeeded.bind(this));\n    const x_inputs = cartesianProduct<number>(...x_flushed);\n    const y_inputs = cartesianProduct<number>(...y_flushed);\n\n    const interval_vectors = new Set<FPVector>();\n    x_inputs.forEach(inner_x => {\n      y_inputs.forEach(inner_y => {\n        interval_vectors.add(op.impl(inner_x, inner_y));\n      });\n    });\n\n    return this.spanVectors(...interval_vectors);\n  }\n\n  /**\n   * Converts a matrix to a matrix of acceptance intervals using a specific\n   * function\n   *\n   * This handles correctly rounding and flushing inputs as needed.\n   * Duplicate inputs are pruned before invoking op.impl.\n   *\n   * @param m param to flush & round then invoke op.impl on\n   * @param op operation defining the function being run\n   * @returns a matrix of spans for each outputs of op.impl\n   */\n  private roundAndFlushMatrixToMatrix(m: Array2D<number>, op: MatrixToMatrixOp): FPMatrix {\n    const num_cols = m.length;\n    const num_rows = m[0].length;\n    assert(\n      m.every(c => c.every(r => !Number.isNaN(r))),\n      `flush not defined for NaN`\n    );\n\n    const m_flat = flatten2DArray(m);\n    const m_rounded: number[][] = m_flat.map(this.correctlyRounded);\n    const m_flushed: number[][] = m_rounded.map(this.addFlushedIfNeeded.bind(this));\n    const m_options: number[][] = cartesianProduct<number>(...m_flushed);\n    const m_inputs: Array2D<number>[] = m_options.map(e => unflatten2DArray(e, num_cols, num_rows));\n\n    const interval_matrices = new Set<FPMatrix>();\n    m_inputs.forEach(inner_m => {\n      interval_matrices.add(op.impl(inner_m));\n    });\n\n    return this.spanMatrices(...interval_matrices);\n  }\n\n  /**\n   * Calculate the acceptance interval for a unary function over an interval\n   *\n   * If the interval is actually a point, this just decays to\n   * roundAndFlushScalarToInterval.\n   *\n   * The provided domain interval may be adjusted if the operation defines an\n   * extrema function.\n   *\n   * @param x input domain interval\n   * @param op operation defining the function being run\n   * @returns a span over all the outputs of op.impl\n   */\n  protected runScalarToIntervalOp(x: FPInterval, op: ScalarToIntervalOp): FPInterval {\n    if (!x.isFinite()) {\n      return this.constants().unboundedInterval;\n    }\n\n    if (op.extrema !== undefined) {\n      x = op.extrema(x);\n    }\n\n    const result = this.spanIntervals(\n      ...x.bounds().map(b => this.roundAndFlushScalarToInterval(b, op))\n    );\n    return result.isFinite() ? result : this.constants().unboundedInterval;\n  }\n\n  /**\n   * Calculate the acceptance interval for a binary function over an interval\n   *\n   * The provided domain intervals may be adjusted if the operation defines an\n   * extrema function.\n   *\n   * @param x first input domain interval\n   * @param y second input domain interval\n   * @param op operation defining the function being run\n   * @returns a span over all the outputs of op.impl\n   */\n  protected runScalarPairToIntervalOp(\n    x: FPInterval,\n    y: FPInterval,\n    op: ScalarPairToIntervalOp\n  ): FPInterval {\n    if (!x.isFinite() || !y.isFinite()) {\n      return this.constants().unboundedInterval;\n    }\n\n    if (op.extrema !== undefined) {\n      [x, y] = op.extrema(x, y);\n    }\n\n    const outputs = new Set<FPInterval>();\n    x.bounds().forEach(inner_x => {\n      y.bounds().forEach(inner_y => {\n        outputs.add(this.roundAndFlushScalarPairToInterval(inner_x, inner_y, op));\n      });\n    });\n\n    const result = this.spanIntervals(...outputs);\n    return result.isFinite() ? result : this.constants().unboundedInterval;\n  }\n\n  /**\n   * Calculate the acceptance interval for a ternary function over an interval\n   *\n   * @param x first input domain interval\n   * @param y second input domain interval\n   * @param z third input domain interval\n   * @param op operation defining the function being run\n   * @returns a span over all the outputs of op.impl\n   */\n  protected runScalarTripleToIntervalOp(\n    x: FPInterval,\n    y: FPInterval,\n    z: FPInterval,\n    op: ScalarTripleToIntervalOp\n  ): FPInterval {\n    if (!x.isFinite() || !y.isFinite() || !z.isFinite()) {\n      return this.constants().unboundedInterval;\n    }\n\n    const outputs = new Set<FPInterval>();\n    x.bounds().forEach(inner_x => {\n      y.bounds().forEach(inner_y => {\n        z.bounds().forEach(inner_z => {\n          outputs.add(this.roundAndFlushScalarTripleToInterval(inner_x, inner_y, inner_z, op));\n        });\n      });\n    });\n\n    const result = this.spanIntervals(...outputs);\n    return result.isFinite() ? result : this.constants().unboundedInterval;\n  }\n\n  /**\n   * Calculate the acceptance interval for a vector function over given\n   * intervals\n   *\n   * @param x input domain intervals vector\n   * @param op operation defining the function being run\n   * @returns a span over all the outputs of op.impl\n   */\n  protected runVectorToIntervalOp(x: FPVector, op: VectorToIntervalOp): FPInterval {\n    if (x.some(e => !e.isFinite())) {\n      return this.constants().unboundedInterval;\n    }\n\n    const x_values = cartesianProduct<number>(...x.map(e => e.bounds()));\n\n    const outputs = new Set<FPInterval>();\n    x_values.forEach(inner_x => {\n      outputs.add(this.roundAndFlushVectorToInterval(inner_x, op));\n    });\n\n    const result = this.spanIntervals(...outputs);\n    return result.isFinite() ? result : this.constants().unboundedInterval;\n  }\n\n  /**\n   * Calculate the acceptance interval for a vector pair function over given\n   * intervals\n   *\n   * @param x first input domain intervals vector\n   * @param y second input domain intervals vector\n   * @param op operation defining the function being run\n   * @returns a span over all the outputs of op.impl\n   */\n  protected runVectorPairToIntervalOp(\n    x: FPVector,\n    y: FPVector,\n    op: VectorPairToIntervalOp\n  ): FPInterval {\n    if (x.some(e => !e.isFinite()) || y.some(e => !e.isFinite())) {\n      return this.constants().unboundedInterval;\n    }\n\n    const x_values = cartesianProduct<number>(...x.map(e => e.bounds()));\n    const y_values = cartesianProduct<number>(...y.map(e => e.bounds()));\n\n    const outputs = new Set<FPInterval>();\n    x_values.forEach(inner_x => {\n      y_values.forEach(inner_y => {\n        outputs.add(this.roundAndFlushVectorPairToInterval(inner_x, inner_y, op));\n      });\n    });\n\n    const result = this.spanIntervals(...outputs);\n    return result.isFinite() ? result : this.constants().unboundedInterval;\n  }\n\n  /**\n   * Calculate the vector of acceptance intervals for a pair of vector function\n   * over given intervals\n   *\n   * @param x input domain intervals vector\n   * @param op operation defining the function being run\n   * @returns a vector of spans over all the outputs of op.impl\n   */\n  protected runVectorToVectorOp(x: FPVector, op: VectorToVectorOp): FPVector {\n    if (x.some(e => !e.isFinite())) {\n      return this.constants().unboundedVector[x.length];\n    }\n\n    const x_values = cartesianProduct<number>(...x.map(e => e.bounds()));\n\n    const outputs = new Set<FPVector>();\n    x_values.forEach(inner_x => {\n      outputs.add(this.roundAndFlushVectorToVector(inner_x, op));\n    });\n\n    const result = this.spanVectors(...outputs);\n    return result.every(e => e.isFinite())\n      ? result\n      : this.constants().unboundedVector[result.length];\n  }\n\n  /**\n   * Calculate the vector of acceptance intervals by running a scalar operation\n   * component-wise over a vector.\n   *\n   * This is used for situations where a component-wise operation, like vector\n   * negation, is needed as part of an inherited accuracy, but the top-level\n   * operation test don't require an explicit vector definition of the function,\n   * due to the generated 'vectorize' tests being sufficient.\n   *\n   * @param x input domain intervals vector\n   * @param op scalar operation to be run component-wise\n   * @returns a vector of intervals with the outputs of op.impl\n   */\n  protected runScalarToIntervalOpComponentWise(x: FPVector, op: ScalarToIntervalOp): FPVector {\n    return this.toVector(x.map(e => this.runScalarToIntervalOp(e, op)));\n  }\n\n  /**\n   * Calculate the vector of acceptance intervals for a vector function over\n   * given intervals\n   *\n   * @param x first input domain intervals vector\n   * @param y second input domain intervals vector\n   * @param op operation defining the function being run\n   * @returns a vector of spans over all the outputs of op.impl\n   */\n  protected runVectorPairToVectorOp(x: FPVector, y: FPVector, op: VectorPairToVectorOp): FPVector {\n    if (x.some(e => !e.isFinite()) || y.some(e => !e.isFinite())) {\n      return this.constants().unboundedVector[x.length];\n    }\n\n    const x_values = cartesianProduct<number>(...x.map(e => e.bounds()));\n    const y_values = cartesianProduct<number>(...y.map(e => e.bounds()));\n\n    const outputs = new Set<FPVector>();\n    x_values.forEach(inner_x => {\n      y_values.forEach(inner_y => {\n        outputs.add(this.roundAndFlushVectorPairToVector(inner_x, inner_y, op));\n      });\n    });\n\n    const result = this.spanVectors(...outputs);\n    return result.every(e => e.isFinite())\n      ? result\n      : this.constants().unboundedVector[result.length];\n  }\n\n  /**\n   * Calculate the vector of acceptance intervals by running a scalar operation\n   * component-wise over a pair of vectors.\n   *\n   * This is used for situations where a component-wise operation, like vector\n   * subtraction, is needed as part of an inherited accuracy, but the top-level\n   * operation test don't require an explicit vector definition of the function,\n   * due to the generated 'vectorize' tests being sufficient.\n   *\n   * @param x first input domain intervals vector\n   * @param y second input domain intervals vector\n   * @param op scalar operation to be run component-wise\n   * @returns a vector of intervals with the outputs of op.impl\n   */\n  protected runScalarPairToIntervalOpVectorComponentWise(\n    x: FPVector,\n    y: FPVector,\n    op: ScalarPairToIntervalOp\n  ): FPVector {\n    assert(\n      x.length === y.length,\n      `runScalarPairToIntervalOpVectorComponentWise requires vectors of the same dimensions`\n    );\n\n    return this.toVector(\n      x.map((i, idx) => {\n        return this.runScalarPairToIntervalOp(i, y[idx], op);\n      })\n    );\n  }\n\n  /**\n   * Calculate the matrix of acceptance intervals for a pair of matrix function over\n   * given intervals\n   *\n   * @param m input domain intervals matrix\n   * @param op operation defining the function being run\n   * @returns a matrix of spans over all the outputs of op.impl\n   */\n  protected runMatrixToMatrixOp(m: FPMatrix, op: MatrixToMatrixOp): FPMatrix {\n    const num_cols = m.length;\n    const num_rows = m[0].length;\n    if (m.some(c => c.some(r => !r.isFinite()))) {\n      return this.constants().unboundedMatrix[num_cols][num_rows];\n    }\n\n    const m_flat: FPInterval[] = flatten2DArray(m);\n    const m_values: number[][] = cartesianProduct<number>(...m_flat.map(e => e.bounds()));\n\n    const outputs = new Set<FPMatrix>();\n    m_values.forEach(inner_m => {\n      const unflat_m = unflatten2DArray(inner_m, num_cols, num_rows);\n      outputs.add(this.roundAndFlushMatrixToMatrix(unflat_m, op));\n    });\n\n    const result = this.spanMatrices(...outputs);\n    const result_cols = result.length;\n    const result_rows = result[0].length;\n\n    // FPMatrix has to be coerced to FPInterval[][] to use .every. This should\n    // always be safe, since FPMatrix are defined as fixed length array of\n    // arrays.\n    return (result as FPInterval[][]).every(c => c.every(r => r.isFinite()))\n      ? result\n      : this.constants().unboundedMatrix[result_cols][result_rows];\n  }\n\n  /**\n   * Calculate the Matrix of acceptance intervals by running a scalar operation\n   * component-wise over a pair of matrices.\n   *\n   * An example of this is performing matrix addition.\n   *\n   * @param x first input domain intervals matrix\n   * @param y second input domain intervals matrix\n   * @param op scalar operation to be run component-wise\n   * @returns a matrix of intervals with the outputs of op.impl\n   */\n  protected runScalarPairToIntervalOpMatrixComponentWise(\n    x: FPMatrix,\n    y: FPMatrix,\n    op: ScalarPairToIntervalOp\n  ): FPMatrix {\n    assert(\n      x.length === y.length && x[0].length === y[0].length,\n      `runScalarPairToIntervalOpMatrixComponentWise requires matrices of the same dimensions`\n    );\n\n    const cols = x.length;\n    const rows = x[0].length;\n    const flat_x = flatten2DArray(x);\n    const flat_y = flatten2DArray(y);\n\n    return this.toMatrix(\n      unflatten2DArray(\n        flat_x.map((i, idx) => {\n          return this.runScalarPairToIntervalOp(i, flat_y[idx], op);\n        }),\n        cols,\n        rows\n      )\n    );\n  }\n\n  // API - Fundamental Error Intervals\n\n  /** @returns a ScalarToIntervalOp for [n - error_range, n + error_range] */\n  private AbsoluteErrorIntervalOp(error_range: number): ScalarToIntervalOp {\n    const op: ScalarToIntervalOp = {\n      impl: (_: number) => {\n        return this.constants().unboundedInterval;\n      },\n    };\n\n    assert(\n      error_range >= 0,\n      `absoluteErrorInterval must have non-negative error range, get ${error_range}`\n    );\n\n    if (this.isFinite(error_range)) {\n      op.impl = (n: number) => {\n        assert(!Number.isNaN(n), `absolute error not defined for NaN`);\n        // Return anyInterval if given center n is infinity.\n        if (!this.isFinite(n)) {\n          return this.constants().unboundedInterval;\n        }\n        return this.toInterval([n - error_range, n + error_range]);\n      };\n    }\n\n    return op;\n  }\n\n  protected absoluteErrorIntervalImpl(n: number, error_range: number): FPInterval {\n    error_range = Math.abs(error_range);\n    return this.runScalarToIntervalOp(\n      this.toInterval(n),\n      this.AbsoluteErrorIntervalOp(error_range)\n    );\n  }\n\n  /** @returns an interval of the absolute error around the point */\n  public abstract readonly absoluteErrorInterval: (n: number, error_range: number) => FPInterval;\n\n  /**\n   * Defines a ScalarToIntervalOp for an interval of the correctly rounded values\n   * around the point\n   */\n  private readonly CorrectlyRoundedIntervalOp: ScalarToIntervalOp = {\n    impl: (n: number) => {\n      assert(!Number.isNaN(n), `absolute not defined for NaN`);\n      return this.toInterval(n);\n    },\n  };\n\n  protected correctlyRoundedIntervalImpl(n: number | FPInterval): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.CorrectlyRoundedIntervalOp);\n  }\n\n  /** @returns an interval of the correctly rounded values around the point */\n  public abstract readonly correctlyRoundedInterval: (n: number | FPInterval) => FPInterval;\n\n  protected correctlyRoundedMatrixImpl(m: Array2D<number>): FPMatrix {\n    return this.toMatrix(map2DArray(m, this.correctlyRoundedInterval));\n  }\n\n  /** @returns a matrix of correctly rounded intervals for the provided matrix */\n  public abstract readonly correctlyRoundedMatrix: (m: Array2D<number>) => FPMatrix;\n\n  /** @returns a ScalarToIntervalOp for [n - numULP * ULP(n), n + numULP * ULP(n)] */\n  private ULPIntervalOp(numULP: number): ScalarToIntervalOp {\n    const op: ScalarToIntervalOp = {\n      impl: (_: number) => {\n        return this.constants().unboundedInterval;\n      },\n    };\n\n    if (this.isFinite(numULP)) {\n      op.impl = (n: number) => {\n        assert(!Number.isNaN(n), `ULP error not defined for NaN`);\n\n        const ulp = this.oneULP(n);\n        const begin = n - numULP * ulp;\n        const end = n + numULP * ulp;\n\n        return this.toInterval([\n          Math.min(begin, this.flushSubnormal(begin)),\n          Math.max(end, this.flushSubnormal(end)),\n        ]);\n      };\n    }\n\n    return op;\n  }\n\n  protected ulpIntervalImpl(n: number, numULP: number): FPInterval {\n    numULP = Math.abs(numULP);\n    return this.runScalarToIntervalOp(this.toInterval(n), this.ULPIntervalOp(numULP));\n  }\n\n  /** @returns an interval of N * ULP around the point */\n  public abstract readonly ulpInterval: (n: number, numULP: number) => FPInterval;\n\n  // API - Acceptance Intervals\n\n  private readonly AbsIntervalOp: ScalarToIntervalOp = {\n    impl: (n: number) => {\n      return this.correctlyRoundedInterval(Math.abs(n));\n    },\n  };\n\n  protected absIntervalImpl(n: number): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.AbsIntervalOp);\n  }\n\n  /** Calculate an acceptance interval for abs(n) */\n  public abstract readonly absInterval: (n: number) => FPInterval;\n\n  // This op is implemented differently for f32 and f16.\n  private readonly AcosIntervalOp: ScalarToIntervalOp = {\n    impl: this.limitScalarToIntervalDomain(this.toInterval([-1.0, 1.0]), (n: number) => {\n      assert(this.kind === 'f32' || this.kind === 'f16');\n      // acos(n) = atan2(sqrt(1.0 - n * n), n) or a polynomial approximation with absolute error\n      const y = this.sqrtInterval(this.subtractionInterval(1, this.multiplicationInterval(n, n)));\n      const approx_abs_error = this.kind === 'f32' ? 6.77e-5 : 3.91e-3;\n      return this.spanIntervals(\n        this.atan2Interval(y, n),\n        this.absoluteErrorInterval(Math.acos(n), approx_abs_error)\n      );\n    }),\n  };\n\n  protected acosIntervalImpl(n: number): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.AcosIntervalOp);\n  }\n\n  /** Calculate an acceptance interval for acos(n) */\n  public abstract readonly acosInterval: (n: number) => FPInterval;\n\n  private readonly AcoshAlternativeIntervalOp: ScalarToIntervalOp = {\n    impl: (x: number): FPInterval => {\n      // acosh(x) = log(x + sqrt((x + 1.0f) * (x - 1.0)))\n      const inner_value = this.multiplicationInterval(\n        this.additionInterval(x, 1.0),\n        this.subtractionInterval(x, 1.0)\n      );\n      const sqrt_value = this.sqrtInterval(inner_value);\n      return this.logInterval(this.additionInterval(x, sqrt_value));\n    },\n  };\n\n  protected acoshAlternativeIntervalImpl(x: number | FPInterval): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(x), this.AcoshAlternativeIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of acosh(x) using log(x + sqrt((x + 1.0f) * (x - 1.0))) */\n  public abstract readonly acoshAlternativeInterval: (x: number | FPInterval) => FPInterval;\n\n  private readonly AcoshPrimaryIntervalOp: ScalarToIntervalOp = {\n    impl: (x: number): FPInterval => {\n      // acosh(x) = log(x + sqrt(x * x - 1.0))\n      const inner_value = this.subtractionInterval(this.multiplicationInterval(x, x), 1.0);\n      const sqrt_value = this.sqrtInterval(inner_value);\n      return this.logInterval(this.additionInterval(x, sqrt_value));\n    },\n  };\n\n  protected acoshPrimaryIntervalImpl(x: number | FPInterval): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(x), this.AcoshPrimaryIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of acosh(x) using log(x + sqrt(x * x - 1.0)) */\n  protected abstract acoshPrimaryInterval: (x: number | FPInterval) => FPInterval;\n\n  /** All acceptance interval functions for acosh(x) */\n  public abstract readonly acoshIntervals: ScalarToInterval[];\n\n  private readonly AdditionIntervalOp: ScalarPairToIntervalOp = {\n    impl: (x: number, y: number): FPInterval => {\n      return this.correctlyRoundedInterval(x + y);\n    },\n  };\n\n  protected additionIntervalImpl(x: number | FPInterval, y: number | FPInterval): FPInterval {\n    return this.runScalarPairToIntervalOp(\n      this.toInterval(x),\n      this.toInterval(y),\n      this.AdditionIntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval of x + y, when x and y are both scalars */\n  public abstract readonly additionInterval: (\n    x: number | FPInterval,\n    y: number | FPInterval\n  ) => FPInterval;\n\n  protected additionMatrixMatrixIntervalImpl(x: Array2D<number>, y: Array2D<number>): FPMatrix {\n    return this.runScalarPairToIntervalOpMatrixComponentWise(\n      this.toMatrix(x),\n      this.toMatrix(y),\n      this.AdditionIntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval of x + y, when x and y are matrices */\n  public abstract readonly additionMatrixMatrixInterval: (\n    x: Array2D<number>,\n    y: Array2D<number>\n  ) => FPMatrix;\n\n  // This op is implemented differently for f32 and f16.\n  private readonly AsinIntervalOp: ScalarToIntervalOp = {\n    impl: this.limitScalarToIntervalDomain(this.toInterval([-1.0, 1.0]), (n: number) => {\n      assert(this.kind === 'f32' || this.kind === 'f16');\n      // asin(n) = atan2(n, sqrt(1.0 - n * n)) or a polynomial approximation with absolute error\n      const x = this.sqrtInterval(this.subtractionInterval(1, this.multiplicationInterval(n, n)));\n      const approx_abs_error = this.kind === 'f32' ? 6.77e-5 : 3.91e-3;\n      return this.spanIntervals(\n        this.atan2Interval(n, x),\n        this.absoluteErrorInterval(Math.asin(n), approx_abs_error)\n      );\n    }),\n  };\n\n  /** Calculate an acceptance interval for asin(n) */\n  protected asinIntervalImpl(n: number): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.AsinIntervalOp);\n  }\n\n  /** Calculate an acceptance interval for asin(n) */\n  public abstract readonly asinInterval: (n: number) => FPInterval;\n\n  private readonly AsinhIntervalOp: ScalarToIntervalOp = {\n    impl: (x: number): FPInterval => {\n      // asinh(x) = log(x + sqrt(x * x + 1.0))\n      const inner_value = this.additionInterval(this.multiplicationInterval(x, x), 1.0);\n      const sqrt_value = this.sqrtInterval(inner_value);\n      return this.logInterval(this.additionInterval(x, sqrt_value));\n    },\n  };\n\n  protected asinhIntervalImpl(n: number): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.AsinhIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of asinh(x) */\n  public abstract readonly asinhInterval: (n: number) => FPInterval;\n\n  private readonly AtanIntervalOp: ScalarToIntervalOp = {\n    impl: (n: number): FPInterval => {\n      assert(this.kind === 'f32' || this.kind === 'f16');\n      const ulp_error = this.kind === 'f32' ? 4096 : 5;\n      return this.ulpInterval(Math.atan(n), ulp_error);\n    },\n  };\n\n  /** Calculate an acceptance interval of atan(x) */\n  protected atanIntervalImpl(n: number | FPInterval): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.AtanIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of atan(x) */\n  public abstract readonly atanInterval: (n: number | FPInterval) => FPInterval;\n\n  // This op is implemented differently for f32 and f16.\n  private Atan2IntervalOpBuilder(): ScalarPairToIntervalOp {\n    assert(this.kind === 'f32' || this.kind === 'f16');\n    const constants = this.constants();\n    // For atan2, the params are labelled (y, x), not (x, y), so domain.x is first parameter (y),\n    // and domain.y is the second parameter (x).\n    // The first param must be finite and normal.\n    const domain_x = [\n      this.toInterval([constants.negative.min, constants.negative.max]),\n      this.toInterval([constants.positive.min, constants.positive.max]),\n    ];\n    // inherited from division\n    const domain_y =\n      this.kind === 'f32'\n        ? [this.toInterval([-(2 ** 126), -(2 ** -126)]), this.toInterval([2 ** -126, 2 ** 126])]\n        : [this.toInterval([-(2 ** 14), -(2 ** -14)]), this.toInterval([2 ** -14, 2 ** 14])];\n    const ulp_error = this.kind === 'f32' ? 4096 : 5;\n    return {\n      impl: this.limitScalarPairToIntervalDomain(\n        {\n          x: domain_x,\n          y: domain_y,\n        },\n        (y: number, x: number): FPInterval => {\n          // Accurate result in f64\n          let atan_yx = Math.atan(y / x);\n          // Offset by +/-pi according to the definition. Use pi value in f64 because we are\n          // handling accurate result.\n          if (x < 0) {\n            // x < 0, y > 0, result is atan(y/x) + π\n            if (y > 0) {\n              atan_yx = atan_yx + kValue.f64.positive.pi.whole;\n            } else {\n              // x < 0, y < 0, result is atan(y/x) - π\n              atan_yx = atan_yx - kValue.f64.positive.pi.whole;\n            }\n          }\n\n          return this.ulpInterval(atan_yx, ulp_error);\n        }\n      ),\n      extrema: (y: FPInterval, x: FPInterval): [FPInterval, FPInterval] => {\n        // There is discontinuity, which generates an unbounded result, at y/x = 0 that will dominate the accuracy\n        if (y.contains(0)) {\n          if (x.contains(0)) {\n            return [this.toInterval(0), this.toInterval(0)];\n          }\n          return [this.toInterval(0), x];\n        }\n        return [y, x];\n      },\n    };\n  }\n\n  protected atan2IntervalImpl(y: number | FPInterval, x: number | FPInterval): FPInterval {\n    return this.runScalarPairToIntervalOp(\n      this.toInterval(y),\n      this.toInterval(x),\n      this.Atan2IntervalOpBuilder()\n    );\n  }\n\n  /** Calculate an acceptance interval of atan2(y, x) */\n  public abstract readonly atan2Interval: (\n    y: number | FPInterval,\n    x: number | FPInterval\n  ) => FPInterval;\n\n  private readonly AtanhIntervalOp: ScalarToIntervalOp = {\n    impl: (n: number) => {\n      // atanh(x) = log((1.0 + x) / (1.0 - x)) * 0.5\n      const numerator = this.additionInterval(1.0, n);\n      const denominator = this.subtractionInterval(1.0, n);\n      const log_interval = this.logInterval(this.divisionInterval(numerator, denominator));\n      return this.multiplicationInterval(log_interval, 0.5);\n    },\n  };\n\n  protected atanhIntervalImpl(n: number): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.AtanhIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of atanh(x) */\n  public abstract readonly atanhInterval: (n: number) => FPInterval;\n\n  private readonly CeilIntervalOp: ScalarToIntervalOp = {\n    impl: (n: number): FPInterval => {\n      return this.correctlyRoundedInterval(Math.ceil(n));\n    },\n  };\n\n  protected ceilIntervalImpl(n: number): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.CeilIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of ceil(x) */\n  public abstract readonly ceilInterval: (n: number) => FPInterval;\n\n  private readonly ClampMedianIntervalOp: ScalarTripleToIntervalOp = {\n    impl: (x: number, y: number, z: number): FPInterval => {\n      return this.correctlyRoundedInterval(\n        // Default sort is string sort, so have to implement numeric comparison.\n        // Cannot use the b-a one-liner, because that assumes no infinities.\n        [x, y, z].sort((a, b) => {\n          if (a < b) {\n            return -1;\n          }\n          if (a > b) {\n            return 1;\n          }\n          return 0;\n        })[1]\n      );\n    },\n  };\n\n  protected clampMedianIntervalImpl(\n    x: number | FPInterval,\n    y: number | FPInterval,\n    z: number | FPInterval\n  ): FPInterval {\n    return this.runScalarTripleToIntervalOp(\n      this.toInterval(x),\n      this.toInterval(y),\n      this.toInterval(z),\n      this.ClampMedianIntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval of clamp(x, y, z) via median(x, y, z) */\n  public abstract readonly clampMedianInterval: (\n    x: number | FPInterval,\n    y: number | FPInterval,\n    z: number | FPInterval\n  ) => FPInterval;\n\n  private readonly ClampMinMaxIntervalOp: ScalarTripleToIntervalOp = {\n    impl: (x: number, low: number, high: number): FPInterval => {\n      return this.minInterval(this.maxInterval(x, low), high);\n    },\n  };\n\n  protected clampMinMaxIntervalImpl(\n    x: number | FPInterval,\n    low: number | FPInterval,\n    high: number | FPInterval\n  ): FPInterval {\n    return this.runScalarTripleToIntervalOp(\n      this.toInterval(x),\n      this.toInterval(low),\n      this.toInterval(high),\n      this.ClampMinMaxIntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval of clamp(x, high, low) via min(max(x, low), high) */\n  public abstract readonly clampMinMaxInterval: (\n    x: number | FPInterval,\n    low: number | FPInterval,\n    high: number | FPInterval\n  ) => FPInterval;\n\n  /** All acceptance interval functions for clamp(x, y, z) */\n  public abstract readonly clampIntervals: ScalarTripleToInterval[];\n\n  private readonly CosIntervalOp: ScalarToIntervalOp = {\n    impl: this.limitScalarToIntervalDomain(\n      this.constants().negPiToPiInterval,\n      (n: number): FPInterval => {\n        assert(this.kind === 'f32' || this.kind === 'f16');\n        const abs_error = this.kind === 'f32' ? 2 ** -11 : 2 ** -7;\n        return this.absoluteErrorInterval(Math.cos(n), abs_error);\n      }\n    ),\n  };\n\n  protected cosIntervalImpl(n: number): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.CosIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of cos(x) */\n  public abstract readonly cosInterval: (n: number) => FPInterval;\n\n  private readonly CoshIntervalOp: ScalarToIntervalOp = {\n    impl: (n: number): FPInterval => {\n      // cosh(x) = (exp(x) + exp(-x)) * 0.5\n      const minus_n = this.negationInterval(n);\n      return this.multiplicationInterval(\n        this.additionInterval(this.expInterval(n), this.expInterval(minus_n)),\n        0.5\n      );\n    },\n  };\n\n  protected coshIntervalImpl(n: number): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.CoshIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of cosh(x) */\n  public abstract readonly coshInterval: (n: number) => FPInterval;\n\n  private readonly CrossIntervalOp: VectorPairToVectorOp = {\n    impl: (x: number[], y: number[]): FPVector => {\n      assert(x.length === 3, `CrossIntervalOp received x with ${x.length} instead of 3`);\n      assert(y.length === 3, `CrossIntervalOp received y with ${y.length} instead of 3`);\n\n      // cross(x, y) = r, where\n      //   r[0] = x[1] * y[2] - x[2] * y[1]\n      //   r[1] = x[2] * y[0] - x[0] * y[2]\n      //   r[2] = x[0] * y[1] - x[1] * y[0]\n\n      const r0 = this.subtractionInterval(\n        this.multiplicationInterval(x[1], y[2]),\n        this.multiplicationInterval(x[2], y[1])\n      );\n      const r1 = this.subtractionInterval(\n        this.multiplicationInterval(x[2], y[0]),\n        this.multiplicationInterval(x[0], y[2])\n      );\n      const r2 = this.subtractionInterval(\n        this.multiplicationInterval(x[0], y[1]),\n        this.multiplicationInterval(x[1], y[0])\n      );\n      return [r0, r1, r2];\n    },\n  };\n\n  protected crossIntervalImpl(x: number[], y: number[]): FPVector {\n    assert(x.length === 3, `Cross is only defined for vec3`);\n    assert(y.length === 3, `Cross is only defined for vec3`);\n    return this.runVectorPairToVectorOp(this.toVector(x), this.toVector(y), this.CrossIntervalOp);\n  }\n\n  /** Calculate a vector of acceptance intervals for cross(x, y) */\n  public abstract readonly crossInterval: (x: number[], y: number[]) => FPVector;\n\n  private readonly DegreesIntervalOp: ScalarToIntervalOp = {\n    impl: (n: number): FPInterval => {\n      return this.multiplicationInterval(n, 57.295779513082322865);\n    },\n  };\n\n  protected degreesIntervalImpl(n: number): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.DegreesIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of degrees(x) */\n  public abstract readonly degreesInterval: (n: number) => FPInterval;\n\n  /**\n   * Calculate the minor of a NxN matrix.\n   *\n   * The ijth minor of a square matrix, is the N-1xN-1 matrix created by removing\n   * the ith column and jth row from the original matrix.\n   */\n  private minorNxN(m: Array2D<number>, col: number, row: number): Array2D<number> {\n    const dim = m.length;\n    assert(m.length === m[0].length, `minorMatrix is only defined for square matrices`);\n    assert(col >= 0 && col < dim, `col ${col} needs be in [0, # of columns '${dim}')`);\n    assert(row >= 0 && row < dim, `row ${row} needs be in [0, # of rows '${dim}')`);\n\n    const result: Array2D<number> = [...Array(dim - 1)].map(_ => [...Array(dim - 1)]);\n\n    const col_indices: number[] = [...Array(dim).keys()].filter(e => e !== col);\n    const row_indices: number[] = [...Array(dim).keys()].filter(e => e !== row);\n\n    col_indices.forEach((c, i) => {\n      row_indices.forEach((r, j) => {\n        result[i][j] = m[c][r];\n      });\n    });\n    return result;\n  }\n\n  /** Calculate an acceptance interval for determinant(m), where m is a 2x2 matrix */\n  private determinant2x2Interval(m: Array2D<number>): FPInterval {\n    assert(\n      m.length === m[0].length && m.length === 2,\n      `determinant2x2Interval called on non-2x2 matrix`\n    );\n    return this.subtractionInterval(\n      this.multiplicationInterval(m[0][0], m[1][1]),\n      this.multiplicationInterval(m[0][1], m[1][0])\n    );\n  }\n\n  /** Calculate an acceptance interval for determinant(m), where m is a 3x3 matrix */\n  private determinant3x3Interval(m: Array2D<number>): FPInterval {\n    assert(\n      m.length === m[0].length && m.length === 3,\n      `determinant3x3Interval called on non-3x3 matrix`\n    );\n\n    // M is a 3x3 matrix\n    // det(M) is A + B + C, where A, B, C are three elements in a row/column times\n    // their own co-factor.\n    // (The co-factor is the determinant of the minor of that position with the\n    // appropriate +/-)\n    // For simplicity sake A, B, C are calculated as the elements of the first\n    // column\n    const A = this.multiplicationInterval(\n      m[0][0],\n      this.determinant2x2Interval(this.minorNxN(m, 0, 0))\n    );\n    const B = this.multiplicationInterval(\n      -m[0][1],\n      this.determinant2x2Interval(this.minorNxN(m, 0, 1))\n    );\n    const C = this.multiplicationInterval(\n      m[0][2],\n      this.determinant2x2Interval(this.minorNxN(m, 0, 2))\n    );\n\n    // Need to calculate permutations, since for fp addition is not associative,\n    // so A + B + C is not guaranteed to equal B + C + A, etc.\n    const permutations: FPInterval[][] = calculatePermutations([A, B, C]);\n    return this.spanIntervals(\n      ...permutations.map(p =>\n        p.reduce((prev: FPInterval, cur: FPInterval) => this.additionInterval(prev, cur))\n      )\n    );\n  }\n\n  /** Calculate an acceptance interval for determinant(m), where m is a 4x4 matrix */\n  private determinant4x4Interval(m: Array2D<number>): FPInterval {\n    assert(\n      m.length === m[0].length && m.length === 4,\n      `determinant3x3Interval called on non-4x4 matrix`\n    );\n\n    // M is a 4x4 matrix\n    // det(M) is A + B + C + D, where A, B, C, D are four elements in a row/column\n    // times their own co-factor.\n    // (The co-factor is the determinant of the minor of that position with the\n    // appropriate +/-)\n    // For simplicity sake A, B, C, D are calculated as the elements of the\n    // first column\n    const A = this.multiplicationInterval(\n      m[0][0],\n      this.determinant3x3Interval(this.minorNxN(m, 0, 0))\n    );\n    const B = this.multiplicationInterval(\n      -m[0][1],\n      this.determinant3x3Interval(this.minorNxN(m, 0, 1))\n    );\n    const C = this.multiplicationInterval(\n      m[0][2],\n      this.determinant3x3Interval(this.minorNxN(m, 0, 2))\n    );\n    const D = this.multiplicationInterval(\n      -m[0][3],\n      this.determinant3x3Interval(this.minorNxN(m, 0, 3))\n    );\n\n    // Need to calculate permutations, since for fp addition is not associative\n    // so A + B + C + D is not guaranteed to equal B + C + A + D, etc.\n    const permutations: FPInterval[][] = calculatePermutations([A, B, C, D]);\n    return this.spanIntervals(\n      ...permutations.map(p =>\n        p.reduce((prev: FPInterval, cur: FPInterval) => this.additionInterval(prev, cur))\n      )\n    );\n  }\n\n  /**\n   * This code calculates 3x3 and 4x4 determinants using the textbook co-factor\n   * method, using the first column for the co-factor selection.\n   *\n   * For matrices composed of integer elements, e, with |e|^4 < 2**21, this\n   * should be fine.\n   *\n   * For e, where e is subnormal or 4*(e^4) might not be precisely expressible as\n   * a f32 values, this approach breaks down, because the rule of all co-factor\n   * definitions of determinant being equal doesn't hold in these cases.\n   *\n   * The general solution for this is to calculate all the permutations of the\n   * operations in the worked out formula for determinant.\n   * For 3x3 this is tractable, but for 4x4 this works out to ~23! permutations\n   * that need to be calculated.\n   * Thus, CTS testing and the spec definition of accuracy is restricted to the\n   * space that the simple implementation is valid.\n   */\n  protected determinantIntervalImpl(x: Array2D<number>): FPInterval {\n    const dim = x.length;\n    assert(\n      x[0].length === dim && (dim === 2 || dim === 3 || dim === 4),\n      `determinantInterval only defined for 2x2, 3x3 and 4x4 matrices`\n    );\n    switch (dim) {\n      case 2:\n        return this.determinant2x2Interval(x);\n      case 3:\n        return this.determinant3x3Interval(x);\n      case 4:\n        return this.determinant4x4Interval(x);\n    }\n    unreachable(\n      \"determinantInterval called on x, where which has an unexpected dimension of '${dim}'\"\n    );\n  }\n\n  /** Calculate an acceptance interval for determinant(x) */\n  public abstract readonly determinantInterval: (x: Array2D<number>) => FPInterval;\n\n  private readonly DistanceIntervalScalarOp: ScalarPairToIntervalOp = {\n    impl: (x: number, y: number): FPInterval => {\n      return this.lengthInterval(this.subtractionInterval(x, y));\n    },\n  };\n\n  private readonly DistanceIntervalVectorOp: VectorPairToIntervalOp = {\n    impl: (x: number[], y: number[]): FPInterval => {\n      return this.lengthInterval(\n        this.runScalarPairToIntervalOpVectorComponentWise(\n          this.toVector(x),\n          this.toVector(y),\n          this.SubtractionIntervalOp\n        )\n      );\n    },\n  };\n\n  protected distanceIntervalImpl(x: number | number[], y: number | number[]): FPInterval {\n    if (x instanceof Array && y instanceof Array) {\n      assert(\n        x.length === y.length,\n        `distanceInterval requires both params to have the same number of elements`\n      );\n      return this.runVectorPairToIntervalOp(\n        this.toVector(x),\n        this.toVector(y),\n        this.DistanceIntervalVectorOp\n      );\n    } else if (!(x instanceof Array) && !(y instanceof Array)) {\n      return this.runScalarPairToIntervalOp(\n        this.toInterval(x),\n        this.toInterval(y),\n        this.DistanceIntervalScalarOp\n      );\n    }\n    unreachable(\n      `distanceInterval requires both params to both the same type, either scalars or vectors`\n    );\n  }\n\n  /** Calculate an acceptance interval of distance(x, y) */\n  public abstract readonly distanceInterval: (\n    x: number | number[],\n    y: number | number[]\n  ) => FPInterval;\n\n  // This op is implemented differently for f32 and f16.\n  private DivisionIntervalOpBuilder(): ScalarPairToIntervalOp {\n    assert(this.kind === 'f32' || this.kind === 'f16');\n    const constants = this.constants();\n    const domain_x = [this.toInterval([constants.negative.min, constants.positive.max])];\n    const domain_y =\n      this.kind === 'f32'\n        ? [this.toInterval([-(2 ** 126), -(2 ** -126)]), this.toInterval([2 ** -126, 2 ** 126])]\n        : [this.toInterval([-(2 ** 14), -(2 ** -14)]), this.toInterval([2 ** -14, 2 ** 14])];\n    return {\n      impl: this.limitScalarPairToIntervalDomain(\n        {\n          x: domain_x,\n          y: domain_y,\n        },\n        (x: number, y: number): FPInterval => {\n          if (y === 0) {\n            return constants.unboundedInterval;\n          }\n          return this.ulpInterval(x / y, 2.5);\n        }\n      ),\n      extrema: (x: FPInterval, y: FPInterval): [FPInterval, FPInterval] => {\n        // division has a discontinuity at y = 0.\n        if (y.contains(0)) {\n          y = this.toInterval(0);\n        }\n        return [x, y];\n      },\n    };\n  }\n\n  protected divisionIntervalImpl(x: number | FPInterval, y: number | FPInterval): FPInterval {\n    assert(this.kind === 'f32' || this.kind === 'f16');\n    return this.runScalarPairToIntervalOp(\n      this.toInterval(x),\n      this.toInterval(y),\n      this.DivisionIntervalOpBuilder()\n    );\n  }\n\n  /** Calculate an acceptance interval of x / y */\n  public abstract readonly divisionInterval: (\n    x: number | FPInterval,\n    y: number | FPInterval\n  ) => FPInterval;\n\n  private readonly DotIntervalOp: VectorPairToIntervalOp = {\n    impl: (x: number[], y: number[]): FPInterval => {\n      // dot(x, y) = sum of x[i] * y[i]\n      const multiplications = this.runScalarPairToIntervalOpVectorComponentWise(\n        this.toVector(x),\n        this.toVector(y),\n        this.MultiplicationIntervalOp\n      );\n\n      // vec2 doesn't require permutations, since a + b = b + a for floats\n      if (multiplications.length === 2) {\n        return this.additionInterval(multiplications[0], multiplications[1]);\n      }\n\n      // The spec does not state the ordering of summation, so all the\n      // permutations are calculated and their results spanned, since addition\n      // of more than two floats is not transitive, i.e. a + b + c is not\n      // guaranteed to equal b + a + c\n      const permutations: FPInterval[][] = calculatePermutations(multiplications);\n      return this.spanIntervals(\n        ...permutations.map(p => p.reduce((prev, cur) => this.additionInterval(prev, cur)))\n      );\n    },\n  };\n\n  protected dotIntervalImpl(x: number[] | FPInterval[], y: number[] | FPInterval[]): FPInterval {\n    assert(x.length === y.length, `dot not defined for vectors with different lengths`);\n    return this.runVectorPairToIntervalOp(this.toVector(x), this.toVector(y), this.DotIntervalOp);\n  }\n\n  /** Calculated the acceptance interval for dot(x, y) */\n  public abstract readonly dotInterval: (\n    x: number[] | FPInterval[],\n    y: number[] | FPInterval[]\n  ) => FPInterval;\n\n  private readonly ExpIntervalOp: ScalarToIntervalOp = {\n    impl: (n: number): FPInterval => {\n      return this.ulpInterval(Math.exp(n), 3 + 2 * Math.abs(n));\n    },\n  };\n\n  protected expIntervalImpl(x: number | FPInterval): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(x), this.ExpIntervalOp);\n  }\n\n  /** Calculate an acceptance interval for exp(x) */\n  public abstract readonly expInterval: (x: number | FPInterval) => FPInterval;\n\n  private readonly Exp2IntervalOp: ScalarToIntervalOp = {\n    impl: (n: number): FPInterval => {\n      return this.ulpInterval(Math.pow(2, n), 3 + 2 * Math.abs(n));\n    },\n  };\n\n  protected exp2IntervalImpl(x: number | FPInterval): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(x), this.Exp2IntervalOp);\n  }\n\n  /** Calculate an acceptance interval for exp2(x) */\n  public abstract readonly exp2Interval: (x: number | FPInterval) => FPInterval;\n\n  /**\n   * faceForward(x, y, z) = select(-x, x, dot(z, y) < 0.0)\n   *\n   * This builtin selects from two discrete results (delta rounding/flushing),\n   * so the majority of the framework code is not appropriate, since the\n   * framework attempts to span results.\n   *\n   * Thus, a bespoke implementation is used instead of\n   * defining an Op and running that through the framework.\n   */\n  protected faceForwardIntervalsImpl(\n    x: number[],\n    y: number[],\n    z: number[]\n  ): (FPVector | undefined)[] {\n    const x_vec = this.toVector(x);\n    // Running vector through this.runScalarToIntervalOpComponentWise to make\n    // sure that flushing/rounding is handled, since toVector does not perform\n    // those operations.\n    const positive_x = this.runScalarToIntervalOpComponentWise(x_vec, {\n      impl: (i: number): FPInterval => {\n        return this.toInterval(i);\n      },\n    });\n    const negative_x = this.runScalarToIntervalOpComponentWise(x_vec, this.NegationIntervalOp);\n\n    const dot_interval = this.dotInterval(z, y);\n\n    const results: (FPVector | undefined)[] = [];\n\n    if (!dot_interval.isFinite()) {\n      // dot calculation went out of bounds\n      // Inserting undefined in the result, so that the test running framework\n      // is aware of this potential OOB.\n      // For const-eval tests, it means that the test case should be skipped,\n      // since the shader will fail to compile.\n      // For non-const-eval the undefined should be stripped out of the possible\n      // results.\n\n      results.push(undefined);\n    }\n\n    // Because the result of dot can be an interval, it might span across 0, thus\n    // it is possible that both -x and x are valid responses.\n    if (dot_interval.begin < 0 || dot_interval.end < 0) {\n      results.push(positive_x);\n    }\n\n    if (dot_interval.begin >= 0 || dot_interval.end >= 0) {\n      results.push(negative_x);\n    }\n\n    assert(\n      results.length > 0 || results.every(r => r === undefined),\n      `faceForwardInterval selected neither positive x or negative x for the result, this shouldn't be possible`\n    );\n    return results;\n  }\n\n  /** Calculate the acceptance intervals for faceForward(x, y, z) */\n  public abstract readonly faceForwardIntervals: (\n    x: number[],\n    y: number[],\n    z: number[]\n  ) => (FPVector | undefined)[];\n\n  private readonly FloorIntervalOp: ScalarToIntervalOp = {\n    impl: (n: number): FPInterval => {\n      return this.correctlyRoundedInterval(Math.floor(n));\n    },\n  };\n\n  protected floorIntervalImpl(n: number): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.FloorIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of floor(x) */\n  public abstract readonly floorInterval: (n: number) => FPInterval;\n\n  private readonly FmaIntervalOp: ScalarTripleToIntervalOp = {\n    impl: (x: number, y: number, z: number): FPInterval => {\n      return this.additionInterval(this.multiplicationInterval(x, y), z);\n    },\n  };\n\n  protected fmaIntervalImpl(x: number, y: number, z: number): FPInterval {\n    return this.runScalarTripleToIntervalOp(\n      this.toInterval(x),\n      this.toInterval(y),\n      this.toInterval(z),\n      this.FmaIntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval for fma(x, y, z) */\n  public abstract readonly fmaInterval: (x: number, y: number, z: number) => FPInterval;\n\n  private readonly FractIntervalOp: ScalarToIntervalOp = {\n    impl: (n: number): FPInterval => {\n      // fract(x) = x - floor(x) is defined in the spec.\n      // For people coming from a non-graphics background this will cause some\n      // unintuitive results. For example,\n      // fract(-1.1) is not 0.1 or -0.1, but instead 0.9.\n      // This is how other shading languages operate and allows for a desirable\n      // wrap around in graphics programming.\n      const result = this.subtractionInterval(n, this.floorInterval(n));\n      assert(\n        // negative.subnormal.min instead of 0, because FTZ can occur\n        // selectively during the calculation\n        this.toInterval([this.constants().negative.subnormal.min, 1.0]).contains(result),\n        `fract(${n}) interval [${result}] unexpectedly extends beyond [~0.0, 1.0]`\n      );\n      if (result.contains(1)) {\n        // Very small negative numbers can lead to catastrophic cancellation,\n        // thus calculating a fract of 1.0, which is technically not a\n        // fractional part, so some implementations clamp the result to next\n        // nearest number.\n        return this.spanIntervals(result, this.toInterval(this.constants().positive.less_than_one));\n      }\n      return result;\n    },\n  };\n\n  protected fractIntervalImpl(n: number): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.FractIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of fract(x) */\n  public abstract readonly fractInterval: (n: number) => FPInterval;\n\n  private readonly InverseSqrtIntervalOp: ScalarToIntervalOp = {\n    impl: this.limitScalarToIntervalDomain(\n      this.constants().greaterThanZeroInterval,\n      (n: number): FPInterval => {\n        return this.ulpInterval(1 / Math.sqrt(n), 2);\n      }\n    ),\n  };\n\n  protected inverseSqrtIntervalImpl(n: number | FPInterval): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.InverseSqrtIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of inverseSqrt(x) */\n  public abstract readonly inverseSqrtInterval: (n: number | FPInterval) => FPInterval;\n\n  // This op should be implemented differently for f32 and f16.\n  private readonly LdexpIntervalOp: ScalarPairToIntervalOp = {\n    impl: this.limitScalarPairToIntervalDomain(\n      // Implementing SPIR-V's more restrictive domain until\n      // https://github.com/gpuweb/gpuweb/issues/3134 is resolved\n      {\n        x: [this.toInterval([kValue.f32.negative.min, kValue.f32.positive.max])],\n        y: [this.toInterval([-126, 128])],\n      },\n      (e1: number, e2: number): FPInterval => {\n        // Though the spec says the result of ldexp(e1, e2) = e1 * 2 ^ e2, the\n        // accuracy is listed as correctly rounded to the true value, so the\n        // inheritance framework does not need to be invoked to determine\n        // bounds.\n        // Instead, the value at a higher precision is calculated and passed to\n        // correctlyRoundedInterval.\n        const result = e1 * 2 ** e2;\n        if (Number.isNaN(result)) {\n          // Overflowed TS's number type, so definitely out of bounds for f32\n          return this.constants().unboundedInterval;\n        }\n        return this.correctlyRoundedInterval(result);\n      }\n    ),\n  };\n\n  protected ldexpIntervalImpl(e1: number, e2: number): FPInterval {\n    return this.roundAndFlushScalarPairToInterval(e1, e2, this.LdexpIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of ldexp(e1, e2) */\n  public abstract readonly ldexpInterval: (e1: number, e2: number) => FPInterval;\n\n  private readonly LengthIntervalScalarOp: ScalarToIntervalOp = {\n    impl: (n: number): FPInterval => {\n      return this.sqrtInterval(this.multiplicationInterval(n, n));\n    },\n  };\n\n  private readonly LengthIntervalVectorOp: VectorToIntervalOp = {\n    impl: (n: number[]): FPInterval => {\n      return this.sqrtInterval(this.dotInterval(n, n));\n    },\n  };\n\n  protected lengthIntervalImpl(n: number | FPInterval | number[] | FPVector): FPInterval {\n    if (n instanceof Array) {\n      return this.runVectorToIntervalOp(this.toVector(n), this.LengthIntervalVectorOp);\n    } else {\n      return this.runScalarToIntervalOp(this.toInterval(n), this.LengthIntervalScalarOp);\n    }\n  }\n\n  /** Calculate an acceptance interval of length(x) */\n  public abstract readonly lengthInterval: (\n    n: number | FPInterval | number[] | FPVector\n  ) => FPInterval;\n\n  private readonly LogIntervalOp: ScalarToIntervalOp = {\n    impl: this.limitScalarToIntervalDomain(\n      this.constants().greaterThanZeroInterval,\n      (n: number): FPInterval => {\n        assert(this.kind === 'f32' || this.kind === 'f16');\n        const abs_error = this.kind === 'f32' ? 2 ** -21 : 2 ** -7;\n        if (n >= 0.5 && n <= 2.0) {\n          return this.absoluteErrorInterval(Math.log(n), abs_error);\n        }\n        return this.ulpInterval(Math.log(n), 3);\n      }\n    ),\n  };\n\n  protected logIntervalImpl(x: number | FPInterval): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(x), this.LogIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of log(x) */\n  public abstract readonly logInterval: (x: number | FPInterval) => FPInterval;\n\n  private readonly Log2IntervalOp: ScalarToIntervalOp = {\n    impl: this.limitScalarToIntervalDomain(\n      this.constants().greaterThanZeroInterval,\n      (n: number): FPInterval => {\n        assert(this.kind === 'f32' || this.kind === 'f16');\n        const abs_error = this.kind === 'f32' ? 2 ** -21 : 2 ** -7;\n        if (n >= 0.5 && n <= 2.0) {\n          return this.absoluteErrorInterval(Math.log2(n), abs_error);\n        }\n        return this.ulpInterval(Math.log2(n), 3);\n      }\n    ),\n  };\n\n  protected log2IntervalImpl(x: number | FPInterval): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(x), this.Log2IntervalOp);\n  }\n\n  /** Calculate an acceptance interval of log2(x) */\n  public abstract readonly log2Interval: (x: number | FPInterval) => FPInterval;\n\n  private readonly MaxIntervalOp: ScalarPairToIntervalOp = {\n    impl: (x: number, y: number): FPInterval => {\n      // If both of the inputs are subnormal, then either of the inputs can be returned\n      if (this.isSubnormal(x) && this.isSubnormal(y)) {\n        return this.correctlyRoundedInterval(\n          this.spanIntervals(this.toInterval(x), this.toInterval(y))\n        );\n      }\n\n      return this.correctlyRoundedInterval(Math.max(x, y));\n    },\n  };\n\n  protected maxIntervalImpl(x: number | FPInterval, y: number | FPInterval): FPInterval {\n    return this.runScalarPairToIntervalOp(\n      this.toInterval(x),\n      this.toInterval(y),\n      this.MaxIntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval of max(x, y) */\n  public abstract readonly maxInterval: (\n    x: number | FPInterval,\n    y: number | FPInterval\n  ) => FPInterval;\n\n  private readonly MinIntervalOp: ScalarPairToIntervalOp = {\n    impl: (x: number, y: number): FPInterval => {\n      // If both of the inputs are subnormal, then either of the inputs can be returned\n      if (this.isSubnormal(x) && this.isSubnormal(y)) {\n        return this.correctlyRoundedInterval(\n          this.spanIntervals(this.toInterval(x), this.toInterval(y))\n        );\n      }\n\n      return this.correctlyRoundedInterval(Math.min(x, y));\n    },\n  };\n\n  protected minIntervalImpl(x: number | FPInterval, y: number | FPInterval): FPInterval {\n    return this.runScalarPairToIntervalOp(\n      this.toInterval(x),\n      this.toInterval(y),\n      this.MinIntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval of min(x, y) */\n  public abstract readonly minInterval: (\n    x: number | FPInterval,\n    y: number | FPInterval\n  ) => FPInterval;\n\n  private readonly MixImpreciseIntervalOp: ScalarTripleToIntervalOp = {\n    impl: (x: number, y: number, z: number): FPInterval => {\n      // x + (y - x) * z =\n      //  x + t, where t = (y - x) * z\n      const t = this.multiplicationInterval(this.subtractionInterval(y, x), z);\n      return this.additionInterval(x, t);\n    },\n  };\n\n  protected mixImpreciseIntervalImpl(x: number, y: number, z: number): FPInterval {\n    return this.runScalarTripleToIntervalOp(\n      this.toInterval(x),\n      this.toInterval(y),\n      this.toInterval(z),\n      this.MixImpreciseIntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval of mix(x, y, z) using x + (y - x) * z */\n  public abstract readonly mixImpreciseInterval: (x: number, y: number, z: number) => FPInterval;\n\n  private readonly MixPreciseIntervalOp: ScalarTripleToIntervalOp = {\n    impl: (x: number, y: number, z: number): FPInterval => {\n      // x * (1.0 - z) + y * z =\n      //   t + s, where t = x * (1.0 - z), s = y * z\n      const t = this.multiplicationInterval(x, this.subtractionInterval(1.0, z));\n      const s = this.multiplicationInterval(y, z);\n      return this.additionInterval(t, s);\n    },\n  };\n\n  protected mixPreciseIntervalImpl(x: number, y: number, z: number): FPInterval {\n    return this.runScalarTripleToIntervalOp(\n      this.toInterval(x),\n      this.toInterval(y),\n      this.toInterval(z),\n      this.MixPreciseIntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval of mix(x, y, z) using x * (1.0 - z) + y * z */\n  public abstract readonly mixPreciseInterval: (x: number, y: number, z: number) => FPInterval;\n\n  /** All acceptance interval functions for mix(x, y, z) */\n  public abstract readonly mixIntervals: ScalarTripleToInterval[];\n\n  protected modfIntervalImpl(n: number): { fract: FPInterval; whole: FPInterval } {\n    const fract = this.correctlyRoundedInterval(n % 1.0);\n    const whole = this.correctlyRoundedInterval(n - (n % 1.0));\n    return { fract, whole };\n  }\n\n  /** Calculate an acceptance interval of modf(x) */\n  public abstract readonly modfInterval: (n: number) => { fract: FPInterval; whole: FPInterval };\n\n  private readonly MultiplicationInnerOp = {\n    impl: (x: number, y: number): FPInterval => {\n      return this.correctlyRoundedInterval(x * y);\n    },\n  };\n\n  private readonly MultiplicationIntervalOp: ScalarPairToIntervalOp = {\n    impl: (x: number, y: number): FPInterval => {\n      return this.roundAndFlushScalarPairToInterval(x, y, this.MultiplicationInnerOp);\n    },\n  };\n\n  protected multiplicationIntervalImpl(x: number | FPInterval, y: number | FPInterval): FPInterval {\n    return this.runScalarPairToIntervalOp(\n      this.toInterval(x),\n      this.toInterval(y),\n      this.MultiplicationIntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval of x * y */\n  public abstract readonly multiplicationInterval: (\n    x: number | FPInterval,\n    y: number | FPInterval\n  ) => FPInterval;\n\n  /**\n   * @returns the vector result of multiplying the given vector by the given\n   *          scalar\n   */\n  private multiplyVectorByScalar(v: number[], c: number | FPInterval): FPVector {\n    return this.toVector(v.map(x => this.multiplicationInterval(x, c)));\n  }\n\n  protected multiplicationMatrixScalarIntervalImpl(mat: Array2D<number>, scalar: number): FPMatrix {\n    const cols = mat.length;\n    const rows = mat[0].length;\n    return this.toMatrix(\n      unflatten2DArray(\n        flatten2DArray(mat).map(e => this.MultiplicationIntervalOp.impl(e, scalar)),\n        cols,\n        rows\n      )\n    );\n  }\n\n  /** Calculate an acceptance interval of x * y, when x is a matrix and y is a scalar */\n  public abstract readonly multiplicationMatrixScalarInterval: (\n    mat: Array2D<number>,\n    scalar: number\n  ) => FPMatrix;\n\n  protected multiplicationScalarMatrixIntervalImpl(scalar: number, mat: Array2D<number>): FPMatrix {\n    return this.multiplicationMatrixScalarIntervalImpl(mat, scalar);\n  }\n\n  /** Calculate an acceptance interval of x * y, when x is a scalar and y is a matrix */\n  public abstract readonly multiplicationScalarMatrixInterval: (\n    scalar: number,\n    mat: Array2D<number>\n  ) => FPMatrix;\n\n  protected multiplicationMatrixMatrixIntervalImpl(\n    mat_x: Array2D<number>,\n    mat_y: Array2D<number>\n  ): FPMatrix {\n    const x_cols = mat_x.length;\n    const x_rows = mat_x[0].length;\n    const y_cols = mat_y.length;\n    const y_rows = mat_y[0].length;\n    assert(x_cols === y_rows, `'mat${x_cols}x${x_rows} * mat${y_cols}x${y_rows}' is not defined`);\n\n    const x_transposed = this.transposeInterval(mat_x);\n\n    const result: Array2D<FPInterval> = [...Array(y_cols)].map(_ => [...Array(x_rows)]);\n    mat_y.forEach((y, i) => {\n      x_transposed.forEach((x, j) => {\n        result[i][j] = this.dotInterval(x, y);\n      });\n    });\n\n    return result as FPMatrix;\n  }\n\n  /** Calculate an acceptance interval of x * y, when x is a matrix and y is a matrix */\n  public abstract readonly multiplicationMatrixMatrixInterval: (\n    mat_x: Array2D<number>,\n    mat_y: Array2D<number>\n  ) => FPMatrix;\n\n  protected multiplicationMatrixVectorIntervalImpl(x: Array2D<number>, y: number[]): FPVector {\n    const cols = x.length;\n    const rows = x[0].length;\n    assert(y.length === cols, `'mat${cols}x${rows} * vec${y.length}' is not defined`);\n\n    return this.transposeInterval(x).map(e => this.dotInterval(e, y)) as FPVector;\n  }\n\n  /** Calculate an acceptance interval of x * y, when x is a matrix and y is a vector */\n  public abstract readonly multiplicationMatrixVectorInterval: (\n    x: Array2D<number>,\n    y: number[]\n  ) => FPVector;\n\n  protected multiplicationVectorMatrixIntervalImpl(x: number[], y: Array2D<number>): FPVector {\n    const cols = y.length;\n    const rows = y[0].length;\n    assert(x.length === rows, `'vec${x.length} * mat${cols}x${rows}' is not defined`);\n\n    return y.map(e => this.dotInterval(x, e)) as FPVector;\n  }\n\n  /** Calculate an acceptance interval of x * y, when x is a vector and y is a matrix */\n  public abstract readonly multiplicationVectorMatrixInterval: (\n    x: number[],\n    y: Array2D<number>\n  ) => FPVector;\n\n  private readonly NegationIntervalOp: ScalarToIntervalOp = {\n    impl: (n: number): FPInterval => {\n      return this.correctlyRoundedInterval(-n);\n    },\n  };\n\n  protected negationIntervalImpl(n: number): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.NegationIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of -x */\n  public abstract readonly negationInterval: (n: number) => FPInterval;\n\n  private readonly NormalizeIntervalOp: VectorToVectorOp = {\n    impl: (n: number[]): FPVector => {\n      const length = this.lengthInterval(n);\n      return this.toVector(n.map(e => this.divisionInterval(e, length)));\n    },\n  };\n\n  protected normalizeIntervalImpl(n: number[]): FPVector {\n    return this.runVectorToVectorOp(this.toVector(n), this.NormalizeIntervalOp);\n  }\n\n  public abstract readonly normalizeInterval: (n: number[]) => FPVector;\n\n  private readonly PowIntervalOp: ScalarPairToIntervalOp = {\n    // pow(x, y) has no explicit domain restrictions, but inherits the x <= 0\n    // domain restriction from log2(x). Invoking log2Interval(x) in impl will\n    // enforce this, so there is no need to wrap the impl call here.\n    impl: (x: number, y: number): FPInterval => {\n      return this.exp2Interval(this.multiplicationInterval(y, this.log2Interval(x)));\n    },\n  };\n\n  protected powIntervalImpl(x: number | FPInterval, y: number | FPInterval): FPInterval {\n    return this.runScalarPairToIntervalOp(\n      this.toInterval(x),\n      this.toInterval(y),\n      this.PowIntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval of pow(x, y) */\n  public abstract readonly powInterval: (\n    x: number | FPInterval,\n    y: number | FPInterval\n  ) => FPInterval;\n\n  private readonly RadiansIntervalOp: ScalarToIntervalOp = {\n    impl: (n: number): FPInterval => {\n      return this.multiplicationInterval(n, 0.017453292519943295474);\n    },\n  };\n\n  protected radiansIntervalImpl(n: number): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.RadiansIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of radians(x) */\n  public abstract readonly radiansInterval: (n: number) => FPInterval;\n\n  private readonly ReflectIntervalOp: VectorPairToVectorOp = {\n    impl: (x: number[], y: number[]): FPVector => {\n      assert(\n        x.length === y.length,\n        `ReflectIntervalOp received x (${x}) and y (${y}) with different numbers of elements`\n      );\n\n      // reflect(x, y) = x - 2.0 * dot(x, y) * y\n      //               = x - t * y, t = 2.0 * dot(x, y)\n      // x = incident vector\n      // y = normal of reflecting surface\n      const t = this.multiplicationInterval(2.0, this.dotInterval(x, y));\n      const rhs = this.multiplyVectorByScalar(y, t);\n      return this.runScalarPairToIntervalOpVectorComponentWise(\n        this.toVector(x),\n        rhs,\n        this.SubtractionIntervalOp\n      );\n    },\n  };\n\n  protected reflectIntervalImpl(x: number[], y: number[]): FPVector {\n    assert(\n      x.length === y.length,\n      `reflect is only defined for vectors with the same number of elements`\n    );\n    return this.runVectorPairToVectorOp(this.toVector(x), this.toVector(y), this.ReflectIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of reflect(x, y) */\n  public abstract readonly reflectInterval: (x: number[], y: number[]) => FPVector;\n\n  /**\n   * refract is a singular function in the sense that it is the only builtin that\n   * takes in (FPVector, FPVector, F32) and returns FPVector and is basically\n   * defined in terms of other functions.\n   *\n   * Instead of implementing all the framework code to integrate it with its\n   * own operation type, etc, it instead has a bespoke implementation that is a\n   * composition of other builtin functions that use the framework.\n   */\n  protected refractIntervalImpl(i: number[], s: number[], r: number): FPVector {\n    assert(\n      i.length === s.length,\n      `refract is only defined for vectors with the same number of elements`\n    );\n\n    const r_squared = this.multiplicationInterval(r, r);\n    const dot = this.dotInterval(s, i);\n    const dot_squared = this.multiplicationInterval(dot, dot);\n    const one_minus_dot_squared = this.subtractionInterval(1, dot_squared);\n    const k = this.subtractionInterval(\n      1.0,\n      this.multiplicationInterval(r_squared, one_minus_dot_squared)\n    );\n\n    if (!k.isFinite() || k.containsZeroOrSubnormals()) {\n      // There is a discontinuity at k == 0, due to sqrt(k) being calculated, so exiting early\n      return this.constants().unboundedVector[this.toVector(i).length];\n    }\n\n    if (k.end < 0.0) {\n      // if k is negative, then the zero vector is the valid response\n      return this.constants().zeroVector[this.toVector(i).length];\n    }\n\n    const dot_times_r = this.multiplicationInterval(dot, r);\n    const k_sqrt = this.sqrtInterval(k);\n    const t = this.additionInterval(dot_times_r, k_sqrt); // t = r * dot(i, s) + sqrt(k)\n\n    return this.runScalarPairToIntervalOpVectorComponentWise(\n      this.multiplyVectorByScalar(i, r),\n      this.multiplyVectorByScalar(s, t),\n      this.SubtractionIntervalOp\n    ); // (i * r) - (s * t)\n  }\n\n  /** Calculate acceptance interval vectors of reflect(i, s, r) */\n  public abstract readonly refractInterval: (i: number[], s: number[], r: number) => FPVector;\n\n  private readonly RemainderIntervalOp: ScalarPairToIntervalOp = {\n    impl: (x: number, y: number): FPInterval => {\n      // x % y = x - y * trunc(x/y)\n      return this.subtractionInterval(\n        x,\n        this.multiplicationInterval(y, this.truncInterval(this.divisionInterval(x, y)))\n      );\n    },\n  };\n\n  /** Calculate an acceptance interval for x % y */\n  protected remainderIntervalImpl(x: number, y: number): FPInterval {\n    return this.runScalarPairToIntervalOp(\n      this.toInterval(x),\n      this.toInterval(y),\n      this.RemainderIntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval for x % y */\n  public abstract readonly remainderInterval: (x: number, y: number) => FPInterval;\n\n  private readonly RoundIntervalOp: ScalarToIntervalOp = {\n    impl: (n: number): FPInterval => {\n      const k = Math.floor(n);\n      const diff_before = n - k;\n      const diff_after = k + 1 - n;\n      if (diff_before < diff_after) {\n        return this.correctlyRoundedInterval(k);\n      } else if (diff_before > diff_after) {\n        return this.correctlyRoundedInterval(k + 1);\n      }\n\n      // n is in the middle of two integers.\n      // The tie breaking rule is 'k if k is even, k + 1 if k is odd'\n      if (k % 2 === 0) {\n        return this.correctlyRoundedInterval(k);\n      }\n      return this.correctlyRoundedInterval(k + 1);\n    },\n  };\n\n  protected roundIntervalImpl(n: number): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.RoundIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of round(x) */\n  public abstract readonly roundInterval: (n: number) => FPInterval;\n\n  /**\n   * The definition of saturate does not specify which version of clamp to use.\n   * Using min-max here, since it has wider acceptance intervals, that include\n   * all of median's.\n   */\n  protected saturateIntervalImpl(n: number): FPInterval {\n    return this.runScalarTripleToIntervalOp(\n      this.toInterval(n),\n      this.toInterval(0.0),\n      this.toInterval(1.0),\n      this.ClampMinMaxIntervalOp\n    );\n  }\n\n  /*** Calculate an acceptance interval of saturate(n) as clamp(n, 0.0, 1.0) */\n  public abstract readonly saturateInterval: (n: number) => FPInterval;\n\n  private readonly SignIntervalOp: ScalarToIntervalOp = {\n    impl: (n: number): FPInterval => {\n      if (n > 0.0) {\n        return this.correctlyRoundedInterval(1.0);\n      }\n      if (n < 0.0) {\n        return this.correctlyRoundedInterval(-1.0);\n      }\n\n      return this.correctlyRoundedInterval(0.0);\n    },\n  };\n\n  protected signIntervalImpl(n: number): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.SignIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of sign(x) */\n  public abstract readonly signInterval: (n: number) => FPInterval;\n\n  private readonly SinIntervalOp: ScalarToIntervalOp = {\n    impl: this.limitScalarToIntervalDomain(\n      this.constants().negPiToPiInterval,\n      (n: number): FPInterval => {\n        assert(this.kind === 'f32' || this.kind === 'f16');\n        const abs_error = this.kind === 'f32' ? 2 ** -11 : 2 ** -7;\n        return this.absoluteErrorInterval(Math.sin(n), abs_error);\n      }\n    ),\n  };\n\n  protected sinIntervalImpl(n: number): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.SinIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of sin(x) */\n  public abstract readonly sinInterval: (n: number) => FPInterval;\n\n  private readonly SinhIntervalOp: ScalarToIntervalOp = {\n    impl: (n: number): FPInterval => {\n      // sinh(x) = (exp(x) - exp(-x)) * 0.5\n      const minus_n = this.negationInterval(n);\n      return this.multiplicationInterval(\n        this.subtractionInterval(this.expInterval(n), this.expInterval(minus_n)),\n        0.5\n      );\n    },\n  };\n\n  protected sinhIntervalImpl(n: number): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.SinhIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of sinh(x) */\n  public abstract readonly sinhInterval: (n: number) => FPInterval;\n\n  private readonly SmoothStepOp: ScalarTripleToIntervalOp = {\n    impl: (low: number, high: number, x: number): FPInterval => {\n      // For clamp(foo, 0.0, 1.0) the different implementations of clamp provide\n      // the same value, so arbitrarily picking the minmax version to use.\n      // t = clamp((x - low) / (high - low), 0.0, 1.0)\n      // prettier-ignore\n      const t = this.clampMedianInterval(\n        this.divisionInterval(\n          this.subtractionInterval(x, low),\n          this.subtractionInterval(high, low)),\n        0.0,\n        1.0);\n      // Inherited from t * t * (3.0 - 2.0 * t)\n      // prettier-ignore\n      return this.multiplicationInterval(\n        t,\n        this.multiplicationInterval(t,\n          this.subtractionInterval(3.0,\n            this.multiplicationInterval(2.0, t))));\n    },\n  };\n\n  protected smoothStepIntervalImpl(low: number, high: number, x: number): FPInterval {\n    return this.runScalarTripleToIntervalOp(\n      this.toInterval(low),\n      this.toInterval(high),\n      this.toInterval(x),\n      this.SmoothStepOp\n    );\n  }\n\n  /** Calculate an acceptance interval of smoothStep(low, high, x) */\n  public abstract readonly smoothStepInterval: (low: number, high: number, x: number) => FPInterval;\n\n  private readonly SqrtIntervalOp: ScalarToIntervalOp = {\n    impl: (n: number): FPInterval => {\n      return this.divisionInterval(1.0, this.inverseSqrtInterval(n));\n    },\n  };\n\n  protected sqrtIntervalImpl(n: number | FPInterval): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.SqrtIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of sqrt(x) */\n  public abstract readonly sqrtInterval: (n: number | FPInterval) => FPInterval;\n\n  private readonly StepIntervalOp: ScalarPairToIntervalOp = {\n    impl: (edge: number, x: number): FPInterval => {\n      if (edge <= x) {\n        return this.correctlyRoundedInterval(1.0);\n      }\n      return this.correctlyRoundedInterval(0.0);\n    },\n  };\n\n  protected stepIntervalImpl(edge: number, x: number): FPInterval {\n    return this.runScalarPairToIntervalOp(\n      this.toInterval(edge),\n      this.toInterval(x),\n      this.StepIntervalOp\n    );\n  }\n\n  /**\n   * Calculate an acceptance 'interval' for step(edge, x)\n   *\n   * step only returns two possible values, so its interval requires special\n   * interpretation in CTS tests.\n   * This interval will be one of four values: [0, 0], [0, 1], [1, 1] & [-∞, +∞].\n   * [0, 0] and [1, 1] indicate that the correct answer in point they encapsulate.\n   * [0, 1] should not be treated as a span, i.e. 0.1 is acceptable, but instead\n   * indicate either 0.0 or 1.0 are acceptable answers.\n   * [-∞, +∞] is treated as unbounded interval, since an unbounded or\n   * infinite value was passed in.\n   */\n  public abstract readonly stepInterval: (edge: number, x: number) => FPInterval;\n\n  private readonly SubtractionIntervalOp: ScalarPairToIntervalOp = {\n    impl: (x: number, y: number): FPInterval => {\n      return this.correctlyRoundedInterval(x - y);\n    },\n  };\n\n  protected subtractionIntervalImpl(x: number | FPInterval, y: number | FPInterval): FPInterval {\n    return this.runScalarPairToIntervalOp(\n      this.toInterval(x),\n      this.toInterval(y),\n      this.SubtractionIntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval of x - y */\n  public abstract readonly subtractionInterval: (\n    x: number | FPInterval,\n    y: number | FPInterval\n  ) => FPInterval;\n\n  protected subtractionMatrixMatrixIntervalImpl(x: Array2D<number>, y: Array2D<number>): FPMatrix {\n    return this.runScalarPairToIntervalOpMatrixComponentWise(\n      this.toMatrix(x),\n      this.toMatrix(y),\n      this.SubtractionIntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval of x - y, when x and y are matrices */\n  public abstract readonly subtractionMatrixMatrixInterval: (\n    x: Array2D<number>,\n    y: Array2D<number>\n  ) => FPMatrix;\n\n  private readonly TanIntervalOp: ScalarToIntervalOp = {\n    impl: (n: number): FPInterval => {\n      return this.divisionInterval(this.sinInterval(n), this.cosInterval(n));\n    },\n  };\n\n  protected tanIntervalImpl(n: number): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.TanIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of tan(x) */\n  public abstract readonly tanInterval: (n: number) => FPInterval;\n\n  private readonly TanhIntervalOp: ScalarToIntervalOp = {\n    impl: (n: number): FPInterval => {\n      return this.divisionInterval(this.sinhInterval(n), this.coshInterval(n));\n    },\n  };\n\n  protected tanhIntervalImpl(n: number): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.TanhIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of tanh(x) */\n  public abstract readonly tanhInterval: (n: number) => FPInterval;\n\n  private readonly TransposeIntervalOp: MatrixToMatrixOp = {\n    impl: (m: Array2D<number>): FPMatrix => {\n      const num_cols = m.length;\n      const num_rows = m[0].length;\n      const result: Array2D<FPInterval> = [...Array(num_rows)].map(_ => [...Array(num_cols)]);\n\n      for (let i = 0; i < num_cols; i++) {\n        for (let j = 0; j < num_rows; j++) {\n          result[j][i] = this.correctlyRoundedInterval(m[i][j]);\n        }\n      }\n      return this.toMatrix(result);\n    },\n  };\n\n  protected transposeIntervalImpl(m: Array2D<number>): FPMatrix {\n    return this.runMatrixToMatrixOp(this.toMatrix(m), this.TransposeIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of transpose(m) */\n  public abstract readonly transposeInterval: (m: Array2D<number>) => FPMatrix;\n\n  private readonly TruncIntervalOp: ScalarToIntervalOp = {\n    impl: (n: number): FPInterval => {\n      return this.correctlyRoundedInterval(Math.trunc(n));\n    },\n  };\n\n  protected truncIntervalImpl(n: number | FPInterval): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.TruncIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of trunc(x) */\n  public abstract readonly truncInterval: (n: number | FPInterval) => FPInterval;\n}\n\n// Pre-defined values that get used multiple times in _constants' initializers. Cannot use FPTraits members, since this\n// executes before they are defined.\nconst kF32UnboundedInterval = new FPInterval(\n  'f32',\n  Number.NEGATIVE_INFINITY,\n  Number.POSITIVE_INFINITY\n);\nconst kF32ZeroInterval = new FPInterval('f32', 0);\n\nclass F32Traits extends FPTraits {\n  private static _constants: FPConstants = {\n    positive: {\n      min: kValue.f32.positive.min,\n      max: kValue.f32.positive.max,\n      infinity: kValue.f32.infinity.positive,\n      nearest_max: kValue.f32.positive.nearest_max,\n      less_than_one: kValue.f32.positive.less_than_one,\n      subnormal: {\n        min: kValue.f32.subnormal.positive.min,\n        max: kValue.f32.subnormal.positive.max,\n      },\n      pi: {\n        whole: kValue.f32.positive.pi.whole,\n        three_quarters: kValue.f32.positive.pi.three_quarters,\n        half: kValue.f32.positive.pi.half,\n        third: kValue.f32.positive.pi.third,\n        quarter: kValue.f32.positive.pi.quarter,\n        sixth: kValue.f32.positive.pi.sixth,\n      },\n      e: kValue.f32.positive.e,\n    },\n    negative: {\n      min: kValue.f32.negative.min,\n      max: kValue.f32.negative.max,\n      infinity: kValue.f32.infinity.negative,\n      nearest_min: kValue.f32.negative.nearest_min,\n      less_than_one: kValue.f32.negative.less_than_one,\n      subnormal: {\n        min: kValue.f32.subnormal.negative.min,\n        max: kValue.f32.subnormal.negative.max,\n      },\n      pi: {\n        whole: kValue.f32.negative.pi.whole,\n        three_quarters: kValue.f32.negative.pi.three_quarters,\n        half: kValue.f32.negative.pi.half,\n        third: kValue.f32.negative.pi.third,\n        quarter: kValue.f32.negative.pi.quarter,\n        sixth: kValue.f32.negative.pi.sixth,\n      },\n    },\n    unboundedInterval: kF32UnboundedInterval,\n    zeroInterval: kF32ZeroInterval,\n    // Have to use the constants.ts values here, because values defined in the\n    // initializer cannot be referenced in the initializer\n    negPiToPiInterval: new FPInterval(\n      'f32',\n      kValue.f32.negative.pi.whole,\n      kValue.f32.positive.pi.whole\n    ),\n    greaterThanZeroInterval: new FPInterval(\n      'f32',\n      kValue.f32.subnormal.positive.min,\n      kValue.f32.positive.max\n    ),\n    zeroVector: {\n      2: [kF32ZeroInterval, kF32ZeroInterval],\n      3: [kF32ZeroInterval, kF32ZeroInterval, kF32ZeroInterval],\n      4: [kF32ZeroInterval, kF32ZeroInterval, kF32ZeroInterval, kF32ZeroInterval],\n    },\n    unboundedVector: {\n      2: [kF32UnboundedInterval, kF32UnboundedInterval],\n      3: [kF32UnboundedInterval, kF32UnboundedInterval, kF32UnboundedInterval],\n      4: [\n        kF32UnboundedInterval,\n        kF32UnboundedInterval,\n        kF32UnboundedInterval,\n        kF32UnboundedInterval,\n      ],\n    },\n    unboundedMatrix: {\n      2: {\n        2: [\n          [kF32UnboundedInterval, kF32UnboundedInterval],\n          [kF32UnboundedInterval, kF32UnboundedInterval],\n        ],\n        3: [\n          [kF32UnboundedInterval, kF32UnboundedInterval, kF32UnboundedInterval],\n          [kF32UnboundedInterval, kF32UnboundedInterval, kF32UnboundedInterval],\n        ],\n        4: [\n          [\n            kF32UnboundedInterval,\n            kF32UnboundedInterval,\n            kF32UnboundedInterval,\n            kF32UnboundedInterval,\n          ],\n          [\n            kF32UnboundedInterval,\n            kF32UnboundedInterval,\n            kF32UnboundedInterval,\n            kF32UnboundedInterval,\n          ],\n        ],\n      },\n      3: {\n        2: [\n          [kF32UnboundedInterval, kF32UnboundedInterval],\n          [kF32UnboundedInterval, kF32UnboundedInterval],\n          [kF32UnboundedInterval, kF32UnboundedInterval],\n        ],\n        3: [\n          [kF32UnboundedInterval, kF32UnboundedInterval, kF32UnboundedInterval],\n          [kF32UnboundedInterval, kF32UnboundedInterval, kF32UnboundedInterval],\n          [kF32UnboundedInterval, kF32UnboundedInterval, kF32UnboundedInterval],\n        ],\n        4: [\n          [\n            kF32UnboundedInterval,\n            kF32UnboundedInterval,\n            kF32UnboundedInterval,\n            kF32UnboundedInterval,\n          ],\n          [\n            kF32UnboundedInterval,\n            kF32UnboundedInterval,\n            kF32UnboundedInterval,\n            kF32UnboundedInterval,\n          ],\n          [\n            kF32UnboundedInterval,\n            kF32UnboundedInterval,\n            kF32UnboundedInterval,\n            kF32UnboundedInterval,\n          ],\n        ],\n      },\n      4: {\n        2: [\n          [kF32UnboundedInterval, kF32UnboundedInterval],\n          [kF32UnboundedInterval, kF32UnboundedInterval],\n          [kF32UnboundedInterval, kF32UnboundedInterval],\n          [kF32UnboundedInterval, kF32UnboundedInterval],\n        ],\n        3: [\n          [kF32UnboundedInterval, kF32UnboundedInterval, kF32UnboundedInterval],\n          [kF32UnboundedInterval, kF32UnboundedInterval, kF32UnboundedInterval],\n          [kF32UnboundedInterval, kF32UnboundedInterval, kF32UnboundedInterval],\n          [kF32UnboundedInterval, kF32UnboundedInterval, kF32UnboundedInterval],\n        ],\n        4: [\n          [\n            kF32UnboundedInterval,\n            kF32UnboundedInterval,\n            kF32UnboundedInterval,\n            kF32UnboundedInterval,\n          ],\n          [\n            kF32UnboundedInterval,\n            kF32UnboundedInterval,\n            kF32UnboundedInterval,\n            kF32UnboundedInterval,\n          ],\n          [\n            kF32UnboundedInterval,\n            kF32UnboundedInterval,\n            kF32UnboundedInterval,\n            kF32UnboundedInterval,\n          ],\n          [\n            kF32UnboundedInterval,\n            kF32UnboundedInterval,\n            kF32UnboundedInterval,\n            kF32UnboundedInterval,\n          ],\n        ],\n      },\n    },\n  };\n\n  public constructor() {\n    super('f32');\n  }\n\n  public constants(): FPConstants {\n    return F32Traits._constants;\n  }\n\n  // Utilities - Overrides\n  public readonly quantize = quantizeToF32;\n  public readonly correctlyRounded = correctlyRoundedF32;\n  public readonly isFinite = isFiniteF32;\n  public readonly isSubnormal = isSubnormalNumberF32;\n  public readonly flushSubnormal = flushSubnormalNumberF32;\n  public readonly oneULP = oneULPF32;\n  public readonly scalarBuilder = f32;\n\n  // Framework - Fundamental Error Intervals - Overrides\n  public readonly absoluteErrorInterval = this.absoluteErrorIntervalImpl.bind(this);\n  public readonly correctlyRoundedInterval = this.correctlyRoundedIntervalImpl.bind(this);\n  public readonly correctlyRoundedMatrix = this.correctlyRoundedMatrixImpl.bind(this);\n  public readonly ulpInterval = this.ulpIntervalImpl.bind(this);\n\n  // Framework - API - Overrides\n  public readonly absInterval = this.absIntervalImpl.bind(this);\n  public readonly acosInterval = this.acosIntervalImpl.bind(this);\n  public readonly acoshAlternativeInterval = this.acoshAlternativeIntervalImpl.bind(this);\n  public readonly acoshPrimaryInterval = this.acoshPrimaryIntervalImpl.bind(this);\n  public readonly acoshIntervals = [this.acoshAlternativeInterval, this.acoshPrimaryInterval];\n  public readonly additionInterval = this.additionIntervalImpl.bind(this);\n  public readonly additionMatrixMatrixInterval = this.additionMatrixMatrixIntervalImpl.bind(this);\n  public readonly asinInterval = this.asinIntervalImpl.bind(this);\n  public readonly asinhInterval = this.asinhIntervalImpl.bind(this);\n  public readonly atanInterval = this.atanIntervalImpl.bind(this);\n  public readonly atan2Interval = this.atan2IntervalImpl.bind(this);\n  public readonly atanhInterval = this.atanhIntervalImpl.bind(this);\n  public readonly ceilInterval = this.ceilIntervalImpl.bind(this);\n  public readonly clampMedianInterval = this.clampMedianIntervalImpl.bind(this);\n  public readonly clampMinMaxInterval = this.clampMinMaxIntervalImpl.bind(this);\n  public readonly clampIntervals = [this.clampMedianInterval, this.clampMinMaxInterval];\n  public readonly cosInterval = this.cosIntervalImpl.bind(this);\n  public readonly coshInterval = this.coshIntervalImpl.bind(this);\n  public readonly crossInterval = this.crossIntervalImpl.bind(this);\n  public readonly degreesInterval = this.degreesIntervalImpl.bind(this);\n  public readonly determinantInterval = this.determinantIntervalImpl.bind(this);\n  public readonly distanceInterval = this.distanceIntervalImpl.bind(this);\n  public readonly divisionInterval = this.divisionIntervalImpl.bind(this);\n  public readonly dotInterval = this.dotIntervalImpl.bind(this);\n  public readonly expInterval = this.expIntervalImpl.bind(this);\n  public readonly exp2Interval = this.exp2IntervalImpl.bind(this);\n  public readonly faceForwardIntervals = this.faceForwardIntervalsImpl.bind(this);\n  public readonly floorInterval = this.floorIntervalImpl.bind(this);\n  public readonly fmaInterval = this.fmaIntervalImpl.bind(this);\n  public readonly fractInterval = this.fractIntervalImpl.bind(this);\n  public readonly inverseSqrtInterval = this.inverseSqrtIntervalImpl.bind(this);\n  public readonly ldexpInterval = this.ldexpIntervalImpl.bind(this);\n  public readonly lengthInterval = this.lengthIntervalImpl.bind(this);\n  public readonly logInterval = this.logIntervalImpl.bind(this);\n  public readonly log2Interval = this.log2IntervalImpl.bind(this);\n  public readonly maxInterval = this.maxIntervalImpl.bind(this);\n  public readonly minInterval = this.minIntervalImpl.bind(this);\n  public readonly mixImpreciseInterval = this.mixImpreciseIntervalImpl.bind(this);\n  public readonly mixPreciseInterval = this.mixPreciseIntervalImpl.bind(this);\n  public readonly mixIntervals = [this.mixImpreciseInterval, this.mixPreciseInterval];\n  public readonly modfInterval = this.modfIntervalImpl.bind(this);\n  public readonly multiplicationInterval = this.multiplicationIntervalImpl.bind(this);\n  public readonly multiplicationMatrixMatrixInterval = this.multiplicationMatrixMatrixIntervalImpl.bind(\n    this\n  );\n  public readonly multiplicationMatrixScalarInterval = this.multiplicationMatrixScalarIntervalImpl.bind(\n    this\n  );\n  public readonly multiplicationScalarMatrixInterval = this.multiplicationScalarMatrixIntervalImpl.bind(\n    this\n  );\n  public readonly multiplicationMatrixVectorInterval = this.multiplicationMatrixVectorIntervalImpl.bind(\n    this\n  );\n  public readonly multiplicationVectorMatrixInterval = this.multiplicationVectorMatrixIntervalImpl.bind(\n    this\n  );\n  public readonly negationInterval = this.negationIntervalImpl.bind(this);\n  public readonly normalizeInterval = this.normalizeIntervalImpl.bind(this);\n  public readonly powInterval = this.powIntervalImpl.bind(this);\n  public readonly radiansInterval = this.radiansIntervalImpl.bind(this);\n  public readonly reflectInterval = this.reflectIntervalImpl.bind(this);\n  public readonly refractInterval = this.refractIntervalImpl.bind(this);\n  public readonly remainderInterval = this.remainderIntervalImpl.bind(this);\n  public readonly roundInterval = this.roundIntervalImpl.bind(this);\n  public readonly saturateInterval = this.saturateIntervalImpl.bind(this);\n  public readonly signInterval = this.signIntervalImpl.bind(this);\n  public readonly sinInterval = this.sinIntervalImpl.bind(this);\n  public readonly sinhInterval = this.sinhIntervalImpl.bind(this);\n  public readonly smoothStepInterval = this.smoothStepIntervalImpl.bind(this);\n  public readonly sqrtInterval = this.sqrtIntervalImpl.bind(this);\n  public readonly stepInterval = this.stepIntervalImpl.bind(this);\n  public readonly subtractionInterval = this.subtractionIntervalImpl.bind(this);\n  public readonly subtractionMatrixMatrixInterval = this.subtractionMatrixMatrixIntervalImpl.bind(\n    this\n  );\n  public readonly tanInterval = this.tanIntervalImpl.bind(this);\n  public readonly tanhInterval = this.tanhIntervalImpl.bind(this);\n  public readonly transposeInterval = this.transposeIntervalImpl.bind(this);\n  public readonly truncInterval = this.truncIntervalImpl.bind(this);\n\n  // Framework - Cases\n\n  // U32 -> Interval is used for testing f32 specific unpack* functions\n  /**\n   * @returns a Case for the param and the interval generator provided.\n   * The Case will use an interval comparator for matching results.\n   * @param param the param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating an acceptance interval\n   */\n  private makeU32ToVectorCase(\n    param: number,\n    filter: IntervalFilter,\n    ...ops: ScalarToVector[]\n  ): Case | undefined {\n    param = Math.trunc(param);\n\n    const vectors = ops.map(o => o(param));\n    if (filter === 'finite' && vectors.some(v => !v.every(e => e.isFinite()))) {\n      return undefined;\n    }\n    return {\n      input: u32(param),\n      expected: anyOf(...vectors),\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param params array of inputs to try\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating an acceptance interval\n   */\n  public generateU32ToIntervalCases(\n    params: number[],\n    filter: IntervalFilter,\n    ...ops: ScalarToVector[]\n  ): Case[] {\n    return params.reduce((cases, e) => {\n      const c = this.makeU32ToVectorCase(e, filter, ...ops);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n      return cases;\n    }, new Array<Case>());\n  }\n\n  // Framework - API\n\n  /**\n   * Once-allocated ArrayBuffer/views to avoid overhead of allocation when\n   * converting between numeric formats\n   *\n   * unpackData* is shared between all the unpack*Interval functions, so to\n   * avoid re-entrancy problems, they should not call each other or themselves\n   * directly or indirectly.\n   */\n  private readonly unpackData = new ArrayBuffer(4);\n  private readonly unpackDataU32 = new Uint32Array(this.unpackData);\n  private readonly unpackDataU16 = new Uint16Array(this.unpackData);\n  private readonly unpackDataU8 = new Uint8Array(this.unpackData);\n  private readonly unpackDataI16 = new Int16Array(this.unpackData);\n  private readonly unpackDataI8 = new Int8Array(this.unpackData);\n  private readonly unpackDataF16 = new Float16Array(this.unpackData);\n\n  private unpack2x16floatIntervalImpl(n: number): FPVector {\n    assert(\n      n >= kValue.u32.min && n <= kValue.u32.max,\n      'unpack2x16floatInterval only accepts values on the bounds of u32'\n    );\n    this.unpackDataU32[0] = n;\n    if (this.unpackDataF16.some(f => !isFiniteF16(f))) {\n      return [this.constants().unboundedInterval, this.constants().unboundedInterval];\n    }\n\n    const result: FPVector = [\n      this.quantizeToF16Interval(this.unpackDataF16[0]),\n      this.quantizeToF16Interval(this.unpackDataF16[1]),\n    ];\n\n    if (result.some(r => !r.isFinite())) {\n      return [this.constants().unboundedInterval, this.constants().unboundedInterval];\n    }\n    return result;\n  }\n\n  /** Calculate an acceptance interval vector for unpack2x16float(x) */\n  public readonly unpack2x16floatInterval = this.unpack2x16floatIntervalImpl.bind(this);\n\n  private unpack2x16snormIntervalImpl(n: number): FPVector {\n    assert(\n      n >= kValue.u32.min && n <= kValue.u32.max,\n      'unpack2x16snormInterval only accepts values on the bounds of u32'\n    );\n    const op = (n: number): FPInterval => {\n      return this.ulpInterval(Math.max(n / 32767, -1), 3);\n    };\n\n    this.unpackDataU32[0] = n;\n    return [op(this.unpackDataI16[0]), op(this.unpackDataI16[1])];\n  }\n\n  /** Calculate an acceptance interval vector for unpack2x16snorm(x) */\n  public readonly unpack2x16snormInterval = this.unpack2x16snormIntervalImpl.bind(this);\n\n  private unpack2x16unormIntervalImpl(n: number): FPVector {\n    assert(\n      n >= kValue.u32.min && n <= kValue.u32.max,\n      'unpack2x16unormInterval only accepts values on the bounds of u32'\n    );\n    const op = (n: number): FPInterval => {\n      return this.ulpInterval(n / 65535, 3);\n    };\n\n    this.unpackDataU32[0] = n;\n    return [op(this.unpackDataU16[0]), op(this.unpackDataU16[1])];\n  }\n\n  /** Calculate an acceptance interval vector for unpack2x16unorm(x) */\n  public readonly unpack2x16unormInterval = this.unpack2x16unormIntervalImpl.bind(this);\n\n  private unpack4x8snormIntervalImpl(n: number): FPVector {\n    assert(\n      n >= kValue.u32.min && n <= kValue.u32.max,\n      'unpack4x8snormInterval only accepts values on the bounds of u32'\n    );\n    const op = (n: number): FPInterval => {\n      return this.ulpInterval(Math.max(n / 127, -1), 3);\n    };\n    this.unpackDataU32[0] = n;\n    return [\n      op(this.unpackDataI8[0]),\n      op(this.unpackDataI8[1]),\n      op(this.unpackDataI8[2]),\n      op(this.unpackDataI8[3]),\n    ];\n  }\n\n  /** Calculate an acceptance interval vector for unpack4x8snorm(x) */\n  public readonly unpack4x8snormInterval = this.unpack4x8snormIntervalImpl.bind(this);\n\n  private unpack4x8unormIntervalImpl(n: number): FPVector {\n    assert(\n      n >= kValue.u32.min && n <= kValue.u32.max,\n      'unpack4x8unormInterval only accepts values on the bounds of u32'\n    );\n    const op = (n: number): FPInterval => {\n      return this.ulpInterval(n / 255, 3);\n    };\n\n    this.unpackDataU32[0] = n;\n    return [\n      op(this.unpackDataU8[0]),\n      op(this.unpackDataU8[1]),\n      op(this.unpackDataU8[2]),\n      op(this.unpackDataU8[3]),\n    ];\n  }\n\n  /** Calculate an acceptance interval vector for unpack4x8unorm(x) */\n  public readonly unpack4x8unormInterval = this.unpack4x8unormIntervalImpl.bind(this);\n\n  private readonly QuantizeToF16IntervalOp: ScalarToIntervalOp = {\n    impl: (n: number): FPInterval => {\n      const rounded = correctlyRoundedF16(n);\n      const flushed = addFlushedIfNeededF16(rounded);\n      return this.spanIntervals(...flushed.map(f => this.toInterval(f)));\n    },\n  };\n\n  protected quantizeToF16IntervalImpl(n: number): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.QuantizeToF16IntervalOp);\n  }\n\n  /** Calculate an acceptance interval of quantizeToF16(x) */\n  public readonly quantizeToF16Interval = this.quantizeToF16IntervalImpl.bind(this);\n}\n\n// Pre-defined values that get used multiple times in _constants' initializers. Cannot use FPTraits members, since this\n// executes before they are defined.\nconst kAbstractUnboundedInterval = new FPInterval(\n  'abstract',\n  Number.NEGATIVE_INFINITY,\n  Number.POSITIVE_INFINITY\n);\nconst kAbstractZeroInterval = new FPInterval('abstract', 0);\n\n// This is implementation is incomplete\nclass FPAbstractTraits extends FPTraits {\n  private static _constants: FPConstants = {\n    positive: {\n      min: kValue.f64.positive.min,\n      max: kValue.f64.positive.max,\n      infinity: kValue.f64.infinity.positive,\n      nearest_max: kValue.f64.positive.nearest_max,\n      less_than_one: kValue.f64.positive.less_than_one,\n      subnormal: {\n        min: kValue.f64.subnormal.positive.min,\n        max: kValue.f64.subnormal.positive.max,\n      },\n      pi: {\n        whole: kValue.f64.positive.pi.whole,\n        three_quarters: kValue.f64.positive.pi.three_quarters,\n        half: kValue.f64.positive.pi.half,\n        third: kValue.f64.positive.pi.third,\n        quarter: kValue.f64.positive.pi.quarter,\n        sixth: kValue.f64.positive.pi.sixth,\n      },\n      e: kValue.f64.positive.e,\n    },\n    negative: {\n      min: kValue.f64.negative.min,\n      max: kValue.f64.negative.max,\n      infinity: kValue.f64.infinity.negative,\n      nearest_min: kValue.f64.negative.nearest_min,\n      less_than_one: kValue.f64.negative.less_than_one,\n      subnormal: {\n        min: kValue.f64.subnormal.negative.min,\n        max: kValue.f64.subnormal.negative.max,\n      },\n      pi: {\n        whole: kValue.f64.negative.pi.whole,\n        three_quarters: kValue.f64.negative.pi.three_quarters,\n        half: kValue.f64.negative.pi.half,\n        third: kValue.f64.negative.pi.third,\n        quarter: kValue.f64.negative.pi.quarter,\n        sixth: kValue.f64.negative.pi.sixth,\n      },\n    },\n    unboundedInterval: kAbstractUnboundedInterval,\n    zeroInterval: kAbstractZeroInterval,\n    // Have to use the constants.ts values here, because values defined in the\n    // initializer cannot be referenced in the initializer\n    negPiToPiInterval: new FPInterval(\n      'abstract',\n      kValue.f64.negative.pi.whole,\n      kValue.f64.positive.pi.whole\n    ),\n    greaterThanZeroInterval: new FPInterval(\n      'abstract',\n      kValue.f64.subnormal.positive.min,\n      kValue.f64.positive.max\n    ),\n    zeroVector: {\n      2: [kAbstractZeroInterval, kAbstractZeroInterval],\n      3: [kAbstractZeroInterval, kAbstractZeroInterval, kAbstractZeroInterval],\n      4: [\n        kAbstractZeroInterval,\n        kAbstractZeroInterval,\n        kAbstractZeroInterval,\n        kAbstractZeroInterval,\n      ],\n    },\n    unboundedVector: {\n      2: [kAbstractUnboundedInterval, kAbstractUnboundedInterval],\n      3: [kAbstractUnboundedInterval, kAbstractUnboundedInterval, kAbstractUnboundedInterval],\n      4: [\n        kAbstractUnboundedInterval,\n        kAbstractUnboundedInterval,\n        kAbstractUnboundedInterval,\n        kAbstractUnboundedInterval,\n      ],\n    },\n    unboundedMatrix: {\n      2: {\n        2: [\n          [kAbstractUnboundedInterval, kAbstractUnboundedInterval],\n          [kAbstractUnboundedInterval, kAbstractUnboundedInterval],\n        ],\n        3: [\n          [kAbstractUnboundedInterval, kAbstractUnboundedInterval, kAbstractUnboundedInterval],\n          [kAbstractUnboundedInterval, kAbstractUnboundedInterval, kAbstractUnboundedInterval],\n        ],\n        4: [\n          [\n            kAbstractUnboundedInterval,\n            kAbstractUnboundedInterval,\n            kAbstractUnboundedInterval,\n            kAbstractUnboundedInterval,\n          ],\n          [\n            kAbstractUnboundedInterval,\n            kAbstractUnboundedInterval,\n            kAbstractUnboundedInterval,\n            kAbstractUnboundedInterval,\n          ],\n        ],\n      },\n      3: {\n        2: [\n          [kAbstractUnboundedInterval, kAbstractUnboundedInterval],\n          [kAbstractUnboundedInterval, kAbstractUnboundedInterval],\n          [kAbstractUnboundedInterval, kAbstractUnboundedInterval],\n        ],\n        3: [\n          [kAbstractUnboundedInterval, kAbstractUnboundedInterval, kAbstractUnboundedInterval],\n          [kAbstractUnboundedInterval, kAbstractUnboundedInterval, kAbstractUnboundedInterval],\n          [kAbstractUnboundedInterval, kAbstractUnboundedInterval, kAbstractUnboundedInterval],\n        ],\n        4: [\n          [\n            kAbstractUnboundedInterval,\n            kAbstractUnboundedInterval,\n            kAbstractUnboundedInterval,\n            kAbstractUnboundedInterval,\n          ],\n          [\n            kAbstractUnboundedInterval,\n            kAbstractUnboundedInterval,\n            kAbstractUnboundedInterval,\n            kAbstractUnboundedInterval,\n          ],\n          [\n            kAbstractUnboundedInterval,\n            kAbstractUnboundedInterval,\n            kAbstractUnboundedInterval,\n            kAbstractUnboundedInterval,\n          ],\n        ],\n      },\n      4: {\n        2: [\n          [kAbstractUnboundedInterval, kAbstractUnboundedInterval],\n          [kAbstractUnboundedInterval, kAbstractUnboundedInterval],\n          [kAbstractUnboundedInterval, kAbstractUnboundedInterval],\n          [kAbstractUnboundedInterval, kAbstractUnboundedInterval],\n        ],\n        3: [\n          [kAbstractUnboundedInterval, kAbstractUnboundedInterval, kAbstractUnboundedInterval],\n          [kAbstractUnboundedInterval, kAbstractUnboundedInterval, kAbstractUnboundedInterval],\n          [kAbstractUnboundedInterval, kAbstractUnboundedInterval, kAbstractUnboundedInterval],\n          [kAbstractUnboundedInterval, kAbstractUnboundedInterval, kAbstractUnboundedInterval],\n        ],\n        4: [\n          [\n            kAbstractUnboundedInterval,\n            kAbstractUnboundedInterval,\n            kAbstractUnboundedInterval,\n            kAbstractUnboundedInterval,\n          ],\n          [\n            kAbstractUnboundedInterval,\n            kAbstractUnboundedInterval,\n            kAbstractUnboundedInterval,\n            kAbstractUnboundedInterval,\n          ],\n          [\n            kAbstractUnboundedInterval,\n            kAbstractUnboundedInterval,\n            kAbstractUnboundedInterval,\n            kAbstractUnboundedInterval,\n          ],\n          [\n            kAbstractUnboundedInterval,\n            kAbstractUnboundedInterval,\n            kAbstractUnboundedInterval,\n            kAbstractUnboundedInterval,\n          ],\n        ],\n      },\n    },\n  };\n\n  public constructor() {\n    super('abstract');\n  }\n\n  public constants(): FPConstants {\n    return FPAbstractTraits._constants;\n  }\n\n  // Utilities - Overrides\n  // number is represented as a f64 internally, so all number values are already\n  // quantized to f64\n  public readonly quantize = (n: number) => {\n    return n;\n  };\n  public readonly correctlyRounded = correctlyRoundedF64;\n  public readonly isFinite = Number.isFinite;\n  public readonly isSubnormal = isSubnormalNumberF64;\n  public readonly flushSubnormal = flushSubnormalNumberF64;\n  public readonly oneULP = oneULPF64;\n  public readonly scalarBuilder = f64;\n\n  // Framework - Fundamental Error Intervals - Overrides\n  public readonly absoluteErrorInterval = this.unboundedAbsoluteErrorInterval.bind(this);\n  public readonly correctlyRoundedInterval = this.correctlyRoundedIntervalImpl.bind(this);\n  public readonly correctlyRoundedMatrix = this.correctlyRoundedMatrixImpl.bind(this);\n  public readonly ulpInterval = this.unboundedUlpInterval.bind(this);\n\n  // Framework - API - Overrides\n  public readonly absInterval = this.unimplementedScalarToInterval.bind(this);\n  public readonly acosInterval = this.unimplementedScalarToInterval.bind(this);\n  public readonly acoshAlternativeInterval = this.unimplementedScalarToInterval.bind(this);\n  public readonly acoshPrimaryInterval = this.unimplementedScalarToInterval.bind(this);\n  public readonly acoshIntervals = [this.acoshAlternativeInterval, this.acoshPrimaryInterval];\n  public readonly additionInterval = this.unimplementedScalarPairToInterval.bind(this);\n  public readonly additionMatrixMatrixInterval = this.unimplementedMatrixPairToMatrix.bind(this);\n  public readonly asinInterval = this.unimplementedScalarToInterval.bind(this);\n  public readonly asinhInterval = this.unimplementedScalarToInterval.bind(this);\n  public readonly atanInterval = this.unimplementedScalarToInterval.bind(this);\n  public readonly atan2Interval = this.unimplementedScalarPairToInterval.bind(this);\n  public readonly atanhInterval = this.unimplementedScalarToInterval.bind(this);\n  public readonly ceilInterval = this.unimplementedScalarToInterval.bind(this);\n  public readonly clampMedianInterval = this.unimplementedScalarTripleToInterval.bind(this);\n  public readonly clampMinMaxInterval = this.unimplementedScalarTripleToInterval.bind(this);\n  public readonly clampIntervals = [this.clampMedianInterval, this.clampMinMaxInterval];\n  public readonly cosInterval = this.unimplementedScalarToInterval.bind(this);\n  public readonly coshInterval = this.unimplementedScalarToInterval.bind(this);\n  public readonly crossInterval = this.unimplementedVectorPairToVector.bind(this);\n  public readonly degreesInterval = this.unimplementedScalarToInterval.bind(this);\n  public readonly determinantInterval = this.unimplementedMatrixToInterval.bind(this);\n  public readonly distanceInterval = this.unimplementedDistance.bind(this);\n  public readonly divisionInterval = this.unimplementedScalarPairToInterval.bind(this);\n  public readonly dotInterval = this.unimplementedVectorPairToInterval.bind(this);\n  public readonly expInterval = this.unimplementedScalarToInterval.bind(this);\n  public readonly exp2Interval = this.unimplementedScalarToInterval.bind(this);\n  public readonly faceForwardIntervals = this.unimplementedFaceForward.bind(this);\n  public readonly floorInterval = this.unimplementedScalarToInterval.bind(this);\n  public readonly fmaInterval = this.unimplementedScalarTripleToInterval.bind(this);\n  public readonly fractInterval = this.unimplementedScalarToInterval.bind(this);\n  public readonly inverseSqrtInterval = this.unimplementedScalarToInterval.bind(this);\n  public readonly ldexpInterval = this.unimplementedScalarPairToInterval.bind(this);\n  public readonly lengthInterval = this.unimplementedLength.bind(this);\n  public readonly logInterval = this.unimplementedScalarToInterval.bind(this);\n  public readonly log2Interval = this.unimplementedScalarToInterval.bind(this);\n  public readonly maxInterval = this.unimplementedScalarPairToInterval.bind(this);\n  public readonly minInterval = this.unimplementedScalarPairToInterval.bind(this);\n  public readonly mixImpreciseInterval = this.unimplementedScalarTripleToInterval.bind(this);\n  public readonly mixPreciseInterval = this.unimplementedScalarTripleToInterval.bind(this);\n  public readonly mixIntervals = [this.mixImpreciseInterval, this.mixPreciseInterval];\n  public readonly modfInterval = this.unimplementedModf.bind(this);\n  public readonly multiplicationInterval = this.unimplementedScalarPairToInterval.bind(this);\n  public readonly multiplicationMatrixMatrixInterval = this.unimplementedMatrixPairToMatrix.bind(\n    this\n  );\n  public readonly multiplicationMatrixScalarInterval = this.unimplementedMatrixScalarToMatrix.bind(\n    this\n  );\n  public readonly multiplicationScalarMatrixInterval = this.unimplementedScalarMatrixToMatrix.bind(\n    this\n  );\n  public readonly multiplicationMatrixVectorInterval = this.unimplementedMatrixVectorToVector.bind(\n    this\n  );\n  public readonly multiplicationVectorMatrixInterval = this.unimplementedVectorMatrixToVector.bind(\n    this\n  );\n  public readonly negationInterval = this.unimplementedScalarToInterval.bind(this);\n  public readonly normalizeInterval = this.unimplementedVectorToVector.bind(this);\n  public readonly powInterval = this.unimplementedScalarPairToInterval.bind(this);\n  public readonly quantizeToF16Interval = this.unimplementedScalarToInterval.bind(this);\n  public readonly radiansInterval = this.unimplementedScalarToInterval.bind(this);\n  public readonly reflectInterval = this.unimplementedVectorPairToVector.bind(this);\n  public readonly refractInterval = this.unimplementedRefract.bind(this);\n  public readonly remainderInterval = this.unimplementedScalarPairToInterval.bind(this);\n  public readonly roundInterval = this.unimplementedScalarToInterval.bind(this);\n  public readonly saturateInterval = this.unimplementedScalarToInterval.bind(this);\n  public readonly signInterval = this.unimplementedScalarToInterval.bind(this);\n  public readonly sinInterval = this.unimplementedScalarToInterval.bind(this);\n  public readonly sinhInterval = this.unimplementedScalarToInterval.bind(this);\n  public readonly smoothStepInterval = this.unimplementedScalarTripleToInterval.bind(this);\n  public readonly sqrtInterval = this.unimplementedScalarToInterval.bind(this);\n  public readonly stepInterval = this.unimplementedScalarPairToInterval.bind(this);\n  public readonly subtractionInterval = this.unimplementedScalarPairToInterval.bind(this);\n  public readonly subtractionMatrixMatrixInterval = this.unimplementedMatrixPairToMatrix.bind(this);\n  public readonly tanInterval = this.unimplementedScalarToInterval.bind(this);\n  public readonly tanhInterval = this.unimplementedScalarToInterval.bind(this);\n  public readonly transposeInterval = this.unimplementedMatrixToMatrix.bind(this);\n  public readonly truncInterval = this.unimplementedScalarToInterval.bind(this);\n}\n\n// Pre-defined values that get used multiple times in _constants' initializers. Cannot use FPTraits members, since this\n// executes before they are defined.\nconst kF16UnboundedInterval = new FPInterval(\n  'f16',\n  Number.NEGATIVE_INFINITY,\n  Number.POSITIVE_INFINITY\n);\nconst kF16ZeroInterval = new FPInterval('f16', 0);\n\n// This is implementation is incomplete\nclass F16Traits extends FPTraits {\n  private static _constants: FPConstants = {\n    positive: {\n      min: kValue.f16.positive.min,\n      max: kValue.f16.positive.max,\n      infinity: kValue.f16.infinity.positive,\n      nearest_max: kValue.f16.positive.nearest_max,\n      less_than_one: kValue.f16.positive.less_than_one,\n      subnormal: {\n        min: kValue.f16.subnormal.positive.min,\n        max: kValue.f16.subnormal.positive.max,\n      },\n      pi: {\n        whole: kValue.f16.positive.pi.whole,\n        three_quarters: kValue.f16.positive.pi.three_quarters,\n        half: kValue.f16.positive.pi.half,\n        third: kValue.f16.positive.pi.third,\n        quarter: kValue.f16.positive.pi.quarter,\n        sixth: kValue.f16.positive.pi.sixth,\n      },\n      e: kValue.f16.positive.e,\n    },\n    negative: {\n      min: kValue.f16.negative.min,\n      max: kValue.f16.negative.max,\n      infinity: kValue.f16.infinity.negative,\n      nearest_min: kValue.f16.negative.nearest_min,\n      less_than_one: kValue.f16.negative.less_than_one,\n      subnormal: {\n        min: kValue.f16.subnormal.negative.min,\n        max: kValue.f16.subnormal.negative.max,\n      },\n      pi: {\n        whole: kValue.f16.negative.pi.whole,\n        three_quarters: kValue.f16.negative.pi.three_quarters,\n        half: kValue.f16.negative.pi.half,\n        third: kValue.f16.negative.pi.third,\n        quarter: kValue.f16.negative.pi.quarter,\n        sixth: kValue.f16.negative.pi.sixth,\n      },\n    },\n    unboundedInterval: kF16UnboundedInterval,\n    zeroInterval: kF16ZeroInterval,\n    // Have to use the constants.ts values here, because values defined in the\n    // initializer cannot be referenced in the initializer\n    negPiToPiInterval: new FPInterval(\n      'f16',\n      kValue.f16.negative.pi.whole,\n      kValue.f16.positive.pi.whole\n    ),\n    greaterThanZeroInterval: new FPInterval(\n      'f16',\n      kValue.f16.subnormal.positive.min,\n      kValue.f16.positive.max\n    ),\n    zeroVector: {\n      2: [kF16ZeroInterval, kF16ZeroInterval],\n      3: [kF16ZeroInterval, kF16ZeroInterval, kF16ZeroInterval],\n      4: [kF16ZeroInterval, kF16ZeroInterval, kF16ZeroInterval, kF16ZeroInterval],\n    },\n    unboundedVector: {\n      2: [kF16UnboundedInterval, kF16UnboundedInterval],\n      3: [kF16UnboundedInterval, kF16UnboundedInterval, kF16UnboundedInterval],\n      4: [\n        kF16UnboundedInterval,\n        kF16UnboundedInterval,\n        kF16UnboundedInterval,\n        kF16UnboundedInterval,\n      ],\n    },\n    unboundedMatrix: {\n      2: {\n        2: [\n          [kF16UnboundedInterval, kF16UnboundedInterval],\n          [kF16UnboundedInterval, kF16UnboundedInterval],\n        ],\n        3: [\n          [kF16UnboundedInterval, kF16UnboundedInterval, kF16UnboundedInterval],\n          [kF16UnboundedInterval, kF16UnboundedInterval, kF16UnboundedInterval],\n        ],\n        4: [\n          [\n            kF16UnboundedInterval,\n            kF16UnboundedInterval,\n            kF16UnboundedInterval,\n            kF16UnboundedInterval,\n          ],\n          [\n            kF16UnboundedInterval,\n            kF16UnboundedInterval,\n            kF16UnboundedInterval,\n            kF16UnboundedInterval,\n          ],\n        ],\n      },\n      3: {\n        2: [\n          [kF16UnboundedInterval, kF16UnboundedInterval],\n          [kF16UnboundedInterval, kF16UnboundedInterval],\n          [kF16UnboundedInterval, kF16UnboundedInterval],\n        ],\n        3: [\n          [kF16UnboundedInterval, kF16UnboundedInterval, kF16UnboundedInterval],\n          [kF16UnboundedInterval, kF16UnboundedInterval, kF16UnboundedInterval],\n          [kF16UnboundedInterval, kF16UnboundedInterval, kF16UnboundedInterval],\n        ],\n        4: [\n          [\n            kF16UnboundedInterval,\n            kF16UnboundedInterval,\n            kF16UnboundedInterval,\n            kF16UnboundedInterval,\n          ],\n          [\n            kF16UnboundedInterval,\n            kF16UnboundedInterval,\n            kF16UnboundedInterval,\n            kF16UnboundedInterval,\n          ],\n          [\n            kF16UnboundedInterval,\n            kF16UnboundedInterval,\n            kF16UnboundedInterval,\n            kF16UnboundedInterval,\n          ],\n        ],\n      },\n      4: {\n        2: [\n          [kF16UnboundedInterval, kF16UnboundedInterval],\n          [kF16UnboundedInterval, kF16UnboundedInterval],\n          [kF16UnboundedInterval, kF16UnboundedInterval],\n          [kF16UnboundedInterval, kF16UnboundedInterval],\n        ],\n        3: [\n          [kF16UnboundedInterval, kF16UnboundedInterval, kF16UnboundedInterval],\n          [kF16UnboundedInterval, kF16UnboundedInterval, kF16UnboundedInterval],\n          [kF16UnboundedInterval, kF16UnboundedInterval, kF16UnboundedInterval],\n          [kF16UnboundedInterval, kF16UnboundedInterval, kF16UnboundedInterval],\n        ],\n        4: [\n          [\n            kF16UnboundedInterval,\n            kF16UnboundedInterval,\n            kF16UnboundedInterval,\n            kF16UnboundedInterval,\n          ],\n          [\n            kF16UnboundedInterval,\n            kF16UnboundedInterval,\n            kF16UnboundedInterval,\n            kF16UnboundedInterval,\n          ],\n          [\n            kF16UnboundedInterval,\n            kF16UnboundedInterval,\n            kF16UnboundedInterval,\n            kF16UnboundedInterval,\n          ],\n          [\n            kF16UnboundedInterval,\n            kF16UnboundedInterval,\n            kF16UnboundedInterval,\n            kF16UnboundedInterval,\n          ],\n        ],\n      },\n    },\n  };\n\n  public constructor() {\n    super('f16');\n  }\n\n  public constants(): FPConstants {\n    return F16Traits._constants;\n  }\n\n  // Utilities - Overrides\n  public readonly quantize = quantizeToF16;\n  public readonly correctlyRounded = correctlyRoundedF16;\n  public readonly isFinite = isFiniteF16;\n  public readonly isSubnormal = isSubnormalNumberF16;\n  public readonly flushSubnormal = flushSubnormalNumberF16;\n  public readonly oneULP = oneULPF16;\n  public readonly scalarBuilder = f16;\n\n  // Framework - Fundamental Error Intervals - Overrides\n  public readonly absoluteErrorInterval = this.absoluteErrorIntervalImpl.bind(this);\n  public readonly correctlyRoundedInterval = this.correctlyRoundedIntervalImpl.bind(this);\n  public readonly correctlyRoundedMatrix = this.correctlyRoundedMatrixImpl.bind(this);\n  public readonly ulpInterval = this.ulpIntervalImpl.bind(this);\n\n  // Framework - API - Overrides\n  public readonly absInterval = this.absIntervalImpl.bind(this);\n  public readonly acosInterval = this.acosIntervalImpl.bind(this);\n  public readonly acoshAlternativeInterval = this.unimplementedScalarToInterval.bind(this);\n  public readonly acoshPrimaryInterval = this.unimplementedScalarToInterval.bind(this);\n  public readonly acoshIntervals = [this.acoshAlternativeInterval, this.acoshPrimaryInterval];\n  public readonly additionInterval = this.additionIntervalImpl.bind(this);\n  public readonly additionMatrixMatrixInterval = this.unimplementedMatrixPairToMatrix.bind(this);\n  public readonly asinInterval = this.asinIntervalImpl.bind(this);\n  public readonly asinhInterval = this.unimplementedScalarToInterval.bind(this);\n  public readonly atanInterval = this.atanIntervalImpl.bind(this);\n  public readonly atan2Interval = this.atan2IntervalImpl.bind(this);\n  public readonly atanhInterval = this.unimplementedScalarToInterval.bind(this);\n  public readonly ceilInterval = this.ceilIntervalImpl.bind(this);\n  public readonly clampMedianInterval = this.unimplementedScalarTripleToInterval.bind(this);\n  public readonly clampMinMaxInterval = this.unimplementedScalarTripleToInterval.bind(this);\n  public readonly clampIntervals = [this.clampMedianInterval, this.clampMinMaxInterval];\n  public readonly cosInterval = this.cosIntervalImpl.bind(this);\n  public readonly coshInterval = this.unimplementedScalarToInterval.bind(this);\n  public readonly crossInterval = this.unimplementedVectorPairToVector.bind(this);\n  public readonly degreesInterval = this.unimplementedScalarToInterval.bind(this);\n  public readonly determinantInterval = this.unimplementedMatrixToInterval.bind(this);\n  public readonly distanceInterval = this.unimplementedDistance.bind(this);\n  public readonly divisionInterval = this.divisionIntervalImpl.bind(this);\n  public readonly dotInterval = this.unimplementedVectorPairToInterval.bind(this);\n  public readonly expInterval = this.unimplementedScalarToInterval.bind(this);\n  public readonly exp2Interval = this.unimplementedScalarToInterval.bind(this);\n  public readonly faceForwardIntervals = this.unimplementedFaceForward.bind(this);\n  public readonly floorInterval = this.floorIntervalImpl.bind(this);\n  public readonly fmaInterval = this.unimplementedScalarTripleToInterval.bind(this);\n  public readonly fractInterval = this.unimplementedScalarToInterval.bind(this);\n  public readonly inverseSqrtInterval = this.inverseSqrtIntervalImpl.bind(this);\n  public readonly ldexpInterval = this.unimplementedScalarPairToInterval.bind(this);\n  public readonly lengthInterval = this.unimplementedLength.bind(this);\n  public readonly logInterval = this.logIntervalImpl.bind(this);\n  public readonly log2Interval = this.log2IntervalImpl.bind(this);\n  public readonly maxInterval = this.maxIntervalImpl.bind(this);\n  public readonly minInterval = this.minIntervalImpl.bind(this);\n  public readonly mixImpreciseInterval = this.unimplementedScalarTripleToInterval.bind(this);\n  public readonly mixPreciseInterval = this.unimplementedScalarTripleToInterval.bind(this);\n  public readonly mixIntervals = [this.mixImpreciseInterval, this.mixPreciseInterval];\n  public readonly modfInterval = this.unimplementedModf.bind(this);\n  public readonly multiplicationInterval = this.multiplicationIntervalImpl.bind(this);\n  public readonly multiplicationMatrixMatrixInterval = this.unimplementedMatrixPairToMatrix.bind(\n    this\n  );\n  public readonly multiplicationMatrixScalarInterval = this.unimplementedMatrixScalarToMatrix.bind(\n    this\n  );\n  public readonly multiplicationScalarMatrixInterval = this.unimplementedScalarMatrixToMatrix.bind(\n    this\n  );\n  public readonly multiplicationMatrixVectorInterval = this.unimplementedMatrixVectorToVector.bind(\n    this\n  );\n  public readonly multiplicationVectorMatrixInterval = this.unimplementedVectorMatrixToVector.bind(\n    this\n  );\n  public readonly negationInterval = this.unimplementedScalarToInterval.bind(this);\n  public readonly normalizeInterval = this.unimplementedVectorToVector.bind(this);\n  public readonly powInterval = this.unimplementedScalarPairToInterval.bind(this);\n  public readonly quantizeToF16Interval = this.quantizeToF16IntervalNotAvailable.bind(this);\n  public readonly radiansInterval = this.unimplementedScalarToInterval.bind(this);\n  public readonly reflectInterval = this.unimplementedVectorPairToVector.bind(this);\n  public readonly refractInterval = this.unimplementedRefract.bind(this);\n  public readonly remainderInterval = this.unimplementedScalarPairToInterval.bind(this);\n  public readonly roundInterval = this.roundIntervalImpl.bind(this);\n  public readonly saturateInterval = this.unimplementedScalarToInterval.bind(this);\n  public readonly signInterval = this.unimplementedScalarToInterval.bind(this);\n  public readonly sinInterval = this.sinIntervalImpl.bind(this);\n  public readonly sinhInterval = this.unimplementedScalarToInterval.bind(this);\n  public readonly smoothStepInterval = this.unimplementedScalarTripleToInterval.bind(this);\n  public readonly sqrtInterval = this.sqrtIntervalImpl.bind(this);\n  public readonly stepInterval = this.unimplementedScalarPairToInterval.bind(this);\n  public readonly subtractionInterval = this.subtractionIntervalImpl.bind(this);\n  public readonly subtractionMatrixMatrixInterval = this.unimplementedMatrixPairToMatrix.bind(this);\n  public readonly tanInterval = this.unimplementedScalarToInterval.bind(this);\n  public readonly tanhInterval = this.unimplementedScalarToInterval.bind(this);\n  public readonly transposeInterval = this.unimplementedMatrixToMatrix.bind(this);\n  public readonly truncInterval = this.unimplementedScalarToInterval.bind(this);\n\n  /** quantizeToF16 has no f16 overload. */\n  private quantizeToF16IntervalNotAvailable(n: number): FPInterval {\n    unreachable(\"quantizeToF16 don't have f16 overload.\");\n    return kF16UnboundedInterval;\n  }\n}\n\nexport const FP = {\n  f32: new F32Traits(),\n  f16: new F16Traits(),\n  abstract: new FPAbstractTraits(),\n};\n\n/** @returns the floating-point traits for @p type */\nexport function fpTraitsFor(type: ScalarType): FPTraits {\n  switch (type.kind) {\n    case 'abstract-float':\n      return FP.abstract;\n    case 'f32':\n      return FP.f32;\n    case 'f16':\n      return FP.f16;\n    default:\n      unreachable(`unsupported type: ${type}`);\n  }\n}\n\n/** @returns true if the value @p value is representable with @p type */\nexport function isRepresentable(value: number, type: ScalarType) {\n  if (!Number.isFinite(value)) {\n    return false;\n  }\n  if (isFloatType(type)) {\n    const constants = fpTraitsFor(type).constants();\n    return value >= constants.negative.min && value <= constants.positive.max;\n  }\n  assert(false, `isRepresentable() is not yet implemented for type ${type}`);\n}\n"],"mappings":"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"}