{"version":3,"file":"server.js","names":["fs","http","dataCache","globalTestConfig","DefaultTestFileLoader","prettyPrintLog","Logger","parseQuery","Colors","setDefaultRequestAdapterOptions","setGPUProvider","sys","usage","rc","console","log","type","exit","existsSync","enabled","emitCoverage","verbose","gpuProviderModule","undefined","dataPath","gpuProviderFlags","i","args","length","a","startsWith","compatibility","modulePath","require","push","unrollConstEvalLoops","codeCoverage","compatibilityMode","create","coverage","error","setStore","load","path","Promise","resolve","reject","readFile","err","data","message","setDebugLogger","globalDebugMode","testcases","Map","runTestcase","testcase","expectations","name","query","toString","rec","res","record","run","server","createServer","request","response","url","end","loadCasesPrefix","runPrefix","terminatePrefix","substr","webgpuQuery","loader","loadCases","set","statusCode","stack","get","begin","result","coverageData","logs","map","join","status","JSON","stringify","close","listen","address","port","catch","ex"],"sources":["../../../src/common/runtime/server.ts"],"sourcesContent":["/* eslint no-console: \"off\" */\n\nimport * as fs from 'fs';\nimport * as http from 'http';\nimport { AddressInfo } from 'net';\n\nimport { dataCache } from '../framework/data_cache.js';\nimport { globalTestConfig } from '../framework/test_config.js';\nimport { DefaultTestFileLoader } from '../internal/file_loader.js';\nimport { prettyPrintLog } from '../internal/logging/log_message.js';\nimport { Logger } from '../internal/logging/logger.js';\nimport { LiveTestCaseResult, Status } from '../internal/logging/result.js';\nimport { parseQuery } from '../internal/query/parseQuery.js';\nimport { TestQueryWithExpectation } from '../internal/query/query.js';\nimport { TestTreeLeaf } from '../internal/tree.js';\nimport { Colors } from '../util/colors.js';\nimport { setDefaultRequestAdapterOptions, setGPUProvider } from '../util/navigator_gpu.js';\n\nimport sys from './helper/sys.js';\n\nfunction usage(rc: number): never {\n  console.log(`Usage:\n  tools/run_${sys.type} [OPTIONS...]\nOptions:\n  --colors                  Enable ANSI colors in output.\n  --compat                  Run tests in compatibility mode.\n  --coverage                Add coverage data to each result.\n  --data                    Path to the data cache directory.\n  --verbose                 Print result/log of every test as it runs.\n  --gpu-provider            Path to node module that provides the GPU implementation.\n  --gpu-provider-flag       Flag to set on the gpu-provider as <flag>=<value>\n  --unroll-const-eval-loops Unrolls loops in constant-evaluation shader execution tests\n  --u                       Flag to set on the gpu-provider as <flag>=<value>\n\nProvides an HTTP server used for running tests via an HTTP RPC interface\nTo run a test, perform an HTTP GET or POST at the URL:\n  http://localhost:port/run?<test-name>\nTo shutdown the server perform an HTTP GET or POST at the URL:\n  http://localhost:port/terminate\n`);\n  return sys.exit(rc);\n}\n\ninterface RunResult {\n  // The result of the test\n  status: Status;\n  // Any additional messages printed\n  message: string;\n  // Code coverage data, if the server was started with `--coverage`\n  // This data is opaque (implementation defined).\n  coverageData?: string;\n}\n\n// The interface that exposes creation of the GPU, and optional interface to code coverage.\ninterface GPUProviderModule {\n  // @returns a GPU with the given flags\n  create(flags: string[]): GPU;\n  // An optional interface to a CodeCoverageProvider\n  coverage?: CodeCoverageProvider;\n}\n\ninterface CodeCoverageProvider {\n  // Starts collecting code coverage\n  begin(): void;\n  // Ends collecting of code coverage, returning the coverage data.\n  // This data is opaque (implementation defined).\n  end(): string;\n}\n\nif (!sys.existsSync('src/common/runtime/cmdline.ts')) {\n  console.log('Must be run from repository root');\n  usage(1);\n}\n\nColors.enabled = false;\n\nlet emitCoverage = false;\nlet verbose = false;\nlet gpuProviderModule: GPUProviderModule | undefined = undefined;\nlet dataPath: string | undefined = undefined;\n\nconst gpuProviderFlags: string[] = [];\nfor (let i = 0; i < sys.args.length; ++i) {\n  const a = sys.args[i];\n  if (a.startsWith('-')) {\n    if (a === '--colors') {\n      Colors.enabled = true;\n    } else if (a === '--compat') {\n      globalTestConfig.compatibility = true;\n    } else if (a === '--coverage') {\n      emitCoverage = true;\n    } else if (a === '--data') {\n      dataPath = sys.args[++i];\n    } else if (a === '--gpu-provider') {\n      const modulePath = sys.args[++i];\n      gpuProviderModule = require(modulePath);\n    } else if (a === '--gpu-provider-flag') {\n      gpuProviderFlags.push(sys.args[++i]);\n    } else if (a === '--unroll-const-eval-loops') {\n      globalTestConfig.unrollConstEvalLoops = true;\n    } else if (a === '--help') {\n      usage(1);\n    } else if (a === '--verbose') {\n      verbose = true;\n    } else {\n      console.log(`unrecognized flag: ${a}`);\n    }\n  }\n}\n\nlet codeCoverage: CodeCoverageProvider | undefined = undefined;\n\nif (globalTestConfig.compatibility) {\n  // MAINTENANCE_TODO: remove the cast once compatibilityMode is officially added\n  setDefaultRequestAdapterOptions({ compatibilityMode: true } as GPURequestAdapterOptions);\n}\n\nif (gpuProviderModule) {\n  setGPUProvider(() => gpuProviderModule!.create(gpuProviderFlags));\n\n  if (emitCoverage) {\n    codeCoverage = gpuProviderModule.coverage;\n    if (codeCoverage === undefined) {\n      console.error(\n        `--coverage specified, but the GPUProviderModule does not support code coverage.\nDid you remember to build with code coverage instrumentation enabled?`\n      );\n      sys.exit(1);\n    }\n  }\n}\n\nif (dataPath !== undefined) {\n  dataCache.setStore({\n    load: (path: string) => {\n      return new Promise<Uint8Array>((resolve, reject) => {\n        fs.readFile(`${dataPath}/${path}`, (err, data) => {\n          if (err !== null) {\n            reject(err.message);\n          } else {\n            resolve(data);\n          }\n        });\n      });\n    },\n  });\n}\nif (verbose) {\n  dataCache.setDebugLogger(console.log);\n}\n\n// eslint-disable-next-line @typescript-eslint/require-await\n(async () => {\n  Logger.globalDebugMode = verbose;\n  const log = new Logger();\n  const testcases = new Map<string, TestTreeLeaf>();\n\n  async function runTestcase(\n    testcase: TestTreeLeaf,\n    expectations: TestQueryWithExpectation[] = []\n  ): Promise<LiveTestCaseResult> {\n    const name = testcase.query.toString();\n    const [rec, res] = log.record(name);\n    await testcase.run(rec, expectations);\n    return res;\n  }\n\n  const server = http.createServer(\n    async (request: http.IncomingMessage, response: http.ServerResponse) => {\n      if (request.url === undefined) {\n        response.end('invalid url');\n        return;\n      }\n\n      const loadCasesPrefix = '/load?';\n      const runPrefix = '/run?';\n      const terminatePrefix = '/terminate';\n\n      if (request.url.startsWith(loadCasesPrefix)) {\n        const query = request.url.substr(loadCasesPrefix.length);\n        try {\n          const webgpuQuery = parseQuery(query);\n          const loader = new DefaultTestFileLoader();\n          for (const testcase of await loader.loadCases(webgpuQuery)) {\n            testcases.set(testcase.query.toString(), testcase);\n          }\n          response.statusCode = 200;\n          response.end();\n        } catch (err) {\n          response.statusCode = 500;\n          response.end(`load failed with error: ${err}\\n${(err as Error).stack}`);\n        }\n      } else if (request.url.startsWith(runPrefix)) {\n        const name = request.url.substr(runPrefix.length);\n        try {\n          const testcase = testcases.get(name);\n          if (testcase) {\n            if (codeCoverage !== undefined) {\n              codeCoverage.begin();\n            }\n            const result = await runTestcase(testcase);\n            const coverageData = codeCoverage !== undefined ? codeCoverage.end() : undefined;\n            let message = '';\n            if (result.logs !== undefined) {\n              message = result.logs.map(log => prettyPrintLog(log)).join('\\n');\n            }\n            const status = result.status;\n            const res: RunResult = { status, message, coverageData };\n            response.statusCode = 200;\n            response.end(JSON.stringify(res));\n          } else {\n            response.statusCode = 404;\n            response.end(`test case '${name}' not found`);\n          }\n        } catch (err) {\n          response.statusCode = 500;\n          response.end(`run failed with error: ${err}`);\n        }\n      } else if (request.url.startsWith(terminatePrefix)) {\n        server.close();\n        sys.exit(1);\n      } else {\n        response.statusCode = 404;\n        response.end('unhandled url request');\n      }\n    }\n  );\n\n  server.listen(0, () => {\n    const address = server.address() as AddressInfo;\n    console.log(`Server listening at [[${address.port}]]`);\n  });\n})().catch(ex => {\n  console.error(ex.stack ?? ex.toString());\n  sys.exit(1);\n});\n"],"mappings":"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"}