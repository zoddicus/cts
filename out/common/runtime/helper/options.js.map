{"version":3,"file":"options.js","names":["windowURL","undefined","getWindowURL","URL","window","location","toString","optionEnabled","opt","searchParams","val","get","optionString","kDefaultCTSOptions","worker","debug","compatibility","unrollConstEvalLoops","powerPreference","kCTSOptionsInfo","description","parser","selectValueDescriptions","value","camelCaseToSnakeCase","id","replace","toLowerCase","getOptionsInfoFromSearchString","optionsInfos","searchString","URLSearchParams","optionValues","optionName","info","Object","entries","convertPathToQuery","path","parts","substring","length","split","partsAfterSrc","slice","lastIndexOf","suite","shift","join","convertPathLikeToQuery","queryOrPath","endsWith","includes","parseSearchParamLikeWithOptions","query","startsWith","queries","getAll","map","options","parseSearchParamLikeWithCTSOptions"],"sources":["../../../../src/common/runtime/helper/options.ts"],"sourcesContent":["let windowURL: URL | undefined = undefined;\nfunction getWindowURL() {\n  if (windowURL === undefined) {\n    windowURL = new URL(window.location.toString());\n  }\n  return windowURL;\n}\n\nexport function optionEnabled(\n  opt: string,\n  searchParams: URLSearchParams = getWindowURL().searchParams\n): boolean {\n  const val = searchParams.get(opt);\n  return val !== null && val !== '0';\n}\n\nexport function optionString(\n  opt: string,\n  searchParams: URLSearchParams = getWindowURL().searchParams\n): string {\n  return searchParams.get(opt) || '';\n}\n\n/**\n * The possible options for the tests.\n */\nexport interface CTSOptions {\n  worker: boolean;\n  debug: boolean;\n  compatibility: boolean;\n  unrollConstEvalLoops: boolean;\n  powerPreference?: GPUPowerPreference | '';\n}\n\nexport const kDefaultCTSOptions: CTSOptions = {\n  worker: false,\n  debug: true,\n  compatibility: false,\n  unrollConstEvalLoops: false,\n  powerPreference: '',\n};\n\n/**\n * Extra per option info.\n */\nexport interface OptionInfo {\n  description: string;\n  parser?: (key: string, searchParams?: URLSearchParams) => boolean | string;\n  selectValueDescriptions?: { value: string; description: string }[];\n}\n\n/**\n * Type for info for every option. This definition means adding an option\n * will generate a compile time error if no extra info is provided.\n */\nexport type OptionsInfos<Type> = Record<keyof Type, OptionInfo>;\n\n/**\n * Options to the CTS.\n */\nexport const kCTSOptionsInfo: OptionsInfos<CTSOptions> = {\n  worker: { description: 'run in a worker' },\n  debug: { description: 'show more info' },\n  compatibility: { description: 'run in compatibility mode' },\n  unrollConstEvalLoops: { description: 'unroll const eval loops in WGSL' },\n  powerPreference: {\n    description: 'set default powerPreference for some tests',\n    parser: optionString,\n    selectValueDescriptions: [\n      { value: '', description: 'default' },\n      { value: 'low-power', description: 'low-power' },\n      { value: 'high-performance', description: 'high-performance' },\n    ],\n  },\n};\n\n/**\n * Converts camel case to snake case.\n * Examples:\n *    fooBar -> foo_bar\n *    parseHTMLFile -> parse_html_file\n */\nexport function camelCaseToSnakeCase(id: string) {\n  return id\n    .replace(/(.)([A-Z][a-z]+)/g, '$1_$2')\n    .replace(/([a-z0-9])([A-Z])/g, '$1_$2')\n    .toLowerCase();\n}\n\n/**\n * Creates a Options from search parameters.\n */\nfunction getOptionsInfoFromSearchString<Type extends CTSOptions>(\n  optionsInfos: OptionsInfos<Type>,\n  searchString: string\n): Type {\n  const searchParams = new URLSearchParams(searchString);\n  const optionValues: Record<string, boolean | string> = {};\n  for (const [optionName, info] of Object.entries(optionsInfos)) {\n    const parser = info.parser || optionEnabled;\n    optionValues[optionName] = parser(camelCaseToSnakeCase(optionName), searchParams);\n  }\n  return optionValues as unknown as Type;\n}\n\n/**\n * converts foo/bar/src/webgpu/this/that/file.spec.ts to webgpu:this,that,file,*\n */\nfunction convertPathToQuery(path: string) {\n  // removes .spec.ts and splits by directory separators.\n  const parts = path.substring(0, path.length - 8).split(/\\/|\\\\/g);\n  // Gets parts only after the last `src`. Example: returns ['webgpu', 'foo', 'bar', 'test']\n  // for ['Users', 'me', 'src', 'cts', 'src', 'webgpu', 'foo', 'bar', 'test']\n  const partsAfterSrc = parts.slice(parts.lastIndexOf('src') + 1);\n  const suite = partsAfterSrc.shift();\n  return `${suite}:${partsAfterSrc.join(',')},*`;\n}\n\n/**\n * If a query looks like a path (ends in .spec.ts and has directory separators)\n * then convert try to convert it to a query.\n */\nfunction convertPathLikeToQuery(queryOrPath: string) {\n  return queryOrPath.endsWith('.spec.ts') &&\n    (queryOrPath.includes('/') || queryOrPath.includes('\\\\'))\n    ? convertPathToQuery(queryOrPath)\n    : queryOrPath;\n}\n\n/**\n * Given a test query string in the form of `suite:foo,bar,moo&opt1=val1&opt2=val2\n * returns the query and the options.\n */\nexport function parseSearchParamLikeWithOptions<Type extends CTSOptions>(\n  optionsInfos: OptionsInfos<Type>,\n  query: string\n): {\n  queries: string[];\n  options: Type;\n} {\n  const searchString = query.includes('q=') || query.startsWith('?') ? query : `q=${query}`;\n  const queries = new URLSearchParams(searchString).getAll('q').map(convertPathLikeToQuery);\n  const options = getOptionsInfoFromSearchString(optionsInfos, searchString);\n  return { queries, options };\n}\n\n/**\n * Given a test query string in the form of `suite:foo,bar,moo&opt1=val1&opt2=val2\n * returns the query and the common options.\n */\nexport function parseSearchParamLikeWithCTSOptions(query: string) {\n  return parseSearchParamLikeWithOptions(kCTSOptionsInfo, query);\n}\n"],"mappings":"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"}