{"version":3,"file":"test_worker.js","names":["LogMessageWithStack","getDefaultRequestAdapterOptions","TestWorker","resolvers","Map","constructor","debug","selfPath","import","meta","url","selfPathDir","substring","lastIndexOf","workerPath","worker","Worker","type","onmessage","ev","query","data","result","logs","l","Object","setPrototypeOf","prototype","get","run","rec","expectations","postMessage","defaultRequestAdapterOptions","workerResult","Promise","resolve","set","injectResult"],"sources":["../../../../src/common/runtime/helper/test_worker.ts"],"sourcesContent":["import { LogMessageWithStack } from '../../internal/logging/log_message.js';\nimport { TransferredTestCaseResult, LiveTestCaseResult } from '../../internal/logging/result.js';\nimport { TestCaseRecorder } from '../../internal/logging/test_case_recorder.js';\nimport { TestQueryWithExpectation } from '../../internal/query/query.js';\nimport { getDefaultRequestAdapterOptions } from '../../util/navigator_gpu.js';\n\nexport class TestWorker {\n  private readonly debug: boolean;\n  private readonly worker: Worker;\n  private readonly resolvers = new Map<string, (result: LiveTestCaseResult) => void>();\n\n  constructor(debug: boolean) {\n    this.debug = debug;\n\n    const selfPath = import.meta.url;\n    const selfPathDir = selfPath.substring(0, selfPath.lastIndexOf('/'));\n    const workerPath = selfPathDir + '/test_worker-worker.js';\n    this.worker = new Worker(workerPath, { type: 'module' });\n    this.worker.onmessage = ev => {\n      const query: string = ev.data.query;\n      const result: TransferredTestCaseResult = ev.data.result;\n      if (result.logs) {\n        for (const l of result.logs) {\n          Object.setPrototypeOf(l, LogMessageWithStack.prototype);\n        }\n      }\n      this.resolvers.get(query)!(result as LiveTestCaseResult);\n\n      // MAINTENANCE_TODO(kainino0x): update the Logger with this result (or don't have a logger and\n      // update the entire results JSON somehow at some point).\n    };\n  }\n\n  async run(\n    rec: TestCaseRecorder,\n    query: string,\n    expectations: TestQueryWithExpectation[] = []\n  ): Promise<void> {\n    this.worker.postMessage({\n      query,\n      expectations,\n      debug: this.debug,\n      defaultRequestAdapterOptions: getDefaultRequestAdapterOptions(),\n    });\n    const workerResult = await new Promise<LiveTestCaseResult>(resolve => {\n      this.resolvers.set(query, resolve);\n    });\n    rec.injectResult(workerResult);\n  }\n}\n"],"mappings":";AAAA;AAAA,GAAA,SAASA,mBAAmB,QAAQ,uCAAuC;;AAI3E,SAASC,+BAA+B,QAAQ,6BAA6B;;AAE7E,OAAO,MAAMC,UAAU,CAAC;;;EAGLC,SAAS,GAAG,IAAIC,GAAG,EAAgD;;EAEpFC,WAAW,CAACC,KAAc,EAAE;IAC1B,IAAI,CAACA,KAAK,GAAGA,KAAK;;IAElB,MAAMC,QAAQ,GAAGC,MAAM,CAACC,IAAI,CAACC,GAAG;IAChC,MAAMC,WAAW,GAAGJ,QAAQ,CAACK,SAAS,CAAC,CAAC,EAAEL,QAAQ,CAACM,WAAW,CAAC,GAAG,CAAC,CAAC;IACpE,MAAMC,UAAU,GAAGH,WAAW,GAAG,wBAAwB;IACzD,IAAI,CAACI,MAAM,GAAG,IAAIC,MAAM,CAACF,UAAU,EAAE,EAAEG,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;IACxD,IAAI,CAACF,MAAM,CAACG,SAAS,GAAG,CAAAC,EAAE,KAAI;MAC5B,MAAMC,KAAa,GAAGD,EAAE,CAACE,IAAI,CAACD,KAAK;MACnC,MAAME,MAAiC,GAAGH,EAAE,CAACE,IAAI,CAACC,MAAM;MACxD,IAAIA,MAAM,CAACC,IAAI,EAAE;QACf,KAAK,MAAMC,CAAC,IAAIF,MAAM,CAACC,IAAI,EAAE;UAC3BE,MAAM,CAACC,cAAc,CAACF,CAAC,EAAExB,mBAAmB,CAAC2B,SAAS,CAAC;QACzD;MACF;MACA,IAAI,CAACxB,SAAS,CAACyB,GAAG,CAACR,KAAK,CAAC,CAAEE,MAAM,CAAuB;;MAExD;MACA;IACF,CAAC;EACH;;EAEA,MAAMO,GAAG;EACPC,GAAqB;EACrBV,KAAa;EACbW,YAAwC,GAAG,EAAE;EAC9B;IACf,IAAI,CAAChB,MAAM,CAACiB,WAAW,CAAC;MACtBZ,KAAK;MACLW,YAAY;MACZzB,KAAK,EAAE,IAAI,CAACA,KAAK;MACjB2B,4BAA4B,EAAEhC,+BAA+B;IAC/D,CAAC,CAAC;IACF,MAAMiC,YAAY,GAAG,MAAM,IAAIC,OAAO,CAAqB,CAAAC,OAAO,KAAI;MACpE,IAAI,CAACjC,SAAS,CAACkC,GAAG,CAACjB,KAAK,EAAEgB,OAAO,CAAC;IACpC,CAAC,CAAC;IACFN,GAAG,CAACQ,YAAY,CAACJ,YAAY,CAAC;EAChC;AACF"}