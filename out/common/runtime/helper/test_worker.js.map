{"version":3,"file":"test_worker.js","names":["LogMessageWithStack","timeout","assert","kDefaultCTSOptions","unregisterAllServiceWorkers","navigator","serviceWorker","getRegistrations","then","registrations","registration","unregister","window","addEventListener","TestBaseWorker","resolvers","Map","constructor","worker","ctsOptions","onmessage","ev","query","data","transferredResult","result","status","timems","logs","map","l","get","delete","makeRequestAndRecordResult","target","expectations","request","postMessage","Promise","resolve","has","set","run","rec","injectResult","runImpl","ex","start","threw","finish","TestDedicatedWorker","Worker","Error","selfPath","import","meta","url","selfPathDir","substring","lastIndexOf","workerPath","type","TestWorker","TestSharedWorker","SharedWorker","port","MessagePort","TestServiceWorker","suite","name","split","fileName","join","serviceWorkerURL","URL","toString","register","active","scriptURL"],"sources":["../../../../src/common/runtime/helper/test_worker.ts"],"sourcesContent":["import { LogMessageWithStack } from '../../internal/logging/log_message.js';\nimport { TransferredTestCaseResult, LiveTestCaseResult } from '../../internal/logging/result.js';\nimport { TestCaseRecorder } from '../../internal/logging/test_case_recorder.js';\nimport { TestQueryWithExpectation } from '../../internal/query/query.js';\nimport { timeout } from '../../util/timeout.js';\nimport { assert } from '../../util/util.js';\n\nimport { CTSOptions, WorkerMode, kDefaultCTSOptions } from './options.js';\nimport { WorkerTestRunRequest } from './utils_worker.js';\n\n/** Query all currently-registered service workers, and unregister them. */\nfunction unregisterAllServiceWorkers() {\n  void navigator.serviceWorker.getRegistrations().then(registrations => {\n    for (const registration of registrations) {\n      void registration.unregister();\n    }\n  });\n}\n\n// Firefox has serviceWorkers disabled in private mode\n// and Servo does not support serviceWorkers yet.\nif ('serviceWorker' in navigator) {\n  // NOTE: This code runs on startup for any runtime with worker support. Here, we use that chance to\n  // delete any leaked service workers, and register to clean up after ourselves at shutdown.\n  unregisterAllServiceWorkers();\n  window.addEventListener('beforeunload', () => {\n    unregisterAllServiceWorkers();\n  });\n}\n\nabstract class TestBaseWorker {\n  protected readonly ctsOptions: CTSOptions;\n  protected readonly resolvers = new Map<string, (result: LiveTestCaseResult) => void>();\n\n  constructor(worker: WorkerMode, ctsOptions?: CTSOptions) {\n    this.ctsOptions = { ...(ctsOptions || kDefaultCTSOptions), ...{ worker } };\n  }\n\n  onmessage(ev: MessageEvent) {\n    const query: string = ev.data.query;\n    const transferredResult: TransferredTestCaseResult = ev.data.result;\n\n    const result: LiveTestCaseResult = {\n      status: transferredResult.status,\n      timems: transferredResult.timems,\n      logs: transferredResult.logs?.map(l => new LogMessageWithStack(l)),\n    };\n\n    this.resolvers.get(query)!(result);\n    this.resolvers.delete(query);\n\n    // MAINTENANCE_TODO(kainino0x): update the Logger with this result (or don't have a logger and\n    // update the entire results JSON somehow at some point).\n  }\n\n  makeRequestAndRecordResult(\n    target: MessagePort | Worker | ServiceWorker,\n    query: string,\n    expectations: TestQueryWithExpectation[]\n  ): Promise<LiveTestCaseResult> {\n    const request: WorkerTestRunRequest = {\n      query,\n      expectations,\n      ctsOptions: this.ctsOptions,\n    };\n    target.postMessage(request);\n\n    return new Promise<LiveTestCaseResult>(resolve => {\n      assert(!this.resolvers.has(query), \"can't request same query twice simultaneously\");\n      this.resolvers.set(query, resolve);\n    });\n  }\n\n  async run(\n    rec: TestCaseRecorder,\n    query: string,\n    expectations: TestQueryWithExpectation[] = []\n  ): Promise<void> {\n    try {\n      rec.injectResult(await this.runImpl(query, expectations));\n    } catch (ex) {\n      rec.start();\n      rec.threw(ex);\n      rec.finish();\n    }\n  }\n\n  protected abstract runImpl(\n    query: string,\n    expectations: TestQueryWithExpectation[]\n  ): Promise<LiveTestCaseResult>;\n}\n\nexport class TestDedicatedWorker extends TestBaseWorker {\n  private readonly worker: Worker | Error;\n\n  constructor(ctsOptions?: CTSOptions) {\n    super('dedicated', ctsOptions);\n    try {\n      if (typeof Worker === 'undefined') {\n        throw new Error('Dedicated Workers not available');\n      }\n\n      const selfPath = import.meta.url;\n      const selfPathDir = selfPath.substring(0, selfPath.lastIndexOf('/'));\n      const workerPath = selfPathDir + '/test_worker-worker.js';\n      this.worker = new Worker(workerPath, { type: 'module' });\n      this.worker.onmessage = ev => this.onmessage(ev);\n    } catch (ex) {\n      assert(ex instanceof Error);\n      // Save the exception to re-throw in runImpl().\n      this.worker = ex;\n    }\n  }\n\n  override runImpl(query: string, expectations: TestQueryWithExpectation[] = []) {\n    if (this.worker instanceof Worker) {\n      return this.makeRequestAndRecordResult(this.worker, query, expectations);\n    } else {\n      throw this.worker;\n    }\n  }\n}\n\n/** @deprecated Use TestDedicatedWorker instead. */\nexport class TestWorker extends TestDedicatedWorker {}\n\nexport class TestSharedWorker extends TestBaseWorker {\n  /** MessagePort to the SharedWorker, or an Error if it couldn't be initialized. */\n  private readonly port: MessagePort | Error;\n\n  constructor(ctsOptions?: CTSOptions) {\n    super('shared', ctsOptions);\n    try {\n      if (typeof SharedWorker === 'undefined') {\n        throw new Error('Shared Workers not available');\n      }\n\n      const selfPath = import.meta.url;\n      const selfPathDir = selfPath.substring(0, selfPath.lastIndexOf('/'));\n      const workerPath = selfPathDir + '/test_worker-worker.js';\n      const worker = new SharedWorker(workerPath, { type: 'module' });\n      this.port = worker.port;\n      this.port.start();\n      this.port.onmessage = ev => this.onmessage(ev);\n    } catch (ex) {\n      assert(ex instanceof Error);\n      // Save the exception to re-throw in runImpl().\n      this.port = ex;\n    }\n  }\n\n  override runImpl(query: string, expectations: TestQueryWithExpectation[] = []) {\n    if (this.port instanceof MessagePort) {\n      return this.makeRequestAndRecordResult(this.port, query, expectations);\n    } else {\n      throw this.port;\n    }\n  }\n}\n\nexport class TestServiceWorker extends TestBaseWorker {\n  constructor(ctsOptions?: CTSOptions) {\n    super('service', ctsOptions);\n  }\n\n  override async runImpl(query: string, expectations: TestQueryWithExpectation[] = []) {\n    if (!('serviceWorker' in navigator)) {\n      throw new Error('Service Workers not available');\n    }\n    const [suite, name] = query.split(':', 2);\n    const fileName = name.split(',').join('/');\n\n    const selfPath = import.meta.url;\n    const selfPathDir = selfPath.substring(0, selfPath.lastIndexOf('/'));\n    // Construct the path to the worker file, then use URL to resolve the `../` components.\n    const serviceWorkerURL = new URL(\n      `${selfPathDir}/../../../${suite}/webworker/${fileName}.as_worker.js`\n    ).toString();\n\n    // If a registration already exists for this path, it will be ignored.\n    const registration = await navigator.serviceWorker.register(serviceWorkerURL, {\n      type: 'module',\n    });\n    // Make sure the registration we just requested is active. (We don't worry about it being\n    // outdated from a previous page load, because we wipe all service workers on shutdown/startup.)\n    while (!registration.active || registration.active.scriptURL !== serviceWorkerURL) {\n      await new Promise(resolve => timeout(resolve, 0));\n    }\n    const serviceWorker = registration.active;\n\n    navigator.serviceWorker.onmessage = ev => this.onmessage(ev);\n    return this.makeRequestAndRecordResult(serviceWorker, query, expectations);\n  }\n}\n"],"mappings":"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"}