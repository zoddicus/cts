{"version":3,"file":"test_worker.js","names":["LogMessageWithStack","timeout","assert","kDefaultCTSOptions","unregisterAllServiceWorkers","navigator","serviceWorker","getRegistrations","then","registrations","registration","unregister","window","addEventListener","TestBaseWorker","resolvers","Map","constructor","worker","ctsOptions","onmessage","ev","query","data","result","logs","l","Object","setPrototypeOf","prototype","get","delete","makeRequestAndRecordResult","target","rec","expectations","request","postMessage","workerResult","Promise","resolve","has","set","injectResult","TestDedicatedWorker","selfPath","import","meta","url","selfPathDir","substring","lastIndexOf","workerPath","Worker","type","run","TestWorker","TestSharedWorker","SharedWorker","port","start","TestServiceWorker","suite","name","split","fileName","join","serviceWorkerURL","URL","location","href","toString","register","active","scriptURL"],"sources":["../../../../src/common/runtime/helper/test_worker.ts"],"sourcesContent":["import { LogMessageWithStack } from '../../internal/logging/log_message.js';\nimport { TransferredTestCaseResult, LiveTestCaseResult } from '../../internal/logging/result.js';\nimport { TestCaseRecorder } from '../../internal/logging/test_case_recorder.js';\nimport { TestQueryWithExpectation } from '../../internal/query/query.js';\nimport { timeout } from '../../util/timeout.js';\nimport { assert } from '../../util/util.js';\n\nimport { CTSOptions, kDefaultCTSOptions } from './options.js';\nimport { WorkerTestRunRequest } from './utils_worker.js';\n\n/** Query all currently-registered service workers, and unregister them. */\nfunction unregisterAllServiceWorkers() {\n  void navigator.serviceWorker.getRegistrations().then(registrations => {\n    for (const registration of registrations) {\n      void registration.unregister();\n    }\n  });\n}\n\n// NOTE: This code runs on startup for any runtime with worker support. Here, we use that chance to\n// delete any leaked service workers, and register to clean up after ourselves at shutdown.\nunregisterAllServiceWorkers();\nwindow.addEventListener('beforeunload', () => {\n  unregisterAllServiceWorkers();\n});\n\nclass TestBaseWorker {\n  protected readonly ctsOptions: CTSOptions;\n  protected readonly resolvers = new Map<string, (result: LiveTestCaseResult) => void>();\n\n  constructor(worker: CTSOptions['worker'], ctsOptions?: CTSOptions) {\n    this.ctsOptions = { ...(ctsOptions || kDefaultCTSOptions), ...{ worker } };\n  }\n\n  onmessage(ev: MessageEvent) {\n    const query: string = ev.data.query;\n    const result: TransferredTestCaseResult = ev.data.result;\n    if (result.logs) {\n      for (const l of result.logs) {\n        Object.setPrototypeOf(l, LogMessageWithStack.prototype);\n      }\n    }\n    this.resolvers.get(query)!(result as LiveTestCaseResult);\n    this.resolvers.delete(query);\n\n    // MAINTENANCE_TODO(kainino0x): update the Logger with this result (or don't have a logger and\n    // update the entire results JSON somehow at some point).\n  }\n\n  async makeRequestAndRecordResult(\n    target: MessagePort | Worker | ServiceWorker,\n    rec: TestCaseRecorder,\n    query: string,\n    expectations: TestQueryWithExpectation[]\n  ) {\n    const request: WorkerTestRunRequest = {\n      query,\n      expectations,\n      ctsOptions: this.ctsOptions,\n    };\n    target.postMessage(request);\n\n    const workerResult = await new Promise<LiveTestCaseResult>(resolve => {\n      assert(!this.resolvers.has(query), \"can't request same query twice simultaneously\");\n      this.resolvers.set(query, resolve);\n    });\n    rec.injectResult(workerResult);\n  }\n}\n\nexport class TestDedicatedWorker extends TestBaseWorker {\n  private readonly worker: Worker;\n\n  constructor(ctsOptions?: CTSOptions) {\n    super('dedicated', ctsOptions);\n    const selfPath = import.meta.url;\n    const selfPathDir = selfPath.substring(0, selfPath.lastIndexOf('/'));\n    const workerPath = selfPathDir + '/test_worker-worker.js';\n    this.worker = new Worker(workerPath, { type: 'module' });\n    this.worker.onmessage = ev => this.onmessage(ev);\n  }\n\n  async run(\n    rec: TestCaseRecorder,\n    query: string,\n    expectations: TestQueryWithExpectation[] = []\n  ): Promise<void> {\n    await this.makeRequestAndRecordResult(this.worker, rec, query, expectations);\n  }\n}\n\nexport class TestWorker extends TestDedicatedWorker {}\n\nexport class TestSharedWorker extends TestBaseWorker {\n  private readonly port: MessagePort;\n\n  constructor(ctsOptions?: CTSOptions) {\n    super('shared', ctsOptions);\n    const selfPath = import.meta.url;\n    const selfPathDir = selfPath.substring(0, selfPath.lastIndexOf('/'));\n    const workerPath = selfPathDir + '/test_worker-worker.js';\n    const worker = new SharedWorker(workerPath, { type: 'module' });\n    this.port = worker.port;\n    this.port.start();\n    this.port.onmessage = ev => this.onmessage(ev);\n  }\n\n  async run(\n    rec: TestCaseRecorder,\n    query: string,\n    expectations: TestQueryWithExpectation[] = []\n  ): Promise<void> {\n    await this.makeRequestAndRecordResult(this.port, rec, query, expectations);\n  }\n}\n\nexport class TestServiceWorker extends TestBaseWorker {\n  constructor(ctsOptions?: CTSOptions) {\n    super('service', ctsOptions);\n  }\n\n  async run(\n    rec: TestCaseRecorder,\n    query: string,\n    expectations: TestQueryWithExpectation[] = []\n  ): Promise<void> {\n    const [suite, name] = query.split(':', 2);\n    const fileName = name.split(',').join('/');\n    const serviceWorkerURL = new URL(\n      `/out/${suite}/webworker/${fileName}.worker.js`,\n      window.location.href\n    ).toString();\n\n    // If a registration already exists for this path, it will be ignored.\n    const registration = await navigator.serviceWorker.register(serviceWorkerURL, {\n      type: 'module',\n    });\n    // Make sure the registration we just requested is active. (We don't worry about it being\n    // outdated from a previous page load, because we wipe all service workers on shutdown/startup.)\n    while (!registration.active || registration.active.scriptURL !== serviceWorkerURL) {\n      await new Promise(resolve => timeout(resolve, 0));\n    }\n    const serviceWorker = registration.active;\n\n    navigator.serviceWorker.onmessage = ev => this.onmessage(ev);\n    await this.makeRequestAndRecordResult(serviceWorker, rec, query, expectations);\n  }\n}\n"],"mappings":"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"}