{"version":3,"file":"data_cache.js","names":["assert","DataCacheNode","constructor","path","data","insertAfter","prev","unlink","next","DataCache","lruHeadNode","lruTailNode","setStore","dataStore","setDebugLogger","logger","debugLogger","fetch","cacheable","node","cache","get","undefined","log","Promise","resolve","unavailableFiles","has","serialized","load","err","add","deserialize","addToCache","build","size","maxCount","toEvict","delete","set","msg","Map","Set","dataCache","isBuildingDataCache","getIsBuildingDataCache","setIsBuildingDataCache","value"],"sources":["../../../src/common/framework/data_cache.ts"],"sourcesContent":["/**\n * Utilities to improve the performance of the CTS, by caching data that is\n * expensive to build using a two-level cache (in-memory, pre-computed file).\n */\n\nimport { assert } from '../util/util.js';\n\ninterface DataStore {\n  load(path: string): Promise<Uint8Array>;\n}\n\n/** Logger is a basic debug logger function */\nexport type Logger = (s: string) => void;\n\n/**\n * DataCacheNode represents a single cache entry in the LRU DataCache.\n * DataCacheNode is a doubly linked list, so that least-recently-used entries can be removed, and\n * cache hits can move the node to the front of the list.\n */\nclass DataCacheNode {\n  public constructor(path: string, data: unknown) {\n    this.path = path;\n    this.data = data;\n  }\n\n  /** insertAfter() re-inserts this node in the doubly-linked list after `prev` */\n  public insertAfter(prev: DataCacheNode) {\n    this.unlink();\n    this.next = prev.next;\n    this.prev = prev;\n    prev.next = this;\n    if (this.next) {\n      this.next.prev = this;\n    }\n  }\n\n  /** unlink() removes this node from the doubly-linked list */\n  public unlink() {\n    const prev = this.prev;\n    const next = this.next;\n    if (prev) {\n      prev.next = next;\n    }\n    if (next) {\n      next.prev = prev;\n    }\n    this.prev = null;\n    this.next = null;\n  }\n\n  public readonly path: string; // The file path this node represents\n  public readonly data: unknown; // The deserialized data for this node\n  public prev: DataCacheNode | null = null; // The previous node in the doubly-linked list\n  public next: DataCacheNode | null = null; // The next node in the doubly-linked list\n}\n\n/** DataCache is an interface to a LRU-cached data store used to hold data cached by path */\nexport class DataCache {\n  public constructor() {\n    this.lruHeadNode.next = this.lruTailNode;\n    this.lruTailNode.prev = this.lruHeadNode;\n  }\n\n  /** setDataStore() sets the backing data store used by the data cache */\n  public setStore(dataStore: DataStore) {\n    this.dataStore = dataStore;\n  }\n\n  /** setDebugLogger() sets the verbose logger */\n  public setDebugLogger(logger: Logger) {\n    this.debugLogger = logger;\n  }\n\n  /**\n   * fetch() retrieves cacheable data from the data cache, first checking the\n   * in-memory cache, then the data store (if specified), then resorting to\n   * building the data and storing it in the cache.\n   */\n  public async fetch<Data>(cacheable: Cacheable<Data>): Promise<Data> {\n    {\n      // First check the in-memory cache\n      const node = this.cache.get(cacheable.path);\n      if (node !== undefined) {\n        this.log('in-memory cache hit');\n        node.insertAfter(this.lruHeadNode);\n        return Promise.resolve(node.data as Data);\n      }\n    }\n    this.log('in-memory cache miss');\n    // In in-memory cache miss.\n    // Next, try the data store.\n    if (this.dataStore !== null && !this.unavailableFiles.has(cacheable.path)) {\n      let serialized: Uint8Array | undefined;\n      try {\n        serialized = await this.dataStore.load(cacheable.path);\n        this.log('loaded serialized');\n      } catch (err) {\n        // not found in data store\n        this.log(`failed to load (${cacheable.path}): ${err}`);\n        this.unavailableFiles.add(cacheable.path);\n      }\n      if (serialized !== undefined) {\n        this.log(`deserializing`);\n        const data = cacheable.deserialize(serialized);\n        this.addToCache(cacheable.path, data);\n        return data;\n      }\n    }\n    // Not found anywhere. Build the data, and cache for future lookup.\n    this.log(`cache: building (${cacheable.path})`);\n    const data = await cacheable.build();\n    this.addToCache(cacheable.path, data);\n    return data;\n  }\n\n  /**\n   * addToCache() creates a new node for `path` and `data`, inserting the new node at the front of\n   * the doubly-linked list. If the number of entries in the cache exceeds this.maxCount, then the\n   * least recently used entry is evicted\n   * @param path the file path for the data\n   * @param data the deserialized data\n   */\n  private addToCache(path: string, data: unknown) {\n    if (this.cache.size >= this.maxCount) {\n      const toEvict = this.lruTailNode.prev;\n      assert(toEvict !== null);\n      toEvict.unlink();\n      this.cache.delete(toEvict.path);\n      this.log(`evicting ${toEvict.path}`);\n    }\n    const node = new DataCacheNode(path, data);\n    node.insertAfter(this.lruHeadNode);\n    this.cache.set(path, node);\n    this.log(`added ${path}. new count: ${this.cache.size}`);\n  }\n\n  private log(msg: string) {\n    if (this.debugLogger !== null) {\n      this.debugLogger(`DataCache: ${msg}`);\n    }\n  }\n\n  // Max number of entries in the cache before LRU entries are evicted.\n  private readonly maxCount = 4;\n\n  private cache = new Map<string, DataCacheNode>();\n  private lruHeadNode = new DataCacheNode('', null); // placeholder node (no path or data)\n  private lruTailNode = new DataCacheNode('', null); // placeholder node (no path or data)\n  private unavailableFiles = new Set<string>();\n  private dataStore: DataStore | null = null;\n  private debugLogger: Logger | null = null;\n}\n\n/** The data cache */\nexport const dataCache = new DataCache();\n\n/** true if the current process is building the cache */\nlet isBuildingDataCache = false;\n\n/** @returns true if the data cache is currently being built */\nexport function getIsBuildingDataCache() {\n  return isBuildingDataCache;\n}\n\n/** Sets whether the data cache is currently being built */\nexport function setIsBuildingDataCache(value = true) {\n  isBuildingDataCache = value;\n}\n\n/**\n * Cacheable is the interface to something that can be stored into the\n * DataCache.\n * The 'npm run gen_cache' tool will look for module-scope variables of this\n * interface, with the name `d`.\n */\nexport interface Cacheable<Data> {\n  /** the globally unique path for the cacheable data */\n  readonly path: string;\n\n  /**\n   * build() builds the cacheable data.\n   * This is assumed to be an expensive operation and will only happen if the\n   * cache does not already contain the built data.\n   */\n  build(): Promise<Data>;\n\n  /**\n   * serialize() encodes `data` to a binary representation so that it can be stored in a cache file.\n   */\n  serialize(data: Data): Uint8Array;\n\n  /**\n   * deserialize() is the inverse of serialize(), decoding the binary representation back to a Data\n   * object.\n   */\n  deserialize(binary: Uint8Array): Data;\n}\n"],"mappings":"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"}