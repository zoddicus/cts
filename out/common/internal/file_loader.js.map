{"version":3,"file":"file_loader.js","names":["assert","parseQuery","loadTreeForQuery","TestFileLoader","EventTarget","importSpecFile","suite","path","url","join","dispatchEvent","MessageEvent","data","ret","import","loadTree","query","subqueriesToExpand","maxChunkTime","Infinity","tree","map","s","q","level","loadCases","iterateLeaves","DefaultTestFileLoader","listing"],"sources":["../../../src/common/internal/file_loader.ts"],"sourcesContent":["import { IterableTestGroup } from '../internal/test_group.js';\nimport { assert } from '../util/util.js';\n\nimport { parseQuery } from './query/parseQuery.js';\nimport { TestQuery } from './query/query.js';\nimport { TestSuiteListing } from './test_suite_listing.js';\nimport { loadTreeForQuery, TestTree, TestTreeLeaf } from './tree.js';\n\n// A listing file, e.g. either of:\n// - `src/webgpu/listing.ts` (which is dynamically computed, has a Promise<TestSuiteListing>)\n// - `out/webgpu/listing.js` (which is pre-baked, has a TestSuiteListing)\ninterface ListingFile {\n  listing: Promise<TestSuiteListing> | TestSuiteListing;\n}\n\n// A .spec.ts file, as imported.\nexport interface SpecFile {\n  readonly description: string;\n  readonly g: IterableTestGroup;\n}\n\nexport interface ImportInfo {\n  url: string;\n}\n\ninterface TestFileLoaderEventMap {\n  import: MessageEvent<ImportInfo>;\n  imported: MessageEvent<ImportInfo>;\n  finish: MessageEvent<void>;\n}\n\n// Override the types for addEventListener/removeEventListener so the callbacks can be used as\n// strongly-typed.\n/* eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging */\nexport interface TestFileLoader extends EventTarget {\n  addEventListener<K extends keyof TestFileLoaderEventMap>(\n    type: K,\n    listener: (this: TestFileLoader, ev: TestFileLoaderEventMap[K]) => void,\n    options?: boolean | AddEventListenerOptions\n  ): void;\n  addEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions\n  ): void;\n  removeEventListener<K extends keyof TestFileLoaderEventMap>(\n    type: K,\n    listener: (this: TestFileLoader, ev: TestFileLoaderEventMap[K]) => void,\n    options?: boolean | EventListenerOptions\n  ): void;\n  removeEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | EventListenerOptions\n  ): void;\n}\n\n// Base class for DefaultTestFileLoader and FakeTestFileLoader.\n/* eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging */\nexport abstract class TestFileLoader extends EventTarget {\n  abstract listing(suite: string): Promise<TestSuiteListing>;\n  protected abstract import(path: string): Promise<SpecFile>;\n\n  async importSpecFile(suite: string, path: string[]): Promise<SpecFile> {\n    const url = `${suite}/${path.join('/')}.spec.js`;\n    this.dispatchEvent(new MessageEvent<ImportInfo>('import', { data: { url } }));\n    const ret = await this.import(url);\n    this.dispatchEvent(new MessageEvent<ImportInfo>('imported', { data: { url } }));\n    return ret;\n  }\n\n  async loadTree(\n    query: TestQuery,\n    {\n      subqueriesToExpand = [],\n      maxChunkTime = Infinity,\n    }: { subqueriesToExpand?: string[]; maxChunkTime?: number } = {}\n  ): Promise<TestTree> {\n    const tree = await loadTreeForQuery(this, query, {\n      subqueriesToExpand: subqueriesToExpand.map(s => {\n        const q = parseQuery(s);\n        assert(q.level >= 2, () => `subqueriesToExpand entries should not be multi-file:\\n  ${q}`);\n        return q;\n      }),\n      maxChunkTime,\n    });\n    this.dispatchEvent(new MessageEvent<void>('finish'));\n    return tree;\n  }\n\n  async loadCases(query: TestQuery): Promise<IterableIterator<TestTreeLeaf>> {\n    const tree = await this.loadTree(query);\n    return tree.iterateLeaves();\n  }\n}\n\nexport class DefaultTestFileLoader extends TestFileLoader {\n  async listing(suite: string): Promise<TestSuiteListing> {\n    return ((await import(`../../${suite}/listing.js`)) as ListingFile).listing;\n  }\n\n  import(path: string): Promise<SpecFile> {\n    return import(`../../${path}`);\n  }\n}\n"],"mappings":";;GACA,SAASA,MAAM,QAAQ,iBAAiB;AAExC,SAASC,UAAU,QAAQ,uBAAuB;;;AAGlD,SAASC,gBAAgB,QAAgC,WAAW;;AAEpE;AACA;AACA;;;;;AAKA;;;;;;;;;;;;;;;;AAgBA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;AAEA,OAAO,MAAeC,cAAc,SAASC,WAAW,CAAC;;;;EAIvD,MAAMC,cAAcA,CAACC,KAAa,EAAEC,IAAc,EAAqB;IACrE,MAAMC,GAAG,GAAI,GAAEF,KAAM,IAAGC,IAAI,CAACE,IAAI,CAAC,GAAG,CAAE,UAAS;IAChD,IAAI,CAACC,aAAa,CAAC,IAAIC,YAAY,CAAa,QAAQ,EAAE,EAAEC,IAAI,EAAE,EAAEJ,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7E,MAAMK,GAAG,GAAG,MAAM,IAAI,CAACC,MAAM,CAACN,GAAG,CAAC;IAClC,IAAI,CAACE,aAAa,CAAC,IAAIC,YAAY,CAAa,UAAU,EAAE,EAAEC,IAAI,EAAE,EAAEJ,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/E,OAAOK,GAAG;EACZ;;EAEA,MAAME,QAAQA;EACZC,KAAgB;EAChB;IACEC,kBAAkB,GAAG,EAAE;IACvBC,YAAY,GAAGC;EACyC,CAAC,GAAG,CAAC,CAAC;EAC7C;IACnB,MAAMC,IAAI,GAAG,MAAMlB,gBAAgB,CAAC,IAAI,EAAEc,KAAK,EAAE;MAC/CC,kBAAkB,EAAEA,kBAAkB,CAACI,GAAG,CAAC,CAAAC,CAAC,KAAI;QAC9C,MAAMC,CAAC,GAAGtB,UAAU,CAACqB,CAAC,CAAC;QACvBtB,MAAM,CAACuB,CAAC,CAACC,KAAK,IAAI,CAAC,EAAE,MAAO,2DAA0DD,CAAE,EAAC,CAAC;QAC1F,OAAOA,CAAC;MACV,CAAC,CAAC;MACFL;IACF,CAAC,CAAC;IACF,IAAI,CAACR,aAAa,CAAC,IAAIC,YAAY,CAAO,QAAQ,CAAC,CAAC;IACpD,OAAOS,IAAI;EACb;;EAEA,MAAMK,SAASA,CAACT,KAAgB,EAA2C;IACzE,MAAMI,IAAI,GAAG,MAAM,IAAI,CAACL,QAAQ,CAACC,KAAK,CAAC;IACvC,OAAOI,IAAI,CAACM,aAAa,CAAC,CAAC;EAC7B;AACF;;AAEA,OAAO,MAAMC,qBAAqB,SAASxB,cAAc,CAAC;EACxD,MAAMyB,OAAOA,CAACtB,KAAa,EAA6B;IACtD,OAAO,CAAE,MAAM,MAAM,CAAE,SAAQA,KAAM,aAAY,CAAC,EAAkBsB,OAAO;EAC7E;;EAEAd,MAAMA,CAACP,IAAY,EAAqB;IACtC,OAAO,MAAM,CAAE,SAAQA,IAAK,EAAC,CAAC;EAChC;AACF"}