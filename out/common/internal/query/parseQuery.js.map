{"version":3,"file":"parseQuery.js","names":["assert","badParamValueChars","paramKeyIsPublic","parseParamValue","TestQueryMultiFile","TestQueryMultiTest","TestQueryMultiCase","TestQuerySingleCase","kBigSeparator","kWildcard","kPathSeparator","kParamSeparator","validQueryPart","convertPathToQuery","path","parts","substring","length","split","partsAfterSrc","slice","lastIndexOf","suite","shift","join","convertPathLikeToQuery","queryOrPath","endsWith","includes","shortenSuiteName","query","replace","parseQuery","queryLike","parseQueryImpl","ex","Error","message","s","decodeURIComponent","fileString","testString","paramsString","i1","indexOf","i2","i3","file","wildcard","filePathHasWildcard","parseBigPart","undefined","test","testPathHasWildcard","paramsParts","paramsHasWildcard","params","paramPart","k","v","parseSingleParam","kExampleQueries","separator","endsWithWildcard","i","part","entries","paramSubstring","parseSingleParamValue"],"sources":["../../../../src/common/internal/query/parseQuery.ts"],"sourcesContent":["import { assert } from '../../util/util.js';\nimport {\n  TestParamsRW,\n  JSONWithUndefined,\n  badParamValueChars,\n  paramKeyIsPublic,\n} from '../params_utils.js';\n\nimport { parseParamValue } from './json_param_value.js';\nimport {\n  TestQuery,\n  TestQueryMultiFile,\n  TestQueryMultiTest,\n  TestQueryMultiCase,\n  TestQuerySingleCase,\n} from './query.js';\nimport { kBigSeparator, kWildcard, kPathSeparator, kParamSeparator } from './separators.js';\nimport { validQueryPart } from './validQueryPart.js';\n\n/**\n * converts foo/bar/src/webgpu/this/that/file.spec.ts to webgpu:this,that,file,*\n */\nfunction convertPathToQuery(path: string) {\n  // removes .spec.ts and splits by directory separators.\n  const parts = path.substring(0, path.length - 8).split(/\\/|\\\\/g);\n  // Gets parts only after the last `src`. Example: returns ['webgpu', 'foo', 'bar', 'test']\n  // for ['Users', 'me', 'src', 'cts', 'src', 'webgpu', 'foo', 'bar', 'test']\n  const partsAfterSrc = parts.slice(parts.lastIndexOf('src') + 1);\n  const suite = partsAfterSrc.shift();\n  return `${suite}:${partsAfterSrc.join(',')},*`;\n}\n\n/**\n * If a query looks like a path (ends in .spec.ts and has directory separators)\n * then convert try to convert it to a query.\n */\nfunction convertPathLikeToQuery(queryOrPath: string) {\n  return queryOrPath.endsWith('.spec.ts') &&\n    (queryOrPath.includes('/') || queryOrPath.includes('\\\\'))\n    ? convertPathToQuery(queryOrPath)\n    : queryOrPath;\n}\n\n/**\n * Convert long suite names (the part before the first colon) to the\n * shortest last word\n *    foo.bar.moo:test,subtest,foo -> moo:test,subtest,foo\n */\nfunction shortenSuiteName(query: string) {\n  const parts = query.split(':');\n  // converts foo.bar.moo to moo\n  const suite = parts.shift()?.replace(/.*\\.(\\w+)$/, '$1');\n  return [suite, ...parts].join(':');\n}\n\nexport function parseQuery(queryLike: string): TestQuery {\n  try {\n    const query = shortenSuiteName(convertPathLikeToQuery(queryLike));\n    return parseQueryImpl(query);\n  } catch (ex) {\n    if (ex instanceof Error) {\n      ex.message += `\\n  on: ${queryLike}`;\n    }\n    throw ex;\n  }\n}\n\nfunction parseQueryImpl(s: string): TestQuery {\n  // Undo encodeURIComponentSelectively\n  s = decodeURIComponent(s);\n\n  // bigParts are: suite, file, test, params (note kBigSeparator could appear in params)\n  let suite: string;\n  let fileString: string | undefined;\n  let testString: string | undefined;\n  let paramsString: string | undefined;\n  {\n    const i1 = s.indexOf(kBigSeparator);\n    assert(i1 !== -1, `query string must have at least one ${kBigSeparator}`);\n    suite = s.substring(0, i1);\n    const i2 = s.indexOf(kBigSeparator, i1 + 1);\n    if (i2 === -1) {\n      fileString = s.substring(i1 + 1);\n    } else {\n      fileString = s.substring(i1 + 1, i2);\n      const i3 = s.indexOf(kBigSeparator, i2 + 1);\n      if (i3 === -1) {\n        testString = s.substring(i2 + 1);\n      } else {\n        testString = s.substring(i2 + 1, i3);\n        paramsString = s.substring(i3 + 1);\n      }\n    }\n  }\n\n  const { parts: file, wildcard: filePathHasWildcard } = parseBigPart(fileString, kPathSeparator);\n\n  if (testString === undefined) {\n    // Query is file-level\n    assert(\n      filePathHasWildcard,\n      `File-level query without wildcard ${kWildcard}. Did you want a file-level query \\\n(append ${kPathSeparator}${kWildcard}) or test-level query (append ${kBigSeparator}${kWildcard})?`\n    );\n    return new TestQueryMultiFile(suite, file);\n  }\n  assert(!filePathHasWildcard, `Wildcard ${kWildcard} must be at the end of the query string`);\n\n  const { parts: test, wildcard: testPathHasWildcard } = parseBigPart(testString, kPathSeparator);\n\n  if (paramsString === undefined) {\n    // Query is test-level\n    assert(\n      testPathHasWildcard,\n      `Test-level query without wildcard ${kWildcard}; did you want a test-level query \\\n(append ${kPathSeparator}${kWildcard}) or case-level query (append ${kBigSeparator}${kWildcard})?`\n    );\n    assert(file.length > 0, 'File part of test-level query was empty (::)');\n    return new TestQueryMultiTest(suite, file, test);\n  }\n\n  // Query is case-level\n  assert(!testPathHasWildcard, `Wildcard ${kWildcard} must be at the end of the query string`);\n\n  const { parts: paramsParts, wildcard: paramsHasWildcard } = parseBigPart(\n    paramsString,\n    kParamSeparator\n  );\n\n  assert(test.length > 0, 'Test part of case-level query was empty (::)');\n\n  const params: TestParamsRW = {};\n  for (const paramPart of paramsParts) {\n    const [k, v] = parseSingleParam(paramPart);\n    assert(validQueryPart.test(k), `param key names must match ${validQueryPart}`);\n    params[k] = v;\n  }\n  if (paramsHasWildcard) {\n    return new TestQueryMultiCase(suite, file, test, params);\n  } else {\n    return new TestQuerySingleCase(suite, file, test, params);\n  }\n}\n\n// webgpu:a,b,* or webgpu:a,b,c:*\nconst kExampleQueries = `\\\nwebgpu${kBigSeparator}a${kPathSeparator}b${kPathSeparator}${kWildcard} or \\\nwebgpu${kBigSeparator}a${kPathSeparator}b${kPathSeparator}c${kBigSeparator}${kWildcard}`;\n\nfunction parseBigPart(\n  s: string,\n  separator: typeof kParamSeparator | typeof kPathSeparator\n): { parts: string[]; wildcard: boolean } {\n  if (s === '') {\n    return { parts: [], wildcard: false };\n  }\n  const parts = s.split(separator);\n\n  let endsWithWildcard = false;\n  for (const [i, part] of parts.entries()) {\n    if (i === parts.length - 1) {\n      endsWithWildcard = part === kWildcard;\n    }\n    assert(\n      part.indexOf(kWildcard) === -1 || endsWithWildcard,\n      `Wildcard ${kWildcard} must be complete last part of a path (e.g. ${kExampleQueries})`\n    );\n  }\n  if (endsWithWildcard) {\n    // Remove the last element of the array (which is just the wildcard).\n    parts.length = parts.length - 1;\n  }\n  return { parts, wildcard: endsWithWildcard };\n}\n\nfunction parseSingleParam(paramSubstring: string): [string, JSONWithUndefined] {\n  assert(paramSubstring !== '', 'Param in a query must not be blank (is there a trailing comma?)');\n  const i = paramSubstring.indexOf('=');\n  assert(i !== -1, 'Param in a query must be of form key=value');\n  const k = paramSubstring.substring(0, i);\n  assert(paramKeyIsPublic(k), 'Param in a query must not be private (start with _)');\n  const v = paramSubstring.substring(i + 1);\n  return [k, parseSingleParamValue(v)];\n}\n\nfunction parseSingleParamValue(s: string): JSONWithUndefined {\n  assert(\n    !badParamValueChars.test(s),\n    `param value must not match ${badParamValueChars} - was ${s}`\n  );\n  return parseParamValue(s);\n}\n"],"mappings":"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"}