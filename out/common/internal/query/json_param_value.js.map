{"version":3,"file":"json_param_value.js","names":["assert","sortObjectByKey","isPlainObject","jsUndefinedMagicValue","jsNaNMagicValue","jsPositiveInfinityMagicValue","jsNegativeInfinityMagicValue","jsNegativeZeroMagicValue","jsBigIntMagicPattern","toStringMagicValue","Map","undefined","NaN","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","fromStringMagicValue","stringifyFilter","_k","v","has","match","isObject","Array","isArray","Object","getPrototypeOf","constructor","name","is","get","stringifyParamValue","value","JSON","stringify","stringifyParamValueUniquely","k","parseParamValueReviver","BigInt","parseParamValue","s","parse"],"sources":["../../../../src/common/internal/query/json_param_value.ts"],"sourcesContent":["import { assert, sortObjectByKey, isPlainObject } from '../../util/util.js';\nimport { JSONWithUndefined } from '../params_utils.js';\n\n// JSON can't represent various values and by default stores them as `null`.\n// Instead, storing them as a magic string values in JSON.\nconst jsUndefinedMagicValue = '_undef_';\nconst jsNaNMagicValue = '_nan_';\nconst jsPositiveInfinityMagicValue = '_posinfinity_';\nconst jsNegativeInfinityMagicValue = '_neginfinity_';\n\n// -0 needs to be handled separately, because -0 === +0 returns true. Not\n// special casing +0/0, since it behaves intuitively. Assuming that if -0 is\n// being used, the differentiation from +0 is desired.\nconst jsNegativeZeroMagicValue = '_negzero_';\n\n// bigint values are not defined in JSON, so need to wrap them up as strings\nconst jsBigIntMagicPattern = /^(\\d+)n$/;\n\nconst toStringMagicValue = new Map<unknown, string>([\n  [undefined, jsUndefinedMagicValue],\n  [NaN, jsNaNMagicValue],\n  [Number.POSITIVE_INFINITY, jsPositiveInfinityMagicValue],\n  [Number.NEGATIVE_INFINITY, jsNegativeInfinityMagicValue],\n  // No -0 handling because it is special cased.\n]);\n\nconst fromStringMagicValue = new Map<string, unknown>([\n  [jsUndefinedMagicValue, undefined],\n  [jsNaNMagicValue, NaN],\n  [jsPositiveInfinityMagicValue, Number.POSITIVE_INFINITY],\n  [jsNegativeInfinityMagicValue, Number.NEGATIVE_INFINITY],\n  // -0 is handled in this direction because there is no comparison issue.\n  [jsNegativeZeroMagicValue, -0],\n]);\n\nfunction stringifyFilter(_k: string, v: unknown): unknown {\n  // Make sure no one actually uses a magic value as a parameter.\n  if (typeof v === 'string') {\n    assert(\n      !fromStringMagicValue.has(v),\n      `${v} is a magic value for stringification, so cannot be used`\n    );\n\n    assert(\n      v !== jsNegativeZeroMagicValue,\n      `${v} is a magic value for stringification, so cannot be used`\n    );\n\n    assert(\n      v.match(jsBigIntMagicPattern) === null,\n      `${v} matches bigint magic pattern for stringification, so cannot be used`\n    );\n  }\n\n  const isObject = v !== null && typeof v === 'object' && !Array.isArray(v);\n  if (isObject) {\n    assert(\n      isPlainObject(v),\n      `value must be a plain object but it appears to be a '${\n        Object.getPrototypeOf(v).constructor.name\n      }`\n    );\n  }\n  assert(typeof v !== 'function', `${v} can not be a function`);\n\n  if (Object.is(v, -0)) {\n    return jsNegativeZeroMagicValue;\n  }\n\n  if (typeof v === 'bigint') {\n    return `${v}n`;\n  }\n\n  return toStringMagicValue.has(v) ? toStringMagicValue.get(v) : v;\n}\n\nexport function stringifyParamValue(value: JSONWithUndefined): string {\n  return JSON.stringify(value, stringifyFilter);\n}\n\n/**\n * Like stringifyParamValue but sorts dictionaries by key, for hashing.\n */\nexport function stringifyParamValueUniquely(value: JSONWithUndefined): string {\n  return JSON.stringify(value, (k, v) => {\n    if (typeof v === 'object' && v !== null) {\n      return sortObjectByKey(v);\n    }\n\n    return stringifyFilter(k, v);\n  });\n}\n\n// 'any' is part of the JSON.parse reviver interface, so cannot be avoided.\n// eslint-disable-next-line  @typescript-eslint/no-explicit-any\nfunction parseParamValueReviver(_k: string, v: any): any {\n  if (fromStringMagicValue.has(v)) {\n    return fromStringMagicValue.get(v);\n  }\n\n  if (typeof v === 'string') {\n    const match: RegExpMatchArray | null = v.match(jsBigIntMagicPattern);\n    if (match !== null) {\n      // [0] is the entire match, and following entries are the capture groups\n      return BigInt(match[1]);\n    }\n  }\n\n  return v;\n}\n\nexport function parseParamValue(s: string): JSONWithUndefined {\n  return JSON.parse(s, parseParamValueReviver);\n}\n"],"mappings":"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"}