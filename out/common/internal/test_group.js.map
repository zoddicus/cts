{"version":3,"file":"test_group.js","names":["SkipTestCase","UnexpectedPassError","builderIterateCasesWithSubcases","kUnitCaseParamsBuilder","globalTestConfig","TestCaseRecorder","extractPublicParams","mergeParams","compareQueries","Ordering","TestQuerySingleCase","kPathSeparator","stringifyPublicParams","stringifyPublicParamsUniquely","validQueryPart","assert","unreachable","makeTestGroup","fixture","TestGroup","makeTestGroupForUnitTesting","kBatchParamName","seen","Set","tests","constructor","iterate","checkName","name","decodeURIComponent","has","add","test","testCreationStack","Error","parts","split","p","TestBuilder","push","validate","testCases","undefined","batchSize","testPath","isUnimplemented","desc","description","trim","specURL","url","beforeAllSubcases","fn","beforeFn","testFn","batch","b","unimplemented","testPathString","join","s","stack","caseParams","subcases","subcaseParams","params","testcaseString","e","testcaseStringUnique","cases","Function","paramsSimple","combineWithParams","paramsSubcasesOnly","beginSubcases","makeCaseSpecific","RunCaseSpecific","caseFilter","filterToBatch","caseFilterWithoutBatch","batchParam","subcaseArray","Array","from","length","makeCaseForBatch","sliceStart","slice","Math","min","id","runTest","rec","sharedState","throwSkip","expectedStatus","beginSubCase","inst","init","finalize","ex","threw","endSubCase","message","warn","run","selfQuery","expectations","getExpectedStatus","selfQueryWithSubParams","didSeeFail","exp","ordering","query","Unordered","StrictSubset","expectation","testHeartbeatCallback","maxSubcasesInFlight","start","MakeSharedState","postInit","allPreviousSubcasesFinalizedPromise","Promise","resolve","totalCount","skipCount","subcasesInFlight","resolvePromiseBlockingSubcase","subcaseFinishedCallback","subParams","subcasePrefix","subRec","Proxy","get","target","k","prop","prototype","args","then","arg","rv","apply","subcaseQuery","suite","filePathParts","testPathParts","finalizePromise","info","catch","finally","skipped","finish"],"sources":["../../../src/common/internal/test_group.ts"],"sourcesContent":["import {\n  Fixture,\n  SubcaseBatchState,\n  SkipTestCase,\n  TestParams,\n  UnexpectedPassError,\n  SubcaseBatchStateFromFixture,\n  FixtureClass,\n} from '../framework/fixture.js';\nimport {\n  CaseParamsBuilder,\n  builderIterateCasesWithSubcases,\n  kUnitCaseParamsBuilder,\n  ParamsBuilderBase,\n  SubcaseParamsBuilder,\n} from '../framework/params_builder.js';\nimport { globalTestConfig } from '../framework/test_config.js';\nimport { Expectation } from '../internal/logging/result.js';\nimport { TestCaseRecorder } from '../internal/logging/test_case_recorder.js';\nimport { extractPublicParams, Merged, mergeParams } from '../internal/params_utils.js';\nimport { compareQueries, Ordering } from '../internal/query/compare.js';\nimport { TestQuerySingleCase, TestQueryWithExpectation } from '../internal/query/query.js';\nimport { kPathSeparator } from '../internal/query/separators.js';\nimport {\n  stringifyPublicParams,\n  stringifyPublicParamsUniquely,\n} from '../internal/query/stringify_params.js';\nimport { validQueryPart } from '../internal/query/validQueryPart.js';\nimport { assert, unreachable } from '../util/util.js';\n\nexport type RunFn = (\n  rec: TestCaseRecorder,\n  expectations?: TestQueryWithExpectation[]\n) => Promise<void>;\n\nexport interface TestCaseID {\n  readonly test: readonly string[];\n  readonly params: TestParams;\n}\n\nexport interface RunCase {\n  readonly id: TestCaseID;\n  readonly isUnimplemented: boolean;\n  run(\n    rec: TestCaseRecorder,\n    selfQuery: TestQuerySingleCase,\n    expectations: TestQueryWithExpectation[]\n  ): Promise<void>;\n}\n\n// Interface for defining tests\nexport interface TestGroupBuilder<F extends Fixture> {\n  test(name: string): TestBuilderWithName<F>;\n}\nexport function makeTestGroup<F extends Fixture>(fixture: FixtureClass<F>): TestGroupBuilder<F> {\n  return new TestGroup((fixture as unknown) as FixtureClass);\n}\n\n// Interfaces for running tests\nexport interface IterableTestGroup {\n  iterate(): Iterable<IterableTest>;\n  validate(): void;\n}\nexport interface IterableTest {\n  testPath: string[];\n  description: string | undefined;\n  readonly testCreationStack: Error;\n  iterate(caseFilter: TestParams | null): Iterable<RunCase>;\n}\n\nexport function makeTestGroupForUnitTesting<F extends Fixture>(\n  fixture: FixtureClass<F>\n): TestGroup<F> {\n  return new TestGroup(fixture);\n}\n\n/** Parameter name for batch number (see also TestBuilder.batch). */\nconst kBatchParamName = 'batch__';\n\ntype TestFn<F extends Fixture, P extends {}> = (t: F & { params: P }) => Promise<void> | void;\ntype BeforeAllSubcasesFn<S extends SubcaseBatchState, P extends {}> = (\n  s: S & { params: P }\n) => Promise<void> | void;\n\nexport class TestGroup<F extends Fixture> implements TestGroupBuilder<F> {\n  private fixture: FixtureClass;\n  private seen: Set<string> = new Set();\n  private tests: Array<TestBuilder<SubcaseBatchStateFromFixture<F>, F>> = [];\n\n  constructor(fixture: FixtureClass) {\n    this.fixture = fixture;\n  }\n\n  iterate(): Iterable<IterableTest> {\n    return this.tests;\n  }\n\n  private checkName(name: string): void {\n    assert(\n      // Shouldn't happen due to the rule above. Just makes sure that treating\n      // unencoded strings as encoded strings is OK.\n      name === decodeURIComponent(name),\n      `Not decodeURIComponent-idempotent: ${name} !== ${decodeURIComponent(name)}`\n    );\n    assert(!this.seen.has(name), `Duplicate test name: ${name}`);\n\n    this.seen.add(name);\n  }\n\n  test(name: string): TestBuilderWithName<F> {\n    const testCreationStack = new Error(`Test created: ${name}`);\n\n    this.checkName(name);\n\n    const parts = name.split(kPathSeparator);\n    for (const p of parts) {\n      assert(validQueryPart.test(p), `Invalid test name part ${p}; must match ${validQueryPart}`);\n    }\n\n    const test = new TestBuilder(parts, this.fixture, testCreationStack);\n    this.tests.push(test);\n    return (test as unknown) as TestBuilderWithName<F>;\n  }\n\n  validate(): void {\n    for (const test of this.tests) {\n      test.validate();\n    }\n  }\n}\n\ninterface TestBuilderWithName<F extends Fixture> extends TestBuilderWithParams<F, {}, {}> {\n  desc(description: string): this;\n  /**\n   * A noop function to associate a test with the relevant part of the specification.\n   *\n   * @param url a link to the spec where test is extracted from.\n   */\n  specURL(url: string): this;\n  /**\n   * Parameterize the test, generating multiple cases, each possibly having subcases.\n   *\n   * The `unit` value passed to the `cases` callback is an immutable constant\n   * `CaseParamsBuilder<{}>` representing the \"unit\" builder `[ {} ]`,\n   * provided for convenience. The non-callback overload can be used if `unit` is not needed.\n   */\n  params<CaseP extends {}, SubcaseP extends {}>(\n    cases: (unit: CaseParamsBuilder<{}>) => ParamsBuilderBase<CaseP, SubcaseP>\n  ): TestBuilderWithParams<F, CaseP, SubcaseP>;\n  /**\n   * Parameterize the test, generating multiple cases, each possibly having subcases.\n   *\n   * Use the callback overload of this method if a \"unit\" builder is needed.\n   */\n  params<CaseP extends {}, SubcaseP extends {}>(\n    cases: ParamsBuilderBase<CaseP, SubcaseP>\n  ): TestBuilderWithParams<F, CaseP, SubcaseP>;\n\n  /**\n   * Parameterize the test, generating multiple cases, without subcases.\n   */\n  paramsSimple<P extends {}>(cases: Iterable<P>): TestBuilderWithParams<F, P, {}>;\n\n  /**\n   * Parameterize the test, generating one case with multiple subcases.\n   */\n  paramsSubcasesOnly<P extends {}>(subcases: Iterable<P>): TestBuilderWithParams<F, {}, P>;\n  /**\n   * Parameterize the test, generating one case with multiple subcases.\n   *\n   * The `unit` value passed to the `subcases` callback is an immutable constant\n   * `SubcaseParamsBuilder<{}>`, with one empty case `{}` and one empty subcase `{}`.\n   */\n  paramsSubcasesOnly<P extends {}>(\n    subcases: (unit: SubcaseParamsBuilder<{}, {}>) => SubcaseParamsBuilder<{}, P>\n  ): TestBuilderWithParams<F, {}, P>;\n}\n\ninterface TestBuilderWithParams<F extends Fixture, CaseP extends {}, SubcaseP extends {}> {\n  /**\n   * Limit subcases to a maximum number of per testcase.\n   * @param b the maximum number of subcases per testcase.\n   *\n   * If the number of subcases exceeds `b`, add an internal\n   * numeric, incrementing `batch__` param to split subcases\n   * into groups of at most `b` subcases.\n   */\n  batch(b: number): this;\n  /**\n   * Run a function on shared subcase batch state before each\n   * batch of subcases.\n   * @param fn the function to run. It is called with the test\n   * fixture's shared subcase batch state.\n   *\n   * Generally, this function should be careful to avoid mutating\n   * any state on the shared subcase batch state which could result\n   * in unexpected order-dependent test behavior.\n   */\n  beforeAllSubcases(fn: BeforeAllSubcasesFn<SubcaseBatchStateFromFixture<F>, CaseP>): this;\n  /**\n   * Set the test function.\n   * @param fn the test function.\n   */\n  fn(fn: TestFn<F, Merged<CaseP, SubcaseP>>): void;\n  /**\n   * Mark the test as unimplemented.\n   */\n  unimplemented(): void;\n}\n\nclass TestBuilder<S extends SubcaseBatchState, F extends Fixture> {\n  readonly testPath: string[];\n  isUnimplemented: boolean;\n  description: string | undefined;\n  readonly testCreationStack: Error;\n\n  private readonly fixture: FixtureClass;\n  private testFn: TestFn<Fixture, {}> | undefined;\n  private beforeFn: BeforeAllSubcasesFn<SubcaseBatchState, {}> | undefined;\n  private testCases?: ParamsBuilderBase<{}, {}> = undefined;\n  private batchSize: number = 0;\n\n  constructor(testPath: string[], fixture: FixtureClass, testCreationStack: Error) {\n    this.testPath = testPath;\n    this.isUnimplemented = false;\n    this.fixture = fixture;\n    this.testCreationStack = testCreationStack;\n  }\n\n  desc(description: string): this {\n    this.description = description.trim();\n    return this;\n  }\n\n  specURL(url: string): this {\n    return this;\n  }\n\n  beforeAllSubcases(fn: BeforeAllSubcasesFn<SubcaseBatchState, {}>): this {\n    assert(this.beforeFn === undefined);\n    this.beforeFn = fn;\n    return this;\n  }\n\n  fn(fn: TestFn<Fixture, {}>): void {\n    // eslint-disable-next-line no-warning-comments\n    // MAINTENANCE_TODO: add \"TODO\" if there's no description? (and make sure it only ends up on\n    // actual tests, not on test parents in the tree, which is what happens if you do it here, not\n    // sure why)\n    assert(this.testFn === undefined);\n    this.testFn = fn;\n  }\n\n  batch(b: number): this {\n    this.batchSize = b;\n    return this;\n  }\n\n  unimplemented(): void {\n    assert(this.testFn === undefined);\n\n    this.description =\n      (this.description ? this.description + '\\n\\n' : '') + 'TODO: .unimplemented()';\n    this.isUnimplemented = true;\n\n    this.testFn = () => {\n      throw new SkipTestCase('test unimplemented');\n    };\n  }\n\n  validate(): void {\n    const testPathString = this.testPath.join(kPathSeparator);\n    assert(this.testFn !== undefined, () => {\n      let s = `Test is missing .fn(): ${testPathString}`;\n      if (this.testCreationStack.stack) {\n        s += `\\n-> test created at:\\n${this.testCreationStack.stack}`;\n      }\n      return s;\n    });\n\n    if (this.testCases === undefined) {\n      return;\n    }\n\n    const seen = new Set<string>();\n    for (const [caseParams, subcases] of builderIterateCasesWithSubcases(this.testCases, null)) {\n      for (const subcaseParams of subcases ?? [{}]) {\n        const params = mergeParams(caseParams, subcaseParams);\n        assert(this.batchSize === 0 || !(kBatchParamName in params));\n\n        // stringifyPublicParams also checks for invalid params values\n        let testcaseString;\n        try {\n          testcaseString = stringifyPublicParams(params);\n        } catch (e) {\n          throw new Error(`${e}: ${testPathString}`);\n        }\n\n        // A (hopefully) unique representation of a params value.\n        const testcaseStringUnique = stringifyPublicParamsUniquely(params);\n        assert(\n          !seen.has(testcaseStringUnique),\n          `Duplicate public test case params for test ${testPathString}: ${testcaseString}`\n        );\n        seen.add(testcaseStringUnique);\n      }\n    }\n  }\n\n  params(\n    cases: ((unit: CaseParamsBuilder<{}>) => ParamsBuilderBase<{}, {}>) | ParamsBuilderBase<{}, {}>\n  ): TestBuilder<S, F> {\n    assert(this.testCases === undefined, 'test case is already parameterized');\n    if (cases instanceof Function) {\n      this.testCases = cases(kUnitCaseParamsBuilder);\n    } else {\n      this.testCases = cases;\n    }\n    return this;\n  }\n\n  paramsSimple(cases: Iterable<{}>): TestBuilder<S, F> {\n    assert(this.testCases === undefined, 'test case is already parameterized');\n    this.testCases = kUnitCaseParamsBuilder.combineWithParams(cases);\n    return this;\n  }\n\n  paramsSubcasesOnly(\n    subcases: Iterable<{}> | ((unit: SubcaseParamsBuilder<{}, {}>) => SubcaseParamsBuilder<{}, {}>)\n  ): TestBuilder<S, F> {\n    if (subcases instanceof Function) {\n      return this.params(subcases(kUnitCaseParamsBuilder.beginSubcases()));\n    } else {\n      return this.params(kUnitCaseParamsBuilder.beginSubcases().combineWithParams(subcases));\n    }\n  }\n\n  private makeCaseSpecific(params: {}, subcases: Iterable<{}> | undefined) {\n    assert(this.testFn !== undefined, 'No test function (.fn()) for test');\n    return new RunCaseSpecific(\n      this.testPath,\n      params,\n      this.isUnimplemented,\n      subcases,\n      this.fixture,\n      this.testFn,\n      this.beforeFn,\n      this.testCreationStack\n    );\n  }\n\n  *iterate(caseFilter: TestParams | null): IterableIterator<RunCase> {\n    this.testCases ??= kUnitCaseParamsBuilder;\n\n    // Remove the batch__ from the caseFilter because the params builder doesn't\n    // know about it (we don't add it until later in this function).\n    let filterToBatch: number | undefined;\n    const caseFilterWithoutBatch = caseFilter ? { ...caseFilter } : null;\n    if (caseFilterWithoutBatch && kBatchParamName in caseFilterWithoutBatch) {\n      const batchParam = caseFilterWithoutBatch[kBatchParamName];\n      assert(typeof batchParam === 'number');\n      filterToBatch = batchParam;\n      delete caseFilterWithoutBatch[kBatchParamName];\n    }\n\n    for (const [caseParams, subcases] of builderIterateCasesWithSubcases(\n      this.testCases,\n      caseFilterWithoutBatch\n    )) {\n      // If batches are not used, yield just one case.\n      if (this.batchSize === 0 || subcases === undefined) {\n        yield this.makeCaseSpecific(caseParams, subcases);\n        continue;\n      }\n\n      // Same if there ends up being only one batch.\n      const subcaseArray = Array.from(subcases);\n      if (subcaseArray.length <= this.batchSize) {\n        yield this.makeCaseSpecific(caseParams, subcaseArray);\n        continue;\n      }\n\n      // There are multiple batches. Helper function for this case:\n      const makeCaseForBatch = (batch: number) => {\n        const sliceStart = batch * this.batchSize;\n        return this.makeCaseSpecific(\n          { ...caseParams, [kBatchParamName]: batch },\n          subcaseArray.slice(sliceStart, Math.min(subcaseArray.length, sliceStart + this.batchSize))\n        );\n      };\n\n      // If we filter to just one batch, yield it.\n      if (filterToBatch !== undefined) {\n        yield makeCaseForBatch(filterToBatch);\n        continue;\n      }\n\n      // Finally, if not, yield all of the batches.\n      for (let batch = 0; batch * this.batchSize < subcaseArray.length; ++batch) {\n        yield makeCaseForBatch(batch);\n      }\n    }\n  }\n}\n\nclass RunCaseSpecific implements RunCase {\n  readonly id: TestCaseID;\n  readonly isUnimplemented: boolean;\n\n  private readonly params: {};\n  private readonly subcases: Iterable<{}> | undefined;\n  private readonly fixture: FixtureClass;\n  private readonly fn: TestFn<Fixture, {}>;\n  private readonly beforeFn?: BeforeAllSubcasesFn<SubcaseBatchState, {}>;\n  private readonly testCreationStack: Error;\n\n  constructor(\n    testPath: string[],\n    params: {},\n    isUnimplemented: boolean,\n    subcases: Iterable<{}> | undefined,\n    fixture: FixtureClass,\n    fn: TestFn<Fixture, {}>,\n    beforeFn: BeforeAllSubcasesFn<SubcaseBatchState, {}> | undefined,\n    testCreationStack: Error\n  ) {\n    this.id = { test: testPath, params: extractPublicParams(params) };\n    this.isUnimplemented = isUnimplemented;\n    this.params = params;\n    this.subcases = subcases;\n    this.fixture = fixture;\n    this.fn = fn;\n    this.beforeFn = beforeFn;\n    this.testCreationStack = testCreationStack;\n  }\n\n  async runTest(\n    rec: TestCaseRecorder,\n    sharedState: SubcaseBatchState,\n    params: TestParams,\n    throwSkip: boolean,\n    expectedStatus: Expectation\n  ): Promise<void> {\n    try {\n      rec.beginSubCase();\n      if (expectedStatus === 'skip') {\n        throw new SkipTestCase('Skipped by expectations');\n      }\n\n      const inst = new this.fixture(sharedState, rec, params);\n      try {\n        await inst.init();\n        await this.fn(inst as Fixture & { params: {} });\n      } finally {\n        // Runs as long as constructor succeeded, even if initialization or the test failed.\n        await inst.finalize();\n      }\n    } catch (ex) {\n      // There was an exception from constructor, init, test, or finalize.\n      // An error from init or test may have been a SkipTestCase.\n      // An error from finalize may have been an eventualAsyncExpectation failure\n      // or unexpected validation/OOM error from the GPUDevice.\n      if (throwSkip && ex instanceof SkipTestCase) {\n        throw ex;\n      }\n      rec.threw(ex);\n    } finally {\n      try {\n        rec.endSubCase(expectedStatus);\n      } catch (ex) {\n        assert(ex instanceof UnexpectedPassError);\n        ex.message = `Testcase passed unexpectedly.`;\n        ex.stack = this.testCreationStack.stack;\n        rec.warn(ex);\n      }\n    }\n  }\n\n  async run(\n    rec: TestCaseRecorder,\n    selfQuery: TestQuerySingleCase,\n    expectations: TestQueryWithExpectation[]\n  ): Promise<void> {\n    const getExpectedStatus = (selfQueryWithSubParams: TestQuerySingleCase) => {\n      let didSeeFail = false;\n      for (const exp of expectations) {\n        const ordering = compareQueries(exp.query, selfQueryWithSubParams);\n        if (ordering === Ordering.Unordered || ordering === Ordering.StrictSubset) {\n          continue;\n        }\n\n        switch (exp.expectation) {\n          // Skip takes precedence. If there is any expectation indicating a skip,\n          // signal it immediately.\n          case 'skip':\n            return 'skip';\n          case 'fail':\n            // Otherwise, indicate that we might expect a failure.\n            didSeeFail = true;\n            break;\n          default:\n            unreachable();\n        }\n      }\n      return didSeeFail ? 'fail' : 'pass';\n    };\n\n    const { testHeartbeatCallback, maxSubcasesInFlight } = globalTestConfig;\n    try {\n      rec.start();\n      const sharedState = this.fixture.MakeSharedState(rec, this.params);\n      try {\n        await sharedState.init();\n        if (this.beforeFn) {\n          await this.beforeFn(sharedState);\n        }\n        await sharedState.postInit();\n        testHeartbeatCallback();\n\n        let allPreviousSubcasesFinalizedPromise: Promise<void> = Promise.resolve();\n        if (this.subcases) {\n          let totalCount = 0;\n          let skipCount = 0;\n\n          // If there are too many subcases in flight, starting the next subcase will register\n          // `resolvePromiseBlockingSubcase` and wait until `subcaseFinishedCallback` is called.\n          let subcasesInFlight = 0;\n          let resolvePromiseBlockingSubcase: (() => void) | undefined = undefined;\n          const subcaseFinishedCallback = () => {\n            subcasesInFlight -= 1;\n            // If there is any subcase waiting on a previous subcase to finish,\n            // unblock it now, and clear the resolve callback.\n            if (resolvePromiseBlockingSubcase) {\n              resolvePromiseBlockingSubcase();\n              resolvePromiseBlockingSubcase = undefined;\n            }\n          };\n\n          for (const subParams of this.subcases) {\n            // Make a recorder that will defer all calls until `allPreviousSubcasesFinalizedPromise`\n            // resolves. Waiting on `allPreviousSubcasesFinalizedPromise` ensures that\n            // logs from all the previous subcases have been flushed before flushing new logs.\n            const subcasePrefix = 'subcase: ' + stringifyPublicParams(subParams);\n            const subRec = new Proxy(rec, {\n              get: (target, k: keyof TestCaseRecorder) => {\n                const prop = TestCaseRecorder.prototype[k];\n                if (typeof prop === 'function') {\n                  testHeartbeatCallback();\n                  return function (...args: Parameters<typeof prop>) {\n                    void allPreviousSubcasesFinalizedPromise.then(() => {\n                      // Prepend the subcase name to all error messages.\n                      for (const arg of args) {\n                        if (arg instanceof Error) {\n                          try {\n                            arg.message = subcasePrefix + '\\n' + arg.message;\n                          } catch {\n                            // If that fails (e.g. on DOMException), try to put it in the stack:\n                            let stack = subcasePrefix;\n                            if (arg.stack) stack += '\\n' + arg.stack;\n                            try {\n                              arg.stack = stack;\n                            } catch {\n                              // If that fails too, just silence it.\n                            }\n                          }\n                        }\n                      }\n\n                      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                      const rv = (prop as any).apply(target, args);\n                      // Because this proxy executes functions in a deferred manner,\n                      // it should never be used for functions that need to return a value.\n                      assert(rv === undefined);\n                    });\n                  };\n                }\n                return prop;\n              },\n            });\n\n            const params = mergeParams(this.params, subParams);\n            const subcaseQuery = new TestQuerySingleCase(\n              selfQuery.suite,\n              selfQuery.filePathParts,\n              selfQuery.testPathParts,\n              params\n            );\n\n            // Limit the maximum number of subcases in flight.\n            if (subcasesInFlight >= maxSubcasesInFlight) {\n              await new Promise<void>(resolve => {\n                // There should only be one subcase waiting at a time.\n                assert(resolvePromiseBlockingSubcase === undefined);\n                resolvePromiseBlockingSubcase = resolve;\n              });\n            }\n\n            subcasesInFlight += 1;\n            // Runs async without waiting so that subsequent subcases can start.\n            // All finalization steps will be waited on at the end of the testcase.\n            const finalizePromise = this.runTest(\n              subRec,\n              sharedState,\n              params,\n              /* throwSkip */ true,\n              getExpectedStatus(subcaseQuery)\n            )\n              .then(() => {\n                subRec.info(new Error('OK'));\n              })\n              .catch(ex => {\n                if (ex instanceof SkipTestCase) {\n                  // Convert SkipTestCase to info messages\n                  ex.message = 'subcase skipped: ' + ex.message;\n                  subRec.info(ex);\n                  ++skipCount;\n                } else {\n                  // Since we are catching all error inside runTest(), this should never happen\n                  subRec.threw(ex);\n                }\n              })\n              .finally(subcaseFinishedCallback);\n\n            allPreviousSubcasesFinalizedPromise = allPreviousSubcasesFinalizedPromise.then(\n              () => finalizePromise\n            );\n            ++totalCount;\n          }\n\n          // Wait for all subcases to finalize and report their results.\n          await allPreviousSubcasesFinalizedPromise;\n\n          if (skipCount === totalCount) {\n            rec.skipped(new SkipTestCase('all subcases were skipped'));\n          }\n        } else {\n          await this.runTest(\n            rec,\n            sharedState,\n            this.params,\n            /* throwSkip */ false,\n            getExpectedStatus(selfQuery)\n          );\n        }\n      } finally {\n        testHeartbeatCallback();\n        // Runs as long as the shared state constructor succeeded, even if initialization or a test failed.\n        await sharedState.finalize();\n        testHeartbeatCallback();\n      }\n    } catch (ex) {\n      // There was an exception from sharedState/fixture constructor, init, beforeFn, or test.\n      // An error from beforeFn may have been SkipTestCase.\n      // An error from finalize may have been an eventualAsyncExpectation failure\n      // or unexpected validation/OOM error from the GPUDevice.\n      rec.threw(ex);\n    } finally {\n      rec.finish();\n    }\n  }\n}\n"],"mappings":"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"}