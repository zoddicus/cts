{"version":3,"file":"merge_listing_times.js","names":["fs","process","readline","parseQuery","TestQueryMultiCase","TestQuerySingleCase","assert","usage","rc","console","error","exit","kHeader","kFooter","argv","some","v","startsWith","every","suites","timingLogFilenames","seenDashDash","arg","slice","push","caseTimes","Map","timingLogFilename","rl","createInterface","input","createReadStream","crlfDelay","Infinity","line","parsed","JSON","parse","prev","get","q","undefined","timePerSubcase","timems","Math","max","nonskippedSubcaseCount","prevTimePerSubcase","set","testTimes","suite","caseQString","caseTime","caseQ","suiteTestTimes","testQ","filePathParts","testPathParts","testQString","toString","totalTimeMS","subcaseCount","currentMetadata","readFileSync","metadata","avgTime","subcaseMS","writeListings","output","createWriteStream","write","keys","Object","sort","k","indexOf","toFixed","close"],"sources":["../../../src/common/tools/merge_listing_times.ts"],"sourcesContent":["import * as fs from 'fs';\nimport * as process from 'process';\nimport * as readline from 'readline';\n\nimport { TestMetadataListing } from '../framework/metadata.js';\nimport { parseQuery } from '../internal/query/parseQuery.js';\nimport { TestQueryMultiCase, TestQuerySingleCase } from '../internal/query/query.js';\nimport { CaseTimingLogLine } from '../internal/test_group.js';\nimport { assert } from '../util/util.js';\n\n// For information on listing_meta.json file maintenance, please read\n// tools/merge_listing_times first.\n\nfunction usage(rc: number): never {\n  console.error(`Usage: tools/merge_listing_times [options] SUITES... -- [TIMING_LOG_FILES...]\n\nOptions:\n  --help          Print this message and exit.\n\nReads raw case timing data for each suite in SUITES, from all TIMING_LOG_FILES\n(see below), and merges it into the src/*/listing_meta.json files checked into\nthe repository. The timing data in the listing_meta.json files is updated with\nthe newly-observed timing data *if the new timing is slower*. That is, it will\nonly increase the values in the listing_meta.json file, and will only cause WPT\nchunks to become smaller.\n\nIf there are no TIMING_LOG_FILES, this just regenerates (reformats) the file\nusing the data already present.\n\nIn more detail:\n\n- Reads per-case timing data in any of the SUITES, from all TIMING_LOG_FILES\n  (ignoring skipped cases), and averages it over the number of subcases.\n  In the case of cases that have run multiple times, takes the max of each.\n- Compiles the average time-per-subcase for each test seen.\n- For each suite seen, loads its listing_meta.json, takes the max of the old and\n  new data, and writes it back out.\n\nHow to generate TIMING_LOG_FILES files:\n\n- Launch the 'websocket-logger' tool (see its README.md), which listens for\n  log messages on localhost:59497.\n- Run the tests you want to capture data for, on the same system. Since\n  logging is done through the websocket side-channel, you can run the tests\n  under any runtime (standalone, WPT, etc.) as long as WebSocket support is\n  available (always true in browsers).\n- Run \\`tools/merge_listing_times webgpu -- tools/websocket-logger/wslog-*.txt\\`\n`);\n  process.exit(rc);\n}\n\nconst kHeader = `{\n  \"_comment\": \"SEMI AUTO-GENERATED: Please read docs/adding_timing_metadata.md.\",\n`;\nconst kFooter = `\\\n  \"_end\": \"\"\n}\n`;\n\nconst argv = process.argv;\nif (argv.some(v => v.startsWith('-') && v !== '--') || argv.every(v => v !== '--')) {\n  usage(0);\n}\nconst suites = [];\nconst timingLogFilenames = [];\nlet seenDashDash = false;\nfor (const arg of argv.slice(2)) {\n  if (arg === '--') {\n    seenDashDash = true;\n    continue;\n  } else if (arg.startsWith('-')) {\n    usage(0);\n  }\n\n  if (seenDashDash) {\n    timingLogFilenames.push(arg);\n  } else {\n    suites.push(arg);\n  }\n}\nif (!seenDashDash) {\n  usage(0);\n}\n\nvoid (async () => {\n  // Read the log files to find the log line for each *case* query. If a case\n  // ran multiple times, take the one with the largest average subcase time.\n  const caseTimes = new Map<string, CaseTimingLogLine>();\n  for (const timingLogFilename of timingLogFilenames) {\n    const rl = readline.createInterface({\n      input: fs.createReadStream(timingLogFilename),\n      crlfDelay: Infinity,\n    });\n\n    for await (const line of rl) {\n      const parsed: CaseTimingLogLine = JSON.parse(line);\n\n      const prev = caseTimes.get(parsed.q);\n      if (prev !== undefined) {\n        const timePerSubcase = parsed.timems / Math.max(1, parsed.nonskippedSubcaseCount);\n        const prevTimePerSubcase = prev.timems / Math.max(1, prev.nonskippedSubcaseCount);\n\n        if (timePerSubcase > prevTimePerSubcase) {\n          caseTimes.set(parsed.q, parsed);\n        }\n      } else {\n        caseTimes.set(parsed.q, parsed);\n      }\n    }\n  }\n\n  // Accumulate total times per test. Map of suite -> query -> {totalTimeMS, caseCount}.\n  const testTimes = new Map<string, Map<string, { totalTimeMS: number; subcaseCount: number }>>();\n  for (const suite of suites) {\n    testTimes.set(suite, new Map());\n  }\n  for (const [caseQString, caseTime] of caseTimes) {\n    const caseQ = parseQuery(caseQString);\n    assert(caseQ instanceof TestQuerySingleCase);\n    const suite = caseQ.suite;\n    const suiteTestTimes = testTimes.get(suite);\n    if (suiteTestTimes === undefined) {\n      continue;\n    }\n\n    const testQ = new TestQueryMultiCase(suite, caseQ.filePathParts, caseQ.testPathParts, {});\n    const testQString = testQ.toString();\n\n    const prev = suiteTestTimes.get(testQString);\n    if (prev !== undefined) {\n      prev.totalTimeMS += caseTime.timems;\n      prev.subcaseCount += caseTime.nonskippedSubcaseCount;\n    } else {\n      suiteTestTimes.set(testQString, {\n        totalTimeMS: caseTime.timems,\n        subcaseCount: caseTime.nonskippedSubcaseCount,\n      });\n    }\n  }\n\n  for (const suite of suites) {\n    const currentMetadata: TestMetadataListing = JSON.parse(\n      fs.readFileSync(`./src/${suite}/listing_meta.json`, 'utf8')\n    );\n\n    const metadata = { ...currentMetadata };\n    for (const [testQString, { totalTimeMS, subcaseCount }] of testTimes.get(suite)!) {\n      const avgTime = totalTimeMS / Math.max(1, subcaseCount);\n      if (testQString in metadata) {\n        metadata[testQString].subcaseMS = Math.max(metadata[testQString].subcaseMS, avgTime);\n      } else {\n        metadata[testQString] = { subcaseMS: avgTime };\n      }\n    }\n\n    writeListings(suite, metadata);\n  }\n})();\n\nfunction writeListings(suite: string, metadata: TestMetadataListing) {\n  const output = fs.createWriteStream(`./src/${suite}/listing_meta.json`);\n  try {\n    output.write(kHeader);\n    const keys = Object.keys(metadata).sort();\n    for (const k of keys) {\n      if (k.startsWith('_')) {\n        // Ignore json \"_comments\".\n        continue;\n      }\n      assert(k.indexOf('\"') === -1);\n      output.write(`  \"${k}\": { \"subcaseMS\": ${metadata[k].subcaseMS.toFixed(3)} },\\n`);\n    }\n    output.write(kFooter);\n  } finally {\n    output.close();\n  }\n}\n"],"mappings":"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"}