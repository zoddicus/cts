{"version":3,"file":"gen_wpt_cts_html.js","names":["promises","fs","path","DefaultTestFileLoader","compareQueries","Ordering","parseQuery","TestQueryMultiCase","TestQueryMultiFile","TestQueryMultiTest","assert","kMaxQueryLength","printUsageAndExit","rc","console","error","process","exit","reifyArgumentsPrefixesConfig","argumentsPrefixes","item","prefix","filters","undefined","map","f","prefixes","config","argv","length","configFile","configJSON","JSON","parse","readFile","jsonFileDir","dirname","suite","out","resolve","template","maxChunkTimeMS","Infinity","noLongPathAssert","outVariantList","expectations","file","fullyExpandSubtrees","_nodeBinary","_thisScript","outFile","templateFile","argsPrefixesFile","expectationsFile","expectationsPrefix","split","filter","a","useChunking","Number","isFinite","sort","b","loadQueryFile","fullyExpand","loader","lines","tooLongQueries","rootQuery","subqueriesToExpand","get","q","level","push","toString","tree","loadTree","maxChunkTime","prefixComment","comment","filesSeen","Set","testsSeen","variantCount","alwaysExpandThroughLevel","loopOverNodes","query","subtreeCounts","iterateCollapsedNodes","queryMatchesFilter","compare","StrictSubset","Equal","StrictSuperset","some","queryString","urlQueryString","totalTimeMS","toFixed","add","filePathParts","testPathParts","size","queryStrings","Map","forEach","s","colonNdx","lastIndexOf","substring","id","set","Error","padEnd","values","join","generateFile","catch","ex","log","stack","queryFile","l","result","expLoop","exp","argsPrefix","startsWith","variantList","line","writeFile","stringify"],"sources":["../../../src/common/tools/gen_wpt_cts_html.ts"],"sourcesContent":["import { promises as fs } from 'fs';\nimport * as path from 'path';\n\nimport { DefaultTestFileLoader } from '../internal/file_loader.js';\nimport { compareQueries, Ordering } from '../internal/query/compare.js';\nimport { parseQuery } from '../internal/query/parseQuery.js';\nimport {\n  TestQuery,\n  TestQueryMultiCase,\n  TestQueryMultiFile,\n  TestQueryMultiTest,\n} from '../internal/query/query.js';\nimport { assert } from '../util/util.js';\n\nconst kMaxQueryLength = 184;\n\nfunction printUsageAndExit(rc: number): never {\n  console.error(`\\\nUsage (simple, for webgpu:* suite only):\n  tools/gen_wpt_cts_html OUTPUT_FILE TEMPLATE_FILE\n  tools/gen_wpt_cts_html out-wpt/cts.https.html templates/cts.https.html\n\nUsage (config file):\n  tools/gen_wpt_cts_html CONFIG_JSON_FILE\n\nwhere CONFIG_JSON_FILE is a JSON file in the format documented in the code of\ngen_wpt_cts_html.ts. Example:\n  {\n    \"suite\": \"webgpu\",\n    \"out\": \"path/to/output/cts.https.html\",\n    \"outJSON\": \"path/to/output/webgpu_variant_list.json\",\n    \"template\": \"path/to/template/cts.https.html\",\n    \"maxChunkTimeMS\": 2000\n  }\n\nUsage (advanced) (deprecated, use config file):\n  tools/gen_wpt_cts_html OUTPUT_FILE TEMPLATE_FILE ARGUMENTS_PREFIXES_FILE EXPECTATIONS_FILE EXPECTATIONS_PREFIX [SUITE]\n  tools/gen_wpt_cts_html my/path/to/cts.https.html templates/cts.https.html arguments.txt myexpectations.txt 'path/to/cts.https.html' cts\n\nwhere arguments.txt is a file containing a list of arguments prefixes to both generate and expect\nin the expectations. The entire variant list generation runs *once per prefix*, so this\nmultiplies the size of the variant list.\n\n  ?debug=0&q=\n  ?debug=1&q=\n\nand myexpectations.txt is a file containing a list of WPT paths to suppress, e.g.:\n\n  path/to/cts.https.html?debug=0&q=webgpu:a/foo:bar={\"x\":1}\n  path/to/cts.https.html?debug=1&q=webgpu:a/foo:bar={\"x\":1}\n\n  path/to/cts.https.html?debug=1&q=webgpu:a/foo:bar={\"x\":3}\n`);\n  process.exit(rc);\n}\n\ninterface ConfigJSON {\n  /** Test suite to generate from. */\n  suite: string;\n  /** Output path for HTML file, relative to config file. */\n  out: string;\n  /** Output path for JSON file containing the \"variant\" list, relative to config file. */\n  outVariantList?: string;\n  /** Input template filename, relative to config file. */\n  template: string;\n  /**\n   * Maximum time for a single WPT \"variant\" chunk, in milliseconds. Defaults to infinity.\n   *\n   * This data is typically captured by developers on higher-end computers, so typical test\n   * machines might execute more slowly. For this reason, use a time much less than 5 seconds\n   * (a typical default time limit in WPT test executors).\n   */\n  maxChunkTimeMS?: number;\n  /**\n   * List of argument prefixes (what comes before the test query), and optionally a list of\n   * test queries to run under that prefix. Defaults to `['?q=']`.\n   */\n  argumentsPrefixes?: ArgumentsPrefixConfigJSON[];\n  expectations?: {\n    /** File containing a list of WPT paths to suppress. */\n    file: string;\n    /** The prefix to trim from every line of the expectations_file. */\n    prefix: string;\n  };\n  /** Expend all subtrees for provided queries */\n  fullyExpandSubtrees?: {\n    file: string;\n    prefix: string;\n  };\n  /** Allow generating long variant names that could result in long filenames on some runners. */\n  noLongPathAssert?: boolean;\n}\ntype ArgumentsPrefixConfigJSON = string | { prefixes: string[]; filters?: string[] };\n\ninterface Config {\n  suite: string;\n  out: string;\n  outVariantList?: string;\n  template: string;\n  maxChunkTimeMS: number;\n  argumentsPrefixes: ArgumentsPrefixConfig[];\n  noLongPathAssert: boolean;\n  expectations?: {\n    file: string;\n    prefix: string;\n  };\n  fullyExpandSubtrees?: {\n    file: string;\n    prefix: string;\n  };\n}\ninterface ArgumentsPrefixConfig {\n  readonly prefix: string;\n  readonly filters?: readonly TestQuery[];\n}\n\n/** Process the `argumentsPrefixes` config section into a format that will be useful later. */\nfunction* reifyArgumentsPrefixesConfig(\n  argumentsPrefixes: ArgumentsPrefixConfigJSON[]\n): Generator<ArgumentsPrefixConfig> {\n  for (const item of argumentsPrefixes) {\n    if (typeof item === 'string') {\n      yield { prefix: item, filters: undefined };\n    } else {\n      const filters = item.filters?.map(f => parseQuery(f));\n      for (const prefix of item.prefixes) {\n        yield { prefix, filters };\n      }\n    }\n  }\n}\n\nlet config: Config;\n\n(async () => {\n  // Load the config\n  switch (process.argv.length) {\n    case 3: {\n      const configFile = process.argv[2];\n      const configJSON: ConfigJSON = JSON.parse(await fs.readFile(configFile, 'utf8'));\n      const jsonFileDir = path.dirname(configFile);\n\n      config = {\n        suite: configJSON.suite,\n        out: path.resolve(jsonFileDir, configJSON.out),\n        template: path.resolve(jsonFileDir, configJSON.template),\n        maxChunkTimeMS: configJSON.maxChunkTimeMS ?? Infinity,\n        argumentsPrefixes: configJSON.argumentsPrefixes\n          ? [...reifyArgumentsPrefixesConfig(configJSON.argumentsPrefixes)]\n          : [{ prefix: '?q=' }],\n        noLongPathAssert: configJSON.noLongPathAssert ?? false,\n      };\n      if (configJSON.outVariantList) {\n        config.outVariantList = path.resolve(jsonFileDir, configJSON.outVariantList);\n      }\n      if (configJSON.expectations) {\n        config.expectations = {\n          file: path.resolve(jsonFileDir, configJSON.expectations.file),\n          prefix: configJSON.expectations.prefix,\n        };\n      }\n      if (configJSON.fullyExpandSubtrees) {\n        config.fullyExpandSubtrees = {\n          file: path.resolve(jsonFileDir, configJSON.fullyExpandSubtrees.file),\n          prefix: configJSON.fullyExpandSubtrees.prefix,\n        };\n      }\n      break;\n    }\n    case 4:\n    case 7:\n    case 8: {\n      const [\n        _nodeBinary,\n        _thisScript,\n        outFile,\n        templateFile,\n        argsPrefixesFile,\n        expectationsFile,\n        expectationsPrefix,\n        suite = 'webgpu',\n      ] = process.argv;\n\n      config = {\n        suite,\n        out: outFile,\n        template: templateFile,\n        maxChunkTimeMS: Infinity,\n        argumentsPrefixes: [{ prefix: '?q=' }],\n        noLongPathAssert: false,\n      };\n      if (process.argv.length >= 7) {\n        config.argumentsPrefixes = (await fs.readFile(argsPrefixesFile, 'utf8'))\n          .split(/\\r?\\n/)\n          .filter(a => a.length)\n          .map(prefix => ({ prefix }));\n        config.expectations = {\n          file: expectationsFile,\n          prefix: expectationsPrefix,\n        };\n      }\n      break;\n    }\n    default:\n      console.error('incorrect number of arguments!');\n      printUsageAndExit(1);\n  }\n\n  const useChunking = Number.isFinite(config.maxChunkTimeMS);\n\n  // Sort prefixes from longest to shortest\n  config.argumentsPrefixes.sort((a, b) => b.prefix.length - a.prefix.length);\n\n  // Load expectations (if any)\n  const expectations: Map<string, string[]> = await loadQueryFile(\n    config.argumentsPrefixes,\n    config.expectations\n  );\n\n  // Load fullyExpandSubtrees queries (if any)\n  const fullyExpand: Map<string, string[]> = await loadQueryFile(\n    config.argumentsPrefixes,\n    config.fullyExpandSubtrees\n  );\n\n  const loader = new DefaultTestFileLoader();\n  const lines = [];\n  const tooLongQueries = [];\n  // MAINTENANCE_TODO: Doing all this work for each prefix is inefficient,\n  // especially if there are no expectations.\n  for (const { prefix, filters } of config.argumentsPrefixes) {\n    const rootQuery = new TestQueryMultiFile(config.suite, []);\n    const subqueriesToExpand = expectations.get(prefix) ?? [];\n    if (filters) {\n      // Make sure any queries we want to filter will show up in the output.\n      // Important: This also checks that all queries actually exist (no typos, correct suite).\n      for (const q of filters) {\n        // subqueriesToExpand doesn't error if this happens, so check it first:\n        assert(q.suite === config.suite, () => `Filter is for the wrong suite: ${q}`);\n        if (q.level >= 2) {\n          // No need to expand since it will be already expanded.\n          subqueriesToExpand.push(q.toString());\n        }\n      }\n    }\n\n    const tree = await loader.loadTree(rootQuery, {\n      subqueriesToExpand,\n      fullyExpandSubtrees: fullyExpand.get(prefix),\n      maxChunkTime: config.maxChunkTimeMS,\n    });\n\n    lines.push(undefined); // output blank line between prefixes\n    const prefixComment = { comment: `Prefix: \"${prefix}\"` }; // contents will be updated later\n    if (useChunking) lines.push(prefixComment);\n\n    const filesSeen = new Set<string>();\n    const testsSeen = new Set<string>();\n    let variantCount = 0;\n\n    const alwaysExpandThroughLevel = 2; // expand to, at minimum, every test.\n    loopOverNodes: for (const { query, subtreeCounts } of tree.iterateCollapsedNodes({\n      alwaysExpandThroughLevel,\n    })) {\n      assert(query instanceof TestQueryMultiCase);\n\n      const queryMatchesFilter = (filter: TestQuery) => {\n        const compare = compareQueries(filter, query);\n        // StrictSubset should not happen because we pass these to subqueriesToExpand so\n        // they should always be expanded (and therefore iterated more finely than this).\n        assert(compare !== Ordering.StrictSubset);\n        return compare === Ordering.Equal || compare === Ordering.StrictSuperset;\n      };\n      // MAINTENANCE_TODO: Looping this inside another loop is inefficient.\n      if (filters && !filters.some(queryMatchesFilter)) {\n        continue loopOverNodes;\n      }\n\n      if (!config.noLongPathAssert) {\n        const queryString = query.toString();\n        // Check for a safe-ish path length limit. Filename must be <= 255, and on Windows the whole\n        // path must be <= 259. Leave room for e.g.:\n        // 'c:\\b\\s\\w\\xxxxxxxx\\layout-test-results\\external\\wpt\\webgpu\\cts_worker=0_q=...-actual.txt'\n        if (queryString.length > kMaxQueryLength) {\n          tooLongQueries.push(queryString);\n        }\n      }\n\n      lines.push({\n        urlQueryString: prefix + query.toString(), // \"?debug=0&q=...\"\n        comment: useChunking ? `estimated: ${subtreeCounts?.totalTimeMS.toFixed(3)} ms` : undefined,\n      });\n\n      variantCount++;\n      filesSeen.add(new TestQueryMultiTest(query.suite, query.filePathParts, []).toString());\n      testsSeen.add(\n        new TestQueryMultiCase(query.suite, query.filePathParts, query.testPathParts, {}).toString()\n      );\n    }\n    prefixComment.comment += `; ${variantCount} variants generated from ${testsSeen.size} tests in ${filesSeen.size} files`;\n  }\n\n  if (tooLongQueries.length > 0) {\n    // Try to show some representation of failures. We show one entry from each\n    // test that is different length. Without this the logger cuts off the error\n    // messages and you end up not being told about which tests have issues.\n    const queryStrings = new Map<string, string>();\n    tooLongQueries.forEach(s => {\n      const colonNdx = s.lastIndexOf(':');\n      const prefix = s.substring(0, colonNdx + 1);\n      const id = `${prefix}:${s.length}`;\n      queryStrings.set(id, s);\n    });\n    throw new Error(\n      `Generated test variant would produce too-long -actual.txt filename. Possible solutions:\n  - Reduce the length of the parts of the test query\n  - Reduce the parameterization of the test\n  - Make the test function faster and regenerate the listing_meta entry\n  - Reduce the specificity of test expectations (if you're using them)\n|<${''.padEnd(kMaxQueryLength - 4, '-')}>|\n${[...queryStrings.values()].join('\\n')}`\n    );\n  }\n\n  await generateFile(lines);\n})().catch(ex => {\n  console.log(ex.stack ?? ex.toString());\n  process.exit(1);\n});\n\nasync function loadQueryFile(\n  argumentsPrefixes: ArgumentsPrefixConfig[],\n  queryFile?: {\n    file: string;\n    prefix: string;\n  }\n): Promise<Map<string, string[]>> {\n  let lines = new Set<string>();\n  if (queryFile) {\n    lines = new Set(\n      (await fs.readFile(queryFile.file, 'utf8')).split(/\\r?\\n/).filter(l => l.length)\n    );\n  }\n\n  const result: Map<string, string[]> = new Map();\n  for (const { prefix } of argumentsPrefixes) {\n    result.set(prefix, []);\n  }\n\n  expLoop: for (const exp of lines) {\n    // Take each expectation for the longest prefix it matches.\n    for (const { prefix: argsPrefix } of argumentsPrefixes) {\n      const prefix = queryFile!.prefix + argsPrefix;\n      if (exp.startsWith(prefix)) {\n        result.get(argsPrefix)!.push(exp.substring(prefix.length));\n        continue expLoop;\n      }\n    }\n    console.log('note: ignored expectation: ' + exp);\n  }\n  return result;\n}\n\nasync function generateFile(\n  lines: Array<{ urlQueryString?: string; comment?: string } | undefined>\n): Promise<void> {\n  let result = '';\n  result += '<!-- AUTO-GENERATED - DO NOT EDIT. See WebGPU CTS: tools/gen_wpt_cts_html. -->\\n';\n\n  result += await fs.readFile(config.template, 'utf8');\n\n  const variantList = [];\n  for (const line of lines) {\n    if (line !== undefined) {\n      if (line.urlQueryString) {\n        result += `<meta name=variant content='${line.urlQueryString}'>`;\n        variantList.push(line.urlQueryString);\n      }\n      if (line.comment) result += `<!-- ${line.comment} -->`;\n    }\n    result += '\\n';\n  }\n\n  await fs.writeFile(config.out, result);\n  if (config.outVariantList) {\n    await fs.writeFile(config.outVariantList, JSON.stringify(variantList, undefined, 2));\n  }\n}\n"],"mappings":";;GAAA,SAASA,QAAQ,IAAIC,EAAE,QAAQ,IAAI,CACnC,OAAO,KAAKC,IAAI,MAAM,MAAM;AAE5B,SAASC,qBAAqB,QAAQ,4BAA4B;AAClE,SAASC,cAAc,EAAEC,QAAQ,QAAQ,8BAA8B;AACvE,SAASC,UAAU,QAAQ,iCAAiC;AAC5D;;EAEEC,kBAAkB;EAClBC,kBAAkB;EAClBC,kBAAkB;AACb,4BAA4B;AACnC,SAASC,MAAM,QAAQ,iBAAiB;;AAExC,MAAMC,eAAe,GAAG,GAAG;;AAE3B,SAASC,iBAAiBA,CAACC,EAAU,EAAS;EAC5CC,OAAO,CAACC,KAAK,CAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC;EACAC,OAAO,CAACC,IAAI,CAACJ,EAAE,CAAC;AAClB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8DA;AACA,UAAUK,4BAA4BA;AACpCC,iBAA8C;AACZ;EAClC,KAAK,MAAMC,IAAI,IAAID,iBAAiB,EAAE;IACpC,IAAI,OAAOC,IAAI,KAAK,QAAQ,EAAE;MAC5B,MAAM,EAAEC,MAAM,EAAED,IAAI,EAAEE,OAAO,EAAEC,SAAS,CAAC,CAAC;IAC5C,CAAC,MAAM;MACL,MAAMD,OAAO,GAAGF,IAAI,CAACE,OAAO,EAAEE,GAAG,CAAC,CAAAC,CAAC,KAAInB,UAAU,CAACmB,CAAC,CAAC,CAAC;MACrD,KAAK,MAAMJ,MAAM,IAAID,IAAI,CAACM,QAAQ,EAAE;QAClC,MAAM,EAAEL,MAAM,EAAEC,OAAO,CAAC,CAAC;MAC3B;IACF;EACF;AACF;;AAEA,IAAIK,MAAc;;AAElB,CAAC,YAAY;EACX;EACA,QAAQX,OAAO,CAACY,IAAI,CAACC,MAAM;IACzB,KAAK,CAAC,CAAE;QACN,MAAMC,UAAU,GAAGd,OAAO,CAACY,IAAI,CAAC,CAAC,CAAC;QAClC,MAAMG,UAAsB,GAAGC,IAAI,CAACC,KAAK,CAAC,MAAMhC,EAAE,CAACiC,QAAQ,CAACJ,UAAU,EAAE,MAAM,CAAC,CAAC;QAChF,MAAMK,WAAW,GAAGjC,IAAI,CAACkC,OAAO,CAACN,UAAU,CAAC;;QAE5CH,MAAM,GAAG;UACPU,KAAK,EAAEN,UAAU,CAACM,KAAK;UACvBC,GAAG,EAAEpC,IAAI,CAACqC,OAAO,CAACJ,WAAW,EAAEJ,UAAU,CAACO,GAAG,CAAC;UAC9CE,QAAQ,EAAEtC,IAAI,CAACqC,OAAO,CAACJ,WAAW,EAAEJ,UAAU,CAACS,QAAQ,CAAC;UACxDC,cAAc,EAAEV,UAAU,CAACU,cAAc,IAAIC,QAAQ;UACrDvB,iBAAiB,EAAEY,UAAU,CAACZ,iBAAiB;UAC3C,CAAC,GAAGD,4BAA4B,CAACa,UAAU,CAACZ,iBAAiB,CAAC,CAAC;UAC/D,CAAC,EAAEE,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC;UACvBsB,gBAAgB,EAAEZ,UAAU,CAACY,gBAAgB,IAAI;QACnD,CAAC;QACD,IAAIZ,UAAU,CAACa,cAAc,EAAE;UAC7BjB,MAAM,CAACiB,cAAc,GAAG1C,IAAI,CAACqC,OAAO,CAACJ,WAAW,EAAEJ,UAAU,CAACa,cAAc,CAAC;QAC9E;QACA,IAAIb,UAAU,CAACc,YAAY,EAAE;UAC3BlB,MAAM,CAACkB,YAAY,GAAG;YACpBC,IAAI,EAAE5C,IAAI,CAACqC,OAAO,CAACJ,WAAW,EAAEJ,UAAU,CAACc,YAAY,CAACC,IAAI,CAAC;YAC7DzB,MAAM,EAAEU,UAAU,CAACc,YAAY,CAACxB;UAClC,CAAC;QACH;QACA,IAAIU,UAAU,CAACgB,mBAAmB,EAAE;UAClCpB,MAAM,CAACoB,mBAAmB,GAAG;YAC3BD,IAAI,EAAE5C,IAAI,CAACqC,OAAO,CAACJ,WAAW,EAAEJ,UAAU,CAACgB,mBAAmB,CAACD,IAAI,CAAC;YACpEzB,MAAM,EAAEU,UAAU,CAACgB,mBAAmB,CAAC1B;UACzC,CAAC;QACH;QACA;MACF;IACA,KAAK,CAAC;IACN,KAAK,CAAC;IACN,KAAK,CAAC,CAAE;QACN,MAAM;QACJ2B,WAAW;QACXC,WAAW;QACXC,OAAO;QACPC,YAAY;QACZC,gBAAgB;QAChBC,gBAAgB;QAChBC,kBAAkB;QAClBjB,KAAK,GAAG,QAAQ,CACjB;QAAGrB,OAAO,CAACY,IAAI;;QAEhBD,MAAM,GAAG;UACPU,KAAK;UACLC,GAAG,EAAEY,OAAO;UACZV,QAAQ,EAAEW,YAAY;UACtBV,cAAc,EAAEC,QAAQ;UACxBvB,iBAAiB,EAAE,CAAC,EAAEE,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC;UACtCsB,gBAAgB,EAAE;QACpB,CAAC;QACD,IAAI3B,OAAO,CAACY,IAAI,CAACC,MAAM,IAAI,CAAC,EAAE;UAC5BF,MAAM,CAACR,iBAAiB,GAAG,CAAC,MAAMlB,EAAE,CAACiC,QAAQ,CAACkB,gBAAgB,EAAE,MAAM,CAAC;UACpEG,KAAK,CAAC,OAAO,CAAC;UACdC,MAAM,CAAC,CAAAC,CAAC,KAAIA,CAAC,CAAC5B,MAAM,CAAC;UACrBL,GAAG,CAAC,CAAAH,MAAM,MAAK,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC;UAC9BM,MAAM,CAACkB,YAAY,GAAG;YACpBC,IAAI,EAAEO,gBAAgB;YACtBhC,MAAM,EAAEiC;UACV,CAAC;QACH;QACA;MACF;IACA;MACExC,OAAO,CAACC,KAAK,CAAC,gCAAgC,CAAC;MAC/CH,iBAAiB,CAAC,CAAC,CAAC;EACxB;;EAEA,MAAM8C,WAAW,GAAGC,MAAM,CAACC,QAAQ,CAACjC,MAAM,CAACc,cAAc,CAAC;;EAE1D;EACAd,MAAM,CAACR,iBAAiB,CAAC0C,IAAI,CAAC,CAACJ,CAAC,EAAEK,CAAC,KAAKA,CAAC,CAACzC,MAAM,CAACQ,MAAM,GAAG4B,CAAC,CAACpC,MAAM,CAACQ,MAAM,CAAC;;EAE1E;EACA,MAAMgB,YAAmC,GAAG,MAAMkB,aAAa;IAC7DpC,MAAM,CAACR,iBAAiB;IACxBQ,MAAM,CAACkB;EACT,CAAC;;EAED;EACA,MAAMmB,WAAkC,GAAG,MAAMD,aAAa;IAC5DpC,MAAM,CAACR,iBAAiB;IACxBQ,MAAM,CAACoB;EACT,CAAC;;EAED,MAAMkB,MAAM,GAAG,IAAI9D,qBAAqB,CAAC,CAAC;EAC1C,MAAM+D,KAAK,GAAG,EAAE;EAChB,MAAMC,cAAc,GAAG,EAAE;EACzB;EACA;EACA,KAAK,MAAM,EAAE9C,MAAM,EAAEC,OAAO,CAAC,CAAC,IAAIK,MAAM,CAACR,iBAAiB,EAAE;IAC1D,MAAMiD,SAAS,GAAG,IAAI5D,kBAAkB,CAACmB,MAAM,CAACU,KAAK,EAAE,EAAE,CAAC;IAC1D,MAAMgC,kBAAkB,GAAGxB,YAAY,CAACyB,GAAG,CAACjD,MAAM,CAAC,IAAI,EAAE;IACzD,IAAIC,OAAO,EAAE;MACX;MACA;MACA,KAAK,MAAMiD,CAAC,IAAIjD,OAAO,EAAE;QACvB;QACAZ,MAAM,CAAC6D,CAAC,CAAClC,KAAK,KAAKV,MAAM,CAACU,KAAK,EAAE,MAAO,kCAAiCkC,CAAE,EAAC,CAAC;QAC7E,IAAIA,CAAC,CAACC,KAAK,IAAI,CAAC,EAAE;UAChB;UACAH,kBAAkB,CAACI,IAAI,CAACF,CAAC,CAACG,QAAQ,CAAC,CAAC,CAAC;QACvC;MACF;IACF;;IAEA,MAAMC,IAAI,GAAG,MAAMV,MAAM,CAACW,QAAQ,CAACR,SAAS,EAAE;MAC5CC,kBAAkB;MAClBtB,mBAAmB,EAAEiB,WAAW,CAACM,GAAG,CAACjD,MAAM,CAAC;MAC5CwD,YAAY,EAAElD,MAAM,CAACc;IACvB,CAAC,CAAC;;IAEFyB,KAAK,CAACO,IAAI,CAAClD,SAAS,CAAC,CAAC,CAAC;IACvB,MAAMuD,aAAa,GAAG,EAAEC,OAAO,EAAG,YAAW1D,MAAO,GAAE,CAAC,CAAC,CAAC,CAAC;IAC1D,IAAIqC,WAAW,EAAEQ,KAAK,CAACO,IAAI,CAACK,aAAa,CAAC;;IAE1C,MAAME,SAAS,GAAG,IAAIC,GAAG,CAAS,CAAC;IACnC,MAAMC,SAAS,GAAG,IAAID,GAAG,CAAS,CAAC;IACnC,IAAIE,YAAY,GAAG,CAAC;;IAEpB,MAAMC,wBAAwB,GAAG,CAAC,CAAC,CAAC;IACpCC,aAAa,EAAE,KAAK,MAAM,EAAEC,KAAK,EAAEC,aAAa,CAAC,CAAC,IAAIZ,IAAI,CAACa,qBAAqB,CAAC;MAC/EJ;IACF,CAAC,CAAC,EAAE;MACF1E,MAAM,CAAC4E,KAAK,YAAY/E,kBAAkB,CAAC;;MAE3C,MAAMkF,kBAAkB,GAAGA,CAACjC,MAAiB,KAAK;QAChD,MAAMkC,OAAO,GAAGtF,cAAc,CAACoD,MAAM,EAAE8B,KAAK,CAAC;QAC7C;QACA;QACA5E,MAAM,CAACgF,OAAO,KAAKrF,QAAQ,CAACsF,YAAY,CAAC;QACzC,OAAOD,OAAO,KAAKrF,QAAQ,CAACuF,KAAK,IAAIF,OAAO,KAAKrF,QAAQ,CAACwF,cAAc;MAC1E,CAAC;MACD;MACA,IAAIvE,OAAO,IAAI,CAACA,OAAO,CAACwE,IAAI,CAACL,kBAAkB,CAAC,EAAE;QAChD,SAASJ,aAAa;MACxB;;MAEA,IAAI,CAAC1D,MAAM,CAACgB,gBAAgB,EAAE;QAC5B,MAAMoD,WAAW,GAAGT,KAAK,CAACZ,QAAQ,CAAC,CAAC;QACpC;QACA;QACA;QACA,IAAIqB,WAAW,CAAClE,MAAM,GAAGlB,eAAe,EAAE;UACxCwD,cAAc,CAACM,IAAI,CAACsB,WAAW,CAAC;QAClC;MACF;;MAEA7B,KAAK,CAACO,IAAI,CAAC;QACTuB,cAAc,EAAE3E,MAAM,GAAGiE,KAAK,CAACZ,QAAQ,CAAC,CAAC,EAAE;QAC3CK,OAAO,EAAErB,WAAW,GAAI,cAAa6B,aAAa,EAAEU,WAAW,CAACC,OAAO,CAAC,CAAC,CAAE,KAAI,GAAG3E;MACpF,CAAC,CAAC;;MAEF4D,YAAY,EAAE;MACdH,SAAS,CAACmB,GAAG,CAAC,IAAI1F,kBAAkB,CAAC6E,KAAK,CAACjD,KAAK,EAAEiD,KAAK,CAACc,aAAa,EAAE,EAAE,CAAC,CAAC1B,QAAQ,CAAC,CAAC,CAAC;MACtFQ,SAAS,CAACiB,GAAG;QACX,IAAI5F,kBAAkB,CAAC+E,KAAK,CAACjD,KAAK,EAAEiD,KAAK,CAACc,aAAa,EAAEd,KAAK,CAACe,aAAa,EAAE,CAAC,CAAC,CAAC,CAAC3B,QAAQ,CAAC;MAC7F,CAAC;IACH;IACAI,aAAa,CAACC,OAAO,IAAK,KAAII,YAAa,4BAA2BD,SAAS,CAACoB,IAAK,aAAYtB,SAAS,CAACsB,IAAK,QAAO;EACzH;;EAEA,IAAInC,cAAc,CAACtC,MAAM,GAAG,CAAC,EAAE;IAC7B;IACA;IACA;IACA,MAAM0E,YAAY,GAAG,IAAIC,GAAG,CAAiB,CAAC;IAC9CrC,cAAc,CAACsC,OAAO,CAAC,CAAAC,CAAC,KAAI;MAC1B,MAAMC,QAAQ,GAAGD,CAAC,CAACE,WAAW,CAAC,GAAG,CAAC;MACnC,MAAMvF,MAAM,GAAGqF,CAAC,CAACG,SAAS,CAAC,CAAC,EAAEF,QAAQ,GAAG,CAAC,CAAC;MAC3C,MAAMG,EAAE,GAAI,GAAEzF,MAAO,IAAGqF,CAAC,CAAC7E,MAAO,EAAC;MAClC0E,YAAY,CAACQ,GAAG,CAACD,EAAE,EAAEJ,CAAC,CAAC;IACzB,CAAC,CAAC;IACF,MAAM,IAAIM,KAAK;MACZ;AACP;AACA;AACA;AACA;AACA,IAAI,EAAE,CAACC,MAAM,CAACtG,eAAe,GAAG,CAAC,EAAE,GAAG,CAAE;AACxC,EAAE,CAAC,GAAG4F,YAAY,CAACW,MAAM,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAE;IACpC,CAAC;EACH;;EAEA,MAAMC,YAAY,CAAClD,KAAK,CAAC;AAC3B,CAAC,EAAE,CAAC,CAACmD,KAAK,CAAC,CAAAC,EAAE,KAAI;EACfxG,OAAO,CAACyG,GAAG,CAACD,EAAE,CAACE,KAAK,IAAIF,EAAE,CAAC5C,QAAQ,CAAC,CAAC,CAAC;EACtC1D,OAAO,CAACC,IAAI,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC;;AAEF,eAAe8C,aAAaA;AAC1B5C,iBAA0C;AAC1CsG,SAGC;;;;AAC+B;EAChC,IAAIvD,KAAK,GAAG,IAAIe,GAAG,CAAS,CAAC;EAC7B,IAAIwC,SAAS,EAAE;IACbvD,KAAK,GAAG,IAAIe,GAAG;MACb,CAAC,MAAMhF,EAAE,CAACiC,QAAQ,CAACuF,SAAS,CAAC3E,IAAI,EAAE,MAAM,CAAC,EAAES,KAAK,CAAC,OAAO,CAAC,CAACC,MAAM,CAAC,CAAAkE,CAAC,KAAIA,CAAC,CAAC7F,MAAM;IACjF,CAAC;EACH;;EAEA,MAAM8F,MAA6B,GAAG,IAAInB,GAAG,CAAC,CAAC;EAC/C,KAAK,MAAM,EAAEnF,MAAM,CAAC,CAAC,IAAIF,iBAAiB,EAAE;IAC1CwG,MAAM,CAACZ,GAAG,CAAC1F,MAAM,EAAE,EAAE,CAAC;EACxB;;EAEAuG,OAAO,EAAE,KAAK,MAAMC,GAAG,IAAI3D,KAAK,EAAE;IAChC;IACA,KAAK,MAAM,EAAE7C,MAAM,EAAEyG,UAAU,CAAC,CAAC,IAAI3G,iBAAiB,EAAE;MACtD,MAAME,MAAM,GAAGoG,SAAS,CAAEpG,MAAM,GAAGyG,UAAU;MAC7C,IAAID,GAAG,CAACE,UAAU,CAAC1G,MAAM,CAAC,EAAE;QAC1BsG,MAAM,CAACrD,GAAG,CAACwD,UAAU,CAAC,CAAErD,IAAI,CAACoD,GAAG,CAAChB,SAAS,CAACxF,MAAM,CAACQ,MAAM,CAAC,CAAC;QAC1D,SAAS+F,OAAO;MAClB;IACF;IACA9G,OAAO,CAACyG,GAAG,CAAC,6BAA6B,GAAGM,GAAG,CAAC;EAClD;EACA,OAAOF,MAAM;AACf;;AAEA,eAAeP,YAAYA;AACzBlD,KAAuE;AACxD;EACf,IAAIyD,MAAM,GAAG,EAAE;EACfA,MAAM,IAAI,kFAAkF;;EAE5FA,MAAM,IAAI,MAAM1H,EAAE,CAACiC,QAAQ,CAACP,MAAM,CAACa,QAAQ,EAAE,MAAM,CAAC;;EAEpD,MAAMwF,WAAW,GAAG,EAAE;EACtB,KAAK,MAAMC,IAAI,IAAI/D,KAAK,EAAE;IACxB,IAAI+D,IAAI,KAAK1G,SAAS,EAAE;MACtB,IAAI0G,IAAI,CAACjC,cAAc,EAAE;QACvB2B,MAAM,IAAK,+BAA8BM,IAAI,CAACjC,cAAe,IAAG;QAChEgC,WAAW,CAACvD,IAAI,CAACwD,IAAI,CAACjC,cAAc,CAAC;MACvC;MACA,IAAIiC,IAAI,CAAClD,OAAO,EAAE4C,MAAM,IAAK,QAAOM,IAAI,CAAClD,OAAQ,MAAK;IACxD;IACA4C,MAAM,IAAI,IAAI;EAChB;;EAEA,MAAM1H,EAAE,CAACiI,SAAS,CAACvG,MAAM,CAACW,GAAG,EAAEqF,MAAM,CAAC;EACtC,IAAIhG,MAAM,CAACiB,cAAc,EAAE;IACzB,MAAM3C,EAAE,CAACiI,SAAS,CAACvG,MAAM,CAACiB,cAAc,EAAEZ,IAAI,CAACmG,SAAS,CAACH,WAAW,EAAEzG,SAAS,EAAE,CAAC,CAAC,CAAC;EACtF;AACF"}