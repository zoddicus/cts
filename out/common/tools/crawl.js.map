{"version":3,"file":"crawl.js","names":["fs","path","loadMetadataForSuite","TestQueryMultiCase","TestQueryMultiFile","validQueryPart","assert","unreachable","specFileSuffix","__filename","endsWith","crawlFilesRecursively","dir","subpathInfo","Promise","all","promises","readdir","map","d","p","join","stats","stat","isDirectory","isFile","files","filter","i","sep","concat","reduce","a","b","resolve","crawl","suiteDir","validate","existsSync","Error","validateTimingsEntries","metadata","testsFoundInFiles","Set","filesToEnumerate","f","relative","replace","sort","entries","file","filepathWithoutExtension","substring","length","pathSegments","split","suite","basename","filename","process","env","STANDALONE_DEV_SERVER","mod","description","undefined","g","testPath","collectNonEmptyTests","testQuery","toString","add","test","push","dirname","readme","readFileSync","trim","failed","zeroEntries","staleEntries","metadataKey","metadataValue","Object","startsWith","subcaseMS","has","console","warn","error","missingEntries","makeListing"],"sources":["../../../src/common/tools/crawl.ts"],"sourcesContent":["// Node can look at the filesystem, but JS in the browser can't.\n// This crawls the file tree under src/suites/${suite} to generate a (non-hierarchical) static\n// listing file that can then be used in the browser to load the modules containing the tests.\n\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nimport { loadMetadataForSuite } from '../framework/metadata.js';\nimport { SpecFile } from '../internal/file_loader.js';\nimport { TestQueryMultiCase, TestQueryMultiFile } from '../internal/query/query.js';\nimport { validQueryPart } from '../internal/query/validQueryPart.js';\nimport { TestSuiteListingEntry, TestSuiteListing } from '../internal/test_suite_listing.js';\nimport { assert, unreachable } from '../util/util.js';\n\nconst specFileSuffix = __filename.endsWith('.ts') ? '.spec.ts' : '.spec.js';\n\nasync function crawlFilesRecursively(dir: string): Promise<string[]> {\n  const subpathInfo = await Promise.all(\n    (await fs.promises.readdir(dir)).map(async d => {\n      const p = path.join(dir, d);\n      const stats = await fs.promises.stat(p);\n      return {\n        path: p,\n        isDirectory: stats.isDirectory(),\n        isFile: stats.isFile(),\n      };\n    })\n  );\n\n  const files = subpathInfo\n    .filter(\n      i =>\n        i.isFile &&\n        (i.path.endsWith(specFileSuffix) ||\n          i.path.endsWith(`${path.sep}README.txt`) ||\n          i.path === 'README.txt')\n    )\n    .map(i => i.path);\n\n  return files.concat(\n    await subpathInfo\n      .filter(i => i.isDirectory)\n      .map(i => crawlFilesRecursively(i.path))\n      .reduce(async (a, b) => (await a).concat(await b), Promise.resolve([]))\n  );\n}\n\nexport async function crawl(suiteDir: string, validate: boolean): Promise<TestSuiteListingEntry[]> {\n  if (!fs.existsSync(suiteDir)) {\n    throw new Error(`Could not find suite: ${suiteDir}`);\n  }\n\n  let validateTimingsEntries;\n  if (validate) {\n    const metadata = loadMetadataForSuite(suiteDir);\n    if (metadata) {\n      validateTimingsEntries = {\n        metadata,\n        testsFoundInFiles: new Set<string>(),\n      };\n    }\n  }\n\n  // Crawl files and convert paths to be POSIX-style, relative to suiteDir.\n  const filesToEnumerate = (await crawlFilesRecursively(suiteDir))\n    .map(f => path.relative(suiteDir, f).replace(/\\\\/g, '/'))\n    .sort();\n\n  const entries: TestSuiteListingEntry[] = [];\n  for (const file of filesToEnumerate) {\n    // |file| is the suite-relative file path.\n    if (file.endsWith(specFileSuffix)) {\n      const filepathWithoutExtension = file.substring(0, file.length - specFileSuffix.length);\n      const pathSegments = filepathWithoutExtension.split('/');\n\n      const suite = path.basename(suiteDir);\n\n      if (validate) {\n        const filename = `../../${suite}/${filepathWithoutExtension}.spec.js`;\n\n        assert(!process.env.STANDALONE_DEV_SERVER);\n        const mod = (await import(filename)) as SpecFile;\n        assert(mod.description !== undefined, 'Test spec file missing description: ' + filename);\n        assert(mod.g !== undefined, 'Test spec file missing TestGroup definition: ' + filename);\n\n        mod.g.validate(new TestQueryMultiFile(suite, pathSegments));\n\n        for (const { testPath } of mod.g.collectNonEmptyTests()) {\n          const testQuery = new TestQueryMultiCase(suite, pathSegments, testPath, {}).toString();\n          if (validateTimingsEntries) {\n            validateTimingsEntries.testsFoundInFiles.add(testQuery);\n          }\n        }\n      }\n\n      for (const p of pathSegments) {\n        assert(validQueryPart.test(p), `Invalid directory name ${p}; must match ${validQueryPart}`);\n      }\n      entries.push({ file: pathSegments });\n    } else if (path.basename(file) === 'README.txt') {\n      const dirname = path.dirname(file);\n      const readme = fs.readFileSync(path.join(suiteDir, file), 'utf8').trim();\n\n      const pathSegments = dirname !== '.' ? dirname.split('/') : [];\n      entries.push({ file: pathSegments, readme });\n    } else {\n      unreachable(`Matched an unrecognized filename ${file}`);\n    }\n  }\n\n  if (validateTimingsEntries) {\n    let failed = false;\n\n    const zeroEntries = [];\n    const staleEntries = [];\n    for (const [metadataKey, metadataValue] of Object.entries(validateTimingsEntries.metadata)) {\n      if (metadataKey.startsWith('_')) {\n        // Ignore json \"_comments\".\n        continue;\n      }\n      if (metadataValue.subcaseMS <= 0) {\n        zeroEntries.push(metadataKey);\n      }\n      if (!validateTimingsEntries.testsFoundInFiles.has(metadataKey)) {\n        staleEntries.push(metadataKey);\n      }\n    }\n    if (zeroEntries.length) {\n      console.warn('WARNING: subcaseMSâ‰¤0 found in listing_meta.json (allowed, but try to avoid):');\n      for (const metadataKey of zeroEntries) {\n        console.warn(`  ${metadataKey}`);\n      }\n    }\n    if (staleEntries.length) {\n      console.error('ERROR: Non-existent tests found in listing_meta.json:');\n      for (const metadataKey of staleEntries) {\n        console.error(`  ${metadataKey}`);\n      }\n      failed = true;\n    }\n\n    const missingEntries = [];\n    for (const metadataKey of validateTimingsEntries.testsFoundInFiles) {\n      if (!(metadataKey in validateTimingsEntries.metadata)) {\n        missingEntries.push(metadataKey);\n      }\n    }\n    if (missingEntries.length) {\n      console.error(\n        'ERROR: Tests missing from listing_meta.json. Please add the new tests (See docs/adding_timing_metadata.md):'\n      );\n      for (const metadataKey of missingEntries) {\n        console.error(`  ${metadataKey}`);\n        failed = true;\n      }\n    }\n    assert(!failed);\n  }\n\n  return entries;\n}\n\nexport function makeListing(filename: string): Promise<TestSuiteListing> {\n  // Don't validate. This path is only used for the dev server and running tests with Node.\n  // Validation is done for listing generation and presubmit.\n  return crawl(path.dirname(filename), false);\n}\n"],"mappings":"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"}