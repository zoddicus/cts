{"version":3,"file":"gen_cache.js","names":["fs","path","process","dataCache","setIsBuildingDataCache","crc32","toHexString","parseImports","usage","rc","console","error","exit","outDir","forceRebuild","mode","verbose","nonFlagsArgs","arg","argv","startsWith","log","push","length","setStore","load","Promise","resolve","reject","readFile","err","data","message","specFileSuffix","__filename","endsWith","glob","dir","ext","files","file","readdirSync","statSync","isDirectory","child","isFile","SourceHasher","hashOf","u32Array","hashFile","toString","existsSync","substring","cached","hashes","get","undefined","set","content","readFileSync","encoding","normalized","replace","hash","importPath","importHash","hashCombine","a","b","Map","Uint32Array","suiteDirs","slice","suiteDir","build","fileHashJsonPath","fileHashes","json","JSON","parse","filesToEnumerate","map","p","sort","fileHasher","cacheablePathToTS","errors","pathWithoutExtension","mod","d","serialize","cacheable","existing","outPath","fileHash","serialized","mkdirSync","dirname","recursive","writeFileSync","rmSync","stringify"],"sources":["../../../src/common/tools/gen_cache.ts"],"sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport * as process from 'process';\n\nimport { Cacheable, dataCache, setIsBuildingDataCache } from '../framework/data_cache.js';\nimport { crc32, toHexString } from '../util/crc32.js';\nimport { parseImports } from '../util/parse_imports.js';\n\nfunction usage(rc: number): void {\n  console.error(`Usage: tools/gen_cache [options] [SUITE_DIRS...]\n\nFor each suite in SUITE_DIRS, pre-compute data that is expensive to generate\nat runtime and store it under 'src/resources/cache'. If the data file is found\nthen the DataCache will load this instead of building the expensive data at CTS\nruntime.\nNote: Due to differences in gzip compression, different versions of node can\nproduce radically different binary cache files. gen_cache uses the hashes of the\nsource files to determine whether a cache file is 'up to date'. This is faster\nand does not depend on the compressed output.\n\nOptions:\n  --help          Print this message and exit.\n  --list          Print the list of output files without writing them.\n  --force         Rebuild cache even if they're up to date\n  --validate      Check the cache is up to date\n  --verbose       Print each action taken.\n`);\n  process.exit(rc);\n}\n\n// Where the cache is generated\nconst outDir = 'src/resources/cache';\n\nlet forceRebuild = false;\nlet mode: 'emit' | 'list' | 'validate' = 'emit';\nlet verbose = false;\n\nconst nonFlagsArgs: string[] = [];\n\nfor (const arg of process.argv) {\n  if (arg.startsWith('-')) {\n    switch (arg) {\n      case '--list': {\n        mode = 'list';\n        break;\n      }\n      case '--help': {\n        usage(0);\n        break;\n      }\n      case '--force': {\n        forceRebuild = true;\n        break;\n      }\n      case '--verbose': {\n        verbose = true;\n        break;\n      }\n      case '--validate': {\n        mode = 'validate';\n        break;\n      }\n      default: {\n        console.log('unrecognized flag: ', arg);\n        usage(1);\n      }\n    }\n  } else {\n    nonFlagsArgs.push(arg);\n  }\n}\n\nif (nonFlagsArgs.length < 3) {\n  usage(0);\n}\n\ndataCache.setStore({\n  load: (path: string) => {\n    return new Promise<Uint8Array>((resolve, reject) => {\n      fs.readFile(`data/${path}`, (err, data) => {\n        if (err !== null) {\n          reject(err.message);\n        } else {\n          resolve(data);\n        }\n      });\n    });\n  },\n});\nsetIsBuildingDataCache();\n\nconst specFileSuffix = __filename.endsWith('.ts') ? '.spec.ts' : '.spec.js';\n\n/**\n * @returns a list of all the files under 'dir' that has the given extension\n * @param dir the directory to search\n * @param ext the extension of the files to find\n */\nfunction glob(dir: string, ext: string) {\n  const files: string[] = [];\n  for (const file of fs.readdirSync(dir)) {\n    const path = `${dir}/${file}`;\n    if (fs.statSync(path).isDirectory()) {\n      for (const child of glob(path, ext)) {\n        files.push(`${file}/${child}`);\n      }\n    }\n    if (path.endsWith(ext) && fs.statSync(path).isFile()) {\n      files.push(file);\n    }\n  }\n  return files;\n}\n\n/**\n * SourceHasher is a utility for producing a hash of a source .ts file and its imported source files.\n */\nclass SourceHasher {\n  /**\n   * @param path the source file path\n   * @returns a hash of the source file and all of its imported dependencies.\n   */\n  public hashOf(path: string) {\n    this.u32Array[0] = this.hashFile(path);\n    return this.u32Array[0].toString(16);\n  }\n\n  hashFile(path: string): number {\n    if (!fs.existsSync(path) && path.endsWith('.js')) {\n      path = path.substring(0, path.length - 2) + 'ts';\n    }\n\n    const cached = this.hashes.get(path);\n    if (cached !== undefined) {\n      return cached;\n    }\n\n    this.hashes.set(path, 0); // Store a zero hash to handle cyclic imports\n\n    const content = fs.readFileSync(path, { encoding: 'utf-8' });\n    const normalized = content.replace('\\r\\n', '\\n');\n    let hash = crc32(normalized);\n    for (const importPath of parseImports(path, normalized)) {\n      const importHash = this.hashFile(importPath);\n      hash = this.hashCombine(hash, importHash);\n    }\n\n    this.hashes.set(path, hash);\n    return hash;\n  }\n\n  /** Simple non-cryptographic hash combiner */\n  hashCombine(a: number, b: number): number {\n    return crc32(`${toHexString(a)} ${toHexString(b)}`);\n  }\n\n  private hashes = new Map<string, number>();\n  private u32Array = new Uint32Array(1);\n}\n\nvoid (async () => {\n  const suiteDirs = nonFlagsArgs.slice(2); // skip <exe> <js>\n  for (const suiteDir of suiteDirs) {\n    await build(suiteDir);\n  }\n})();\n\nasync function build(suiteDir: string) {\n  if (!fs.existsSync(suiteDir)) {\n    console.error(`Could not find ${suiteDir}`);\n    process.exit(1);\n  }\n\n  // Load  hashes.json\n  const fileHashJsonPath = `${outDir}/hashes.json`;\n  let fileHashes: Record<string, string> = {};\n  if (fs.existsSync(fileHashJsonPath)) {\n    const json = fs.readFileSync(fileHashJsonPath, { encoding: 'utf8' });\n    fileHashes = JSON.parse(json);\n  }\n\n  // Crawl files and convert paths to be POSIX-style, relative to suiteDir.\n  const filesToEnumerate = glob(suiteDir, specFileSuffix)\n    .map(p => `${suiteDir}/${p}`)\n    .sort();\n\n  const fileHasher = new SourceHasher();\n  const cacheablePathToTS = new Map<string, string>();\n  const errors: Array<string> = [];\n\n  for (const file of filesToEnumerate) {\n    const pathWithoutExtension = file.substring(0, file.length - 3);\n    const mod = await import(`../../../${pathWithoutExtension}.js`);\n    if (mod.d?.serialize !== undefined) {\n      const cacheable = mod.d as Cacheable<unknown>;\n\n      {\n        // Check for collisions\n        const existing = cacheablePathToTS.get(cacheable.path);\n        if (existing !== undefined) {\n          errors.push(\n            `'${cacheable.path}' is emitted by both:\n    '${existing}'\nand\n    '${file}'`\n          );\n        }\n        cacheablePathToTS.set(cacheable.path, file);\n      }\n\n      const outPath = `${outDir}/${cacheable.path}`;\n      const fileHash = fileHasher.hashOf(file);\n\n      switch (mode) {\n        case 'emit': {\n          if (!forceRebuild && fileHashes[cacheable.path] === fileHash) {\n            if (verbose) {\n              console.log(`'${outPath}' is up to date`);\n            }\n            continue;\n          }\n          console.log(`building '${outPath}'`);\n          const data = await cacheable.build();\n          const serialized = await cacheable.serialize(data);\n          fs.mkdirSync(path.dirname(outPath), { recursive: true });\n          fs.writeFileSync(outPath, serialized, 'binary');\n          fileHashes[cacheable.path] = fileHash;\n          break;\n        }\n        case 'list': {\n          console.log(outPath);\n          break;\n        }\n        case 'validate': {\n          if (fileHashes[cacheable.path] !== fileHash) {\n            errors.push(\n              `'${outPath}' needs rebuilding. Generate with 'npx grunt run:generate-cache'`\n            );\n          } else if (verbose) {\n            console.log(`'${outPath}' is up to date`);\n          }\n        }\n      }\n    }\n  }\n\n  // Check that there aren't stale files in the cache directory\n  for (const file of glob(outDir, '.bin')) {\n    if (cacheablePathToTS.get(file) === undefined) {\n      switch (mode) {\n        case 'emit':\n          fs.rmSync(file);\n          break;\n        case 'validate':\n          errors.push(\n            `cache file '${outDir}/${file}' is no longer generated. Remove with 'npx grunt run:generate-cache'`\n          );\n          break;\n      }\n    }\n  }\n\n  // Update hashes.json\n  if (mode === 'emit') {\n    const json = JSON.stringify(fileHashes, undefined, '  ');\n    fs.writeFileSync(fileHashJsonPath, json, { encoding: 'utf8' });\n  }\n\n  if (errors.length > 0) {\n    for (const error of errors) {\n      console.error(error);\n    }\n    process.exit(1);\n  }\n}\n"],"mappings":"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"}