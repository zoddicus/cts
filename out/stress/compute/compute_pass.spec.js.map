{"version":3,"file":"compute_pass.spec.js","names":["description","makeTestGroup","assert","iterRange","GPUTest","g","test","desc","fn","t","kNumElements","data","Uint32Array","x","buffer","makeBufferWithContents","GPUBufferUsage","STORAGE","COPY_SRC","pipeline","device","createComputePipeline","layout","compute","module","createShaderModule","code","entryPoint","bindGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","kNumIterations","i","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","queue","submit","finish","expectGPUBufferValuesEqual","stages","buffer1","buffer2","buffer1Binding","buffer2Binding","kTotalAddition","kDimensions","forEach","limits","maxComputeWorkgroupsPerDimension","onSubmittedWorkDone"],"sources":["../../../src/stress/compute/compute_pass.spec.ts"],"sourcesContent":["export const description = `\nStress tests covering GPUComputePassEncoder usage.\n`;\n\nimport { makeTestGroup } from '../../common/framework/test_group.js';\nimport { assert, iterRange } from '../../common/util/util.js';\nimport { GPUTest } from '../../webgpu/gpu_test.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('many')\n  .desc(\n    `Tests execution of a huge number of compute passes using the same\nGPUComputePipeline.`\n  )\n  .fn(t => {\n    const kNumElements = 64;\n    const data = new Uint32Array([...iterRange(kNumElements, x => x)]);\n    const buffer = t.makeBufferWithContents(data, GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC);\n    const pipeline = t.device.createComputePipeline({\n      layout: 'auto',\n      compute: {\n        module: t.device.createShaderModule({\n          code: `\n            struct Buffer { data: array<u32>, };\n            @group(0) @binding(0) var<storage, read_write> buffer: Buffer;\n            @compute @workgroup_size(1) fn main(\n                @builtin(global_invocation_id) id: vec3<u32>) {\n              buffer.data[id.x] = buffer.data[id.x] + 1u;\n            }\n          `,\n        }),\n        entryPoint: 'main',\n      },\n    });\n    const bindGroup = t.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [{ binding: 0, resource: { buffer } }],\n    });\n    const kNumIterations = 250_000;\n    for (let i = 0; i < kNumIterations; ++i) {\n      const encoder = t.device.createCommandEncoder();\n      const pass = encoder.beginComputePass();\n      pass.setPipeline(pipeline);\n      pass.setBindGroup(0, bindGroup);\n      pass.dispatchWorkgroups(kNumElements);\n      pass.end();\n      t.device.queue.submit([encoder.finish()]);\n    }\n    t.expectGPUBufferValuesEqual(\n      buffer,\n      new Uint32Array([...iterRange(kNumElements, x => x + kNumIterations)])\n    );\n  });\n\ng.test('pipeline_churn')\n  .desc(\n    `Tests execution of a huge number of compute passes which each use a different\nGPUComputePipeline.`\n  )\n  .fn(t => {\n    const buffer = t.makeBufferWithContents(\n      new Uint32Array([0]),\n      GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC\n    );\n    const kNumIterations = 10_000;\n    const stages = iterRange(kNumIterations, i => ({\n      module: t.device.createShaderModule({\n        code: `\n        struct Buffer { data: u32, };\n        @group(0) @binding(0) var<storage, read_write> buffer: Buffer;\n        @compute @workgroup_size(1) fn main${i}() {\n          buffer.data = buffer.data + 1u;\n        }\n        `,\n      }),\n      entryPoint: `main${i}`,\n    }));\n    for (const compute of stages) {\n      const encoder = t.device.createCommandEncoder();\n      const pipeline = t.device.createComputePipeline({ layout: 'auto', compute });\n      const bindGroup = t.device.createBindGroup({\n        layout: pipeline.getBindGroupLayout(0),\n        entries: [{ binding: 0, resource: { buffer } }],\n      });\n      const pass = encoder.beginComputePass();\n      pass.setPipeline(pipeline);\n      pass.setBindGroup(0, bindGroup);\n      pass.dispatchWorkgroups(1);\n      pass.end();\n      t.device.queue.submit([encoder.finish()]);\n    }\n    t.expectGPUBufferValuesEqual(buffer, new Uint32Array([kNumIterations]));\n  });\n\ng.test('bind_group_churn')\n  .desc(\n    `Tests execution of compute passes which switch between a huge number of bind\ngroups.`\n  )\n  .fn(t => {\n    const kNumElements = 64;\n    const data = new Uint32Array([...iterRange(kNumElements, x => x)]);\n    const buffer1 = t.makeBufferWithContents(\n      data,\n      GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC\n    );\n    const buffer2 = t.makeBufferWithContents(\n      data,\n      GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC\n    );\n    const module = t.device.createShaderModule({\n      code: `\n        struct Buffer { data: array<u32>, };\n        @group(0) @binding(0) var<storage, read_write> buffer1: Buffer;\n        @group(0) @binding(1) var<storage, read_write> buffer2: Buffer;\n        @compute @workgroup_size(1) fn main(\n            @builtin(global_invocation_id) id: vec3<u32>) {\n          buffer1.data[id.x] = buffer1.data[id.x] + 1u;\n          buffer2.data[id.x] = buffer2.data[id.x] + 2u;\n        }\n      `,\n    });\n    const kNumIterations = 250_000;\n    const pipeline = t.device.createComputePipeline({\n      layout: 'auto',\n      compute: { module, entryPoint: 'main' },\n    });\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginComputePass();\n    pass.setPipeline(pipeline);\n    for (let i = 0; i < kNumIterations; ++i) {\n      const buffer1Binding = i % 2;\n      const buffer2Binding = buffer1Binding ^ 1;\n      const bindGroup = t.device.createBindGroup({\n        layout: pipeline.getBindGroupLayout(0),\n        entries: [\n          { binding: buffer1Binding, resource: { buffer: buffer1 } },\n          { binding: buffer2Binding, resource: { buffer: buffer2 } },\n        ],\n      });\n      pass.setBindGroup(0, bindGroup);\n      pass.dispatchWorkgroups(kNumElements);\n    }\n    pass.end();\n    t.device.queue.submit([encoder.finish()]);\n    const kTotalAddition = (kNumIterations / 2) * 3;\n    t.expectGPUBufferValuesEqual(\n      buffer1,\n      new Uint32Array([...iterRange(kNumElements, x => x + kTotalAddition)])\n    );\n    t.expectGPUBufferValuesEqual(\n      buffer2,\n      new Uint32Array([...iterRange(kNumElements, x => x + kTotalAddition)])\n    );\n  });\n\ng.test('many_dispatches')\n  .desc(`Tests execution of compute passes with a huge number of dispatch calls`)\n  .fn(t => {\n    const kNumElements = 64;\n    const data = new Uint32Array([...iterRange(kNumElements, x => x)]);\n    const buffer = t.makeBufferWithContents(data, GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC);\n    const module = t.device.createShaderModule({\n      code: `\n        struct Buffer { data: array<u32>, };\n        @group(0) @binding(0) var<storage, read_write> buffer: Buffer;\n        @compute @workgroup_size(1) fn main(\n            @builtin(global_invocation_id) id: vec3<u32>) {\n          buffer.data[id.x] = buffer.data[id.x] + 1u;\n        }\n      `,\n    });\n    const kNumIterations = 1_000_000;\n    const pipeline = t.device.createComputePipeline({\n      layout: 'auto',\n      compute: { module, entryPoint: 'main' },\n    });\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginComputePass();\n    pass.setPipeline(pipeline);\n    const bindGroup = t.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [{ binding: 0, resource: { buffer } }],\n    });\n    pass.setBindGroup(0, bindGroup);\n    for (let i = 0; i < kNumIterations; ++i) {\n      pass.dispatchWorkgroups(kNumElements);\n    }\n    pass.end();\n    t.device.queue.submit([encoder.finish()]);\n    t.expectGPUBufferValuesEqual(\n      buffer,\n      new Uint32Array([...iterRange(kNumElements, x => x + kNumIterations)])\n    );\n  });\n\ng.test('huge_dispatches')\n  .desc(`Tests execution of compute passes with huge dispatch calls`)\n  .fn(async t => {\n    const kDimensions = [512, 512, 128];\n    kDimensions.forEach(x => {\n      assert(x <= t.device.limits.maxComputeWorkgroupsPerDimension);\n    });\n\n    const kNumElements = kDimensions[0] * kDimensions[1] * kDimensions[2];\n    const data = new Uint32Array([...iterRange(kNumElements, x => x)]);\n    const buffer = t.makeBufferWithContents(data, GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC);\n    const module = t.device.createShaderModule({\n      code: `\n        struct Buffer { data: array<u32>, };\n        @group(0) @binding(0) var<storage, read_write> buffer: Buffer;\n        @compute @workgroup_size(1) fn main(\n            @builtin(global_invocation_id) id: vec3<u32>) {\n          let index = (id.z * 512u + id.y) * 512u + id.x;\n          buffer.data[index] = buffer.data[index] + 1u;\n        }\n      `,\n    });\n    const kNumIterations = 16;\n    const pipeline = t.device.createComputePipeline({\n      layout: 'auto',\n      compute: { module, entryPoint: 'main' },\n    });\n    const bindGroup = t.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [{ binding: 0, resource: { buffer } }],\n    });\n    for (let i = 0; i < kNumIterations; ++i) {\n      const encoder = t.device.createCommandEncoder();\n      const pass = encoder.beginComputePass();\n      pass.setBindGroup(0, bindGroup);\n      pass.setPipeline(pipeline);\n      pass.dispatchWorkgroups(kDimensions[0], kDimensions[1], kDimensions[2]);\n      pass.end();\n      t.device.queue.submit([encoder.finish()]);\n      await t.device.queue.onSubmittedWorkDone();\n    }\n    t.expectGPUBufferValuesEqual(\n      buffer,\n      new Uint32Array([...iterRange(kNumElements, x => x + kNumIterations)])\n    );\n  });\n"],"mappings":"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"}