{"version":3,"file":"vertex_buffers.spec.js","names":["description","makeTestGroup","GPUTest","g","createHugeVertexBuffer","t","size","kBufferSize","buffer","createBufferTracked","usage","GPUBufferUsage","STORAGE","COPY_SRC","pipeline","device","createComputePipeline","layout","compute","module","createShaderModule","code","entryPoint","bindGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","vertexBuffer","VERTEX","COPY_DST","copyBufferToBuffer","queue","submit","finish","test","desc","fn","kSize","createRenderPipeline","vertex","buffers","arrayStride","attributes","format","offset","shaderLocation","primitive","topology","fragment","targets","renderTarget","createTextureTracked","GPUTextureUsage","RENDER_ATTACHMENT","renderPassDescriptor","colorAttachments","view","createView","loadOp","storeOp","beginRenderPass","setVertexBuffer","draw","expectSingleColor","exp","R","G","B","A"],"sources":["../../../src/stress/render/vertex_buffers.spec.ts"],"sourcesContent":["export const description = `\nStress tests covering vertex buffer usage.\n`;\n\nimport { makeTestGroup } from '../../common/framework/test_group.js';\nimport { GPUTest } from '../../webgpu/gpu_test.js';\n\nexport const g = makeTestGroup(GPUTest);\n\nfunction createHugeVertexBuffer(t: GPUTest, size: number) {\n  const kBufferSize = size * size * 8;\n  const buffer = t.createBufferTracked({\n    size: kBufferSize,\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n  });\n  const pipeline = t.device.createComputePipeline({\n    layout: 'auto',\n    compute: {\n      module: t.device.createShaderModule({\n        code: `\n        struct Buffer { data: array<vec2<u32>>, };\n        @group(0) @binding(0) var<storage, read_write> buffer: Buffer;\n        @compute @workgroup_size(1) fn main(\n            @builtin(global_invocation_id) id: vec3<u32>) {\n          let base = id.x * ${size}u;\n          for (var x: u32 = 0u; x < ${size}u; x = x + 1u) {\n            buffer.data[base + x] = vec2<u32>(x, id.x);\n          }\n        }\n        `,\n      }),\n      entryPoint: 'main',\n    },\n  });\n  const bindGroup = t.device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [\n      {\n        binding: 0,\n        resource: { buffer },\n      },\n    ],\n  });\n  const encoder = t.device.createCommandEncoder();\n  const pass = encoder.beginComputePass();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, bindGroup);\n  pass.dispatchWorkgroups(size);\n  pass.end();\n\n  const vertexBuffer = t.createBufferTracked({\n    size: kBufferSize,\n    usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,\n  });\n  encoder.copyBufferToBuffer(buffer, 0, vertexBuffer, 0, kBufferSize);\n  t.device.queue.submit([encoder.finish()]);\n  return vertexBuffer;\n}\n\ng.test('many')\n  .desc(`Tests execution of draw calls using a huge vertex buffer.`)\n  .fn(t => {\n    const kSize = 4096;\n    const buffer = createHugeVertexBuffer(t, kSize);\n    const module = t.device.createShaderModule({\n      code: `\n    @vertex fn vmain(@location(0) position: vec2<u32>)\n        -> @builtin(position) vec4<f32> {\n      let r = vec2<f32>(1.0 / f32(${kSize}));\n      let a = 2.0 * r;\n      let b = r - vec2<f32>(1.0);\n      return vec4<f32>(fma(vec2<f32>(position), a, b), 0.0, 1.0);\n    }\n    @fragment fn fmain() -> @location(0) vec4<f32> {\n      return vec4<f32>(1.0, 0.0, 1.0, 1.0);\n    }\n    `,\n    });\n    const pipeline = t.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: {\n        module,\n        entryPoint: 'vmain',\n        buffers: [\n          {\n            arrayStride: 8,\n            attributes: [\n              {\n                format: 'uint32x2',\n                offset: 0,\n                shaderLocation: 0,\n              },\n            ],\n          },\n        ],\n      },\n      primitive: { topology: 'point-list' },\n      fragment: {\n        targets: [{ format: 'rgba8unorm' }],\n        module,\n        entryPoint: 'fmain',\n      },\n    });\n    const renderTarget = t.createTextureTracked({\n      size: [kSize, kSize],\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n      format: 'rgba8unorm',\n    });\n    const renderPassDescriptor: GPURenderPassDescriptor = {\n      colorAttachments: [\n        {\n          view: renderTarget.createView(),\n          loadOp: 'load',\n          storeOp: 'store',\n        },\n      ],\n    };\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass(renderPassDescriptor);\n    pass.setPipeline(pipeline);\n    pass.setVertexBuffer(0, buffer);\n    pass.draw(kSize * kSize);\n    pass.end();\n    t.device.queue.submit([encoder.finish()]);\n    t.expectSingleColor(renderTarget, 'rgba8unorm', {\n      size: [kSize, kSize, 1],\n      exp: { R: 1, G: 0, B: 1, A: 1 },\n    });\n  });\n"],"mappings":"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"}