{"version":3,"file":"render_pass.spec.js","names":["description","makeTestGroup","range","GPUTest","g","test","desc","fn","t","kSize","module","device","createShaderModule","code","pipeline","createRenderPipeline","layout","vertex","entryPoint","buffers","primitive","topology","fragment","targets","format","renderTarget","createTextureTracked","size","usage","GPUTextureUsage","RENDER_ATTACHMENT","COPY_SRC","renderPassDescriptor","colorAttachments","view","createView","loadOp","storeOp","encoder","createCommandEncoder","i","pass","beginRenderPass","setPipeline","draw","end","queue","submit","finish","expectSingleColor","exp","R","G","B","A","kWidth","kHeight","depthTarget","depthStencilAttachment","depthLoadOp","depthStoreOp","stencilLoadOp","stencilStoreOp","depthStencil","depthCompare","depthWriteEnabled","depthBias","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","VERTEX","buffer","type","createPipelineLayout","bindGroupLayouts","createBufferTracked","GPUBufferUsage","UNIFORM","mappedAtCreation","Uint32Array","getMappedRange","unmap","setBindGroup","createBindGroup","resource","kTextureSize","kVertsPerFragment"],"sources":["../../../src/stress/render/render_pass.spec.ts"],"sourcesContent":["export const description = `\nStress tests covering GPURenderPassEncoder usage.\n`;\n\nimport { makeTestGroup } from '../../common/framework/test_group.js';\nimport { range } from '../../common/util/util.js';\nimport { GPUTest } from '../../webgpu/gpu_test.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('many')\n  .desc(\n    `Tests execution of a huge number of render passes using the same GPURenderPipeline. This uses\na single render pass for every output fragment, with each pass executing a one-vertex draw call.`\n  )\n  .fn(t => {\n    const kSize = 1024;\n    const module = t.device.createShaderModule({\n      code: `\n    @vertex fn vmain(@builtin(vertex_index) index: u32)\n        -> @builtin(position) vec4<f32> {\n      let position = vec2<f32>(f32(index % ${kSize}u), f32(index / ${kSize}u));\n      let r = vec2<f32>(1.0 / f32(${kSize}));\n      let a = 2.0 * r;\n      let b = r - vec2<f32>(1.0);\n      return vec4<f32>(fma(position, a, b), 0.0, 1.0);\n    }\n    @fragment fn fmain() -> @location(0) vec4<f32> {\n      return vec4<f32>(1.0, 0.0, 1.0, 1.0);\n    }\n    `,\n    });\n    const pipeline = t.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: { module, entryPoint: 'vmain', buffers: [] },\n      primitive: { topology: 'point-list' },\n      fragment: {\n        targets: [{ format: 'rgba8unorm' }],\n        module,\n        entryPoint: 'fmain',\n      },\n    });\n    const renderTarget = t.createTextureTracked({\n      size: [kSize, kSize],\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n      format: 'rgba8unorm',\n    });\n    const renderPassDescriptor: GPURenderPassDescriptor = {\n      colorAttachments: [\n        {\n          view: renderTarget.createView(),\n          loadOp: 'load',\n          storeOp: 'store',\n        },\n      ],\n    };\n    const encoder = t.device.createCommandEncoder();\n    range(kSize * kSize, i => {\n      const pass = encoder.beginRenderPass(renderPassDescriptor);\n      pass.setPipeline(pipeline);\n      pass.draw(1, 1, i);\n      pass.end();\n    });\n    t.device.queue.submit([encoder.finish()]);\n    t.expectSingleColor(renderTarget, 'rgba8unorm', {\n      size: [kSize, kSize, 1],\n      exp: { R: 1, G: 0, B: 1, A: 1 },\n    });\n  });\n\ng.test('pipeline_churn')\n  .desc(\n    `Tests execution of a large number of render pipelines, each within its own render pass. Each\npass does a single draw call, with one pass per output fragment.`\n  )\n  .fn(t => {\n    const kWidth = 64;\n    const kHeight = 8;\n    const module = t.device.createShaderModule({\n      code: `\n    @vertex fn vmain(@builtin(vertex_index) index: u32)\n        -> @builtin(position) vec4<f32> {\n      let position = vec2<f32>(f32(index % ${kWidth}u), f32(index / ${kWidth}u));\n      let size = vec2<f32>(f32(${kWidth}), f32(${kHeight}));\n      let r = vec2<f32>(1.0) / size;\n      let a = 2.0 * r;\n      let b = r - vec2<f32>(1.0);\n      return vec4<f32>(fma(position, a, b), 0.0, 1.0);\n    }\n    @fragment fn fmain() -> @location(0) vec4<f32> {\n      return vec4<f32>(1.0, 0.0, 1.0, 1.0);\n    }\n    `,\n    });\n    const renderTarget = t.createTextureTracked({\n      size: [kWidth, kHeight],\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n      format: 'rgba8unorm',\n    });\n    const depthTarget = t.createTextureTracked({\n      size: [kWidth, kHeight],\n      usage: GPUTextureUsage.RENDER_ATTACHMENT,\n      format: 'depth24plus-stencil8',\n    });\n    const renderPassDescriptor: GPURenderPassDescriptor = {\n      colorAttachments: [\n        {\n          view: renderTarget.createView(),\n          loadOp: 'load',\n          storeOp: 'store',\n        },\n      ],\n      depthStencilAttachment: {\n        view: depthTarget.createView(),\n        depthLoadOp: 'load',\n        depthStoreOp: 'store',\n        stencilLoadOp: 'load',\n        stencilStoreOp: 'discard',\n      },\n    };\n    const encoder = t.device.createCommandEncoder();\n    range(kWidth * kHeight, i => {\n      const pipeline = t.device.createRenderPipeline({\n        layout: 'auto',\n        vertex: { module, entryPoint: 'vmain', buffers: [] },\n        primitive: { topology: 'point-list' },\n        depthStencil: {\n          format: 'depth24plus-stencil8',\n          depthCompare: 'always',\n          depthWriteEnabled: false,\n          // Not really used, but it ensures that each pipeline is unique.\n          depthBias: i,\n        },\n        fragment: {\n          targets: [{ format: 'rgba8unorm' }],\n          module,\n          entryPoint: 'fmain',\n        },\n      });\n      const pass = encoder.beginRenderPass(renderPassDescriptor);\n      pass.setPipeline(pipeline);\n      pass.draw(1, 1, i);\n      pass.end();\n    });\n    t.device.queue.submit([encoder.finish()]);\n    t.expectSingleColor(renderTarget, 'rgba8unorm', {\n      size: [kWidth, kHeight, 1],\n      exp: { R: 1, G: 0, B: 1, A: 1 },\n    });\n  });\n\ng.test('bind_group_churn')\n  .desc(\n    `Tests execution of render passes which switch between a huge number of bind groups. This uses\na single render pass with a single pipeline, and one draw call per fragment of the output texture.\nEach draw call is made with a unique bind group 0, with binding 0 referencing a unique uniform\nbuffer.`\n  )\n  .fn(t => {\n    const kSize = 128;\n    const module = t.device.createShaderModule({\n      code: `\n    struct Uniforms { index: u32, };\n    @group(0) @binding(0) var<uniform> uniforms: Uniforms;\n    @vertex fn vmain() -> @builtin(position) vec4<f32> {\n      let index = uniforms.index;\n      let position = vec2<f32>(f32(index % ${kSize}u), f32(index / ${kSize}u));\n      let r = vec2<f32>(1.0 / f32(${kSize}));\n      let a = 2.0 * r;\n      let b = r - vec2<f32>(1.0);\n      return vec4<f32>(fma(position, a, b), 0.0, 1.0);\n    }\n    @fragment fn fmain() -> @location(0) vec4<f32> {\n      return vec4<f32>(1.0, 0.0, 1.0, 1.0);\n    }\n    `,\n    });\n    const layout = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.VERTEX,\n          buffer: { type: 'uniform' },\n        },\n      ],\n    });\n    const pipeline = t.device.createRenderPipeline({\n      layout: t.device.createPipelineLayout({ bindGroupLayouts: [layout] }),\n      vertex: { module, entryPoint: 'vmain', buffers: [] },\n      primitive: { topology: 'point-list' },\n      fragment: {\n        targets: [{ format: 'rgba8unorm' }],\n        module,\n        entryPoint: 'fmain',\n      },\n    });\n    const renderTarget = t.createTextureTracked({\n      size: [kSize, kSize],\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n      format: 'rgba8unorm',\n    });\n    const renderPassDescriptor: GPURenderPassDescriptor = {\n      colorAttachments: [\n        {\n          view: renderTarget.createView(),\n          loadOp: 'load',\n          storeOp: 'store',\n        },\n      ],\n    };\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass(renderPassDescriptor);\n    pass.setPipeline(pipeline);\n    range(kSize * kSize, i => {\n      const buffer = t.createBufferTracked({\n        size: 4,\n        usage: GPUBufferUsage.UNIFORM,\n        mappedAtCreation: true,\n      });\n      new Uint32Array(buffer.getMappedRange())[0] = i;\n      buffer.unmap();\n      pass.setBindGroup(\n        0,\n        t.device.createBindGroup({ layout, entries: [{ binding: 0, resource: { buffer } }] })\n      );\n      pass.draw(1, 1);\n    });\n    pass.end();\n    t.device.queue.submit([encoder.finish()]);\n    t.expectSingleColor(renderTarget, 'rgba8unorm', {\n      size: [kSize, kSize, 1],\n      exp: { R: 1, G: 0, B: 1, A: 1 },\n    });\n  });\n\ng.test('many_draws')\n  .desc(\n    `Tests execution of render passes with a huge number of draw calls. This uses a single\nrender pass with a single pipeline, and one draw call per fragment of the output texture.`\n  )\n  .fn(t => {\n    const kSize = 4096;\n    const module = t.device.createShaderModule({\n      code: `\n    @vertex fn vmain(@builtin(vertex_index) index: u32)\n        -> @builtin(position) vec4<f32> {\n      let position = vec2<f32>(f32(index % ${kSize}u), f32(index / ${kSize}u));\n      let r = vec2<f32>(1.0 / f32(${kSize}));\n      let a = 2.0 * r;\n      let b = r - vec2<f32>(1.0);\n      return vec4<f32>(fma(position, a, b), 0.0, 1.0);\n    }\n    @fragment fn fmain() -> @location(0) vec4<f32> {\n      return vec4<f32>(1.0, 0.0, 1.0, 1.0);\n    }\n    `,\n    });\n    const pipeline = t.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: { module, entryPoint: 'vmain', buffers: [] },\n      primitive: { topology: 'point-list' },\n      fragment: {\n        targets: [{ format: 'rgba8unorm' }],\n        module,\n        entryPoint: 'fmain',\n      },\n    });\n    const renderTarget = t.createTextureTracked({\n      size: [kSize, kSize],\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n      format: 'rgba8unorm',\n    });\n    const renderPassDescriptor: GPURenderPassDescriptor = {\n      colorAttachments: [\n        {\n          view: renderTarget.createView(),\n          loadOp: 'load',\n          storeOp: 'store',\n        },\n      ],\n    };\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass(renderPassDescriptor);\n    pass.setPipeline(pipeline);\n    range(kSize * kSize, i => pass.draw(1, 1, i));\n    pass.end();\n    t.device.queue.submit([encoder.finish()]);\n    t.expectSingleColor(renderTarget, 'rgba8unorm', {\n      size: [kSize, kSize, 1],\n      exp: { R: 1, G: 0, B: 1, A: 1 },\n    });\n  });\n\ng.test('huge_draws')\n  .desc(\n    `Tests execution of several render passes with huge draw calls. Each pass uses a single draw\ncall which draws multiple vertices for each fragment of a large output texture.`\n  )\n  .fn(t => {\n    const kSize = 32768;\n    const kTextureSize = 4096;\n    const kVertsPerFragment = (kSize * kSize) / (kTextureSize * kTextureSize);\n    const module = t.device.createShaderModule({\n      code: `\n    @vertex fn vmain(@builtin(vertex_index) vert_index: u32)\n        -> @builtin(position) vec4<f32> {\n      let index = vert_index / ${kVertsPerFragment}u;\n      let position = vec2<f32>(f32(index % ${kTextureSize}u), f32(index / ${kTextureSize}u));\n      let r = vec2<f32>(1.0 / f32(${kTextureSize}));\n      let a = 2.0 * r;\n      let b = r - vec2<f32>(1.0);\n      return vec4<f32>(fma(position, a, b), 0.0, 1.0);\n    }\n    @fragment fn fmain() -> @location(0) vec4<f32> {\n      return vec4<f32>(1.0, 0.0, 1.0, 1.0);\n    }\n    `,\n    });\n    const pipeline = t.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: { module, entryPoint: 'vmain', buffers: [] },\n      primitive: { topology: 'point-list' },\n      fragment: {\n        targets: [{ format: 'rgba8unorm' }],\n        module,\n        entryPoint: 'fmain',\n      },\n    });\n    const renderTarget = t.createTextureTracked({\n      size: [kTextureSize, kTextureSize],\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n      format: 'rgba8unorm',\n    });\n    const renderPassDescriptor: GPURenderPassDescriptor = {\n      colorAttachments: [\n        {\n          view: renderTarget.createView(),\n          loadOp: 'load',\n          storeOp: 'store',\n        },\n      ],\n    };\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass(renderPassDescriptor);\n    pass.setPipeline(pipeline);\n    pass.draw(kSize * kSize);\n    pass.end();\n    t.device.queue.submit([encoder.finish()]);\n    t.expectSingleColor(renderTarget, 'rgba8unorm', {\n      size: [kTextureSize, kTextureSize, 1],\n      exp: { R: 1, G: 0, B: 1, A: 1 },\n    });\n  });\n"],"mappings":";;GAAA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAAC,CAED,SAASC,aAAa,QAAQ,sCAAsC;AACpE,SAASC,KAAK,QAAQ,2BAA2B;AACjD,SAASC,OAAO,QAAQ,0BAA0B;;AAElD,OAAO,MAAMC,CAAC,GAAGH,aAAa,CAACE,OAAO,CAAC;;AAEvCC,CAAC,CAACC,IAAI,CAAC,MAAM,CAAC;AACXC,IAAI;EACF;AACL;AACE,CAAC;AACAC,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAMC,KAAK,GAAG,IAAI;EAClB,MAAMC,MAAM,GAAGF,CAAC,CAACG,MAAM,CAACC,kBAAkB,CAAC;IACzCC,IAAI,EAAG;AACb;AACA;AACA,6CAA6CJ,KAAM,mBAAkBA,KAAM;AAC3E,oCAAoCA,KAAM;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,CAAC,CAAC;EACF,MAAMK,QAAQ,GAAGN,CAAC,CAACG,MAAM,CAACI,oBAAoB,CAAC;IAC7CC,MAAM,EAAE,MAAM;IACdC,MAAM,EAAE,EAAEP,MAAM,EAAEQ,UAAU,EAAE,OAAO,EAAEC,OAAO,EAAE,EAAE,CAAC,CAAC;IACpDC,SAAS,EAAE,EAAEC,QAAQ,EAAE,YAAY,CAAC,CAAC;IACrCC,QAAQ,EAAE;MACRC,OAAO,EAAE,CAAC,EAAEC,MAAM,EAAE,YAAY,CAAC,CAAC,CAAC;MACnCd,MAAM;MACNQ,UAAU,EAAE;IACd;EACF,CAAC,CAAC;EACF,MAAMO,YAAY,GAAGjB,CAAC,CAACkB,oBAAoB,CAAC;IAC1CC,IAAI,EAAE,CAAClB,KAAK,EAAEA,KAAK,CAAC;IACpBmB,KAAK,EAAEC,eAAe,CAACC,iBAAiB,GAAGD,eAAe,CAACE,QAAQ;IACnEP,MAAM,EAAE;EACV,CAAC,CAAC;EACF,MAAMQ,oBAA6C,GAAG;IACpDC,gBAAgB,EAAE;IAChB;MACEC,IAAI,EAAET,YAAY,CAACU,UAAU,CAAC,CAAC;MAC/BC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;IACX,CAAC;;EAEL,CAAC;EACD,MAAMC,OAAO,GAAG9B,CAAC,CAACG,MAAM,CAAC4B,oBAAoB,CAAC,CAAC;EAC/CrC,KAAK,CAACO,KAAK,GAAGA,KAAK,EAAE,CAAA+B,CAAC,KAAI;IACxB,MAAMC,IAAI,GAAGH,OAAO,CAACI,eAAe,CAACV,oBAAoB,CAAC;IAC1DS,IAAI,CAACE,WAAW,CAAC7B,QAAQ,CAAC;IAC1B2B,IAAI,CAACG,IAAI,CAAC,CAAC,EAAE,CAAC,EAAEJ,CAAC,CAAC;IAClBC,IAAI,CAACI,GAAG,CAAC,CAAC;EACZ,CAAC,CAAC;EACFrC,CAAC,CAACG,MAAM,CAACmC,KAAK,CAACC,MAAM,CAAC,CAACT,OAAO,CAACU,MAAM,CAAC,CAAC,CAAC,CAAC;EACzCxC,CAAC,CAACyC,iBAAiB,CAACxB,YAAY,EAAE,YAAY,EAAE;IAC9CE,IAAI,EAAE,CAAClB,KAAK,EAAEA,KAAK,EAAE,CAAC,CAAC;IACvByC,GAAG,EAAE,EAAEC,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC;EAChC,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEJlD,CAAC,CAACC,IAAI,CAAC,gBAAgB,CAAC;AACrBC,IAAI;EACF;AACL;AACE,CAAC;AACAC,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAM+C,MAAM,GAAG,EAAE;EACjB,MAAMC,OAAO,GAAG,CAAC;EACjB,MAAM9C,MAAM,GAAGF,CAAC,CAACG,MAAM,CAACC,kBAAkB,CAAC;IACzCC,IAAI,EAAG;AACb;AACA;AACA,6CAA6C0C,MAAO,mBAAkBA,MAAO;AAC7E,iCAAiCA,MAAO,UAASC,OAAQ;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,CAAC,CAAC;EACF,MAAM/B,YAAY,GAAGjB,CAAC,CAACkB,oBAAoB,CAAC;IAC1CC,IAAI,EAAE,CAAC4B,MAAM,EAAEC,OAAO,CAAC;IACvB5B,KAAK,EAAEC,eAAe,CAACC,iBAAiB,GAAGD,eAAe,CAACE,QAAQ;IACnEP,MAAM,EAAE;EACV,CAAC,CAAC;EACF,MAAMiC,WAAW,GAAGjD,CAAC,CAACkB,oBAAoB,CAAC;IACzCC,IAAI,EAAE,CAAC4B,MAAM,EAAEC,OAAO,CAAC;IACvB5B,KAAK,EAAEC,eAAe,CAACC,iBAAiB;IACxCN,MAAM,EAAE;EACV,CAAC,CAAC;EACF,MAAMQ,oBAA6C,GAAG;IACpDC,gBAAgB,EAAE;IAChB;MACEC,IAAI,EAAET,YAAY,CAACU,UAAU,CAAC,CAAC;MAC/BC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;IACX,CAAC,CACF;;IACDqB,sBAAsB,EAAE;MACtBxB,IAAI,EAAEuB,WAAW,CAACtB,UAAU,CAAC,CAAC;MAC9BwB,WAAW,EAAE,MAAM;MACnBC,YAAY,EAAE,OAAO;MACrBC,aAAa,EAAE,MAAM;MACrBC,cAAc,EAAE;IAClB;EACF,CAAC;EACD,MAAMxB,OAAO,GAAG9B,CAAC,CAACG,MAAM,CAAC4B,oBAAoB,CAAC,CAAC;EAC/CrC,KAAK,CAACqD,MAAM,GAAGC,OAAO,EAAE,CAAAhB,CAAC,KAAI;IAC3B,MAAM1B,QAAQ,GAAGN,CAAC,CAACG,MAAM,CAACI,oBAAoB,CAAC;MAC7CC,MAAM,EAAE,MAAM;MACdC,MAAM,EAAE,EAAEP,MAAM,EAAEQ,UAAU,EAAE,OAAO,EAAEC,OAAO,EAAE,EAAE,CAAC,CAAC;MACpDC,SAAS,EAAE,EAAEC,QAAQ,EAAE,YAAY,CAAC,CAAC;MACrC0C,YAAY,EAAE;QACZvC,MAAM,EAAE,sBAAsB;QAC9BwC,YAAY,EAAE,QAAQ;QACtBC,iBAAiB,EAAE,KAAK;QACxB;QACAC,SAAS,EAAE1B;MACb,CAAC;MACDlB,QAAQ,EAAE;QACRC,OAAO,EAAE,CAAC,EAAEC,MAAM,EAAE,YAAY,CAAC,CAAC,CAAC;QACnCd,MAAM;QACNQ,UAAU,EAAE;MACd;IACF,CAAC,CAAC;IACF,MAAMuB,IAAI,GAAGH,OAAO,CAACI,eAAe,CAACV,oBAAoB,CAAC;IAC1DS,IAAI,CAACE,WAAW,CAAC7B,QAAQ,CAAC;IAC1B2B,IAAI,CAACG,IAAI,CAAC,CAAC,EAAE,CAAC,EAAEJ,CAAC,CAAC;IAClBC,IAAI,CAACI,GAAG,CAAC,CAAC;EACZ,CAAC,CAAC;EACFrC,CAAC,CAACG,MAAM,CAACmC,KAAK,CAACC,MAAM,CAAC,CAACT,OAAO,CAACU,MAAM,CAAC,CAAC,CAAC,CAAC;EACzCxC,CAAC,CAACyC,iBAAiB,CAACxB,YAAY,EAAE,YAAY,EAAE;IAC9CE,IAAI,EAAE,CAAC4B,MAAM,EAAEC,OAAO,EAAE,CAAC,CAAC;IAC1BN,GAAG,EAAE,EAAEC,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC;EAChC,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEJlD,CAAC,CAACC,IAAI,CAAC,kBAAkB,CAAC;AACvBC,IAAI;EACF;AACL;AACA;AACA;AACE,CAAC;AACAC,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAMC,KAAK,GAAG,GAAG;EACjB,MAAMC,MAAM,GAAGF,CAAC,CAACG,MAAM,CAACC,kBAAkB,CAAC;IACzCC,IAAI,EAAG;AACb;AACA;AACA;AACA;AACA,6CAA6CJ,KAAM,mBAAkBA,KAAM;AAC3E,oCAAoCA,KAAM;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,CAAC,CAAC;EACF,MAAMO,MAAM,GAAGR,CAAC,CAACG,MAAM,CAACwD,qBAAqB,CAAC;IAC5CC,OAAO,EAAE;IACP;MACEC,OAAO,EAAE,CAAC;MACVC,UAAU,EAAEC,cAAc,CAACC,MAAM;MACjCC,MAAM,EAAE,EAAEC,IAAI,EAAE,SAAS,CAAC;IAC5B,CAAC;;EAEL,CAAC,CAAC;EACF,MAAM5D,QAAQ,GAAGN,CAAC,CAACG,MAAM,CAACI,oBAAoB,CAAC;IAC7CC,MAAM,EAAER,CAAC,CAACG,MAAM,CAACgE,oBAAoB,CAAC,EAAEC,gBAAgB,EAAE,CAAC5D,MAAM,CAAC,CAAC,CAAC,CAAC;IACrEC,MAAM,EAAE,EAAEP,MAAM,EAAEQ,UAAU,EAAE,OAAO,EAAEC,OAAO,EAAE,EAAE,CAAC,CAAC;IACpDC,SAAS,EAAE,EAAEC,QAAQ,EAAE,YAAY,CAAC,CAAC;IACrCC,QAAQ,EAAE;MACRC,OAAO,EAAE,CAAC,EAAEC,MAAM,EAAE,YAAY,CAAC,CAAC,CAAC;MACnCd,MAAM;MACNQ,UAAU,EAAE;IACd;EACF,CAAC,CAAC;EACF,MAAMO,YAAY,GAAGjB,CAAC,CAACkB,oBAAoB,CAAC;IAC1CC,IAAI,EAAE,CAAClB,KAAK,EAAEA,KAAK,CAAC;IACpBmB,KAAK,EAAEC,eAAe,CAACC,iBAAiB,GAAGD,eAAe,CAACE,QAAQ;IACnEP,MAAM,EAAE;EACV,CAAC,CAAC;EACF,MAAMQ,oBAA6C,GAAG;IACpDC,gBAAgB,EAAE;IAChB;MACEC,IAAI,EAAET,YAAY,CAACU,UAAU,CAAC,CAAC;MAC/BC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;IACX,CAAC;;EAEL,CAAC;EACD,MAAMC,OAAO,GAAG9B,CAAC,CAACG,MAAM,CAAC4B,oBAAoB,CAAC,CAAC;EAC/C,MAAME,IAAI,GAAGH,OAAO,CAACI,eAAe,CAACV,oBAAoB,CAAC;EAC1DS,IAAI,CAACE,WAAW,CAAC7B,QAAQ,CAAC;EAC1BZ,KAAK,CAACO,KAAK,GAAGA,KAAK,EAAE,CAAA+B,CAAC,KAAI;IACxB,MAAMiC,MAAM,GAAGjE,CAAC,CAACqE,mBAAmB,CAAC;MACnClD,IAAI,EAAE,CAAC;MACPC,KAAK,EAAEkD,cAAc,CAACC,OAAO;MAC7BC,gBAAgB,EAAE;IACpB,CAAC,CAAC;IACF,IAAIC,WAAW,CAACR,MAAM,CAACS,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG1C,CAAC;IAC/CiC,MAAM,CAACU,KAAK,CAAC,CAAC;IACd1C,IAAI,CAAC2C,YAAY;MACf,CAAC;MACD5E,CAAC,CAACG,MAAM,CAAC0E,eAAe,CAAC,EAAErE,MAAM,EAAEoD,OAAO,EAAE,CAAC,EAAEC,OAAO,EAAE,CAAC,EAAEiB,QAAQ,EAAE,EAAEb,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACtF,CAAC;IACDhC,IAAI,CAACG,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;EACjB,CAAC,CAAC;EACFH,IAAI,CAACI,GAAG,CAAC,CAAC;EACVrC,CAAC,CAACG,MAAM,CAACmC,KAAK,CAACC,MAAM,CAAC,CAACT,OAAO,CAACU,MAAM,CAAC,CAAC,CAAC,CAAC;EACzCxC,CAAC,CAACyC,iBAAiB,CAACxB,YAAY,EAAE,YAAY,EAAE;IAC9CE,IAAI,EAAE,CAAClB,KAAK,EAAEA,KAAK,EAAE,CAAC,CAAC;IACvByC,GAAG,EAAE,EAAEC,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC;EAChC,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEJlD,CAAC,CAACC,IAAI,CAAC,YAAY,CAAC;AACjBC,IAAI;EACF;AACL;AACE,CAAC;AACAC,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAMC,KAAK,GAAG,IAAI;EAClB,MAAMC,MAAM,GAAGF,CAAC,CAACG,MAAM,CAACC,kBAAkB,CAAC;IACzCC,IAAI,EAAG;AACb;AACA;AACA,6CAA6CJ,KAAM,mBAAkBA,KAAM;AAC3E,oCAAoCA,KAAM;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,CAAC,CAAC;EACF,MAAMK,QAAQ,GAAGN,CAAC,CAACG,MAAM,CAACI,oBAAoB,CAAC;IAC7CC,MAAM,EAAE,MAAM;IACdC,MAAM,EAAE,EAAEP,MAAM,EAAEQ,UAAU,EAAE,OAAO,EAAEC,OAAO,EAAE,EAAE,CAAC,CAAC;IACpDC,SAAS,EAAE,EAAEC,QAAQ,EAAE,YAAY,CAAC,CAAC;IACrCC,QAAQ,EAAE;MACRC,OAAO,EAAE,CAAC,EAAEC,MAAM,EAAE,YAAY,CAAC,CAAC,CAAC;MACnCd,MAAM;MACNQ,UAAU,EAAE;IACd;EACF,CAAC,CAAC;EACF,MAAMO,YAAY,GAAGjB,CAAC,CAACkB,oBAAoB,CAAC;IAC1CC,IAAI,EAAE,CAAClB,KAAK,EAAEA,KAAK,CAAC;IACpBmB,KAAK,EAAEC,eAAe,CAACC,iBAAiB,GAAGD,eAAe,CAACE,QAAQ;IACnEP,MAAM,EAAE;EACV,CAAC,CAAC;EACF,MAAMQ,oBAA6C,GAAG;IACpDC,gBAAgB,EAAE;IAChB;MACEC,IAAI,EAAET,YAAY,CAACU,UAAU,CAAC,CAAC;MAC/BC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;IACX,CAAC;;EAEL,CAAC;EACD,MAAMC,OAAO,GAAG9B,CAAC,CAACG,MAAM,CAAC4B,oBAAoB,CAAC,CAAC;EAC/C,MAAME,IAAI,GAAGH,OAAO,CAACI,eAAe,CAACV,oBAAoB,CAAC;EAC1DS,IAAI,CAACE,WAAW,CAAC7B,QAAQ,CAAC;EAC1BZ,KAAK,CAACO,KAAK,GAAGA,KAAK,EAAE,CAAA+B,CAAC,KAAIC,IAAI,CAACG,IAAI,CAAC,CAAC,EAAE,CAAC,EAAEJ,CAAC,CAAC,CAAC;EAC7CC,IAAI,CAACI,GAAG,CAAC,CAAC;EACVrC,CAAC,CAACG,MAAM,CAACmC,KAAK,CAACC,MAAM,CAAC,CAACT,OAAO,CAACU,MAAM,CAAC,CAAC,CAAC,CAAC;EACzCxC,CAAC,CAACyC,iBAAiB,CAACxB,YAAY,EAAE,YAAY,EAAE;IAC9CE,IAAI,EAAE,CAAClB,KAAK,EAAEA,KAAK,EAAE,CAAC,CAAC;IACvByC,GAAG,EAAE,EAAEC,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC;EAChC,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEJlD,CAAC,CAACC,IAAI,CAAC,YAAY,CAAC;AACjBC,IAAI;EACF;AACL;AACE,CAAC;AACAC,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAMC,KAAK,GAAG,KAAK;EACnB,MAAM8E,YAAY,GAAG,IAAI;EACzB,MAAMC,iBAAiB,GAAI/E,KAAK,GAAGA,KAAK,IAAK8E,YAAY,GAAGA,YAAY,CAAC;EACzE,MAAM7E,MAAM,GAAGF,CAAC,CAACG,MAAM,CAACC,kBAAkB,CAAC;IACzCC,IAAI,EAAG;AACb;AACA;AACA,iCAAiC2E,iBAAkB;AACnD,6CAA6CD,YAAa,mBAAkBA,YAAa;AACzF,oCAAoCA,YAAa;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,CAAC,CAAC;EACF,MAAMzE,QAAQ,GAAGN,CAAC,CAACG,MAAM,CAACI,oBAAoB,CAAC;IAC7CC,MAAM,EAAE,MAAM;IACdC,MAAM,EAAE,EAAEP,MAAM,EAAEQ,UAAU,EAAE,OAAO,EAAEC,OAAO,EAAE,EAAE,CAAC,CAAC;IACpDC,SAAS,EAAE,EAAEC,QAAQ,EAAE,YAAY,CAAC,CAAC;IACrCC,QAAQ,EAAE;MACRC,OAAO,EAAE,CAAC,EAAEC,MAAM,EAAE,YAAY,CAAC,CAAC,CAAC;MACnCd,MAAM;MACNQ,UAAU,EAAE;IACd;EACF,CAAC,CAAC;EACF,MAAMO,YAAY,GAAGjB,CAAC,CAACkB,oBAAoB,CAAC;IAC1CC,IAAI,EAAE,CAAC4D,YAAY,EAAEA,YAAY,CAAC;IAClC3D,KAAK,EAAEC,eAAe,CAACC,iBAAiB,GAAGD,eAAe,CAACE,QAAQ;IACnEP,MAAM,EAAE;EACV,CAAC,CAAC;EACF,MAAMQ,oBAA6C,GAAG;IACpDC,gBAAgB,EAAE;IAChB;MACEC,IAAI,EAAET,YAAY,CAACU,UAAU,CAAC,CAAC;MAC/BC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;IACX,CAAC;;EAEL,CAAC;;EAED,MAAMC,OAAO,GAAG9B,CAAC,CAACG,MAAM,CAAC4B,oBAAoB,CAAC,CAAC;EAC/C,MAAME,IAAI,GAAGH,OAAO,CAACI,eAAe,CAACV,oBAAoB,CAAC;EAC1DS,IAAI,CAACE,WAAW,CAAC7B,QAAQ,CAAC;EAC1B2B,IAAI,CAACG,IAAI,CAACnC,KAAK,GAAGA,KAAK,CAAC;EACxBgC,IAAI,CAACI,GAAG,CAAC,CAAC;EACVrC,CAAC,CAACG,MAAM,CAACmC,KAAK,CAACC,MAAM,CAAC,CAACT,OAAO,CAACU,MAAM,CAAC,CAAC,CAAC,CAAC;EACzCxC,CAAC,CAACyC,iBAAiB,CAACxB,YAAY,EAAE,YAAY,EAAE;IAC9CE,IAAI,EAAE,CAAC4D,YAAY,EAAEA,YAAY,EAAE,CAAC,CAAC;IACrCrC,GAAG,EAAE,EAAEC,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC;EAChC,CAAC,CAAC;AACJ,CAAC,CAAC"}