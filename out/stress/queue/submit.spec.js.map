{"version":3,"file":"submit.spec.js","names":["description","makeTestGroup","iterRange","GPUTest","g","test","desc","fn","t","kNumElements","data","Uint32Array","x","buffer","makeBufferWithContents","GPUBufferUsage","STORAGE","COPY_SRC","pipeline","device","createComputePipeline","layout","compute","module","createShaderModule","code","entryPoint","bindGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","encoder","createCommandEncoder","kNumIterations","i","pass","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","queue","submit","finish","expectGPUBufferValuesEqual","buffers","push"],"sources":["../../../src/stress/queue/submit.spec.ts"],"sourcesContent":["export const description = `\nStress tests for command submission to GPUQueue objects.\n`;\n\nimport { makeTestGroup } from '../../common/framework/test_group.js';\nimport { iterRange } from '../../common/util/util.js';\nimport { GPUTest } from '../../webgpu/gpu_test.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('huge_command_buffer')\n  .desc(\n    `Tests submission of huge command buffers to a GPUQueue. Huge buffers are\nencoded by chaining together long sequences of compute passes, with expected\nresults verified at the end of the test.`\n  )\n  .fn(t => {\n    const kNumElements = 64;\n    const data = new Uint32Array([...iterRange(kNumElements, x => x)]);\n    const buffer = t.makeBufferWithContents(data, GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC);\n    const pipeline = t.device.createComputePipeline({\n      layout: 'auto',\n      compute: {\n        module: t.device.createShaderModule({\n          code: `\n            struct Buffer { data: array<u32>, };\n            @group(0) @binding(0) var<storage, read_write> buffer: Buffer;\n            @compute @workgroup_size(1) fn main(\n                @builtin(global_invocation_id) id: vec3<u32>) {\n              buffer.data[id.x] = buffer.data[id.x] + 1u;\n            }\n          `,\n        }),\n        entryPoint: 'main',\n      },\n    });\n    const bindGroup = t.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [{ binding: 0, resource: { buffer } }],\n    });\n    const encoder = t.device.createCommandEncoder();\n    const kNumIterations = 500_000;\n    for (let i = 0; i < kNumIterations; ++i) {\n      const pass = encoder.beginComputePass();\n      pass.setPipeline(pipeline);\n      pass.setBindGroup(0, bindGroup);\n      pass.dispatchWorkgroups(kNumElements);\n      pass.end();\n    }\n    t.device.queue.submit([encoder.finish()]);\n    t.expectGPUBufferValuesEqual(\n      buffer,\n      new Uint32Array([...iterRange(kNumElements, x => x + kNumIterations)])\n    );\n  });\n\ng.test('many_command_buffers')\n  .desc(\n    `Tests submission of a huge number of command buffers to a GPUQueue by a single\nsubmit() call.`\n  )\n  .fn(t => {\n    const kNumElements = 64;\n    const data = new Uint32Array([...iterRange(kNumElements, x => x)]);\n    const buffer = t.makeBufferWithContents(data, GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC);\n    const pipeline = t.device.createComputePipeline({\n      layout: 'auto',\n      compute: {\n        module: t.device.createShaderModule({\n          code: `\n            struct Buffer { data: array<u32>, };\n            @group(0) @binding(0) var<storage, read_write> buffer: Buffer;\n            @compute @workgroup_size(1) fn main(\n                @builtin(global_invocation_id) id: vec3<u32>) {\n              buffer.data[id.x] = buffer.data[id.x] + 1u;\n            }\n          `,\n        }),\n        entryPoint: 'main',\n      },\n    });\n    const bindGroup = t.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [{ binding: 0, resource: { buffer } }],\n    });\n    const kNumIterations = 500_000;\n    const buffers = [];\n    for (let i = 0; i < kNumIterations; ++i) {\n      const encoder = t.device.createCommandEncoder();\n      const pass = encoder.beginComputePass();\n      pass.setPipeline(pipeline);\n      pass.setBindGroup(0, bindGroup);\n      pass.dispatchWorkgroups(kNumElements);\n      pass.end();\n      buffers.push(encoder.finish());\n    }\n    t.device.queue.submit(buffers);\n    t.expectGPUBufferValuesEqual(\n      buffer,\n      new Uint32Array([...iterRange(kNumElements, x => x + kNumIterations)])\n    );\n  });\n"],"mappings":"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"}