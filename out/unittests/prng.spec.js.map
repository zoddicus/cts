{"version":3,"file":"prng.spec.js","names":["description","makeTestGroup","fullU32Range","PRNG","UnitTest","g","test","fn","t","p","expected","forEach","_","i","val","randomU32","expect","seed","lhs","rhs","lhs_val","random","rhs_val","power_of_2","k","desc","N","sample","uniformInt","Math","trunc","numBins","numSamples","histogram","Array","fill","meanCount","toleratedMin","toleratedMax","count","badN","halfN","numSmall"],"sources":["../../src/unittests/prng.spec.ts"],"sourcesContent":["export const description = `\nUnittests for the pseudo random number generator\n`;\n\nimport { makeTestGroup } from '../common/framework/test_group.js';\nimport { fullU32Range } from '../webgpu/util/math.js';\nimport { PRNG } from '../webgpu/util/prng.js';\n\nimport { UnitTest } from './unit_test.js';\n\nexport const g = makeTestGroup(UnitTest);\n\n// There exist more formal tests for the quality of random number generators\n// that are out of the scope for testing here (and are checked against the\n// original C implementation).\n// These tests are just intended to be smoke tests for implementation.\n\n// Test against the reference u32 values from the original C implementation\n// https://github.com/MersenneTwister-Lab/TinyMT/blob/master/tinymt/check32.out.txt\ng.test('check').fn(t => {\n  const p = new PRNG(1);\n  // prettier-ignore\n  const expected = [\n    2545341989, 981918433,  3715302833, 2387538352, 3591001365,\n    3820442102, 2114400566, 2196103051, 2783359912, 764534509,\n    643179475,  1822416315, 881558334,  4207026366, 3690273640,\n    3240535687, 2921447122, 3984931427, 4092394160, 44209675,\n    2188315343, 2908663843, 1834519336, 3774670961, 3019990707,\n    4065554902, 1239765502, 4035716197, 3412127188, 552822483,\n    161364450,  353727785,  140085994,  149132008,  2547770827,\n    4064042525, 4078297538, 2057335507, 622384752,  2041665899,\n    2193913817, 1080849512, 33160901,  662956935,   642999063,\n    3384709977, 1723175122, 3866752252, 521822317,  2292524454,\n  ];\n  expected.forEach((_, i) => {\n    const val = p.randomU32();\n    t.expect(\n      val === expected[i],\n      `PRNG(1) failed produced the ${i}th expected item, ${val} instead of ${expected[i]})`\n    );\n  });\n});\n\n// Prove that generator is deterministic for at least 1000 values with different\n// seeds.\ng.test('deterministic_random').fn(t => {\n  fullU32Range().forEach(seed => {\n    const lhs = new PRNG(seed);\n    const rhs = new PRNG(seed);\n    for (let i = 0; i < 1000; i++) {\n      const lhs_val = lhs.random();\n      const rhs_val = rhs.random();\n      t.expect(\n        lhs_val === rhs_val,\n        `For seed ${seed}, the ${i}th item, PRNG was non-deterministic (${lhs_val} vs ${rhs_val})`\n      );\n    }\n  });\n});\n\ng.test('deterministic_randomU32').fn(t => {\n  fullU32Range().forEach(seed => {\n    const lhs = new PRNG(seed);\n    const rhs = new PRNG(seed);\n    for (let i = 0; i < 1000; i++) {\n      const lhs_val = lhs.randomU32();\n      const rhs_val = rhs.randomU32();\n      t.expect(\n        lhs_val === rhs_val,\n        `For seed ${seed}, the ${i}th item, PRNG was non-deterministic (${lhs_val} vs ${rhs_val})`\n      );\n    }\n  });\n});\n\n// Returns 2**k, for integer k up to and including 32.\nfunction power_of_2(k: number) {\n  // The shift operator on integers returns a signed 32 bit integer.\n  // So break up this calculation to avoid wraparound.\n  if (k < 30) {\n    return 1 << k;\n  }\n  return (1 << 30) * (1 << (k - 30));\n}\n\ng.test('uniformInt_range')\n  .desc('Outputs of uniformInt(N) are between 0 and N-1')\n  .fn(t => {\n    [1, 42, 99].forEach(seed => {\n      const p = new PRNG(seed);\n      for (let k = 0; k < 32; k++) {\n        const N = power_of_2(k);\n        for (let i = 0; i < 20; i++) {\n          const sample = p.uniformInt(N);\n          t.expect(\n            0 <= sample && sample < N,\n            `Sample from [0, ${N - 1}] is out of bounds: ${sample}`\n          );\n          t.expect(sample === Math.trunc(sample), `Sample should be an integer: ${sample}`);\n        }\n      }\n    });\n  });\n\ng.test('uniformInt_distribution')\n  .desc('uniformInt outputs are not biased: histogram counts are close to the expected mean')\n  .fn(t => {\n    const p = new PRNG(42);\n    const numBins = 4;\n    const numSamples = 1000;\n    const histogram = Array(numBins).fill(0);\n    for (let i = 0; i < numSamples; i++) {\n      histogram[p.uniformInt(numBins)]++;\n    }\n    // Each bin should have roughly the expected number of hits.\n    const meanCount = numSamples / numBins;\n    const toleratedMin = meanCount * 0.9;\n    const toleratedMax = meanCount * 1.1;\n    histogram.forEach(count => {\n      t.expect(count >= toleratedMin, `count is ${count}, less than tolerated min ${toleratedMin}`);\n      t.expect(count <= toleratedMax, `count is ${count}, more than tolerated min ${toleratedMax}`);\n    });\n  });\n\ng.test('uniformInt_bias')\n  .desc('uniformInt does not demonstrate bias expected of randInt() % N')\n  .fn(t => {\n    const p = new PRNG(43);\n    // A bad random generator would be: randomU32() % N.\n    // For N = (2**32) * 2/3, we would expect the result to be less than N/2 about 2/3 of the time.\n    const badN = Math.trunc((1 << 15) * ((1 << 16) / 3));\n    const halfN = badN / 2;\n    let numSmall = 0;\n    const numSamples = 1000;\n    for (let i = 0; i < numSamples; i++) {\n      const val = p.uniformInt(badN);\n      if (val < halfN) {\n        numSmall++;\n      }\n    }\n    t.expect(\n      numSmall > 0.45 * numSamples,\n      `uniformInt is biased: too few small samples (${numSmall} / ${numSamples})`\n    );\n    t.expect(\n      numSmall < 0.55 * numSamples,\n      `uniformInt is biased: too many big samples (${numSamples - numSmall} / ${numSamples})`\n    );\n  });\n"],"mappings":";;GAAA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAAC,CAED,SAASC,aAAa,QAAQ,mCAAmC;AACjE,SAASC,YAAY,QAAQ,wBAAwB;AACrD,SAASC,IAAI,QAAQ,wBAAwB;;AAE7C,SAASC,QAAQ,QAAQ,gBAAgB;;AAEzC,OAAO,MAAMC,CAAC,GAAGJ,aAAa,CAACG,QAAQ,CAAC;;AAExC;AACA;AACA;AACA;;AAEA;AACA;AACAC,CAAC,CAACC,IAAI,CAAC,OAAO,CAAC,CAACC,EAAE,CAAC,CAAAC,CAAC,KAAI;EACtB,MAAMC,CAAC,GAAG,IAAIN,IAAI,CAAC,CAAC,CAAC;;EAErB,MAAMO,QAAQ,GAAG;EACf,UAAU,EAAE,SAAS,EAAG,UAAU,EAAE,UAAU,EAAE,UAAU;EAC1D,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,SAAS;EACzD,SAAS,EAAG,UAAU,EAAE,SAAS,EAAG,UAAU,EAAE,UAAU;EAC1D,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,QAAQ;EACxD,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;EAC1D,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,SAAS;EACzD,SAAS,EAAG,SAAS,EAAG,SAAS,EAAG,SAAS,EAAG,UAAU;EAC1D,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,SAAS,EAAG,UAAU;EAC1D,UAAU,EAAE,UAAU,EAAE,QAAQ,EAAG,SAAS,EAAI,SAAS;EACzD,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,SAAS,EAAG,UAAU,CAC3D;;EACDA,QAAQ,CAACC,OAAO,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;IACzB,MAAMC,GAAG,GAAGL,CAAC,CAACM,SAAS,CAAC,CAAC;IACzBP,CAAC,CAACQ,MAAM;MACNF,GAAG,KAAKJ,QAAQ,CAACG,CAAC,CAAC;MAClB,+BAA8BA,CAAE,qBAAoBC,GAAI,eAAcJ,QAAQ,CAACG,CAAC,CAAE;IACrF,CAAC;EACH,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AACA;AACAR,CAAC,CAACC,IAAI,CAAC,sBAAsB,CAAC,CAACC,EAAE,CAAC,CAAAC,CAAC,KAAI;EACrCN,YAAY,CAAC,CAAC,CAACS,OAAO,CAAC,CAAAM,IAAI,KAAI;IAC7B,MAAMC,GAAG,GAAG,IAAIf,IAAI,CAACc,IAAI,CAAC;IAC1B,MAAME,GAAG,GAAG,IAAIhB,IAAI,CAACc,IAAI,CAAC;IAC1B,KAAK,IAAIJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,EAAEA,CAAC,EAAE,EAAE;MAC7B,MAAMO,OAAO,GAAGF,GAAG,CAACG,MAAM,CAAC,CAAC;MAC5B,MAAMC,OAAO,GAAGH,GAAG,CAACE,MAAM,CAAC,CAAC;MAC5Bb,CAAC,CAACQ,MAAM;QACNI,OAAO,KAAKE,OAAO;QAClB,YAAWL,IAAK,SAAQJ,CAAE,wCAAuCO,OAAQ,OAAME,OAAQ;MAC1F,CAAC;IACH;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEFjB,CAAC,CAACC,IAAI,CAAC,yBAAyB,CAAC,CAACC,EAAE,CAAC,CAAAC,CAAC,KAAI;EACxCN,YAAY,CAAC,CAAC,CAACS,OAAO,CAAC,CAAAM,IAAI,KAAI;IAC7B,MAAMC,GAAG,GAAG,IAAIf,IAAI,CAACc,IAAI,CAAC;IAC1B,MAAME,GAAG,GAAG,IAAIhB,IAAI,CAACc,IAAI,CAAC;IAC1B,KAAK,IAAIJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,EAAEA,CAAC,EAAE,EAAE;MAC7B,MAAMO,OAAO,GAAGF,GAAG,CAACH,SAAS,CAAC,CAAC;MAC/B,MAAMO,OAAO,GAAGH,GAAG,CAACJ,SAAS,CAAC,CAAC;MAC/BP,CAAC,CAACQ,MAAM;QACNI,OAAO,KAAKE,OAAO;QAClB,YAAWL,IAAK,SAAQJ,CAAE,wCAAuCO,OAAQ,OAAME,OAAQ;MAC1F,CAAC;IACH;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AACA,SAASC,UAAUA,CAACC,CAAS,EAAE;EAC7B;EACA;EACA,IAAIA,CAAC,GAAG,EAAE,EAAE;IACV,OAAO,CAAC,IAAIA,CAAC;EACf;EACA,OAAO,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,IAAKA,CAAC,GAAG,EAAG,CAAC;AACpC;;AAEAnB,CAAC,CAACC,IAAI,CAAC,kBAAkB,CAAC;AACvBmB,IAAI,CAAC,gDAAgD,CAAC;AACtDlB,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAACG,OAAO,CAAC,CAAAM,IAAI,KAAI;IAC1B,MAAMR,CAAC,GAAG,IAAIN,IAAI,CAACc,IAAI,CAAC;IACxB,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;MAC3B,MAAME,CAAC,GAAGH,UAAU,CAACC,CAAC,CAAC;MACvB,KAAK,IAAIX,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;QAC3B,MAAMc,MAAM,GAAGlB,CAAC,CAACmB,UAAU,CAACF,CAAC,CAAC;QAC9BlB,CAAC,CAACQ,MAAM;UACN,CAAC,IAAIW,MAAM,IAAIA,MAAM,GAAGD,CAAC;UACxB,mBAAkBA,CAAC,GAAG,CAAE,uBAAsBC,MAAO;QACxD,CAAC;QACDnB,CAAC,CAACQ,MAAM,CAACW,MAAM,KAAKE,IAAI,CAACC,KAAK,CAACH,MAAM,CAAC,EAAG,gCAA+BA,MAAO,EAAC,CAAC;MACnF;IACF;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEJtB,CAAC,CAACC,IAAI,CAAC,yBAAyB,CAAC;AAC9BmB,IAAI,CAAC,oFAAoF,CAAC;AAC1FlB,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAMC,CAAC,GAAG,IAAIN,IAAI,CAAC,EAAE,CAAC;EACtB,MAAM4B,OAAO,GAAG,CAAC;EACjB,MAAMC,UAAU,GAAG,IAAI;EACvB,MAAMC,SAAS,GAAGC,KAAK,CAACH,OAAO,CAAC,CAACI,IAAI,CAAC,CAAC,CAAC;EACxC,KAAK,IAAItB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGmB,UAAU,EAAEnB,CAAC,EAAE,EAAE;IACnCoB,SAAS,CAACxB,CAAC,CAACmB,UAAU,CAACG,OAAO,CAAC,CAAC,EAAE;EACpC;EACA;EACA,MAAMK,SAAS,GAAGJ,UAAU,GAAGD,OAAO;EACtC,MAAMM,YAAY,GAAGD,SAAS,GAAG,GAAG;EACpC,MAAME,YAAY,GAAGF,SAAS,GAAG,GAAG;EACpCH,SAAS,CAACtB,OAAO,CAAC,CAAA4B,KAAK,KAAI;IACzB/B,CAAC,CAACQ,MAAM,CAACuB,KAAK,IAAIF,YAAY,EAAG,YAAWE,KAAM,6BAA4BF,YAAa,EAAC,CAAC;IAC7F7B,CAAC,CAACQ,MAAM,CAACuB,KAAK,IAAID,YAAY,EAAG,YAAWC,KAAM,6BAA4BD,YAAa,EAAC,CAAC;EAC/F,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEJjC,CAAC,CAACC,IAAI,CAAC,iBAAiB,CAAC;AACtBmB,IAAI,CAAC,gEAAgE,CAAC;AACtElB,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAMC,CAAC,GAAG,IAAIN,IAAI,CAAC,EAAE,CAAC;EACtB;EACA;EACA,MAAMqC,IAAI,GAAGX,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;EACpD,MAAMW,KAAK,GAAGD,IAAI,GAAG,CAAC;EACtB,IAAIE,QAAQ,GAAG,CAAC;EAChB,MAAMV,UAAU,GAAG,IAAI;EACvB,KAAK,IAAInB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGmB,UAAU,EAAEnB,CAAC,EAAE,EAAE;IACnC,MAAMC,GAAG,GAAGL,CAAC,CAACmB,UAAU,CAACY,IAAI,CAAC;IAC9B,IAAI1B,GAAG,GAAG2B,KAAK,EAAE;MACfC,QAAQ,EAAE;IACZ;EACF;EACAlC,CAAC,CAACQ,MAAM;IACN0B,QAAQ,GAAG,IAAI,GAAGV,UAAU;IAC3B,gDAA+CU,QAAS,MAAKV,UAAW;EAC3E,CAAC;EACDxB,CAAC,CAACQ,MAAM;IACN0B,QAAQ,GAAG,IAAI,GAAGV,UAAU;IAC3B,+CAA8CA,UAAU,GAAGU,QAAS,MAAKV,UAAW;EACvF,CAAC;AACH,CAAC,CAAC"}