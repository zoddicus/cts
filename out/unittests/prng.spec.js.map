{"version":3,"file":"prng.spec.js","names":["description","makeTestGroup","fullU32Range","PRNG","UnitTest","g","test","fn","t","p","expected","forEach","_","i","val","randomU32","expect","seed","lhs","rhs","lhs_val","random","rhs_val"],"sources":["../../src/unittests/prng.spec.ts"],"sourcesContent":["export const description = `\nUnittests for the pseudo random number generator\n`;\n\nimport { makeTestGroup } from '../common/framework/test_group.js';\nimport { fullU32Range } from '../webgpu/util/math.js';\nimport { PRNG } from '../webgpu/util/prng.js';\n\nimport { UnitTest } from './unit_test.js';\n\nexport const g = makeTestGroup(UnitTest);\n\n// There exist more formal tests for the quality of random number generators\n// that are out of the scope for testing here (and are checked against the\n// original C implementation).\n// These tests are just intended to be smoke tests for implementation.\n\n// Test against the reference u32 values from the original C implementation\n// https://github.com/MersenneTwister-Lab/TinyMT/blob/master/tinymt/check32.out.txt\ng.test('check').fn(t => {\n  const p = new PRNG(1);\n  // prettier-ignore\n  const expected = [\n    2545341989, 981918433,  3715302833, 2387538352, 3591001365,\n    3820442102, 2114400566, 2196103051, 2783359912, 764534509,\n    643179475,  1822416315, 881558334,  4207026366, 3690273640,\n    3240535687, 2921447122, 3984931427, 4092394160, 44209675,\n    2188315343, 2908663843, 1834519336, 3774670961, 3019990707,\n    4065554902, 1239765502, 4035716197, 3412127188, 552822483,\n    161364450,  353727785,  140085994,  149132008,  2547770827,\n    4064042525, 4078297538, 2057335507, 622384752,  2041665899,\n    2193913817, 1080849512, 33160901,  662956935,   642999063,\n    3384709977, 1723175122, 3866752252, 521822317,  2292524454,\n  ];\n  expected.forEach((_, i) => {\n    const val = p.randomU32();\n    t.expect(\n      val === expected[i],\n      `PRNG(1) failed produced the ${i}th expected item, ${val} instead of ${expected[i]})`\n    );\n  });\n});\n\n// Prove that generator is deterministic for at least 1000 values with different\n// seeds.\ng.test('deterministic_random').fn(t => {\n  fullU32Range().forEach(seed => {\n    const lhs = new PRNG(seed);\n    const rhs = new PRNG(seed);\n    for (let i = 0; i < 1000; i++) {\n      const lhs_val = lhs.random();\n      const rhs_val = rhs.random();\n      t.expect(\n        lhs_val === rhs_val,\n        `For seed ${seed}, the ${i}th item, PRNG was non-deterministic (${lhs_val} vs ${rhs_val})`\n      );\n    }\n  });\n});\n\ng.test('deterministic_randomU32').fn(t => {\n  fullU32Range().forEach(seed => {\n    const lhs = new PRNG(seed);\n    const rhs = new PRNG(seed);\n    for (let i = 0; i < 1000; i++) {\n      const lhs_val = lhs.randomU32();\n      const rhs_val = rhs.randomU32();\n      t.expect(\n        lhs_val === rhs_val,\n        `For seed ${seed}, the ${i}th item, PRNG was non-deterministic (${lhs_val} vs ${rhs_val})`\n      );\n    }\n  });\n});\n"],"mappings":"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"}