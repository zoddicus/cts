{"version":3,"file":"texture_ok.spec.js","names":["description","makeTestGroup","TexelView","findFailedPixels","UnitTest","F","test","act","exp","expect","replace","g","desc","params","u","combineWithParams","format","actual","Uint8Array","expected","isSame","Float32Array","parseFloat","Uint32Array","fn","t","actualData","buffer","expectedData","actTexelView","fromTextureDataByReference","bytesPerRow","byteLength","rowsPerImage","subrectOrigin","subrectSize","expTexelView","zero","x","y","z","failedPixelsMessage","width","height","depthOrArrayLayers","maxFractionalDiff"],"sources":["../../src/unittests/texture_ok.spec.ts"],"sourcesContent":["export const description = `\nTest for texture_ok utils.\n`;\n\nimport { makeTestGroup } from '../common/framework/test_group.js';\nimport { RegularTextureFormat } from '../webgpu/format_info.js';\nimport { TexelView } from '../webgpu/util/texture/texel_view.js';\nimport { findFailedPixels } from '../webgpu/util/texture/texture_ok.js';\n\nimport { UnitTest } from './unit_test.js';\n\nclass F extends UnitTest {\n  test(act: string, exp: string): void {\n    this.expect(act === exp, 'got: ' + act.replace('\\n', '⏎'));\n  }\n}\n\nexport const g = makeTestGroup(F);\ng.test('findFailedPixels')\n  .desc(\n    `\n    Test findFailedPixels passes what is expected to pass and fails what is expected\n    to fail. For example NaN === NaN should be true in a texture that allows NaN.\n    2 different representations of the same rgb9e5ufloat should compare as equal.\n    etc...\n  `\n  )\n  .params(u =>\n    u.combineWithParams([\n      // Sanity Check\n      {\n        format: 'rgba8unorm' as RegularTextureFormat,\n        actual: new Uint8Array([0x00, 0x40, 0x80, 0xff]),\n        expected: new Uint8Array([0x00, 0x40, 0x80, 0xff]),\n        isSame: true,\n      },\n      // Slightly different values\n      {\n        format: 'rgba8unorm' as RegularTextureFormat,\n        actual: new Uint8Array([0x00, 0x40, 0x80, 0xff]),\n        expected: new Uint8Array([0x00, 0x40, 0x81, 0xff]),\n        isSame: false,\n      },\n      // Different representations of the same value\n      {\n        format: 'rgb9e5ufloat' as RegularTextureFormat,\n        actual: new Uint8Array([0x78, 0x56, 0x34, 0x12]),\n        expected: new Uint8Array([0xf0, 0xac, 0x68, 0x0c]),\n        isSame: true,\n      },\n      // Slightly different values\n      {\n        format: 'rgb9e5ufloat' as RegularTextureFormat,\n        actual: new Uint8Array([0x78, 0x56, 0x34, 0x12]),\n        expected: new Uint8Array([0xf1, 0xac, 0x68, 0x0c]),\n        isSame: false,\n      },\n      // Test NaN === NaN\n      {\n        format: 'r32float' as RegularTextureFormat,\n        actual: new Float32Array([parseFloat('abc')]),\n        expected: new Float32Array([parseFloat('def')]),\n        isSame: true,\n      },\n      // Sanity Check\n      {\n        format: 'r32float' as RegularTextureFormat,\n        actual: new Float32Array([1.23]),\n        expected: new Float32Array([1.23]),\n        isSame: true,\n      },\n      // Slightly different values.\n      {\n        format: 'r32float' as RegularTextureFormat,\n        actual: new Uint32Array([0x3f9d70a4]),\n        expected: new Uint32Array([0x3f9d70a5]),\n        isSame: false,\n      },\n      // Slightly different\n      {\n        format: 'rg11b10ufloat' as RegularTextureFormat,\n        actual: new Uint32Array([0x3ce]),\n        expected: new Uint32Array([0x3cf]),\n        isSame: false,\n      },\n      // NaN === NaN (red)\n      {\n        format: 'rg11b10ufloat' as RegularTextureFormat,\n        actual: new Uint32Array([0b11111000000]),\n        expected: new Uint32Array([0b11111000000]),\n        isSame: true,\n      },\n      // NaN === NaN (green)\n      {\n        format: 'rg11b10ufloat' as RegularTextureFormat,\n        actual: new Uint32Array([0b11111000000_00000000000]),\n        expected: new Uint32Array([0b11111000000_00000000000]),\n        isSame: true,\n      },\n      // NaN === NaN (blue)\n      {\n        format: 'rg11b10ufloat' as RegularTextureFormat,\n        actual: new Uint32Array([0b1111100000_00000000000_00000000000]),\n        expected: new Uint32Array([0b1111100000_00000000000_00000000000]),\n        isSame: true,\n      },\n    ])\n  )\n  .fn(t => {\n    const { format, actual, expected, isSame } = t.params;\n    const actualData = new Uint8Array(actual.buffer);\n    const expectedData = new Uint8Array(expected.buffer);\n\n    const actTexelView = TexelView.fromTextureDataByReference(format, actualData, {\n      bytesPerRow: actualData.byteLength,\n      rowsPerImage: 1,\n      subrectOrigin: [0, 0, 0],\n      subrectSize: [1, 1, 1],\n    });\n    const expTexelView = TexelView.fromTextureDataByReference(format, expectedData, {\n      bytesPerRow: expectedData.byteLength,\n      rowsPerImage: 1,\n      subrectOrigin: [0, 0, 0],\n      subrectSize: [1, 1, 1],\n    });\n\n    const zero = { x: 0, y: 0, z: 0 };\n    const failedPixelsMessage = findFailedPixels(\n      format,\n      zero,\n      { width: 1, height: 1, depthOrArrayLayers: 1 },\n      { actTexelView, expTexelView },\n      {\n        maxFractionalDiff: 0,\n      }\n    );\n\n    t.expect(isSame === !failedPixelsMessage, failedPixelsMessage);\n  });\n"],"mappings":"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"}