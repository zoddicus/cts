{"version":3,"file":"texture_ok.spec.js","names":["description","makeTestGroup","typedArrayFromParam","typedArrayParam","TexelView","findFailedPixels","UnitTest","F","test","act","exp","expect","replace","g","desc","params","u","combineWithParams","format","actual","expected","isSame","parseFloat","fn","t","actualData","Uint8Array","buffer","expectedData","actTexelView","fromTextureDataByReference","bytesPerRow","byteLength","rowsPerImage","subrectOrigin","subrectSize","expTexelView","zero","x","y","z","failedPixelsMessage","width","height","depthOrArrayLayers","maxFractionalDiff"],"sources":["../../src/unittests/texture_ok.spec.ts"],"sourcesContent":["export const description = `\nTest for texture_ok utils.\n`;\n\nimport { makeTestGroup } from '../common/framework/test_group.js';\nimport { typedArrayFromParam, typedArrayParam } from '../common/util/util.js';\nimport { TexelView } from '../webgpu/util/texture/texel_view.js';\nimport { findFailedPixels } from '../webgpu/util/texture/texture_ok.js';\n\nimport { UnitTest } from './unit_test.js';\n\nclass F extends UnitTest {\n  test(act: string, exp: string): void {\n    this.expect(act === exp, 'got: ' + act.replace('\\n', '⏎'));\n  }\n}\n\nexport const g = makeTestGroup(F);\ng.test('findFailedPixels')\n  .desc(\n    `\n    Test findFailedPixels passes what is expected to pass and fails what is expected\n    to fail. For example NaN === NaN should be true in a texture that allows NaN.\n    2 different representations of the same rgb9e5ufloat should compare as equal.\n    etc...\n  `\n  )\n  .params(u =>\n    u.combineWithParams([\n      // Sanity Check\n      {\n        format: 'rgba8unorm',\n        actual: typedArrayParam('Uint8Array', [0x00, 0x40, 0x80, 0xff]),\n        expected: typedArrayParam('Uint8Array', [0x00, 0x40, 0x80, 0xff]),\n        isSame: true,\n      },\n      // Slightly different values\n      {\n        format: 'rgba8unorm',\n        actual: typedArrayParam('Uint8Array', [0x00, 0x40, 0x80, 0xff]),\n        expected: typedArrayParam('Uint8Array', [0x00, 0x40, 0x81, 0xff]),\n        isSame: false,\n      },\n      // Different representations of the same value\n      {\n        format: 'rgb9e5ufloat',\n        actual: typedArrayParam('Uint8Array', [0x78, 0x56, 0x34, 0x12]),\n        expected: typedArrayParam('Uint8Array', [0xf0, 0xac, 0x68, 0x0c]),\n        isSame: true,\n      },\n      // Slightly different values\n      {\n        format: 'rgb9e5ufloat',\n        actual: typedArrayParam('Uint8Array', [0x78, 0x56, 0x34, 0x12]),\n        expected: typedArrayParam('Uint8Array', [0xf1, 0xac, 0x68, 0x0c]),\n        isSame: false,\n      },\n      // Test NaN === NaN\n      {\n        format: 'r32float',\n        actual: typedArrayParam('Float32Array', [parseFloat('abc')]),\n        expected: typedArrayParam('Float32Array', [parseFloat('def')]),\n        isSame: true,\n      },\n      // Sanity Check\n      {\n        format: 'r32float',\n        actual: typedArrayParam('Float32Array', [1.23]),\n        expected: typedArrayParam('Float32Array', [1.23]),\n        isSame: true,\n      },\n      // Slightly different values.\n      {\n        format: 'r32float',\n        actual: typedArrayParam('Uint32Array', [0x3f9d70a4]),\n        expected: typedArrayParam('Uint32Array', [0x3f9d70a5]),\n        isSame: false,\n      },\n      // Slightly different\n      {\n        format: 'rg11b10ufloat',\n        actual: typedArrayParam('Uint32Array', [0x3ce]),\n        expected: typedArrayParam('Uint32Array', [0x3cf]),\n        isSame: false,\n      },\n      // Positive.Infinity === Positive.Infinity (red)\n      {\n        format: 'rg11b10ufloat',\n        actual: typedArrayParam('Uint32Array', [0b11111000000]),\n        expected: typedArrayParam('Uint32Array', [0b11111000000]),\n        isSame: true,\n      },\n      // Positive.Infinity === Positive.Infinity (green)\n      {\n        format: 'rg11b10ufloat',\n        actual: typedArrayParam('Uint32Array', [0b11111000000_00000000000]),\n        expected: typedArrayParam('Uint32Array', [0b11111000000_00000000000]),\n        isSame: true,\n      },\n      // Positive.Infinity === Positive.Infinity (blue)\n      {\n        format: 'rg11b10ufloat',\n        actual: typedArrayParam('Uint32Array', [0b1111100000_00000000000_00000000000]),\n        expected: typedArrayParam('Uint32Array', [0b1111100000_00000000000_00000000000]),\n        isSame: true,\n      },\n      // NaN === NaN (red)\n      {\n        format: 'rg11b10ufloat',\n        actual: typedArrayParam('Uint32Array', [0b11111000001]),\n        expected: typedArrayParam('Uint32Array', [0b11111000010]),\n        isSame: true,\n      },\n      // NaN === NaN (green)\n      {\n        format: 'rg11b10ufloat',\n        actual: typedArrayParam('Uint32Array', [0b11111000100_00000000000]),\n        expected: typedArrayParam('Uint32Array', [0b11111001000_00000000000]),\n        isSame: true,\n      },\n      // NaN === NaN (blue)\n      {\n        format: 'rg11b10ufloat',\n        actual: typedArrayParam('Uint32Array', [0b1111110000_00000000000_00000000000]),\n        expected: typedArrayParam('Uint32Array', [0b1111101000_00000000000_00000000000]),\n        isSame: true,\n      },\n    ] as const)\n  )\n  .fn(t => {\n    const { format, actual, expected, isSame } = t.params;\n    const actualData = new Uint8Array(typedArrayFromParam(actual).buffer);\n    const expectedData = new Uint8Array(typedArrayFromParam(expected).buffer);\n\n    const actTexelView = TexelView.fromTextureDataByReference(format, actualData, {\n      bytesPerRow: actualData.byteLength,\n      rowsPerImage: 1,\n      subrectOrigin: [0, 0, 0],\n      subrectSize: [1, 1, 1],\n    });\n    const expTexelView = TexelView.fromTextureDataByReference(format, expectedData, {\n      bytesPerRow: expectedData.byteLength,\n      rowsPerImage: 1,\n      subrectOrigin: [0, 0, 0],\n      subrectSize: [1, 1, 1],\n    });\n\n    const zero = { x: 0, y: 0, z: 0 };\n    const failedPixelsMessage = findFailedPixels(\n      format,\n      zero,\n      { width: 1, height: 1, depthOrArrayLayers: 1 },\n      { actTexelView, expTexelView },\n      {\n        maxFractionalDiff: 0,\n      }\n    );\n\n    t.expect(isSame === !failedPixelsMessage, failedPixelsMessage);\n  });\n"],"mappings":"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"}